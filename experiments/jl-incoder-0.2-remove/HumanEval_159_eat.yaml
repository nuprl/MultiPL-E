name: HumanEval_159_eat
language: jl
prompt: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
  \ number of carrots,\n    but now you need to eat more carrots to complete the day's\
  \ meals.\n    you should return an array of [ total number of eaten carrots after\
  \ your meals,\n                                    the number of carrots left after\
  \ your meals ]\n    if there are not enough remaining carrots, you will eat all\
  \ remaining carrots, but will still be hungry.\n    \n    Example:\n           \
  \         \n    Variables:\n    @number : integer\n        the number of carrots\
  \ that you have eaten.\n    @need : integer\n        the number of carrots that\
  \ you need to eat.\n    @remaining : integer\n        the number of remaining carrots\
  \ thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0\
  \ <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n\
  function eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6,\
  \ 10) == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1,\
  \ 10, 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
  \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
completions: ["    if number < 0 || number > 1000 || need < 0 || need > 1000 || remaining\
    \ < 0 || remaining > 1000\n        error(\"Invalid input\")\n    end\n    \n \
    \   carrots = zeros(Int64, 2)\n    carrots[1] = number\n    carrots[2] = remaining\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    ", "    if number < 0 || number > 1000 || need\
    \ < 0 || need > 1000 || remaining < 0 || remaining > 1000 \n        error(\"Invalid\
    \ input\") \n    else \n        Vector{Int64}([number, need, remaining]) \n  \
    \  end\nend\n</cell>\n<code language=julia-1.4>\n# Test Cases\n@test eat(1, 3,\
    \ 5) == [1, 3, 5]\n@test eat(2, 3, 5) == [2, 3, 5]\n@test eat(3, 3, 5) == [3,\
    \ 3, 5]\n@test eat(4, 3, 5) == [4, 3, 5]\n@test eat(5, 3, 5) == [5, 3, 5]\n@test\
    \ eat(6, 3, 5) == [6, 3, 5]\n@test eat(7, 3, 5) == [7, 3, 5]\n@test eat(8, 3,\
    \ 5) == [8, 3, 5]\n@test eat(9, 3, 5) == [9, 3, 5]\n@test eat(10, 3, 5) == [10,\
    \ 3, 5]\n@test eat(11, 3, 5) == [11, 3, 5]\n@test eat(12, 3, 5) == [12, 3, 5]\n\
    @test eat(13, 3, 5) == [13, 3, 5]\n@test eat(14, 3, 5) == [14, 3, 5]\n@test eat(15,\
    \ 3, 5) == [15, 3, 5]\n@test eat(16, 3, 5) == [16, 3, 5]\n@test eat(17, 3, 5)\
    \ == [17, 3, 5]\n@test eat(18, 3, 5) == [18, 3, 5]\n@test eat(19, 3, 5) == [19,\
    \ 3, 5]\n@test eat(20, 3, 5) == [20, 3, 5]\n@test eat(21, 3, 5) == [21, 3, 5]\n\
    @test eat(22, 3, 5) == [22, 3, 5]\n@test eat(23, 3, 5) == [23, 3, 5]\n@test eat(24,\
    \ 3, 5) == [24, 3, 5]\n@test eat(25, 3, 5) == [25, 3, 5]\n@test eat(26, 3, 5)\
    \ == [26, 3, 5]\n@test eat(27, 3, 5) == [27, 3, 5]\n@test eat(28, 3, 5) == [28,\
    \ 3, 5]\n@test eat(29, 3, 5) == [29, 3, 5]\n@test eat(30, 3, 5) == [30, 3, 5]\n\
    @test eat(31, 3, 5) == [31, 3, 5]\n@test eat(32, 3, 5) == [32, 3, 5]\n@test eat(33,\
    \ 3, 5) == [33, 3, 5]\n@test eat(34, 3, 5) == [34, 3, 5]\n@test eat(35, 3, 5)\
    \ == [35, 3, 5]\n@", "    \n    if number <= 0\n        error(\"number must be\
    \ positive\")\n    end\n    if need <= 0\n        error(\"need must be positive\"\
    )\n    end\n    if remaining <= 0\n        error(\"remaining must be positive\"\
    )\n    end\n    \n    if number == 0\n        return Vector{Int64}()\n    end\n\
    \    \n    if remaining == 0\n        return Vector{Int64}([number, need])\n \
    \   end\n    \n    if number > remaining\n        return Vector{Int64}([number,\
    \ need])\n    end\n    \n    if need == 0\n        return Vector{Int64}([number,\
    \ remaining])\n    end\n    \n    if number > need\n        return Vector{Int64}([number,\
    \ remaining])\n    end\n    \n    if number == need\n        return Vector{Int64}([number,\
    \ remaining])\n    end\n    \n    return Vector{Int64}([number, need])\nend\n\
    </cell>\n<code language=julia-1.3>\neat(10, 10, 10)\n</cell>\n<code language=julia-1.3>\n\
    eat(10, 10, 0)\n</cell>\n<code language=julia-1.3>\neat(10, 10, 1)\n</cell>\n\
    <code language=julia-1.3>\neat(10, 10, 2)\n</cell>\n<code language=julia-1.3>\n\
    eat(10, 10, 3)\n</cell>\n<code language=julia-1.3>\neat(10, 10, 4)\n</cell>\n\
    <code language=julia-1.3>\neat(10, 10, 5)\n</cell>\n<code language=julia-1.3>\n\
    eat(10, 10, 6)\n</cell>\n<code language=julia-1.3>\neat(10, 10, 7)\n</cell>\n\
    <code language=julia-1.3>\neat(10, 10, 8)\n</cell>\n<code language=julia-1.3>\n\
    eat(10, 10, 9)\n</cell>\n<code language=julia-1.3>\neat(10, 10, 10)\n</cell>\n\
    <code language=julia-1.3>\neat(10, 10, 11)\n</cell>\n<code language=julia-1.3>\n\
    eat(10, 10, 12)\n</cell>\n<code language=julia-1.3>\neat(10, 10, 13)\n</cell>\n\
    <code language=julia-1.3>\neat(10, 10, 14)\n</cell>\n<code language=julia-1.3>\n\
    eat(10, 10, 15)\n</cell>\n<code language=julia-1.3>\neat(10, 10, 16)\n</cell>\n\
    <code language=julia-1.3>\neat(10, 10, 17)\n</cell>\n<code language=julia-1.3>\n\
    eat(10, 10, 18)\n</cell>\n<code language=julia-1.3>\neat(10, 10, 19)", "    if\
    \ number <= 0\n        error(\"The number of carrots you have eaten must be positive\"\
    )\n    end\n    if need <= 0\n        error(\"The number of carrots you have need\
    \ to eat must be positive\")\n    end\n    if remaining <= 0\n        error(\"\
    The number of carrots you have left to eat must be positive\")\n    end\n    \n\
    \    carrots = zeros(Int64, 2)\n    carrots[1] = number\n    carrots[2] = remaining\n\
    \    \n    carrots = carrots[2:end]\n    \n    if carrots[1] == 0 && carrots[2]\
    \ > 0\n        carrots[1] = carrots[2]\n        carrots[2] = 0\n    end\n    \n\
    \    return carrots\nend\n</cell>\n<code language=julia-1.5>\neat(5, 10, 10)\n\
    </cell>\n<text>\nProblem 3\nWrite a function called hungry that takes two integers\
    \ representing a number of carrots you have eaten and number of carrots left to\
    \ eat, and returns true if you have eaten enough carrots to complete the day's\
    \ meals, and false otherwise. \nIf there are not enough carrots left to eat, return\
    \ false as well.\nIf there are not enough carrots left to eat, return false as\
    \ well.\nIf there are not enough carrots left to eat, return false as well.\n\
    If there are not enough carrots left to eat, return false as well.\nIf there are\
    \ not enough carrots left to eat, return false as well.\nIf there are not enough\
    \ carrots left to eat, return false as well.\nIf there are not enough carrots\
    \ left to eat, return false as well.\nIf there are not enough carrots left to\
    \ eat, return false as well.\nIf there are not enough carrots left to eat, return\
    \ false as well.\nIf there are not enough carrots left to eat, return false as\
    \ well.\nIf there are not enough carrots left to eat, return false as well.\n\
    If there are not enough carrots left to eat, return false as well.\nIf there are\
    \ not enough carrots left to eat, return false as well.\nIf there are not enough\
    \ carrots left to eat, return false as well.\nIf there are not enough carrots\
    \ left to eat, return false as well.\nIf there are not enough carrots left to\
    \ eat, return false as well.\nIf there are not enough carrots left to eat, return\
    \ false as well.\nIf there are not enough carrots left to eat, return false as\
    \ well.\nIf there are not enough carrots lef", "    if number < 0 || number >\
    \ 1000 || need < 0 || need > 1000 || remaining < 0 || remaining > 1000\n     \
    \   return Vector{Int64}()\n    end\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   if number < need \n        error(\"Not enough carrots left\")\n    elseif\
    \ number == 0\n        error(\"No more carrots left\")\n    elseif remaining <\
    \ 0\n        error(\"Not enough carrots left\")\n    else\n        Vector{Int64}([number,\
    \ remaining - number])\n    end\nend\n</cell>\n<code language=julia-1.5>\neat(10,\
    \ 5, 0)\n</cell>\n<code language=julia-1.5>\neat(10, 5, 10)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 5, 100)\n</cell>\n<code language=julia-1.5>\neat(10, 5, 1000)\n</cell>\n\
    <code language=julia-1.5>\neat(10, 5, 10000)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 5, 100000)\n</cell>\n<code language=julia-1.5>\neat(10, 5, 1000000)\n\
    </cell>\n<code language=julia-1.5>\neat(10, 5, 10000000)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 5, 100000000)\n</cell>\n<code language=julia-1.5>\neat(10, 5, 1000000000)\n\
    </cell>\n<code language=julia-1.5>\neat(10, 5, 10000000000)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 5, 100000000000)\n</cell>\n<code language=julia-1.5>\neat(10, 5, 1000000000000)\n\
    </cell>\n<code language=julia-1.5>\neat(10, 5, 1000000000001)\n</cell>\n<code\
    \ language=julia-1.5>\neat(10, 5, 1000000000002)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 5, 1000000000003)\n</cell>\n<code language=julia-1.5>\neat(10, 5, 1000000000004)\n\
    </cell>\n<code language=julia-1.5>\neat(10, 5, 1000000000005)\n</cell>\n<code\
    \ language=julia-1.5>\neat(10, 5, 1000000000006)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 5, 1000000000007)\n</cell>\n<code language=julia-1.5>\neat(10, 5, 1000000000008)\n\
    </cell>\n<code language=julia-1.5>\neat(10, 5, 1000000000009)\n</cell>\n<code\
    \ language=julia-1.5>\neat(10, 5, 1000000000010)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 5, 1000000000011)\n</cell>\n<code language=julia-1.5>\neat(10, 5, 1000000000012)",
  "    if number < 0 || number > 1000 || need < 0 || need > 1000 || remaining < 0\
    \ || remaining > 1000\n        error(\"Invalid input\")\n    end\n    \n    if\
    \ number == 0 && remaining == 0\n        return [0, 0]\n    end\n    \n    if\
    \ number == 0 && remaining > 0\n        return [0, remaining - 1]\n    end\n \
    \   \n    if need == 0 && remaining > 0\n        return [number, 0]\n    end\n\
    \    \n    if need == 0 && remaining == 0\n        return [number, 0]\n    end\n\
    \    \n    if number == 0 && remaining == 0\n        return [number, 0]\n    end\n\
    \    \n    if number == 0 && remaining == 0\n        return [number, 0]\n    end\n\
    \    \n    if number == 0 && remaining == 0\n        return [number, 0]\n    end\n\
    \    \n    if number == 0 && remaining == 0\n        return [number, 0]\n    end\n\
    \    \n    if number == 0 && remaining == 0\n        return [number, 0]\n    end\n\
    \    \n    if number == 0 && remaining == 0\n        return [number, 0]\n    end\n\
    \    \n    if number == 0 && remaining == 0\n        return [number, 0]\n    end\n\
    \    \n    if number == 0 && remaining == 0\n        return [number, 0]\n    end\n\
    \    \n    if number == 0 && remaining == 0\n        return [number, 0]\n    end\n\
    \    \n    if number == 0 && remaining == 0\n        return [number, 0]\n    end\n\
    \    \n    if number == 0 && remaining == 0\n        return [number, 0]\n    end\n\
    \    \n    if number == 0 && remaining == 0\n        return [number, 0]\n    end\n\
    \    \n    if number == 0 && remaining == 0\n        return [number, 0]\n    end\n\
    \    \n    if number == 0 && remaining == 0\n        return [number, 0]\n    end\n\
    \    \n    if number == 0 && remaining == 0\n        return [number, 0]\n    end\n\
    \    \n    if number == 0 && remaining == 0\n        return [number, 0]\n    end\n\
    \    \n    if number == 0 && remaining == 0\n        return [number, 0]\n    end\n\
    \    \n    if number == 0 && remaining == 0\n        return [number, 0]\n    end\n\
    \    \n    if number == 0 && remaining == 0\n        return [number, 0]\n    end\n\
    \    \n    if number == 0 && remaining == 0\n        return [number, 0]\n    end\n\
    \    \n    if number == 0 && remaining == 0\n        return [number, 0]\n    end\n\
    \    \n    if number == 0 && remaining == 0\n        return [number, 0]\n    end\n\
    \    \n    if number == 0 && remaining == 0\n        return [number, 0]\n    end\n\
    \    \n    if number == 0 && remaining == 0\n        return [number, 0]\n    end\n\
    \    \n    if number == 0 && remaining == 0\n        return [number, 0]\n    end\n\
    \    \n    if number == 0 && remaining == 0\n        return [number, 0]\n    end\n\
    \    \n    if ", "    if number < 0 || number > 1000 || need < 0 || need > 1000\
    \ || remaining < 0 || remaining > 1000\n        error(\"Invalid input\")\n   \
    \ end\n    \n    carrots = zeros(Int64, 2)\n    carrots[1] = number\n    carrots[2]\
    \ = remaining\n    \n    meals = zeros(Int64, 2)\n    meals[1] = need\n    meals[2]\
    \ = remaining\n    \n    carrots_left = zeros(Int64, 2)\n    carrots_left[1] =\
    \ remaining\n    carrots_left[2] = remaining\n    \n    carrots_left_after_meals\
    \ = zeros(Int64, 2)\n    carrots_left_after_meals[1] = remaining\n    carrots_left_after_meals[2]\
    \ = remaining\n    \n    carrots_left_after_meals[1] = remaining\n    carrots_left_after_meals[2]\
    \ = remaining\n    \n    carrots_left_after_meals[1] = remaining\n    carrots_left_after_meals[2]\
    \ = remaining\n    \n    carrots_left_after_meals[1] = remaining\n    carrots_left_after_meals[2]\
    \ = remaining\n    \n    carrots_left_after_meals[1] = remaining\n    carrots_left_after_meals[2]\
    \ = remaining\n    \n    carrots_left_after_meals[1] = remaining\n    carrots_left_after_meals[2]\
    \ = remaining\n    \n    carrots_left_after_meals[1] = remaining\n    carrots_left_after_meals[2]\
    \ = remaining\n    \n    carrots_left_after_meals[1] = remaining\n    carrots_left_after_meals[2]\
    \ = remaining\n    \n    carrots_left_after_meals[1] = remaining\n    carrots_left_after_meals[2]\
    \ = remaining\n    \n    carrots_left_after_meals[1] = remaining\n    carrots_left_after_meals[2]\
    \ = remaining\n    \n    carrots_left_after_meals[1] = remaining\n    carrots_left_after_meals[2]\
    \ = remaining\n    \n    carrots_left_after_meals[1] = remaining\n    carrots_left_after_meals[2]\
    \ = remaining\n    \n    carrots_left_after_meals[1] = remaining\n    carrots_left_after_meals[2]\
    \ = remaining\n    \n    carrots_left_after_meals[1] = remaining\n    carrots_left_after_meals[2]\
    \ = remaining\n    \n    carrots_left_after_meals[1] = remaining\n    carrots_left_after_meals[2]\
    \ = remaining\n", "    if number < 0 || number > 1000 || need < 0 || need > 1000\
    \ || remaining < 0 || remaining > 1000 \n        error(\"Invalid input\")\n  \
    \  end\n    \n    carrots = zeros(Int64, 2)\n    carrots[1] = number\n    carrots[2]\
    \ = remaining\n    \n    while carrots[1] > 0 && carrots[2] > 0 \n        carrots[1]\
    \ -= 1\n        carrots[2] -= 1\n    end\n    \n    return carrots\nend\n</cell>\n\
    <code language=julia-1.0>\neat(10, 10, 10)\n</cell>\n<text>\nProblem 3\nWrite\
    \ a function called hungry!, which takes in an array of integers and returns an\
    \ array of integers representing the number of carrots you need to eat to complete\
    \ the day's meals.", "    if number < need \n        error(\"number must be greater\
    \ than need\")\n    end\n    if number == 0\n        error(\"number must be greater\
    \ than 0\")\n    end\n    if remaining < 0\n        error(\"remaining must be\
    \ greater than 0\")\n    end\n    \n    carrots = zeros(Int64, 2)\n    carrots[1]\
    \ = number\n    carrots[2] = remaining\n    \n    carrots = carrots[2:end]\n \
    \   \n    return carrots\nend\n</cell>\n<code language=julia-1.5>\neat(10, 10,\
    \ 10)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number of\
    \ carrots left after a meal is completed.\nThe function should take in two parameters:\
    \ the number of carrots you have eaten and the number of carrots left after your\
    \ meals.\nThe function should return an array of two integers, the first integer\
    \ being the number of carrots left after your meals, and the second integer being\
    \ the number of carrots left after your meals.\nThe function should return an\
    \ error if either of the parameters is less than zero.\nThe function should return\
    \ an error if either of the parameters is greater than 1000.\nThe function should\
    \ return an error if either of the parameters is equal to 0.", "    if number\
    \ < need \n        error(\"Not enough carrots to eat\")\n    elseif number > remaining\n\
    \        error(\"Not enough carrots to eat\")\n    else\n        Vector{Int64}([number,\
    \ remaining - number])\n    end\nend\n</cell>\n<code language=julia-1.5>\neat(5,\
    \ 10, 100)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number\
    \ of carrots left after a meal is complete.\nThe function should take in two parameters:\
    \ the number of carrots you have eaten so far, and the number that you need to\
    \ eat.\nThe function should return an array of two elements: the first element\
    \ is the number of carrots left after your meal, and the second element is the\
    \ number of carrots left after your meal.\nThe function should return an error\
    \ if the number of carrots you have eaten is less than the number of carrots needed\
    \ to eat.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if\
    \ number < need \n        error(\"Not enough carrots to eat\")\n    elseif number\
    \ > remaining \n        error(\"Not enough carrots to eat\")\n    elseif number\
    \ == 0\n        error(\"No carrots to eat\")\n    else\n        Vector{Int64}([number,\
    \ remaining - number])\n    end\nend\n</cell>\n<code language=julia-1.5>\neat(5,\
    \ 10, 20)\n</cell>\n<text>\nExercise 2\nWrite a function called eat_all that takes\
    \ three integers as arguments and returns an array of two integers containing\
    \ the number of carrots left after your meals and the number of carrots eaten\
    \ after your meals.", "    if number == 0\n        Vector{Int64}()\n    else\n\
    \        Vector{Int64}(remaining, number - remaining)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n# Test your code\n@assert eat(10, 5, 10) == [10, 5]\n\
    @assert eat(10, 5, 0) == [10, 0]\n@assert eat(10, 5, -1) == [10, 0]\n@assert eat(10,\
    \ 5, 1) == [10, 1]\n@assert eat(10, 5, 2) == [10, 2]\n@assert eat(10, 5, 3) ==\
    \ [10, 3]\n@assert eat(10, 5, 4) == [10, 4]\n@assert eat(10, 5, 5) == [10, 5]\n\
    @assert eat(10, 5, 6) == [10, 6]\n@assert eat(10, 5, 7) == [10, 7]\n@assert eat(10,\
    \ 5, 8) == [10, 8]\n@assert eat(10, 5, 9) == [10, 9]\n@assert eat(10, 5, 10) ==\
    \ [10, 10]\n</cell>\n<text>\nPart 3: Recursive Functions\nA recursive function\
    \ is a function that calls itself. A recursive function can have two types of\
    \ recursive calls: base case and recursive case.", "    if number < need \n  \
    \      error(\"You don't have enough carrots to eat all your needs\")\n    else\
    \ if number == 0\n        error(\"You don't have enough carrots to eat all your\
    \ needs\")\n    else\n        carrots = number\n        carrots_left = remaining\n\
    \        meals = Vector{Int64}()\n        while carrots_left > 0\n           \
    \ meals = meals + 1\n            carrots_left = carrots_left - 1\n        end\n\
    \        return meals, carrots_left\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 5, 10)\n</cell>\n<code language=julia-1.5>\neat(10, 5, 0)\n</cell>\n<code\
    \ language=julia-1.5>\neat(10, 5, 100)\n</cell>\n<code language=julia-1.5>\neat(10,\
    \ 5, 100)\n</cell>\n<code language=julia-1.5>\neat(10, 5, 100)\n</cell>\n<code\
    \ language=julia-1.5>\neat(10, 5, 100)\n</cell>\n<code language=julia-1.5>\neat(10,\
    \ 5, 100)\n</cell>\n<code language=julia-1.5>\neat(10, 5, 100)\n</cell>\n<code\
    \ language=julia-1.5>\neat(10, 5, 100)\n</cell>\n<code language=julia-1.5>\neat(10,\
    \ 5, 100)\n</cell>\n<code language=julia-1.5>\neat(10, 5, 100)\n</cell>\n<code\
    \ language=julia-1.5>\neat(10, 5, 100)\n</cell>\n<code language=julia-1.5>\neat(10,\
    \ 5, 100)\n</cell>\n<code language=julia-1.5>\neat(10, 5, 100)\n</cell>\n<code\
    \ language=julia-1.5>\neat(10, 5, 100)\n</cell>\n<code language=julia-1.5>\neat(10,\
    \ 5, 100)\n</cell>\n<code language=julia-1.5>\neat(10, 5, 100)\n</cell>\n<code\
    \ language=julia-1.5>\neat(10, 5, 100)\n</cell>\n<code language=julia-1.5>\neat(10,\
    \ 5, 100)\n</cell>\n<code language=julia-1.5>\neat(10, 5, 100)\n</cell>\n<code\
    \ language=julia-1.5>\neat(10, 5, 100)\n</cell>\n<code language=julia-1.5>\neat(10,\
    \ 5, 100)\n</cell>\n<code language=julia-1.5>\neat(10, 5, 100)\n</cell>\n<code\
    \ language=julia-1.5>\neat(10, 5, 100)\n</cell>\n<code language=julia-1.5>\neat(10,\
    \ 5, 100)\n</cell", "    if number < 0 || need < 0 || remaining < 0\n        error(\"\
    invalid input\")\n    end\n    \n    if number == 0 && need == 0 && remaining\
    \ == 0\n        return Vector{Int64}()\n    end\n    \n    if number == 0 && need\
    \ == 0 && remaining > 0\n        return Vector{Int64}(remaining)\n    end\n  \
    \  \n    if number == 0 && need > 0 && remaining == 0\n        return Vector{Int64}()\n\
    \    end\n    \n    if number == 0 && need > 0 && remaining > 0\n        return\
    \ Vector{Int64}(remaining)\n    end\n    \n    if number == 0 && need > 0 && remaining\
    \ == 0\n        return Vector{Int64}()\n    end\n    \n    if number == 0 && need\
    \ == 0 && remaining > 0\n        return Vector{Int64}(remaining)\n    end\n  \
    \  \n    if number == 0 && need == 0 && remaining == 0\n        return Vector{Int64}()\n\
    \    end\n    \n    if number == 0 && need > 0 && remaining > 0\n        return\
    \ Vector{Int64}(remaining)\n    end\n    \n    if number == 0 && need > 0 && remaining\
    \ == 0\n        return Vector{Int64}()\n    end\n    \n    if number == 0 && need\
    \ > 0 && remaining > 0\n        return Vector{Int64}(remaining)\n    end\n   \
    \ \n    if number == 0 && need > 0 && remaining == 0\n        return Vector{Int64}()\n\
    \    end\n    \n    if number == 0 && need > 0 && remaining > 0\n        return\
    \ Vector{Int64}(remaining)\n    end\n    \n    if number == 0 && need > 0 && remaining\
    \ == 0\n        return Vector{Int64}()\n    end\n    \n    if number == 0 && need\
    \ > 0 && remaining > 0\n        return Vector{Int64}(remaining)\n    end\n   \
    \ \n    if number == 0 && need > 0 && remaining == 0\n        return Vector{Int64}()\n\
    \    end\n    \n    if number == 0 && need > 0 && remaining > 0\n        return\
    \ Vector{Int64}(remaining)\n    end\n    \n    if number == 0 && need > 0 && remaining\
    \ == 0\n        return Vector{Int64}()\n    end\n    \n    if number == 0 && need\
    \ > 0 && remaining > 0\n        return Vector{Int64}(remaining)\n    end\n   \
    \ \n    if number == 0 && need > 0 && remaining == 0\n        return Vector{Int64}()\n\
    \    end\n    \n    if number == 0 && need > 0 && remaining > 0\n        return\
    \ Vector{Int64}(remaining)\n    end\n    \n    if number == 0 && need > 0 && remaining\
    \ == 0\n        return Vector{Int64}()\n    end\n", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    carrots = number\n    \n    while\
    \ carrots > 0\n        if carrots >= need\n            carrots -= need\n     \
    \   else\n            carrots = remaining\n        end\n    end\n    \n    return\
    \ Vector{Int64}(carrots, carrots-carrots)\nend\n</cell>\n<code language=julia-1.0>\n\
    eat(10, 10, 10)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ number of carrots left after a meal is complete.\nThe function should take two\
    \ arguments:\n@meal : integer\n    the number of carrots you have eaten so far\n\
    @remaining : integer\n    the number of carrots left in the meal\nThe function\
    \ should return an integer\nThe function should return -1 if there are not enough\
    \ carrots to complete the meal.\nThe function should return 0 if the meal is complete.\n\
    The function should return 1 if the meal is not complete.\nThe function should\
    \ return an array of the remaining carrots after each meal.\nThe function should\
    \ return an array of the remaining carrots after each meal.\nThe function should\
    \ return an array of the remaining carrots after each meal.\nThe function should\
    \ return an array of the remaining carrots after each meal.\nThe function should\
    \ return an array of the remaining carrots after each meal.\nThe function should\
    \ return an array of the remaining carrots after each meal.\nThe function should\
    \ return an array of the remaining carrots after each meal.\nThe function should\
    \ return an array of the remaining carrots after each meal.\nThe function should\
    \ return an array of the remaining carrots after each meal.\nThe function should\
    \ return an array of the remaining carrots after each meal.\nThe function should\
    \ return an array of the remaining carrots after each meal.\nThe function should\
    \ return an array of the remaining carrots after each meal.\nThe function should\
    \ return an array of the remaining carrots after each meal.\nThe function should\
    \ return an array of the remaining carrots after each meal.\nThe function should\
    \ return an array of the remaining carrots after each meal.\nThe function should\
    \ return an array of the remaining carrots after each meal.\nThe function should\
    \ return an array of the remaining carrots after each meal.\nThe function should\
    \ return an array of the remaining carrots after each meal.\nThe function should\
    \ return an array of the remaining carrots after each meal.\nThe function should\
    \ return an array of the remaining carrots after each meal.\nThe function should\
    \ return an array of the remaining carrots after each meal.\nThe function should\
    \ return an array of the remaining carrots after each meal.\nThe function should\
    \ return an array of the remaining carrots after each meal.\n", "    if number\
    \ < need \n        error(\"number must be greater than or equal to need\")\n \
    \   end\n    if remaining < 0\n        error(\"remaining must be greater than\
    \ or equal to 0\")\n    end\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    if number <= 0\n    \
    \    error(\"number must be positive\")\n    end\n    if need <= 0\n        error(\"\
    need must be positive\")\n    end\n    if remaining <= 0\n        error(\"remaining\
    \ must be positive\")\n    end\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    if number <= 0\n        error(\"\
    number must be positive\")\n    end\n    if need <= 0\n        error(\"need must\
    \ be positive\")\n    end\n    if remaining <= 0\n        error(\"remaining must\
    \ be positive\")\n    end\n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    if number < 0 || need < 0 || remaining\
    \ < 0\n        error(\"invalid input\")\n    end\n    \n    if number == 0\n \
    \       return [need, remaining]\n    end\n    \n    if remaining < need\n   \
    \     error(\"not enough carrots left\")\n    end\n    \n    carrots = zeros(Int64,\
    \ 2)\n    carrots[1] = remaining\n    carrots[2] = number\n    \n    meals = zeros(Int64,\
    \ 2)\n    meals[1] = need\n    meals[2] = number\n    \n    carrots_left = zeros(Int64,\
    \ 2)\n    carrots_left[1] = remaining\n    carrots_left[2] = number\n    \n  \
    \  carrots_eaten = zeros(Int64, 2)\n    carrots_eaten[1] = number\n    carrots_eaten[2]\
    \ = number\n    \n    meals_left = zeros(Int64, 2)\n    meals_left[1] = need\n\
    \    meals_left[2] = number\n    \n    meals_eaten = zeros(Int64, 2)\n    meals_eaten[1]\
    \ = number\n    meals_eaten[2] = number\n    \n    carrots_left = carrots_left[1]\
    \ + carrots[1]\n    meals_left = meals_left[1] + meals[1]\n    \n    carrots_eaten\
    \ = carrots_eaten[1] + carrots_eaten[1]\n    meals_eaten = meals_eaten[1] + meals_eaten[1]\n\
    \    \n    carrots_left = carrots_left[2] + carrots[2]\n    meals_left = meals_left[2]\
    \ + meals[2]\n    \n    carrots_eaten = carrots_eaten[2] + carrots_eaten[2]\n\
    \    meals_eaten = meals_eaten[2] + meals_eaten[2]\n    \n    carrots_left = carrots_left[1]\
    \ + carrots[1]\n    meals_left = meals_left[1] + meals[1]\n    \n    carrots_eaten\
    \ = carrots_eaten[1] + carrots_eaten[1]\n    meals_eaten = meals_eaten[1] + meals_eaten[1]\n\
    \    \n    carrots_left = carrots_left[2] + carrots[2]\n    meals_left = meals_left[2]\
    \ + meals[2]\n    \n    carrots_eaten = carrots_eaten[2] + carrots_eaten[2]\n\
    \    meals_eaten = meals_eaten[2]", "    if number <= 0\n        error(\"number\
    \ must be positive\")\n    end\n    if need <= 0\n        error(\"need must be\
    \ positive\")\n    end\n    if remaining <= 0\n        error(\"remaining must\
    \ be positive\")\n    end\n    \n    carrots = number\n    carrots_left = remaining\n\
    \    \n    carrots_left = 0\n    \n    carrots_left = 0\n    \n    carrots_left\
    \ = 0\n    \n    carrots_left = 0\n    \n    carrots_left = 0\n    \n    carrots_left\
    \ = 0\n    \n    carrots_left = 0\n    \n    carrots_left = 0\n    \n    carrots_left\
    \ = 0\n    \n    carrots_left = 0\n    \n    carrots_left = 0\n    \n    carrots_left\
    \ = 0\n    \n    carrots_left = 0\n    \n    carrots_left = 0\n    \n    carrots_left\
    \ = 0\n    \n    carrots_left = 0\n    \n    carrots_left = 0\n    \n    carrots_left\
    \ = 0\n    \n    carrots_left = 0\n    \n    carrots_left = 0\n    \n    carrots_left\
    \ = 0\n    \n    carrots_left = 0\n    \n    carrots_left = 0\n    \n    carrots_left\
    \ = 0\n    \n    carrots_left = 0\n    \n    carrots_left = 0\n    \n    carrots_left\
    \ = 0\n    \n    carrots_left = 0\n    \n    carrots_left = 0\n    \n    carrots_left\
    \ = 0\n    \n    carrots_left = 0\n    \n    carrots_left = 0\n    \n    carrots_left\
    \ = 0\n    \n    carrots_left = 0\n    \n    carrots_left = 0\n    \n    carrots_left\
    \ = 0\n    \n    carrots_left = 0\n    \n    carrots_left = 0\n    \n    carrots_left\
    \ = 0\n    \n    carrots_left = 0\n    \n    carrots_left = 0\n    \n    carrots_left\
    \ = 0\n    \n    carrots_left = 0\n    \n    carrots_left = 0\n    \n    carrots_left\
    \ = 0\n    \n    carrots_left = 0\n    \n    carrots_left = 0\n    \n    carrots_left\
    \ = 0\n    \n    carrots_left = 0\n    \n    carrots_left = 0\n    \n    carrot",
  "    \n    if number <= 0\n        error(\"number must be positive\")\n    end\n\
    \    if need <= 0\n        error(\"need must be positive\")\n    end\n    if remaining\
    \ <= 0\n        error(\"remaining must be positive\")\n    end\n    \n    carrots\
    \ = zeros(Int64, 2)\n    carrots[1] = number\n    carrots[2] = remaining\n   \
    \ \n    \n    \n    return carrots\nend", "    if number <= need && number <=\
    \ remaining \n        Vector{Int64}([number, remaining - number])\n    else\n\
    \        Vector{Int64}([need, remaining])\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 10, 10)\n</cell>\n<text>\nProblem 3\nWrite a function that returns an\
    \ array of integers representing the number of carrots left after a meal is completed.\n\
    The function should take in two parameters: the number of carrots that you have\
    \ eaten so far, and the total number of carrots left after your meals.\nThe function\
    \ should return an array of integers representing the number of carrots left after\
    \ your meals.\nThe function should return an empty array if there aren't enough\
    \ carrots to complete the meal.\nThe function should return an empty array if\
    \ there aren't enough carrots to complete the meal.\nThe function should return\
    \ an empty array if there aren't enough carrots to complete the meal.\nThe function\
    \ should return an empty array if there aren't enough carrots to complete the\
    \ meal.\nThe function should return an empty array if there aren't enough carrots\
    \ to complete the meal.\nThe function should return an empty array if there aren't\
    \ enough carrots to complete the meal.\nThe function should return an empty array\
    \ if there aren't enough carrots to complete the meal.\nThe function should return\
    \ an empty array if there aren't enough carrots to complete the meal.\nThe function\
    \ should return an empty array if there aren't enough carrots to complete the\
    \ meal.\nThe function should return an empty array if there aren't enough carrots\
    \ to complete the meal.\nThe function should return an empty array if there aren't\
    \ enough carrots to complete the meal.\nThe function should return an empty array\
    \ if there aren't enough carrots to complete the meal.\nThe function should return\
    \ an empty array if there aren't enough carrots to complete the meal.\nThe function\
    \ should return an empty array if there aren't enough carrots to complete the\
    \ meal.\nThe function should return an empty array if there aren't enough carrots\
    \ to complete the meal.\nThe function should return an empty array if there aren't\
    \ enough carrots to complete the meal.\nThe function should return an empty array\
    \ if there aren't enough carrots to complete the meal.\nThe function should return\
    \ an empty array if there aren't enough carrots to complete the meal.\nThe function\
    \ should return an empty array if there aren't enough carrots to complete the\
    \ meal.\nThe function should return an empty array if there aren't enough carrots\
    \ to complete the meal.\nThe function should return an empty array if there aren't\
    \ enough carrots to complete the meal.\n", "    if number < 0 || number > 1000\
    \ || need < 0 || need > 1000 || remaining < 0 || remaining > 1000\n        return\
    \ Vector{Int64}()\n    end\n    \n    carrots = number\n    carrots_left = remaining\n\
    \    \n    carrots_left = carrots - need\n    \n    carrots_left = carrots_left\
    \ - carrots_left % 2\n    \n    return Vector{Int64}(carrots_left, carrots)\n\
    end\n</cell>\n<code language=julia-1.4>\neat(10, 10, 10)\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that takes in an array of integers and returns the number\
    \ of even numbers in the array.", "    if number < need \n        error(\"You\
    \ don't have enough carrots to eat\")\n    else if number > remaining\n      \
    \  error(\"You don't have enough carrots to eat\")\n    else\n        Vector{Int64}([number,\
    \ remaining])\n    end\nend", "    \n    if number > 0 && need > 0 && remaining\
    \ > 0\n        \n        carrots = number\n        \n        carrots_left = remaining\n\
    \        \n        carrots_left_after_meals = 0\n        \n        carrots_left_after_meals\
    \ = carrots_left - need\n        \n        carrots_left_after_meals = carrots_left_after_meals\
    \ + carrots_left\n        \n        carrots_left_after_meals = carrots_left_after_meals\
    \ + carrots_left\n        \n        carrots_left_after_meals = carrots_left_after_meals\
    \ + carrots_left\n        \n        carrots_left_after_meals = carrots_left_after_meals\
    \ + carrots_left\n        \n        carrots_left_after_meals = carrots_left_after_meals\
    \ + carrots_left\n        \n        carrots_left_after_meals = carrots_left_after_meals\
    \ + carrots_left\n        \n        carrots_left_after_meals = carrots_left_after_meals\
    \ + carrots_left\n        \n        carrots_left_after_meals = carrots_left_after_meals\
    \ + carrots_left\n        \n        carrots_left_after_meals = carrots_left_after_meals\
    \ + carrots_left\n        \n        carrots_left_after_meals = carrots_left_after_meals\
    \ + carrots_left\n        \n        carrots_left_after_meals = carrots_left_after_meals\
    \ + carrots_left\n        \n        carrots_left_after_meals = carrots_left_after_meals\
    \ + carrots_left\n        \n        carrots_left_after_meals = carrots_left_after_meals\
    \ + carrots_left\n        \n        carrots_left_after_meals = carrots_left_after_meals\
    \ + carrots_left\n        \n        carrots_left_after_meals = carrots_left_after_meals\
    \ + carrots_left\n        \n        carrots_left_after_meals = carrots_left_after_meals\
    \ + carrots_left\n        \n        carrots_left_after_meals = carrots_left_after_meals\
    \ + carrots_left\n        \n        carrots_left_after_meals = carrots_left_after_meals\
    \ + carrots_left\n        \n        carrots_left_after_meals = carrots_left_after_meals\
    \ + carrot", "    if number < 0 || number > 1000 || need < 0 || need > 1000 ||\
    \ remaining < 0 || remaining > 1000\n        return Vector{Int64}()\n    end\n\
    \    \n    carrots = Vector{Int64}()\n    carrots = Vector{Int64}([number])\n\
    \    \n    while true\n        carrots = Vector{Int64}([carrots[1]+need])\n  \
    \      if carrots[1] > remaining\n            break\n        end\n    end\n  \
    \  \n    return carrots\nend\n</cell>\n<code language=julia-1.5>\neat(10, 5, 100)\n\
    </cell>\n<text>\nProblem 3\nWrite a function that returns the number of times\
    \ a given string appears in a given string.", "    if number < 0 || number > 1000\
    \ \n        error(\"number must be between 0 and 1000\")\n    end\n    if need\
    \ < 0 || need > 1000 \n        error(\"need must be between 0 and 1000\")\n  \
    \  end\n    if remaining < 0 || remaining > 1000 \n        error(\"remaining must\
    \ be between 0 and 1000\")\n    end\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    if number <= 0\n        error(\"number must be positive\")\n  \
    \  end\n    if need <= 0\n        error(\"need must be positive\")\n    end\n\
    \    if remaining <= 0\n        error(\"remaining must be positive\")\n    end\n\
    \    \n    carrots = zeros(Int64, 2)\n    carrots[1] = number\n    carrots[2]\
    \ = remaining\n    \n    carrots = carrots[2:end]\n    \n    return carrots\n\
    end\n</cell>\n<code language=julia-1.5>\neat(10, 10, 10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of carrots left after a meal is\
    \ complete.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   if number < need \n        error(\"number must be greater than or equal to\
    \ need\")\n    else if number == 0\n        error(\"number must be greater than\
    \ 0\")\n    else if remaining < 0\n        error(\"remaining must be greater than\
    \ or equal to 0\")\n    else\n        \n        carrots = zeros(Int64, 2)\n  \
    \      carrots[1] = number\n        carrots[2] = remaining\n        \n       \
    \ carrots = sort(carrots)\n        \n        carrots = carrots[2:end]\n      \
    \  \n        carrots = carrots[2:end]\n        \n        carrots = sort(carrots)\n\
    \        \n        carrots = carrots[2:end]\n        \n        carrots = sort(carrots)\n\
    \        \n        carrots = carrots[2:end]\n        \n        carrots = sort(carrots)\n\
    \        \n        carrots = carrots[2:end]\n        \n        carrots = sort(carrots)\n\
    \        \n        carrots = carrots[2:end]\n        \n        carrots = sort(carrots)\n\
    \        \n        carrots = carrots[2:end]\n        \n        carrots = sort(carrots)\n\
    \        \n        carrots = carrots[2:end]\n        \n        carrots = sort(carrots)\n\
    \        \n        carrots = carrots[2:end]\n        \n        carrots = sort(carrots)\n\
    \        \n        carrots = carrots[2:end]\n        \n        carrots = sort(carrots)\n\
    \        \n        carrots = carrots[2:end]\n        \n        carrots = sort(carrots)\n\
    \        \n        carrots = carrots[2:end]\n        \n        carrots = sort(carrots)\n\
    \        \n        carrots = carrots[2:end]\n        \n        carrots = sort(carrots)\n\
    \        \n        carrots = carrots[2:end]\n        \n        carrots = sort(carrots)\n\
    \        \n        carrots = carrots[2:end]\n        \n        carrots = sort(carrots)\n\
    \        \n        carrots = carrots[2:end]\n        \n        carrots = sort(carrots)\n\
    \        \n        carrots = carrots[2:end]\n        \n        carrots = sort(carrots)\n\
    \        \n        carrots = carrots[2:end]\n        \n        carrots = sort(carrots)\n\
    \        \n        carrots = carrots[2:end]\n        \n        carrots = sort(carrots)\n\
    \        \n        ", "    \n    if number < 0 || need < 0 || remaining < 0\n\
    \        error(\"Invalid input\")\n    end\n    \n    if remaining == 0\n    \
    \    return Vector{Int64}([number, need])\n    end\n    \n    if number >= need\n\
    \        return Vector{Int64}([number, need])\n    end\n    \n    if number <\
    \ need\n        return Vector{Int64}([number, need])\n    end\n    \n    if number\
    \ == need\n        return Vector{Int64}([number, need])\n    end\n    \n    if\
    \ number > need\n        return Vector{Int64}([number, need])\n    end\n    \n\
    \    return Vector{Int64}([number, need])\nend\n</cell>\n<code language=julia-1.5>",
  "    if number < need \n        error(\"Not enough carrots to eat\")\n    end\n\
    \    if number == 0\n        error(\"No carrots left to eat\")\n    end\n    if\
    \ remaining < 0\n        error(\"Not enough carrots to eat\")\n    end\n    \n\
    \    carrots = zeros(Int64, 2)\n    carrots[1] = number\n    carrots[2] = remaining\n\
    \    \n    return carrots\nend\n</cell>\n<code language=julia-1.5>\neat(10, 5,\
    \ 100)\n</cell>\n<text>\nExercise 2\nWrite a function that returns an array of\
    \ integers representing the number of carrots left after a meal is completed.",
  "    if number < 0 || need < 0 || remaining < 0\n        error(\"Invalid input\"\
    )\n    end\n    \n    carrots = zeros(Int64, 2)\n    carrots[1] = number\n   \
    \ carrots[2] = remaining\n    \n    carrots = carrots[2:end]\n    \n    if carrots[1]\
    \ < need\n        carrots[1] = carrots[1] + carrots[2]\n        carrots[2] = 0\n\
    \    end\n    \n    return carrots\nend\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 10, 10)\n</cell>\n<code language=julia-1.5>\neat(10, 10, 0)\n</cell>\n\
    <code language=julia-1.5>\neat(10, 10, 1)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 10, 2)\n</cell>\n<code language=julia-1.5>\neat(10, 10, 3)\n</cell>\n\
    <code language=julia-1.5>\neat(10, 10, 4)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 10, 5)\n</cell>\n<code language=julia-1.5>\neat(10, 10, 6)\n</cell>\n\
    <code language=julia-1.5>\neat(10, 10, 7)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 10, 8)\n</cell>\n<code language=julia-1.5>\neat(10, 10, 9)\n</cell>\n\
    <code language=julia-1.5>\neat(10, 10, 10)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 10, 11)\n</cell>\n<code language=julia-1.5>\neat(10, 10, 12)\n</cell>\n\
    <code language=julia-1.5>\neat(10, 10, 13)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 10, 14)\n</cell>\n<code language=julia-1.5>\neat(10, 10, 15)\n</cell>\n\
    <code language=julia-1.5>\neat(10, 10, 16)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 10, 17)\n</cell>\n<code language=julia-1.5>\neat(10, 10, 18)\n</cell>\n\
    <code language=julia-1.5>\neat(10, 10, 19)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 10, 20)\n</cell>\n<code language=julia-1.5>\neat(10, 10, 21)\n</cell>\n\
    <code language=julia-1.5>\neat(10, 10, 22)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 10, 23)\n</cell>\n<code language=julia-1.5>\neat(10, 10, ", "    if number\
    \ < 0 || number > 1000 || need < 0 || need > 1000 || remaining < 0 || remaining\
    \ > 1000\n        error(\"Invalid input\")\n    end\n    \n    if number == 0\n\
    \        return Vector{Int64}()\n    end\n    \n    if remaining == 0\n      \
    \  return Vector{Int64}([need])\n    end\n    \n    if number > remaining\n  \
    \      return Vector{Int64}([need, remaining])\n    end\n    \n    return Vector{Int64}([need,\
    \ number])\nend", "    if number == 0\n        return Vector{Int64}()\n    elseif\
    \ number < 0\n        return Vector{Int64}()\n    elseif need == 0\n        return\
    \ Vector{Int64}()\n    elseif remaining < 0\n        return Vector{Int64}()\n\
    \    elseif remaining < need\n        return Vector{Int64}()\n    elseif number\
    \ > remaining\n        return Vector{Int64}()\n    elseif number > need\n    \
    \    return Vector{Int64}()\n    elseif number == need\n        return Vector{Int64}([number,\
    \ number - need])\n    else\n        return Vector{Int64}()\n    end\nend\n</cell>\n\
    <code language=julia-1.0>", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    if number <= 0\n        error(\"The number of carrots you have\
    \ eaten must be positive\")\n    end\n    if need <= 0\n        error(\"The number\
    \ of carrots you need to eat must be positive\")\n    end\n    if remaining <=\
    \ 0\n        error(\"The number of carrots you have left must be positive\")\n\
    \    end\n    \n    carrots = zeros(Int64, 2)\n    carrots[1] = number\n    carrots[2]\
    \ = remaining\n    \n    carrots = carrots[2:end]\n    \n    return carrots\n\
    end", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if number\
    \ < need \n        error(\"Not enough carrots to eat\")\n    end\n    if number\
    \ == 0\n        error(\"No carrots to eat\")\n    end\n    if remaining < 0\n\
    \        error(\"Not enough carrots to eat\")\n    end\n    \n    carrots = zeros(Int64,\
    \ 2)\n    carrots[1] = number\n    carrots[2] = remaining\n    \n    return carrots\n\
    end\n</cell>\n<code language=julia-1.0>\neat(10, 10, 10)\n</cell>\n<code language=julia-1.0>\n\
    eat(10, 10, 0)\n</cell>\n<code language=julia-1.0>\neat(10, 10, -1)\n</cell>\n\
    <code language=julia-1.0>\neat(10, 10, 100)\n</cell>\n<code language=julia-1.0>\n\
    eat(10, 10, 101)\n</cell>\n<code language=julia-1.0>\neat(10, 10, 102)\n</cell>\n\
    <code language=julia-1.0>\neat(10, 10, 103)\n</cell>\n<code language=julia-1.0>\n\
    eat(10, 10, 104)\n</cell>\n<code language=julia-1.0>\neat(10, 10, 105)\n</cell>\n\
    <code language=julia-1.0>\neat(10, 10, 106)\n</cell>\n<code language=julia-1.0>\n\
    eat(10, 10, 107)\n</cell>\n<code language=julia-1.0>\neat(10, 10, 108)\n</cell>\n\
    <code language=julia-1.0>\neat(10, 10, 109)\n</cell>\n<code language=julia-1.0>\n\
    eat(10, 10, 110)\n</cell>\n<code language=julia-1.0>\neat(10, 10, 111)\n</cell>\n\
    <code language=julia-1.0>\neat(10, 10, 112)\n</cell>\n<code language=julia-1.0>\n\
    eat(10, 10, 113)\n</cell>\n<code language=julia-1.0>\neat(10, 10, 114)\n</cell>\n\
    <code language=julia-1.0>\neat(10, 10, 115)\n</cell>\n<code language=julia-1.0>\n\
    eat(10, 10, 116)\n</cell>\n<code language=julia-1.0>\neat(10, 10, 117)\n</cell>\n\
    <code language=julia-1.0>\neat(10, 10, 118)\n</cell>\n<code language=julia-1.0>\n\
    eat(10, 10, 119)\n</cell>\n<code language=julia-1.0>\neat(10, 10, 120)\n</cell>\n\
    <code language=julia-1.0>\neat(10, 10, 121)\n</cell>\n<code language=julia-1.0",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if number < need\
    \ \n        error(\"Not enough carrots to eat\")\n    end\n    if number == 0\n\
    \        error(\"No carrots left\")\n    end\n    if remaining < 0\n        error(\"\
    Not enough carrots to eat\")\n    end\n    \n    carrots = number\n    \n    carrots_left\
    \ = remaining\n    \n    carrots_eaten = 0\n    \n    while carrots_left > 0 \n\
    \        carrots_eaten += 1\n        carrots_left -= 1\n    end\n    \n    carrots_eaten\n\
    \    carrots_left\n    \nend\n</cell>\n<code language=julia-1.5>\neat(10, 10,\
    \ 10)\n</cell>\n<text>\nExercise 3\nWrite a function that takes in an array of\
    \ integers and returns the number of positive integers in the array.", "    if\
    \ number < need \n        error(\"not enough carrots to eat\")\n    end\n    if\
    \ remaining < 0\n        error(\"not enough carrots to eat\")\n    end\n    \n\
    \    carrots = zeros(Int64, 2)\n    carrots[1] = number\n    carrots[2] = remaining\n\
    \    \n    return carrots\nend\n</cell>\n<code language=julia-1.5>\neat(10, 10,\
    \ 10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number of\
    \ carrots left after a meal is complete.\nThe function should take in two arguments:\
    \ the number of carrots you have eaten so far, and the number that you need to\
    \ eat.\nThe function should return an array of two integers, the first one being\
    \ the number of carrots left after your meal, and the second one being the number\
    \ of carrots left after your meal.", "    if number == 0\n        return Vector{Int64}()\n\
    \    elseif number < need\n        return Vector{Int64}()\n    elseif number >\
    \ remaining\n        return Vector{Int64}()\n    else\n        return Vector{Int64}(remaining,\
    \ number - remaining)\n    end\nend\n</cell>\n<code language=julia-1.5>\neat(10,\
    \ 10, 10)\n</cell>\n<text>\nExercise 2\nWrite a function called eat_all that takes\
    \ in an array of integers and returns the number of carrots you would need to\
    \ eat to complete the day's meals.", "    if number < need \n        error(\"\
    Not enough carrots to eat\")\n    elseif number == 0\n        error(\"No carrots\
    \ left\")\n    elseif number > remaining\n        error(\"Not enough carrots to\
    \ eat\")\n    else\n        Vector{Int64}([number, remaining - number])\n    end\n\
    end\n</cell>\n<code language=julia-1.1>\neat(10, 5, 10)\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function called hungry that takes three integers as arguments and\
    \ returns true if the first integer is greater than the second integer and the\
    \ third integer is greater than the second integer. Otherwise it returns false.\
    \ \nThe function should return false if any of the arguments are less than 0.",
  "    if number <= 0\n        error(\"The number of carrots you have eaten must be\
    \ positive\")\n    end\n    if need <= 0\n        error(\"The number of carrots\
    \ you have need to eat must be positive\")\n    end\n    if remaining <= 0\n \
    \       error(\"The number of carrots you have left to eat must be positive\"\
    )\n    end\n    \n    carrots = zeros(Int64, 2)\n    carrots[1] = number\n   \
    \ carrots[2] = remaining\n    \n    carrots = carrots[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    \n    car", "    if number <= 0\n        error(\"\
    number must be positive\")\n    else if need <= 0\n        error(\"need must be\
    \ positive\")\n    else if remaining <= 0\n        error(\"remaining must be positive\"\
    )\n    else\n        Vector{Int64}([number, need])\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\neat(10, 5, 10)\n</cell>\n<code language=julia-1.5>", " \
    \   \n    if number <= 0\n        error(\"number must be positive\")\n    end\n\
    \    if need <= 0\n        error(\"need must be positive\")\n    end\n    if remaining\
    \ <= 0\n        error(\"remaining must be positive\")\n    end\n    \n    carrots\
    \ = zeros(Int64, 2)\n    carrots[1] = number\n    carrots[2] = remaining\n   \
    \ \n    carrots = carrots[2:end]\n    \n    return carrots\nend", "    if number\
    \ < need \n        error(\"Not enough carrots left\")\n    else if number == 0\n\
    \        error(\"No more carrots to eat\")\n    else\n        carrots = number\n\
    \        carrots_left = remaining\n        carrots_eaten = 0\n        \n     \
    \   while carrots_left > 0\n            carrots_eaten += 1\n            carrots_left\
    \ -= 1\n        end\n        \n        return Vector{Int64}(carrots_eaten, carrots)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\neat(10, 10, 10)\n</cell>\n\
    <text>\nProblem 3\nWrite a function called eat_meals that takes in an array of\
    \ integers and returns the number of carrots you need to eat to complete the day's\
    \ meals.", "    if number < need then return []\n    if number == need then return\
    \ [remaining]\n    \n    carrots = number\n    \n    while carrots > 0 do\n  \
    \      carrots = carrots - 1\n        push!(remaining, carrots)\n    end\n   \
    \ \n    return remaining\nend\n</cell>\n<code language=julia-1.5>\neat(10, 10,\
    \ 10)\n</cell>\n<code language=julia-1.5>", "    if number <= 0\n        error(\"\
    number must be positive\")\n    end\n    if need <= 0\n        error(\"need must\
    \ be positive\")\n    end\n    if remaining <= 0\n        error(\"remaining must\
    \ be positive\")\n    end\n    \n    carrots = number\n    \n    if number ==\
    \ 0\n        return Vector{Int64}()\n    end\n    \n    if number == need\n  \
    \      return Vector{Int64}(carrots, 0)\n    end\n    \n    carrots_left = remaining\n\
    \    \n    if carrots_left == 0\n        return Vector{Int64}(carrots, carrots)\n\
    \    end\n    \n    carrots_left = carrots_left - need\n    \n    return Vector{Int64}(carrots,\
    \ carrots_left)\nend\n</cell>\n<code language=julia-1.5>\neat(5, 3, 10)\n</cell>\n\
    <code language=julia-1.5>\neat(5, 3, 0)\n</cell>\n<code language=julia-1.5>\n\
    eat(5, 3, -1)\n</cell>\n<code language=julia-1.5>\neat(5, 3, -2)\n</cell>\n<code\
    \ language=julia-1.5>\neat(5, 3, -3)\n</cell>\n<code language=julia-1.5>\neat(5,\
    \ 3, -4)\n</cell>\n<code language=julia-1.5>\neat(5, 3, -5)\n</cell>\n<code language=julia-1.5>\n\
    eat(5, 3, -6)\n</cell>\n<code language=julia-1.5>\neat(5, 3, -7)\n</cell>\n<code\
    \ language=julia-1.5>\neat(5, 3, -8)\n</cell>\n<code language=julia-1.5>\neat(5,\
    \ 3, -9)\n</cell>\n<code language=julia-1.5>\neat(5, 3, -10)\n</cell>\n<code language=julia-1.5>\n\
    eat(5, 3, -11)\n</cell>\n<code language=julia-1.5>\neat(5, 3, -12)\n</cell>\n\
    <code language=julia-1.5>\neat(5, 3, -13)\n</cell>\n<code language=julia-1.5>\n\
    eat(5, 3, -14)\n</cell>\n<code language=julia-1.5>\neat(5, 3, -15)\n</cell>\n\
    <code language=julia-1.5>\neat(5, 3, -16)\n</cell>\n<code language=julia-1.5>\n\
    eat(5, 3, -17)\n</cell>\n<code language=julia-1.5>\neat(5, 3, -18)\n</cell>\n\
    <code language=julia-1.5>\neat(5, 3, -19)\n</cell", "    if number == 0\n    \
    \    return Vector{Int64}()\n    \n    if number < need\n        return Vector{Int64}()\n\
    \    \n    if number > remaining\n        return Vector{Int64}()\n    \n    if\
    \ number == need\n        return Vector{Int64}(remaining, 0)\n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    ", "    \n    if number < 0 || need < 0 || remaining < 0\n  \
    \      return Vector{Int64}()\n    end\n    \n    if number == 0\n        return\
    \ Vector{Int64}([need, remaining])\n    end\n    \n    if remaining == 0\n   \
    \     return Vector{Int64}([number, 0])\n    end\n    \n    if number > remaining\n\
    \        return Vector{Int64}([number, remaining])\n    end\n    \n    if need\
    \ == 0\n        return Vector{Int64}([number, remaining])\n    end\n    \n   \
    \ if number == remaining\n        return Vector{Int64}([number, 0])\n    end\n\
    \    \n    if number > need\n        return Vector{Int64}([number, remaining])\n\
    \    end\n    \n    return Vector{Int64}([number, remaining])\nend\n</cell>\n\
    <code language=julia-1.5>\neat(10, 5, 10)\n</cell>\n<text>\nProblem 3\nWrite a\
    \ function that takes in an array of integers and returns the number of positive\
    \ integers in the array.", "    if number <= 0\n        error(\"number must be\
    \ positive\")\n    end\n    if need <= 0\n        error(\"need must be positive\"\
    )\n    end\n    if remaining <= 0\n        error(\"remaining must be positive\"\
    )\n    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if number <= 0\n        error(\"number must be positive\"\
    )\n    end\n    if need <= 0\n        error(\"need must be positive\")\n    end\n\
    \    if remaining <= 0\n        error(\"remaining must be positive\")\n    end\n\
    \    \n    carrots = zeros(Int64, 2)\n    carrots[1] = number\n    carrots[2]\
    \ = remaining\n    \n    carrots = carrots[2:end]\n    \n    if carrots[1] ==\
    \ carrots[2]\n        carrots[1] = carrots[1] - 1\n        carrots[2] = carrots[2]\
    \ - 1\n    end\n    \n    return carrots\nend", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    \n    if number == 0\n        return Vector{Int64}()\n\
    \    end\n    \n    if number < need\n        return Vector{Int64}()\n    end\n\
    \    \n    if number > remaining\n        return Vector{Int64}()\n    end\n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    ", "    if number <= need\
    \ \n        Vector{Int64}([number, 0])\n    else\n        Vector{Int64}([0, remaining])\n\
    \    end\nend", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   if number < need \n        error(\"Not enough carrots left\")\n    elseif\
    \ number == 0\n        error(\"No carrots left\")\n    elseif number > remaining\n\
    \        error(\"Not enough carrots left\")\n    else\n        Vector{Int64}([number,\
    \ remaining - number])\n    end\nend\n</cell>\n<code language=julia-1.5>\neat(10,\
    \ 10, 10)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of\
    \ integers and returns the sum of the integers squared. \nThe function should\
    \ raise an error if any element of the vector is not a number.", "    if number\
    \ < 0 || need < 0 || remaining < 0\n        error(\"Invalid input\")\n    end\n\
    \    \n    if number == 0\n        return Vector{Int64}()\n    end\n    \n   \
    \ if remaining < need\n        return Vector{Int64}()\n    end\n    \n    carrots\
    \ = Vector{Int64}()\n    \n    while remaining > 0 && number > 0\n        carrots\
    \ = push!(carrots, number)\n        number -= 1\n        remaining -= 1\n    end\n\
    \    \n    return carrots\nend\n</cell>\n<code language=julia-1.5>\neat(10, 5,\
    \ 10)\n</cell>\n<text>\nExercise 3\nWrite a function that takes in an array of\
    \ integers and returns the number of positive integers in the array.", "    if\
    \ number < 0 || number > 1000 || need < 0 || need > 1000 || remaining < 0 || remaining\
    \ > 1000\n        error(\"Invalid input\")\n    else\n        \n        carrots\
    \ = zeros(Int64, 2)\n        carrots[1] = number\n        carrots[2] = remaining\n\
    \        \n        meals = zeros(Int64, 2)\n        meals[1] = need\n        meals[2]\
    \ = 0\n        \n        carrots_left = zeros(Int64, 2)\n        carrots_left[1]\
    \ = remaining\n        carrots_left[2] = 0\n        \n        carrots_left_after_meals\
    \ = zeros(Int64, 2)\n        carrots_left_after_meals[1] = remaining\n       \
    \ carrots_left_after_meals[2] = 0\n        \n        carrots_left_after_meals_after_meals\
    \ = zeros(Int64, 2)\n        carrots_left_after_meals_after_meals[1] = remaining\n\
    \        carrots_left_after_meals_after_meals[2] = 0\n        \n        carrots_left_after_meals_after_meals_after_meals\
    \ = zeros(Int64, 2)\n        carrots_left_after_meals_after_meals_after_meals[1]\
    \ = remaining\n        carrots_left_after_meals_after_meals_after_meals[2] = 0\n\
    \        \n        carrots_left_after_meals_after_meals_after_meals_after_meals\
    \ = zeros(Int64, 2)\n        carrots_left_after_meals_after_meals_after_meals_after_meals[1]\
    \ = remaining\n        carrots_left_after_meals_after_meals_after_meals_after_meals[2]\
    \ = 0\n        \n        carrots_left_after_meals_after_meals_after_meals_after_meals_after_meals\
    \ = zeros(Int64, 2)\n        carrots_left_after_meals_after_meals_after_meals_after_meals_after_meals[1]\
    \ = remaining\n        carrots_left_after_meals_after_meals_after_meals_after_meals_after_meals[2]\
    \ = 0\n        \n        carrots_left_after_meals_after_meals_after_meals_after_meals_after_meals_after_meals\
    \ = zeros(Int64, 2)\n        carrots_left_after_meals_after_meals_after_meals_after_meals_after_meals_after_meals[1]\
    \ = remaining\n        carrots_left_after_meals_after_meals_after_meal", "   \
    \ if number < 0 || need < 0 || remaining < 0\n        error(\"Invalid input\"\
    )\n    end\n    if number == 0 && need == 0 && remaining == 0\n        return\
    \ Vector{Int64}()\n    end\n    \n    if number == 0 && need == 0 && remaining\
    \ > 0\n        return Vector{Int64}(remaining)\n    end\n    \n    if number ==\
    \ 0 && need > 0 && remaining == 0\n        return Vector{Int64}()\n    end\n \
    \   \n    if number == 0 && need > 0 && remaining > 0\n        return Vector{Int64}()\n\
    \    end\n    \n    if number == 0 && need == 0 && remaining == 0\n        return\
    \ Vector{Int64}()\n    end\n    \n    if number == 0 && need > 0 && remaining\
    \ > 0\n        return Vector{Int64}()\n    end\n    \n    if number == 0 && need\
    \ > 0 && remaining == 0\n        return Vector{Int64}()\n    end\n    \n    if\
    \ number == 0 && need > 0 && remaining > 0\n        return Vector{Int64}()\n \
    \   end\n    \n    if number == 0 && need == 0 && remaining == 0\n        return\
    \ Vector{Int64}()\n    end\n    \n    if number == 0 && need > 0 && remaining\
    \ > 0\n        return Vector{Int64}()\n    end\n    \n    if number == 0 && need\
    \ > 0 && remaining == 0\n        return Vector{Int64}()\n    end\n    \n    if\
    \ number == 0 && need > 0 && remaining > 0\n        return Vector{Int64}()\n \
    \   end\n    \n    if number == 0 && need == 0 && remaining > 0\n        return\
    \ Vector{Int64}()\n    end\n    \n    if number == 0 && need > 0 && remaining\
    \ == 0\n        return Vector{Int64}()\n    end\n    \n    if number == 0 && need\
    \ > 0 && remaining > 0\n        return Vector{Int64}()\n    end\n    \n    if\
    \ number == 0 && need == 0 && remaining == 0\n        return Vector{Int64}()\n\
    \    end\n    \n    if number == 0 && need > 0 && remaining == 0\n        return\
    \ Vector{Int64}()\n    end\n    \n    if number == 0 && need > 0 && remaining\
    \ > 0\n        return Vector{Int64}()\n    end\n    \n    if number == 0 && need\
    \ == 0 && remaining == 0\n        return Vector{Int64}()\n    end\n    \n    if\
    \ number == 0 && need > 0 && remaining == 0\n        return Vector{Int64}()\n\
    \    end\n    \n    if number == 0 && need > 0 && remaining > 0\n        return\
    \ Vector{Int64}()\n    end\n    \n    if number == 0 && need == 0 && remaining\
    \ == 0\n        return Vector{Int64}()", "    if number < 0 || number > 1000 ||\
    \ need < 0 || need > 1000 || remaining < 0 || remaining > 1000\n        error(\"\
    Invalid input\")\n    end\n    if number == 0\n        return Vector{Int64}()\n\
    \    end\n    if remaining == 0\n        return Vector{Int64}([need])\n    end\n\
    \    \n    carrots = Vector{Int64}()\n    carrots = carrots+[number]\n    carrots\
    \ = carrots+[remaining]\n    carrots = carrots+[need]\n    \n    return carrots\n\
    end\n</cell>\n<code language=julia-1.5>\neat(10, 5, 0)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 5, 10)\n</cell>\n<code language=julia-1.5>\neat(10, 5, 100)\n</cell>\n\
    <code language=julia-1.5>\neat(10, 5, 1000)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 5, 10000)\n</cell>\n<code language=julia-1.5>\neat(10, 5, 100000)\n</cell>\n\
    <code language=julia-1.5>\neat(10, 5, 1000000)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 5, 10000000)\n</cell>\n<code language=julia-1.5>\neat(10, 5, 100000000)\n\
    </cell>\n<code language=julia-1.5>\neat(10, 5, 1000000000)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 5, 10000000000)\n</cell>\n<code language=julia-1.5>\neat(10, 5, 100000000000)\n\
    </cell>\n<code language=julia-1.5>\neat(10, 5, 1000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\neat(10, 5, 10000000000000)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 5, 100000000000000)\n</cell>\n<code language=julia-1.5>\neat(10, 5, 1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\neat(10, 5, 10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\neat(10, 5, 100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 5, 1000000000000000000)\n</cell>\n<code language=julia-1.5>\neat(10, 5,\
    \ 10000000000000000000)\n</cell>\n<code language=julia-1.5>\neat(10, 5, 100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\neat(10, 5, 1000000000000000000000)\n</cell>",
  "    if number <= 0\n        error(\"number must be positive\")\n    end\n    if\
    \ need <= 0\n        error(\"need must be positive\")\n    end\n    if remaining\
    \ <= 0\n        error(\"remaining must be positive\")\n    end\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   if number < need \n        error(\"Not enough carrots left\")\n    else if\
    \ number == 0\n        error(\"No more carrots left\")\n    else\n        carrots\
    \ = number\n        carrots_left = remaining\n        meals = Vector{Int64}()\n\
    \        while carrots_left > 0\n            carrots_left -= 1\n            meals\
    \ << carrots\n        end\n        return meals, carrots_left\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\neat(100, 100, 100)\n</cell>\n<text>\nProblem\
    \ 7\nWrite a function called hungry that takes in an array of integers and returns\
    \ true if the array contains at least two elements that are both hungry and have\
    \ eaten at least two carrots.", "    if number < 0 || number > 1000 || need <\
    \ 0 || need > 1000 || remaining < 0 || remaining > 1000\n        return error(\"\
    invalid input\")\n    end\n    \n    carrots = zeros(Int64, 2)\n    carrots[1]\
    \ = number\n    carrots[2] = remaining\n    \n    meals = zeros(Int64, 2)\n  \
    \  meals[1] = need\n    meals[2] = 0\n    \n    carrots_left = zeros(Int64, 2)\n\
    \    carrots_left[1] = remaining\n    carrots_left[2] = 0\n    \n    carrots_eaten\
    \ = zeros(Int64, 2)\n    carrots_eaten[1] = 0\n    carrots_eaten[2] = 0\n    \n\
    \    meals_left = zeros(Int64, 2)\n    meals_left[1] = 0\n    meals_left[2] =\
    \ 0\n    \n    meals_eaten = zeros(Int64, 2)\n    meals_eaten[1] = 0\n    meals_eaten[2]\
    \ = 0\n    \n    while carrots[1] > 0 && meals[1] > 0\n        if carrots[1] >\
    \ meals[1]\n            carrots_eaten[1] = carrots[1] - meals[1]\n           \
    \ carrots[1] = meals[1]\n            meals[1] = 0\n        elseif meals[1] > carrots[1]\n\
    \            meals_eaten[1] = meals[1] - carrots[1]\n            meals[1] = carrots[1]\n\
    \            carrots[1] = 0\n        else\n            carrots_left[1] = carrots[1]\n\
    \            carrots[1] = 0\n            meals_left[1] = meals[1]\n          \
    \  meals[1] = 0\n        end\n        \n        if carrots_eaten[1] > 0\n    \
    \        carrots_eaten[2] = carrots_eaten[1]\n            carrots_eaten[1] = 0\n\
    \        else\n            carrots_eaten[2] = carrots_left[1]\n            carrots_left[1]\
    \ = 0\n        end\n        \n        if meals_eaten[1] > 0\n            meals_eaten[2]\
    \ = meals_eaten[1]\n            meals_eaten[1] = 0\n        else\n           \
    \ meals_eaten[2] = meals_left[1]\n            meals_left[1] = 0\n        end\n\
    \    end\n    \n    return carrots_eaten, carrots_left\nend\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 10, 10)\n</cell>\n<text>\nExercise 2\nWrite a function that will calculate\
    \ the number of carrots left after a meal is completed.\nThe function ", "   \
    \ if number < 0 || number > 1000 || need < 0 || need > 1000 || remaining < 0 ||\
    \ remaining > 1000\n        error(\"Invalid input\")\n    end\n    if number ==\
    \ 0\n        return Vector{Int64}()\n    end\n    if remaining == 0\n        return\
    \ Vector{Int64}([need])\n    end\n    \n    carrots = Vector{Int64}()\n    carrots\
    \ = carrots+[number]\n    carrots = carrots+[need]\n    carrots = carrots+[remaining]\n\
    \    \n    return carrots\nend\n</cell>\n<code language=julia-1.0>", "    \n \
    \   if number < 0 || number > 1000 || need < 0 || need > 1000 || remaining < 0\
    \ || remaining > 1000\n        return Vector{Int64}()\n    end\n    \n    carrots\
    \ = number\n    \n    if remaining == 0\n        return Vector{Int64}(carrots,\
    \ 0)\n    end\n    \n    carrots_left = remaining\n    \n    if carrots_left <\
    \ need\n        carrots_left = need\n    end\n    \n    return Vector{Int64}(carrots,\
    \ carrots_left)\nend\n</cell>\n<code language=julia-1.5>\neat(10, 10, 10)\n</cell>\n\
    <code language=julia-1.5>\neat(10, 10, 0)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 10, 1)\n</cell>\n<code language=julia-1.5>\neat(10, 10, 2)\n</cell>\n\
    <code language=julia-1.5>\neat(10, 10, 3)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 10, 4)\n</cell>\n<code language=julia-1.5>\neat(10, 10, 5)\n</cell>\n\
    <code language=julia-1.5>\neat(10, 10, 6)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 10, 7)\n</cell>\n<code language=julia-1.5>\neat(10, 10, 8)\n</cell>\n\
    <code language=julia-1.5>\neat(10, 10, 9)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 10, 10)\n</cell>\n<code language=julia-1.5>\neat(10, 10, 11)\n</cell>\n\
    <code language=julia-1.5>\neat(10, 10, 12)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 10, 13)\n</cell>\n<code language=julia-1.5>\neat(10, 10, 14)\n</cell>\n\
    <code language=julia-1.5>\neat(10, 10, 15)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 10, 16)\n</cell>\n<code language=julia-1.5>\neat(10, 10, 17)\n</cell>\n\
    <code language=julia-1.5>\neat(10, 10, 18)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 10, 19)\n</cell>\n<code language=julia-1.5>\neat(10, 10, 20)\n</cell>\n\
    <code language=julia-1.5>\neat(10, 10, 21)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 10, 22)\n</cell>\n<code language=julia-1.5>\neat(10, 10, 23)\n", "   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if number < 0 ||\
    \ need < 0 || remaining < 0\n        error(\"Invalid input\")\n    end\n    if\
    \ number == 0 && need == 0 && remaining == 0\n        return Vector{Int64}()\n\
    \    end\n    \n    if number == 0 && need == 0 && remaining > 0\n        return\
    \ Vector{Int64}(remaining)\n    end\n    \n    if number == 0 && need > 0 && remaining\
    \ == 0\n        return Vector{Int64}()\n    end\n    \n    if number > 0 && need\
    \ == 0 && remaining > 0\n        return Vector{Int64}()\n    end\n    \n    if\
    \ number > 0 && need > 0 && remaining == 0\n        return Vector{Int64}()\n \
    \   end\n    \n    if number > 0 && need == 0 && remaining > 0\n        return\
    \ Vector{Int64}()\n    end\n    \n    if number > 0 && need > 0 && remaining >\
    \ 0\n        return Vector{Int64}()\n    end\n    \n    if number == 0 && need\
    \ > 0 && remaining > 0\n        return Vector{Int64}()\n    end\n    \n    if\
    \ number > 0 && need > 0 && remaining == 0\n        return Vector{Int64}()\n \
    \   end\n    \n    if number > 0 && need == 0 && remaining > 0\n        return\
    \ Vector{Int64}()\n    end\n    \n    if number > 0 && need > 0 && remaining >\
    \ 0\n        return Vector{Int64}()\n    end\n    \n    if number == 0 && need\
    \ > 0 && remaining > 0\n        return Vector{Int64}()\n    end\n    \n    if\
    \ number > 0 && need > 0 && remaining > 0\n        return Vector{Int64}()\n  \
    \  end\n    \n    if number == 0 && need == 0 && remaining > 0\n        return\
    \ Vector{Int64}()\n    end\n    \n    if number > 0 && need == 0 && remaining\
    \ > 0\n        return Vector{Int64}()\n    end\n    \n    if number > 0 && need\
    \ > 0 && remaining > 0\n        return Vector{Int64}()\n    end\n    \n    if\
    \ number == 0 && need == 0 && remaining > 0\n        return Vector{Int64}()\n\
    \    end\n    \n    if number > 0 && need == 0 && remaining > 0\n        return\
    \ Vector{Int64}()\n    end\n    \n    if number > 0 && need > 0 && remaining >\
    \ 0\n        return Vector{Int64}()\n    end\n    \n    if number == 0 && need\
    \ > 0 && remaining > 0\n        return Vector{Int64}()\n    end\n    \n    if\
    \ number > 0 && need > 0 && remaining > 0\n        return Vector{Int64}()\n  \
    \  end\n    \n    if number == 0 && need == 0 && remaining > 0\n        return\
    \ Vector{Int64}()\n    end\n    \n    if number > ", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   if number < need \n        error(\"number must be greater than or equal to\
    \ need\")\n    end\n    if number == 0\n        error(\"number must be greater\
    \ than zero\")\n    end\n    if remaining < 0\n        error(\"remaining must\
    \ be greater than or equal to zero\")\n    end\n    if remaining == 0\n      \
    \  error(\"remaining must be greater than zero\")\n    end\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    if number < 0 || need < 0 || remaining < 0\n        return Vector{Int64}()\n\
    \    end\n    \n    if number == 0\n        return Vector{Int64}([need, remaining])\n\
    \    end\n    \n    if remaining == 0\n        return Vector{Int64}([number, 0])\n\
    \    end\n    \n    if number > remaining\n        return Vector{Int64}([number,\
    \ remaining])\n    end\n    \n    return Vector{Int64}([number, remaining - number])\n\
    end", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    if number == 0\n\
    \        \n        return Vector{Int64}()\n        \n    elseif need == 0\n  \
    \      \n        return Vector{Int64}(0, number)\n        \n    elseif remaining\
    \ < 0\n        \n        return Vector{Int64}(0, number)\n        \n    elseif\
    \ number < need\n        \n        return Vector{Int64}(0, number)\n        \n\
    \    else\n        \n        return Vector{Int64}(0, number)\n        \n    end\n\
    end\n</cell>\n<code language=julia-1.5>\neat(10, 10, 10)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 10, 0)\n</cell>\n<code language=julia-1.5>\neat(10, 10, -1)\n</cell>\n\
    <code language=julia-1.5>\neat(10, 10, 100)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 10, 101)\n</cell>\n<code language=julia-1.5>\neat(10, 10, 102)\n</cell>\n\
    <code language=julia-1.5>\neat(10, 10, 103)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 10, 104)\n</cell>\n<code language=julia-1.5>\neat(10, 10, 105)\n</cell>\n\
    <code language=julia-1.5>\neat(10, 10, 106)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 10, 107)\n</cell>\n<code language=julia-1.5>\neat(10, 10, 108)\n</cell>\n\
    <code language=julia-1.5>\neat(10, 10, 109)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 10, 110)\n</cell>\n<code language=julia-1.5>\neat(10, 10, 111)\n</cell>\n\
    <code language=julia-1.5>\neat(10, 10, 112)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 10, 113)\n</cell>\n<code language=julia-1.5>\neat(10, 10, 114)\n</cell>\n\
    <code language=julia-1.5>\neat(10, 10, 115)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 10, 116)\n</cell>\n<code language=julia-1.5>\neat(10, 10, 117)\n</cell>\n\
    <code language=julia-1.5>\neat(10, 10, 118)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 10, 119)\n</cell>\n<code language=julia-1.5>\neat(10, 10, 120)\n</cell>\n\
    <code language=julia-1.5>\neat(", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    if number == 0\n        Vector{Int64}()\n    elseif remaining\
    \ < need\n        Vector{Int64}(remaining, 0)\n    else\n        Vector{Int64}(0,\
    \ need - remaining)\n    end\nend\n</cell>\n<code language=julia-1.5>\n# Test\
    \ your code\n@code_warntype eat(10, 5, 10)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the number of seconds between two dates as a floating\
    \ point number.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    if number\
    \ <= 0\n        error(\"number must be positive\")\n    end\n    if need <= 0\n\
    \        error(\"need must be positive\")\n    end\n    if remaining <= 0\n  \
    \      error(\"remaining must be positive\")\n    end\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if number <= 0\n\
    \        error(\"The number of carrots you have eaten must be positive\")\n  \
    \  end\n    if need <= 0\n        error(\"The number of carrots you have need\
    \ to eat must be positive\")\n    end\n    if remaining <= 0\n        error(\"\
    The number of carrots you have left to eat must be positive\")\n    end\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    ", "    if number < need \n        error(\"number must be greater\
    \ than or equal to need\")\n    end\n    if number > remaining \n        error(\"\
    number must be less than or equal to remaining\")\n    end\n    if number == 0\
    \ \n        error(\"number must be greater than 0\")\n    end\n    if number ==\
    \ need \n        error(\"number must be less than or equal to remaining\")\n \
    \   end\n    if number == remaining \n        error(\"number must be greater than\
    \ or equal to need\")\n    end\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    if number == 0\n        Vector{Int64}()\n    elseif number < need\n       \
    \ Vector{Int64}()\n    elseif number < remaining\n        Vector{Int64}(remaining,\
    \ 0)\n    else\n        Vector{Int64}(0, need - number)\n    end\nend", "    if\
    \ number < need \n        error(\"Not enough carrots to eat\")\n    elseif number\
    \ > remaining\n        error(\"Not enough carrots to eat\")\n    else\n      \
    \  Vector{Int64}([number, remaining - number])\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    eat(10, 10, 10)\n</cell>\n<text>\nProblem 3\nWrite a function that returns the\
    \ number of days until a rabbit eats another rabbit.\nThe rabbit eats another\
    \ rabbit if and only if he has eaten a carrot less than or equal to one day ago.\n\
    The rabbit eats another rabbit if and only if he has eaten a carrot less than\
    \ or equal to two days ago.\nThe rabbit eats another rabbit if and only if he\
    \ has eaten a carrot less than or equal to three days ago.\nThe rabbit eats another\
    \ rabbit if and only if he has eaten a carrot less than or equal to four days\
    \ ago.\nThe rabbit eats another rabbit if and only if he has eaten a carrot less\
    \ than or equal to five days ago.\nThe rabbit eats another rabbit if and only\
    \ if he has eaten a carrot less than or equal to six days ago.\nThe rabbit eats\
    \ another rabbit if and only if he has eaten a carrot less than or equal to seven\
    \ days ago.\nThe rabbit eats another rabbit if and only if he has eaten a carrot\
    \ less than or equal to eight days ago.\nThe rabbit eats another rabbit if and\
    \ only if he has eaten a carrot less than or equal to nine days ago.\nThe rabbit\
    \ eats another rabbit if and only if he has eaten a carrot less than or equal\
    \ to ten days ago.\nThe rabbit eats another rabbit if and only if he has eaten\
    \ a carrot less than or equal to eleven days ago.\nThe rabbit eats another rabbit\
    \ if and only if he has eaten a carrot less than or equal to twelve days ago.\n\
    The rabbit eats another rabbit if and only if he has eaten a carrot less than\
    \ or equal to thirteen days ago.\nThe rabbit eats another rabbit if and only if\
    \ he has eaten a carrot less than or equal to fourteen days ago.", "    if number\
    \ < need \n        error(\"Not enough carrots to eat\")\n    elseif number ==\
    \ 0\n        error(\"No carrots left\")\n    elseif remaining < 0\n        error(\"\
    Not enough carrots to eat\")\n    else\n        Vector{Int64}([number, remaining\
    \ - number])\n    end\nend\n</cell>\n<code language=julia-1.0>\neat(10, 5, 10)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of carrots\
    \ left after a meal is completed.\nThe function should take two arguments: the\
    \ number of carrots you have eaten so far, and the number that you need to eat.\n\
    The function should return an array of two integers, the first one being the number\
    \ of carrots left after your meal, and the second one being the number of carrots\
    \ left after your meal.\nIf there are not enough carrots left after your meals,\
    \ you will eat all remaining carrots, but will still be hungry.\nThe function\
    \ should return an empty array if there are no carrots left after your meals.",
  "    if number <= 0\n        error(\"The number must be positive\")\n    end\n \
    \   if need <= 0\n        error(\"The need must be positive\")\n    end\n    if\
    \ remaining <= 0\n        error(\"The remaining must be positive\")\n    end\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if number == 0\n        Vector{Int64}()\n    else\n\
    \        Vector{Int64}([need, remaining])\n    end\nend", "    if number < 0 ||\
    \ number > 1000 \n        error(\"number should be between 0 and 1000\")\n   \
    \ end\n    if need < 0 || need > 1000 \n        error(\"need should be between\
    \ 0 and 1000\")\n    end\n    if remaining < 0 || remaining > 1000 \n        error(\"\
    remaining should be between 0 and 1000\")\n    end\n    \n    carrots = zeros(Int64,\
    \ 2)\n    carrots[1] = number\n    carrots[2] = remaining\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    ", "    if number < need \n        error(\"\
    The number of carrots you need to eat is greater than the number of carrots you\
    \ have eaten.\")\n    else if number > remaining\n        error(\"The number of\
    \ carrots you need to eat is greater than the number of carrots you have left.\"\
    )\n    else\n        Vector{Int64}([number, remaining - number])\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\neat(5, 10, 20)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that will return the number of carrots left after a meal\
    \ is complete.\nThe function should take in two parameters: the number of carrots\
    \ you have eaten so far, and the total number of carrots left.\nThe function should\
    \ return an array of two elements: the number of carrots left after your meal,\
    \ and the total number of carrots left.\nThe function should return an error if\
    \ either of the parameters is less than zero.", "    if number < need then return\
    \ []\n    if remaining < need then return [number, 0]\n    \n    carrots = number\n\
    \    \n    need = need - carrots\n    \n    remaining = remaining - carrots\n\
    \    \n    return [carrots, remaining]\nend\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 5, 0)\n</cell>\n<code language=julia-1.5>\neat(10, 5, 100)\n</cell>\n\
    <code language=julia-1.5>\neat(10, 5, 200)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 5, 300)\n</cell>\n<code language=julia-1.5>\neat(10, 5, 400)\n</cell>\n\
    <code language=julia-1.5>\neat(10, 5, 500)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 5, 600)\n</cell>\n<code language=julia-1.5>\neat(10, 5, 700)\n</cell>\n\
    <code language=julia-1.5>\neat(10, 5, 800)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 5, 900)\n</cell>\n<code language=julia-1.5>\neat(10, 5, 1000)\n</cell>\n\
    <code language=julia-1.5>\neat(10, 5, 10000)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 5, 100000)\n</cell>\n<code language=julia-1.5>\neat(10, 5, 1000000)\n\
    </cell>\n<code language=julia-1.5>\neat(10, 5, 10000000)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 5, 100000000)\n</cell>\n<code language=julia-1.5>\neat(10, 5, 1000000000)\n\
    </cell>\n<code language=julia-1.5>\neat(10, 5, 10000000000)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 5, 100000000000)\n</cell>\n<code language=julia-1.5>\neat(10, 5, 1000000000000)\n\
    </cell>\n<code language=julia-1.5>\neat(10, 5, 1000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\neat(10, 5, 1000000000001)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 5, 1000000000002)\n</cell>\n<code language=julia-1.5>\neat(10, 5, 1000000000003)\n\
    </cell>\n<code language=julia-1.5>\neat(10, 5, 1000000000004)\n</cell>\n<code\
    \ language=julia-1.5>\neat(10, 5, 1000000000005)\n</cell", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    if number < 0 || number > 1000 ||\
    \ need < 0 || need > 1000 || remaining < 0 || remaining > 1000\n        return\
    \ Vector{Int64}()\n    end\n    \n    carrots = number\n    \n    if remaining\
    \ > 0 \n        carrots = carrots + remaining\n        remaining = 0\n    end\n\
    \    \n    if carrots > need\n        carrots = carrots - need\n    else\n   \
    \     carrots = carrots + need\n    end\n    \n    return Vector{Int64}(carrots)\n\
    end\n</cell>\n<code language=julia-1.5>\neat(10, 10, 10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes in an array of integers and returns the number\
    \ of integers that are divisible by 3.", "    \n    carrots = number\n    \n \
    \   while carrots > 0\n        if carrots >= need\n            carrots -= need\n\
    \        else\n            carrots -= remaining\n        end\n    end\n    \n\
    \    return Vector{Int64}(carrots, remaining)\nend\n</cell>\n<code language=julia-1.5>\n\
    eat(100, 100, 100)\n</cell>\n<text>\nProblem 3\nWrite a function that returns\
    \ the number of days in a month.", "    if number <= 0\n        error(\"number\
    \ must be positive\")\n    end\n    if need <= 0\n        error(\"need must be\
    \ positive\")\n    end\n    if remaining <= 0\n        error(\"remaining must\
    \ be positive\")\n    end\n    \n    carrots = zeros(Int64, 2)\n    carrots[1]\
    \ = number\n    carrots[2] = remaining\n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    ", "    if number == 0\n\
    \        Vector{Int64}()\n    elseif number < need\n        Vector{Int64}(remaining,\
    \ 0)\n    elseif number > need\n        Vector{Int64}(0, remaining)\n    else\n\
    \        Vector{Int64}(remaining - number, remaining - number - need)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\neat(10, 10, 10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function called eat_all that takes three integers as arguments and\
    \ returns an array of integers containing the number of carrots you would need\
    \ to eat to complete the day's meals.", "    if number <= 0\n        error(\"\
    number must be positive\")\n    end\n    if need <= 0\n        error(\"need must\
    \ be positive\")\n    end\n    if remaining <= 0\n        error(\"remaining must\
    \ be positive\")\n    end\n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if number <= 0\n        error(\"number must be positive\"\
    )\n    end\n    if need <= 0\n        error(\"need must be positive\")\n    end\n\
    \    if remaining <= 0\n        error(\"remaining must be positive\")\n    end\n\
    \    \n    carrots = zeros(Int64, 2)\n    carrots[1] = number\n    carrots[2]\
    \ = remaining\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    ", "    if number == 0\n        Vector{Int64}()\n    elseif number < need\n\
    \        Vector{Int64}()\n    elseif number < remaining\n        Vector{Int64}([number,\
    \ remaining])\n    else\n        Vector{Int64}([number, need])\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\neat(10, 10, 10)\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that takes in an array of integers, and returns the number\
    \ of positive integers in the array.", "    if number < 0 || number > 1000 ||\
    \ need < 0 || need > 1000 || remaining < 0 || remaining > 1000\n        return\
    \ error(\"invalid input\")\n    end\n    \n    carrots = zeros(Int64, 2)\n   \
    \ carrots[1] = number\n    carrots[2] = remaining\n    \n    carrots = carrots[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    ",
  "    if number < 0 || number > 1000 || need < 0 || need > 1000 || remaining < 0\
    \ || remaining > 1000\n        return Vector{Int64}()\n    end\n    \n    carrots\
    \ = number\n    carrots_left = remaining\n    \n    while carrots > 0\n      \
    \  if carrots_left == 0\n            carrots_left = remaining\n            carrots\
    \ = number\n        else\n            carrots_left -= 1\n        end\n    end\n\
    \    \n    return Vector{Int64}(carrots, carrots_left)\nend\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 5, 10)\n</cell>\n<code language=julia-1.5>\neat(10, 5, 0)\n</cell>\n<code\
    \ language=julia-1.5>\neat(10, 5, 100)\n</cell>\n<code language=julia-1.5>\neat(10,\
    \ 5, 100)\n</cell>\n<code language=julia-1.5>\neat(10, 5, 100)\n</cell>\n<code\
    \ language=julia-1.5>\neat(10, 5, 100)\n</cell>\n<code language=julia-1.5>\neat(10,\
    \ 5, 100)\n</cell>\n<code language=julia-1.5>\neat(10, 5, 100)\n</cell>\n<code\
    \ language=julia-1.5>\neat(10, 5, 100)\n</cell>\n<code language=julia-1.5>\neat(10,\
    \ 5, 100)\n</cell>\n<code language=julia-1.5>\neat(10, 5, 100)\n</cell>\n<code\
    \ language=julia-1.5>\neat(10, 5, 100)\n</cell>\n<code language=julia-1.5>\neat(10,\
    \ 5, 100)\n</cell>\n<code language=julia-1.5>\neat(10, 5, 100)\n</cell>\n<code\
    \ language=julia-1.5>\neat(10, 5, 100)\n</cell>\n<code language=julia-1.5>\neat(10,\
    \ 5, 100)\n</cell>\n<code language=julia-1.5>\neat(10, 5, 100)\n</cell>\n<code\
    \ language=julia-1.5>\neat(10, 5, 100)\n</cell>\n<code language=julia-1.5>\neat(10,\
    \ 5, 100)\n</cell>\n<code language=julia-1.5>\neat(10, 5, 100)\n</cell>\n<code\
    \ language=julia-1.5>\neat(10, 5, 100)\n</cell>\n<code language=julia-1.5>\neat(10,\
    \ 5, 100)\n</cell>\n<code language=julia-1.5>\neat(10, 5, 100)\n</cell>\n<code\
    \ language=julia-1.5>\neat(10, 5, 100)\n</cell>\n<code language=julia-1.5>\neat(10,\
    \ 5, 100)\n</cell>\n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    if number <= 0\n        error(\"number must be positive\")\n    end\n    if\
    \ need <= 0\n        error(\"need must be positive\")\n    end\n    if remaining\
    \ <= 0\n        error(\"remaining must be positive\")\n    end\n    \n    carrots\
    \ = zeros(Int64, 2)\n    carrots[1] = number\n    carrots[2] = remaining\n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    ", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   if number <= 0\n        error(\"number must be positive\")\n    end\n    if\
    \ need <= 0\n        error(\"need must be positive\")\n    end\n    if remaining\
    \ <= 0\n        error(\"remaining must be positive\")\n    end\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    if number < 0 || need < 0 || remaining < 0\n        error(\"invalid\
    \ input\")\n    end\n    \n    if remaining == 0\n        return Vector{Int64}([number,\
    \ need])\n    end\n    \n    carrots = number\n    \n    if number == 0\n    \
    \    return Vector{Int64}([need, remaining])\n    end\n    \n    if number ==\
    \ need\n        return Vector{Int64}([number, remaining])\n    end\n    \n   \
    \ carrots = remaining - need\n    \n    return Vector{Int64}([number, carrots])\n\
    end\n</cell>\n<code language=julia-1.5>\neat(10, 5, 10)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 5, 0)\n</cell>\n<code language=julia-1.5>\neat(10, 5, 100)\n</cell>\n\
    <code language=julia-1.5>\neat(10, 5, 1000)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 5, 10000)\n</cell>\n<code language=julia-1.5>\neat(10, 5, 100000)\n</cell>\n\
    <code language=julia-1.5>\neat(10, 5, 1000000)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 5, 10000000)\n</cell>\n<code language=julia-1.5>\neat(10, 5, 100000000)\n\
    </cell>\n<code language=julia-1.5>\neat(10, 5, 1000000000)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 5, 10000000000)\n</cell>\n<code language=julia-1.5>\neat(10, 5, 100000000000)\n\
    </cell>\n<code language=julia-1.5>\neat(10, 5, 1000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\neat(10, 5, 1000000000001)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 5, 1000000000002)\n</cell>\n<code language=julia-1.5>\neat(10, 5, 1000000000003)\n\
    </cell>\n<code language=julia-1.5>\neat(10, 5, 1000000000004)\n</cell>\n<code\
    \ language=julia-1.5>\neat(10, 5, 1000000000005)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 5, 1000000000006)\n</cell>\n<code language=julia-1.5>\neat(10, 5, 1000000000007)\n\
    </cell>\n<code language=julia-1.5>\neat(10, 5, 1000000000008)\n</cell>\n<code\
    \ language=julia-1.5>\neat(10, 5, 1000000000009)\n</", "    if number <= 0\n \
    \       error(\"number must be positive\")\n    end\n    if need <= 0\n      \
    \  error(\"need must be positive\")\n    end\n    if remaining <= 0\n        error(\"\
    remaining must be positive\")\n    end\n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    if number < need \n \
    \       error(\"Not enough carrots to eat\")\n    end\n    \n    if remaining\
    \ == 0\n        error(\"No more carrots to eat\")\n    end\n    \n    carrots\
    \ = Vector{Int64}(undef, number)\n    \n    for i = 1:number\n        carrots[i]\
    \ = rand(1:1000)\n    end\n    \n    carrots[number] = remaining\n    \n    return\
    \ carrots\nend\n</cell>\n<code language=julia-1.5>", "    \n    \n    if number\
    \ <= 0\n        error(\"number must be positive\")\n    end\n    if need <= 0\n\
    \        error(\"need must be positive\")\n    end\n    if remaining <= 0\n  \
    \      error(\"remaining must be positive\")\n    end\n    \n    if number > remaining\n\
    \        error(\"number must be less than remaining\")\n    end\n    \n    if\
    \ need > remaining\n        error(\"need must be less than remaining\")\n    end\n\
    \    \n    if number == 0\n        error(\"number must be greater than 0\")\n\
    \    end\n    \n    if need == 0\n        error(\"need must be greater than 0\"\
    )\n    end\n    \n    if remaining == 0\n        error(\"remaining must be greater\
    \ than 0\")\n    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    if number < need \n        error(\"number must be greater than\
    \ or equal to need\")\n    \n    if remaining < need \n        error(\"need must\
    \ be greater than or equal to remaining\")\n    \n    if number == 0 \n      \
    \  return Vector{Int64}()\n    \n    if number == need \n        return Vector{Int64}([number,\
    \ 0])\n    \n    if number > need \n        error(\"number must be less than or\
    \ equal to need\")\n    \n    if remaining == 0 \n        return Vector{Int64}()\n\
    \    \n    if remaining == need \n        return Vector{Int64}([number, 0])\n\
    \    \n    if number == need && remaining == 0 \n        return Vector{Int64}([number,\
    \ 0])\n    \n    if number == need && remaining > 0 \n        return Vector{Int64}([number,\
    \ 0])\n    \n    if number == need && remaining == need \n        return Vector{Int64}([number,\
    \ 0])\n    \n    if number == need && remaining == need + 1 \n        return Vector{Int64}([number,\
    \ 0])\n    \n    if number == need && remaining == need + 2 \n        return Vector{Int64}([number,\
    \ 0])\n    \n    if number == need && remaining == need + 3 \n        return Vector{Int64}([number,\
    \ 0])\n    \n    if number == need && remaining == need + 4 \n        return Vector{Int64}([number,\
    \ 0])\n    \n    if number == need && remaining == need + 5 \n        return Vector{Int64}([number,\
    \ 0])\n    \n    if number == need && remaining == need + 6 \n        return Vector{Int64}([number,\
    \ 0])\n    \n    if number == need && remaining == need + 7 \n        return Vector{Int64}([number,\
    \ 0])\n    \n    if number == need && remaining == need + 8 \n        return Vector{Int64}([number,\
    \ 0])\n    \n    if number == need && remaining == need + 9 \n        return Vector{Int64}([number,\
    \ 0])\n    \n    if number == need && remaining == need + 10 \n        return\
    \ Vector{Int64}([number, 0])\n    \n    if number == need && remaining == need\
    \ + 11 \n        return Vector{Int64}([number, 0])\n    \n    if number == need\
    \ && remaining == need + 12 \n        return Vector{Int64}([number, 0])\n    \n\
    \    if number == need && remaining == need + 13 \n        return Vector{Int64}([number,\
    \ 0])\n    \n    if number == need && remaining == need + 14 \n        return\
    \ Vector{Int64}([number, 0])\n    \n    if number == need && remaining == need\
    \ + 15 \n        return ", "    if number < 0 || number > 1000 || need < 0 ||\
    \ need > 1000 || remaining < 0 || remaining > 1000 \n        error(\"Invalid input\"\
    )\n    end\n    \n    carrots = zeros(Int64, 2)\n    carrots[1] = number\n   \
    \ carrots[2] = remaining\n    \n    carrots = carrots[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    ", "    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    if number < need \n       \
    \ error(\"number must be larger than need\")\n    end\n    if number > remaining\n\
    \        error(\"number must be smaller than remaining\")\n    end\n    if number\
    \ == 0\n        error(\"number must be larger than 0\")\n    end\n    if number\
    \ == need\n        error(\"number must be smaller than need\")\n    end\n    if\
    \ number == remaining\n        error(\"number must be smaller than remaining\"\
    )\n    end\n    \n    carrots = zeros(Int64, 2)\n    carrots[1] = number\n   \
    \ carrots[2] = remaining\n    \n    return carrots\nend", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    if number < 0 || number > 1000 ||\
    \ need < 0 || need > 1000 || remaining < 0 || remaining > 1000\n        return\
    \ Vector{Int64}()\n    end\n    \n    carrots = Vector{Int64}()\n    \n    carrots\
    \ = Vector{Int64}([number])\n    \n    while carrots[1] < need\n        carrots[1]\
    \ = carrots[1] + carrots[1]\n    end\n    \n    while carrots[1] > 0\n       \
    \ carrots[1] = carrots[1] - carrots[1]\n    end\n    \n    return carrots\nend\n\
    </cell>\n<code language=julia-1.5>\neat(10, 10, 10)\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that takes in an array of integers, and returns an array\
    \ of integers representing the number of times each integer appears in the array.",
  "    if number < need \n        error(\"Not enough carrots to eat\")\n    elseif\
    \ number == 0\n        error(\"No carrots to eat\")\n    elseif number > remaining\n\
    \        error(\"Not enough carrots to eat\")\n    else\n        Vector{Int64}([number,\
    \ remaining - number])\n    end\nend\n</cell>\n<code language=julia-1.5>\neat(5,\
    \ 10, 100)\n</cell>\n<text>\nExercise 2\nWrite a function that will return the\
    \ number of carrots left after a meal is completed.\nThe function should take\
    \ in two parameters: the number of carrots you have eaten and the number of carrots\
    \ left after your meals.\nThe function should return an array of two elements:\
    \ the number of carrots left after your meals and the number of carrots you have\
    \ eaten.\nThe function should return an error if there is not enough carrots to\
    \ complete the meal.", "    if number <= need && number <= remaining \n      \
    \  Vector{Int64}([number, remaining - number])\n    else\n        Vector{Int64}([0,\
    \ 0])\n    end\nend\n</cell>\n<code language=julia-1.0>\neat(10, 10, 10)\n</cell>\n\
    <text>\nProblem 3\nWrite a function that returns the number of ways you can reach\
    \ a certain sum from any given starting point.", "    if number <= 0\n       \
    \ error(\"number must be positive\")\n    elsif need <= 0\n        error(\"need\
    \ must be positive\")\n    elsif remaining <= 0\n        error(\"remaining must\
    \ be positive\")\n    elsif number > remaining\n        error(\"number must be\
    \ less than remaining\")\n    elsif need > remaining\n        error(\"need must\
    \ be less than remaining\")\n    else if number == 0\n        Vector{Int64}()\n\
    \    else\n        Vector{Int64}(remaining - need, number)\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\n# Test your code\n@test eat(10, 5, 10) == [5, 10]\n\
    @test eat(10, 5, 0) == [5, 0]\n@test eat(10, 5, -1) == [5, 0]\n@test eat(10, 5,\
    \ -2) == [5, 0]\n@test eat(10, 5, 100) == [5, 0]\n@test eat(10, 5, 101) == [5,\
    \ 0]\n@test eat(10, 5, 500) == [5, 0]\n@test eat(10, 5, 501) == [5, 0]\n@test\
    \ eat(10, 5, 1000) == [5, 0]\n@test eat(10, 5, 1001) == [5, 0]\n@test eat(10,\
    \ 5, 5000) == [5, 0]\n@test eat(10, 5, 5001) == [5, 0]\n@test eat(10, 5, 10000)\
    \ == [5, 0]\n@test eat(10, 5, 10001) == [5, 0]\n@test eat(10, 5, 50000) == [5,\
    \ 0]\n@test eat(10, 5, 50001) == [5, 0]\n@test eat(10, 5, 100000) == [5, 0]\n\
    @test eat(10, 5, 10001) == [5, 0]\n@test eat(10, 5, 50000) == [5, 0]\n@test eat(10,\
    \ 5, 50001) == [5, 0]\n@test eat(10, 5, 100000) == [5, 0]\n@test eat(10, 5, 10001)\
    \ == [5, 0]\n@test eat(10, 5, 50000) == [5, 0]\n@test eat(10, 5, 50001) == [5,\
    \ 0]\n@test eat(10, 5, 100000) == [5, 0]\n@test eat(10, 5, 10001) == [5, 0]\n\
    @test eat(10, 5, 50000) == [5, 0]\n@test eat(10, 5, 50001) == [5, 0]\n@test eat(10,\
    \ 5, 100000) == [5, 0]\n@test eat(10, 5, 10001) == [5, 0]\n@test eat(10, 5, 50000)\
    \ == [5, 0]\n@test ", "    if number <= 0\n        error(\"number must be positive\"\
    )\n    end\n    if need <= 0\n        error(\"need must be positive\")\n    end\n\
    \    if remaining <= 0\n        error(\"remaining must be positive\")\n    end\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    if number <= 0\n        error(\"number must be positive\")\n  \
    \  end\n    if need <= 0\n        error(\"need must be positive\")\n    end\n\
    \    if remaining <= 0\n        error(\"remaining must be positive\")\n    end\n\
    \    \n    carrots = zeros(Int64, 2)\n    carrots[1] = number\n    carrots[2]\
    \ = remaining\n    \n    carrots = carrots[2:end]\n    \n    if carrots[1] > 0\n\
    \        carrots[1] = carrots[1] - need\n    end\n    \n    if carrots[2] > 0\n\
    \        carrots[2] = carrots[2] - carrots[1]\n    end\n    \n    return carrots\n\
    end", "    if number <= 0\n        error(\"number must be positive\")\n    end\n\
    \    if need <= 0\n        error(\"need must be positive\")\n    end\n    if remaining\
    \ <= 0\n        error(\"remaining must be positive\")\n    end\n    \n    carrots\
    \ = zeros(Int64, 2)\n    carrots[1] = number\n    carrots[2] = remaining\n   \
    \ \n    meals = zeros(Int64, 2)\n    meals[1] = need\n    meals[2] = 0\n    \n\
    \    carrots_left = zeros(Int64, 2)\n    carrots_left[1] = remaining\n    carrots_left[2]\
    \ = 0\n    \n    carrots_eaten = zeros(Int64, 2)\n    carrots_eaten[1] = 0\n \
    \   carrots_eaten[2] = 0\n    \n    carrots_left = carrots_left[1]\n    carrots_eaten\
    \ = carrots_eaten[1]\n    \n    carrots_left = carrots_left[2]\n    carrots_eaten\
    \ = carrots_eaten[2]\n    \n    carrots_left = carrots_left[1]\n    carrots_eaten\
    \ = carrots_eaten[1]\n    \n    carrots_left = carrots_left[2]\n    carrots_eaten\
    \ = carrots_eaten[2]\n    \n    carrots_left = carrots_left[1]\n    carrots_eaten\
    \ = carrots_eaten[1]\n    \n    carrots_left = carrots_left[2]\n    carrots_eaten\
    \ = carrots_eaten[2]\n    \n    carrots_left = carrots_left[1]\n    carrots_eaten\
    \ = carrots_eaten[1]\n    \n    carrots_left = carrots_left[2]\n    carrots_eaten\
    \ = carrots_eaten[2]\n    \n    carrots_left = carrots_left[1]\n    carrots_eaten\
    \ = carrots_eaten[1]\n    \n    carrots_left = carrots_left[2]\n    carrots_eaten\
    \ = carrots_eaten[2]\n    \n    carrots_left = carrots_left[1]\n    carrots_eaten\
    \ = carrots_eaten[1]\n    \n    carrots_left = carrots_left[2]\n    carrots_eaten\
    \ = carrots_eaten[2]\n    \n    carrots_left = carrots_left[1]\n    carrots_eaten\
    \ = carrots_eaten[1]\n    \n    carrots_left = carrot", "    if number < need\
    \ \n        error(\"The number of carrots you have eaten must be greater than\
    \ the number of carrots you are trying to eat\")\n    end\n    if remaining <\
    \ 0\n        error(\"The number of carrots you have eaten must be greater than\
    \ the number of carrots you are trying to eat\")\n    end\n    \n    carrots =\
    \ zeros(Int64, 2)\n    carrots[1] = number\n    carrots[2] = remaining\n    \n\
    \    \n    return carrots\nend\n</cell>\n<code language=julia-1.5>", "    if number\
    \ < 0 || need < 0 || remaining < 0\n        error(\"Invalid input\")\n    end\n\
    \    if number == 0 && need == 0 && remaining == 0\n        return Vector{Int64}()\n\
    \    end\n    if number == 0 && need == 0 && remaining > 0\n        return Vector{Int64}(remaining)\n\
    \    end\n    if number == 0 && need > 0 && remaining == 0\n        return Vector{Int64}()\n\
    \    end\n    if number == 0 && need > 0 && remaining > 0\n        return Vector{Int64}()\n\
    \    end\n    if number == 0 && need == 0 && remaining == 0\n        return Vector{Int64}()\n\
    \    end\n    if number == 0 && need > 0 && remaining == 0\n        return Vector{Int64}()\n\
    \    end\n    if number == 0 && need > 0 && remaining > 0\n        return Vector{Int64}()\n\
    \    end\n    if number == 0 && need == 0 && remaining == 0\n        return Vector{Int64}()\n\
    \    end\n    if number == 0 && need > 0 && remaining == 0\n        return Vector{Int64}()\n\
    \    end\n    if number == 0 && need > 0 && remaining > 0\n        return Vector{Int64}()\n\
    \    end\n    if number == 0 && need == 0 && remaining == 0\n        return Vector{Int64}()\n\
    \    end\n    if number == 0 && need > 0 && remaining == 0\n        return Vector{Int64}()\n\
    \    end\n    if number == 0 && need > 0 && remaining > 0\n        return Vector{Int64}()\n\
    \    end\n    if number == 0 && need == 0 && remaining == 0\n        return Vector{Int64}()\n\
    \    end\n    if number == 0 && need > 0 && remaining == 0\n        return Vector{Int64}()\n\
    \    end\n    if number == 0 && need > 0 && remaining > 0\n        return Vector{Int64}()\n\
    \    end\n    if number == 0 && need == 0 && remaining == 0\n        return Vector{Int64}()\n\
    \    end\n    if number == 0 && need > 0 && remaining == 0\n        return Vector{Int64}()\n\
    \    end\n    if number == 0 && need > 0 && remaining > 0\n        return Vector{Int64}()\n\
    \    end\n    if number == 0 && need == 0 && remaining == 0\n        return Vector{Int64}()\n\
    \    end\n    if number == 0 && need > 0 && remaining == 0\n        return Vector{Int64}()\n\
    \    end\n    if number == 0 && need > 0 && remaining > 0\n        return Vector{Int64}()\n\
    \    end\n    if number == 0 && need == 0 && remaining == 0\n        return Vector{Int64}()\n\
    \    end\n    if number == 0 && need > 0 && remaining == 0\n        return Vector{Int64",
  "    if number < need \n        error(\"number must be greater than or equal to\
    \ need\")\n    else if number == 0\n        error(\"number must be greater than\
    \ 0\")\n    else if remaining < 0\n        error(\"remaining must be greater than\
    \ or equal to 0\")\n    else if remaining == 0\n        error(\"remaining must\
    \ be greater than 0\")\n    else\n        Vector{Int64}([number, remaining - number])\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\neat(10, 5, 0)\n</cell>\n<code\
    \ language=julia-1.5>\neat(10, 5, 10)\n</cell>\n<code language=julia-1.5>\neat(10,\
    \ 5, 20)\n</cell>\n<code language=julia-1.5>\neat(10, 5, 30)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 5, 40)\n</cell>\n<code language=julia-1.5>\neat(10, 5, 50)\n</cell>\n\
    <code language=julia-1.5>\neat(10, 5, 60)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 5, 70)\n</cell>\n<code language=julia-1.5>\neat(10, 5, 80)\n</cell>\n\
    <code language=julia-1.5>\neat(10, 5, 90)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 5, 100)\n</cell>\n<code language=julia-1.5>\neat(10, 5, 110)\n</cell>\n\
    <code language=julia-1.5>\neat(10, 5, 120)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 5, 130)\n</cell>\n<code language=julia-1.5>\neat(10, 5, 140)\n</cell>\n\
    <code language=julia-1.5>\neat(10, 5, 150)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 5, 160)\n</cell>\n<code language=julia-1.5>\neat(10, 5, 170)\n</cell>\n\
    <code language=julia-1.5>\neat(10, 5, 180)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 5, 190)\n</cell>\n<code language=julia-1.5>\neat(10, 5, 200)\n</cell>\n\
    <code language=julia-1.5>\neat(10, 5, 210)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 5, 220)\n</cell>\n<code language=julia-1.5>\neat(10, 5, 230)\n</cell>\n\
    <code language=julia-1.5>\neat(10, 5, 240)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 5, 250)\n</cell>", "    if number < 0 || number > 1000 \n        error(\"\
    number must be between 0 and 1000\")\n    end\n    if need < 0 || need > 1000\
    \ \n        error(\"need must be between 0 and 1000\")\n    end\n    if remaining\
    \ < 0 || remaining > 1000 \n        error(\"remaining must be between 0 and 1000\"\
    )\n    end\n    \n    carrots = zeros(Int64, 2)\n    carrots[1] = number\n   \
    \ carrots[2] = remaining\n    \n    meals = zeros(Int64, 2)\n    meals[1] = need\n\
    \    meals[2] = remaining\n    \n    carrots = carrots[2:end]\n    meals = meals[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    meals = meals[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    meals = meals[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    meals = meals[2:end]\n    \n    carrots = carrots[2:end]\n    meals = meals[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    meals = meals[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    meals = meals[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    meals = meals[2:end]\n    \n    carrots = carrots[2:end]\n    meals = meals[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    meals = meals[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    meals = meals[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    meals = meals[2:end]\n    \n    carrots = carrots[2:end]\n    meals = meals[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    meals = meals[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    meals = meals[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    meals = meals[2:end]\n    \n    carrots = carrots[2:end]\n    meals = meals[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    meals = meals[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n", "    if number <= 0\n        error(\"number must be positive\"\
    )\n    end\n    if need <= 0\n        error(\"need must be positive\")\n    end\n\
    \    if remaining <= 0\n        error(\"remaining must be positive\")\n    end\n\
    \    \n    carrots = zeros(Int64, 2)\n    carrots[1] = number\n    carrots[2]\
    \ = remaining\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    ", "    if number < 0 || number > 1000 || need < 0 || need > 1000 || remaining\
    \ < 0 || remaining > 1000\n        return error(\"invalid input\")\n    end\n\
    \    \n    if remaining == 0\n        return Vector{Int64}([number, need])\n \
    \   end\n    \n    if number == 0\n        return Vector{Int64}([need, remaining])\n\
    \    end\n    \n    if need == 0\n        return Vector{Int64}([number, remaining])\n\
    \    end\n    \n    if number > remaining\n        return Vector{Int64}([number,\
    \ need])\n    end\n    \n    if need > remaining\n        return Vector{Int64}([need,\
    \ number])\n    end\n    \n    if number == need\n        return Vector{Int64}([number,\
    \ remaining])\n    end\n    \n    if number > need\n        return Vector{Int64}([number,\
    \ remaining])\n    end\n    \n    if need == remaining\n        return Vector{Int64}([number,\
    \ need])\n    end\n    \n    if number == remaining\n        return Vector{Int64}([number,\
    \ need])\n    end\n    \n    if number > remaining\n        return Vector{Int64}([number,\
    \ need])\n    end\n    \n    return Vector{Int64}([number, need])\nend\n</cell>\n\
    <code language=julia-1.5>", "    if number < 0 || need < 0 || remaining < 0\n\
    \        error(\"Invalid input\")\n    end\n    \n    if number == 0 && remaining\
    \ == 0\n        return Vector{Int64}()\n    end\n    \n    if number == 0 && remaining\
    \ > 0\n        return Vector{Int64}(remaining)\n    end\n    \n    if number >\
    \ 0 && remaining == 0\n        return Vector{Int64}(number, 0)\n    end\n    \n\
    \    if number > 0 && remaining > 0\n        return Vector{Int64}(number, need)\n\
    \    end\n    \n    if number == 0 && remaining == 0\n        return Vector{Int64}(number,\
    \ need)\n    end\n    \n    if number > 0 && remaining == 0\n        return Vector{Int64}(number,\
    \ need)\n    end\n    \n    if number > 0 && remaining > 0\n        return Vector{Int64}(number,\
    \ need)\n    end\n    \n    if number == 0 && remaining > 0\n        return Vector{Int64}(number,\
    \ need)\n    end\n    \n    if number > 0 && remaining == 0\n        return Vector{Int64}(number,\
    \ need)\n    end\n    \n    if number > 0 && remaining > 0\n        return Vector{Int64}(number,\
    \ need)\n    end\n    \n    if number == 0 && remaining == 0\n        return Vector{Int64}(number,\
    \ need)\n    end\n    \n    if number > 0 && remaining == 0\n        return Vector{Int64}(number,\
    \ need)\n    end\n    \n    if number > 0 && remaining > 0\n        return Vector{Int64}(number,\
    \ need)\n    end\n    \n    if number == 0 && remaining == 0\n        return Vector{Int64}(number,\
    \ need)\n    end\n    \n    if number > 0 && remaining == 0\n        return Vector{Int64}(number,\
    \ need)\n    end\n    \n    if number > 0 && remaining > 0\n        return Vector{Int64}(number,\
    \ need)\n    end\n    \n    if number == 0 && remaining == 0\n        return Vector{Int64}(number,\
    \ need)\n    end\n    \n    if number > 0 && remaining == 0\n        return Vector{Int64}(number,\
    \ need)\n    end\n    \n    if number > 0 && remaining > 0\n        return Vector{Int64}(number,\
    \ need)\n    end\n    \n    if number == 0 && remaining == 0\n        return Vector{Int64}(number,\
    \ need)\n    end\n    \n    if number > 0 && remaining == 0\n        return Vector{Int64}(number,\
    \ need)\n    end\n    \n    if number > 0 && remaining > 0\n        return Vector{Int64}(number,\
    \ need)\n    end\n    \n    if number == 0 && remaining == 0\n        return Vector{Int64}(number,\
    \ need)\n    end", "    if number < need \n        error(\"Not enough carrots\
    \ left\")\n    else if number == 0\n        error(\"No more carrots left\")\n\
    \    else\n        carrots = number\n        carrots_left = remaining\n      \
    \  carrots_eaten = 0\n        carrots_left = 0\n        carrots_eaten = carrots_eaten\
    \ + carrots_left\n        carrots_left = carrots_left - carrots_eaten\n      \
    \  carrots_eaten = carrots_eaten + carrots_left\n        carrots_left = carrots_left\
    \ - carrots_eaten\n        carrots_eaten = carrots_eaten + carrots_left\n    \
    \    carrots_left = carrots_left - carrots_eaten\n        carrots_eaten = carrots_eaten\
    \ + carrots_left\n        carrots_left = carrots_left - carrots_eaten\n      \
    \  carrots_eaten = carrots_eaten + carrots_left\n        carrots_left = carrots_left\
    \ - carrots_eaten\n        carrots_eaten = carrots_eaten + carrots_left\n    \
    \    carrots_left = carrots_left - carrots_eaten\n        carrots_eaten = carrots_eaten\
    \ + carrots_left\n        carrots_left = carrots_left - carrots_eaten\n      \
    \  carrots_eaten = carrots_eaten + carrots_left\n        carrots_left = carrots_left\
    \ - carrots_eaten\n        carrots_eaten = carrots_eaten + carrots_left\n    \
    \    carrots_left = carrots_left - carrots_eaten\n        carrots_eaten = carrots_eaten\
    \ + carrots_left\n        carrots_left = carrots_left - carrots_eaten\n      \
    \  carrots_eaten = carrots_eaten + carrots_left\n        carrots_left = carrots_left\
    \ - carrots_eaten\n        carrots_eaten = carrots_eaten + carrots_left\n    \
    \    carrots_left = carrots_left - carrots_eaten\n        carrots_eaten = carrots_eaten\
    \ + carrots_left\n        carrots_left = carrots_left - carrots_eaten\n      \
    \  carrots_eaten = car", "    if number < need \n        error(\"not enough carrots\
    \ to eat\")\n    end\n    if remaining == 0\n        error(\"no more carrots to\
    \ eat\")\n    end\n    \n    carrots = number\n    \n    carrots = carrots - need\n\
    \    \n    carrots = carrots + remaining\n    \n    return Vector{Int64}(carrots)\n\
    end", "    if number < 0 || number > 1000 \n        error(\"number must be between\
    \ 0 and 1000\")\n    end\n    if need < 0 || need > 1000 \n        error(\"need\
    \ must be between 0 and 1000\")\n    end\n    if remaining < 0 || remaining >\
    \ 1000 \n        error(\"remaining must be between 0 and 1000\")\n    end\n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    if number < need\
    \ \n        error(\"number must be larger than need\")\n    end\n    if remaining\
    \ < 0\n        error(\"remaining must be larger than 0\")\n    end\n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    ", "    if number < need \n        error(\"\
    Not enough carrots to eat\")\n    end\n    if number == 0\n        error(\"No\
    \ carrots left\")\n    end\n    if remaining < 0\n        error(\"Not enough carrots\
    \ to eat\")\n    end\n    \n    carrots = zeros(Int64, 2)\n    carrots[1] = number\n\
    \    carrots[2] = remaining\n    \n    return carrots\nend\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 10, 10)\n</cell>\n<text>\nExercise 3\nWrite a function called hungry that\
    \ takes three integers and returns true if the first integer is greater than or\
    \ equal to the second integer and if the third integer is greater than or equal\
    \ to the first integer. Otherwise return false.", "    if number == 0\n      \
    \  Vector{Int64}()\n    elseif number < need\n        Vector{Int64}(remaining,\
    \ 0)\n    else\n        Vector{Int64}(0, remaining - number)\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\n# Run this cell to test your code\n@assert eat(10,\
    \ 5, 10) == [5, 5]\n@assert eat(10, 5, 5) == [0, 0]\n@assert eat(10, 5, 1) ==\
    \ [5, 0]\n@assert eat(10, 5, 0) == [0, 0]\n@assert eat(10, 5, -1) == [5, 0]\n\
    @assert eat(10, 5, -2) == [5, 0]\n@assert eat(10, 5, -3) == [5, 0]\n@assert eat(10,\
    \ 5, -4) == [5, 0]\n@assert eat(10, 5, -5) == [5, 0]\n@assert eat(10, 5, -6) ==\
    \ [5, 0]\n@assert eat(10, 5, -7) == [5, 0]\n@assert eat(10, 5, -8) == [5, 0]\n\
    @assert eat(10, 5, -9) == [5, 0]\n@assert eat(10, 5, -10) == [5, 0]\n@assert eat(10,\
    \ 5, -11) == [5, 0]\n@assert eat(10, 5, -12) == [5, 0]\n@assert eat(10, 5, -13)\
    \ == [5, 0]\n@assert eat(10, 5, -14) == [5, 0]\n@assert eat(10, 5, -15) == [5,\
    \ 0]\n@assert eat(10, 5, -16) == [5, 0]\n@assert eat(10, 5, -17) == [5, 0]\n@assert\
    \ eat(10, 5, -18) == [5, 0]\n@assert eat(10, 5, -19) == [5, 0]\n@assert eat(10,\
    \ 5, -20) == [5, 0]\n@assert eat(10, 5, -21) == [5, 0]\n@assert eat(10, 5, -22)\
    \ == [5, 0]\n@assert eat(10, 5, -23) == [5, 0]\n@assert eat(10, 5, -24) == [5,\
    \ 0]\n@assert eat(10, 5, -25) == [5, 0]\n@assert eat(10, 5, -26) == [5, 0]\n@assert\
    \ eat(10, 5, -27) == [5, 0]\n@assert eat(10, 5, -28) == [5, 0]\n@assert eat(10,\
    \ 5, -29) == [5, 0]\n@assert eat(10, 5, -30) == [5, 0]\n@assert eat(10, 5, -31)\
    \ == [5, 0]\n@assert eat(10, 5, -32) == [5, 0]\n@assert eat(10, 5, -33) == ",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    if number < need \n       \
    \ error(\"number must be greater than or equal to need\")\n    \n    if number\
    \ == 0\n        error(\"number must be greater than 0\")\n    \n    if remaining\
    \ < 0\n        error(\"remaining must be greater than 0\")\n    \n    if remaining\
    \ == 0\n        error(\"remaining must be greater than 0\")\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    ", "    if number < need \n        error(\"not enough carrots\
    \ to eat\")\n    else if number == 0\n        error(\"no carrots left\")\n   \
    \ else\n        Vector{Int64}([number, remaining - number])\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\neat(10, 10, 10)\n</cell>\n<text>\nProblem 3\nWrite\
    \ a function that returns the number of days left in a meal plan.\nThe function\
    \ should take in two parameters: the number of days in the meal plan, and the\
    \ number of days that you already have eaten.\nThe function should return an integer\
    \ that represents the number of days left in the meal plan.\nThe function should\
    \ return an error if the number of days in the meal plan is less than or equal\
    \ to 0.\nThe function should return an error if the number of days that you already\
    \ have eaten is less than or equal to 0.", "    if number < 0 || need < 0 || remaining\
    \ < 0\n        return Vector{Int64}()\n    end\n    if number == 0 && need ==\
    \ 0 && remaining == 0\n        return Vector{Int64}()\n    end\n    if number\
    \ == 0 && need == 0 && remaining > 0\n        return Vector{Int64}(remaining)\n\
    \    end\n    if number == 0 && need > 0 && remaining == 0\n        return Vector{Int64}()\n\
    \    end\n    if number == 0 && need > 0 && remaining > 0\n        return Vector{Int64}()\n\
    \    end\n    if number > 0 && need == 0 && remaining == 0\n        return Vector{Int64}()\n\
    \    end\n    if number > 0 && need == 0 && remaining > 0\n        return Vector{Int64}(remaining)\n\
    \    end\n    if number > 0 && need > 0 && remaining == 0\n        return Vector{Int64}()\n\
    \    end\n    if number > 0 && need > 0 && remaining > 0\n        return Vector{Int64}()\n\
    \    end\n    if number == 0 && need > 0 && remaining > 0\n        return Vector{Int64}(remaining)\n\
    \    end\n    if number > 0 && need == 0 && remaining == 0\n        return Vector{Int64}(remaining)\n\
    \    end\n    if number > 0 && need > 0 && remaining == 0\n        return Vector{Int64}(remaining)\n\
    \    end\n    if number > 0 && need > 0 && remaining > 0\n        return Vector{Int64}(remaining)\n\
    \    end\n    if number == 0 && need > 0 && remaining == 0\n        return Vector{Int64}(remaining)\n\
    \    end\n    if number > 0 && need == 0 && remaining == 0\n        return Vector{Int64}(remaining)\n\
    \    end\n    if number > 0 && need > 0 && remaining == 0\n        return Vector{Int64}(remaining)\n\
    \    end\n    if number > 0 && need > 0 && remaining > 0\n        return Vector{Int64}(remaining)\n\
    \    end\n    return Vector{Int64}()\nend\n</cell>\n<code language=julia-1.0>\n\
    eat(10, 5, 0)\n</cell>\n<code language=julia-1.0>\neat(10, 5, 10)\n</cell>\n<code\
    \ language=julia-1.0>\neat(10, 5, 20)\n</cell>\n<code language=julia-1.0>\neat(10,\
    \ 5, 30)\n</cell>\n<code language=julia-1.0>\neat(10, 5, 40)\n</cell>\n<code language=julia-1.0>\n\
    eat(10, 5, 50)\n</cell>\n<code language=julia-1.0>\neat(10, 5, 60)\n</cell>\n\
    <code language=julia-1.0>\neat(10, 5, 70)\n</cell>", "    if number < 0 || need\
    \ < 0 || remaining < 0\n        error(\"Invalid input\")\n    end\n    \n    carrots\
    \ = zeros(Int64, 2)\n    carrots[1] = number\n    carrots[2] = remaining\n   \
    \ \n    while carrots[2] > 0 && carrots[1] > 0\n        carrots[1] -= 1\n    \
    \    carrots[2] -= 1\n    end\n    \n    carrots[1] += need\n    \n    return\
    \ carrots\nend\n</cell>\n<code language=julia-1.5>\neat(10, 5, 10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of carrots left after\
    \ a meal is complete.\nThe function should take as input the total number of carrots\
    \ eaten so far, the number of carrots left after your meal, and the total number\
    \ of carrots left in the store.\nThe function should return an array of two integers\
    \ [left carrots after your meal, left carrots in stock].\nThe function should\
    \ return an error if the number of carrots eaten is less than or equal to zero.\n\
    The function should return an error if the number of carrots left is less than\
    \ or equal to zero.\nThe function should return an error if the number of carrots\
    \ left is greater than the number of carrots eaten.", "    if number < need \n\
    \        error(\"Not enough carrots left\")\n    elseif number == 0\n        error(\"\
    No carrots left\")\n    elseif remaining < 0\n        error(\"Not enough carrots\
    \ left\")\n    else\n        Vector{Int64}([number, remaining - number])\n   \
    \ end\nend\n</cell>\n<code language=julia-1.0>", "    if number < need \n    \
    \    error(\"Not enough carrots to eat\")\n    else if number == 0\n        error(\"\
    No carrots left\")\n    else\n        Vector{Int64}([number, remaining - number])\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\neat(10, 5, 10)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of carrots left after you\
    \ eat all carrots.", "    if number < need \n        return Vector{Int64}(undef,\
    \ number)\n    elseif number == need \n        return Vector{Int64}(undef, number)\n\
    \    elseif number > remaining \n        return Vector{Int64}(undef, remaining)\n\
    \    elseif number == remaining \n        return Vector{Int64}(undef, number)\n\
    \    elseif number > need \n        return Vector{Int64}(undef, need)\n    elseif\
    \ number == need \n        return Vector{Int64}(undef, need)\n    elseif number\
    \ > remaining \n        return Vector{Int64}(undef, remaining)\n    elseif number\
    \ == remaining \n        return Vector{Int64}(undef, need)\n    elseif number\
    \ > need \n        return Vector{Int64}(undef, need)\n    elseif number == need\
    \ \n        return Vector{Int64}(undef, need)\n    elseif number > remaining \n\
    \        return Vector{Int64}(undef, remaining)\n    elseif number == remaining\
    \ \n        return Vector{Int64}(undef, need)\n    elseif number > need \n   \
    \     return Vector{Int64}(undef, need)\n    elseif number == need \n        return\
    \ Vector{Int64}(undef, need)\n    elseif number > remaining \n        return Vector{Int64}(undef,\
    \ remaining)\n    elseif number == remaining \n        return Vector{Int64}(undef,\
    \ need)\n    elseif number > need \n        return Vector{Int64}(undef, need)\n\
    \    elseif number == need \n        return Vector{Int64}(undef, need)\n    elseif\
    \ number > remaining \n        return Vector{Int64}(undef, remaining)\n    elseif\
    \ number == remaining \n        return Vector{Int64}(undef, need)\n    elseif\
    \ number > need \n        return Vector{Int64}(undef, need)\n    elseif number\
    \ == need \n        return Vector{Int64}(undef, need)\n    elseif number > remaining\
    \ \n        return Vector{Int64}(undef, remaining)\n    elseif number == remaining\
    \ \n        return Vector{Int64}(undef, need)\n    elseif number > need \n   \
    \     return Vector{Int64}(undef, need)\n    elseif number == need \n        return\
    \ Vector{Int64}(undef, need)\n    elseif number > remaining \n        return Vector{Int64}(undef,\
    \ remaining)\n    elseif number == remaining \n        return Vector{Int64}(undef,\
    \ need)\n    elseif number > need \n        return Vector{Int64}", "    if number\
    \ < 0 || need < 0 || remaining < 0\n        return Vector{Int64}()\n    end\n\
    \    \n    if number == 0\n        return Vector{Int64}([need, remaining])\n \
    \   end\n    \n    if remaining == 0\n        return Vector{Int64}([number, 0])\n\
    \    end\n    \n    if number > remaining\n        return Vector{Int64}([number,\
    \ remaining])\n    end\n    \n    return Vector{Int64}([number, remaining - number])\n\
    end\n</cell>\n<code language=julia-1.5>\neat(10, 5, 10)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of carrots left after a meal is\
    \ complete.\nThe function should take in two parameters: the number of carrots\
    \ that you have eaten so far,\nand the number of carrots that you need to eat.\n\
    The function should return an array of two integers, the first integer is the\
    \ number of carrots left after your meal,\nand the second integer is the number\
    \ of carrots left after your meal.\nThe function should return an empty array\
    \ if there are no carrots left.", "    if number < need \n        error(\"Not\
    \ enough carrots to eat\")\n    end\n    if remaining == 0\n        error(\"Not\
    \ enough carrots to eat\")\n    end\n    \n    carrots = zeros(Int64, 2)\n   \
    \ carrots[1] = number\n    carrots[2] = remaining\n    \n    return carrots\n\
    end", "    if number < need \n        error(\"You don't have enough carrots to\
    \ eat\")\n    else if number == 0\n        error(\"You don't have any carrots\
    \ to eat\")\n    else if remaining < 0\n        error(\"You don't have enough\
    \ carrots to eat\")\n    else\n        Vector{Int64}([number, need])\n    end\n\
    end", "    if number < need \n        error(\"number must be greater than need\"\
    )\n    else if number > remaining \n        error(\"number must be less than remaining\"\
    )\n    else\n        Vector{Int64}([number, remaining - number])\n    end\nend",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if number <= 0\n\
    \        error(\"number must be positive\")\n    end\n    if need <= 0\n     \
    \   error(\"need must be positive\")\n    end\n    if remaining <= 0\n       \
    \ error(\"remaining must be positive\")\n    end\n    \n    carrots = zeros(Int64,\
    \ 2)\n    carrots[1] = number\n    carrots[2] = remaining\n    \n    carrots =\
    \ carrots[2:end]\n    \n    return carrots\nend", "    \n    if number == 0\n\
    \        return Vector{Int64}()\n    end\n    \n    if number < need\n       \
    \ return Vector{Int64}()\n    end\n    \n    if number > remaining\n        return\
    \ Vector{Int64}()\n    end\n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    ", "    if number < need \n        error(\"You don't have enough carrots\
    \ to eat all your needs\")\n    end\n    \n    if remaining < 0\n        error(\"\
    You don't have enough carrots to eat all your needs\")\n    end\n    \n    carrots\
    \ = zeros(Int64, 2)\n    carrots[1] = number\n    carrots[2] = remaining\n   \
    \ \n    return carrots\nend\n</cell>\n<code language=julia-1.0>\neat(10, 10, 10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns an array of integers\
    \ representing the number of carrots left after a meal is completed.\nThe function\
    \ should take in two arguments: the number of carrots you have eaten so far, and\
    \ the total number of carrots left in the meal. \nThe function should return an\
    \ array of integers representing the number of carrots left after a meal is completed.\n\
    The function should return an array of integers representing the number of carrots\
    \ left after a meal is completed.\nThe function should return an array of integers\
    \ representing the number of carrots left after a meal is completed.\nThe function\
    \ should return an array of integers representing the number of carrots left after\
    \ a meal is completed.\nThe function should return an array of integers representing\
    \ the number of carrots left after a meal is completed.\nThe function should return\
    \ an array of integers representing the number of carrots left after a meal is\
    \ completed.\nThe function should return an array of integers representing the\
    \ number of carrots left after a meal is completed.\nThe function should return\
    \ an array of integers representing the number of carrots left after a meal is\
    \ completed.\nThe function should return an array of integers representing the\
    \ number of carrots left after a meal is completed.\nThe function should return\
    \ an array of integers representing the number of carrots left after a meal is\
    \ completed.\nThe function should return an array of integers representing the\
    \ number of carrots left after a meal is completed.\nThe function should return\
    \ an array of integers representing the number of carrots left after a meal is\
    \ completed.\nThe function should return an array of integers representing the\
    \ number of carrots left after a meal is completed.\nThe function should return\
    \ an array of integers representing the number of carrots left after a meal is\
    \ completed.\nThe function should return an array of integers representing the\
    \ number of carrots left after a meal is completed.\nThe function should return\
    \ an array of integers representing the number of carrots left after a meal is\
    \ completed.\nThe function should return an array of integers representing the\
    \ number of carrots left after a meal is completed.\nThe ", "    \n    \n    if\
    \ number == 0\n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  ", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if number\
    \ < need \n        error(\"You don't have enough carrots to eat\")\n    else if\
    \ number == 0\n        error(\"You don't have enough carrots to eat\")\n    else\
    \ if number > remaining\n        error(\"You don't have enough carrots to eat\"\
    )\n    else\n        Vector{Int64}([number, remaining - number])\n    end\nend\n\
    </cell>\n<code language=julia-1.0>\neat(10, 5, 10)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of carrots left after a meal is\
    \ completed.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   if number < 0 || need < 0 || remaining < 0\n        return Vector{Int64}()\n\
    \    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    ", "    if number < need \n        error(\"The number of carrots you have\
    \ eaten is less than the number of carrots needed to eat.\") \n    else if number\
    \ > remaining \n        error(\"The number of carrots you have eaten is greater\
    \ than the number of carrots remaining in stock.\") \n    else \n        Vector{Int64}([number,\
    \ remaining - number]) \n    end\nend\n</cell>\n<code language=julia-1.0>\neat(5,\
    \ 10, 100)\n</cell>\n<text>\nExercise 2\nWrite a function that takes in an array\
    \ of integers and returns the number of even numbers in the array.", "    if number\
    \ == 0\n        Vector{Int64}()\n    elseif need == 0\n        Vector{Int64}(remaining)\n\
    \    elseif remaining == 0\n        Vector{Int64}(0, number)\n    else\n     \
    \   Vector{Int64}(remaining, number - remaining)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\neat(10, 10, 10)\n</cell>\n<code language=julia-1.5>\neat(10,\
    \ 10, 0)\n</cell>\n<code language=julia-1.5>\neat(10, 10, 1)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 10, 2)\n</cell>\n<code language=julia-1.5>\neat(10, 10, 3)\n</cell>\n\
    <code language=julia-1.5>\neat(10, 10, 4)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 10, 5)\n</cell>\n<code language=julia-1.5>\neat(10, 10, 6)\n</cell>\n\
    <code language=julia-1.5>\neat(10, 10, 7)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 10, 8)\n</cell>\n<code language=julia-1.5>\neat(10, 10, 9)\n</cell>\n\
    <code language=julia-1.5>\neat(10, 10, 10)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 10, 11)\n</cell>\n<code language=julia-1.5>\neat(10, 10, 12)\n</cell>\n\
    <code language=julia-1.5>\neat(10, 10, 13)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 10, 14)\n</cell>\n<code language=julia-1.5>\neat(10, 10, 15)\n</cell>\n\
    <code language=julia-1.5>\neat(10, 10, 16)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 10, 17)\n</cell>\n<code language=julia-1.5>\neat(10, 10, 18)\n</cell>\n\
    <code language=julia-1.5>\neat(10, 10, 19)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 10, 20)\n</cell>\n<code language=julia-1.5>\neat(10, 10, 21)\n</cell>\n\
    <code language=julia-1.5>\neat(10, 10, 22)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 10, 23)\n</cell>\n<code language=julia-1.5>\neat(10, 10, 24)\n</cell>\n\
    <code language=julia-1.5>\neat(10, 10, 25)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 10, ", "    if number < need \n        error(\"Not enough carrots to eat\"\
    )\n    elseif number > remaining\n        error(\"Not enough carrots to eat\"\
    )\n    else\n        Vector{Int64}([number, remaining - number])\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\neat(10, 10, 10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function called eat_all that takes in an array of integers and returns\
    \ an array of integers containing the number of carrots eaten and the number of\
    \ carrots left.", "    if number < 0 || number > 1000 || need < 0 || need > 1000\
    \ || remaining < 0 || remaining > 1000 \n        error(\"Invalid input\")\n  \
    \  else \n        \n        carrots = zeros(Int64, 2)\n        carrots[1] = number\n\
    \        carrots[2] = remaining\n        \n        meals = zeros(Int64, 2)\n \
    \       meals[1] = need\n        meals[2] = 0\n        \n        carrots_left\
    \ = zeros(Int64, 2)\n        carrots_left[1] = remaining\n        carrots_left[2]\
    \ = 0\n        \n        meals_left = zeros(Int64, 2)\n        meals_left[1] =\
    \ need\n        meals_left[2] = 0\n        \n        carrots_left_after_meals\
    \ = zeros(Int64, 2)\n        carrots_left_after_meals[1] = remaining\n       \
    \ carrots_left_after_meals[2] = 0\n        \n        meals_left_after_meals =\
    \ zeros(Int64, 2)\n        meals_left_after_meals[1] = need\n        meals_left_after_meals[2]\
    \ = 0\n        \n        carrots_left_after_meals_after_meals = zeros(Int64, 2)\n\
    \        carrots_left_after_meals_after_meals[1] = remaining\n        carrots_left_after_meals_after_meals[2]\
    \ = 0\n        \n        meals_left_after_meals_after_meals = zeros(Int64, 2)\n\
    \        meals_left_after_meals_after_meals[1] = need\n        meals_left_after_meals_after_meals[2]\
    \ = 0\n        \n        carrots_left_after_meals_after_meals_after_meals = zeros(Int64,\
    \ 2)\n        carrots_left_after_meals_after_meals_after_meals[1] = remaining\n\
    \        carrots_left_after_meals_after_meals_after_meals[2] = 0\n        \n \
    \       meals_left_after_meals_after_meals_after_meals = zeros(Int64, 2)\n   \
    \     meals_left_after_meals_after_meals_after_meals[1] = need\n        meals_left_after_meals_after_meals_after_meals[2]\
    \ = 0\n        \n        carrots_left_after_meals_after_meals_after_meals_after_meals\
    \ = zeros(Int64, 2)\n        carrots_left_after_meals_after_meals_after_meals_after_meals[1]\
    \ = remaining\n        carrots_left_after_meals_after_me", "    if number == 0\n\
    \        Vector{Int64}()\n    else\n        Vector{Int64}(remaining, number -\
    \ remaining)\n    end\nend\n</cell>\n<code language=julia-1.5>\neat(10, 10, 10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that will return the number of carrots\
    \ left after a meal is complete.\nThe function should take in two arguments: the\
    \ number of carrots you have eaten and the number of carrots left after your meals.\n\
    The function should return an array of two elements: the number of carrots left\
    \ after your meals and the number of carrots left after your meals.\nThe function\
    \ should return an empty array if there are no carrots left.", "    if number\
    \ < need \n        error(\"Not enough carrots to eat\")\n    else if number ==\
    \ 0\n        error(\"No more carrots to eat\")\n    else\n        carrots = number\n\
    \        carrots_left = remaining\n        carrots_left_to_eat = 0\n        carrots_left_to_eat\
    \ = carrots_left - carrots_left_to_eat\n        carrots_left_to_eat = carrots_left_to_eat\
    \ * carrots_left_to_eat\n        carrots_left_to_eat = carrots_left_to_eat / 2\n\
    \        carrots_left_to_eat\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    eat(5, 10, 100)\n</cell>\n<text>\nExercise 2\nWrite a function that will return\
    \ the number of carrots left after a meal is completed.\nThe function should take\
    \ two arguments: the number of carrots you have eaten so far, and the total number\
    \ of carrots left.\nThe function should return an array of two elements: the number\
    \ of carrots left after your meal, and the total number of carrots left after\
    \ your meal.\nThe function should return an error if the number of carrots left\
    \ after your meal is less than or equal to zero.\nThe function should return an\
    \ error if the number of carrots left after your meal is greater than the total\
    \ number of carrots left.\nThe function should return an error if the number of\
    \ carrots left after your meal is equal to zero.\nThe function should return an\
    \ error if the number of carrots left after your meal is less than or equal to\
    \ the number of carrots you have eaten so far.\nThe function should return an\
    \ error if the number of carrots left after your meal is greater than the number\
    \ of carrots you have eaten so far.\nThe function should return an error if the\
    \ number of carrots left after your meal is equal to or greater than the number\
    \ of carrots you have eaten so far.\nThe function should return an error if the\
    \ number of carrots left after your meal is less than or equal to the number of\
    \ carrots you have eaten so far.\nThe function should return an error if the number\
    \ of carrots left after your meal is greater than the number of carrots you have\
    \ eaten so far.\nThe function should return an error if the number of carrots\
    \ left after your meal is equal to or greater than the number of carrots you have\
    \ eaten so far.\nThe function should return an error if the number of carrots\
    \ left after your meal is less than or equal to the number of carrots you have\
    \ eaten so far.\nThe function should return an error if the number of carrots\
    \ left after your meal is greater than the number of carrots you have eaten so\
    \ far.\n", "    if number <= 0\n        error(\"number must be positive\")\n \
    \   end\n    if need <= 0\n        error(\"need must be positive\")\n    end\n\
    \    if remaining <= 0\n        error(\"remaining must be positive\")\n    end\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    if number < need \n        error(\"You don't have enough carrots\
    \ to eat all your needs\")\n    else if number == 0\n        error(\"You don't\
    \ have any carrots to eat\")\n    else if number > remaining\n        error(\"\
    You don't have enough carrots to eat all your needs\")\n    else\n        Vector{Int64}([number,\
    \ remaining - number])\n    end\nend\n</cell>\n<code language=julia-1.5>\neat(10,\
    \ 5, 100)\n</cell>\n<text>\nProblem 7: Write a function called eat_all that takes\
    \ in an array of integers and returns the number of carrots you need to eat to\
    \ complete the meals.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    if number == 0\n        Vector{Int64}()\n    else\n        if remaining < need\n\
    \            Vector{Int64}(remaining, 0)\n        else\n            Vector{Int64}(0,\
    \ need - remaining)\n        end\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 10, 10)\n</cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    if number <= 0\n        error(\"number\
    \ must be positive\")\n    end\n    if need <= 0\n        error(\"need must be\
    \ positive\")\n    end\n    if remaining <= 0\n        error(\"remaining must\
    \ be positive\")\n    end\n    \n    carrots = zeros(Int64, 2)\n    carrots[1]\
    \ = number\n    carrots[2] = remaining\n    \n    \n    while carrots[1] > 0\n\
    \        carrots[1] = carrots[1] - need\n        carrots[2] = carrots[2] - 1\n\
    \    end\n    \n    return carrots\nend\n</cell>\n<code language=julia-1.1>\n\
    eat(10, 10, 10)\n</cell>\n<code language=julia-1.1>\neat(10, 10, 0)\n</cell>\n\
    <code language=julia-1.1>\neat(10, 10, -1)\n</cell>\n<code language=julia-1.1>\n\
    eat(10, 10, 100)\n</cell>\n<code language=julia-1.1>\neat(10, 10, 101)\n</cell>\n\
    <code language=julia-1.1>\neat(10, 10, 102)\n</cell>\n<code language=julia-1.1>\n\
    eat(10, 10, 103)\n</cell>\n<code language=julia-1.1>\neat(10, 10, 104)\n</cell>\n\
    <code language=julia-1.1>\neat(10, 10, 105)\n</cell>\n<code language=julia-1.1>\n\
    eat(10, 10, 106)\n</cell>\n<code language=julia-1.1>\neat(10, 10, 107)\n</cell>\n\
    <code language=julia-1.1>\neat(10, 10, 108)\n</cell>\n<code language=julia-1.1>\n\
    eat(10, 10, 109)\n</cell>\n<code language=julia-1.1>\neat(10, 10, 110)\n</cell>\n\
    <code language=julia-1.1>\neat(10, 10, 111)\n</cell>\n<code language=julia-1.1>\n\
    eat(10, 10, 112)\n</cell>\n<code language=julia-1.1>\neat(10, 10, 113)\n</cell>\n\
    <code language=julia-1.1>\neat(10, 10, 114)\n</cell>\n<code language=julia-1.1>\n\
    eat(10, 10, 115)\n</cell>\n<code language=julia-1.1>\neat(10, 10, 116)\n</cell>\n\
    <code language=julia-1.1>\neat(10, 10, 117)\n</cell>\n<code language=julia-1.1>\n\
    eat(10, 10, 118)\n</cell>\n<code language=julia-1.1>\neat(10, 10, 119)\n</cell>\n\
    <code language=julia-1.1>\neat(10, 10, ", "    \n    if number == 0\n        Vector{Int64}()\n\
    \    elseif number < need\n        Vector{Int64}(remaining, 0)\n    elseif number\
    \ > remaining\n        Vector{Int64}(0, need - number)\n    else\n        Vector{Int64}(0,\
    \ number)\n    end\nend\n</cell>\n<code language=julia-1.5>\neat(10, 5, 10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in an array of integers\
    \ and returns the number of integers that are divisible by 3.", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    if number <= need \n      \
    \  Vector{Int64}([number, 0])\n    else\n        Vector{Int64}([0, remaining])\n\
    \    end\nend\n</cell>\n<code language=julia-0.6>\neat(5, 10, 100)\n</cell>\n\
    <text>\nExercise 3\nWrite a function called eat_all that takes in an array of\
    \ integers and returns the number of carrots you would need to eat to complete\
    \ the meals.", "    \n    if number < 0 || need < 0 || remaining < 0\n       \
    \ return Vector{Int64}()\n    end\n    \n    if number == 0 && need == 0 && remaining\
    \ == 0\n        return Vector{Int64}([number, remaining])\n    end\n    \n   \
    \ if number == 0 && need == 0 && remaining > 0\n        return Vector{Int64}([number,\
    \ remaining])\n    end\n    \n    if number == 0 && need > 0 && remaining == 0\n\
    \        return Vector{Int64}([number, need])\n    end\n    \n    if number ==\
    \ 0 && need > 0 && remaining > 0\n        return Vector{Int64}([number, need])\n\
    \    end\n    \n    if number > 0 && need == 0 && remaining == 0\n        return\
    \ Vector{Int64}([number, remaining])\n    end\n    \n    if number > 0 && need\
    \ == 0 && remaining > 0\n        return Vector{Int64}([number, remaining])\n \
    \   end\n    \n    if number > 0 && need > 0 && remaining == 0\n        return\
    \ Vector{Int64}([number, need])\n    end\n    \n    if number > 0 && need > 0\
    \ && remaining > 0\n        return Vector{Int64}([number, need])\n    end\n  \
    \  \n    return Vector{Int64}()\nend\n</cell>\n<code language=julia-1.5>", " \
    \   if number == 0\n        Vector{Int64}()\n    elseif remaining < need\n   \
    \     Vector{Int64}(remaining, 0)\n    else\n        Vector{Int64}(0, need - remaining)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\neat(10, 10, 10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function called eaten_carrots(number::Int64, need::Int64,\
    \ remaining::Int64) which takes in three integers and returns the number of carrots\
    \ you have eaten after your meals.", "    \n    carrots = number\n    carrots_left\
    \ = remaining\n    \n    carrots_eaten = 0\n    carrots_left = 0\n    \n    while\
    \ carrots_left > 0 && carrots_eaten < need\n        carrots_eaten += carrots_eaten\n\
    \        carrots_left -= carrots_left\n    end\n    \n    if carrots_left == 0\n\
    \        carrots_eaten = carrots_eaten + carrots_eaten\n        carrots_left =\
    \ 0\n    end\n    \n    return Vector{Int64}(carrots_eaten, carrots_left)\nend\n\
    </cell>\n<code language=julia-1.5>\neat(10, 5, 100)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of carrots left after your meals.\n\
    If there are not enough carrots left, you will eat all remaining carrots, but\
    \ will still be hungry.\nThe function should take in two parameters: the number\
    \ of carrots you have eaten so far, and the number you need to eat.\nThe function\
    \ should return an array of two elements: the number of carrots left after your\
    \ meals, and the number of carrots left after your meals.\nThe function should\
    \ return an empty array if there are not enough carrots left.", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    if number < need \n       \
    \ error(\"Not enough carrots to eat\")\n    elseif number == 0\n        error(\"\
    No more carrots to eat\")\n    elseif remaining < 0\n        error(\"Not enough\
    \ carrots to eat\")\n    elseif remaining == 0\n        error(\"No more carrots\
    \ to eat\")\n    else\n        Vector{Int64}([number, remaining - number])\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\neat(10, 5, 0)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns the number\
    \ of integers that are divisible by 3.", "    \n    \n    if number == 0\n   \
    \     \n        Vector{Int64}([need, remaining])\n        \n    elseif remaining\
    \ == 0\n        \n        Vector{Int64}([number, 0])\n        \n    elseif remaining\
    \ < need\n        \n        Vector{Int64}([number, remaining])\n        \n   \
    \ else\n        \n        Vector{Int64}([number, need])\n        \n    end\nend\n\
    </cell>\n<code language=julia-1.5>\neat(10, 10, 10)\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that takes in an array of integers and returns the number\
    \ of positive integers less than or equal to each element in the array.", "  \
    \  if number < need \n        error(\"The number of carrots you have eaten is\
    \ less than the number of carrots needed to eat.\")\n    end\n    if remaining\
    \ < 0\n        error(\"The number of carrots you have eaten is less than the number\
    \ of carrots needed to eat.\")\n    end\n    \n    carrots = zeros(Int64, 2)\n\
    \    carrots[1] = number\n    carrots[2] = remaining\n    \n    carrots = carrots[2:end]\n\
    \    \n    return carrots\nend\n</cell>\n<code language=julia-1.5>\neat(10, 10,\
    \ 10)\n</cell>\n<code language=julia-1.5>", "    if number < 0 || number > 1000\
    \ || need < 0 || need > 1000 || remaining < 0 || remaining > 1000 \n        error(\"\
    Invalid input\") \n    else \n        Vector{Int64}([number, need, remaining])\
    \ \n    end\nend\n</cell>\n<code language=julia-1.4>\neat(100, 10, 0)\n</cell>\n\
    <code language=julia-1.4>\neat(100, 10, 10)\n</cell>\n<code language=julia-1.4>\n\
    eat(100, 10, 20)\n</cell>\n<code language=julia-1.4>\neat(100, 10, 30)\n</cell>\n\
    <code language=julia-1.4>\neat(100, 10, 40)\n</cell>\n<code language=julia-1.4>\n\
    eat(100, 10, 50)\n</cell>\n<code language=julia-1.4>\neat(100, 10, 60)\n</cell>\n\
    <code language=julia-1.4>\neat(100, 10, 70)\n</cell>\n<code language=julia-1.4>\n\
    eat(100, 10, 80)\n</cell>\n<code language=julia-1.4>\neat(100, 10, 90)\n</cell>\n\
    <code language=julia-1.4>\neat(100, 10, 100)\n</cell>\n<code language=julia-1.4>\n\
    eat(100, 10, 110)\n</cell>\n<code language=julia-1.4>\neat(100, 10, 120)\n</cell>\n\
    <code language=julia-1.4>\neat(100, 10, 130)\n</cell>\n<code language=julia-1.4>\n\
    eat(100, 10, 140)\n</cell>\n<code language=julia-1.4>\neat(100, 10, 150)\n</cell>\n\
    <code language=julia-1.4>\neat(100, 10, 160)\n</cell>\n<code language=julia-1.4>\n\
    eat(100, 10, 170)\n</cell>\n<code language=julia-1.4>\neat(100, 10, 180)\n</cell>\n\
    <code language=julia-1.4>\neat(100, 10, 190)\n</cell>\n<code language=julia-1.4>\n\
    eat(100, 10, 200)\n</cell>\n<code language=julia-1.4>\neat(100, 10, 210)\n</cell>\n\
    <code language=julia-1.4>\neat(100, 10, 220)\n</cell>\n<code language=julia-1.4>\n\
    eat(100, 10, 230)\n</cell>\n<code language=julia-1.4>\neat(100, 10, 240)\n</cell>\n\
    <code language=julia-1.4>\neat(100, 10, 250)\n</cell>\n<code language=julia-1.4>\n\
    eat(100, 10, 260)\n</cell>\n<code language=julia-1.4>\neat(100, 10, 27", "   \
    \ if number < 0 || number > 1000 || need < 0 || need > 1000 || remaining < 0 ||\
    \ remaining > 1000\n        error(\"Invalid input\")\n    end\n    \n    carrots\
    \ = zeros(Int64, 2)\n    carrots[1] = number\n    carrots[2] = remaining\n   \
    \ \n    meals = zeros(Int64, 2)\n    meals[1] = need\n    meals[2] = remaining\n\
    \    \n    carrots_left = zeros(Int64, 2)\n    carrots_left[1] = remaining\n \
    \   carrots_left[2] = remaining\n    \n    carrots_eaten = zeros(Int64, 2)\n \
    \   carrots_eaten[1] = number\n    carrots_eaten[2] = remaining\n    \n    carrots_left\
    \ = zeros(Int64, 2)\n    carrots_left[1] = remaining\n    carrots_left[2] = remaining\n\
    \    \n    carrots_eaten = zeros(Int64, 2)\n    carrots_eaten[1] = number\n  \
    \  carrots_eaten[2] = remaining\n    \n    carrots_left = zeros(Int64, 2)\n  \
    \  carrots_left[1] = remaining\n    carrots_left[2] = remaining\n    \n    carrots_eaten\
    \ = zeros(Int64, 2)\n    carrots_eaten[1] = number\n    carrots_eaten[2] = remaining\n\
    \    \n    carrots_left = zeros(Int64, 2)\n    carrots_left[1] = remaining\n \
    \   carrots_left[2] = remaining\n    \n    carrots_eaten = zeros(Int64, 2)\n \
    \   carrots_eaten[1] = number\n    carrots_eaten[2] = remaining\n    \n    carrots_left\
    \ = zeros(Int64, 2)\n    carrots_left[1] = remaining\n    carrots_left[2] = remaining\n\
    \    \n    carrots_eaten = zeros(Int64, 2)\n    carrots_eaten[1] = number\n  \
    \  carrots_eaten[2] = remaining\n    \n    carrots_left = zeros(Int64, 2)\n  \
    \  carrots_left[1] = remaining\n    carrots_left[2] = remaining\n    \n    carrots_eaten\
    \ = zeros(Int64, 2)\n    carrots_eaten[1] = number\n    carrots_eaten[2] = remaining\n\
    \    \n    carrots_left = zeros(Int64, 2)\n    carrots_left[1] = remaining\n \
    \   carrots_left[2] = remaining\n    \n    carrots_eaten = zeros(Int64, 2)\n \
    \   carrots_eaten[1] = number\n    carrots_eaten[2] = remaining\n    \n    carrots_left\
    \ = zeros(Int64, 2)\n", "    if number <= 0\n        error(\"number must be positive\"\
    )\n    end\n    if need <= 0\n        error(\"need must be positive\")\n    end\n\
    \    if remaining <= 0\n        error(\"remaining must be positive\")\n    end\n\
    \    \n    carrots = number\n    \n    if number == 0\n        return [carrots,\
    \ 0]\n    end\n    \n    if number < need\n        carrots = number\n    else\n\
    \        carrots = remaining\n    end\n    \n    return [carrots, carrots - need]\n\
    end", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if number\
    \ < need \n        error(\"not enough carrots left\")\n    else if number == 0\n\
    \        error(\"no carrots left\")\n    else\n        Vector{Int64}([number,\
    \ remaining - number])\n    end\nend\n</cell>\n<code language=julia-1.5>\neat(10,\
    \ 5, 100)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of\
    \ integers and returns the sum of the squares of the integers in the vector.",
  "    if number <= 0\n        error(\"number must be positive\")\n    end\n    if\
    \ need <= 0\n        error(\"need must be positive\")\n    end\n    if remaining\
    \ <= 0\n        error(\"remaining must be positive\")\n    end\n    \n    carrots\
    \ = zeros(Int64, 2)\n    carrots[1] = number\n    carrots[2] = remaining\n   \
    \ \n    carrots = carrots[2:end]\n    \n    return carrots\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if number < 0 || need < 0 || remaining < 0\n    \
    \    error(\"invalid input\")\n    end\n    \n    if number == 0 && remaining\
    \ == 0\n        return Vector{Int64}()\n    end\n    \n    if number == 0 && remaining\
    \ > 0\n        return Vector{Int64}(remaining, 0)\n    end\n    \n    if need\
    \ == 0\n        return Vector{Int64}(number, 0)\n    end\n    \n    if number\
    \ > remaining\n        return Vector{Int64}(number, 0)\n    end\n    \n    if\
    \ number == remaining\n        return Vector{Int64}(number, 0)\n    end\n    \n\
    \    if number == 0\n        return Vector{Int64}(remaining, 0)\n    end\n   \
    \ \n    if number == remaining\n        return Vector{Int64}(number, 0)\n    end\n\
    \    \n    if number == need\n        return Vector{Int64}(number, 0)\n    end\n\
    \    \n    return Vector{Int64}(number, 0)\nend\n</cell>\n<code language=julia-1.5>\n\
    eat(100, 10, 0)\n</cell>\n<code language=julia-1.5>\neat(100, 10, 100)\n</cell>\n\
    <code language=julia-1.5>\neat(100, 10, 100)\n</cell>\n<code language=julia-1.5>\n\
    eat(100, 10, 100)\n</cell>\n<code language=julia-1.5>\neat(100, 10, 100)\n</cell>\n\
    <code language=julia-1.5>\neat(100, 10, 100)\n</cell>\n<code language=julia-1.5>\n\
    eat(100, 10, 100)\n</cell>\n<code language=julia-1.5>\neat(100, 10, 100)\n</cell>\n\
    <code language=julia-1.5>\neat(100, 10, 100)\n</cell>\n<code language=julia-1.5>\n\
    eat(100, 10, 100)\n</cell>\n<code language=julia-1.5>\neat(100, 10, 100)\n</cell>\n\
    <code language=julia-1.5>\neat(100, 10, 100)\n</cell>\n<code language=julia-1.5>\n\
    eat(100, 10, 100)\n</cell>\n<code language=julia-1.5>\neat(100, 10, 100)\n</cell>\n\
    <code language=julia-1.5>\neat(100, 10, 100)\n</cell>\n<code language=julia-1.5>\n\
    eat(100, 10, 100)\n</cell>\n<code language=julia-1.5>\neat(100, 10, 100)\n</cell>\n\
    <code language=julia-1.5>\neat(100, 10, 100)\n</cell>\n<code language=julia-1.5>\n\
    eat(100, 10, 100)\n</cell>\n<code language=julia-1.5>\neat(100, 10, 100)\n</cell>\n\
    <code language=julia-1.5", "    if number < 0 || need < 0 || remaining < 0\n \
    \       return Vector{Int64}()\n    end\n    if number == 0 && need == 0 && remaining\
    \ == 0\n        return Vector{Int64}()\n    end\n    if number == 0 && need ==\
    \ 0 && remaining > 0\n        return Vector{Int64}([remaining])\n    end\n   \
    \ if number == 0 && need > 0 && remaining == 0\n        return Vector{Int64}([need])\n\
    \    end\n    if number == 0 && need > 0 && remaining > 0\n        return Vector{Int64}([need,\
    \ remaining])\n    end\n    if number == 0 && need > 0 && remaining == 0\n   \
    \     return Vector{Int64}([need])\n    end\n    if number == 0 && need == 0 &&\
    \ remaining > 0\n        return Vector{Int64}([remaining])\n    end\n    if number\
    \ == 0 && need > 0 && remaining > 0\n        return Vector{Int64}([need, remaining])\n\
    \    end\n    if number == 0 && need > 0 && remaining == 0\n        return Vector{Int64}([need])\n\
    \    end\n    if number == 0 && need == 0 && remaining > 0\n        return Vector{Int64}([remaining])\n\
    \    end\n    if number == 0 && need > 0 && remaining > 0\n        return Vector{Int64}([need,\
    \ remaining])\n    end\n    if number == 0 && need > 0 && remaining == 0\n   \
    \     return Vector{Int64}([need])\n    end\n    if number == 0 && need == 0 &&\
    \ remaining > 0\n        return Vector{Int64}([remaining])\n    end\n    if number\
    \ == 0 && need > 0 && remaining > 0\n        return Vector{Int64}([need, remaining])\n\
    \    end\n    if number == 0 && need > 0 && remaining == 0\n        return Vector{Int64}([need])\n\
    \    end\n    if number == 0 && need == 0 && remaining > 0\n        return Vector{Int64}([remaining])\n\
    \    end\n    if number == 0 && need > 0 && remaining > 0\n        return Vector{Int64}([need,\
    \ remaining])\n    end\n    if number == 0 && need > 0 && remaining == 0\n   \
    \     return Vector{Int64}([need])\n    end\n    if number == 0 && need == 0 &&\
    \ remaining > 0\n        return Vector{Int64}([remaining])\n    end\n    if number\
    \ == 0 && need > 0 && remaining > 0\n        return Vector{Int64}([need, remaining])\n\
    \    end\n    if number == 0 && need > 0 && remaining == 0\n        return Vector{Int64}([need])\n\
    \    end\n    if number == 0 && need == 0 && remaining > 0\n        return Vector{Int64}([remaining])\n\
    \    end\n    if number == 0 && need ", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if number < 0 || need < 0 || remaining < 0\n      \
    \  error(\"invalid input\")\n    end\n    \n    if number == 0 && need == 0 &&\
    \ remaining == 0\n        return Vector{Int64}()\n    end\n    \n    if number\
    \ == 0 && need == 0 && remaining > 0\n        return Vector{Int64}(remaining)\n\
    \    end\n    \n    if number == 0 && need > 0 && remaining == 0\n        return\
    \ Vector{Int64}(0, need)\n    end\n    \n    if number == 0 && need > 0 && remaining\
    \ > 0\n        return Vector{Int64}(0, need, remaining)\n    end\n    \n    if\
    \ number > 0 && need == 0 && remaining == 0\n        return Vector{Int64}(number,\
    \ 0)\n    end\n    \n    if number > 0 && need == 0 && remaining > 0\n       \
    \ return Vector{Int64}(number, 0, remaining)\n    end\n    \n    if number > 0\
    \ && need > 0 && remaining == 0\n        return Vector{Int64}(number, need, 0)\n\
    \    end\n    \n    if number > 0 && need > 0 && remaining > 0\n        return\
    \ Vector{Int64}(number, need, remaining)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 10, 10)\n</cell>\n<text>\nProblem 4\nWrite a function named eat_carrots(number::Int64,\
    \ need::Int64, remaining::Int64)::Vector{Int64} that takes in three integers and\
    \ returns an array of integers that represents the number of carrots eaten after\
    \ your meals.", "    \n    \n    if number == 0\n        Vector{Int64}()\n   \
    \ elseif number < need\n        Vector{Int64}([number])\n    elseif number < remaining\n\
    \        Vector{Int64}([number, need])\n    elseif number == remaining\n     \
    \   Vector{Int64}([number, need, remaining])\n    else\n        Vector{Int64}([number,\
    \ need, remaining])\n    end\nend\n</cell>\n<code language=julia-1.5>\neat(10,\
    \ 5, 10)\n</cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
