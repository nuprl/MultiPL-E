language: jl
name: HumanEval_90_next_smallest
results:
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    smallest = lst[1]\n    for i in 2:length(lst)\n        if lst[i]\
    \ < smallest\n            smallest = lst[i]\n        end\n    end\n    return\
    \ smallest\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis does not answer the\
    \ question. He wants to find the 2nd smallest element of a vector, not the 2nd\
    \ smallest element of a list.\n<|/ c |>\n<| c |>\nI agree with you. I just wanted\
    \ to show that you can find the 2nd smallest element of a vector by using the\
    \ function `next_smallest()`.\n<|/ c |>\n<| c |>\nI agree, but your answer does\
    \ not answer the question. He wants to find the 2nd smallest element of a vector,\
    \ not the 2nd smallest element of a list.\n<|/ c |>\n<| c |>\nI agree with you.\
    \ I just wanted to show that you can find the 2nd smallest element of a vector\
    \ by using the function `next_smallest()`.\n<|/ c |>\n<| a tags=julia,sorting\
    \ |>\nThe answer by is correct, but I thought I'd add some explanation as to why\
    \ it works.\nThe function next_smallest() takes in a list of integers and returns\
    \ the 2nd smallest element of the list. \nThe function next_smallest() works by\
    \ iterating through the list and comparing each element to the 2nd smallest element\
    \ in the list. \n<code>\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmr9vwgnp.jl:15\nin expression starting at\
    \ /tmp/tmpmr9vwgnp.jl:15\n"
  stdout: ''
  timestamp: 1659748415
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"The list is empty\") \n\
    \    else \n        smallest = lst[1] \n        for i in 2:length(lst) \n    \
    \        if lst[i] < smallest \n                smallest = lst[i] \n         \
    \   end \n        end \n        return smallest \n    end \nend \n</code>\n<|/\
    \ a tags=julia |>\n<| a dscore=1 |>\nThe solution using sort! is very elegant\
    \ and efficient, but I wanted to show another way using filter!:\n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1l1rxezb.jl:19\nin expression starting at\
    \ /tmp/tmp1l1rxezb.jl:19\n"
  stdout: ''
  timestamp: 1659748415
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return nothing\n    end\n    smallest\
    \ = lst[1]\n    smallest_index = 2\n    for index in 2:length(lst)\n        if\
    \ lst[index] < smallest \n            smallest = lst[index]\n            smallest_index\
    \ = index\n        end\n    end\n    return smallest\nend\n</cell>\n<code language=julia-1.3>\n\
    next_smallest([1,4,6,8,10])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the 3rd smallest element of the list.\nReturn nothing if there is no\
    \ such element.\nHint: Use a for loop.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpblt4jye3.jl:20\nin expression starting at\
    \ /tmp/tmpblt4jye3.jl:20\n"
  stdout: ''
  timestamp: 1659748415
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"The list is empty\") \n\
    \    else \n        smallest = lst[1] \n        for i in 2:length(lst) \n    \
    \        if lst[i] < smallest \n                smallest = lst[i] \n         \
    \   end\n        end\n        return smallest\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph8sqhmw9.jl:19\nin expression starting at\
    \ /tmp/tmph8sqhmw9.jl:19\n"
  stdout: ''
  timestamp: 1659748415
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        smallest = lst[1]\n       \
    \ for i in 2:length(lst) \n            if lst[i] < smallest \n               \
    \ smallest = lst[i]\n            end\n        end\n        return smallest\n \
    \   end\nend\n</cell>\n<code language=julia-1.0>\nnext_smallest([1,2,3])\n</cell>\n\
    <code language=julia-1.0>\nnext_smallest([1,4,3,5])\n</cell>\n<code language=julia-1.0>\n\
    next_smallest([1,4,3,5,2])\n</cell>\n<code language=julia-1.0>\nnext_smallest([1,4,3,5,2,0])\n\
    </cell>\n<code language=julia-1.0>\nnext_smallest([1,4,3,5,2,0,0])\n</cell>\n\
    <code language=julia-1.0>\nnext_smallest([1,4,3,5,2,0,0,0])\n</cell>\n<code language=julia-1.0>\n\
    next_smallest([1,4,3,5,2,0,0,0,0])\n</cell>\n<code language=julia-1.0>\nnext_smallest([1,4,3,5,2,0,0,0,0,0])\n\
    </cell>\n<code language=julia-1.0>\nnext_smallest([1,4,3,5,2,0,0,0,0,0,0])\n</cell>\n\
    <code language=julia-1.0>\nnext_smallest([1,4,3,5,2,0,0,0,0,0,0,0])\n</cell>\n\
    <code language=julia-1.0>\nnext_smallest([1,4,3,5,2,0,0,0,0,0,0,0,0])\n</cell>\n\
    <code language=julia-1.0>\nnext_smallest([1,4,3,5,2,0,0,0,0,0,0,1,0])\n</cell>\n\
    <code language=julia-1.0>\nnext_smallest([1,4,3,5,2,0,0,0,0,0,0,1,0,0])\n</cell>\n\
    <code language=julia-1.0>\nnext_smallest([1,4,3,5,2,0,0,0,0,0,0,1,0,0,0])\n</cell>\n\
    <code language=julia-1.0>\nnext_smallest([1,4,3,5,2,0,0,0,0,0,0,1,0,0,0,0])\n\
    </cell>\n<code language=julia-1.0>\nnext_smallest([1,4,3,5,2,0,0,0,0,0,0,1,0,0,1,0])\n\
    </cell>\n<code language=julia-1.0>\nnext_smallest([1,4,3,5,2,0,0,0,0,0,0,1,0,0,1,0,0])\n\
    </cell>\n<code language=julia-1.0>\nnext_smallest([1,4,3,5,2,0,0,0,0,0,0,1,0,0,1,0,0,0])\n\
    </cell>\n<code language=julia-1.0>\nnext_smallest([1,4,3,5,2,0,0,0,0,0,0,1,0,0,1,0,0,0,0])\n\
    </cell>\n<code language=julia-1.0>\nnext_smallest([1,4,3,5,2,0,0,0,0,0,0,1,0,0,1,0,0,1,\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvlicarkg.jl:9\nin expression starting at /tmp/tmpvlicarkg.jl:9\n"
  stdout: ''
  timestamp: 1659748415
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else\n        smallest = lst[1]\n        for\
    \ i = 2:length(lst)\n            if lst[i] < smallest \n                smallest\
    \ = lst[i]\n            end\n        end\n        return smallest\n    end\nend\n\
    </cell>\n<code language=julia-1.3>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the index of the first element\
    \ of the list that satisfies a given condition. For example, if the list contains\
    \ only positive numbers, then the function should return -1 if the list does not\
    \ contain any element that satisfies the condition.\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplz5tgwv_.jl:9\nin expression starting at /tmp/tmplz5tgwv_.jl:9\n"
  stdout: ''
  timestamp: 1659748415
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"The list is empty\") \n\
    \    else \n        lst[1]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3mdoq7rf.jl:13\nin expression starting at\
    \ /tmp/tmp3mdoq7rf.jl:13\n"
  stdout: ''
  timestamp: 1659748415
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        smallest = lst[1]\n       \
    \ for i in 2:length(lst) \n            if lst[i] < smallest \n               \
    \ smallest = lst[i]\n            end\n        end\n        return smallest\n \
    \   end\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeqltdnm3.jl:9\nin expression starting at /tmp/tmpeqltdnm3.jl:9\n"
  stdout: ''
  timestamp: 1659748415
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        smallest = lst[1]\n       \
    \ for i in 2:length(lst)\n            if lst[i] < smallest \n                smallest\
    \ = lst[i]\n            end\n        end\n        return smallest\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxbx2xow_.jl:9\nin expression starting at /tmp/tmpxbx2xow_.jl:9\n"
  stdout: ''
  timestamp: 1659748415
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else\n        smallest = lst[1]\n        for\
    \ i in 2:length(lst)\n            if lst[i] < smallest \n                smallest\
    \ = lst[i]\n            end\n        end\n        return smallest\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\n\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgb7xk_4w.jl:9\nin expression starting at /tmp/tmpgb7xk_4w.jl:9\n"
  stdout: ''
  timestamp: 1659748415
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return nothing\n    elseif length(lst)\
    \ == 1 \n        return lst[1]\n    else\n        smallest = lst[1]\n        for\
    \ i in 2:length(lst)\n            if lst[i] < smallest \n                smallest\
    \ = lst[i]\n            end\n        end\n        return smallest\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smalle\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz4y50w_l.jl:21\nin expression starting at\
    \ /tmp/tmpz4y50w_l.jl:21\n"
  stdout: ''
  timestamp: 1659748415
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"The list is empty\")\n\
    \    end\n    smallest = lst[1]\n    smallest_index = 2\n    for i in 2:length(lst)\n\
    \        if lst[i] < smallest \n            smallest = lst[i]\n            smallest_index\
    \ = i\n        end\n    end\n    return smallest\nend\n</cell>\n<code language=julia-1.3>\n\
    next_smallest([1,4,5,6,7,8,9])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the index of the first element of the list that is larger than\
    \ the given value.\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbqpfw2pq.jl:20\nin expression starting at\
    \ /tmp/tmpbqpfw2pq.jl:20\n"
  stdout: ''
  timestamp: 1659748415
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"The list is empty\") \n\
    \    else \n        smallest = lst[1] \n        for i in 2:length(lst) \n    \
    \        if lst[i] < smallest \n                smallest = lst[i] \n         \
    \   end\n        end\n        return smallest\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph8sqhmw9.jl:19\nin expression starting at\
    \ /tmp/tmph8sqhmw9.jl:19\n"
  stdout: ''
  timestamp: 1659748415
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"The list is empty\") \n\
    \    else \n        smallest = lst[1] \n        for i in 2:length(lst) \n    \
    \        if lst[i] < smallest \n                smallest = lst[i] \n         \
    \   end\n        end\n        return smallest\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg6edofjo.jl:19\nin expression starting at\
    \ /tmp/tmpg6edofjo.jl:19\n"
  stdout: ''
  timestamp: 1659748415
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else \n   \
    \     return lst[findmin(lst)]\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpa1gc6300.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpa1gc6300.jl:18\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4, 5]) == 2\n  ArgumentError: invalid index:\
    \ (1, 1) of type Tuple{Int64, Int64}\n  Stacktrace:\n    [1] to_index(i::Tuple{Int64,\
    \ Int64})\n      @ Base ./indices.jl:300\n    [2] to_index(A::Vector{Int64}, i::Tuple{Int64,\
    \ Int64})\n      @ Base ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333\
    \ [inlined]\n    [4] to_indices\n      @ ./indices.jl:325 [inlined]\n    [5] getindex\n\
    \      @ ./abstractarray.jl:1218 [inlined]\n    [6] next_smallest(lst::Vector{Int64})\n\
    \      @ Main /tmp/tmpa1gc6300.jl:10\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpa1gc6300.jl:18 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpa1gc6300.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpa1gc6300.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([5, 1, 4, 3, 2]) == 2\n  ArgumentError: invalid index: (1, 2) of type\
    \ Tuple{Int64, Int64}\n  Stacktrace:\n    [1] to_index(i::Tuple{Int64, Int64})\n\
    \      @ Base ./indices.jl:300\n    [2] to_index(A::Vector{Int64}, i::Tuple{Int64,\
    \ Int64})\n      @ Base ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333\
    \ [inlined]\n    [4] to_indices\n      @ ./indices.jl:325 [inlined]\n    [5] getindex\n\
    \      @ ./abstractarray.jl:1218 [inlined]\n    [6] next_smallest(lst::Vector{Int64})\n\
    \      @ Main /tmp/tmpa1gc6300.jl:10\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpa1gc6300.jl:19 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpa1gc6300.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpa1gc6300.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == nothi"
  timestamp: 1659748418
- exit_code: -1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    elseif length(lst)\
    \ == 1 \n        return lst[1]\n    elseif length(lst) == 2 \n        return lst[1]\n\
    \    elseif length(lst) > 2 \n        smallest = lst[1]\n        smallest_index\
    \ = 2\n        for index in 2:length(lst)\n            if lst[index] < smallest\
    \ \n                smallest = lst[index]\n                smallest_index = index\n\
    \            end\n        end\n        return smallest\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Test Failed at /tmp/tmpkdbpsk2n.jl:30\n  Expression: candidate([1,
    2, 3, 4, 5]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n   @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n
    [2] macro expansion\n   @ /tmp/tmpkdbpsk2n.jl:30 [inlined]\n [3] macro expansion\n   @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n
    [4] top-level scope\n   @ /tmp/tmpkdbpsk2n.jl:29\ntest set: Test Failed at /tmp/tmpkdbpsk2n.jl:31\n  Expression:
    candidate([5, 1, 4, 3, 2]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpkdbpsk2n.jl:31 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpkdbpsk2n.jl:29\ntest set: Error
    During Test at /tmp/tmpkdbpsk2n.jl:32\n  Test threw exception\n  Expression: candidate(Vector{Int64}([]))
    == nothing\n  MethodError: Cannot `convert` an object of type Type{Nothing} to
    an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)
    where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    convert(#unused#::Type{Union{Nothing, Int64}}, x::Type)\n     @ Base ./some.jl:36\n   [2]
    next_smallest(lst::Vector{Int64})\n     @ Main /tmp/tmpkdbpsk2n.jl:8\n   [3] macro
    expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpkdbpsk2n.jl:32 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n  '
  timestamp: 1659748419
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        smallest = lst[1]\n       \
    \ for i in 2:length(lst) \n            if lst[i] < smallest \n               \
    \ smallest = lst[i]\n            end\n        end\n        return smallest\n \
    \   end\nend\n</code>\n<|/ a tags=julia,list |>\n<| a dscore=0 |>\n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdrqy616b.jl:9\nin expression starting at /tmp/tmpdrqy616b.jl:9\n"
  stdout: ''
  timestamp: 1659748415
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else \n   \
    \     return lst[findmin(lst)]\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpa1gc6300.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpa1gc6300.jl:18\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4, 5]) == 2\n  ArgumentError: invalid index:\
    \ (1, 1) of type Tuple{Int64, Int64}\n  Stacktrace:\n    [1] to_index(i::Tuple{Int64,\
    \ Int64})\n      @ Base ./indices.jl:300\n    [2] to_index(A::Vector{Int64}, i::Tuple{Int64,\
    \ Int64})\n      @ Base ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333\
    \ [inlined]\n    [4] to_indices\n      @ ./indices.jl:325 [inlined]\n    [5] getindex\n\
    \      @ ./abstractarray.jl:1218 [inlined]\n    [6] next_smallest(lst::Vector{Int64})\n\
    \      @ Main /tmp/tmpa1gc6300.jl:10\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpa1gc6300.jl:18 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpa1gc6300.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpa1gc6300.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([5, 1, 4, 3, 2]) == 2\n  ArgumentError: invalid index: (1, 2) of type\
    \ Tuple{Int64, Int64}\n  Stacktrace:\n    [1] to_index(i::Tuple{Int64, Int64})\n\
    \      @ Base ./indices.jl:300\n    [2] to_index(A::Vector{Int64}, i::Tuple{Int64,\
    \ Int64})\n      @ Base ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333\
    \ [inlined]\n    [4] to_indices\n      @ ./indices.jl:325 [inlined]\n    [5] getindex\n\
    \      @ ./abstractarray.jl:1218 [inlined]\n    [6] next_smallest(lst::Vector{Int64})\n\
    \      @ Main /tmp/tmpa1gc6300.jl:10\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpa1gc6300.jl:19 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpa1gc6300.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpa1gc6300.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == nothi"
  timestamp: 1659748418
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else \n   \
    \     return lst[findmin(lst)]\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpa1gc6300.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpa1gc6300.jl:18\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4, 5]) == 2\n  ArgumentError: invalid index:\
    \ (1, 1) of type Tuple{Int64, Int64}\n  Stacktrace:\n    [1] to_index(i::Tuple{Int64,\
    \ Int64})\n      @ Base ./indices.jl:300\n    [2] to_index(A::Vector{Int64}, i::Tuple{Int64,\
    \ Int64})\n      @ Base ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333\
    \ [inlined]\n    [4] to_indices\n      @ ./indices.jl:325 [inlined]\n    [5] getindex\n\
    \      @ ./abstractarray.jl:1218 [inlined]\n    [6] next_smallest(lst::Vector{Int64})\n\
    \      @ Main /tmp/tmpa1gc6300.jl:10\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpa1gc6300.jl:18 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpa1gc6300.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpa1gc6300.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([5, 1, 4, 3, 2]) == 2\n  ArgumentError: invalid index: (1, 2) of type\
    \ Tuple{Int64, Int64}\n  Stacktrace:\n    [1] to_index(i::Tuple{Int64, Int64})\n\
    \      @ Base ./indices.jl:300\n    [2] to_index(A::Vector{Int64}, i::Tuple{Int64,\
    \ Int64})\n      @ Base ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333\
    \ [inlined]\n    [4] to_indices\n      @ ./indices.jl:325 [inlined]\n    [5] getindex\n\
    \      @ ./abstractarray.jl:1218 [inlined]\n    [6] next_smallest(lst::Vector{Int64})\n\
    \      @ Main /tmp/tmpa1gc6300.jl:10\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpa1gc6300.jl:19 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpa1gc6300.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpa1gc6300.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == nothi"
  timestamp: 1659748418
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"The list cannot be empty\"\
    )\n    end\n    smallest = lst[1]\n    smallest_index = 1\n    for index in 2:length(lst)\n\
    \        if lst[index] < smallest \n            smallest = lst[index]\n      \
    \      smallest_index = index\n        end\n    end\n    return smallest_index\
    \ == length(lst) ? nothing : smallest_index\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprsrkct89.jl:20\nin expression starting at\
    \ /tmp/tmprsrkct89.jl:20\n"
  stdout: ''
  timestamp: 1659748415
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else\n        smallest = lst[1]\n        smallest_index\
    \ = 2\n        for i = 2:length(lst)\n            if lst[i] < smallest \n    \
    \            smallest = lst[i]\n                smallest_index = i\n         \
    \   end\n        end\n        return smallest\n    end\nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 |>\nThe easiest way is to use sort!\n<code>\nusing Test\n\n\
    @testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5])\
    \ == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpal2omla4.jl:9\nin expression starting at /tmp/tmpal2omla4.jl:9\n"
  stdout: ''
  timestamp: 1659748415
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return nothing\n    else \n   \
    \     return lst[1]\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpdk87g9qi.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpdk87g9qi.jl:18\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdk87g9qi.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdk87g9qi.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpdk87g9qi.jl:19\n  Expression: candidate([5, 1, 4, 3, 2]) ==\
    \ 2\n   Evaluated: 5 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdk87g9qi.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdk87g9qi.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpdk87g9qi.jl:21\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdk87g9qi.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdk87g9qi.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpdk87g9qi.jl:23\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdk87g9qi.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdk87g9qi.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659748416
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        return lst[findmin(lst)]\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0_9sx72o.jl:9\nin expression starting at /tmp/tmp0_9sx72o.jl:9\n"
  stdout: ''
  timestamp: 1659748415
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"list is empty\") \n   \
    \ else \n        smallest = lst[1]\n        for i in 2:length(lst) \n        \
    \    if lst[i] < smallest \n                smallest = lst[i] \n            end\n\
    \        end\n        return smallest\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6rd_1d9r.jl:19\nin expression starting at\
    \ /tmp/tmp6rd_1d9r.jl:19\n"
  stdout: ''
  timestamp: 1659748415
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        smallest = lst[1]\n       \
    \ for i in 2:length(lst) \n            if lst[i] < smallest \n               \
    \ smallest = lst[i]\n            end\n        end\n        return smallest\n \
    \   end\nend\n</cell>\n<code language=julia-1.4>\nnext_smallest([1,2,3])\n</cell>\n\
    <code language=julia-1.4>\nnext_smallest([1,2,4,5,6])\n</cell>\n<code language=julia-1.4>\n\
    next_smallest([1,2,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.4>\nnext_smallest([1,2,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.4>\nnext_smallest([1,2,4,5,6,7,8,9,10,11])\n</cell>\n\
    <code language=julia-1.4>\nnext_smallest([1,2,4,5,6,7,8,9,10,11,12,13])\n</cell>\n\
    <code language=julia-1.4>\nnext_smallest([1,2,4,5,6,7,8,9,10,11,12,13,14])\n</cell>\n\
    <code language=julia-1.4>\nnext_smallest([1,2,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    </cell>\n<code language=julia-1.4>\nnext_smallest([1,2,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.4>\nnext_smallest([1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.4>\nnext_smallest([1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<code language=julia-1.4>\nnext_smallest([1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    </cell>\n<code language=julia-1.4>\nnext_smallest([1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.4>\nnext_smallest([1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<code language=julia-1.4>\nnext_smallest([1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    </cell>\n<code language=julia-1.4>\nnext_smallest([1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkrzeuh20.jl:9\nin expression starting at /tmp/tmpkrzeuh20.jl:9\n"
  stdout: ''
  timestamp: 1659748415
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    smallest = lst[1]\n    for i in 2:length(lst)\n        if lst[i]\
    \ < smallest\n            smallest = lst[i]\n        end\n    end\n    smallest\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpic95p036.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpic95p036.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpic95p036.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpic95p036.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpic95p036.jl:21\n  Expression: candidate([5, 1, 4, 3, 2]) ==\
    \ 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpic95p036.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpic95p036.jl:19\ntest set: Error\
    \ During Test at /tmp/tmpic95p036.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == nothing\n  BoundsError: attempt to access 0-element\
    \ Vector{Int64} at index [1]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] next_smallest(lst::Vector{Int64})\n     @ Main /tmp/tmpic95p036.jl:7\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpic95p036.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpic95p036.jl:19\ntest set:\
    \ Test Failed at /tmp/tmpic95p036.jl:23\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpic95p036.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpic95p036.jl:19\nte"
  timestamp: 1659748418
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        smallest = lst[1]\n       \
    \ for i in 2:length(lst)\n            if lst[i] < smallest \n                smallest\
    \ = lst[i]\n            end\n        end\n        return smallest\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <text>\nExercise 2\nWrite a function next_largest() that returns the 2nd largest\
    \ element of the list.\nReturn None if there is no such element.\nHint: Use a\
    \ for loop to iterate through the list.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprmk9axwg.jl:9\nin expression starting at /tmp/tmprmk9axwg.jl:9\n"
  stdout: ''
  timestamp: 1659748417
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    smallest = minimum(lst)\n    if smallest == lst[1]\n        return\
    \ smallest\n    else\n        return nothing\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz32xcias.jl:14\nin expression starting at\
    \ /tmp/tmpz32xcias.jl:14\n"
  stdout: ''
  timestamp: 1659748417
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"The list is empty\") \n\
    \    else \n        smallest = lst[1] \n        for i in 2:length(lst) \n    \
    \        if lst[i] < smallest \n                smallest = lst[i] \n         \
    \   end \n        end \n        return smallest \n    end \nend \n</cell>\n<code\
    \ language=julia-1.0>\nnext_smallest([1,5,2,4,3,6,8,7,9,0])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the index of the first element of a\
    \ list that satisfies a condition. For example, if the list is [1,2,3,4,5,6],\
    \ the function should return 3 if the condition is lst[1] > lst[2]. Otherwise,\
    \ return -1.\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl2jw4kdy.jl:19\nin expression starting at\
    \ /tmp/tmpl2jw4kdy.jl:19\n"
  stdout: ''
  timestamp: 1659748417
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"The list is empty\")\n\
    \    end\n    smallest = lst[1]\n    for i in 2:length(lst)\n        if lst[i]\
    \ < smallest \n            smallest = lst[i]\n        end\n    end\n    return\
    \ smallest\nend\n</cell>\n<code language=julia-1.0>\nnext_smallest([2,4,6,8,10,12,14,16,18,20])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the index of the element\
    \ in the list that has the smallest value.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2_ivf0ak.jl:18\nin expression starting at\
    \ /tmp/tmp2_ivf0ak.jl:18\n"
  stdout: ''
  timestamp: 1659748417
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else\n        smallest = lst[1]\n        for\
    \ elt in lst[2:end]\n            if elt < smallest \n                smallest\
    \ = elt\n            end\n        end\n        return smallest\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpofpwlo3c.jl:9\nin expression starting at /tmp/tmpofpwlo3c.jl:9\n"
  stdout: ''
  timestamp: 1659748416
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        return lst[findmin(lst)]\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp2upvn5l.jl:9\nin expression starting at /tmp/tmpp2upvn5l.jl:9\n"
  stdout: ''
  timestamp: 1659748417
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        smallest = lst[1]\n       \
    \ for i in 2:length(lst)\n            if lst[i] < smallest \n                smallest\
    \ = lst[i]\n            end\n        end\n        return smallest\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpynbf4mha.jl:9\nin expression starting at /tmp/tmpynbf4mha.jl:9\n"
  stdout: ''
  timestamp: 1659748417
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return nothing\n    else \n   \
    \     return lst[1]\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprmf7p911.jl:13\nin expression starting at\
    \ /tmp/tmprmf7p911.jl:13\n"
  stdout: ''
  timestamp: 1659748417
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    elseif length(lst)\
    \ == 1 \n        return lst[1]\n    else\n        smallest = lst[1]\n        for\
    \ i = 2:length(lst) \n            if lst[i] < smallest \n                smallest\
    \ = lst[i]\n            end\n        end\n        return smallest\n    end\nend\n\
    </cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0lvwb7t8.jl:21\nin expression starting at\
    \ /tmp/tmp0lvwb7t8.jl:21\n"
  stdout: ''
  timestamp: 1659748416
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"The list is empty\") \n\
    \    else \n        smallest = lst[1] \n        for i in 2:length(lst) \n    \
    \        if lst[i] < smallest \n                smallest = lst[i] \n         \
    \   end \n        end \n        return smallest \n    end \nend \nusing Test\n\
    \n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp86y2i6ju.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp86y2i6ju.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp86y2i6ju.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp86y2i6ju.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp86y2i6ju.jl:25\n  Expression: candidate([5, 1, 4, 3, 2]) ==\
    \ 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp86y2i6ju.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp86y2i6ju.jl:23\ntest set: Error\
    \ During Test at /tmp/tmp86y2i6ju.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == nothing\n  The list is empty\n  Stacktrace:\n\
    \   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] next_smallest(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmp86y2i6ju.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp86y2i6ju.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp86y2i6ju.jl:23\ntest set:\
    \ Test Failed at /tmp/tmp86y2i6ju.jl:27\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp86y2i6ju.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp86y2i6ju.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp86y2i6ju.jl:28\n  "
  timestamp: 1659748419
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else\n        smallest = lst[1]\n        for\
    \ i in 2:length(lst)\n            if lst[i] < smallest \n                smallest\
    \ = lst[i]\n            end\n        end\n        return smallest\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcd4ua76a.jl:9\nin expression starting at /tmp/tmpcd4ua76a.jl:9\n"
  stdout: ''
  timestamp: 1659748417
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        return lst[findmin(lst)]\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0hd8j2rv.jl:9\nin expression starting at /tmp/tmp0hd8j2rv.jl:9\n"
  stdout: ''
  timestamp: 1659748417
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else\n        smallest = lst[1]\n        for\
    \ i = 2:length(lst)\n            if lst[i] < smallest \n                smallest\
    \ = lst[i]\n            end\n        end\n        return smallest\n    end\nend\n\
    </cell>\n<code language=julia-1.3>\nnext_smallest([2,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.3>\nnext_smallest([2,3,5,7,9])\n</cell>\n<code language=julia-1.3>\n\
    next_smallest([2,3,5,7,9])\n</cell>\n<code language=julia-1.3>\nnext_smallest([2,3,5,7,9])\n\
    </cell>\n<code language=julia-1.3>\nnext_smallest([2,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.3>\nnext_smallest([2,3,5,7,9])\n</cell>\n<code language=julia-1.3>\n\
    next_smallest([2,3,5,7,9])\n</cell>\n<code language=julia-1.3>\nnext_smallest([2,3,5,7,9])\n\
    </cell>\n<code language=julia-1.3>\nnext_smallest([2,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.3>\nnext_smallest([2,3,5,7,9])\n</cell>\n<code language=julia-1.3>\n\
    next_smallest([2,3,5,7,9])\n</cell>\n<code language=julia-1.3>\nnext_smallest([2,3,5,7,9])\n\
    </cell>\n<code language=julia-1.3>\nnext_smallest([2,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.3>\nnext_smallest([2,3,5,7,9])\n</cell>\n<code language=julia-1.3>\n\
    next_smallest([2,3,5,7,9])\n</cell>\n<code language=julia-1.3>\nnext_smallest([2,3,5,7,9])\n\
    </cell>\n<code language=julia-1.3>\nnext_smallest([2,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.3>\nnext_smallest([2,3,5,7,9])\n</cell>\n<code language=julia-1.3>\n\
    next_smallest([2,3,5,7,9])\n</cell>\n<code language=julia-1.3>\nnext_smallest([2,3,5,7,9])\n\
    </cell>\n<code language=julia-1.3>\nnext_smallest([2,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1zuq9j7g.jl:9\nin expression starting at /tmp/tmp1zuq9j7g.jl:9\n"
  stdout: ''
  timestamp: 1659748417
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing \n    else \n  \
    \      smallest = lst[1] \n        for i in 2:length(lst) \n            if lst[i]\
    \ < smallest \n                smallest = lst[i] \n            end \n        end\
    \ \n        return smallest \n    end \nend \nusing Test\n\n@testset begin\n\n\
    candidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp29lji0py.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp29lji0py.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp29lji0py.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp29lji0py.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp29lji0py.jl:25\n  Expression: candidate([5, 1, 4, 3, 2]) ==\
    \ 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp29lji0py.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp29lji0py.jl:23\ntest set: Error\
    \ During Test at /tmp/tmp29lji0py.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == nothing\n  MethodError: Cannot `convert` an\
    \ object of type Type{Nothing} to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] convert(#unused#::Type{Union{Nothing, Int64}},\
    \ x::Type)\n     @ Base ./some.jl:36\n   [2] next_smallest(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmp29lji0py.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp29lji0py.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp29lji0py.j"
  timestamp: 1659748420
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        return lst[findmin(lst)]\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpopdoxzrj.jl:9\nin expression starting at /tmp/tmpopdoxzrj.jl:9\n"
  stdout: ''
  timestamp: 1659748417
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else\n        smallest = lst[1]\n        smallest_index\
    \ = 2\n        for i in 2:length(lst)\n            if lst[i] < smallest \n   \
    \             smallest = lst[i]\n                smallest_index = i\n        \
    \    end\n        end\n        return smallest\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph2bvn2j2.jl:9\nin expression starting at /tmp/tmph2bvn2j2.jl:9\n"
  stdout: ''
  timestamp: 1659748417
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else\n        smallest = lst[1]\n        for\
    \ i in 2:length(lst)\n            if lst[i] < smallest \n                smallest\
    \ = lst[i]\n            end\n        end\n        return smallest\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30])\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvpbyaonz.jl:9\nin expression starting at /tmp/tmpvpbyaonz.jl:9\n"
  stdout: ''
  timestamp: 1659748417
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"The list is empty\") \n\
    \    else \n        smallest = lst[1] \n        for i in 2:length(lst) \n    \
    \        if lst[i] < smallest \n                smallest = lst[i] \n         \
    \   end \n        end \n        return smallest \n    end \nend \nusing Test\n\
    \n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp86y2i6ju.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp86y2i6ju.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp86y2i6ju.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp86y2i6ju.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp86y2i6ju.jl:25\n  Expression: candidate([5, 1, 4, 3, 2]) ==\
    \ 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp86y2i6ju.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp86y2i6ju.jl:23\ntest set: Error\
    \ During Test at /tmp/tmp86y2i6ju.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == nothing\n  The list is empty\n  Stacktrace:\n\
    \   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] next_smallest(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmp86y2i6ju.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp86y2i6ju.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp86y2i6ju.jl:23\ntest set:\
    \ Test Failed at /tmp/tmp86y2i6ju.jl:27\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp86y2i6ju.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp86y2i6ju.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp86y2i6ju.jl:28\n  "
  timestamp: 1659748419
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        smallest = lst[1]\n       \
    \ for element in lst[2:end] \n            if element < smallest \n           \
    \     smallest = element \n            end\n        end\n        return smallest\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1h2yeg8s.jl:9\nin expression starting at /tmp/tmp1h2yeg8s.jl:9\n"
  stdout: ''
  timestamp: 1659748417
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    elseif length(lst)\
    \ == 1 \n        return lst[1]\n    else\n        smallest = lst[1]\n        for\
    \ i in 2:length(lst)\n            if lst[i] < smallest \n                smallest\
    \ = lst[i]\n            end\n        end\n        return smallest\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwa3l6636.jl:21\nin expression starting at\
    \ /tmp/tmpwa3l6636.jl:21\n"
  stdout: ''
  timestamp: 1659748417
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else\n        smallest = lst[1]\n        for\
    \ elt in lst[2:end]\n            if elt < smallest \n                smallest\
    \ = elt\n            end\n        end\n        return smallest\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3v2ig_ib.jl:9\nin expression starting at /tmp/tmp3v2ig_ib.jl:9\n"
  stdout: ''
  timestamp: 1659748418
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return nothing\n    else \n   \
    \     smallest = minimum(lst)\n        lst = filter(x -> x != smallest, lst)\n\
    \        smallest = minimum(lst)\n        return smallest\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the index of the element in the list\
    \ that is closest to zero. \nIf there are multiple elements that are equally close,\
    \ return the index of the smallest one.\nIf there are no elements that are equally\
    \ close, return -1.\nIf there are multiple elements that are equally close, return\
    \ the index of the smallest one.\nIf there are no elements that are equally close,\
    \ return -1.\nIf there are multiple elements that are equally close, return the\
    \ index of the smallest one.\nIf there are no elements that are equally close,\
    \ return -1.\nIf there are multiple elements that are equally close, return the\
    \ index of the smallest one.\nIf there are no elements that are equally close,\
    \ return -1.\nIf there are multiple elements that are equally close, return the\
    \ index of the smallest one.\nIf there are no elements that are equally close,\
    \ return -1.\nIf there are multiple elements that are equally close, return the\
    \ index of the smallest one.\nIf there are no elements that are equally close,\
    \ return -1.\nIf there are multiple elements that are equally close, return the\
    \ index of the smallest one.\nIf there are no elements that are equally close,\
    \ return -1.\nIf there are multiple elements that are equally close, return the\
    \ index of the smallest one.\nIf there are no elements that are equally close,\
    \ return -1.\nIf there are multiple elements that are equally close, return the\
    \ index of the smallest one.\nIf there are no elements that are equally close,\
    \ return -1.\nIf there are multiple elements that are equally close, return the\
    \ index of the smallest one.\nIf there are no elements that are equally close,\
    \ return -1.\nIf there are multiple elements that are equally close, return the\
    \ index of the smallest one.\nIf there are no elements that are equally close,\
    \ return -1.\nIf there are multiple elements that are equally close, return the\
    \ index of the smallest one.\nIf there are no elements that are equally close,\
    \ return -1.\nIf there are multiple elements that are equally close, return the\
    \ index of the smallest one.\nIf there are no elements that are equally close,\
    \ return -1.\nIf there are multiple elements that are equally close, return the\
    \ index of the smallest one.\nIf there are no elements that are equally close,\
    \ return -1.\nIf there are multiple elements that are equally close, return the\
    \ index of the smallest one.\nIf there are no elements that are equally close,\
    \ return -1.\nIf there are multiple elements that are equally close, return the\
    \ index of the smallest one.\nIf there are no elements that are equally close,\
    \ return -1.\nIf there are multiple elements that are equally close, return the\
    \ index of the smallest one.\nIf there are no \nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgsojlv2t.jl:16\nin expression starting at\
    \ /tmp/tmpgsojlv2t.jl:16\n"
  stdout: ''
  timestamp: 1659748418
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        smallest = lst[1]\n       \
    \ for i in 2:length(lst) \n            if lst[i] < smallest \n               \
    \ smallest = lst[i]\n            end\n        end\n        return smallest\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpimoj6pdy.jl:9\nin expression starting at /tmp/tmpimoj6pdy.jl:9\n"
  stdout: ''
  timestamp: 1659748418
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    elseif length(lst)\
    \ == 1 \n        return lst[1]\n    else\n        smallest = lst[1]\n        for\
    \ i = 2:length(lst)\n            if lst[i] < smallest \n                smallest\
    \ = lst[i]\n            end\n        end\n        return smallest\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the index of the first element\
    \ of the list that satisfies a given condition. For example, given [1,2,3,4,5,6,7,8,9,10],\
    \ the function should return 4 because 4 is the first element of the list that\
    \ satisfies the condition lst[i]%2 == 0.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6jg7_qle.jl:21\nin expression starting at\
    \ /tmp/tmp6jg7_qle.jl:21\n"
  stdout: ''
  timestamp: 1659748418
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        smallest = lst[1]\n       \
    \ for i in 2:length(lst)\n            if lst[i] < smallest \n                smallest\
    \ = lst[i]\n            end\n        end\n        return smallest\n    end\nend\n\
    </cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpizqp9scf.jl:9\nin expression starting at /tmp/tmpizqp9scf.jl:9\n"
  stdout: ''
  timestamp: 1659748418
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing \n    else \n  \
    \      smallest = lst[1] \n        for i in 2:length(lst) \n            if lst[i]\
    \ < smallest \n                smallest = lst[i] \n            else \n       \
    \         break \n        end \n        return smallest \nend \n</code>\n<|/ a\
    \ tags=julia,list |>\n<| a tags=julia,list |>\nA more efficient solution is to\
    \ use sortperm:\n<code>\njulia> function next_smallest(lst)\n           return\
    \ lst[sortperm(lst)[2]]\n       end\nnext_smallest (generic function with 1 method)\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuibxyvrv.jl:19\nin expression starting at\
    \ /tmp/tmpuibxyvrv.jl:19\n"
  stdout: ''
  timestamp: 1659748418
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        smallest = lst[1]\n       \
    \ for i in 2:length(lst) \n            if lst[i] < smallest \n               \
    \ smallest = lst[i]\n            end\n        end\n        return smallest\n \
    \   end\nend\n</cell>\n<code language=julia-1.3>\nnext_smallest([1,2,3,4,5])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of elements\
    \ in the list that satisfy the condition $x^2 + y^2 \\leq z^2$. Test it on $x^2\
    \ + y^2 = z^2$ and $x^2 + y^2 = z^3$.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp31m5z2sv.jl:9\nin expression starting at /tmp/tmp31m5z2sv.jl:9\n"
  stdout: ''
  timestamp: 1659748418
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    smallest = lst[1]\n    for i in 2:length(lst)\n        if lst[i]\
    \ < smallest\n            smallest = lst[i]\n        end\n    end\n    return\
    \ smallest\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer the\
    \ question. OP wants to find the second smallest element in a list, not the first\
    \ one.\n<|/ c |>\n<| c |>\nI edited the answer to make it more clear. Thanks for\
    \ pointing out.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppkcempkw.jl:15\nin expression starting at\
    \ /tmp/tmppkcempkw.jl:15\n"
  stdout: ''
  timestamp: 1659748418
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"List is empty\") \n   \
    \ else \n        smallest = lst[1]\n        for i in 2:length(lst) \n        \
    \    if lst[i] < smallest \n                smallest = lst[i] \n            end\n\
    \        end\n        return smallest\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa329b8_5.jl:19\nin expression starting at\
    \ /tmp/tmpa329b8_5.jl:19\n"
  stdout: ''
  timestamp: 1659748418
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        smallest = lst[1]\n       \
    \ for i in 2:length(lst) \n            if lst[i] < smallest \n               \
    \ smallest = lst[i]\n            end\n        end\n        return smallest\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq9hj8wrl.jl:9\nin expression starting at /tmp/tmpq9hj8wrl.jl:9\n"
  stdout: ''
  timestamp: 1659748418
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"The list is empty\") \n\
    \    else \n        smallest = lst[1] \n        for i in 2:length(lst) \n    \
    \        if lst[i] < smallest \n                smallest = lst[i] \n         \
    \   end \n        end \n        return smallest \n    end \nend \nusing Test\n\
    \n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp86y2i6ju.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp86y2i6ju.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp86y2i6ju.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp86y2i6ju.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp86y2i6ju.jl:25\n  Expression: candidate([5, 1, 4, 3, 2]) ==\
    \ 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp86y2i6ju.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp86y2i6ju.jl:23\ntest set: Error\
    \ During Test at /tmp/tmp86y2i6ju.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == nothing\n  The list is empty\n  Stacktrace:\n\
    \   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] next_smallest(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmp86y2i6ju.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp86y2i6ju.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp86y2i6ju.jl:23\ntest set:\
    \ Test Failed at /tmp/tmp86y2i6ju.jl:27\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp86y2i6ju.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp86y2i6ju.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp86y2i6ju.jl:28\n  "
  timestamp: 1659748419
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        smallest = lst[1]\n       \
    \ for i in 2:length(lst) \n            if lst[i] < smallest \n               \
    \ smallest = lst[i]\n            end\n        end\n        return smallest\n \
    \   end\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpda38ii50.jl:9\nin expression starting at /tmp/tmpda38ii50.jl:9\n"
  stdout: ''
  timestamp: 1659748418
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        smallest = lst[1]\n       \
    \ for i in 2:length(lst) \n            if lst[i] < smallest \n               \
    \ smallest = lst[i]\n            end\n        end\n        return smallest\n \
    \   end\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx3gc99_z.jl:9\nin expression starting at /tmp/tmpx3gc99_z.jl:9\n"
  stdout: ''
  timestamp: 1659748418
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        smallest = lst[1]\n       \
    \ smallest_index = 2\n        for index in 2:length(lst)\n            if lst[index]\
    \ < smallest \n                smallest = lst[index]\n                smallest_index\
    \ = index\n            end\n        end\n        return smallest\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp55rkcu22.jl:9\nin expression starting at /tmp/tmp55rkcu22.jl:9\n"
  stdout: ''
  timestamp: 1659748418
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else\n        smallest = lst[1]\n        smallest_index\
    \ = 2\n        for index in 2:length(lst)\n            if lst[index] < smallest\
    \ \n                smallest = lst[index]\n                smallest_index = index\n\
    \            end\n        end\n        return smallest\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkhesh4j5.jl:9\nin expression starting at /tmp/tmpkhesh4j5.jl:9\n"
  stdout: ''
  timestamp: 1659748418
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"The list is empty\") \n\
    \    else \n        smallest = lst[1] \n        for i in 2:length(lst) \n    \
    \        if lst[i] < smallest \n                smallest = lst[i] \n         \
    \   end \n        end \n        return smallest \n    end \nend \n</cell>\n<code\
    \ language=julia-1.3>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the index of the first element of a\
    \ list that satisfies a given condition. \nFor example, \nif lst = [1,2,3,4,5,6,7,8,9,10],\
    \ and cond=x>3, then the function should return 3 because lst[3] is greater than\
    \ 3.\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz3pqd99_.jl:19\nin expression starting at\
    \ /tmp/tmpz3pqd99_.jl:19\n"
  stdout: ''
  timestamp: 1659748418
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        smallest = lst[1]\n       \
    \ for i in 2:length(lst)\n            if lst[i] < smallest \n                smallest\
    \ = lst[i]\n            end\n        end\n        return smallest\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpynbf4mha.jl:9\nin expression starting at /tmp/tmpynbf4mha.jl:9\n"
  stdout: ''
  timestamp: 1659748417
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"List is empty\") \n   \
    \ else \n        smallest = lst[1]\n        for i in 2:length(lst) \n        \
    \    if lst[i] < smallest \n                smallest = lst[i] \n            end\n\
    \        end\n        return smallest\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpzcarg9rd.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpzcarg9rd.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzcarg9rd.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzcarg9rd.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpzcarg9rd.jl:25\n  Expression: candidate([5, 1, 4, 3, 2]) ==\
    \ 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzcarg9rd.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzcarg9rd.jl:23\ntest set: Error\
    \ During Test at /tmp/tmpzcarg9rd.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == nothing\n  List is empty\n  Stacktrace:\n  \
    \ [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] next_smallest(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpzcarg9rd.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpzcarg9rd.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpzcarg9rd.jl:23\ntest set:\
    \ Test Failed at /tmp/tmpzcarg9rd.jl:27\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzcarg9rd.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzcarg9rd.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpzcarg9rd.jl:28\n  Expr"
  timestamp: 1659748421
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return nothing\n    else \n   \
    \     smallest = lst[1]\n        for i in 2:length(lst)\n            if lst[i]\
    \ < smallest \n                smallest = lst[i]\n            end\n        end\n\
    \        return smallest\n    end\nend\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the 3rd smallest element\
    \ of the list.\nReturn nothing if there is no such element.\nHint: Use a for loop\
    \ and a counter.\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi7sc66i7.jl:19\nin expression starting at\
    \ /tmp/tmpi7sc66i7.jl:19\n"
  stdout: ''
  timestamp: 1659748418
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing \n    else \n  \
    \      smallest = lst[1] \n        for i in 2:length(lst) \n            if lst[i]\
    \ < smallest \n                smallest = lst[i] \n            end\n        end\n\
    \        return smallest \n    end\nend\n</code>\n<|/ a tags=julia,sorting |>\n\
    <| c |>\nThis doesn't work if you have a list of negative numbers. `next_smallest([-10,\
    \ -5, -1, -4, -7, -6, -9, -12, -13, -14, -15, -16, -17, -21])` returns `-10` instead\
    \ of `-21`.\n<|/ c |>\n<| c |>\nIt doesn't work for negative numbers. `next_smallest([-10,\
    \ -5, -1, -4, -7, -6, -9, -12, -13, -14, -15, -16, -17, -21])` returns `-10` instead\
    \ of `-21`.\n<|/ c |>\n<| c |>\nYes, it does work. `next_smallest([-10, -5, -1,\
    \ -4, -7, -6, -9, -12, -13, -14, -15, -16, -17, -21])` returns `-21`.\n<|/ c |>\n\
    <| c |>\nIt doesn't work for negative numbers. `next_smallest([-10, -5, -1, -4,\
    \ -7, -6, -9, -12, -13, -14, -15, -16, -17, -21])` returns `-10` instead of `-21`.\n\
    <|/ c |>\n<| c |>\nIt doesn't work for negative numbers. `next_smallest([-10,\
    \ -5, -1, -4, -7, -6, -9, -12, -13, -14, -15, -16, -17, -21])` returns `-10` instead\
    \ of `-21`.\n<|/ c |>\n<| a dscore=4 |>\nThe answer by is correct, but I thought\
    \ I'd add some explanation.\nThe reason why this works is because Julia's sort\
    \ function sorts ascending by default. \nThe function next_smallest is then called\
    \ on the sorted array and returns the 2nd smallest element of the array. \n<code>\n\
    julia> next_smallest([-10, -5, -1, -4, -7, -6, -9, -12, -13, -14, -15, -16, -17,\
    \ -21])\n-21\n</code>\n<|/ a tags=julia,sorting |>\n<| c |>\nThis doesn't work\
    \ if you have a list of negative numbers. `next_smallest([-10, -5, -1, -4, -7,\
    \ -6, -9, -12, -13, -14, -15, -16, -17, -2\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6gg3bj5a.jl:19\nin expression starting at\
    \ /tmp/tmp6gg3bj5a.jl:19\n"
  stdout: ''
  timestamp: 1659748418
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"The list is empty\") \n\
    \    else \n        smallest = lst[1] \n        for i in 2:length(lst) \n    \
    \        if lst[i] < smallest \n                smallest = lst[i] \n         \
    \   end\n        end\n        return smallest\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([2,3,5,7,9])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the 2nd largest element of the list.\nReturn None if there is no such\
    \ element.\nHint: Use a for loop.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplhsafvm4.jl:19\nin expression starting at\
    \ /tmp/tmplhsafvm4.jl:19\n"
  stdout: ''
  timestamp: 1659748419
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"The list is empty\") \n\
    \    else \n        smallest = lst[1]\n        for i in 2:length(lst) \n     \
    \       if lst[i] < smallest \n                smallest = lst[i] \n          \
    \  end\n        end\n        return smallest\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\
    \t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmplf1xvrbw.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmplf1xvrbw.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplf1xvrbw.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplf1xvrbw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmplf1xvrbw.jl:25\n  Expression: candidate([5, 1, 4, 3, 2]) ==\
    \ 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplf1xvrbw.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplf1xvrbw.jl:23\ntest set: Error\
    \ During Test at /tmp/tmplf1xvrbw.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == nothing\n  The list is empty\n  Stacktrace:\n\
    \   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] next_smallest(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmplf1xvrbw.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmplf1xvrbw.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmplf1xvrbw.jl:23\ntest set:\
    \ Test Failed at /tmp/tmplf1xvrbw.jl:27\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplf1xvrbw.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplf1xvrbw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmplf1xvrbw.jl:28\n  "
  timestamp: 1659748422
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else \n   \
    \     smallest = lst[1]\n        for i in 2:length(lst)\n            if lst[i]\
    \ < smallest \n                smallest = lst[i]\n            end\n        end\n\
    \        return smallest\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqf4y235r.jl:19\nin expression starting at\
    \ /tmp/tmpqf4y235r.jl:19\n"
  stdout: ''
  timestamp: 1659748420
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"The list is empty\")\n\
    \    elseif length(lst) == 1 \n        return lst[1]\n    elseif length(lst) ==\
    \ 2 \n        return lst[1]\n    else\n        smallest = lst[1]\n        for\
    \ i = 2:length(lst)\n            if lst[i] < smallest \n                smallest\
    \ = lst[i]\n            end\n        end\n        return smallest\n    end\nend\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwr4vong6.jl:23\nin expression starting at\
    \ /tmp/tmpwr4vong6.jl:23\n"
  stdout: ''
  timestamp: 1659748420
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        return lst[findmin(lst)]\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp2upvn5l.jl:9\nin expression starting at /tmp/tmpp2upvn5l.jl:9\n"
  stdout: ''
  timestamp: 1659748417
- exit_code: -1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else \n   \
    \     smallest = lst[1]\n        for i in 2:length(lst)\n            if lst[i]\
    \ < smallest \n                smallest = lst[i]\n            end\n        end\n\
    \        return smallest\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmpnww_90cm.jl:24\n  Expression: candidate([1,
    2, 3, 4, 5]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n   @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n
    [2] macro expansion\n   @ /tmp/tmpnww_90cm.jl:24 [inlined]\n [3] macro expansion\n   @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n
    [4] top-level scope\n   @ /tmp/tmpnww_90cm.jl:23\ntest set: Test Failed at /tmp/tmpnww_90cm.jl:25\n  Expression:
    candidate([5, 1, 4, 3, 2]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpnww_90cm.jl:25 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpnww_90cm.jl:23\ntest set: Error
    During Test at /tmp/tmpnww_90cm.jl:26\n  Test threw exception\n  Expression: candidate(Vector{Int64}([]))
    == nothing\n  MethodError: Cannot `convert` an object of type Type{Nothing} to
    an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)
    where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    convert(#unused#::Type{Union{Nothing, Int64}}, x::Type)\n     @ Base ./some.jl:36\n   [2]
    next_smallest(lst::Vector{Int64})\n     @ Main /tmp/tmpnww_90cm.jl:8\n   [3] macro
    expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpnww_90cm.jl:26 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n  '
  timestamp: 1659748423
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing \n    else \n  \
    \      smallest = lst[1] \n        for i in 2:length(lst) \n            if lst[i]\
    \ < smallest \n                smallest = lst[i] \n            end\n        end\n\
    \        return smallest \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([2,4,6,8,10])\n</cell>\n<code language=julia-1.5>\nnext_smallest([2,4,6,8,10])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([2,4,6,8,10])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([2,4,6,8,10])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([2,4,6,8,10])\n</cell>\n<code language=julia-1.5>\nnext_smallest([2,4,6,8,10])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([2,4,6,8,10])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([2,4,6,8,10])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([2,4,6,8,10])\n</cell>\n<code language=julia-1.5>\nnext_smallest([2,4,6,8,10])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([2,4,6,8,10])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([2,4,6,8,10])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([2,4,6,8,10])\n</cell>\n<code language=julia-1.5>\nnext_smallest([2,4,6,8,10])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([2,4,6,8,10])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([2,4,6,8,10])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([2,4,6,8,10])\n</cell>\n<code language=julia-1.5>\nnext_smallest([2,4,6,8,10])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([2,4,6,8,10])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([2,4,6,8,10])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([2,4,6,8,10])\n</cell>\n<code language=julia-1.5>\nnext_smallest([2,4,6,8,10])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([2,4,6,8,10])\n</cell>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2ln12als.jl:19\nin expression starting at\
    \ /tmp/tmp2ln12als.jl:19\n"
  stdout: ''
  timestamp: 1659748420
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else\n        smallest = lst[1]\n        for\
    \ i in 2:length(lst)\n            if lst[i] < smallest \n                smallest\
    \ = lst[i]\n            end\n        end\n        return smallest\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcd4ua76a.jl:9\nin expression starting at /tmp/tmpcd4ua76a.jl:9\n"
  stdout: ''
  timestamp: 1659748417
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing \n    else \n  \
    \      smallest = lst[1] \n        for i in 2:length(lst) \n            if lst[i]\
    \ < smallest \n                smallest = lst[i] \n            else \n       \
    \         return smallest \n            end \n        end \n    end \nend \n</code>\n\
    <|/ a tags=julia |>\n<| c |>\nThis does not answer the question. OP wants to find\
    \ the 2nd smallest element in the list. Your code returns the smallest element\
    \ in the list.\n<|/ c |>\n<| c |>\nThe question asks for the 2nd smallest element.\
    \ Your code returns the smallest element in the list.\n<|/ c |>\n<| c |>\nThe\
    \ question asks for the 2nd smallest element. Your code returns the smallest element\
    \ in the list.\n<|/ c |>\n<| c |>\nThe question asks for the 2nd smallest element.\
    \ Your code returns the smallest element in the list.\n<|/ c |>\n<| c |>\nThe\
    \ question asks for the 2nd smallest element. Your code returns the smallest element\
    \ in the list.\n<|/ c |>\n<| a dscore=3 |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3727_1i_.jl:20\nin expression starting at\
    \ /tmp/tmp3727_1i_.jl:20\n"
  stdout: ''
  timestamp: 1659748420
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"The list is empty\") \n\
    \    else \n        smallest = lst[1] \n        for i in 2:length(lst) \n    \
    \        if lst[i] < smallest \n                smallest = lst[i] \n         \
    \   end \n        end \n        return smallest \n    end \nend \nusing Test\n\
    \n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp86y2i6ju.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp86y2i6ju.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp86y2i6ju.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp86y2i6ju.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp86y2i6ju.jl:25\n  Expression: candidate([5, 1, 4, 3, 2]) ==\
    \ 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp86y2i6ju.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp86y2i6ju.jl:23\ntest set: Error\
    \ During Test at /tmp/tmp86y2i6ju.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == nothing\n  The list is empty\n  Stacktrace:\n\
    \   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] next_smallest(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmp86y2i6ju.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp86y2i6ju.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp86y2i6ju.jl:23\ntest set:\
    \ Test Failed at /tmp/tmp86y2i6ju.jl:27\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp86y2i6ju.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp86y2i6ju.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp86y2i6ju.jl:28\n  "
  timestamp: 1659748419
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        smallest = lst[1]\n       \
    \ for i in 2:length(lst) \n            if lst[i] < smallest \n               \
    \ smallest = lst[i]\n            end\n        end\n        return smallest\n \
    \   end\nend\n</code>\n<|/ a |>\n<| a tags=julia,sorting |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa17rdtls.jl:9\nin expression starting at /tmp/tmpa17rdtls.jl:9\n"
  stdout: ''
  timestamp: 1659748420
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        Nothing \n    else \n        lst[end-1]\
    \ \n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuoyni3x1.jl:13\nin expression starting at\
    \ /tmp/tmpuoyni3x1.jl:13\n"
  stdout: ''
  timestamp: 1659748420
- exit_code: -1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        Nothing\n    else\n        lst[end-1]\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Test Failed at /tmp/tmpmph324r6.jl:18\n  Expression: candidate([1,
    2, 3, 4, 5]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n   @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n
    [2] macro expansion\n   @ /tmp/tmpmph324r6.jl:18 [inlined]\n [3] macro expansion\n   @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n
    [4] top-level scope\n   @ /tmp/tmpmph324r6.jl:17\ntest set: Test Failed at /tmp/tmpmph324r6.jl:19\n  Expression:
    candidate([5, 1, 4, 3, 2]) == 2\n   Evaluated: 3 == 2\nStacktrace:\n [1] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpmph324r6.jl:19 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpmph324r6.jl:17\ntest set: Error
    During Test at /tmp/tmpmph324r6.jl:20\n  Test threw exception\n  Expression: candidate(Vector{Int64}([]))
    == nothing\n  MethodError: Cannot `convert` an object of type Type{Nothing} to
    an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)
    where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    convert(#unused#::Type{Union{Nothing, Int64}}, x::Type)\n     @ Base ./some.jl:36\n   [2]
    next_smallest(lst::Vector{Int64})\n     @ Main /tmp/tmpmph324r6.jl:8\n   [3] macro
    expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpmph324r6.jl:20 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n  '
  timestamp: 1659748423
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        return lst[findmin(lst)]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdutt6qth.jl:9\nin expression starting at /tmp/tmpdutt6qth.jl:9\n"
  stdout: ''
  timestamp: 1659748420
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        smallest = lst[1]\n       \
    \ for i in 2:length(lst) \n            if lst[i] < smallest \n               \
    \ smallest = lst[i]\n            end\n        end\n        return smallest\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq9hj8wrl.jl:9\nin expression starting at /tmp/tmpq9hj8wrl.jl:9\n"
  stdout: ''
  timestamp: 1659748418
- exit_code: -1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        Nothing\n    else\n        lst[end-1]\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Test Failed at /tmp/tmpmph324r6.jl:18\n  Expression: candidate([1,
    2, 3, 4, 5]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n   @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n
    [2] macro expansion\n   @ /tmp/tmpmph324r6.jl:18 [inlined]\n [3] macro expansion\n   @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n
    [4] top-level scope\n   @ /tmp/tmpmph324r6.jl:17\ntest set: Test Failed at /tmp/tmpmph324r6.jl:19\n  Expression:
    candidate([5, 1, 4, 3, 2]) == 2\n   Evaluated: 3 == 2\nStacktrace:\n [1] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpmph324r6.jl:19 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpmph324r6.jl:17\ntest set: Error
    During Test at /tmp/tmpmph324r6.jl:20\n  Test threw exception\n  Expression: candidate(Vector{Int64}([]))
    == nothing\n  MethodError: Cannot `convert` an object of type Type{Nothing} to
    an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)
    where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    convert(#unused#::Type{Union{Nothing, Int64}}, x::Type)\n     @ Base ./some.jl:36\n   [2]
    next_smallest(lst::Vector{Int64})\n     @ Main /tmp/tmpmph324r6.jl:8\n   [3] macro
    expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpmph324r6.jl:20 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n  '
  timestamp: 1659748423
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        smallest = lst[1]\n       \
    \ for ele in lst[2:end]\n            if ele < smallest \n                smallest\
    \ = ele\n            end\n        end\n        return smallest\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5k8hllsf.jl:9\nin expression starting at /tmp/tmp5k8hllsf.jl:9\n"
  stdout: ''
  timestamp: 1659748420
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        smallest = lst[1]\n       \
    \ for i in 2:length(lst) \n            if lst[i] < smallest \n               \
    \ smallest = lst[i]\n            end\n        end\n        return smallest\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq9hj8wrl.jl:9\nin expression starting at /tmp/tmpq9hj8wrl.jl:9\n"
  stdout: ''
  timestamp: 1659748418
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"The list is empty\")\n\
    \    end\n    smallest = lst[1]\n    smallest_index = 2\n    for index in 2:length(lst)\n\
    \        if lst[index] < smallest \n            smallest = lst[index]\n      \
    \      smallest_index = index\n        end\n    end\n    return smallest\nend\n\
    </cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpha9h3tzo.jl:20\nin expression starting at\
    \ /tmp/tmpha9h3tzo.jl:20\n"
  stdout: ''
  timestamp: 1659748420
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        smallest = lst[1]\n       \
    \ for el in lst[2:end] \n            if el < smallest \n                smallest\
    \ = el\n            end\n        end\n        return smallest\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nnext_smallest\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp145divp_.jl:9\nin expression starting at /tmp/tmp145divp_.jl:9\n"
  stdout: ''
  timestamp: 1659748420
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else\n        smallest = lst[1]\n        smallest_index\
    \ = 2\n        for i = 2:length(lst)\n            if lst[i] < smallest \n    \
    \            smallest = lst[i]\n                smallest_index = i\n         \
    \   end\n        end\n        return smallest\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\
    \t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqwaee7qs.jl:9\nin expression starting at /tmp/tmpqwaee7qs.jl:9\n"
  stdout: ''
  timestamp: 1659748420
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        smallest = lst[1]\n       \
    \ for i in 2:length(lst)\n            if lst[i] < smallest \n                smallest\
    \ = lst[i]\n            end\n        end\n        return smallest\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsnn0b3e6.jl:9\nin expression starting at /tmp/tmpsnn0b3e6.jl:9\n"
  stdout: ''
  timestamp: 1659748420
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        return lst[findmin(lst)]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdutt6qth.jl:9\nin expression starting at /tmp/tmpdutt6qth.jl:9\n"
  stdout: ''
  timestamp: 1659748420
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"The list is empty\")\n\
    \    elseif length(lst) == 1 \n        return lst[1]\n    else\n        smallest\
    \ = lst[1]\n        for el in lst[2:end]\n            if el < smallest \n    \
    \            smallest = el\n            end\n        end\n        return smallest\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp15we_m8g.jl:21\nin expression starting at\
    \ /tmp/tmp15we_m8g.jl:21\n"
  stdout: ''
  timestamp: 1659748420
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"list empty\") \n    else\
    \ \n        lst[1] \n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpv4c_cuaa.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpv4c_cuaa.jl:18\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv4c_cuaa.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv4c_cuaa.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpv4c_cuaa.jl:19\n  Expression: candidate([5, 1, 4, 3, 2]) ==\
    \ 2\n   Evaluated: 5 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv4c_cuaa.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv4c_cuaa.jl:17\ntest set: Error\
    \ During Test at /tmp/tmpv4c_cuaa.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == nothing\n  list empty\n  Stacktrace:\n   [1]\
    \ error(s::String)\n     @ Base ./error.jl:33\n   [2] next_smallest(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpv4c_cuaa.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpv4c_cuaa.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpv4c_cuaa.jl:17\ntest set:\
    \ Test Failed at /tmp/tmpv4c_cuaa.jl:21\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv4c_cuaa.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv4c_cuaa.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpv4c_cuaa.jl:23\n  Express"
  timestamp: 1659748422
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"The list cannot be empty\"\
    )\n    end\n    smallest = lst[1]\n    smallest_index = 2\n    for index in 2:length(lst)\n\
    \        if lst[index] < smallest \n            smallest = lst[index]\n      \
    \      smallest_index = index\n        end\n    end\n    return smallest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0ufr8s1p.jl:20\nin expression starting at\
    \ /tmp/tmp0ufr8s1p.jl:20\n"
  stdout: ''
  timestamp: 1659748420
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing \n    else \n  \
    \      smallest = lst[1] \n        for i in 2:length(lst) \n            if lst[i]\
    \ < smallest \n                smallest = lst[i] \n            end \n        end\
    \ \n        return smallest \n    end \nend \nusing Test\n\n@testset begin\n\n\
    candidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp29lji0py.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp29lji0py.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp29lji0py.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp29lji0py.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp29lji0py.jl:25\n  Expression: candidate([5, 1, 4, 3, 2]) ==\
    \ 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp29lji0py.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp29lji0py.jl:23\ntest set: Error\
    \ During Test at /tmp/tmp29lji0py.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == nothing\n  MethodError: Cannot `convert` an\
    \ object of type Type{Nothing} to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] convert(#unused#::Type{Union{Nothing, Int64}},\
    \ x::Type)\n     @ Base ./some.jl:36\n   [2] next_smallest(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmp29lji0py.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp29lji0py.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp29lji0py.j"
  timestamp: 1659748420
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    elseif length(lst)\
    \ == 1 \n        return lst[1]\n    elseif length(lst) == 2 \n        return lst[1]\n\
    \    elseif length(lst) > 2 \n        smallest = lst[1]\n        for i = 2:length(lst)\
    \ \n            if lst[i] < smallest \n                smallest = lst[i]\n   \
    \         end\n        end\n        return smallest\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that returns the index of the first element of a\
    \ list that satisfies a given predicate.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwoev91hg.jl:23\nin expression starting at\
    \ /tmp/tmpwoev91hg.jl:23\n"
  stdout: ''
  timestamp: 1659748420
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"List is empty\") \n   \
    \ else \n        smallest = lst[1] \n        for i in 2:length(lst) \n       \
    \     if lst[i] < smallest \n                smallest = lst[i] \n            end\
    \ \n        end \n        return smallest \n    end \nend \n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1571t_2e.jl:19\nin expression starting at\
    \ /tmp/tmp1571t_2e.jl:19\n"
  stdout: ''
  timestamp: 1659748421
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        smallest = lst[1]\n       \
    \ for elt in lst[2:end] \n            if elt < smallest \n                smallest\
    \ = elt\n            end\n        end\n        return smallest\n    end\nend\n\
    </code>\n<|/ a tags=julia |>\n<| c |>\nI like this solution, but I wonder if there\
    \ is a way to avoid the if/else statement and just return the value directly.\
    \ Something like `return lst[findfirst(elt -> elt < smallest, lst)]`\n<|/ c |>\n\
    <| c |>\nYes, you can do that, but I find it less readable than `if/else` statements.\n\
    <|/ c |>\n<| a tags=julia |>\nI like to use filter for this:\n<code>\njulia> function\
    \ next_smallest(lst)\n           return filter(x -> x < lst[1], lst)[2]\n    \
    \   end\nnext_smallest (generic function with 1 method)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\
    \t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5ak9kcjj.jl:9\nin expression starting at /tmp/tmp5ak9kcjj.jl:9\n"
  stdout: ''
  timestamp: 1659748421
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"List is empty\") \n   \
    \ else \n        smallest = lst[1]\n        for i in 2:length(lst)\n         \
    \   if lst[i] < smallest \n                smallest = lst[i]\n            end\n\
    \        end\n        return smallest\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpeotlfoie.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpeotlfoie.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeotlfoie.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeotlfoie.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpeotlfoie.jl:25\n  Expression: candidate([5, 1, 4, 3, 2]) ==\
    \ 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeotlfoie.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeotlfoie.jl:23\ntest set: Error\
    \ During Test at /tmp/tmpeotlfoie.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == nothing\n  List is empty\n  Stacktrace:\n  \
    \ [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] next_smallest(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpeotlfoie.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpeotlfoie.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpeotlfoie.jl:23\ntest set:\
    \ Test Failed at /tmp/tmpeotlfoie.jl:27\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeotlfoie.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeotlfoie.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpeotlfoie.jl:28\n  Expr"
  timestamp: 1659748424
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"The list is empty\") \n\
    \    else \n        smallest = lst[1] \n        for i in 2:length(lst) \n    \
    \        if lst[i] < smallest \n                smallest = lst[i] \n         \
    \   end \n        end \n        return smallest \n    end \nend \n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,\nusing Test\n\n@testset\
    \ begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\
    \t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpww8q30gs.jl:19\nin expression starting at\
    \ /tmp/tmpww8q30gs.jl:19\n"
  stdout: ''
  timestamp: 1659748421
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        smallest = lst[1]\n       \
    \ for i in 2:length(lst) \n            if lst[i] < smallest \n               \
    \ smallest = lst[i]\n            end\n        end\n        return smallest\n \
    \   end\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeqltdnm3.jl:9\nin expression starting at /tmp/tmpeqltdnm3.jl:9\n"
  stdout: ''
  timestamp: 1659748415
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"The list is empty\")\n\
    \    elseif length(lst) == 1 \n        return lst[1]\n    elseif length(lst) ==\
    \ 2 \n        return lst[1]\n    elseif length(lst) > 2 \n        smallest = lst[1]\n\
    \        for i = 2:length(lst) \n            if lst[i] < smallest \n         \
    \       smallest = lst[i]\n            end\n        end\n        return smallest\n\
    \    end\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\nI wrote a function\
    \ that returns the 2nd smallest element of a vector:\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\
    \t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpijynnoz9.jl:23\nin expression starting at\
    \ /tmp/tmpijynnoz9.jl:23\n"
  stdout: ''
  timestamp: 1659748421
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    elseif length(lst)\
    \ == 1 \n        return lst[1]\n    elseif length(lst) == 2 \n        return lst[1]\n\
    \    elseif length(lst) > 2 \n        smallest = lst[1]\n        smallest_index\
    \ = 2\n        for index in 2:length(lst)\n            if lst[index] < smallest\
    \ \n                smallest = lst[index]\n                smallest_index = index\n\
    \            end\n        end\n        return smallest\n    end\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't answer the question. OP wants to find\
    \ the 2nd smallest element in the list, not just the first one.\n<|/ c |>\n<|\
    \ c |>\nYes, I see that now. Thanks for pointing it out. I'll update my answer.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp84qv4nnu.jl:25\nin expression starting at\
    \ /tmp/tmp84qv4nnu.jl:25\n"
  stdout: ''
  timestamp: 1659748421
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else\n        smallest = lst[1]\n        for\
    \ i in 2:length(lst)\n            if lst[i] < smallest \n                smallest\
    \ = lst[i]\n            end\n        end\n        return smallest\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuuwt79i4.jl:9\nin expression starting at /tmp/tmpuuwt79i4.jl:9\n"
  stdout: ''
  timestamp: 1659748421
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        smallest = lst[1]\n       \
    \ for i in 2:length(lst) \n            if lst[i] < smallest \n               \
    \ smallest = lst[i]\n            end\n        end\n        return smallest\n \
    \   end\nend\n</cell>\n<code language=julia-1.3>\nnext_smallest([2,4,6,8,10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the index of the element\
    \ in the list that is closest to zero.\nIf there are multiple elements that are\
    \ equally close, return the first one.\nIf there are no elements that are equally\
    \ close, return None.\nFor example, if the list is [-1,0,1,2,3], the function\
    \ should return 1.\nIf the list is [-1,0,1,2,3], the function should return 3.\n\
    If the list is [-1,0,1,2,3], the function should return None.\nIf the list is\
    \ [-1,0,1,2,3], the function should return -1.\nIf the list is [-1,0,1,2,3], the\
    \ function should return 0.\nIf the list is [-1,0,1,2,3], the function should\
    \ return 2.\nIf the list is [-1,0,1,2,3], the function should return 4.\nIf the\
    \ list is [-1,0,1,2,3], the function should return 5.\nIf the list is [-1,0,1,2,3],\
    \ the function should return 6.\nIf the list is [-1,0,1,2,3], the function should\
    \ return 7.\nIf the list is [-1,0,1,2,3], the function should return 8.\nIf the\
    \ list is [-1,0,1,2,3], the function should return 9.\nIf the list is [-1,0,1,2,3],\
    \ the function should return 10.\nIf the list is [-1,0,1,2,3], the function should\
    \ return 11.\nIf the list is [-1,0,1,2,3], the function should return 12.\nIf\
    \ the list is [-1,0,1,2,3], the function should return 13.\nIf the list is [-1,0,1,2,3],\
    \ the function should return 14.\nIf the list is [-1,0,1,2,3], the function should\
    \ return 15.\nIf the list is [-1,0,1,2,3], the function should return 16.\nIf\
    \ the list is [-1,0,1,2,3], the function should return 17.\nIf the list is [-1,0,1,2,3],\
    \ the function should return 18.\nIf the list is [-1,0,1,2,3], the function should\
    \ return 19.\nIf the list is [-1,0,1,2,3], the function should return 20.\nIf\
    \ the list is [-1,0,1,2,3], the function should return 21.\nIf the list is [-1,0,1,2,3],\
    \ the function should return 22.\nIf the list is [-1,0,1,2,3], the function should\
    \ return 23.\nIf the list is [-1,0,1,2,3], the function should return 24.\nIf\
    \ the list is [-1,0,1,2,3], the function should return 25.\nIf the list is [-1,0,1,2,3],\
    \ the function should return 26.\nIf the list is [-1,0,\nusing Test\n\n@testset\
    \ begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\
    \t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa97wff1k.jl:9\nin expression starting at /tmp/tmpa97wff1k.jl:9\n"
  stdout: ''
  timestamp: 1659748421
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    elseif length(lst)\
    \ == 1 \n        return lst[1]\n    elseif lst[1] < lst[2] \n        return lst[1]\n\
    \    elseif lst[1] > lst[2] \n        return lst[2]\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpm78q74d6.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpm78q74d6.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm78q74d6.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm78q74d6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpm78q74d6.jl:23\n  Expression: candidate([5, 1, 4, 3, 2]) ==\
    \ 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm78q74d6.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm78q74d6.jl:21\ntest set: Error\
    \ During Test at /tmp/tmpm78q74d6.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == nothing\n  MethodError: Cannot `convert` an\
    \ object of type Type{Nothing} to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] convert(#unused#::Type{Union{Nothing, Int64}},\
    \ x::Type)\n     @ Base ./some.jl:36\n   [2] next_smallest(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpm78q74d6.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpm78q74d6.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpm78q74d6.j"
  timestamp: 1659748425
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        smallest = lst[1]\n       \
    \ for i = 2:length(lst) \n            if lst[i] < smallest \n                smallest\
    \ = lst[i]\n            end\n        end\n        return smallest\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9of4pmd1.jl:9\nin expression starting at /tmp/tmp9of4pmd1.jl:9\n"
  stdout: ''
  timestamp: 1659748421
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        smallest = lst[1]\n       \
    \ for el in lst[2:end]\n            if el < smallest \n                smallest\
    \ = el\n            end\n        end\n        return smallest\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3gp8zhhl.jl:9\nin expression starting at /tmp/tmp3gp8zhhl.jl:9\n"
  stdout: ''
  timestamp: 1659748421
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"The list is empty\") \n\
    \    else \n        smallest = lst[1]\n        for i in 2:length(lst) \n     \
    \       if lst[i] < smallest \n                smallest = lst[i] \n          \
    \  end\n        end\n        return smallest\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,4,5,6,8,10])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the index of the element in the list that is closest to zero. \nFor\
    \ example, if the list is [-1,0,1,2,3], the function should return 1.\nusing Test\n\
    \n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjlrobwiv.jl:19\nin expression starting at\
    \ /tmp/tmpjlrobwiv.jl:19\n"
  stdout: ''
  timestamp: 1659748422
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return nothing\n    elseif length(lst)\
    \ == 1 \n        return lst[1]\n    elseif length(lst) == 2 \n        return lst[1]\n\
    \    else\n        smallest = lst[1]\n        for e in lst[2:end]\n          \
    \  if e < smallest \n                smallest = e\n            end\n        end\n\
    \        return smallest\n    end\nend\n</code>\n<|/ a |>\n<| a tags=julia,list\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp23_llo5m.jl:23\nin expression starting at\
    \ /tmp/tmp23_llo5m.jl:23\n"
  stdout: ''
  timestamp: 1659748422
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"The list is empty\")\n\
    \    end\n    smallest = lst[1]\n    smallest_index = 2\n    for index in 2:length(lst)\n\
    \        if lst[index] < smallest \n            smallest = lst[index]\n      \
    \      smallest_index = index\n        end\n    end\n    return smallest\nend\n\
    </code>\n<|/ a tags=julia,list |>\n<| c |>\nThis doesn't work if you have a list\
    \ of negative numbers. For example, `next_smallest([-10, -5, -4, -3, -2, -1, 0,\
    \ 1, 2, 3, 4, 5])` returns `-5` instead of `0`.\n<|/ c |>\n<| c |>\nYes, you are\
    \ right. I will fix the answer.\n<|/ c |>\n<| a tags=julia,list |>\n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy4y37gze.jl:20\nin expression starting at\
    \ /tmp/tmpy4y37gze.jl:20\n"
  stdout: ''
  timestamp: 1659748421
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"The list is empty\")\n\
    \    elseif length(lst) == 1 \n        lst[1]\n    else\n        smallest = lst[1]\n\
    \        for elem in lst[2:end]\n            if elem < smallest \n           \
    \     smallest = elem\n            end\n        end\n        smallest\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpql_fbvpd.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpql_fbvpd.jl:26\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpql_fbvpd.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpql_fbvpd.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpql_fbvpd.jl:27\n  Expression: candidate([5, 1, 4, 3, 2]) ==\
    \ 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpql_fbvpd.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpql_fbvpd.jl:25\ntest set: Error\
    \ During Test at /tmp/tmpql_fbvpd.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == nothing\n  The list is empty\n  Stacktrace:\n\
    \   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] next_smallest(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpql_fbvpd.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpql_fbvpd.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpql_fbvpd.jl:25\ntest set:\
    \ Test Failed at /tmp/tmpql_fbvpd.jl:29\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpql_fbvpd.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpql_fbvpd.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpql_fbvpd.jl:30\n  "
  timestamp: 1659748424
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"The list is empty\") \n\
    \    else \n        smallest = lst[1]\n        for i in 2:length(lst) \n     \
    \       if lst[i] < smallest \n                smallest = lst[i] \n          \
    \  end\n        end\n        return smallest\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpilg31263.jl:19\nin expression starting at\
    \ /tmp/tmpilg31263.jl:19\n"
  stdout: ''
  timestamp: 1659748421
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    smallest = minimum(lst)\n    smallest_index = findfirst(x ->\
    \ x == smallest, lst)\n    if smallest_index == nothing\n        smallest_index\
    \ = 1\n    end\n    next_smallest = lst[smallest_index + 1]\n    return next_smallest\n\
    end\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpddi1ct7_.jl:15\nin expression starting at\
    \ /tmp/tmpddi1ct7_.jl:15\n"
  stdout: ''
  timestamp: 1659748422
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        return lst[findmin(lst)]\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw_b1sj7j.jl:9\nin expression starting at /tmp/tmpw_b1sj7j.jl:9\n"
  stdout: ''
  timestamp: 1659748422
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        return lst[findmin(lst)]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdutt6qth.jl:9\nin expression starting at /tmp/tmpdutt6qth.jl:9\n"
  stdout: ''
  timestamp: 1659748420
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"The list is empty\") \n\
    \    else \n        smallest = lst[1] \n        for i in 2:length(lst) \n    \
    \        if lst[i] < smallest \n                smallest = lst[i] \n         \
    \   end\n        end\n        return smallest\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyzqpgreg.jl:19\nin expression starting at\
    \ /tmp/tmpyzqpgreg.jl:19\n"
  stdout: ''
  timestamp: 1659748422
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"The list is empty\") \n\
    \    else \n        smallest = lst[1] \n        for i in 2:length(lst) \n    \
    \        if lst[i] < smallest \n                smallest = lst[i] \n         \
    \   end\n        end\n        return smallest\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ next_largest() that returns the 2nd largest element of the list.\nReturn None\
    \ if there is no such element.\nHint: Use a for loop to iterate over the list.\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8sosauxh.jl:19\nin expression starting at\
    \ /tmp/tmp8sosauxh.jl:19\n"
  stdout: ''
  timestamp: 1659748422
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    smallest = minimum(lst)\n    smallest_index = findfirst(x ->\
    \ x == smallest, lst)\n    if smallest_index == nothing\n        return nothing\n\
    \    else\n        return lst[smallest_index + 1]\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code\
    \ language=\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmi95upmx.jl:15\nin expression starting at\
    \ /tmp/tmpmi95upmx.jl:15\n"
  stdout: ''
  timestamp: 1659748423
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"The list is empty\") \n\
    \    else \n        smallest = lst[1] \n        for i in 2:length(lst) \n    \
    \        if lst[i] < smallest \n                smallest = lst[i] \n         \
    \   end \n        end \n        return smallest \n    end \nend \n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,4,5,6,7,8,9,10])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function next_largest() that returns the 2nd largest element of the\
    \ list.\nReturn None if there is no such element.\nHint: Use a for loop.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpantcpeee.jl:19\nin expression starting at\
    \ /tmp/tmpantcpeee.jl:19\n"
  stdout: ''
  timestamp: 1659748423
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        smallest = lst[1]\n       \
    \ for i in 2:length(lst) \n            if lst[i] < smallest \n               \
    \ smallest = lst[i]\n            end\n        end\n        return smallest\n \
    \   end\nend\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work if there are duplicates\
    \ in the list. For example, `next_smallest([1,2,2,3])` returns `2` instead of\
    \ `3`.\n<|/ c |>\n<| c |>\nYes, you are right. My bad. I will edit my answer.\n\
    <|/ c |>\n<| a |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8ixva3w4.jl:9\nin expression starting at /tmp/tmp8ixva3w4.jl:9\n"
  stdout: ''
  timestamp: 1659748423
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        smallest = lst[1]\n       \
    \ for i in 2:length(lst) \n            if lst[i] < smallest \n               \
    \ smallest = lst[i]\n            end\n        end\n        return smallest\n \
    \   end\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx3gc99_z.jl:9\nin expression starting at /tmp/tmpx3gc99_z.jl:9\n"
  stdout: ''
  timestamp: 1659748418
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else \n   \
    \     smallest = minimum(lst)\n        lst = filter(x -> x != smallest, lst)\n\
    \        smallest = minimum(lst)\n        return smallest\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_h4oo95v.jl:16\nin expression starting at\
    \ /tmp/tmp_h4oo95v.jl:16\n"
  stdout: ''
  timestamp: 1659748423
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    elseif length(lst)\
    \ == 1 \n        return lst[1]\n    else\n        smallest = lst[1]\n        for\
    \ i in 2:length(lst)\n            if lst[i] < smallest \n                smallest\
    \ = lst[i]\n            end\n        end\n        return smallest\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwa3l6636.jl:21\nin expression starting at\
    \ /tmp/tmpwa3l6636.jl:21\n"
  stdout: ''
  timestamp: 1659748417
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"The list is empty\") \n\
    \    else \n        smallest = lst[1]\n        for i in 2:length(lst) \n     \
    \       if lst[i] < smallest \n                smallest = lst[i] \n          \
    \  end\n        end\n        return smallest\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpilg31263.jl:19\nin expression starting at\
    \ /tmp/tmpilg31263.jl:19\n"
  stdout: ''
  timestamp: 1659748421
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        smallest = lst[1]\n       \
    \ for i in 2:length(lst) \n            if lst[i] < smallest \n               \
    \ smallest = lst[i]\n            end\n        end\n        return smallest\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,4,5,6])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm2vv92j6.jl:9\nin expression starting at /tmp/tmpm2vv92j6.jl:9\n"
  stdout: ''
  timestamp: 1659748423
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    elseif length(lst)\
    \ == 1 \n        return lst[1]\n    else\n        smallest = lst[1]\n        for\
    \ i = 2:length(lst)\n            if lst[i] < smallest \n                smallest\
    \ = lst[i]\n            end\n        end\n        return smallest\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5kf5q10i.jl:21\nin expression starting at\
    \ /tmp/tmp5kf5q10i.jl:21\n"
  stdout: ''
  timestamp: 1659748423
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"The list is empty\") \n\
    \    else \n        lst[end-1] \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxo7lwyo9.jl:13\nin expression starting at\
    \ /tmp/tmpxo7lwyo9.jl:13\n"
  stdout: ''
  timestamp: 1659748423
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    smallest = lst[1]\n    for i in 2:length(lst)\n        if lst[i]\
    \ < smallest\n            smallest = lst[i]\n        else\n            break\n\
    \        end\n    end\n    return smallest\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpuh170obt.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpuh170obt.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuh170obt.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuh170obt.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpuh170obt.jl:23\n  Expression: candidate([5, 1, 4, 3, 2]) ==\
    \ 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuh170obt.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuh170obt.jl:21\ntest set: Error\
    \ During Test at /tmp/tmpuh170obt.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == nothing\n  BoundsError: attempt to access 0-element\
    \ Vector{Int64} at index [1]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] next_smallest(lst::Vector{Int64})\n     @ Main /tmp/tmpuh170obt.jl:7\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpuh170obt.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpuh170obt.jl:21\ntest set:\
    \ Test Failed at /tmp/tmpuh170obt.jl:25\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuh170obt.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuh170obt.jl:21\nte"
  timestamp: 1659748426
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return nothing\n    end\n    smallest\
    \ = lst[1]\n    smallest_index = 2\n    for index in 2:length(lst)\n        if\
    \ lst[index] < smallest \n            smallest = lst[index]\n            smallest_index\
    \ = index\n        end\n    end\n    return smallest\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiymo5n0r.jl:20\nin expression starting at\
    \ /tmp/tmpiymo5n0r.jl:20\n"
  stdout: ''
  timestamp: 1659748423
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    smallest = lst[1]\n    for i in lst[2:end]\n        if i < smallest\n\
    \            smallest = i\n        end\n    end\n    smallest\nend\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the 2nd largest element of the list.\nReturn\
    \ None if there is no such element.\nHint: Use a for loop.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\
    \t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk24bbzge.jl:15\nin expression starting at\
    \ /tmp/tmpk24bbzge.jl:15\n"
  stdout: ''
  timestamp: 1659748423
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing \n    else \n  \
    \      smallest = lst[1] \n        for i in 2:length(lst) \n            if lst[i]\
    \ < smallest \n                smallest = lst[i] \n            end \n        end\
    \ \n        return smallest \n    end \nend \n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5])\
    \ == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvhin7lav.jl:19\nin expression starting at\
    \ /tmp/tmpvhin7lav.jl:19\n"
  stdout: ''
  timestamp: 1659748423
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else\n        smallest = lst[1]\n        for\
    \ i in 2:length(lst)\n            if lst[i] < smallest \n                smallest\
    \ = lst[i]\n            end\n        end\n        return smallest\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz79arqpb.jl:9\nin expression starting at /tmp/tmpz79arqpb.jl:9\n"
  stdout: ''
  timestamp: 1659748423
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    smallest = minimum(lst)\n    smallest_index = findfirst(x ->\
    \ x == smallest, lst)\n    if smallest_index == nothing\n        return nothing\n\
    \    else\n        return lst[smallest_index + 1]\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5h5qglrm.jl:15\nin expression starting at\
    \ /tmp/tmp5h5qglrm.jl:15\n"
  stdout: ''
  timestamp: 1659748423
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"The list has no elements\"\
    )\n    end\n    smallest = lst[1]\n    smallest_index = 2\n    for index in 2:length(lst)\n\
    \        if lst[index] < smallest \n            smallest = lst[index]\n      \
    \      smallest_index = index\n        end\n    end\n    return smallest_index\n\
    end\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph2r3eb7o.jl:20\nin expression starting at\
    \ /tmp/tmph2r3eb7o.jl:20\n"
  stdout: ''
  timestamp: 1659748423
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        Nothing\n    elseif length(lst)\
    \ == 1 \n        lst[1]\n    elseif length(lst) == 2 \n        lst[1]\n    elseif\
    \ length(lst) > 2 \n        lst[findmin(lst)]\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    next_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the index of the element in the list that is closest to 0.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjkmn76fq.jl:17\nin expression starting at\
    \ /tmp/tmpjkmn76fq.jl:17\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else\n        smallest = lst[1]\n        for\
    \ i in 2:length(lst)\n            if lst[i] < smallest \n                smallest\
    \ = lst[i]\n            end\n        end\n        return smallest\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcd4ua76a.jl:9\nin expression starting at /tmp/tmpcd4ua76a.jl:9\n"
  stdout: ''
  timestamp: 1659748417
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return nothing\n    elseif length(lst)\
    \ == 1 \n        return lst[1]\n    else\n        smallest = lst[1]\n        smallest_index\
    \ = 2\n        for index in 2:length(lst)\n            if lst[index] < smallest\
    \ \n                smallest = lst[index]\n                smallest_index = index\n\
    \            end\n        end\n        return smallest\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7uac_5te.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmp7uac_5te.jl:28\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7uac_5te.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7uac_5te.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp7uac_5te.jl:29\n  Expression: candidate([5, 1, 4, 3, 2]) ==\
    \ 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7uac_5te.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7uac_5te.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp7uac_5te.jl:31\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7uac_5te.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7uac_5te.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp7uac_5te.jl:32\n  Expression: candidate([1, 1, 1, 1, 0]) ==\
    \ 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7uac_5te.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7uac_5te.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp7uac_5te.jl:33\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 "
  timestamp: 1659748425
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"list is empty\") \n   \
    \ else \n        smallest = lst[1] \n        for i in 2:length(lst) \n       \
    \     if lst[i] < smallest \n                smallest = lst[i] \n            end\
    \ \n        end \n        return smallest \n    end \nend \n</cell>\n<code language=julia-1.0>\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_wzh850t.jl:19\nin expression starting at\
    \ /tmp/tmp_wzh850t.jl:19\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    elseif length(lst)\
    \ == 1 \n        return lst[1]\n    else\n        smallest = lst[1]\n        for\
    \ ele in lst[2:end]\n            if ele < smallest \n                smallest\
    \ = ele\n            end\n        end\n        return smallest\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpzb4aw981.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpzb4aw981.jl:26\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzb4aw981.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzb4aw981.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpzb4aw981.jl:27\n  Expression: candidate([5, 1, 4, 3, 2]) ==\
    \ 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzb4aw981.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzb4aw981.jl:25\ntest set: Error\
    \ During Test at /tmp/tmpzb4aw981.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == nothing\n  MethodError: Cannot `convert` an\
    \ object of type Type{Nothing} to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] convert(#unused#::Type{Union{Nothing, Int64}},\
    \ x::Type)\n     @ Base ./some.jl:36\n   [2] next_smallest(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpzb4aw981.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpzb4aw981.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpzb4aw981.j"
  timestamp: 1659748427
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"list is empty\") \n   \
    \ else \n        smallest = lst[1]\n        for i in 2:length(lst) \n        \
    \    if lst[i] < smallest \n                smallest = lst[i] \n            end\n\
    \        end\n        return smallest\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuz9s6pcl.jl:19\nin expression starting at\
    \ /tmp/tmpuz9s6pcl.jl:19\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        smallest = lst[1]\n       \
    \ for i in 2:length(lst) \n            if lst[i] < smallest \n               \
    \ smallest = lst[i]\n            end\n        end\n        return smallest\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq9hj8wrl.jl:9\nin expression starting at /tmp/tmpq9hj8wrl.jl:9\n"
  stdout: ''
  timestamp: 1659748418
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return nothing\n    else \n   \
    \     return lst[findfirst(x -> x < lst[end], lst[end-1:end])+1]\n    end\nend\n\
    </code>\n<|/ a tags=julia |>\n<| a tags=julia |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\
    \t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfzog_u9i.jl:13\nin expression starting at\
    \ /tmp/tmpfzog_u9i.jl:13\n"
  stdout: ''
  timestamp: 1659748425
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"The list is empty\") \n\
    \    else \n        lst[1]\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplia82jkd.jl:13\nin expression starting at\
    \ /tmp/tmplia82jkd.jl:13\n"
  stdout: ''
  timestamp: 1659748425
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"The list is empty\")\n\
    \    elseif length(lst) == 1 \n        return lst[1]\n    elseif length(lst) ==\
    \ 2 \n        return lst[1]\n    else\n        smallest = lst[1]\n        for\
    \ i in 2:length(lst)\n            if lst[i] < smallest \n                smallest\
    \ = lst[i]\n            end\n        end\n        return smallest\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxr2gsd2a.jl:23\nin expression starting at\
    \ /tmp/tmpxr2gsd2a.jl:23\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"List is empty\")\n    end\n\
    \    smallest = minimum(lst)\n    lst = filter(x -> x != smallest, lst)\n    if\
    \ length(lst) == 0 \n        error(\"List is empty\")\n    end\n    smallest =\
    \ minimum(lst)\n    return smallest\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr16lpvck.jl:18\nin expression starting at\
    \ /tmp/tmpr16lpvck.jl:18\n"
  stdout: ''
  timestamp: 1659748425
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        smallest = lst[1]\n       \
    \ lst = lst[2:end]\n        for elt in lst\n            if elt < smallest\n  \
    \              smallest = elt\n            end\n        end\n        return smallest\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,4,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,4,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,4,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,4,5,7,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,4,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,4,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,4,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,4,5,7,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,4,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,4,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,4,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,4,5,7,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,4,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,4,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,4,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,4,5,7,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,4,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,4,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,4,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,4,5,7,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,4,5,7,9])\n\
    </cell>\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpszuoy8tl.jl:9\nin expression starting at /tmp/tmpszuoy8tl.jl:9\n"
  stdout: ''
  timestamp: 1659748425
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        smallest = lst[1]\n       \
    \ for i in 2:length(lst) \n            if lst[i] < smallest \n               \
    \ smallest = lst[i]\n            end\n        end\n        return smallest\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq9hj8wrl.jl:9\nin expression starting at /tmp/tmpq9hj8wrl.jl:9\n"
  stdout: ''
  timestamp: 1659748418
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else\n        smallest = lst[1]\n        for\
    \ elt in lst[2:end]\n            if elt < smallest \n                smallest\
    \ = elt\n            end\n        end\n        return smallest\n    end\nend\n\
    </cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.3>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.3>\n\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptt3k84qt.jl:9\nin expression starting at /tmp/tmptt3k84qt.jl:9\n"
  stdout: ''
  timestamp: 1659748425
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return nothing\n    else \n   \
    \     smallest = lst[1]\n        for i in 2:length(lst) \n            if lst[i]\
    \ < smallest \n                smallest = lst[i]\n            end\n        end\n\
    \        return smallest\n    end\nend\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function next_largest() that returns the\
    \ 2nd largest element of the list.\nReturn None if there is no such element.\n\
    Hint: Use a for loop.\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9uuqqa7h.jl:19\nin expression starting at\
    \ /tmp/tmp9uuqqa7h.jl:19\n"
  stdout: ''
  timestamp: 1659748425
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"The list is empty\") \n\
    \    else \n        lst[1] \n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpo4_1qvjf.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpo4_1qvjf.jl:18\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo4_1qvjf.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo4_1qvjf.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpo4_1qvjf.jl:19\n  Expression: candidate([5, 1, 4, 3, 2]) ==\
    \ 2\n   Evaluated: 5 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo4_1qvjf.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo4_1qvjf.jl:17\ntest set: Error\
    \ During Test at /tmp/tmpo4_1qvjf.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == nothing\n  The list is empty\n  Stacktrace:\n\
    \   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] next_smallest(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpo4_1qvjf.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpo4_1qvjf.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpo4_1qvjf.jl:17\ntest set:\
    \ Test Failed at /tmp/tmpo4_1qvjf.jl:21\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo4_1qvjf.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo4_1qvjf.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpo4_1qvjf.jl:23\n  "
  timestamp: 1659748427
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else\n        smallest = lst[1]\n        for\
    \ i in 2:length(lst)\n            if lst[i] < smallest \n                smallest\
    \ = lst[i]\n            end\n        end\n        return smallest\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz79arqpb.jl:9\nin expression starting at /tmp/tmpz79arqpb.jl:9\n"
  stdout: ''
  timestamp: 1659748423
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else \n   \
    \     smallest = lst[1]\n        for i in 2:length(lst)\n            if lst[i]\
    \ < smallest \n                smallest = lst[i]\n            end\n        end\n\
    \        return smallest\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqf4y235r.jl:19\nin expression starting at\
    \ /tmp/tmpqf4y235r.jl:19\n"
  stdout: ''
  timestamp: 1659748420
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else\n        smallest = lst[1]\n        for\
    \ i in 2:length(lst)\n            if lst[i] < smallest \n                smallest\
    \ = lst[i]\n            end\n        end\n        return smallest\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcd4ua76a.jl:9\nin expression starting at /tmp/tmpcd4ua76a.jl:9\n"
  stdout: ''
  timestamp: 1659748417
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"The list is empty\") \n\
    \    else \n        smallest = lst[1] \n        for i in 2:length(lst) \n    \
    \        if lst[i] < smallest \n                smallest = lst[i] \n         \
    \   end\n        end\n        return smallest\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([2,3,5,7,11,13,17,19])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the index of the first element of the list that matches the given\
    \ predicate.\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvay5_p6i.jl:19\nin expression starting at\
    \ /tmp/tmpvay5_p6i.jl:19\n"
  stdout: ''
  timestamp: 1659748425
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"The list is empty\") \n\
    \    else \n        smallest = lst[1]\n        for i in 2:length(lst) \n     \
    \       if lst[i] < smallest \n                smallest = lst[i] \n          \
    \  end\n        end\n        return smallest\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    next_smallest([1,2,3,4,5])\n</cell>\n<code language=julia-1.3>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.3>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.3>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpywn24csx.jl:19\nin expression starting at\
    \ /tmp/tmpywn24csx.jl:19\n"
  stdout: ''
  timestamp: 1659748425
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        smallest = lst[1]\n       \
    \ for el in lst[2:end] \n            if el < smallest \n                smallest\
    \ = el \n            end\n        end\n        return smallest\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptww0lvh2.jl:9\nin expression starting at /tmp/tmptww0lvh2.jl:9\n"
  stdout: ''
  timestamp: 1659748425
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing \n    else \n  \
    \      smallest = lst[1] \n        for i in 2:length(lst) \n            if lst[i]\
    \ < smallest \n                smallest = lst[i] \n            end\n        end\n\
    \        return smallest \n    end\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\n\
    Thanks for your answer. I am not allowed to use any external packages.\n<|/ c\
    \ |>\n<| c |>\nI added a solution that does not use any external packages.\n<|/\
    \ c |>\n<| c |>\nThanks for your answer. I am not allowed to use any external\
    \ packages.\n<|/ c |>\n<| c |>\nI added a solution that does not use any external\
    \ packages.\n<|/ c |>\n<| c |>\nThanks for your answer. I am not allowed to use\
    \ any external packages.\n<|/ c |>\n<| a |>\nHere is a solution without using\
    \ any external packages:\n<code>\nusing Test\n\n@testset begin\n\ncandidate =\
    \ next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2uy5k2rw.jl:19\nin expression starting at\
    \ /tmp/tmp2uy5k2rw.jl:19\n"
  stdout: ''
  timestamp: 1659748425
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return nothing\n    else \n   \
    \     smallest = lst[1]\n        for i in 2:length(lst)\n            if lst[i]\
    \ < smallest \n                smallest = lst[i]\n            end\n        end\n\
    \        return smallest\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcn2k5kko.jl:19\nin expression starting at\
    \ /tmp/tmpcn2k5kko.jl:19\n"
  stdout: ''
  timestamp: 1659748425
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        smallest = lst[1]\n       \
    \ lst = lst[2:end]\n        for el in lst\n            if el < smallest \n   \
    \             smallest = el\n            end\n        end\n        return smallest\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp_3915jy.jl:9\nin expression starting at /tmp/tmpp_3915jy.jl:9\n"
  stdout: ''
  timestamp: 1659748425
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"The list is empty\")\n\
    \    end\n    smallest = lst[1]\n    smallest_index = 2\n    for index in 2:length(lst)\n\
    \        if lst[index] < smallest \n            smallest = lst[index]\n      \
    \      smallest_index = index\n        end\n    end\n    return smallest\nend\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4xxwpu0w.jl:20\nin expression starting at\
    \ /tmp/tmp4xxwpu0w.jl:20\n"
  stdout: ''
  timestamp: 1659748426
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"The list is empty\") \n\
    \    else \n        smallest = lst[1]\n        for i in 2:length(lst) \n     \
    \       if lst[i] < smallest \n                smallest = lst[i] \n          \
    \  end \n        end \n        return smallest \n    end \nend \n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([2,4,6,8,10,12,14,16,18,20])\n</cell>\n<text>\n\
    Exercise 5\nWrite a function that returns the index of the element in the list\
    \ that is closest to zero.\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdqtcvca8.jl:19\nin expression starting at\
    \ /tmp/tmpdqtcvca8.jl:19\n"
  stdout: ''
  timestamp: 1659748425
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"List is empty\") \n   \
    \ else \n        smallest = lst[1] \n        for i in 2:length(lst) \n       \
    \     if lst[i] < smallest \n                smallest = lst[i] \n            end\
    \ \n        end \n        return smallest \n    end \nend \nusing Test\n\n@testset\
    \ begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\
    \t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpjf3k4nqi.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpjf3k4nqi.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjf3k4nqi.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjf3k4nqi.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpjf3k4nqi.jl:25\n  Expression: candidate([5, 1, 4, 3, 2]) ==\
    \ 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjf3k4nqi.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjf3k4nqi.jl:23\ntest set: Error\
    \ During Test at /tmp/tmpjf3k4nqi.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == nothing\n  List is empty\n  Stacktrace:\n  \
    \ [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] next_smallest(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpjf3k4nqi.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpjf3k4nqi.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpjf3k4nqi.jl:23\ntest set:\
    \ Test Failed at /tmp/tmpjf3k4nqi.jl:27\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjf3k4nqi.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjf3k4nqi.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpjf3k4nqi.jl:28\n  Expr"
  timestamp: 1659748428
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing \n    else \n  \
    \      smallest = lst[1] \n        for i in 2:length(lst) \n            if lst[i]\
    \ < smallest \n                smallest = lst[i] \n            end \n        end\
    \ \n        return smallest \n    end \nend \nusing Test\n\n@testset begin\n\n\
    candidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp29lji0py.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp29lji0py.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp29lji0py.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp29lji0py.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp29lji0py.jl:25\n  Expression: candidate([5, 1, 4, 3, 2]) ==\
    \ 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp29lji0py.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp29lji0py.jl:23\ntest set: Error\
    \ During Test at /tmp/tmp29lji0py.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == nothing\n  MethodError: Cannot `convert` an\
    \ object of type Type{Nothing} to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] convert(#unused#::Type{Union{Nothing, Int64}},\
    \ x::Type)\n     @ Base ./some.jl:36\n   [2] next_smallest(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmp29lji0py.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp29lji0py.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp29lji0py.j"
  timestamp: 1659748420
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"List is empty\") \n   \
    \ else \n        lst[1] \n    end\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfml9bi82.jl:13\nin expression starting at\
    \ /tmp/tmpfml9bi82.jl:13\n"
  stdout: ''
  timestamp: 1659748426
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing \n    else \n  \
    \      smallest = lst[1] \n        for i in 2:length(lst) \n            if lst[i]\
    \ < smallest \n                smallest = lst[i] \n            end\n        end\n\
    \        return smallest \n    end\nend\n</code>\n<|/ a tags=julia |>\n<| a tags=julia\
    \ |>\nThe answer by is correct, but I wanted to point out that you can also use\
    \ sort! to sort a vector in-place:\n<code>\njulia> sort!([1,2,3])\n3-element Array{Int64,1}:\n\
    \ 1\n 2\n 3\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia |>\nThe answer by is\
    \ correct, but I wanted to point out that you can also use sort! to sort a vector\
    \ in-place:\n<code>\njulia> sort!([1,2,3])\n3-element Array{Int64,1}:\n 1\n 2\n\
    \ 3\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\
    \t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqitfsftw.jl:19\nin expression starting at\
    \ /tmp/tmpqitfsftw.jl:19\n"
  stdout: ''
  timestamp: 1659748426
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        return lst[findmin(lst)]\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsuhkn02y.jl:9\nin expression starting at /tmp/tmpsuhkn02y.jl:9\n"
  stdout: ''
  timestamp: 1659748426
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        smallest = lst[1]\n       \
    \ for i in 2:length(lst)\n            if lst[i] < smallest \n                smallest\
    \ = lst[i]\n            end\n        end\n        return smallest\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjkp0r32z.jl:9\nin expression starting at /tmp/tmpjkp0r32z.jl:9\n"
  stdout: ''
  timestamp: 1659748426
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else\n        smallest = lst[1]\n        for\
    \ i in 2:length(lst)\n            if lst[i] < smallest \n                smallest\
    \ = lst[i]\n            end\n        end\n        return smallest\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq2m0jtw3.jl:9\nin expression starting at /tmp/tmpq2m0jtw3.jl:9\n"
  stdout: ''
  timestamp: 1659748426
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        smallest = lst[1]\n       \
    \ for i in 2:length(lst)\n            if lst[i] < smallest \n                smallest\
    \ = lst[i]\n            end\n        end\n        return smallest\n    end\nend\n\
    </cell>\n<code language=julia-1.3>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the index of the element in\
    \ the list that is closest to x. Return -1 if there is no such element.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwgfm_mhd.jl:9\nin expression starting at /tmp/tmpwgfm_mhd.jl:9\n"
  stdout: ''
  timestamp: 1659748426
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        smallest = lst[1]\n       \
    \ for element in lst[2:end] \n            if element < smallest \n           \
    \     smallest = element \n            end\n        end\n        return smallest\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1mos78kp.jl:9\nin expression starting at /tmp/tmp1mos78kp.jl:9\n"
  stdout: ''
  timestamp: 1659748426
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"The list is empty\")\n\
    \    end\n    smallest = lst[1]\n    smallest_index = 2\n    for index in 2:length(lst)\n\
    \        if lst[index] < smallest \n            smallest = lst[index]\n      \
    \      smallest_index = index\n        end\n    end\n    return smallest\nend\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmm79depy.jl:20\nin expression starting at\
    \ /tmp/tmpmm79depy.jl:20\n"
  stdout: ''
  timestamp: 1659748426
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        smallest = lst[1]\n       \
    \ for i in 2:length(lst) \n            if lst[i] < smallest \n               \
    \ smallest = lst[i]\n            end\n        end\n        return smallest\n \
    \   end\nend\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\
    \t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplw9l59kb.jl:9\nin expression starting at /tmp/tmplw9l59kb.jl:9\n"
  stdout: ''
  timestamp: 1659748426
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    smallest = lst[1]\n    smallest_index = 2\n    for i in lst[2:end]\n\
    \        if i < smallest\n            smallest = i\n            smallest_index\
    \ = i\n        end\n    end\n    return smallest_index\nend\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the index of the first element of the list that is larger than\
    \ a given value.\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1_pya5pe.jl:17\nin expression starting at\
    \ /tmp/tmp1_pya5pe.jl:17\n"
  stdout: ''
  timestamp: 1659748426
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"The list is empty\") \n\
    \    else \n        smallest = lst[1]\n        for i in 2:length(lst)\n      \
    \      if lst[i] < smallest \n                smallest = lst[i]\n            end\n\
    \        end\n        return smallest\n    end\nend\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThis does not answer the question. He wants to find the second smallest\
    \ element of a vector, not the smallest element of a vector.\n<|/ c |>\n<| c |>\n\
    The question was edited after I posted my answer. My answer was based on the original\
    \ question. My answer was also based on the original question. My answer was based\
    \ on the original question. My answer was based on the original question. My answer\
    \ was based on the original question. My answer was based on the original question.\
    \ My answer was based on the original question. My answer was based on the original\
    \ question. My answer was based on the original question. My answer was based\
    \ on the original question. My answer was based on the original question. My answer\
    \ was based on the original question. My answer was based on the original question.\
    \ My answer was based on the original question. My answer was based on the original\
    \ question. My answer was based on the original question. My answer was based\
    \ on the original question. My answer was based on the original question. My answer\
    \ was based on the original question. My answer was based on the original question.\
    \ My answer was based on the original question. My answer was based on the original\
    \ question. My answer was based on the original question. My answer was based\
    \ on the original question. My answer was based on the original question. My answer\
    \ was based on the original question. My answer was based on the original question.\
    \ My answer was based on the original question. My answer was based on the original\
    \ question. My answer was based on the original question. My answer was based\
    \ on the original question. My answer was based on the original question. My answer\
    \ was based on the original question. My answer was based on the original question.\
    \ My answer was based on the original question. My answer was based on the original\
    \ question. My answer was based on the original question. My answer was based\
    \ on the original question. My answer was based on the original question. My answer\
    \ was based on the original question. My answer was based on the original question.\
    \ My answer was based on the original question. My answer was based on the original\
    \ question. My answer was based on the original question. My answer was based\
    \ on the original question. My answer was based on the original question. My answer\
    \ was based on the original question. My answer was based on the original question.\
    \ My answer was based on the original question. My answer was based on the original\
    \ question. My answer was based on the original question. My answer was based\
    \ on the original question. My answer was based on the original question. My answer\
    \ was based on the original question. My answer was based on the original question.\
    \ My answer was based on the original question. My answer was based on the original\
    \ question\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzd0_7vr2.jl:19\nin expression starting at\
    \ /tmp/tmpzd0_7vr2.jl:19\n"
  stdout: ''
  timestamp: 1659748426
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"The list is empty\") \n\
    \    else \n        lst[1]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3mdoq7rf.jl:13\nin expression starting at\
    \ /tmp/tmp3mdoq7rf.jl:13\n"
  stdout: ''
  timestamp: 1659748415
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else \n   \
    \     return lst[findmin(lst)]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyuqkaww8.jl:13\nin expression starting at\
    \ /tmp/tmpyuqkaww8.jl:13\n"
  stdout: ''
  timestamp: 1659748426
- exit_code: -1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        Nothing\n    else\n        lst[end-1]\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Test Failed at /tmp/tmpmph324r6.jl:18\n  Expression: candidate([1,
    2, 3, 4, 5]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n   @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n
    [2] macro expansion\n   @ /tmp/tmpmph324r6.jl:18 [inlined]\n [3] macro expansion\n   @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n
    [4] top-level scope\n   @ /tmp/tmpmph324r6.jl:17\ntest set: Test Failed at /tmp/tmpmph324r6.jl:19\n  Expression:
    candidate([5, 1, 4, 3, 2]) == 2\n   Evaluated: 3 == 2\nStacktrace:\n [1] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpmph324r6.jl:19 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpmph324r6.jl:17\ntest set: Error
    During Test at /tmp/tmpmph324r6.jl:20\n  Test threw exception\n  Expression: candidate(Vector{Int64}([]))
    == nothing\n  MethodError: Cannot `convert` an object of type Type{Nothing} to
    an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)
    where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    convert(#unused#::Type{Union{Nothing, Int64}}, x::Type)\n     @ Base ./some.jl:36\n   [2]
    next_smallest(lst::Vector{Int64})\n     @ Main /tmp/tmpmph324r6.jl:8\n   [3] macro
    expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpmph324r6.jl:20 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n  '
  timestamp: 1659748423
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"The list is empty\") \n\
    \    else \n        smallest = lst[1] \n        for i in 2:length(lst) \n    \
    \        if lst[i] < smallest \n                smallest = lst[i] \n         \
    \   end \n        end \n        return smallest \n    end \nend \nusing Test\n\
    \n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp86y2i6ju.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp86y2i6ju.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp86y2i6ju.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp86y2i6ju.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp86y2i6ju.jl:25\n  Expression: candidate([5, 1, 4, 3, 2]) ==\
    \ 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp86y2i6ju.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp86y2i6ju.jl:23\ntest set: Error\
    \ During Test at /tmp/tmp86y2i6ju.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == nothing\n  The list is empty\n  Stacktrace:\n\
    \   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] next_smallest(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmp86y2i6ju.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp86y2i6ju.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp86y2i6ju.jl:23\ntest set:\
    \ Test Failed at /tmp/tmp86y2i6ju.jl:27\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp86y2i6ju.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp86y2i6ju.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp86y2i6ju.jl:28\n  "
  timestamp: 1659748419
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else\n        smallest = lst[1]\n        for\
    \ el in lst[2:end]\n            if el < smallest \n                smallest =\
    \ el\n            end\n        end\n        return smallest\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp863t2_u9.jl:9\nin expression starting at /tmp/tmp863t2_u9.jl:9\n"
  stdout: ''
  timestamp: 1659748426
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else\n        smallest = lst[1]\n        for\
    \ i in 2:length(lst)\n            if lst[i] < smallest \n                smallest\
    \ = lst[i]\n            end\n        end\n        return smallest\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3,4,5])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp14a88qo1.jl:9\nin expression starting at /tmp/tmp14a88qo1.jl:9\n"
  stdout: ''
  timestamp: 1659748426
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"The list is empty\") \n\
    \    else \n        smallest = lst[1] \n        for i in 2:length(lst) \n    \
    \        if lst[i] < smallest \n                smallest = lst[i] \n         \
    \   end \n        end \n        return smallest \n    end \nend \n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the nth smallest element of a list.\n\
    If there are less than n elements in the list, return None.\nIf there are more\
    \ than n elements in the list, return the last element in the list.\nIf there\
    \ are less than n or more than n elements in the list, raise an error.\nHint:\
    \ Use a for loop.\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2z87jnap.jl:19\nin expression starting at\
    \ /tmp/tmp2z87jnap.jl:19\n"
  stdout: ''
  timestamp: 1659748427
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        smallest = lst[1]\n       \
    \ for i = 2:length(lst)\n            if lst[i] < smallest \n                smallest\
    \ = lst[i]\n            end\n        end\n        return smallest\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4ao0qkmt.jl:9\nin expression starting at /tmp/tmp4ao0qkmt.jl:9\n"
  stdout: ''
  timestamp: 1659748426
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"The list cannot be empty\"\
    )\n    end\n    smallest = lst[1]\n    smallest_index = 2\n    for index in 2:length(lst)\n\
    \        if lst[index] < smallest \n            smallest = lst[index]\n      \
    \      smallest_index = index\n        end\n    end\n    return smallest\nend\n\
    </code>\n<|/ a tags=julia,list |>\n<| a dscore=2 |>\nThe most efficient way is\
    \ to use sortperm:\n<code>\njulia> sortperm([1,2,3])\n3-element Array{Int64,1}:\n\
    \ 3\n 1\n 2\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8z_5835p.jl:20\nin expression starting at\
    \ /tmp/tmp8z_5835p.jl:20\n"
  stdout: ''
  timestamp: 1659748427
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    elseif length(lst)\
    \ == 1 \n        return lst[1]\n    else\n        smallest = lst[1]\n        for\
    \ i in 2:length(lst)\n            if lst[i] < smallest \n                smallest\
    \ = lst[i]\n            end\n        end\n        return smallest\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwa3l6636.jl:21\nin expression starting at\
    \ /tmp/tmpwa3l6636.jl:21\n"
  stdout: ''
  timestamp: 1659748417
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"The list is empty\")\n\
    \    end\n    smallest = lst[1]\n    smallest_index = 2\n    for index in 2:length(lst)\n\
    \        if lst[index] < smallest \n            smallest = lst[index]\n      \
    \      smallest_index = index\n        end\n    end\n    return smallest_index\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpdsup9zsz.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmpdsup9zsz.jl:27\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == nothing\n  The list is empty\n\
    \  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] next_smallest(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpdsup9zsz.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdsup9zsz.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdsup9zsz.jl:24\ntest set:\
    \ Test Failed at /tmp/tmpdsup9zsz.jl:28\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 2 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdsup9zsz.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdsup9zsz.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpdsup9zsz.jl:29\n  Expression: candidate([1, 1, 1, 1, 0]) ==\
    \ 1\n   Evaluated: 5 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdsup9zsz.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdsup9zsz.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpdsup9zsz.jl:30\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 2 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdsup9zsz.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdsup9zsz.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpdsup9zsz.jl:31"
  timestamp: 1659748429
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else\n        smallest = lst[1]\n        for\
    \ i in 2:length(lst)\n            if lst[i] < smallest \n                smallest\
    \ = lst[i]\n            end\n        end\n        return smallest\n    end\nend\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=julia,list |>\nThe shortest solution I could\
    \ come up with is this:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphk_5anv8.jl:9\nin expression starting at /tmp/tmphk_5anv8.jl:9\n"
  stdout: ''
  timestamp: 1659748427
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        smallest = lst[1]\n       \
    \ for i in 2:length(lst) \n            if lst[i] < smallest \n               \
    \ smallest = lst[i]\n            end\n        end\n        return smallest\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzs4_w6rr.jl:9\nin expression starting at /tmp/tmpzs4_w6rr.jl:9\n"
  stdout: ''
  timestamp: 1659748427
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    elseif length(lst)\
    \ == 1 \n        return lst[1]\n    else\n        smallest = lst[1]\n        smallest_index\
    \ = 2\n        for i = 2:length(lst)\n            if lst[i] < smallest \n    \
    \            smallest = lst[i]\n                smallest_index = i\n         \
    \   end\n        end\n        return smallest\n    end\nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=julia,sorting |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpca1jip5s.jl:23\nin expression starting at\
    \ /tmp/tmpca1jip5s.jl:23\n"
  stdout: ''
  timestamp: 1659748427
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else\n        smallest = lst[1]\n        smallest_index\
    \ = 2\n        for i = 2:length(lst)\n            if lst[i] < smallest \n    \
    \            smallest = lst[i]\n                smallest_index = i\n         \
    \   end\n        end\n        return smallest\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,3,5,7,9])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of elements in a list that satisfy a given predicate.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl03pg2if.jl:9\nin expression starting at /tmp/tmpl03pg2if.jl:9\n"
  stdout: ''
  timestamp: 1659748427
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    elseif length(lst)\
    \ == 1 \n        return lst[1]\n    else\n        smallest = lst[1]\n        for\
    \ element in lst[2:end]\n            if element < smallest \n                smallest\
    \ = element\n            end\n        end\n        return smallest\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwswmv8oj.jl:21\nin expression starting at\
    \ /tmp/tmpwswmv8oj.jl:21\n"
  stdout: ''
  timestamp: 1659748428
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"The list is empty\") \n\
    \    else \n        smallest = lst[1] \n        for i in 2:length(lst) \n    \
    \        if lst[i] < smallest \n                smallest = lst[i] \n         \
    \   end\n        end\n        return smallest\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdkpwfmq5.jl:19\nin expression starting at\
    \ /tmp/tmpdkpwfmq5.jl:19\n"
  stdout: ''
  timestamp: 1659748428
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"The list is empty\") \n\
    \    else \n        lst[end-1] \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxo7lwyo9.jl:13\nin expression starting at\
    \ /tmp/tmpxo7lwyo9.jl:13\n"
  stdout: ''
  timestamp: 1659748423
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"The list cannot be empty\"\
    )\n    end\n    smallest = lst[1]\n    smallest_index = 2\n    for i in 2:length(lst)\n\
    \        if lst[i] < smallest \n            smallest = lst[i]\n            smallest_index\
    \ = i\n        end\n    end\n    return smallest_index\nend\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1gi1l02l.jl:20\nin expression starting at\
    \ /tmp/tmp1gi1l02l.jl:20\n"
  stdout: ''
  timestamp: 1659748428
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"The list is empty\") \n\
    \    else \n        smallest = lst[1]\n        for i in 2:length(lst) \n     \
    \       if lst[i] < smallest \n                smallest = lst[i] \n          \
    \  end\n        end\n        return smallest\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4tuqsnik.jl:19\nin expression starting at\
    \ /tmp/tmp4tuqsnik.jl:19\n"
  stdout: ''
  timestamp: 1659748428
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else\n        smallest = lst[1]\n        smallest_index\
    \ = 2\n        for i in 2:length(lst)\n            if lst[i] < smallest \n   \
    \             smallest = lst[i]\n                smallest_index = i\n        \
    \    end\n        end\n        return smallest\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfpku8j6c.jl:9\nin expression starting at /tmp/tmpfpku8j6c.jl:9\n"
  stdout: ''
  timestamp: 1659748428
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        smallest = lst[1]\n       \
    \ for i in 2:length(lst) \n            if lst[i] < smallest \n               \
    \ smallest = lst[i]\n            end\n        end\n        return smallest\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq9hj8wrl.jl:9\nin expression starting at /tmp/tmpq9hj8wrl.jl:9\n"
  stdout: ''
  timestamp: 1659748418
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"The list cannot be empty\"\
    )\n    end\n    smallest = lst[1]\n    smallest_index = 2\n    for index in 2:length(lst)\n\
    \        if lst[index] < smallest \n            smallest = lst[index]\n      \
    \      smallest_index = index\n        end\n    end\n    return smallest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0ufr8s1p.jl:20\nin expression starting at\
    \ /tmp/tmp0ufr8s1p.jl:20\n"
  stdout: ''
  timestamp: 1659748420
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        smallest = lst[1]\n       \
    \ for i in 2:length(lst)\n            if lst[i] < smallest \n                smallest\
    \ = lst[i]\n            end\n        end\n        return smallest\n    end\nend\n\
    </cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpizqp9scf.jl:9\nin expression starting at /tmp/tmpizqp9scf.jl:9\n"
  stdout: ''
  timestamp: 1659748418
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    smallest = minimum(lst)\n    smallest_index = findfirst(x ->\
    \ x < smallest, lst)\n    if smallest_index == nothing\n        smallest_index\
    \ = 1\n    end\n    smallest_index += 1\n    if smallest_index > length(lst)\n\
    \        smallest_index = 1\n    end\n    return lst[smallest_index]\nend\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3,4,5,6])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3,4,5,6,7,8,9,10,11])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3,4,5,6,7,8,9,10,11,12])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1,2,3,4,5,6,7,8,9,10,\nusing\
    \ Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf2u7o182.jl:18\nin expression starting at\
    \ /tmp/tmpf2u7o182.jl:18\n"
  stdout: ''
  timestamp: 1659748428
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        smallest = lst[1]\n       \
    \ for i in 2:length(lst) \n            if lst[i] < smallest \n               \
    \ smallest = lst[i]\n            end\n        end\n        return smallest\n \
    \   end\nend\n</cell>\n<code language=julia-1.3>\nnext_smallest([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the index of the element\
    \ in the list that is closest to x. \nIf there are multiple elements that are\
    \ equally close, return the first one.\nIf there are no elements that are equally\
    \ close, return -1.\nIf x is greater than all the elements in the list, return\
    \ -1.\nIf x is less than all the elements in the list, return -1.\nIf x is equal\
    \ to the element in the list, return 0.\nIf x is greater than or equal to all\
    \ the elements in the list, return -1.\nIf x is less than or equal to all the\
    \ elements in the list, return -1.\nIf x is equal to all the elements in the list,\
    \ return 0.\nIf x is greater than all the elements in the list, return -1.\nIf\
    \ x is less than all the elements in the list, return -1.\nIf x is equal to all\
    \ the elements in the list, return 0.\nIf x is greater than all the elements in\
    \ the list, return -1.\nIf x is less than all the elements in the list, return\
    \ -1.\nIf x is equal to all the elements in the list, return 0.\nIf x is greater\
    \ than all the elements in the list, return -1.\nIf x is less than all the elements\
    \ in the list, return -1.\nIf x is equal to all the elements in the list, return\
    \ 0.\nIf x is greater than all the elements in the list, return -1.\nIf x is less\
    \ than all the elements in the list, return -1.\nIf x is equal to all the elements\
    \ in the list, return 0.\nIf x is greater than all the elements in the list, return\
    \ -1.\nIf x is less than all the elements in the list, return -1.\nIf x is equal\
    \ to all the elements in the list, return 0.\nIf x is greater than all the elements\
    \ in the list, return -1.\nIf x is less than all the elements in the list, return\
    \ -1.\nIf x is equal to all the elements in the list, return 0.\nIf x is greater\
    \ than all the elements in the list, return -1.\nIf x is less than all the elements\
    \ in the list, return -1.\nIf x is equal to all the elements in the list, return\
    \ 0.\nIf x is greater than all the elements in the list, return -1.\nIf x is less\
    \ than all the elements in the list, return -1.\nIf x is equal to all the elements\
    \ in the list, return 0.\nIf x is greater than all the elements in the list, return\
    \ -1.\nIf x is less than all the elements in the list, return -1.\nIf x is equal\
    \ to all the elements in the list, return 0.\nIf x is greater than all the elements\
    \ in the list, return -1.\nIf x \nusing Test\n\n@testset begin\n\ncandidate =\
    \ next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn_m8_gm3.jl:9\nin expression starting at /tmp/tmpn_m8_gm3.jl:9\n"
  stdout: ''
  timestamp: 1659748428
- exit_code: 1
  program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n                    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"The list is empty\") \n\
    \    else \n        lst[1]\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpes2xhtnv.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpes2xhtnv.jl:18\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpes2xhtnv.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpes2xhtnv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpes2xhtnv.jl:19\n  Expression: candidate([5, 1, 4, 3, 2]) ==\
    \ 2\n   Evaluated: 5 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpes2xhtnv.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpes2xhtnv.jl:17\ntest set: Error\
    \ During Test at /tmp/tmpes2xhtnv.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == nothing\n  The list is empty\n  Stacktrace:\n\
    \   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] next_smallest(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpes2xhtnv.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpes2xhtnv.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpes2xhtnv.jl:17\ntest set:\
    \ Test Failed at /tmp/tmpes2xhtnv.jl:21\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpes2xhtnv.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpes2xhtnv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpes2xhtnv.jl:23\n  "
  timestamp: 1659748430
