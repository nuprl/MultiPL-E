name: HumanEval_75_is_multiply_prime
language: jl
prompt: "\"\"\"Write a function that returns true if the given number is the multiplication\
  \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
  \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
  \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
  \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t\
  @test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
  \ == false)\n\t@test(candidate(1001) == true)\nend\n"
completions: ["    if a < 100\n        true\n    else\n        false\n    end\nend",
  "    if a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31)\
    \ == false\n</cell>\n<text>\nExercise 3\nWrite a function that returns true if\
    \ the given number is a perfect square, false otherwise.\n    \n    Example:\n\
    \        16 is a perfect square\n    \"\"\"", "    \n    prime_numbers = primes(100)\n\
    \    \n    prime_numbers_set = Set(prime_numbers)\n    \n    if prime_numbers_set[a]\
    \ == true\n        \n        prime_numbers_set[a] == false\n        \n       \
    \ for b in prime_numbers_set\n            if a % b == 0 \n                prime_numbers_set[a]\
    \ == false\n            end\n        end\n    end\n    \n    return prime_numbers_set[a]\
    \ == true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(300)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(400)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(500)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(600)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(700)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(800)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(900)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1200)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1300)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1400)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1500)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1600)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1700)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1800)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1900)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2200)\n</cell>\n<code language=julia-1.5>",
  "    \n    prime_numbers = prime_numbers(a)\n    \n    for p in prime_numbers\n\
    \        if p*p > a\n            return false\n        end\n    end\n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\n    \n    Example:\n        30 is a\
    \ prime number\n    \"\"\"", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    if a < 100\n        true\n\
    \    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ is_multiply_prime(30) == true\n@assert is_multiply_prime(31) == false\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns true if the given number is\
    \ a prime number and false otherwise.\n    \n    Example:\n        30 is a prime\
    \ number\n    \"\"\"", "    \n    primes = primes_list(100)\n    \n    for i in\
    \ primes\n        if a % i == 0\n            return false\n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-", "    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    if a < 100\n        true\n    else\n        false\n    end\nend", " \
    \   \n    prime_numbers = primes(a)\n    \n    for prime in prime_numbers\n  \
    \      if prime == 3 || prime == 5 || prime == 7 || prime == 11\n            return\
    \ false\n        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\nKnowing that (a) is less then 100. \n\
    Example: \n    30 = 2 * 3 * 5\n    30 = 2 * 3 * 7\n    30 = 2 * 3 * 11\n    30\
    \ = 2 * 5 * 7\n    30 = 2 * 7 * 11\n    30 = 2 * 11 * 7\n    30 = 2 * 11 * 11\n\
    \    30 = 2 * 7 * 11\n    30 = 2 * 11 * 7\n    30 = 2 * 11 * 11\n    30 = 2 *\
    \ 11 * 11\n    30 = 2 * 11 * 11\n    30 = 2 * 11 * 11\n    30 = 2 * 11 * 11\n\
    \    30 = 2 * 11 * 11\n    30 = 2 * 11 * 11\n    30 = 2 * 11 * 11\n    30 = 2\
    \ * 11 * 11\n    30 = 2 * 11 * 11\n    30 = 2 * 11 * 11\n    30 = 2 * 11 * 11\n\
    \    30 = 2 * 11 * 11\n    30 = 2 * 11 * 11\n    30 = 2 * 11 * 11\n    30 = 2\
    \ * 11 * 11\n    30 = 2 * 11 * 11\n    30 = 2 * 11 * 11\n    30 = 2 * 11 * 11\n\
    \    30 = 2 * 11 * 11\n    30 = 2 * 11 * 11\n    30 = 2 * 11 * 11\n    30 = 2\
    \ * 11 * 11\n    30 = 2 * 11 * 11\n    30 = 2 * 11 * 11\n    30 = 2 * 11 * 11\n\
    \    30 = 2 * 11 * 11\n    30 = 2 * 11 * 11\n    30 = 2 * 11 * 11\n    30 = 2\
    \ * 11 * 11\n    30 = 2 * 11 * 11\n    30 = 2 * 11 * 11\n    30 = 2 * 11 * 11\n\
    \    30 = 2 * 11 * 11\n    30 = 2 * 11 * 11\n    30 = 2 * 11 * 11\n    30 = 2\
    \ * 11 * 11\n    30 = 2 * 11 * 11\n    30 = 2 * 11 * 11\n    30 = 2 * 11 * ",
  "    \n    prime_numbers = prime_numbers(a)\n    \n    for p in prime_numbers\n\
    \        if p*p > a\n            return false\n        end\n    end\n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(200)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(300)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(400)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(500)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(600)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(700)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(800)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(900)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1300)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1400)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1500)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1600)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1700)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1800)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1900)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2200)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2300)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2400)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2500)\n</cell>\n<code language=julia-1.5>\n\
    is_", "    \n    primes = prime_numbers(100)\n    \n    prime_numbers_set = Set(primes)\n\
    \    \n    prime_numbers_set.add(a)\n    \n    prime_numbers_set = Set(prime_numbers_set)\n\
    \    \n    prime_numbers_set = Set(prime_numbers_set - a)\n    \n    prime_numbers_set\
    \ = Set(prime_numbers_set - a)\n    \n    prime_numbers_set = Set(prime_numbers_set\
    \ - a)\n    \n    prime_numbers_set = Set(prime_numbers_set - a)\n    \n    prime_numbers_set\
    \ = Set(prime_numbers_set - a)\n    \n    prime_numbers_set = Set(prime_numbers_set\
    \ - a)\n    \n    prime_numbers_set = Set(prime_numbers_set - a)\n    \n    prime_numbers_set\
    \ = Set(prime_numbers_set - a)\n    \n    prime_numbers_set = Set(prime_numbers_set\
    \ - a)\n    \n    prime_numbers_set = Set(prime_numbers_set - a)\n    \n    prime_numbers_set\
    \ = Set(prime_numbers_set - a)\n    \n    prime_numbers_set = Set(prime_numbers_set\
    \ - a)\n    \n    prime_numbers_set = Set(prime_numbers_set - a)\n    \n    prime_numbers_set\
    \ = Set(prime_numbers_set - a)\n    \n    prime_numbers_set = Set(prime_numbers_set\
    \ - a)\n    \n    prime_numbers_set = Set(prime_numbers_set - a)\n    \n    prime_numbers_set\
    \ = Set(prime_numbers_set - a)\n    \n    prime_numbers_set = Set(prime_numbers_set\
    \ - a)\n    \n    prime_numbers_set = Set(prime_numbers_set - a)\n    \n    prime_numbers_set\
    \ = Set(prime_numbers_set - a)\n    \n    prime_numbers_set = Set(prime_numbers_set\
    \ - a)\n    \n    prime_numbers_set = Set(prime_numbers_set - a)\n    \n    prime_numbers_set\
    \ = Set(prime_numbers_set - a)\n    \n    prime_numbers_set = Set(prime_numbers_set\
    \ - a)\n    \n    prime_numbers_set = Set(prime_numbers_set - a)\n    \n    prime_numbers_set\
    \ = Set(prime_numbers_set - a)\n    \n    prime_numbers_set = Set(prime_numbers_set\
    \ - a)\n    \n    prime", "    \n    if a < 100\n        return false\n    \n\
    \    prime_numbers = primes(a)\n    \n    for p in prime_numbers\n        if p*p\
    \ > a\n            return false\n    \n    return true\nend", "    if a < 100\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_multiply_prime(30) == true\n@assert is_multiply_prime(40) == false\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a perfect square, false otherwise.\n    \n    Example:\n        25 is a perfect\
    \ square\n        25 is not a perfect square\n    \"\"\"", "    \n    prime_numbers\
    \ = primes(a)\n    \n    for n in prime_numbers\n        if n % 3 == 0\n     \
    \       return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(200)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(300)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(400)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(500)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(600)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(700)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(800)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(900)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1200)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1500)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1800)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2400)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2500)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2700)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(3000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(3500)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(4000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(4500)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(5000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(5500)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(6000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(6500)\n", "    \n    if\
    \ a < 100\n        return false\n    \n    primes = primes(a)\n    \n    for prime\
    \ in primes\n        if a % prime == 0\n            return false\n    \n    return\
    \ true\nend", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    prime_numbers = primes(a)\n    \n    for num in prime_numbers\n    \
    \    if num == a \n            return true\n        else \n            return\
    \ false\nend", "    \n    prime_numbers = prime_numbers(a)\n    \n    for i in\
    \ prime_numbers\n        if a % i == 0\n            return false\n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns true if the given number is\
    \ a perfect square, false otherwise.\n    \n    Example:\n        25 is a perfect\
    \ square\n    \"\"\"", "    \n    primes = prime_numbers(a)\n    \n    for p in\
    \ primes\n        if p*p > a\n            return false\n        end\n    end\n\
    \    return true\nend", "    \n    prime_numbers = primes(a)\n    \n    for p\
    \ in prime_numbers\n        if p*p > a\n            return false\n        end\n\
    \    end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if the given number is a prime number and false otherwise.\n    \n    Example:\n\
    \        30 is a prime number\n    \"\"\"", "    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    prime_numbers_set = Set(prime_numbers)\n    \n    if prime_numbers_set.issubset([a])\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns true if the given number is a prime number and false otherwise.\n  \
    \  \n    \n    Example:\n        30 is a prime number\n    \"\"\"", "    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    if a < 100\n  \
    \      return false\n    \n    prime_numbers = primes(a)\n    \n    for p in prime_numbers\n\
    \        if a % p == 0\n            return false\n    \n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(100000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime", "    \n    if a < 100\n\
    \        return false\n    \n    prime_numbers = primes(a)\n    \n    for num\
    \ in prime_numbers\n        if a % num == 0\n            return false\n    \n\
    \    return true\nend", "    \n    prime_numbers = primes(a)\n    \n    for p\
    \ in prime_numbers\n        if p*p > a\n            return false\n        end\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns true if the given number is a power\
    \ of 3 prime and false otherwise.\n    Example:\n        9 = 3^2 * 3^1\n    \"\
    \"\"", "    \n    prime_numbers = primes(a)\n    \n    for i in prime_numbers\n\
    \        if a % i == 0\n            return false\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(100)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns true if the given number is a prime number or false otherwise.\n   \
    \ \n    (a) Knowing that (a) is less then 100.\n    (b) Knowing that (a) is divisible\
    \ by 2.\n    (c) Knowing that (a) is divisible by 3.\n    (d) Knowing that (a)\
    \ is divisible by 5.\n    (e) Knowing that (a) is divisible by 7.\n    (f) Knowing\
    \ that (a) is divisible by 11.\n    (g) Knowing that (a) is divisible by 13.\n\
    \    (h) Knowing that (a) is divisible by 17.\n    (i) Knowing that (a) is divisible\
    \ by 19.\n    (j) Knowing that (a) is divisible by 23.\n    (k) Knowing that (a)\
    \ is divisible by 29.\n    (l) Knowing that (a) is divisible by 31.\n    (m) Knowing\
    \ that (a) is divisible by 35.\n    (n) Knowing that (a) is divisible by 43.\n\
    \    (o) Knowing that (a) is divisible by 51.\n    (p) Knowing that (a) is divisible\
    \ by 59.\n    (x) Knowing that (a) is divisible by 67.\n    (y) Knowing that (a)\
    \ is divisible by 73.\n    (z) Knowing that (a) is divisible by 79.\n    \n  \
    \  Example:\n        30 = 2 * 3 * 5\n    \"\"\"", "    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    if a < 100\n        true\n    else\n  \
    \      false\n    end\nend\n</cell>\n<code language=julia-1.3>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.3>\n@time is_multiply_prime(100)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns true if the given number is a prime\
    \ number and false otherwise.\n    \n    Example:\n        30 is prime\n    \"\
    \"\"", "    \n    prime_numbers = primes(100)\n    \n    for i in prime_numbers\n\
    \        if a % i == 0\n            return false\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns true if the given number is the multiplication of\
    \ 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    primes = primes_list(100)\n\
    \    \n    prime_numbers = primes[a]\n    \n    for prime in prime_numbers\n \
    \       if prime == a\n            return false\n        end\n    end\n    \n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(1000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>", "    \n    prime_numbers = primes(100)\n    \n   \
    \ for p in prime_numbers\n        if p == a\n            return true\n       \
    \ end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(1000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000000000000)\n</cell>\n",
  "    \n    primes = primes_list(100)\n    \n    prime_numbers = primes[a]\n    \n\
    \    for prime in prime_numbers\n        if prime == a\n            return false\n\
    \        end\n    end\n    \n    for prime in prime_numbers\n        if prime\
    \ == a\n            return true\n        end\n    end\n    \n    return false\n\
    end\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n", "    \n    if a < 100\n        return\
    \ true\n    \n    primes = primes_list(100)\n    \n    for p in primes\n     \
    \   if p*p > a\n            return false\n    \n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    prime_numbers = primes(100)\n    \n    for i\
    \ in prime_numbers\n        if a % i == 0\n            return false\n    end\n\
    \    return true\nend", "    if a < 100\n        true\n    else\n        false\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(200)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(300)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(400)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(500)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(600)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(700)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(800)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(900)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1300)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1400)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1500)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1600)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1700)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1800)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1900)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2300)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2400)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2500)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2600)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2700)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2800",
  "    \n    if a < 100\n        true\n    else\n        false\n    end\nend", " \
    \   if a < 100\n        false\n    else\n        true\n    end\nend\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"", "    if a < 100\n        true\n    else\n        false\n\
    \    end\nend\n</cell>\n<code language=julia-1.1>\nis_multiply_prime(30)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns true if the given number is\
    \ a prime number and false otherwise.\n    \n    Example:\n        30 is a prime\
    \ number\n    \"\"\"", "    if a < 100\n        true\n    else\n        false\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert is_multiply_prime(30)\
    \ == true\n@assert is_multiply_prime(31) == false\n@assert is_multiply_prime(32)\
    \ == false\n@assert is_multiply_prime(33) == false\n@assert is_multiply_prime(34)\
    \ == false\n@assert is_multiply_prime(35) == false\n@assert is_multiply_prime(36)\
    \ == false\n@assert is_multiply_prime(37) == false\n@assert is_multiply_prime(38)\
    \ == false\n@assert is_multiply_prime(39) == false\n@assert is_multiply_prime(40)\
    \ == false\n@assert is_multiply_prime(41) == false\n@assert is_multiply_prime(42)\
    \ == false\n@assert is_multiply_prime(43) == false\n@assert is_multiply_prime(44)\
    \ == false\n@assert is_multiply_prime(45) == false\n@assert is_multiply_prime(46)\
    \ == false\n@assert is_multiply_prime(47) == false\n@assert is_multiply_prime(48)\
    \ == false\n@assert is_multiply_prime(49) == false\n@assert is_multiply_prime(50)\
    \ == false\n@assert is_multiply_prime(51) == false\n@assert is_multiply_prime(52)\
    \ == false\n@assert is_multiply_prime(53) == false\n@assert is_multiply_prime(54)\
    \ == false\n@assert is_multiply_prime(55) == false\n@assert is_multiply_prime(56)\
    \ == false\n@assert is_multiply_prime(57) == false\n@assert is_multiply_prime(58)\
    \ == false\n@assert is_multiply_prime(59) == false\n@assert is_multiply_prime(60)\
    \ == false\n@assert is_multiply_prime(61) == false\n@assert is_multiply_prime(62)\
    \ == false\n@assert is_multiply_prime(63) == false\n@assert is_multiply_prime(64)\
    \ == false\n@assert is_multiply_prime(65) == false\n@assert is_multiply_prime(66)\
    \ == false\n@assert is_multiply_prime(67) == false\n@assert is_multiply_prime(68)\
    \ == false\n@assert is_multiply_prime(69) == false\n@assert is_multiply_prime(70)\
    \ == false\n@assert is_multiply_prime(71) == false\n@assert is_multiply_prime(72)\
    \ == false\n@assert is_multiply_prime(73) == false\n@", "    \n    prime_numbers\
    \ = primes(a)\n    \n    for p in prime_numbers\n        if p*p > a\n        \
    \    return false\n        end\n    end\n    return true\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns true if the given number is a perfect square,\
    \ false otherwise.\n    \n    Example:\n        16 is a perfect square\n    \"\
    \"\"", "    if a < 100\n        true\n    else\n        false\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>", "    if a < 100\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.0>\n@code_warntype\
    \ is_multiply_prime(100)\n</cell>\n<code language=julia-1.0>\n@code_warntype is_multiply_prime(200)\n\
    </cell>\n<code language=julia-1.0>\n@code_warntype is_multiply_prime(300)\n</cell>\n\
    <code language=julia-1.0>\n@code_warntype is_multiply_prime(400)\n</cell>\n<code\
    \ language=julia-1.0>\n@code_warntype is_multiply_prime(500)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype is_multiply_prime(600)\n</cell>\n<code language=julia-1.0>\n@code_warntype\
    \ is_multiply_prime(700)\n</cell>\n<code language=julia-1.0>\n@code_warntype is_multiply_prime(800)\n\
    </cell>\n<code language=julia-1.0>\n@code_warntype is_multiply_prime(900)\n</cell>\n\
    <code language=julia-1.0>\n@code_warntype is_multiply_prime(1000)\n</cell>\n<code\
    \ language=julia-1.0>\n@code_warntype is_multiply_prime(1200)\n</cell>\n<code\
    \ language=julia-1.0>\n@code_warntype is_multiply_prime(1400)\n</cell>\n<code\
    \ language=julia-1.0>\n@code_warntype is_multiply_prime(1500)\n</cell>\n<code\
    \ language=julia-1.0>\n@code_warntype is_multiply_prime(1600)\n</cell>\n<code\
    \ language=julia-1.0>\n@code_warntype is_multiply_prime(1700)\n</cell>\n<code\
    \ language=julia-1.0>\n@code_warntype is_multiply_prime(1800)\n</cell>\n<code\
    \ language=julia-1.0>\n@code_warntype is_multiply_prime(1900)\n</cell>\n<code\
    \ language=julia-1.0>\n@code_warntype is_multiply_prime(2100)\n</cell>\n<code\
    \ language=julia-1.0>\n@code_warntype is_multiply_prime(2200)\n</cell>\n<code\
    \ language=julia-1.0>\n@code_warntype is_multiply_prime(2300)\n</cell>\n<code\
    \ language=julia-1.0>\n@code_warntype is_multiply_prime(2400)\n</cell>\n<code\
    \ language=julia-1.0>\n@code_warntype is_multiply_prime", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    prime_numbers = primes(100)\n\
    \    \n    for i in prime_numbers\n        if a % i == 0\n            return false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<text>\nExercise\nWrite a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing\
    \ that (a) is less then 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    primes =\
    \ primes_list(100)\n    \n    for i in primes\n        if a % i == 0\n       \
    \     return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if the given number is a prime number and false otherwise.\n    Example:\n\
    \        30 is a prime number\n    \"\"\"", "    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    if a < 100\n        true\n    else\n        false\n    end\nend",
  "    \n    primes = primes_list(100)\n    \n    for i in primes\n        if a %\
    \ i == 0\n            return false\n    end\n    return true\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"", "    \n    primes\
    \ = primes(a)\n    \n    for p in primes\n        if p == a \n            return\
    \ true\n        else if p > a \n            return false\n        end\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(100)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns true if the given number is a power of 3 \n\
    \    and false otherwise.\n    Example:\n        9 = 3^2 * 3^2\n    \"\"\"", " \
    \   \n    if a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.4>\nis_multiply_prime(30)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns true if the given number is a prime number and false\
    \ otherwise.\n    \n    Example:\n        30 is a prime number\n    \"\"\"", " \
    \   \n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n    for i in primes\n        if a\
    \ % i == 0\n            return false\n    end\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(100000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000000)",
  "    if a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31)\
    \ == false\n@assert is_multiply_prime(32) == false\n@assert is_multiply_prime(33)\
    \ == false\n@assert is_multiply_prime(34) == false\n@assert is_multiply_prime(35)\
    \ == false\n@assert is_multiply_prime(36) == false\n@assert is_multiply_prime(37)\
    \ == false\n@assert is_multiply_prime(38) == false\n@assert is_multiply_prime(39)\
    \ == false\n@assert is_multiply_prime(40) == false\n@assert is_multiply_prime(41)\
    \ == false\n@assert is_multiply_prime(42) == false\n@assert is_multiply_prime(43)\
    \ == false\n@assert is_multiply_prime(44) == false\n@assert is_multiply_prime(45)\
    \ == false\n@assert is_multiply_prime(46) == false\n@assert is_multiply_prime(47)\
    \ == false\n@assert is_multiply_prime(48) == false\n@assert is_multiply_prime(49)\
    \ == false\n@assert is_multiply_prime(50) == false\n@assert is_multiply_prime(51)\
    \ == false\n@assert is_multiply_prime(52) == false\n@assert is_multiply_prime(53)\
    \ == false\n@assert is_multiply_prime(54) == false\n@assert is_multiply_prime(55)\
    \ == false\n@assert is_multiply_prime(56) == false\n@assert is_multiply_prime(57)\
    \ == false\n@assert is_multiply_prime(58) == false\n@assert is_multiply_prime(59)\
    \ == false\n@assert is_multiply_prime(60) == false\n@assert is_multiply_prime(61)\
    \ == false\n@assert is_multiply_prime(62) == false\n@assert is_multiply_prime(63)\
    \ == false\n@assert is_multiply_prime(64) == false\n@assert is_multiply_prime(65)\
    \ == false\n@assert is_multiply_prime(66) == false\n@assert is_multiply_prime(67)\
    \ == false\n@assert is_multiply_prime(68) == false\n@assert is_multiply_prime(69)\
    \ == false\n@assert is_multiply_prime(70) == false\n@assert is_multiply_prime(71)\
    \ == false\n@assert is_multiply_prime(72) == false\n@assert is_multiply_prime(73)\
    \ == false\n@", "    \n    if a < 100\n        true\n    else\n        false\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert is_multiply_prime(30)\
    \ == true\n@assert is_multiply_prime(50) == false\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns true if the given number is a prime number and false\
    \ otherwise.\n    Example:\n        30 is a prime number\n    \"\"\"", "    if\
    \ a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31)\
    \ == false\n@assert is_multiply_prime(100) == false\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns true if the given number is a prime number\
    \ and false otherwise.\n    We know that 1 is neither prime nor composite.\n \
    \   Example:\n        30 = 2 * 3 * 5\n    \"\"\"", "    \n    prime_numbers =\
    \ [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n \
    \   \n    \n    for i in prime_numbers\n        if a % i == 0\n            return\
    \ false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ is_multiply_prime(30) == true\n@assert is_multiply_prime(31) == false\n@assert\
    \ is_multiply_prime(32) == false\n@assert is_multiply_prime(33) == false\n@assert\
    \ is_multiply_prime(34) == false\n@assert is_multiply_prime(35) == false\n@assert\
    \ is_multiply_prime(36) == false\n@assert is_multiply_prime(37) == false\n@assert\
    \ is_multiply_prime(38) == false\n@assert is_multiply_prime(39) == false\n@assert\
    \ is_multiply_prime(40) == false\n@assert is_multiply_prime(41) == false\n@assert\
    \ is_multiply_prime(42) == false\n@assert is_multiply_prime(43) == false\n@assert\
    \ is_multiply_prime(44) == false\n@assert is_multiply_prime(45) == false\n@assert\
    \ is_multiply_prime(46) == false\n@assert is_multiply_prime(47) == false\n@assert\
    \ is_multiply_prime(48) == false\n@assert is_multiply_prime(49) == false\n@assert\
    \ is_multiply_prime(50) == false\n@assert is_multiply_prime(51) == false\n@assert\
    \ is_multiply_prime(52) == false\n@assert is_multiply_prime(53) == false\n@assert\
    \ is_multiply_prime(54) == false\n@assert is_multiply_prime(55) == false\n@assert\
    \ is_multiply_prime(56) == false\n@assert is_multiply_prime(57) == false\n@assert\
    \ is_multiply_prime(58) == false\n@assert is_multiply_prime(59) == false\n@assert\
    \ is_multiply_prime(60) == false\n@assert is_multiply_prime(61) == false\n@assert\
    \ is_multiply_prime(62) == false\n@assert is_multiply_prime(63) == false\n@assert\
    \ is_multiply_prime(64) == false\n@assert is_multiply_prime(65) == false\n@assert\
    \ is_multiply_prime(66) == false\n@assert is_multiply_prime(67) == false\n@assert\
    \ is_multiply_prime(68) == false\n@assert ", "    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    prime_numbers = primes(100)\n    \n   \
    \ prime_numbers_set = Set(prime_numbers)\n    \n    if prime_numbers_set[a] in\
    \ prime_numbers_set\n        \n        prime_numbers_set[a] == true\n        \n\
    \    else\n        \n        prime_numbers_set[a] == false\n        \n    return\
    \ prime_numbers_set[a]\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(300)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(400)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(500)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(600)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(700)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(800)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(900)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1200)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1300)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1400)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1500)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1600)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1700)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1800)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1900)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2200)\n</cell>\n<code language=", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    if a < 100\n        false\n    else\n \
    \       true\n    end\nend\n</cell>\n<code language=julia-1.4>\n@code_warntype\
    \ is_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\n@code_warntype is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype is_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.4>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.4>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\n\
    @code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\n@code_warntype\
    \ is_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\n@code_warntype is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype is_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.4>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.4>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\n\
    @code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\n@code_warntype\
    \ is_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\n@code_warntype is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype is_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.4>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.4>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\n\
    @code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\n@code_warntype\
    \ is_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\n@code_warntype is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype is_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.4>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.4>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\n\
    @code_", "    if a < 100\n        true\n    else\n        false\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert is_multiply_prime(30) == true\n@assert\
    \ is_multiply_prime(31) == false\n@assert is_multiply_prime(100) == false\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns true if the given number is\
    \ prime and false otherwise.\n    \n    \n    Example:\n        30 is prime\n\
    \        \n    \"\"\"", "    \n    prime_numbers = primes(100)\n    \n    prime_numbers_set\
    \ = Set(prime_numbers)\n    \n    prime_numbers_set.add(a)\n    \n    prime_numbers_set\
    \ = Set(prime_numbers_set)\n    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set\
    \ = Set(prime_numbers_set)\n    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set\
    \ = Set(prime_numbers_set)\n    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set\
    \ = Set(prime_numbers_set)\n    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set\
    \ = Set(prime_numbers_set)\n    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set\
    \ = Set(prime_numbers_set)\n    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set\
    \ = Set(prime_numbers_set)\n    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set\
    \ = Set(prime_numbers_set)\n    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set\
    \ = Set(prime_numbers_set)\n    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set\
    \ = Set(prime_numbers_set)\n    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set\
    \ = Set(prime_numbers_set)\n    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set\
    \ = Set(prime_numbers_set)\n    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set\
    \ = Set(prime_numbers_set)\n    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set\
    \ = Set(prime_numbers_set)\n    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set\
    \ = Set(prime_numbers_set)\n    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set\
    \ = Set(prime_numbers_set)\n    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set\
    \ = Set(prime_numbers_set)\n    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set\
    \ = Set(prime_numbers_set)\n    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set\
    \ = ", "    if a < 100\n        true\n    else\n        false\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<text>\nExercise\n\
    Write a function that returns true if the given number is the multiplication of\
    \ 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"", "    \n    prime_numbers\
    \ = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97]\n    \n    for i in prime_numbers\n        if a % i == 0\n\
    \            return false\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if the given number is a prime number and false otherwise.\n    \n    Example:\n\
    \        30 is a prime number\n    \"\"\"", "    \n    if a < 100\n        return\
    \ false\n    \n    primes = primes(a)\n    \n    for p in primes\n        if p\
    \ * 3 == a\n            return true\n    end\n    return false\nend\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns true if the given number is a prime number\
    \ and false otherwise.\n    Example:\n        30 is a prime number\n    \"\"\"",
  "    if a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31)\
    \ == false\n@assert is_multiply_prime(32) == false\n@assert is_multiply_prime(33)\
    \ == false\n@assert is_multiply_prime(34) == false\n@assert is_multiply_prime(35)\
    \ == false\n@assert is_multiply_prime(36) == false\n@assert is_multiply_prime(37)\
    \ == false\n@assert is_multiply_prime(38) == false\n@assert is_multiply_prime(39)\
    \ == false\n@assert is_multiply_prime(40) == false\n@assert is_multiply_prime(41)\
    \ == false\n@assert is_multiply_prime(42) == false\n@assert is_multiply_prime(43)\
    \ == false\n@assert is_multiply_prime(44) == false\n@assert is_multiply_prime(45)\
    \ == false\n@assert is_multiply_prime(46) == false\n@assert is_multiply_prime(47)\
    \ == false\n@assert is_multiply_prime(48) == false\n@assert is_multiply_prime(49)\
    \ == false\n@assert is_multiply_prime(50) == false\n@assert is_multiply_prime(51)\
    \ == false\n@assert is_multiply_prime(52) == false\n@assert is_multiply_prime(53)\
    \ == false\n@assert is_multiply_prime(54) == false\n@assert is_multiply_prime(55)\
    \ == false\n@assert is_multiply_prime(56) == false\n@assert is_multiply_prime(57)\
    \ == false\n@assert is_multiply_prime(58) == false\n@assert is_multiply_prime(59)\
    \ == false\n@assert is_multiply_prime(60) == false\n@assert is_multiply_prime(61)\
    \ == false\n@assert is_multiply_prime(62) == false\n@assert is_multiply_prime(63)\
    \ == false\n@assert is_multiply_prime(64) == false\n@assert is_multiply_prime(65)\
    \ == false\n@assert is_multiply_prime(66) == false\n@assert is_multiply_prime(67)\
    \ == false\n@assert is_multiply_prime(68) == false\n@assert is_multiply_prime(69)\
    \ == false\n@assert is_multiply_prime(70) == false\n@assert is_multiply_prime(71)\
    \ == false\n@assert is_multiply_prime(72) == false\n@assert is_multiply_prime(73)\
    \ == false\n@", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    primes = primes_list(100)\n    \n    prime_numbers = primes[a]\n   \
    \ \n    for prime in prime_numbers\n        if prime == a\n            return\
    \ false\n    end\n    \n    for prime in prime_numbers\n        if prime == a\n\
    \            return true\n    end\n    \n    return false\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(200)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(300)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(400)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(500)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(600)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(700)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(800)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(900)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1200)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1300)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1400)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1500)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1600)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1700)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1800)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1900)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2300)\n</cell>", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    prime_numbers =\
    \ primes(100)\n    \n    for i in prime_numbers\n        if a % i == 0\n     \
    \       return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing\
    \ that (a) is less then 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"",
  "    \n    primes = prime_numbers(100)\n    \n    for p in primes\n        if p\
    \ == a\n            return true\n        end\n    end\n    return false\nend\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"", "    \n    if a <\
    \ 100\n        true\n    else\n        false\n    end\nend", "    \n    prime_numbers\
    \ = primes(100)\n    \n    prime_numbers_set = Set(prime_numbers)\n    \n    prime_numbers_set.add(a)\n\
    \    \n    prime_numbers_set = Set(prime_numbers_set)\n    \n    for prime_number\
    \ in prime_numbers_set\n        if prime_number == a\n            return false\n\
    \    end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if the given number is a prime number and false otherwise.\n    Example:\n\
    \        30 is a prime number\n    \"\"\"", "    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    primes = prime_numbers(a)\n    \n    for\
    \ p in primes\n        if p * 3 == a\n            return true\n        end\n \
    \   end\n    return false\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(1000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000000000000)\n</cell>",
  "    \n    prime_numbers = primes(100)\n    \n    prime_numbers_set = Set(prime_numbers)\n\
    \    \n    prime_numbers_set.add(a)\n    \n    prime_numbers_set = Set(prime_numbers_set)\n\
    \    \n    if prime_numbers_set == Set(prime_numbers)\n        true\n    else\n\
    \        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime", "    if a < 100\n        true\n\
    \    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(1000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000000000000000)\n</cell",
  "    \n    prime_numbers = prime_numbers(a)\n    \n    for i in prime_numbers\n\
    \        if a % i == 0\n            return false\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(100)\n</cell>\n<text>\nExercise\nWrite a function that\
    \ returns true if the given number is a power of 3 prime numbers and false otherwise.\n\
    Knowing that (a) is less then 100. \nExample: \n    30 = 2 * 3 * 5\n    30 = 2\
    \ * 3 * 5\n    30 = 2 * 3 * 5\n    30 = 2 * 3 * 5\n    30 = 2 * 3 * 5\n    30\
    \ = 2 * 3 * 5\n    30 = 2 * 3 * 5\n    30 = 2 * 3 * 5\n    30 = 2 * 3 * 5\n  \
    \  30 = 2 * 3 * 5\n    30 = 2 * 3 * 5\n    30 = 2 * 3 * 5\n    30 = 2 * 3 * 5\n\
    \    30 = 2 * 3 * 5\n    30 = 2 * 3 * 5\n    30 = 2 * 3 * 5\n    30 = 2 * 3 *\
    \ 5\n    30 = 2 * 3 * 5\n    30 = 2 * 3 * 5\n    30 = 2 * 3 * 5\n    30 = 2 *\
    \ 3 * 5\n    30 = 2 * 3 * 5\n    30 = 2 * 3 * 5\n    30 = 2 * 3 * 5\n    30 =\
    \ 2 * 3 * 5\n    30 = 2 * 3 * 5\n    30 = 2 * 3 * 5\n    30 = 2 * 3 * 5\n    30\
    \ = 2 * 3 * 5\n    30 = 2 * 3 * 5\n    30 = 2 * 3 * 5\n    30 = 2 * 3 * 5\n  \
    \  30 = 2 * 3 * 5\n    30 = 2 * 3 * 5\n    30 = 2 * 3 * 5\n    30 = 2 * 3 * 5\n\
    \    30 = 2 * 3 * 5\n    30 = 2 * 3 * 5\n    30 = 2 * 3 * 5\n    30 = 2 * 3 *\
    \ 5\n    30 = 2 * 3 * 5\n    30 = 2 * 3 * 5\n    30 = 2 * 3 * 5\n    30 = 2 *\
    \ 3 * 5\n    30 = 2 * 3 * 5\n    30 = 2 * 3 * 5\n    30 = 2 * 3 * 5\n    30 =\
    \ 2 * 3 * 5\n    30 = 2 * 3 * 5\n    30 = 2 * 3 * 5\n    30 = 2 * 3 * 5\n    30\
    \ = 2 * 3 * 5\n    30 = 2 * 3 * 5\n    30 = 2 * 3 * 5\n    30 = 2 * 3 * 5\n  \
    \  30 = 2 * 3 * 5\n    30 = 2 * 3 * 5", "    \n    if a < 100\n        return\
    \ false\n    \n    primes = prime_numbers(a)\n    \n    for p in primes\n    \
    \    if p > 100\n            return false\n        \n        if p == a\n     \
    \       return true\n        \n        if p % 3 == 0\n            return false\n\
    \        \n        if p % 5 == 0\n            return false\n        \n       \
    \ if p % 7 == 0\n            return false\n        \n        if p % 11 == 0\n\
    \            return false\n        \n        if p % 13 == 0\n            return\
    \ false\n        \n        if p % 17 == 0\n            return false\n        \n\
    \        if p % 19 == 0\n            return false\n        \n        if p % 23\
    \ == 0\n            return false\n        \n        if p % 29 == 0\n         \
    \   return false\n        \n        if p % 31 == 0\n            return false\n\
    \        \n        if p % 37 == 0\n            return false\n        \n      \
    \  if p % 41 == 0\n            return false\n        \n        if p % 43 == 0\n\
    \            return false\n        \n        if p % 47 == 0\n            return\
    \ false\n        \n        if p % 53 == 0\n            return false\n        \n\
    \        if p % 59 == 0\n            return false\n        \n        if p % 61\
    \ == 0\n            return false\n        \n        if p % 67 == 0\n         \
    \   return false\n        \n        if p % 71 == 0\n            return false\n\
    \        \n        if p % 73 == 0\n            return false\n        \n      \
    \  if p % 79 == 0\n            return false\n        \n        if p % 83 == 0\n\
    \            return false\n        \n        if p % 89 == 0\n            return\
    \ false\n        \n        if p % 97 == 0\n            return false\n        \n\
    \        if p % 101 == 0\n            return false\n        \n        if p % 103\
    \ == 0\n            return false\n        \n        if p % 107 == 0\n        \
    \    return false\n        \n        if p % 109 == 0\n            return false\n\
    \        \n        if p % 111 == 0\n            return false\n        \n     \
    \   if p % 115 == 0\n            return false\n        \n        if p % 117 ==\
    \ 0\n            return false\n        \n        if p % 119 == 0\n           \
    \ return false\n        \n        if p % 121 == 0\n            return false\n\
    \        \n        if p % 123 == 0\n            return false\n        \n     \
    \   if p % 127 == 0\n            return false\n        \n        if p % 131 ==\
    \ 0\n            return false\n        \n        if p % 137 == 0\n           \
    \ return false\n        \n        if p % 139 == 0\n            return false\n\
    \        \n        if p % 143 == 0\n            return false\n        \n     \
    \   if p % 147 == 0\n            return false\n        \n        if p % 151 ==\
    \ 0\n            return false\n        \n        if p % 157 == 0\n", "    \n \
    \   prime_numbers = primes(100)\n    \n    for i in prime_numbers\n        if\
    \ a % i == 0\n            return false\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\n    Example:\n        30 is a prime\
    \ number\n    \"\"\"", "    if a < 100\n        true\n    else\n        false\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\n    Example:\n        30 is a prime\
    \ number\n    \"\"\"", "    \n    primes = prime_numbers(a)\n    \n    \n    for\
    \ p in primes\n        if p > 100\n            return false\n        end\n   \
    \ end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(1000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000000000000)\n", " \
    \   \n    if a < 100\n        return false\n    \n    primes = primes(a)\n   \
    \ \n    for p in primes\n        if p > a\n            return false\n        \n\
    \        if p == a\n            return true\n        \n        if p % a == 0\n\
    \            return false\n    end\n    \n    return true\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(300)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(400)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(500)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(600)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(700)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(800)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(900)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1200)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1300)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1400)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1500)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1600)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1700)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1800)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1900)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2200)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2300)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2400)\n</cell>\n<code language=juli",
  "    if a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns true if the given number is a prime number\
    \ and false otherwise.\n    \n    Example:\n        30 is a prime number\n   \
    \ \"\"\"", "    \n    if a < 100\n        return false\n    \n    primes = prime_numbers(a)\n\
    \    \n    for p in primes\n        if p * p > a\n            return false\n \
    \   \n    return true\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(10000)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(1000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(100000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ is_multiply_prime(1000000000)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(10000000000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(1000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(10000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(100000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(100000000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(1000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(10000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(1000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(10000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>", "    if a < 100\n        true\n    else\n        false\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(30)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns true if the given number is\
    \ a prime number and false otherwise.\n    You can use the function is_multiply_prime\
    \ to check it.\n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"", "    if a <\
    \ 100\n        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    @code_warntype is_multiply_prime(30)\n</cell>\n<text>\nExercise: Write a function\
    \ that returns true if the given number is a prime number and false otherwise.\n\
    \    Example:\n        30 = 2 * 3 * 5\n    \"\"\"", "    if a < 100\n        true\n\
    \    else\n        false\n    end\nend", "    if a < 100\n        true\n    else\n\
    \        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert is_multiply_prime(30)\
    \ == true\n@assert is_multiply_prime(31) == false\n@assert is_multiply_prime(33)\
    \ == false\n@assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101)\
    \ == false\n@assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101)\
    \ == false\n@assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101)\
    \ == false\n@assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101)\
    \ == false\n@assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101)\
    \ == false\n@assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101)\
    \ == false\n@assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101)\
    \ == false\n@assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101)\
    \ == false\n@assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101)\
    \ == false\n@assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101)\
    \ == false\n@assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101)\
    \ == false\n@assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101)\
    \ == false\n@assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101)\
    \ == false\n@assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101)\
    \ == false\n@assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101)\
    \ == false\n@assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101)\
    \ == false\n@assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101)\
    \ == false\n@assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101)\
    \ == false\n@assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101)\
    \ == false\n@assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101)\
    \ == false\n@assert is_multiply_prime(101) == false\n@", "    if a < 100\n   \
    \     true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31) == false\n\
    @assert is_multiply_prime(32) == true\n@assert is_multiply_prime(33) == false\n\
    @assert is_multiply_prime(34) == true\n@assert is_multiply_prime(35) == false\n\
    @assert is_multiply_prime(36) == true\n@assert is_multiply_prime(37) == false\n\
    @assert is_multiply_prime(38) == true\n@assert is_multiply_prime(39) == false\n\
    @assert is_multiply_prime(40) == true\n@assert is_multiply_prime(41) == false\n\
    @assert is_multiply_prime(42) == true\n@assert is_multiply_prime(43) == false\n\
    @assert is_multiply_prime(44) == true\n@assert is_multiply_prime(45) == false\n\
    @assert is_multiply_prime(46) == true\n@assert is_multiply_prime(47) == false\n\
    @assert is_multiply_prime(48) == true\n@assert is_multiply_prime(49) == false\n\
    @assert is_multiply_prime(50) == true\n@assert is_multiply_prime(51) == false\n\
    @assert is_multiply_prime(52) == true\n@assert is_multiply_prime(53) == false\n\
    @assert is_multiply_prime(54) == true\n@assert is_multiply_prime(55) == false\n\
    @assert is_multiply_prime(56) == true\n@assert is_multiply_prime(57) == false\n\
    @assert is_multiply_prime(58) == true\n@assert is_multiply_prime(59) == false\n\
    @assert is_multiply_prime(60) == true\n@assert is_multiply_prime(61) == false\n\
    @assert is_multiply_prime(62) == true\n@assert is_multiply_prime(63) == false\n\
    @assert is_multiply_prime(64) == true\n@assert is_multiply_prime(65) == false\n\
    @assert is_multiply_prime(66) == true\n@assert is_multiply_prime(67) == false\n\
    @assert is_multiply_prime(68) == true\n@assert is_multiply_prime(69) == false\n\
    @assert is_multiply_prime(70) == true\n@assert is_multiply_prime(71) == false\n\
    @assert is_multiply_prime(72) == true\n@assert is_multiply_prime(73) == false\n\
    @assert ", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if\
    \ a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert is_multiply_prime(30) == true\n@assert is_multiply_prime(30)\
    \ == false\n</cell>\n<text>\nExercise 2\nWrite a function that returns true if\
    \ the given number is a prime number and false otherwise.\n    Example:\n    \
    \    30 is a prime number\n    \"\"\"", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    prime_numbers = primes(a)\n    \n    for i in\
    \ prime_numbers\n        if a % i == 0\n            return false\n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns true if the given number is a prime number and false\
    \ otherwise.\n    \n    Example:\n        30 is a prime number\n    \"\"\"", " \
    \   \n    prime_numbers = primes(100)\n    \n    prime_numbers_set = Set(prime_numbers)\n\
    \    \n    prime_numbers_set.add(a)\n    \n    for prime in prime_numbers_set\n\
    \        if prime == a\n            return false\n        end\n    end\n    \n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\n    \n    \n    Example:\n        30\
    \ is prime\n    \"\"\"", "    if a < 100\n        return false\n    \n    primes\
    \ = primes_list(100)\n    \n    for i in primes\n        if a % i == 0\n     \
    \       return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(200)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(300)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(400)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(500)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(600)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(700)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(800)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(900)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1200)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1300)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1400)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1500)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1600)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1700)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1800)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1900)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2300)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2400)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2500)\n\
    </cell>\n<code language=julia-1.5>\nis_", "    \n    prime_numbers = primes(a)\n\
    \    \n    for num in prime_numbers:\n        if a % num == 0 \n            return\
    \ false\n    return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of prime factors of a given\
    \ number. \n    For example, if the number is 24, the function should return 3.\n\
    \    \n    You can use the function primes(a) to get the prime factors of a number.\n\
    \    \"\"\"", "    \n    prime_numbers = primes(a)\n    \n    for p in prime_numbers\n\
    \        if a % p == 0\n            return false\n    end\n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(300)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(400)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(500)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(600)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(700)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(800)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(900)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1200)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1300)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1400)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1500)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1600)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1700)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1800)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1900)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2200)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2300)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2400)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2500)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2600)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2700",
  "    if a < 100\n        true\n    else\n        false\n    end\nend", "    if a\
    \ < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31) == false\n\
    @assert is_multiply_prime(33) == false\n@assert is_multiply_prime(100) == true\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\n    \n    Example:\n        30 is a\
    \ prime number\n    \"\"\"", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    prime_numbers = primes(100)\n    \n    for i in prime_numbers\n\
    \        if a % i == 0\n            return false\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    prime_numbers = [2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97]\n    \n    for i in prime_numbers\n        if a % i == 0\n         \
    \   return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(1000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000000000000)", "   \
    \ \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    \n    for i in prime_numbers\n        if a % i == 0\n            return\
    \ false\n    return true\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(10000)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(1000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(100000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ is_multiply_prime(1000000000)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(10000000000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(1000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(10000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(100000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(100000000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(1000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(10000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(1000000000000000000000)\n</cell>\n\
    <code language=julia-", "    \n    primes = prime_numbers(a)\n    \n    for p\
    \ in primes\n        if p*p > a\n            return false\n        end\n    end\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\n    \n    Example:\n        30 is a\
    \ prime number\n    \"\"\"", "    \n    primes = [2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n\
    \    for i in primes\n        if a % i == 0\n            return false\n    end\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n",
  "    \n    prime_numbers = prime_numbers(a)\n    \n    for i in prime_numbers\n\
    \        if a % i == 0\n            return false\n    end\n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(100000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000000)\n\
    </cell>", "    \n    if a < 100\n        true\n    else\n        false\n    end\n\
    end", "    \n    prime_numbers = primes(100)\n    \n    prime_numbers_set = Set(prime_numbers)\n\
    \    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set = Set(prime_numbers)\n\
    \    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set = Set(prime_numbers)\n\
    \    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set = Set(prime_numbers)\n\
    \    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set = Set(prime_numbers)\n\
    \    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set = Set(prime_numbers)\n\
    \    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set = Set(prime_numbers)\n\
    \    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set = Set(prime_numbers)\n\
    \    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set = Set(prime_numbers)\n\
    \    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set = Set(prime_numbers)\n\
    \    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set = Set(prime_numbers)\n\
    \    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set = Set(prime_numbers)\n\
    \    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set = Set(prime_numbers)\n\
    \    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set = Set(prime_numbers)\n\
    \    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set = Set(prime_numbers)\n\
    \    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set = Set(prime_numbers)\n\
    \    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set = Set(prime_numbers)\n\
    \    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set = Set(prime_numbers)\n\
    \    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set = Set(prime_numbers)\n\
    \    \n    prime_numbers_set.remove(a)\n    \n    prime_numbers_set = Set(prime_numbers)\n\
    \    \n    prime_numbers_set.remove(a)\n    ", "    \n    if a < 100\n       \
    \ return false\n    \n    primes = primes_list(100)\n    \n    primes_product\
    \ = 1\n    \n    for p in primes\n        primes_product *= p\n        \n    if\
    \ a == primes_product\n        return true\n    \n    return false\nend\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(1000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(10000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(100000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(1000000)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(10000000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ is_multiply_prime(1000000000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ is_multiply_prime(10000000000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ is_multiply_prime(100000000000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ is_multiply_prime(1000000000000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ is_multiply_prime(10000000000000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ is_multiply_prime(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(1000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(10000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(100000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(1000000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime", "    if a < 100\n        true\n    else\n        false\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert is_multiply_prime(30)\
    \ == true\n@assert is_multiply_prime(31) == false\n@assert is_multiply_prime(32)\
    \ == false\n@assert is_multiply_prime(33) == true\n@assert is_multiply_prime(34)\
    \ == false\n@assert is_multiply_prime(35) == true\n@assert is_multiply_prime(36)\
    \ == false\n@assert is_multiply_prime(37) == true\n@assert is_multiply_prime(38)\
    \ == false\n@assert is_multiply_prime(39) == true\n@assert is_multiply_prime(40)\
    \ == false\n@assert is_multiply_prime(41) == true\n@assert is_multiply_prime(42)\
    \ == false\n@assert is_multiply_prime(43) == true\n@assert is_multiply_prime(44)\
    \ == false\n@assert is_multiply_prime(45) == true\n@assert is_multiply_prime(46)\
    \ == false\n@assert is_multiply_prime(47) == true\n@assert is_multiply_prime(48)\
    \ == false\n@assert is_multiply_prime(49) == true\n@assert is_multiply_prime(50)\
    \ == false\n@assert is_multiply_prime(51) == true\n@assert is_multiply_prime(52)\
    \ == false\n@assert is_multiply_prime(53) == true\n@assert is_multiply_prime(54)\
    \ == false\n@assert is_multiply_prime(55) == true\n@assert is_multiply_prime(56)\
    \ == false\n@assert is_multiply_prime(57) == true\n@assert is_multiply_prime(58)\
    \ == false\n@assert is_multiply_prime(59) == true\n@assert is_multiply_prime(60)\
    \ == false\n@assert is_multiply_prime(61) == true\n@assert is_multiply_prime(62)\
    \ == false\n@assert is_multiply_prime(63) == true\n@assert is_multiply_prime(64)\
    \ == false\n@assert is_multiply_prime(65) == true\n@assert is_multiply_prime(66)\
    \ == false\n@assert is_multiply_prime(67) == true\n@assert is_multiply_prime(68)\
    \ == false\n@assert is_multiply_prime(69) == true\n@assert is_multiply_prime(70)\
    \ == false\n@assert is_multiply_prime(71) == true\n@assert is_multiply_prime(72)\
    \ == false\n@assert is_multiply_prime(73) == true\n@", "    if a < 100\n     \
    \   true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31) == false\n\
    @assert is_multiply_prime(32) == false\n@assert is_multiply_prime(33) == true\n\
    @assert is_multiply_prime(34) == false\n@assert is_multiply_prime(35) == true\n\
    @assert is_multiply_prime(36) == false\n@assert is_multiply_prime(37) == true\n\
    @assert is_multiply_prime(38) == false\n@assert is_multiply_prime(39) == true\n\
    @assert is_multiply_prime(40) == false\n@assert is_multiply_prime(41) == true\n\
    @assert is_multiply_prime(42) == false\n@assert is_multiply_prime(43) == true\n\
    @assert is_multiply_prime(44) == false\n@assert is_multiply_prime(45) == true\n\
    @assert is_multiply_prime(46) == false\n@assert is_multiply_prime(47) == true\n\
    @assert is_multiply_prime(48) == false\n@assert is_multiply_prime(49) == true\n\
    @assert is_multiply_prime(50) == false\n@assert is_multiply_prime(51) == true\n\
    @assert is_multiply_prime(52) == false\n@assert is_multiply_prime(53) == true\n\
    @assert is_multiply_prime(54) == false\n@assert is_multiply_prime(55) == true\n\
    @assert is_multiply_prime(56) == false\n@assert is_multiply_prime(57) == true\n\
    @assert is_multiply_prime(58) == false\n@assert is_multiply_prime(59) == true\n\
    @assert is_multiply_prime(60) == false\n@assert is_multiply_prime(61) == true\n\
    @assert is_multiply_prime(62) == false\n@assert is_multiply_prime(63) == true\n\
    @assert is_multiply_prime(64) == false\n@assert is_multiply_prime(65) == true\n\
    @assert is_multiply_prime(66) == false\n@assert is_multiply_prime(67) == true\n\
    @assert is_multiply_prime(68) == false\n@assert is_multiply_prime(69) == true\n\
    @assert is_multiply_prime(70) == false\n@assert is_multiply_prime(71) == true\n\
    @assert is_multiply_prime(72) == false\n@assert is_multiply_prime(73) == true\n\
    @", "    \n    prime_numbers = primes(100)\n    \n    for i in prime_numbers\n\
    \        if a % i == 0\n            return false\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"", "    \n    prime_numbers\
    \ = primes(a)\n    \n    for prime in prime_numbers\n        if a % prime == 0\n\
    \            return false\n        end\n    end\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns true if the given number is a prime number\
    \ and false otherwise.\n    \n    Example:\n        30 is a prime number\n   \
    \ \"\"\"", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    prime_numbers =\
    \ primes(100)\n    \n    for n in prime_numbers\n        if a % n == 0\n     \
    \       return false\n        end\n    end\n    return true\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns true if the given number is a prime number\
    \ and false otherwise.\n    Example:\n        30 is a prime number\n    \"\"\"",
  "    if a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    primes = prime_numbers(a)\n\
    \    \n    for i in primes\n        if i == 3 || i == 5 || i == 7 || i == 9\n\
    \            return true\n        else\n            return false\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns true if the given number is a perfect\
    \ square, false otherwise.\n    Example:\n        25 is a perfect square\n   \
    \     25 is not a perfect square\n    \"\"\"", "    if a < 100\n        true\n\
    \    else\n        false\n    end\nend", "    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    prime_numbers_set = Set(prime_numbers)\n    \n    prime_numbers_set\
    \ = prime_numbers_set - Set(prime_numbers[a])\n    \n    if prime_numbers_set.isEmpty\
    \ == false\n        \n        return true\n    else\n        return false\n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(1000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>", "    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in prime_numbers\n        if a % i == 0\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\n    Example:\n        30 is a prime\
    \ number\n    \"\"\"", "    \n    prime_numbers = primes(100)\n    \n    for prime\
    \ in prime_numbers\n        if a % prime == 0\n            return false\n    end\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n",
  "    \n    prime_numbers = prime_numbers(a)\n    \n    for i in prime_numbers\n\
    \        if a % i == 0\n            return false\n        end\n    end\n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(100000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000000)\n\
    </cell>\n", "    if a < 100\n        return false\n    \n    primes = primes_list(100)\n\
    \    \n    for p in primes\n        if p == a\n            return true\n     \
    \   \n        if p > a\n            continue\n        \n        if p % a == 0\n\
    \            return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(200)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(300)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(400)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(500)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(600)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(700)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(800)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(900)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1200)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1300)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1400)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1500)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1600)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1700)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1800)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1900)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2300)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2400)\n</cell>\n<code language=julia-1.5>\n", "    \n    prime_numbers\
    \ = primes(a)\n    \n    for p in prime_numbers\n        if p*p > a\n        \
    \    return false\n        end\n    end\n    return true\nend", "    if a < 100\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(200)\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(300)\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(400)\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(500)\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(600)\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(700)\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(800)\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(900)\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(1000)\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(1100)\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(1200)\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(1300)\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(1400)\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(1500)\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(1600)\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(1700)\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(1800)\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(1900)\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(2100)\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(2200)\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(2300)\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(2400)\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(2500)\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(2600)\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(2700)\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(2800", "    \n    prime_numbers = primes(100)\n    \n    prime_numbers_set\
    \ = Set(prime_numbers)\n    \n    prime_numbers_set.add(a)\n    \n    prime_numbers_set\
    \ = Set(prime_numbers_set)\n    \n    for prime in prime_numbers_set\n       \
    \ if prime == a\n            return false\n        end\n    end\n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns true if the given number is a prime\
    \ number and false otherwise.\nKnowing that (a) is less then 100. \nExample: \n\
    \    30 = 2 * 3 * 5\n    30 = 2 * 3 * 7\n    30 = 2 * 3 * 11\n    30 = 2 * 3 *\
    \ 13\n    30 = 2 * 3 * 17\n    30 = 2 * 3 * 19\n    30 = 2 * 3 * 23\n    30 =\
    \ 2 * 3 * 29\n    30 = 2 * 3 * 31\n    30 = 2 * 3 * 37\n    30 = 2 * 3 * 41\n\
    \    30 = 2 * 3 * 43\n    30 = 2 * 3 * 47\n    30 = 2 * 3 * 53\n    30 = 2 * 3\
    \ * 59\n    30 = 2 * 3 * 61\n    30 = 2 * 3 * 67\n    30 = 2 * 3 * 71\n    30\
    \ = 2 * 3 * 73\n    30 = 2 * 3 * 79\n    30 = 2 * 3 * 83\n    30 = 2 * 3 * 89\n\
    \    30 = 2 * 3 * 97\n    30 = 2 * 3 * 101\n    30 = 2 * 3 * 103\n    30 = 2 *\
    \ 3 * 107\n    30 = 2 * 3 * 109\n    30 = 2 * 3 * 113\n    30 = 2 * 3 * 127\n\
    \    30 = 2 * 3 * 131\n    30 = 2 * 3 * 137\n    30 = 2 * 3 * 139\n    30 = 2\
    \ * 3 * 141\n    30 = 2 * 3 * 143\n    30 = 2 * 3 * 147\n    30 = 2 * 3 * 149\n\
    \    30 = 2 * 3 * 151\n    30 = 2 * 3 * 153\n    30 = 2 * 3 * 157\n    30 = 2\
    \ * 3 * 159\n    30 = 2 * 3 * 161\n    30 = 2 * 3 * 163\n    30 = 2 * 3 * 165\n\
    \    30 = 2 * 3 * 167\n    30 = 2 * 3 * 169\n    30 = 2 * 3 * 173\n    30 = 2\
    \ * 3 * 177\n    30 = 2 * 3 * 179\n    30 = 2 * 3 * 181\n    30 = 2 * 3 * 183\n\
    \    30 = 2 * 3 * 187\n    30 = 2 * 3 * 191\n    30 = ", "    \n    prime_numbers\
    \ = primes(100)\n    \n    prime_numbers_set = Set(prime_numbers)\n    \n    if\
    \ prime_numbers_set[a]\n        \n        prime_numbers_set[a] = false\n     \
    \   \n        for p in prime_numbers_set\n            if p == a\n            \
    \    prime_numbers_set[a] = true\n                break\n        end\n    end\n\
    \    \n    return prime_numbers_set[a]\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>", "    if a < 100\n        true\n    else\n        false\n    end\nend",
  "    if a < 100\n        false\n    else\n        true\n    end\nend\n</cell>\n\
    <code language=julia-1.4>\n@code_warntype is_multiply_prime(30)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns true if the given number is a perfect\
    \ square, false otherwise.\n    \n    Example:\n        25 is a perfect square\n\
    \    \"\"\"", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    primes = primes(a)\n    \n    for p in primes\n        if p*p > a\n\
    \            return false\n        end\n    end\n    return true\nend", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    if a < 100\n        true\n    else\n        false\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert is_multiply_prime(30) == true\n\
    @assert is_multiply_prime(31) == false\n@assert is_multiply_prime(100) == false\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\n    \n    Example:\n        30 is a\
    \ prime number\n    \"\"\"", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in prime_numbers\n        if a % i == 0\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.0>\n@time is_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\n    \n    \n    Example:\n        30\
    \ is a prime number\n    \"\"\"", "    if a < 100\n        return true\n    else\
    \ \n        return false\nend", "    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    primes = primes(a)\n    \n    for prime in primes\n\
    \        if a % prime == 0\n            return false\n    end\n    return true\n\
    end", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    prime_numbers = primes(100)\n\
    \    \n    prime_numbers_set = Set(prime_numbers)\n    \n    prime_numbers_set.add(a)\n\
    \    \n    prime_numbers_set = Set(prime_numbers_set)\n    \n    for prime in\
    \ prime_numbers_set\n        if a % prime == 0\n            return false\n   \
    \     end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(200)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(300)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(400)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(500)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(600)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(700)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(800)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(900)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1300)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1400)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1500)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1600)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1700)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1800)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1900)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2200)\n</cell>\n<code language=julia-",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    prime_numbers\
    \ = primes(100)\n    \n    prime_numbers_set = Set(prime_numbers)\n    \n    if\
    \ prime_numbers_set[a] == true\n        \n        prime_numbers_set[a] = false\n\
    \        \n        return true\n    \n    else\n        \n        return false\n\
    \    \nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns true if the given number is\
    \ the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing\
    \ that (a) is less then 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"",
  "    \n    primes = prime_numbers(a)\n    \n    for p in primes\n        if p*p\
    \ > a\n            return false\n        end\n    end\n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns true if the given number is a prime\
    \ number and false otherwise.\n    \n    Example:\n        30 is prime\n    \"\
    \"\"", "    if a < 100\n        return false\n    \n    primes = prime_numbers(a)\n\
    \    \n    for i in primes\n        if a % i == 0\n            return false\n\
    \    \n    return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(200)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(300)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(400)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(500)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(600)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(700)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(800)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(900)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1300)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1400)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1500)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1600)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1700)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1800)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1900)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2200)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2300)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2400)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2500)\n</cell>\n<code language=julia-1.5>\n",
  "    \n    if a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31)\
    \ == false\n@assert is_multiply_prime(100) == false\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns true if the given number is a prime number\
    \ and false otherwise.\n    \n    \n    Example:\n        30 is prime\n    \"\"\
    \"", "    \n    if a < 100\n        return false\n    \n    primes = prime_numbers(a)\n\
    \    \n    for p in primes\n        if p*p > a\n            return false\n   \
    \ \n    return true\nend", "    \n    prime_numbers = prime_numbers(a)\n    \n\
    \    for i in prime_numbers\n        if a % i == 0\n            return false\n\
    \    return true\nend", "    \n    prime_numbers = primes(100)\n    \n    for\
    \ i in prime_numbers\n        if a % i == 0\n            return false\n      \
    \  end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    primes =\
    \ prime_numbers(a)\n    \n    primes_product = 1\n    for p in primes\n      \
    \  primes_product *= p\n    \n    return primes_product == a\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns true if the given number is a prime number\
    \ and false otherwise.\n    \n    Example:\n        30 is a prime number\n   \
    \ \"\"\"", "    \n    prime_numbers = primes(100)\n    \n    prime_numbers_set\
    \ = Set(prime_numbers)\n    \n    prime_numbers_set.add(a)\n    \n    prime_numbers_set\
    \ = Set(prime_numbers_set)\n    \n    for prime in prime_numbers_set\n       \
    \ if prime == a\n            return true\n        end\n    end\n    \n    return\
    \ false\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(300)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(400)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(500)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(600)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(700)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(800)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(900)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1200)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1300)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1400)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1500)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1600)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1700)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1800)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1900)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2200)\n</cell>\n<code language=julia-", "    \n    primes =\
    \ prime_numbers(a)\n    \n    for p in primes\n        if p > 100\n          \
    \  return false\n        end\n    end\n    \n    for p in primes\n        if p\
    \ == a\n            return true\n        end\n    end\n    \n    return false\n\
    end\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(10000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(1000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100000000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(1000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(10000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(1000000000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ is_multiply_prime(10000000000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ is_multiply_prime(100000000000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ is_multiply_prime(1000000000000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ is_multiply_prime(10000000000000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ is_multiply_prime(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(1000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(10000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(100000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(1000000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(10000000000000000000000)", "    \n    prime_numbers =\
    \ primes(100)\n    \n    prime_numbers_set = Set(prime_numbers)\n    \n    prime_numbers_set.add(a)\n\
    \    \n    \n    for i in prime_numbers_set\n        if a % i == 0\n         \
    \   return false\n    return true\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multi", "    \n    primes = [2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\
    \    \n    for i in primes\n        if a % i == 0\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    prime_numbers\
    \ = primes(100)\n    \n    for i in prime_numbers\n        if a % i == 0\n   \
    \         return false\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if the given number is a perfect square, false otherwise.\n    \n    Example:\n\
    \        16 is a perfect square\n    \"\"\"", "    \n    primes = [2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97]\n    \n    for i in primes\n        if a % i == 0\n            return\
    \ false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(100000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000000)\n\
    </cell", "    \n    prime_numbers = primes(a)\n    \n    for prime in prime_numbers\n\
    \        if a % prime == 0\n            return false\n        end\n    end\n \
    \   return true\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns true if the given number is a perfect\
    \ square, false otherwise.\n    \n    Example:\n        16 is a perfect square\n\
    \    \"\"\"", "    if a < 100\n        true\n    else\n        false\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert is_multiply_prime(30) == true\n\
    @assert is_multiply_prime(31) == false\n@assert is_multiply_prime(32) == false\n\
    @assert is_multiply_prime(33) == false\n@assert is_multiply_prime(34) == true\n\
    @assert is_multiply_prime(35) == false\n@assert is_multiply_prime(36) == false\n\
    @assert is_multiply_prime(37) == false\n@assert is_multiply_prime(38) == false\n\
    @assert is_multiply_prime(39) == false\n@assert is_multiply_prime(40) == false\n\
    @assert is_multiply_prime(41) == false\n@assert is_multiply_prime(42) == false\n\
    @assert is_multiply_prime(43) == false\n@assert is_multiply_prime(44) == false\n\
    @assert is_multiply_prime(45) == false\n@assert is_multiply_prime(46) == false\n\
    @assert is_multiply_prime(47) == false\n@assert is_multiply_prime(48) == false\n\
    @assert is_multiply_prime(49) == false\n@assert is_multiply_prime(50) == false\n\
    @assert is_multiply_prime(51) == false\n@assert is_multiply_prime(52) == false\n\
    @assert is_multiply_prime(53) == false\n@assert is_multiply_prime(54) == false\n\
    @assert is_multiply_prime(55) == false\n@assert is_multiply_prime(56) == false\n\
    @assert is_multiply_prime(57) == false\n@assert is_multiply_prime(58) == false\n\
    @assert is_multiply_prime(59) == false\n@assert is_multiply_prime(60) == false\n\
    @assert is_multiply_prime(61) == false\n@assert is_multiply_prime(62) == false\n\
    @assert is_multiply_prime(63) == false\n@assert is_multiply_prime(64) == false\n\
    @assert is_multiply_prime(65) == false\n@assert is_multiply_prime(66) == false\n\
    @assert is_multiply_prime(67) == false\n@assert is_multiply_prime(68) == false\n\
    @assert is_multiply_prime(69) == false\n@assert is_multiply_prime(70) == false\n\
    @assert is_multiply_prime(71) == false\n@assert is_multiply_prime(72) == false\n\
    @assert is_multiply_prime(73) == false\n@", "    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    if a < 100\n        true\n    else\n        false\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\n    Knowing that (a) is less then 100.\
    \ \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"", "    \n    if a < 100\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31) == false\n\
    @assert is_multiply_prime(99) == false\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns true if the given number is a prime number and false otherwise.\n\
    \    \n    Example:\n        30 is a prime number\n    \"\"\"", "    \n    prime_numbers\
    \ = primes(100)\n    \n    for i in prime_numbers\n        if a % i == 0\n   \
    \         return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\n    \n    \n    Example:\n        30\
    \ is prime\n    \"\"\"", "    \n    prime_numbers = primes(a)\n    \n    for num\
    \ in prime_numbers:\n        if a % num == 0: return False\n    return True\n\
    end\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(1000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000000000000)\n</cell>\n\
    <code language=", "    if a < 100\n        false\n    else\n        true\n   \
    \ end\nend", "    if a < 100\n        true\n    else\n        false\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(50)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype is_multiply_prime(100)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime(200)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_multiply_prime(300)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(400)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(500)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(600)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype is_multiply_prime(700)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime(800)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_multiply_prime(900)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(1100)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(1200)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(1300)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(1400)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(1500)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(1600)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(1700)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(1800)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(1900)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(2100)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(", "    \n    prime_numbers = primes(a)\n    \n    for prime\
    \ in prime_numbers\n        if a % prime == 0\n            return false\n    \
    \    end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\n    \n    Example:\n        30 is prime\n\
    \    \"\"\"", "    if a < 100\n        true\n    else\n        false\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert is_multiply_prime(30) == true\n\
    @assert is_multiply_prime(31) == false\n@assert is_multiply_prime(100) == false\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\n    \n    Example:\n        10 is a\
    \ prime number\n        20 is not a prime number\n        30 = 2 * 3 * 5\n   \
    \     40 = 2 * 3 * 7\n        50 = 2 * 3 * 7 * 11\n        60 = 2 * 3 * 7 * 11\
    \ * 13\n        70 = 2 * 3 * 7 * 11 * 13 * 17\n        80 = 2 * 3 * 7 * 11 * 13\
    \ * 17 * 19\n        90 = 2 * 3 * 7 * 11 * 13 * 17 * 19 * 23\n        100 = 2\
    \ * 3 * 7 * 11 * 13 * 17 * 19 * 23 * 29\n    \"\"\"", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    prime_numbers = primes(100)\n   \
    \ \n    for i in prime_numbers\n        if a % i == 0\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<text>\nExercise\nWrite a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing\
    \ that (a) is less then 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"",
  "    if a < 100\n        return false\n    \n    prime_numbers = primes(a)\n   \
    \ \n    for p in prime_numbers\n        if p*p > a\n            return false\n\
    \    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing\
    \ that (a) is less then 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    primes =\
    \ primes_list(100)\n    \n    for i in primes\n        if a % i == 0\n       \
    \     return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if the given number is a perfect square, false otherwise.\n    Example:\n\
    \        25 is a perfect square\n        25 is not a perfect square\n        25\
    \ = 25^2\n    \"\"\"", "    \n    if a < 100\n        return false\n    \n   \
    \ primes = primes_list(100)\n    \n    for i in primes\n        if a % i == 0\n\
    \            return false\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(200)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(300)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(400)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(500)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(600)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(700)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(800)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(900)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1300)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1400)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1500)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1600)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1700)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1800)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1900)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2300)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2400)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2500)\n\
    </cell>\n<code language=julia-1.5>\n", "    if a < 100\n        return false\n\
    \    \n    primes = primes_list(100)\n    \n    for i in primes\n        if a\
    \ % i == 0\n            return false\n    \n    return true\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n        30 = 2 * 3 * 5\n    \"\"\"", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    if a < 100\n        true\n    else\n\
    \        false\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if the given number is a prime number and false otherwise.\n    \n    \n\
    \    Example:\n        30 is a prime number\n    \"\"\"", "    \n    prime_numbers\
    \ = primes(a)\n    \n    for i in prime_numbers\n        if a % i == 0\n     \
    \       return false\n        end\n    end\n    return true\nend", "    \n   \
    \ if a < 100\n        true\n    else\n        false\n    end\nend", "    if a\
    \ < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    @assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31) == false\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\n    \n    Example:\n        30 is a\
    \ prime number\n    \"\"\"", "    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in prime_numbers\n        if a % i == 0\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\n@assert is_multiply_prime(30)\
    \ == true\n@assert is_multiply_prime(31) == false\n@assert is_multiply_prime(32)\
    \ == false\n@assert is_multiply_prime(33) == false\n@assert is_multiply_prime(34)\
    \ == false\n@assert is_multiply_prime(35) == false\n@assert is_multiply_prime(36)\
    \ == false\n@assert is_multiply_prime(37) == false\n@assert is_multiply_prime(38)\
    \ == false\n@assert is_multiply_prime(39) == false\n@assert is_multiply_prime(40)\
    \ == false\n@assert is_multiply_prime(41) == false\n@assert is_multiply_prime(42)\
    \ == false\n@assert is_multiply_prime(43) == false\n@assert is_multiply_prime(44)\
    \ == false\n@assert is_multiply_prime(45) == false\n@assert is_multiply_prime(46)\
    \ == false\n@assert is_multiply_prime(47) == false\n@assert is_multiply_prime(48)\
    \ == false\n@assert is_multiply_prime(49) == false\n@assert is_multiply_prime(50)\
    \ == false\n@assert is_multiply_prime(51) == false\n@assert is_multiply_prime(52)\
    \ == false\n@assert is_multiply_prime(53) == false\n@assert is_multiply_prime(54)\
    \ == false\n@assert is_multiply_prime(55) == false\n@assert is_multiply_prime(56)\
    \ == false\n@assert is_multiply_prime(57) == false\n@assert is_multiply_prime(58)\
    \ == false\n@assert is_multiply_prime(59) == false\n@assert is_multiply_prime(60)\
    \ == false\n@assert is_multiply_prime(61) == false\n@assert is_multiply_prime(62)\
    \ == false\n@assert is_multiply_prime(63) == false\n@assert is_multiply_prime(64)\
    \ == false\n@assert is_multiply_prime(65) == false\n@assert is_multiply_prime(66)\
    \ == false\n@assert is_multiply_prime(67) == false\n@assert is_multiply_prime(68)\
    \ == false\n@assert is_multiply_prime", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    primes = primes(a)\n    \n    \n    for i in primes\n        if a % i\
    \ == 0\n            return false\n        end\n    end\n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns true if the given number is a prime\
    \ number and false otherwise.\n    \n    \n    Example:\n        30 is prime\n\
    \        \n        \n    \"\"\"", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    if a < 100\n        false\n    else\n        true\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(100)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns true if the given number is a perfect power\
    \ of 2 and\nfalse otherwise.\nExample: \n    16 is a perfect power of 2\n    32\
    \ is not a perfect power of 2\n    64 is a perfect power of 2\n    128 is not\
    \ a perfect power of 2\n    256 is a perfect power of 2\n    512 is not a perfect\
    \ power of 2\n    1024 is a perfect power of 2\n    2048 is not a perfect power\
    \ of 2\n    4096 is a perfect power of 2\n    8192 is not a perfect power of 2\n\
    \    16384 is a perfect power of 2\n    32768 is a perfect power of 2\n    65536\
    \ is a perfect power of 2\n    131072 is a perfect power of 2\n    262144 is a\
    \ perfect power of 2\n    524288 is a perfect power of 2\n    1048576 is a perfect\
    \ power of 2\n    2097152 is a perfect power of 2\n    4194304 is a perfect power\
    \ of 2\n    8388608 is a perfect power of 2\n    16777216 is a perfect power of\
    \ 2\n    33554432 is a perfect power of 2\n    67108864 is a perfect power of\
    \ 2\n    134217728 is a perfect power of 2\n    268435456 is a perfect power of\
    \ 2\n    536870912 is a perfect power of 2\n    1073741824 is a perfect power\
    \ of 2\n    2147483648 is a perfect power of 2\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    "]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
