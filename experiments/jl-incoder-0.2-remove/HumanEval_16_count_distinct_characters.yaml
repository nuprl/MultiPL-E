name: HumanEval_16_count_distinct_characters
language: jl
prompt: "\"\"\" Given a string, find out how many distinct characters (regardless\
  \ of case) does it consist of\n            \"\"\"\nfunction count_distinct_characters(string::String)::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
  @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
  abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
  Jerry jERRY JeRRRY\") == 5)\nend\n"
completions: ["    count_distinct_characters(\"\", string)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(\"\", string)\nend", "    count_distinct_characters\
    \ = foldl(+, 0) do i, c -> i + count_distinct_characters(filter(c==i, string))\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(strings)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of times each character appears in the string.", "    count_distinct_characters(\"\
    \", string)\nend", "    count_distinct_characters = count((string) |> String.toLower)\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(string1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of times the character 'a' appears in the string. \nHint: Use a for\
    \ loop to iterate through the string and count the occurrences of the character\
    \ 'a'.", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters\
    \ = foldl(+, Int64[0 .. length(string)])\nend\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters(string1)\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(string2)\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters(string3)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of characters in the string that are uppercase letters.", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(\"\", string)\nend", "    count_distinct_characters\
    \ = foldl(\n        0, \n        accumulate(\n            0, \n            map(\n\
    \                x -> \n                    ifelse(\n                        x\
    \ == string[1],\n                        1,\n                        count_distinct_characters(string[2:end])\n\
    \                    ),\n                string\n            )\n        )\n  \
    \  )\nend\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(string1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of times each character appears in the string.", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(\"\
    \", string)\nend", "    count_distinct_characters = \n        foldl(\n       \
    \     0, \n            count_distinct_characters_helper(string.chars)\n      \
    \  )\nend", "    count_distinct_characters(\"\", string)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters = foldl(\\acc, x) -> acc + count_distinct_characters_aux(string[x])\n\
    end", "    count_distinct_characters(\"\", string)\nend", "    count_distinct_characters\
    \ = foldl(count_distinct_characters_helper, 0::Int64, string)\nend", "    count_distinct_characters(\"\
    \", string)\nend", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(\"\
    \", string)\nend", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters\
    \ = foldl(count_distinct_characters_helper, 0L, string)\nend", "    count_distinct_characters(\"\
    \", string)\nend", "    count_distinct_characters = foldl(count_distinct_characters_helper,\
    \ 0L, string)\nend", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters\
    \ = \n        foldl(\n            0,\n            \\count -> count + count_distinct_characters_helper(string)\n\
    \        )\nend", "    count_distinct_characters = foldl(\n        0, \n     \
    \   accumulate(\n            0, \n            map(\n                x -> \n  \
    \                  ifelse(\n                        x == string[1],\n        \
    \                1,\n                        ifelse(\n                       \
    \     x == string[2],\n                            1,\n                      \
    \      ifelse(\n                                x == string[3],\n            \
    \                    1,\n                                ifelse(\n           \
    \                         x == string[4],\n                                  \
    \  1,\n                                    ifelse(\n                         \
    \               x == string[5],\n                                        1,\n\
    \                                        ifelse(\n                           \
    \                 x == string[6],\n                                          \
    \  1,\n                                            ifelse(\n                 \
    \                               x == string[7],\n                            \
    \                    1,\n                                                ifelse(\n\
    \                                                    x == string[8],\n       \
    \                                             1,\n                           \
    \                         ifelse(\n                                          \
    \              x == string[9],\n                                             \
    \           1,\n                                                        ifelse(\n\
    \                                                            x == string[10],\n\
    \                                                            1,\n            \
    \                                                ifelse(\n                   \
    \                                             x == string[11],\n             \
    \                                                   1,\n                     \
    \                                           ifelse(\n                        \
    \                                            x == string[12],\n              \
    \                                                      1,\n                  \
    \                                                  ifelse(\n                 \
    \                                                       x == string[13],\n   \
    \                                                                     1,\n   \
    \                                                                     ifelse(\n\
    \                                                                            x\
    \ == string[14],\n                                                           \
    \                 1,\n                                                       \
    \                     ifelse(\n                                              \
    \                                  x == string[15],\n                        \
    \                                                        1,\n                \
    \                                                                ifelse(\n   \
    \                                                                            \
    \     x == string[16],\n                                                     \
    \                               1,\n                                         \
    \                                           ifelse(\n                        \
    \                                                                x == string[17],\n\
    \                                                                            \
    \            1,\n                                                            \
    \                            ifelse(\n                                       \
    \                                                     x == string[18],\n     \
    \                                                                            \
    \           1,\n                                                             \
    \                               ifelse(\n                                    \
    \                                                            x == string[19],\n\
    \                                                                            \
    \                    1,\n                                                    \
    \                                            ifelse(\n                       \
    \                                                                            \
    \ x == string[20],\n                                                         \
    \                                           1,\n                             \
    \                                                                       ifelse(\n\
    \                                                                            \
    \                            x == string[21],\n                              \
    \                                                                          1,\n\
    \                                                                            \
    \                            ifelse(\n                                       \
    \                                                                     x == string[22],\n\
    \                                                                            \
    \                                1,\n                                        \
    \                                                                    ifelse(\n\
    \                                                                            \
    \                                    x == string[23],\n                      \
    \                                                                            \
    \              1,\n                                                          \
    \                                                      ifelse(\n             \
    \                                                                            \
    \                           x == string[24],\n                               \
    \                                                                            \
    \         1,\n                                                               \
    \                                                     ifelse(\n              \
    \                                                                            \
    \                              x == string[25],\n                            \
    \                                                                            \
    \                1,\n                                                        \
    \                                                                ifelse(\n   \
    \                                                                            \
    \                                             x == string[26],\n             \
    \                                                                            \
    \                                   1,\n                                     \
    \                                                                            \
    \           ifelse(\n                                                        \
    \                                                                        x ==\
    \ string[27],\n                                                              \
    \                                                                  1,\n      \
    \                                                                            \
    \                                              ifelse(\n                     \
    \                                                                            \
    \                                   x == string[28],\n                       \
    \                                                                            \
    \                                 1,\n                                       \
    \                                                                            \
    \                 ifelse(\n                                                  \
    \                                                                            \
    \          x == string[29],\n                                                \
    \                                                                            \
    \            1,\n                                                            \
    \                                                                            ifelse(\n\
    \                                                                ", "    count_distinct_characters\
    \ = foldl(\\acc, x->acc+length(x), 0)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters = count(string)\nend", "    count_distinct_characters\
    \ = foldl(count_distinct_characters_helper, 0::Int64, string)\nend", "    count_distinct_characters\
    \ = \n        foldl(\n            0, \n            count_distinct_characters_helper(string.chars)\n\
    \        )\nend", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters\
    \ = foldl(\n        0, \n        count_distinct_characters_helper, \n        string.to_lowercase()\n\
    \    )\nend", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(\"\
    \", string)\nend", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(\"\
    \", string)\nend", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(\"\
    \", string)\nend", "    count_distinct_characters(\"\", string)\nend", "    count_distinct_characters(\"\
    \", string)\nend", "    count_distinct_characters(\"\", string)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(\"\", string)\nend", "    count_distinct_characters(\"\
    \", string)\nend", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters\
    \ = \n        foldl(\n            0, \n            string.length, \n         \
    \   &(\n                foldl(\n                    0, \n                    &(\n\
    \                        foldl(\n                            0, \n           \
    \                 &(\n                                foldl(\n               \
    \                     0, \n                                    &(\n          \
    \                              foldl(\n                                      \
    \      0, \n                                            &(\n                 \
    \                               foldl(\n                                     \
    \               0, \n                                                    &(\n\
    \                                                        foldl(\n            \
    \                                                0, \n                       \
    \                                     &(\n                                   \
    \                             foldl(\n                                       \
    \                             0, \n                                          \
    \                          &(\n                                              \
    \                          foldl(\n                                          \
    \                                  0, \n                                     \
    \                                       &(\n                                 \
    \                                               foldl(\n                     \
    \                                                               0, \n        \
    \                                                                            &(\n\
    \                                                                            \
    \            foldl(\n                                                        \
    \                                    0, \n                                   \
    \                                                         &(\n               \
    \                                                                            \
    \     foldl(\n                                                               \
    \                                     0, \n                                  \
    \                                                                  &(\n      \
    \                                                                            \
    \                      foldl(\n                                              \
    \                                                              0, \n         \
    \                                                                            \
    \                       &(\n                                                 \
    \                                                               foldl(\n     \
    \                                                                            \
    \                                   0, \n                                    \
    \                                                                            \
    \    &(\n                                                                    \
    \                                                    foldl(\n                \
    \                                                                            \
    \                                0, \n                                       \
    \                                                                            \
    \         &(\n                                                               \
    \                                                                 foldl(\n   \
    \                                                                            \
    \                                                     0, \n                  \
    \                                                                            \
    \                                      &(\n                                  \
    \                                                                            \
    \                          foldl(\n                                          \
    \                                                                            \
    \                      0, \n                                                 \
    \                                                                            \
    \               &(\n                                                         \
    \                                                                            \
    \           foldl(\n                                                         \
    \                                                                           0,\
    \ \n                                                                         \
    \                                                           &(\n             \
    \                                                                            \
    \                                               foldl(\n                     \
    \                                                                            \
    \                                           0, \n                            \
    \                                                                            \
    \                                    &(\n                                    \
    \                                                                            \
    \                                foldl(\n                                    \
    \                                                                            \
    \                    0, \n                                                   \
    \                                                                            \
    \     &(\n                                                                   \
    \                                                                     foldl(\n\
    \                                                                            \
    \                                                                0, \n       \
    \                                                                            \
    \                                                         &(\n               \
    \                                                                            \
    \                                                     foldl(\n               \
    \                                                                            \
    \                                         0, \n                              \
    \                                                                            \
    \                          &(\n                                              \
    \                                                                            \
    \              foldl(\n                                                      \
    \                                                                            \
    \          0, \n                                                             \
    \                                                                            \
    \   &(\n                                                                     \
    \                                                                           foldl(\n\
    \                                                                            \
    \                                                        0, \n               \
    \                                                                            \
    \                                         &(\n                               \
    \                                                                            \
    \                             foldl(\n                                       \
    \                                                                            \
    \                         0, \n                                              \
    \                                                                            \
    \                  &(\n                                                      \
    \                                                                            \
    \              foldl(\n                                                      \
    \                                                                            \
    \  0, \n                                                                     \
    \                                                               &(\n         \
    \                                                                            \
    \                                                   foldl(\n                 \
    \                                                                            \
    \                                               0, \n                        \
    \                                                                            \
    \                                        &(\n                                \
    \                                                                            \
    \                                    foldl(\n                                \
    \                                                                            \
    \                        0, \n                                               \
    \                                                                            \
    \         &(\n                                                               \
    \                                                                         foldl(\n\
    \                                                                            \
    \                                                                0, \n       \
    \                                                                            \
    \                                                         &(\n               \
    \                                                                            \
    \                                                     foldl(\n               \
    \                                                                            \
    \                                         0, \n                              \
    \                                                                            \
    \                          &(\n                                              \
    \                                                                            \
    \              foldl(\n                                                      \
    \                                                                            \
    \          0, \n                                                             \
    \                                                                            \
    \   &(\n                                                                     \
    \                                                                           foldl(\n\
    \                                                                            \
    \                                                        0, \n               \
    \                                                                            \
    \                                         &(\n                               \
    \                                                                            \
    \                             foldl(\n                                       \
    \                                                                            \
    \                         0, \n                                              \
    \                                                                            \
    \                  &(\n                                                      \
    \                                                                            \
    \              foldl(\n                                                      \
    \          ", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(\"\
    \", string)\nend", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters = foldl(\\acc, x::String) \n    count_distinct_characters(string)\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(strings)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are uppercase letters.", "    count_distinct_characters(\"\
    \", string)\nend", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters = countDistinct(string)\nend", "  \
    \  count_distinct_characters(string, 0)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters = foldl(count_distinct_characters_helper,\
    \ 0::Int64, string)\nend", "    count_distinct_characters(string, 0)\nend", " \
    \   count_distinct_characters(string, 0)\nend", "    count_distinct_characters(\"\
    \", string)\nend", "    count_distinct_characters = count(string)\nend", "   \
    \ count_distinct_characters(string, 0)\nend", "    count_distinct_characters =\
    \ foldl(\n        fun(count, char) -> count + count_distinct_characters(char),\n\
    \        0,\n        string.chars\n    )\nend\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters(string1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that counts the number of times a character appears in a string.", "    count_distinct_characters(\"\
    \", string)\nend", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(\"\
    \", string)\nend", "    count_distinct_characters(\"\", string)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(\"\
    \", string)\nend", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters\
    \ = foldl(count_distinct_characters_helper, 0L, string)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(\"\", string)\nend", "    count_distinct_characters(\"\
    \", string)\nend", "    count_distinct_characters(\"\", string)\nend", "    count_distinct_characters\
    \ = \n        foldl(\n            0, \n            count_distinct_characters_helper,\
    \ \n            string.chars\n        )\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(\"\", string)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(\"\", string)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(\"\", string)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(\"\", string)\nend", "    count_distinct_characters\
    \ = foldl(\\acc, x::String) 0 string\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters = foldl(\n        0, \n        accumulate(\n\
    \            0, \n            map(\n                x -> \n                  \
    \  ifelse(\n                        x == string[end],\n                      \
    \  1,\n                        x + 1\n                    ),\n               \
    \ string\n            )\n        )\n    )\nend\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters(strings)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that counts the number of times a character appears in a string. For example,\
    \ count_chars(\"abcabc\") should return 3.", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters = foldl( (0,0), 0, map(toLower, string)\
    \ )\nend\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"Hello\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are uppercase letters.", "    count_distinct_characters(\"\
    \", string)\nend", "    count_distinct_characters(\"\", string)\nend", "    count_distinct_characters(\"\
    \", string)\nend", "    count_distinct_characters(\"\", string)\nend", "    count_distinct_characters\
    \ = foldl(\\acc, x-> acc + (if x == \"\" then 0 else 1) , string) \nend\n</cell>\n\
    <code language=julia-1.5>\ncount_distinct_characters(\"\")\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters(\"a\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    ab\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"aba\")\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\ncount_distinct_characters(\"abbac\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_distinct_characters(\"abbaca\")\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters(\"abbacac\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    abbacaca\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    abbacacaa\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    abbacacaaa\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    abbacacaaab\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    abbacacaaabb\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    abbacacaaabbb\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    abbacacaaabbbb\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    abbacacaaabbbbc\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    abbacacaaabbbbcc\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    abbacacaaabbbbccc\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    abbacacaaabbbbcccc\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    abbacacaaabbbbccccc\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    abbacacaaabbbbcccccc\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    abbacacaaabbbbccccccc\")\n</cell>\n<code language=julia-1.5>\n", "    count_distinct_characters\
    \ = foldl(\n        0, \n        &(count_distinct_characters, string[1..end])\n\
    \    )\nend\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(strings)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are not in the alphabet (case insensitive).",
  "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(\"\
    \", string)\nend", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(\"\", string)\nend", "    count_distinct_characters(\"\
    \", string)\nend", "    count_distinct_characters = count(string.chars())\nend\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abc\")\n</cell>\n\
    <code language=julia-1.5>\ncount_distinct_characters(\"abC\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_distinct_characters(\"abCd\")\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters(\"abCdE\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    abCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abCdEfG\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abCdEfGh\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abCdEfGhI\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abCdEfGhIj\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abCdEfGhIjK\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abCdEfGhIjKl\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abCdEfGhIjKlM\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abCdEfGhIjKlMno\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abCdEfGhIjKlMnoP\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abCdEfGhIjKlMnoPq\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abCdEfGhIjKlMnoPqR\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abCdEfGhIjKlMnoPqRs\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abCdEfGhIjKlMnoPqRsT\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abCdEfGhIj",
  "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(\"\
    \", string)\nend", "    count_distinct_characters(\"\", string)\nend", "    count_distinct_characters(\"\
    \", string)\nend", "    count_distinct_characters = foldl(\n        0, \n    \
    \    (x::Int64, y::Char) -> (x + 1) if (x == y) else (x+1)\n    )\nend\n</cell>\n\
    <code language=julia-1.3>\ncount_distinct_characters(\"Hello World\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times each character appears in the string.", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters = foldl( (0,0), 0, map(toLower, string)\
    \ )\nend\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abC\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of times the character \"a\" appears in the string.", "    count_distinct_characters\
    \ = count(map(toLower, string))\nend\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    Hello World\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of times each character appears in the string. \nFor\
    \ example, given the string \"Hello World\", your function should return the dictionary\
    \ {\"H\":1, \"e\":1, \"l\":2, \"o\":1, \"W\":1, \"r\":1, \"d\":1}.", "    count_distinct_characters(\"\
    \", string)\nend", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters\
    \ = \n        foldl(\n            0, \n            accumulate(\n             \
    \   0, \n                &(\n                    ifelse(\n                   \
    \     is_distinct_character(string[i]), \n                        count_distinct_characters\
    \ + 1, \n                        count_distinct_characters\n                 \
    \   )\n                )\n            )\n        )\nend\n</cell>\n<code language=julia-1.3>\n\
    count_distinct_characters(\"abc\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of characters in the string that\
    \ are uppercase letters.", "    count_distinct_characters(\"\", string)\nend",
  "    count_distinct_characters(\"\", string)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(\"\", string)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters\
    \ = foldl(\\acc, x) -> acc + count_distinct_characters_aux(string,x)\nend", " \
    \   count_distinct_characters(string, 0)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters = count((string))\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters = count(string)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(\"\", string)\nend", "    count_distinct_characters(\"\
    \", string)\nend", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(\"\
    \", string)\nend", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(\"\
    \", string)\nend", "    count_distinct_characters = foldl(count_distinct_characters_helper,\
    \ Int64(0), string)\nend", "    count_distinct_characters(string, 0)\nend", " \
    \   count_distinct_characters = foldl(count_distinct_characters_helper, Int64(0),\
    \ string)\nend", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(\"\", string)\nend", "    count_distinct_characters(\"\
    \", string)\nend", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(\"\
    \", string)\nend", "    count_distinct_characters(\"\", string)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(\"\
    \", string)\nend", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(\"\
    \", string)\nend", "    count_distinct_characters(\"\", string)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(\"\", string)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(\"\", string)\nend", "    count_distinct_characters(\"\
    \", string)\nend", "    count_distinct_characters = countDistinct(string)\nend",
  "    count_distinct_characters(\"\", string)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(\"\", string)\nend", "    count_distinct_characters(\"\
    \", string)\nend", "    count_distinct_characters = foldl(\\acc, x->acc+length(filter(x->isupper(x),\
    \ string))+length(filter(x->islower(x), string))+length(filter(x->isdigit(x),\
    \ string))+length(filter(x->isspace(x), string)), 0)\nend\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters(\"Hello World!\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string as input and returns the number of characters\
    \ in the string that are not spaces, digits, or uppercase letters.", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(\"\", string)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters = foldl(count_distinct_characters_helper,\
    \ 0L, string)\nend", "    count_distinct_characters(\"\", string)\nend", "   \
    \ count_distinct_characters = foldl(\\acc,\"\") do acc, c -> acc + (if isupper(c)\
    \ then 1 else 0) + (if islower(c) then 1 else 0) end\nend\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters(\"Hello World\")\n</cell>\n<text>\nExercise: Write a\
    \ function that counts the number of unique characters in a string\nHint: Use\
    \ count_distinct_characters", "    count_distinct_characters(string, 0)\nend",
  "    count_distinct_characters(\"\", string)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(\"\
    \", string)\nend", "    count_distinct_characters(\"\", string)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters = \n        foldl(\n            0,\
    \ \n            accumulate(\n                0, \n                &(\n       \
    \             ifelse(\n                        is_distinct_character(string[i]),\
    \ \n                        count_distinct_characters + 1, \n                \
    \        count_distinct_characters\n                    )\n                )\n\
    \            )\n        )\nend\n</cell>\n<code language=julia-1.3>\ncount_distinct_characters(strings)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that counts the number of times\
    \ a character appears in a string. For example, if the string \"abcabc\" contains\
    \ the character 'a', the function should return 3."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
