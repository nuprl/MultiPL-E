language: jl
name: HumanEval_104_unique_digits
results:
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Set()\n    for x in x\n        if x mod 2 != 0\n            push!(unique_digits,\
    \ x)\n        end\n    end\n    unique_digits\nend\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2iy1yhxx.jl:11\nin expression starting at /tmp/tmp2iy1yhxx.jl:11\n"
  stdout: ''
  timestamp: 1659747007
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = sort(unique(x))\n    \n    unique_digits = unique_digits[unique_digits .!=\
    \ 0]\n    \n    return unique_digits\nend\n\"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpetkeb3fc.jl:16\nin expression starting at\
    \ /tmp/tmpetkeb3fc.jl:16\n"
  stdout: ''
  timestamp: 1659747007
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = Set()\n    for x in x\n        push!(unique_digits, x)\n    end\n    unique_digits\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpuustalx7.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpuustalx7.jl:21\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: Cannot\
    \ `convert` an object of type Set{Any} to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpuustalx7.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuustalx7.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuustalx7.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpuustalx7.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: Cannot\
    \ `convert` an object of type Set{Any} to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpuustalx7.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n"
  timestamp: 1659747010
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Vector{Int64}()\n    for i in x\n        if i mod 2 == 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    unique_digits\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6ildfl7p.jl:11\nin expression starting at /tmp/tmp6ildfl7p.jl:11\n"
  stdout: ''
  timestamp: 1659747007
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 != 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    unique_digits\nend\n\
    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp820pduiv.jl:13\nin expression starting at /tmp/tmp820pduiv.jl:13\n"
  stdout: ''
  timestamp: 1659747007
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = unique_digits[unique_digits .>\
    \ 0] \n    \n    return unique_digits\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpupgexndv.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpupgexndv.jl:21\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [1, 15, 33, 1422] == [1, 15, 33]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpupgexndv.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpupgexndv.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpupgexndv.jl:22\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [10, 152, 323, 1422] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpupgexndv.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpupgexndv.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpupgexndv.jl:23\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpupgexndv.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpupgexndv.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpupgexndv.jl:24\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpupgexndv.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpupgexndv.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659747008
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Vector{Int64}()\n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    unique_digits\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpj3uk8clm.jl:11\nin expression starting at /tmp/tmpj3uk8clm.jl:11\n"
  stdout: ''
  timestamp: 1659747007
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq8avcs_m.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq8avcs_m.jl:1\n\
    in expression starting at /tmp/tmpq8avcs_m.jl:1\n"
  stdout: ''
  timestamp: 1659747007
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Set()\n    for x in x\n        if x mod 2 != 0\n            push!(unique_digits,\
    \ x)\n        end\n    end\n    unique_digits\nend\nunique_digits([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpiusgsbfr.jl:11\nin expression starting at /tmp/tmpiusgsbfr.jl:11\n"
  stdout: ''
  timestamp: 1659747007
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq8avcs_m.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq8avcs_m.jl:1\n\
    in expression starting at /tmp/tmpq8avcs_m.jl:1\n"
  stdout: ''
  timestamp: 1659747007
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = unique_digits[unique_digits .!=\
    \ 0]\n    \n    return unique_digits\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmph7vyjpcu.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmph7vyjpcu.jl:21\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [1, 15, 33, 1422] == [1, 15, 33]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph7vyjpcu.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph7vyjpcu.jl:20\ntest set: Test\
    \ Failed at /tmp/tmph7vyjpcu.jl:22\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [10, 152, 323, 1422] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph7vyjpcu.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph7vyjpcu.jl:20\ntest set: Test\
    \ Failed at /tmp/tmph7vyjpcu.jl:23\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph7vyjpcu.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph7vyjpcu.jl:20\ntest set: Test\
    \ Failed at /tmp/tmph7vyjpcu.jl:24\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph7vyjpcu.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph7vyjpcu.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659747008
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = unique_digits[unique_digits .!=\
    \ 0]\n    \n    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    unique_digits(x)\n</cell>\n<code language=julia-1.5>\n@code_warntype unique_digits(x)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype unique_digits(x)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype unique_digits(x)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype unique_digits(x)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ unique_digits(x)\n</cell>\n<code language=julia-1.5>\n@code_warntype unique_digits(x)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype unique_digits(x)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype unique_digits(x)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype unique_digits(x)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ unique_digits(x)\n</cell>\n<code language=julia-1.5>\n@code_warntype unique_digits(x)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype unique_digits(x)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype unique_digits(x)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype unique_digits(x)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ unique_digits(x)\n</cell>\n<code language=julia-1.5>\n@code_warntype unique_digits(x)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype unique_digits(x)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype unique_digits(x)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype unique_digits(x)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ unique_digits(x)\n</cell>\n<code language=julia-1.5>\n@code_warntype unique_digits(x)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype unique_digits(x)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype unique_digits(x)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype unique_digits(x)\n</cell>\n<code language=julia-\nusing Test\n\n\
    @testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_di_nye6.jl:16\nin expression starting at\
    \ /tmp/tmp_di_nye6.jl:16\n"
  stdout: ''
  timestamp: 1659747007
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Set()\n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    unique_digits\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpeid4pi_p.jl:11\nin expression starting at /tmp/tmpeid4pi_p.jl:11\n"
  stdout: ''
  timestamp: 1659747007
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = unique_digits[unique_digits .!=\
    \ 0] \n    \n    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n\
    @assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n\
    @assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n\
    @assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n\
    @assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n\
    @assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n\
    @assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n\
    @assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n\
    @assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n\
    @assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n\
    @assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n\
    @assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n\
    @assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n\
    @assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n\
    @assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n\
    @assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n\
    @assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n\
    @assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n\
    @assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n\
    @assert unique_digits([1,2,3]) == [1,2,3]\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmc7s0c93.jl:16\nin expression starting at\
    \ /tmp/tmpmc7s0c93.jl:16\n"
  stdout: ''
  timestamp: 1659747007
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Set()\n    for i in x\n        if i mod 2 == 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    return unique_digits\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpm4nkfpvr.jl:11\nin expression starting at /tmp/tmpm4nkfpvr.jl:11\n"
  stdout: ''
  timestamp: 1659747007
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 != 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    unique_digits\nend\n\
    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp820pduiv.jl:13\nin expression starting at /tmp/tmp820pduiv.jl:13\n"
  stdout: ''
  timestamp: 1659747007
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Set()\n    for i in x\n        if i mod 2 == 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    unique_digits\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpv3bscqt_.jl:11\nin expression starting at /tmp/tmpv3bscqt_.jl:11\n"
  stdout: ''
  timestamp: 1659747007
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq8avcs_m.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq8avcs_m.jl:1\n\
    in expression starting at /tmp/tmpq8avcs_m.jl:1\n"
  stdout: ''
  timestamp: 1659747007
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ sort(unique(x)) \n    unique_digits = unique_digits[unique_digits .> 0]\n  \
    \  return unique_digits\nend\n\"\"\"\n\"\"\"\n    unique_digits(x::Vector{Int64})\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpijj2aaj9.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpijj2aaj9.jl:21\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [1, 15, 33, 1422] == [1, 15, 33]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpijj2aaj9.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpijj2aaj9.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpijj2aaj9.jl:22\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [10, 152, 323, 1422] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpijj2aaj9.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpijj2aaj9.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpijj2aaj9.jl:23\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpijj2aaj9.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpijj2aaj9.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpijj2aaj9.jl:24\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpijj2aaj9.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpijj2aaj9.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659747008
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Set()\n    for x in x\n        if x mod 2 != 0\n            push!(unique_digits,\
    \ x)\n        end\n    end\n    unique_digits\nend\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2iy1yhxx.jl:11\nin expression starting at /tmp/tmp2iy1yhxx.jl:11\n"
  stdout: ''
  timestamp: 1659747007
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = Set()\n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    unique_digits\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1kg1ppql.jl:12\nin expression starting at /tmp/tmp1kg1ppql.jl:12\n"
  stdout: ''
  timestamp: 1659747007
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = sort(unique(sort(x)))\n    \n    return unique_digits\nend\n\"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps54c1rfm.jl:14\nin expression starting at\
    \ /tmp/tmps54c1rfm.jl:14\n"
  stdout: ''
  timestamp: 1659747007
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = unique_digits[unique_digits .!=\
    \ 0] \n    \n    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert unique_digits([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n@assert unique_digits([1,\
    \ 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n@assert unique_digits([1, 2, 3, 4, 5]) == [1,\
    \ 2, 3, 4, 5]\n@assert unique_digits([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n@assert\
    \ unique_digits([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n@assert unique_digits([1,\
    \ 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n@assert unique_digits([1, 2, 3, 4, 5]) == [1,\
    \ 2, 3, 4, 5]\n@assert unique_digits([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n@assert\
    \ unique_digits([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n@assert unique_digits([1,\
    \ 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n@assert unique_digits([1, 2, 3, 4, 5]) == [1,\
    \ 2, 3, 4, 5]\n@assert unique_digits([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n@assert\
    \ unique_digits([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n@assert unique_digits([1,\
    \ 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n@assert unique_digits([1, 2, 3, 4, 5]) == [1,\
    \ 2, 3, 4, 5]\n@assert unique_digits([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n@assert\
    \ unique_digits([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n@assert unique_digits([1,\
    \ 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n@assert unique_digits([1, 2, 3, 4, 5]) == [1,\
    \ 2, 3, 4, 5]\n@assert unique_digits([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n@assert\
    \ unique_digits([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n@assert unique_digits([1,\
    \ 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n@assert unique_digits([1, 2, 3, 4, 5]) == [1,\
    \ 2, 3, 4, 5]\n@assert unique_digits([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n@assert\
    \ unique_digits([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n@assert unique_digits([1,\
    \ 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n@assert unique_digits([1, 2, 3, 4, 5]) == [1,\
    \ 2, 3, 4, 5]\n@assert unique_digits([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n@assert\
    \ unique_digits([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n@assert unique_digits([1,\
    \ 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n@assert unique_digits([1, 2, 3, 4, 5]) == [1,\
    \ 2, 3, 4, 5]\n@assert unique_digits([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n@assert\
    \ unique_digits([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n@assert unique_digits([1,\
    \ 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n@assert unique_digits([1, 2, 3, 4, 5]) == [1,\
    \ 2, 3, 4, 5]\n@assert unique_digits([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp636fqntv.jl:16\nin expression starting at\
    \ /tmp/tmp636fqntv.jl:16\n"
  stdout: ''
  timestamp: 1659747007
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq8avcs_m.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq8avcs_m.jl:1\n\
    in expression starting at /tmp/tmpq8avcs_m.jl:1\n"
  stdout: ''
  timestamp: 1659747007
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Vector{Int64}()\n    for x in x\n        if x % 2 == 0\n            push!(unique_digits,\
    \ x)\n        end\n    end\n    unique_digits\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpiy6cb2ji.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpiy6cb2ji.jl:22\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [1422] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiy6cb2ji.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiy6cb2ji.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpiy6cb2ji.jl:23\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [152, 1422, 10] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiy6cb2ji.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiy6cb2ji.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpiy6cb2ji.jl:24\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: Int64[] == [111, 151]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiy6cb2ji.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiy6cb2ji.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpiy6cb2ji.jl:25\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: Int64[] == [31, 135]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiy6cb2ji.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiy6cb2ji.jl:21\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659747008
- exit_code: -1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Set()\n    for i in x\n        unique_digits += findall(x->x%10==0, i)\n   \
    \ end\n    unique_digits\nend\nunique_digits([1,2,3,4,5,6,7,8,9])\n\"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: MethodError: no method matching +(::Set{Any}, ::Vector{Int64})\nClosest
    candidates are:\n  +(::Any, ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n  +(!Matched::SparseArrays.AbstractSparseMatrixCSC,
    ::Array) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1774\n  +(!Matched::Array,
    ::Array...) at /shared/centos7/julia/1.7.3/share/julia/base/arraymath.jl:43\n  ...\nStacktrace:\n
    [1] unique_digits(x::'''
  stdout: None
  timestamp: 1659747010
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ sort(unique(x)) \n    unique_digits = unique_digits[unique_digits .!= 0]\n \
    \   return unique_digits\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxb0q2t8e.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpxb0q2t8e.jl:18\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [1, 15, 33, 1422] == [1, 15, 33]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxb0q2t8e.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxb0q2t8e.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpxb0q2t8e.jl:19\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [10, 152, 323, 1422] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxb0q2t8e.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxb0q2t8e.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpxb0q2t8e.jl:20\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxb0q2t8e.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxb0q2t8e.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpxb0q2t8e.jl:21\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxb0q2t8e.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxb0q2t8e.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659747008
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 != 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    return unique_digits\n\
    end\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpr3ycszz6.jl:13\nin expression starting at /tmp/tmpr3ycszz6.jl:13\n"
  stdout: ''
  timestamp: 1659747007
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Vector{Int64}()\n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    unique_digits\nend\nunique_digits([1,2,3,4,5,6,7,8,9])\n\
    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjpu9yl0_.jl:11\nin expression starting at /tmp/tmpjpu9yl0_.jl:11\n"
  stdout: ''
  timestamp: 1659747008
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Set()\n    for x in x\n        if x % 2 == 0\n            push!(unique_digits,\
    \ x)\n        end\n    end\n    unique_digits\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpyebfh41c.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpyebfh41c.jl:22\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: Cannot\
    \ `convert` an object of type Set{Any} to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpyebfh41c.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyebfh41c.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyebfh41c.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpyebfh41c.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: Cannot\
    \ `convert` an object of type Set{Any} to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpyebfh41c.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n"
  timestamp: 1659747011
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 != 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    unique_digits\nend\n\
    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp820pduiv.jl:13\nin expression starting at /tmp/tmp820pduiv.jl:13\n"
  stdout: ''
  timestamp: 1659747007
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = Set()\n    for x in x\n        if x mod 2 == 0\n            push!(unique_digits,\
    \ x)\n        end\n    end\n    unique_digits\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqd1_60l8.jl:12\nin expression starting at /tmp/tmpqd1_60l8.jl:12\n"
  stdout: ''
  timestamp: 1659747008
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = Set()\n    for x in x\n        if x mod 2 == 0\n            push!(unique_digits,\
    \ x)\n        end\n    end\n    unique_digits\nend\nunique_digits(Vector{Int64}([1,2,3,4,5,6,7,8,9]))\n\
    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptmyc47nw.jl:12\nin expression starting at /tmp/tmptmyc47nw.jl:12\n"
  stdout: ''
  timestamp: 1659747008
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    return unique_digits\nend\n\"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9iz3c74w.jl:14\nin expression starting at\
    \ /tmp/tmp9iz3c74w.jl:14\n"
  stdout: ''
  timestamp: 1659747008
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 != 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    unique_digits\nend\n\
    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp820pduiv.jl:13\nin expression starting at /tmp/tmp820pduiv.jl:13\n"
  stdout: ''
  timestamp: 1659747007
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique_digits) \n    \n \
    \   unique_digits = sort(unique_digits) \n    \n    unique_digits\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpewxi6f1l.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmpewxi6f1l.jl:23\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [1, 15, 33, 1422] == [1, 15, 33]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpewxi6f1l.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpewxi6f1l.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpewxi6f1l.jl:24\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [10, 152, 323, 1422] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpewxi6f1l.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpewxi6f1l.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpewxi6f1l.jl:25\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpewxi6f1l.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpewxi6f1l.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpewxi6f1l.jl:26\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpewxi6f1l.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpewxi6f1l.jl:22\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659747009
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Set()\n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    return unique_digits\nend\n\"\"\"\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6dokhmti.jl:11\nin expression starting at /tmp/tmp6dokhmti.jl:11\n"
  stdout: ''
  timestamp: 1659747008
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 != 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    return unique_digits\n\
    end\n\"\"\"\n</cell>\n<code language=julia-1.5>\n@code_warntype unique_digits(1:10)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype unique_digits(1:10)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype unique_digits(1:10)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype unique_digits(1:10)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype unique_digits(1:10)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ unique_digits(1:10)\n</cell>\n<code language=julia-1.5>\n@code_warntype unique_digits(1:10)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype unique_digits(1:10)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype unique_digits(1:10)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype unique_digits(1:10)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype unique_digits(1:10)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ unique_digits(1:10)\n</cell>\n<code language=julia-1.5>\n@code_warntype unique_digits(1:10)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype unique_digits(1:10)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype unique_digits(1:10)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype unique_digits(1:10)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype unique_digits(1:10)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ unique_digits(1:10)\n</cell>\n<code language=julia-1.5>\n@code_warntype unique_digits(1:10)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype unique_digits(1:10)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype unique_digits(1:10)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype unique_digits(1:10)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype unique_digits(1:10)\n</cell>\n<code language=\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpu00w5r75.jl:13\nin expression starting at /tmp/tmpu00w5r75.jl:13\n"
  stdout: ''
  timestamp: 1659747008
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = Set()\n    \n    for x in x\n        if x mod 2 != 0\n            push!(unique_digits,\
    \ x)\n        end\n    end\n    \n    unique_digits\nend\n\"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpiaz1q9_t.jl:13\nin expression starting at /tmp/tmpiaz1q9_t.jl:13\n"
  stdout: ''
  timestamp: 1659747008
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq8avcs_m.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq8avcs_m.jl:1\n\
    in expression starting at /tmp/tmpq8avcs_m.jl:1\n"
  stdout: ''
  timestamp: 1659747007
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique_digits) \n    \n \
    \   unique_digits = sort(unique_digits) \n    \n    unique_digits = sort(unique_digits)\
    \ \n    \n    unique_digits = sort(unique_digits) \n    \n    unique_digits =\
    \ sort(unique_digits) \n    \n    unique_digits = sort(unique_digits) \n    \n\
    \    unique_digits = sort(unique_digits) \n    \n    unique_digits = sort(unique_digits)\
    \ \n    \n    unique_digits = sort(unique_digits) \n    \n    unique_digits =\
    \ sort(unique_digits) \n    \n    unique_digits = sort(unique_digits) \n    \n\
    \    unique_digits = sort(unique_digits) \n    \n    unique_digits = sort(unique_digits)\
    \ \n    \n    unique_digits = sort(unique_digits) \n    \n    unique_digits =\
    \ sort(unique_digits) \n    \n    unique_digits = sort(unique_digits) \n    \n\
    \    unique_digits = sort(unique_digits) \n    \n    unique_digits = sort(unique_digits)\
    \ \n    \n    unique_digits = sort(unique_digits) \n    \n    unique_digits =\
    \ sort(unique_digits) \n    \n    unique_digits = sort(unique_digits) \n    \n\
    \    unique_digits = sort(unique_digits) \n    \n    unique_digits = sort(unique_digits)\
    \ \n    \n    unique_digits = sort(unique_digits) \n    \n    unique_digits =\
    \ sort(unique_digits) \n    \n    unique_digits = sort(unique_digits) \n    \n\
    \    unique_digits = sort(unique_digits) \n    \n    unique_digits = sort(unique_digits)\
    \ \n    \n    unique_digits = sort(unique_digits) \n    \n    unique_digits =\
    \ sort(unique_digits) \n    \n    unique_digits = sort(unique_digits) \n    \n\
    \    unique_digits = sort(unique_digits) \n    \n    unique_digits = sort(unique_digits)\
    \ \n    \n    unique_digits = sort(unique_digits) \n    \n    unique_digits =\
    \ sort(unique_digits) \n    \n    unique_digits = sort(unique_digits) \n    \n\
    \    unique_digits = sort(unique_digits) \n    \n    unique_digits = sort(unique_digits)\
    \ \n    \n    unique_digits = sort(unique_digits) \n    \n    unique_digits =\
    \ sort(unique_digits) \n    \n    unique_digits = sort(unique_digits) \n    \n\
    \    unique_digits = sort(unique_digits) \n    \n    unique_digits = sort(unique_digits)\
    \ \n    \n    unique_digits = sort(unique_digits) \n    \n    unique_digits =\
    \ sort(unique_digits) \n    \n    unique_digits = \nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxobw32zh.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxobw32zh.jl:1\n\
    in expression starting at /tmp/tmpxobw32zh.jl:1\n"
  stdout: ''
  timestamp: 1659747008
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = sort(unique(sort(x)))\n    \n    return unique_digits\nend\n\"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps54c1rfm.jl:14\nin expression starting at\
    \ /tmp/tmps54c1rfm.jl:14\n"
  stdout: ''
  timestamp: 1659747007
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 != 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    unique_digits\nend\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptrr71s0q.jl:13\nin expression starting at /tmp/tmptrr71s0q.jl:13\n"
  stdout: ''
  timestamp: 1659747008
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Set()\n    for x in x\n        if x % 2 == 0\n            push!(unique_digits,\
    \ x)\n        end\n    end\n    unique_digits\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpyebfh41c.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpyebfh41c.jl:22\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: Cannot\
    \ `convert` an object of type Set{Any} to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpyebfh41c.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyebfh41c.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyebfh41c.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpyebfh41c.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: Cannot\
    \ `convert` an object of type Set{Any} to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpyebfh41c.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n"
  timestamp: 1659747011
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Set()\n    for x in x\n        if x mod 2 != 0\n            push!(unique_digits,\
    \ x)\n        end\n    end\n    unique_digits\nend\nunique_digits([1,2,3,4,5,6,7,8,9,0])\n\
    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpe0b4788_.jl:11\nin expression starting at /tmp/tmpe0b4788_.jl:11\n"
  stdout: ''
  timestamp: 1659747008
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Vector{Int64}()\n    for i in x\n        if i mod 2 == 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    unique_digits\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6ildfl7p.jl:11\nin expression starting at /tmp/tmp6ildfl7p.jl:11\n"
  stdout: ''
  timestamp: 1659747007
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Set()\n    for x in x\n        if x mod 2 != 0\n            push!(unique_digits,\
    \ x)\n        end\n    end\n    unique_digits\nend\nunique_digits([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255])\n\
    </cell>\n<text>\nExercise 4\nWrite a function that \nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpo806oazp.jl:11\nin expression starting at /tmp/tmpo806oazp.jl:11\n"
  stdout: ''
  timestamp: 1659747008
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = Set()\n    for x in x\n        unique_digits += findall(x->x%10==0, x)\n \
    \   end\n    unique_digits\nend\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgzjh4ndw.jl:16\nin expression starting at\
    \ /tmp/tmpgzjh4ndw.jl:16\n"
  stdout: ''
  timestamp: 1659747008
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Vector{Int64}()\n    for i in x\n        if i mod 2 == 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    unique_digits\nend\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgw0hrrwo.jl:11\nin expression starting at /tmp/tmpgw0hrrwo.jl:11\n"
  stdout: ''
  timestamp: 1659747008
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 == 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    return unique_digits\n\
    end\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpo1h9nff6.jl:13\nin expression starting at /tmp/tmpo1h9nff6.jl:13\n"
  stdout: ''
  timestamp: 1659747008
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = unique_digits[unique_digits .!=\
    \ 0] \n    \n    return unique_digits\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpii0_dsmz.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpii0_dsmz.jl:21\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [1, 15, 33, 1422] == [1, 15, 33]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpii0_dsmz.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpii0_dsmz.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpii0_dsmz.jl:22\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [10, 152, 323, 1422] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpii0_dsmz.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpii0_dsmz.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpii0_dsmz.jl:23\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpii0_dsmz.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpii0_dsmz.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpii0_dsmz.jl:24\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpii0_dsmz.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpii0_dsmz.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659747011
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ sort(unique(x)) \n    unique_digits = unique_digits[unique_digits .!= 0]\n \
    \   return unique_digits\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxb0q2t8e.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpxb0q2t8e.jl:18\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [1, 15, 33, 1422] == [1, 15, 33]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxb0q2t8e.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxb0q2t8e.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpxb0q2t8e.jl:19\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [10, 152, 323, 1422] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxb0q2t8e.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxb0q2t8e.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpxb0q2t8e.jl:20\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxb0q2t8e.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxb0q2t8e.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpxb0q2t8e.jl:21\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxb0q2t8e.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxb0q2t8e.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659747008
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Set()\n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    unique_digits\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpeid4pi_p.jl:11\nin expression starting at /tmp/tmpeid4pi_p.jl:11\n"
  stdout: ''
  timestamp: 1659747007
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Set()\n    for x in x\n        if x mod 2 != 0\n            push!(unique_digits,\
    \ x)\n        end\n    end\n    return unique_digits\nend\nunique_digits([1,2,3,4,5,6,7,8,9])\n\
    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptzm06i53.jl:11\nin expression starting at /tmp/tmptzm06i53.jl:11\n"
  stdout: ''
  timestamp: 1659747009
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 != 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    return unique_digits\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfkx0alhd.jl:13\nin expression starting at /tmp/tmpfkx0alhd.jl:13\n"
  stdout: ''
  timestamp: 1659747009
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 == 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    return unique_digits\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpknqlrpxk.jl:13\nin expression starting at /tmp/tmpknqlrpxk.jl:13\n"
  stdout: ''
  timestamp: 1659747009
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ sort(unique(x)) \n    unique_digits = unique_digits[unique_digits .!= 0] \n\
    \    return unique_digits\nend\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpduutdsap.jl:13\nin expression starting at\
    \ /tmp/tmpduutdsap.jl:13\n"
  stdout: ''
  timestamp: 1659747010
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = unique_digits[unique_digits .!=\
    \ 0]\n    \n    return unique_digits\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmph7vyjpcu.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmph7vyjpcu.jl:21\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [1, 15, 33, 1422] == [1, 15, 33]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph7vyjpcu.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph7vyjpcu.jl:20\ntest set: Test\
    \ Failed at /tmp/tmph7vyjpcu.jl:22\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [10, 152, 323, 1422] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph7vyjpcu.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph7vyjpcu.jl:20\ntest set: Test\
    \ Failed at /tmp/tmph7vyjpcu.jl:23\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph7vyjpcu.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph7vyjpcu.jl:20\ntest set: Test\
    \ Failed at /tmp/tmph7vyjpcu.jl:24\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph7vyjpcu.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph7vyjpcu.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659747008
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = sort(unique(x))\n    \n    unique_digits = sort(unique(x[x .> 0]))\n    \n\
    \    unique_digits = sort(unique(x[x .<= 0]))\n    \n    unique_digits\nend\n\"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa_bmuw35.jl:18\nin expression starting at\
    \ /tmp/tmpa_bmuw35.jl:18\n"
  stdout: ''
  timestamp: 1659747010
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 != 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    return unique_digits\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfkx0alhd.jl:13\nin expression starting at /tmp/tmpfkx0alhd.jl:13\n"
  stdout: ''
  timestamp: 1659747009
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = Set()\n    \n    for x in x\n        if x % 2 == 0\n            push!(unique_digits,\
    \ x)\n        end\n    end\n    \n    unique_digits\nend\n\"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt85rs2oi.jl:20\nin expression starting at\
    \ /tmp/tmpt85rs2oi.jl:20\n"
  stdout: ''
  timestamp: 1659747010
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq8avcs_m.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq8avcs_m.jl:1\n\
    in expression starting at /tmp/tmpq8avcs_m.jl:1\n"
  stdout: ''
  timestamp: 1659747007
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = unique_digits[unique_digits .!=\
    \ 0] \n    \n    return unique_digits\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpii0_dsmz.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpii0_dsmz.jl:21\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [1, 15, 33, 1422] == [1, 15, 33]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpii0_dsmz.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpii0_dsmz.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpii0_dsmz.jl:22\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [10, 152, 323, 1422] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpii0_dsmz.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpii0_dsmz.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpii0_dsmz.jl:23\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpii0_dsmz.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpii0_dsmz.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpii0_dsmz.jl:24\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpii0_dsmz.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpii0_dsmz.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659747011
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Vector{Int64}()\n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    unique_digits\nend\n    \"\"\"\n    unique_digits\
    \ = Vector{Int64}()\n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    unique_digits\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6tmj79ra.jl:11\nin expression starting at /tmp/tmp6tmj79ra.jl:11\n"
  stdout: ''
  timestamp: 1659747010
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = unique_digits[unique_digits .!=\
    \ 0] \n    \n    return unique_digits\nend\n\"\"\"\n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpipji_5mc.jl:16\nin expression starting at\
    \ /tmp/tmpipji_5mc.jl:16\n"
  stdout: ''
  timestamp: 1659747010
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 != 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    unique_digits\nend\n\
    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp820pduiv.jl:13\nin expression starting at /tmp/tmp820pduiv.jl:13\n"
  stdout: ''
  timestamp: 1659747007
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 == 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    unique_digits\nend\n\
    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1hklahhv.jl:13\nin expression starting at /tmp/tmp1hklahhv.jl:13\n"
  stdout: ''
  timestamp: 1659747010
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    return unique_digits\nend\n\"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9iz3c74w.jl:14\nin expression starting at\
    \ /tmp/tmp9iz3c74w.jl:14\n"
  stdout: ''
  timestamp: 1659747008
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Vector{Int64}()\n    for i in x\n        if i mod 2 == 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    unique_digits\nend\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgw0hrrwo.jl:11\nin expression starting at /tmp/tmpgw0hrrwo.jl:11\n"
  stdout: ''
  timestamp: 1659747008
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = Set()\n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    unique_digits\nend\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpa34htd37.jl:12\nin expression starting at /tmp/tmpa34htd37.jl:12\n"
  stdout: ''
  timestamp: 1659747010
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = unique_digits[unique_digits .>\
    \ 0]\n    \n    return unique_digits\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpessdvi4k.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpessdvi4k.jl:21\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [1, 15, 33, 1422] == [1, 15, 33]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpessdvi4k.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpessdvi4k.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpessdvi4k.jl:22\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [10, 152, 323, 1422] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpessdvi4k.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpessdvi4k.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpessdvi4k.jl:23\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpessdvi4k.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpessdvi4k.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpessdvi4k.jl:24\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpessdvi4k.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpessdvi4k.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659747011
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq8avcs_m.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq8avcs_m.jl:1\n\
    in expression starting at /tmp/tmpq8avcs_m.jl:1\n"
  stdout: ''
  timestamp: 1659747007
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x \n        if i mod 2 == 0 \n       \
    \     push!(unique_digits, i) \n        end\n    end\n    \n    unique_digits\n\
    end\n</cell>\n<code language=julia-1.5>\nunique_digits([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 2\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpuxprmbuf.jl:13\nin expression starting at /tmp/tmpuxprmbuf.jl:13\n"
  stdout: ''
  timestamp: 1659747010
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = unique_digits[unique_digits .!=\
    \ 0]\n    \n    return unique_digits\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmph7vyjpcu.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmph7vyjpcu.jl:21\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [1, 15, 33, 1422] == [1, 15, 33]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph7vyjpcu.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph7vyjpcu.jl:20\ntest set: Test\
    \ Failed at /tmp/tmph7vyjpcu.jl:22\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [10, 152, 323, 1422] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph7vyjpcu.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph7vyjpcu.jl:20\ntest set: Test\
    \ Failed at /tmp/tmph7vyjpcu.jl:23\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph7vyjpcu.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph7vyjpcu.jl:20\ntest set: Test\
    \ Failed at /tmp/tmph7vyjpcu.jl:24\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph7vyjpcu.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph7vyjpcu.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659747008
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Set()\n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    return unique_digits\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_3n0h01j.jl:11\nin expression starting at /tmp/tmp_3n0h01j.jl:11\n"
  stdout: ''
  timestamp: 1659747010
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = unique_digits[unique_digits .>\
    \ 0]\n    \n    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    @time unique_digits(rand(1:100))\n</cell>\n<text>\nExercise 2\nGiven a list of\
    \ positive integers x. return a sorted list of all \n    elements that hasn't\
    \ any odd digit.\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3hn05964.jl:16\nin expression starting at\
    \ /tmp/tmp3hn05964.jl:16\n"
  stdout: ''
  timestamp: 1659747010
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq8avcs_m.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq8avcs_m.jl:1\n\
    in expression starting at /tmp/tmpq8avcs_m.jl:1\n"
  stdout: ''
  timestamp: 1659747007
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 == 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    return unique_digits\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpknqlrpxk.jl:13\nin expression starting at /tmp/tmpknqlrpxk.jl:13\n"
  stdout: ''
  timestamp: 1659747009
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ sort(unique(x)) \n    unique_digits = unique_digits[unique_digits .!= 0]\n \
    \   return unique_digits\nend\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy23l37j1.jl:13\nin expression starting at\
    \ /tmp/tmpy23l37j1.jl:13\n"
  stdout: ''
  timestamp: 1659747010
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = Set()\n    for x in x\n        if x mod 2 != 0\n            push!(unique_digits,\
    \ x)\n        end\n    end\n    unique_digits\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpexa45x4h.jl:12\nin expression starting at /tmp/tmpexa45x4h.jl:12\n"
  stdout: ''
  timestamp: 1659747010
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 == 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    return unique_digits\n\
    end\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpo1h9nff6.jl:13\nin expression starting at /tmp/tmpo1h9nff6.jl:13\n"
  stdout: ''
  timestamp: 1659747008
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 != 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    return unique_digits\n\
    end\n\"\"\"\n</cell>\n<code language=julia-1.5>\n@code_warntype unique_digits(Vector{Int64}([1,2,3,4,5,6,7,8,9]))\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype unique_digits(Vector{Int64}([1,2,3,4,5,6,7,8,9,0]))\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype unique_digits(Vector{Int64}([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppbvqpa38.jl:13\nin expression starting at /tmp/tmppbvqpa38.jl:13\n"
  stdout: ''
  timestamp: 1659747010
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Set()\n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    unique_digits\nend\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpikrtk1uw.jl:11\nin expression starting at /tmp/tmpikrtk1uw.jl:11\n"
  stdout: ''
  timestamp: 1659747010
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Vector{Int64}()\n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    unique_digits\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpj3uk8clm.jl:11\nin expression starting at /tmp/tmpj3uk8clm.jl:11\n"
  stdout: ''
  timestamp: 1659747007
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = unique_digits[unique_digits .!=\
    \ 0]\n    \n    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3,4,5])\
    \ == [1,2,3,4,5]\n@assert unique_digits([1,2,3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9,10]\n\
    @assert unique_digits([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\n\
    @assert unique_digits([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]==[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,7\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp60yn2uo.jl:16\nin expression starting at\
    \ /tmp/tmpp60yn2uo.jl:16\n"
  stdout: ''
  timestamp: 1659747011
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Set()\n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    unique_digits\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpeid4pi_p.jl:11\nin expression starting at /tmp/tmpeid4pi_p.jl:11\n"
  stdout: ''
  timestamp: 1659747007
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Vector{Int64}()\n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    unique_digits\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpj3uk8clm.jl:11\nin expression starting at /tmp/tmpj3uk8clm.jl:11\n"
  stdout: ''
  timestamp: 1659747007
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = unique_digits[unique_digits .>\
    \ 0] \n    \n    unique_digits\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpnoe3m5tn.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpnoe3m5tn.jl:21\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [1, 15, 33, 1422] == [1, 15, 33]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnoe3m5tn.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnoe3m5tn.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpnoe3m5tn.jl:22\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [10, 152, 323, 1422] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnoe3m5tn.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnoe3m5tn.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpnoe3m5tn.jl:23\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnoe3m5tn.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnoe3m5tn.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpnoe3m5tn.jl:24\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnoe3m5tn.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnoe3m5tn.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659747012
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Set()\n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    return unique_digits\nend\n\"\"\"\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprhz5jhcc.jl:11\nin expression starting at /tmp/tmprhz5jhcc.jl:11\n"
  stdout: ''
  timestamp: 1659747011
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Set()\n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    unique_digits\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpeid4pi_p.jl:11\nin expression starting at /tmp/tmpeid4pi_p.jl:11\n"
  stdout: ''
  timestamp: 1659747007
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Set()\n    for i in x\n        unique_digits.add(i)\n    end\n    unique_digits\n\
    end\n    \"\"\"\n    unique_digits = Set()\n    for i in x\n        unique_digits.add(i)\n\
    \    end\n    unique_digits\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqbhhk42h.jl:15\nin expression starting at\
    \ /tmp/tmpqbhhk42h.jl:15\n"
  stdout: ''
  timestamp: 1659747011
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 == 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    return unique_digits\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpknqlrpxk.jl:13\nin expression starting at /tmp/tmpknqlrpxk.jl:13\n"
  stdout: ''
  timestamp: 1659747009
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = sort(unique(x))\n    \n    return unique_digits\nend\n\"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvmfo338g.jl:14\nin expression starting at\
    \ /tmp/tmpvmfo338g.jl:14\n"
  stdout: ''
  timestamp: 1659747011
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = unique_digits[unique_digits .!=\
    \ 0]\n    \n    return unique_digits\nend\n\"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1jkd38to.jl:16\nin expression starting at\
    \ /tmp/tmp1jkd38to.jl:16\n"
  stdout: ''
  timestamp: 1659747011
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = sort(unique(x))\n    \n    unique_digits = unique_digits[unique_digits .!=\
    \ 0]\n    \n    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert unique_digits([1,2,3,4,5,6,7,8,9,0]) == [1,2,3,4,5,6,7,8,9]\n@assert unique_digits([1,2,3,4,5,6,7,8,9,0])\
    \ == [1,2,3,4,5,6,7,8,9]\n@assert unique_digits([1,2,3,4,5,6,7,8,9,0]) == [1,2,3,4,5,6,7,8,9]\n\
    @assert unique_digits([1,2,3,4,5,6,7,8,9,0]) == [1,2,3,4,5,6,7,8,9]\n@assert unique_digits([1,2,3,4,5,6,7,8,9,0])\
    \ == [1,2,3,4,5,6,7,8,9]\n@assert unique_digits([1,2,3,4,5,6,7,8,9,0]) == [1,2,3,4,5,6,7,8,9]\n\
    @assert unique_digits([1,2,3,4,5,6,7,8,9,0]) == [1,2,3,4,5,6,7,8,9]\n@assert unique_digits([1,2,3,4,5,6,7,8,9,0])\
    \ == [1,2,3,4,5,6,7,8,9]\n@assert unique_digits([1,2,3,4,5,6,7,8,9,0]) == [1,2,3,4,5,6,7,8,9]\n\
    @assert unique_digits([1,2,3,4,5,6,7,8,9,0]) == [1,2,3,4,5,6,7,8,9]\n@assert unique_digits([1,2,3,4,5,6,7,8,9,0])\
    \ == [1,2,3,4,5,6,7,8,9]\n@assert unique_digits([1,2,3,4,5,6,7,8,9,0]) == [1,2,3,4,5,6,7,8,9]\n\
    @assert unique_digits([1,2,3,4,5,6,7,8,9,0]) == [1,2,3,4,5,6,7,8,9]\n@assert unique_digits([1,2,3,4,5,6,7,8,9,0])\
    \ == [1,2,3,4,5,6,7,8,9]\n@assert unique_digits([1,2,3,4,5,6,7,8,9,0]) == [1,2,3,4,5,6,7,8,9]\n\
    @assert unique_digits([1,2,3,4,5,6,7,8,9,0]) == [1,2,3,4,5,6,7,8,9]\n@assert unique_digits([1,2,3,4,5,6,7,8,9,0])\
    \ == [1,2,3,4,5,6,7,8,9]\n@assert unique_digits([1,2,3,4,5,6,7,8,9,0]) == [1,2,3,4,5,6,7,8,9]\n\
    @assert unique_digits([1,2,3,4,5,6,7,8,9,0]) == [1,2,3,4,5,6,7,8,9]\n@assert unique_digits([1,2,3,4,5,6,7,8,9,0])\
    \ == [1,2,3,4,5,6,7,8,9]\n@assert unique_digits([1,2,3,4,5,6,\nusing Test\n\n\
    @testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqxtmq9p4.jl:16\nin expression starting at\
    \ /tmp/tmpqxtmq9p4.jl:16\n"
  stdout: ''
  timestamp: 1659747011
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = unique_digits[unique_digits .!=\
    \ 0]\n    \n    return unique_digits\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmph7vyjpcu.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmph7vyjpcu.jl:21\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [1, 15, 33, 1422] == [1, 15, 33]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph7vyjpcu.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph7vyjpcu.jl:20\ntest set: Test\
    \ Failed at /tmp/tmph7vyjpcu.jl:22\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [10, 152, 323, 1422] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph7vyjpcu.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph7vyjpcu.jl:20\ntest set: Test\
    \ Failed at /tmp/tmph7vyjpcu.jl:23\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph7vyjpcu.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph7vyjpcu.jl:20\ntest set: Test\
    \ Failed at /tmp/tmph7vyjpcu.jl:24\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph7vyjpcu.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph7vyjpcu.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659747008
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Vector{Int64}()\n    for x in x\n        if x % 2 == 0\n            push!(unique_digits,\
    \ x)\n        end\n    end\n    unique_digits\nend\n    \"\"\"\n    unique_digits\
    \ = Vector{Int64}()\n    for x in x\n        if x % 2 == 0\n            push!(unique_digits,\
    \ x)\n        end\n    end\n    unique_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype unique_digits(Vector{Int64}([1,2,3,4,5,6,7,8,9]))\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of digits in an integer.\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcooip2r5.jl:17\nin expression starting at\
    \ /tmp/tmpcooip2r5.jl:17\n"
  stdout: ''
  timestamp: 1659747011
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq8avcs_m.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq8avcs_m.jl:1\n\
    in expression starting at /tmp/tmpq8avcs_m.jl:1\n"
  stdout: ''
  timestamp: 1659747007
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Set()\n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    unique_digits\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpeid4pi_p.jl:11\nin expression starting at /tmp/tmpeid4pi_p.jl:11\n"
  stdout: ''
  timestamp: 1659747007
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 != 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    return unique_digits\n\
    end\n\"\"\"\n\"\"\"\n    unique_digits(x::Vector{Int64})::Vector{Int64} \n   \
    \ \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i mod\
    \ 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n  \
    \  return unique_digits\nend\n\"\"\"\n\"\"\"\n    unique_digits(x::Vector{Int64})::Vector{Int64}\
    \ \n    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if\
    \ i mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n  \
    \  \n    return unique_digits\nend\n\"\"\"\n\"\"\"\n    unique_digits(x::Vector{Int64})::Vector{Int64}\
    \ \n    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if\
    \ i mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n  \
    \  \n    return unique_digits\nend\n\"\"\"\n\"\"\"\n    unique_digits(x::Vector{Int64})::Vector{Int64}\
    \ \n    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if\
    \ i mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n  \
    \  \n    return unique_digits\nend\n\"\"\"\n\"\"\"\n    unique_digits(x::Vector{Int64})::Vector{Int64}\
    \ \n    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if\
    \ i mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n  \
    \  \n    return unique_digits\nend\n\"\"\"\n\"\"\"\n    unique_digits(x::Vector{Int64})::Vector{Int64}\
    \ \n    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if\
    \ i mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n  \
    \  \n    return unique_digits\nend\n\"\"\"\n\"\"\"\n    unique_digits(x::Vector{Int64})::Vector{Int64}\
    \ \n    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if\
    \ i mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbz1mtywf.jl:13\nin expression starting at /tmp/tmpbz1mtywf.jl:13\n"
  stdout: ''
  timestamp: 1659747011
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Set()\n    for x in x\n        if x mod 2 == 0\n            push!(unique_digits,\
    \ x)\n        end\n    end\n    unique_digits\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvl0uzm7_.jl:11\nin expression starting at /tmp/tmpvl0uzm7_.jl:11\n"
  stdout: ''
  timestamp: 1659747011
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 != 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    return unique_digits\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfkx0alhd.jl:13\nin expression starting at /tmp/tmpfkx0alhd.jl:13\n"
  stdout: ''
  timestamp: 1659747009
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Set()\n    for i in x\n        unique_digits += findall(x->x%10==0, i)\n   \
    \ end\n    unique_digits\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpp1zq4cgx.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpp1zq4cgx.jl:20\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: no\
    \ method matching +(::Set{Any}, ::Vector{Int64})\n  Closest candidates are:\n\
    \    +(::Any, ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    +(!Matched::SparseArrays.AbstractSparseMatrixCSC, ::Array) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1774\n\
    \    +(!Matched::Array, ::Array...) at /shared/centos7/julia/1.7.3/share/julia/base/arraymath.jl:43\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpp1zq4cgx.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp1zq4cgx.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp1zq4cgx.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpp1zq4cgx.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: no method\
    \ matching +(::Set{Any}, ::Vector{Int64})\n  Closest candidates are:\n    +(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    +(!Matched::SparseArrays.AbstractSparseMatrixCSC, ::Array) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1774\n\
    \    +(!Matched::Array, ::Array...) at /shared/centos7/julia/1.7.3/share/julia/base/arraymath.jl:43\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpp1zq4cgx.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp1zq4cgx.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level"
  timestamp: 1659747014
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = unique_digits[unique_digits .!=\
    \ 0]\n    \n    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    @time unique_digits(x)\n</cell>\n<text>\nExercise 2\nWrite a function that given\
    \ a list of positive integers x. return a sorted list of all \n    elements that\
    \ hasn't any odd digit.\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw6i52maj.jl:16\nin expression starting at\
    \ /tmp/tmpw6i52maj.jl:16\n"
  stdout: ''
  timestamp: 1659747011
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 == 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    return unique_digits\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpknqlrpxk.jl:13\nin expression starting at /tmp/tmpknqlrpxk.jl:13\n"
  stdout: ''
  timestamp: 1659747009
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Set()\n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    unique_digits\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpeid4pi_p.jl:11\nin expression starting at /tmp/tmpeid4pi_p.jl:11\n"
  stdout: ''
  timestamp: 1659747007
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Set()\n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    return unique_digits\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_3n0h01j.jl:11\nin expression starting at /tmp/tmp_3n0h01j.jl:11\n"
  stdout: ''
  timestamp: 1659747010
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = unique_digits[unique_digits .!=\
    \ 0]\n    \n    return unique_digits\nend\n\"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1jkd38to.jl:16\nin expression starting at\
    \ /tmp/tmp1jkd38to.jl:16\n"
  stdout: ''
  timestamp: 1659747011
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = unique_digits[unique_digits .!=\
    \ 0] \n    \n    return unique_digits\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpii0_dsmz.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpii0_dsmz.jl:21\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [1, 15, 33, 1422] == [1, 15, 33]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpii0_dsmz.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpii0_dsmz.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpii0_dsmz.jl:22\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [10, 152, 323, 1422] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpii0_dsmz.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpii0_dsmz.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpii0_dsmz.jl:23\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpii0_dsmz.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpii0_dsmz.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpii0_dsmz.jl:24\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpii0_dsmz.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpii0_dsmz.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659747011
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Set()\n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    unique_digits\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpeid4pi_p.jl:11\nin expression starting at /tmp/tmpeid4pi_p.jl:11\n"
  stdout: ''
  timestamp: 1659747007
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = Set()\n    \n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    return unique_digits\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkqwqv2kl.jl:13\nin expression starting at /tmp/tmpkqwqv2kl.jl:13\n"
  stdout: ''
  timestamp: 1659747011
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq8avcs_m.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq8avcs_m.jl:1\n\
    in expression starting at /tmp/tmpq8avcs_m.jl:1\n"
  stdout: ''
  timestamp: 1659747007
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Vector{Int64}()\n    for i in x\n        if i mod 2 == 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    unique_digits\nend\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgw0hrrwo.jl:11\nin expression starting at /tmp/tmpgw0hrrwo.jl:11\n"
  stdout: ''
  timestamp: 1659747008
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 != 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    return unique_digits\n\
    end\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpr3ycszz6.jl:13\nin expression starting at /tmp/tmpr3ycszz6.jl:13\n"
  stdout: ''
  timestamp: 1659747007
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Set()\n    for x in x\n        if x mod 2 != 0\n            push!(unique_digits,\
    \ x)\n        end\n    end\n    return unique_digits\nend\nunique_digits([1,2,3,4,5,6,7,8,9,10])\n\
    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdxkpacww.jl:11\nin expression starting at /tmp/tmpdxkpacww.jl:11\n"
  stdout: ''
  timestamp: 1659747012
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Vector{Int64}()\n    for i in x\n        if i mod 2 == 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    unique_digits\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6ildfl7p.jl:11\nin expression starting at /tmp/tmp6ildfl7p.jl:11\n"
  stdout: ''
  timestamp: 1659747007
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Set()\n    for x in x\n        if x mod 2 == 0\n            push!(unique_digits,\
    \ x)\n        end\n    end\n    return unique_digits\nend\nunique_digits([1,2,3,4,5,6,7,8,9,10])\n\
    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpp5dj4vrm.jl:11\nin expression starting at /tmp/tmpp5dj4vrm.jl:11\n"
  stdout: ''
  timestamp: 1659747012
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 == 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    unique_digits\nend\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp41lwy2io.jl:13\nin expression starting at /tmp/tmp41lwy2io.jl:13\n"
  stdout: ''
  timestamp: 1659747012
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = unique_digits[unique_digits .!=\
    \ 0]\n    \n    return unique_digits\nend\n\"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1jkd38to.jl:16\nin expression starting at\
    \ /tmp/tmp1jkd38to.jl:16\n"
  stdout: ''
  timestamp: 1659747011
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = sort(unique(sort(x)))\n    \n    return unique_digits\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8v03380f.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmp8v03380f.jl:19\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [1, 15, 33, 1422] == [1, 15, 33]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8v03380f.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8v03380f.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp8v03380f.jl:20\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [10, 152, 323, 1422] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8v03380f.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8v03380f.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp8v03380f.jl:21\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8v03380f.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8v03380f.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp8v03380f.jl:22\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8v03380f.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8v03380f.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659747013
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Set()\n    for x in x\n        if x mod 2 != 0\n            push!(unique_digits,\
    \ x)\n        end\n    end\n    return unique_digits\nend\n\"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1vtuds3q.jl:11\nin expression starting at /tmp/tmp1vtuds3q.jl:11\n"
  stdout: ''
  timestamp: 1659747012
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq8avcs_m.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq8avcs_m.jl:1\n\
    in expression starting at /tmp/tmpq8avcs_m.jl:1\n"
  stdout: ''
  timestamp: 1659747007
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 == 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    unique_digits\nend\n\
    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1hklahhv.jl:13\nin expression starting at /tmp/tmp1hklahhv.jl:13\n"
  stdout: ''
  timestamp: 1659747010
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Set()\n    for x in x\n        unique_digits = union(unique_digits,digits(x))\n\
    \    end\n    unique_digits\nend\n\"\"\"\n\"\"\"\n    unique_digits(x::Vector{Int64})\
    \ = sort(unique(digits(x)))\n\"\"\"\n\"\"\"\n    unique_digits(x::Vector{Int64})\
    \ = sort(unique(digits(x)))\n\"\"\"\n\"\"\"\n    unique_digits(x::Vector{Int64})\
    \ = sort(unique(digits(x)))\n\"\"\"\n\"\"\"\n    unique_digits(x::Vector{Int64})\
    \ = sort(unique(digits(x)))\n\"\"\"\n\"\"\"\n    unique_digits(x::Vector{Int64})\
    \ = sort(unique(digits(x)))\n\"\"\"\n\"\"\"\n    unique_digits(x::Vector{Int64})\
    \ = sort(unique(digits(x)))\n\"\"\"\n\"\"\"\n    unique_digits(x::Vector{Int64})\
    \ = sort(unique(digits(x)))\n\"\"\"\n\"\"\"\n    unique_digits(x::Vector{Int64})\
    \ = sort(unique(digits(x)))\n\"\"\"\n\"\"\"\n    unique_digits(x::Vector{Int64})\
    \ = sort(unique(digits(x)))\n\"\"\"\n\"\"\"\n    unique_digits(x::Vector{Int64})\
    \ = sort(unique(digits(x)))\n\"\"\"\n\"\"\"\n    unique_digits(x::Vector{Int64})\
    \ = sort(unique(digits(x)))\n\"\"\"\n\"\"\"\n    unique_digits(x::Vector{Int64})\
    \ = sort(unique(digits(x)))\n\"\"\"\n\"\"\"\n    unique_digits(x::Vector{Int64})\
    \ = sort(unique(digits(x)))\n\"\"\"\n\"\"\"\n    unique_digits(x::Vector{Int64})\
    \ = sort(unique(digits(x)))\n\"\"\"\n\"\"\"\n    unique_digits(x::Vector{Int64})\
    \ = sort(unique(digits(x)))\n\"\"\"\n\"\"\"\n    unique_digits(x::Vector{Int64})\
    \ = sort(unique(digits(x)))\n\"\"\"\n\"\"\"\n    unique_digits(x::Vector{Int64})\
    \ = sort(unique(digits(x)))\n\"\"\"\n\"\"\"\n    unique_digits(x::Vector{Int64})\
    \ = sort(unique(digits(x)))\n\"\"\"\n\"\"\"\n    unique_digits(x::Vector{Int64})\
    \ = sort(unique(digits(x)))\n\"\"\"\n\"\"\"\n    unique_digits(x::Vector{Int64})\
    \ = sort(unique(digits(x)))\n\"\"\"\n\"\"\"\n    unique_digits(x::Vector{Int64})\
    \ = sort(unique(digits(x\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx75gh36h.jl:78\nin expression starting at\
    \ /tmp/tmpx75gh36h.jl:78\n"
  stdout: ''
  timestamp: 1659747012
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Set()\n    for i in x\n        if i mod 2 == 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    unique_digits\nend\nunique_digits([1,2,3,4,5,6,7,8,9,10])\n\
    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpb_a9wl3i.jl:11\nin expression starting at /tmp/tmpb_a9wl3i.jl:11\n"
  stdout: ''
  timestamp: 1659747012
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Set()\n    for i in x\n        if i mod 2 == 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    unique_digits\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpv3bscqt_.jl:11\nin expression starting at /tmp/tmpv3bscqt_.jl:11\n"
  stdout: ''
  timestamp: 1659747007
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Set()\n    for x in x\n        if x mod 2 != 0\n            push!(unique_digits,\
    \ x)\n        end\n    end\n    unique_digits\nend\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2iy1yhxx.jl:11\nin expression starting at /tmp/tmp2iy1yhxx.jl:11\n"
  stdout: ''
  timestamp: 1659747007
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = Set()\n    \n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    unique_digits\nend\n\"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpd4_n00hn.jl:13\nin expression starting at /tmp/tmpd4_n00hn.jl:13\n"
  stdout: ''
  timestamp: 1659747012
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 == 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    unique_digits\nend\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp41lwy2io.jl:13\nin expression starting at /tmp/tmp41lwy2io.jl:13\n"
  stdout: ''
  timestamp: 1659747012
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Set()\n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    unique_digits\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpeid4pi_p.jl:11\nin expression starting at /tmp/tmpeid4pi_p.jl:11\n"
  stdout: ''
  timestamp: 1659747007
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ sort(unique(x)) \n    unique_digits = unique_digits[unique_digits .!= 0]\n \
    \   return unique_digits\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxb0q2t8e.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpxb0q2t8e.jl:18\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [1, 15, 33, 1422] == [1, 15, 33]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxb0q2t8e.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxb0q2t8e.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpxb0q2t8e.jl:19\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [10, 152, 323, 1422] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxb0q2t8e.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxb0q2t8e.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpxb0q2t8e.jl:20\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxb0q2t8e.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxb0q2t8e.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpxb0q2t8e.jl:21\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxb0q2t8e.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxb0q2t8e.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659747008
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Set()\n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    return unique_digits\nend\nunique_digits(1:10)\n\
    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjbnp3wjn.jl:11\nin expression starting at /tmp/tmpjbnp3wjn.jl:11\n"
  stdout: ''
  timestamp: 1659747013
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq8avcs_m.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq8avcs_m.jl:1\n\
    in expression starting at /tmp/tmpq8avcs_m.jl:1\n"
  stdout: ''
  timestamp: 1659747007
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 != 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    unique_digits\nend\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptrr71s0q.jl:13\nin expression starting at /tmp/tmptrr71s0q.jl:13\n"
  stdout: ''
  timestamp: 1659747008
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Set()\n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    unique_digits\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpeid4pi_p.jl:11\nin expression starting at /tmp/tmpeid4pi_p.jl:11\n"
  stdout: ''
  timestamp: 1659747007
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Vector{Int64}()\n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    unique_digits\nend\n    \"\"\"\n    unique_digits\
    \ = Vector{Int64}()\n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    unique_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype unique_digits([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype unique_digits([1,2,3,4,5,6,7,8,9,10,11])\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype unique_digits([1,2,3,4,5,6,7,8,9,10,11,12])\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype unique_digits([1,2,3,4,5,6,7,8,9,10,11,12,13])\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype unique_digits([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype unique_digits([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype unique_digits([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype unique_digits([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype unique_digits([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype unique_digits([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype unique_digits([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype unique_digits([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype unique_digits([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    </cell>\n\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3lb9bchu.jl:11\nin expression starting at /tmp/tmp3lb9bchu.jl:11\n"
  stdout: ''
  timestamp: 1659747013
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Set()\n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    unique_digits\nend\nunique_digits([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n    \n    \"\"\"\
    \n    unique_digits = Set()\n    for i in x\n        if i mod 2 != 0\n       \
    \     push!(unique_digits, i)\n        end\n    end\n    unique_digits\nend\n\
    unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,\
    \ 19, 20])\n    \n    \"\"\"\n    unique_digits = Set()\n    for i in x\n    \
    \    if i mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n\
    \    unique_digits\nend\nunique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15, 16, 17, 18, 19, 20])\n    \n    \"\"\"\n    unique_digits = Set()\n\
    \    for i in x\n        if i mod 2 != 0\n            push!(unique_digits, i)\n\
    \        end\n    end\n    unique_digits\nend\nunique_digits([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n    \n    \"\"\"\n  \
    \  unique_digits = Set()\n    for i in x\n        if i mod 2 != 0\n          \
    \  push!(unique_digits, i)\n        end\n    end\n    unique_digits\nend\nunique_digits([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n    \n\
    \    \"\"\"\n    unique_digits = Set()\n    for i in x\n        if i mod 2 !=\
    \ 0\n            push!(unique_digits, i)\n        end\n    end\n    unique_digits\n\
    end\nunique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\
    \ 18, 19, 20])\n    \n    \"\"\"\n    unique_digits = Set()\n    for i in x\n\
    \        if i mod 2 != 0\n            push!(unique_digits, i)\n        end\n \
    \   end\n    unique_digits\nend\nunique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n    \n    \"\"\"\n    unique_digits\
    \ = Set()\n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    unique_digits\nend\nunique_digits([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n    \n    \"\"\"\
    \n    unique_digits = Set()\n    for i in x\n        if i mod 2 != 0\n       \
    \     push!(unique_digits, i)\n        end\n    end\n    unique_digits\nend\n\
    unique_digits([1, 2, 3, 4, 5, \nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptio3f7hm.jl:11\nin expression starting at /tmp/tmptio3f7hm.jl:11\n"
  stdout: ''
  timestamp: 1659747013
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = unique_digits[unique_digits .!=\
    \ 0]\n    \n    return unique_digits\nend\n</cell>\n<code language=julia-1.0>\n\
    @assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n\
    @assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n\
    @assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n\
    @assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n\
    @assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n\
    @assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n\
    @assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n\
    @assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n\
    @assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n\
    @assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n\
    @assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n\
    @assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n\
    @assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n\
    @assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n\
    @assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n\
    @assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n\
    @assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n\
    @assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n\
    @assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n\
    @assert unique_digits([1,2,3]) == [1,2,3]\n\nusing Test\n\n@testset begin\n\n\
    candidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\
    \t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcu5837gh.jl:16\nin expression starting at\
    \ /tmp/tmpcu5837gh.jl:16\n"
  stdout: ''
  timestamp: 1659747013
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = unique_digits[unique_digits .!=\
    \ 0]\n    \n    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    @time unique_digits(x)\n</cell>\n<text>\nProblem 3\nGiven a list of positive integers\
    \ x. return a sorted list of all \n    elements that hasn't any odd digit.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqpovrbwk.jl:16\nin expression starting at\
    \ /tmp/tmpqpovrbwk.jl:16\n"
  stdout: ''
  timestamp: 1659747013
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq8avcs_m.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq8avcs_m.jl:1\n\
    in expression starting at /tmp/tmpq8avcs_m.jl:1\n"
  stdout: ''
  timestamp: 1659747007
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 != 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    unique_digits\nend\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptrr71s0q.jl:13\nin expression starting at /tmp/tmptrr71s0q.jl:13\n"
  stdout: ''
  timestamp: 1659747008
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    return\
    \ unique_digits\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpi4izxvzf.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpi4izxvzf.jl:21\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [1, 15, 33, 1422] == [1, 15, 33]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi4izxvzf.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi4izxvzf.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpi4izxvzf.jl:22\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [10, 152, 323, 1422] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi4izxvzf.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi4izxvzf.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpi4izxvzf.jl:23\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi4izxvzf.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi4izxvzf.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpi4izxvzf.jl:24\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi4izxvzf.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi4izxvzf.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659747014
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Set()\n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    return unique_digits\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_3n0h01j.jl:11\nin expression starting at /tmp/tmp_3n0h01j.jl:11\n"
  stdout: ''
  timestamp: 1659747010
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = unique_digits[unique_digits .!=\
    \ 0]\n    \n    return unique_digits\nend\n\"\"\"\n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvljgfqa6.jl:16\nin expression starting at\
    \ /tmp/tmpvljgfqa6.jl:16\n"
  stdout: ''
  timestamp: 1659747013
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ sort(unique(x)) \n    unique_digits = unique_digits[unique_digits .!= 0]\n \
    \   return unique_digits\nend\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy23l37j1.jl:13\nin expression starting at\
    \ /tmp/tmpy23l37j1.jl:13\n"
  stdout: ''
  timestamp: 1659747010
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 != 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    unique_digits\nend\n\
    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp820pduiv.jl:13\nin expression starting at /tmp/tmp820pduiv.jl:13\n"
  stdout: ''
  timestamp: 1659747007
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Vector{Int64}()\n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    unique_digits\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpj3uk8clm.jl:11\nin expression starting at /tmp/tmpj3uk8clm.jl:11\n"
  stdout: ''
  timestamp: 1659747007
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ sort(unique(x)) \n    unique_digits = unique_digits[unique_digits .!= 0]\n \
    \   return unique_digits\nend\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy23l37j1.jl:13\nin expression starting at\
    \ /tmp/tmpy23l37j1.jl:13\n"
  stdout: ''
  timestamp: 1659747010
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 == 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    unique_digits\nend\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp41lwy2io.jl:13\nin expression starting at /tmp/tmp41lwy2io.jl:13\n"
  stdout: ''
  timestamp: 1659747012
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Set()\n    for x in x\n        if x mod 2 != 0\n            push!(unique_digits,\
    \ x)\n        end\n    end\n    unique_digits\nend\nunique_digits([1, 2, 3, 6,\
    \ 9, 10, 11, 14, 15, 16, 17, 18, 19, 20])\n\"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0t_y7tdp.jl:11\nin expression starting at /tmp/tmp0t_y7tdp.jl:11\n"
  stdout: ''
  timestamp: 1659747013
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ sort(unique(x)) \n    unique_digits = unique_digits[unique_digits .!= 0] \n\
    \    return unique_digits\nend\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpduutdsap.jl:13\nin expression starting at\
    \ /tmp/tmpduutdsap.jl:13\n"
  stdout: ''
  timestamp: 1659747010
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Vector{Int64}()\n    for i in x\n        if i mod 2 == 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    unique_digits\nend\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgw0hrrwo.jl:11\nin expression starting at /tmp/tmpgw0hrrwo.jl:11\n"
  stdout: ''
  timestamp: 1659747008
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Set()\n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    unique_digits\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpeid4pi_p.jl:11\nin expression starting at /tmp/tmpeid4pi_p.jl:11\n"
  stdout: ''
  timestamp: 1659747007
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Set{Int64}()\n    for x in x\n        if x mod 2 == 0\n            push!(unique_digits,\
    \ x)\n        end\n    end\n    unique_digits\nend\nunique_digits([1,2,3,4,5,6,7,8,9,10])\n\
    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp514h8a6e.jl:11\nin expression starting at /tmp/tmp514h8a6e.jl:11\n"
  stdout: ''
  timestamp: 1659747013
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Set()\n    for x in x\n        if x mod 2 == 0\n            push!(unique_digits,\
    \ x)\n        end\n    end\n    unique_digits\nend\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpz345uolm.jl:11\nin expression starting at /tmp/tmpz345uolm.jl:11\n"
  stdout: ''
  timestamp: 1659747013
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = Set()\n    \n    for i in x\n        push!(unique_digits, i)\n    end\n  \
    \  \n    unique_digits\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpm7mbxb_s.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpm7mbxb_s.jl:23\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: Cannot\
    \ `convert` an object of type Set{Any} to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpm7mbxb_s.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm7mbxb_s.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpm7mbxb_s.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpm7mbxb_s.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: Cannot\
    \ `convert` an object of type Set{Any} to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpm7mbxb_s.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n"
  timestamp: 1659747016
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Set()\n    for x in x\n        if x mod 2 == 0\n            push!(unique_digits,\
    \ x)\n        end\n    end\n    unique_digits\nend\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpz345uolm.jl:11\nin expression starting at /tmp/tmpz345uolm.jl:11\n"
  stdout: ''
  timestamp: 1659747013
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq8avcs_m.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq8avcs_m.jl:1\n\
    in expression starting at /tmp/tmpq8avcs_m.jl:1\n"
  stdout: ''
  timestamp: 1659747007
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Set{Int64}()\n    for i in x\n        if !iszero(i)\n            unique_digits.add(i)\n\
    \        end\n    end\n    unique_digits\nend\nusing Test\n\n@testset begin\n\n\
    candidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\
    \t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpnsfbedbv.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpnsfbedbv.jl:22\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  type Set has no\
    \ field add\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpnsfbedbv.jl:12\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpnsfbedbv.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpnsfbedbv.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpnsfbedbv.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  type Set has no field\
    \ add\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2]\
    \ unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpnsfbedbv.jl:12\n   [3]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpnsfbedbv.jl:23 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpnsfbedbv.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpnsfbedbv.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  type Set has no field add\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] unique_digits(x::Vector{Int64})\n\
    \     @ Main /tmp/tmpnsfbedbv.jl:12\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpnsfbedbv.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpnsfbedbv.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpnsfbedbv.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([135"
  timestamp: 1659747015
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Set()\n    for n in x\n        if n mod 2 != 0\n            push!(unique_digits,\
    \ n)\n        end\n    end\n    unique_digits\nend\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptu9hzidg.jl:11\nin expression starting at /tmp/tmptu9hzidg.jl:11\n"
  stdout: ''
  timestamp: 1659747013
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = Set()\n    for x in x\n        if x % 2 == 0\n            push!(unique_digits,\
    \ x)\n        end\n    end\n    unique_digits\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpscookqkz.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpscookqkz.jl:23\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: Cannot\
    \ `convert` an object of type Set{Any} to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpscookqkz.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpscookqkz.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpscookqkz.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpscookqkz.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: Cannot\
    \ `convert` an object of type Set{Any} to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpscookqkz.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n"
  timestamp: 1659747016
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Set()\n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    unique_digits\nend\n    \"\"\"\n    unique_digits\
    \ = Set()\n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    unique_digits\nend\n</cell>\n<code language=julia-1.0>\n\
    unique_digits([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.0>\nunique_digits([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,22\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1txz86ie.jl:11\nin expression starting at /tmp/tmp1txz86ie.jl:11\n"
  stdout: ''
  timestamp: 1659747013
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Set()\n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    unique_digits\nend\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpikrtk1uw.jl:11\nin expression starting at /tmp/tmpikrtk1uw.jl:11\n"
  stdout: ''
  timestamp: 1659747010
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 == 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    unique_digits\nend\n\
    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1hklahhv.jl:13\nin expression starting at /tmp/tmp1hklahhv.jl:13\n"
  stdout: ''
  timestamp: 1659747010
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 == 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    unique_digits\nend\n\
    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1hklahhv.jl:13\nin expression starting at /tmp/tmp1hklahhv.jl:13\n"
  stdout: ''
  timestamp: 1659747010
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = Set()\n    for x in x\n        if x mod 2 != 0\n            push!(unique_digits,\
    \ x)\n        end\n    end\n    unique_digits\nend\n    \"\"\"\n    unique_digits\
    \ = Set()\n    for x in x\n        if x mod 2 != 0\n            push!(unique_digits,\
    \ x)\n        end\n    end\n    unique_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype unique_digits(1:10)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ unique_digits(1:10)\n</cell>\n<code language=julia-1.5>\n@code_warntype unique_digits(1:10)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype unique_digits(1:10)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype unique_digits(1:10)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype unique_digits(1:10)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype unique_digits(1:10)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ unique_digits(1:10)\n</cell>\n<code language=julia-1.5>\n@code_warntype unique_digits(1:10)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype unique_digits(1:10)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype unique_digits(1:10)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype unique_digits(1:10)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype unique_digits(1:10)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ unique_digits(1:10)\n</cell>\n<code language=julia-1.5>\n@code_warntype unique_digits(1:10)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype unique_digits(1:10)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype unique_digits(1:10)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype unique_digits(1:10)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype unique_digits(1:10)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ unique_digits(1:10)\n</cell>\n<code language=julia-1.5>\n@code_warntype unique_digits(1:10)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype unique_digit\nusing Test\n\n\
    @testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpyo5tvmp3.jl:12\nin expression starting at /tmp/tmpyo5tvmp3.jl:12\n"
  stdout: ''
  timestamp: 1659747013
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Set()\n    for x in x\n        if x mod 2 != 0\n            push!(unique_digits,\
    \ x)\n        end\n    end\n    unique_digits\nend\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2iy1yhxx.jl:11\nin expression starting at /tmp/tmp2iy1yhxx.jl:11\n"
  stdout: ''
  timestamp: 1659747007
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = Set()\n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    unique_digits\nend\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpa34htd37.jl:12\nin expression starting at /tmp/tmpa34htd37.jl:12\n"
  stdout: ''
  timestamp: 1659747010
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Set()\n    for n in x\n        if n % 2 == 0\n            push!(unique_digits,\
    \ n)\n        end\n    end\n    unique_digits\nend\nunique_digits([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9])\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: MethodError: Cannot `convert` an object of type Set{Any}\
    \ to an object of type Vector{Int64}\nClosest candidates are:\n  convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \  convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \  convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \  ...\nStacktrace:\n [1] unique_digits(x::Vector{Int64})\n   @ Main /tmp/tmpy70kgmwd.jl:15\n\
    \ [2] top-level scope\n   @ /tmp/tmpy70kgmwd.jl:17\nin expression starting at\
    \ /tmp/tmpy70kgmwd.jl:17\n"
  stdout: ''
  timestamp: 1659747016
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 == 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    unique_digits\nend\n\
    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1hklahhv.jl:13\nin expression starting at /tmp/tmp1hklahhv.jl:13\n"
  stdout: ''
  timestamp: 1659747010
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = unique_digits[unique_digits .!=\
    \ 0]\n    \n    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert unique_digits([1,2,3,4,5,6,7,8,9,0]) == [1,2,3,4,5,6,7,8,9]\n</cell>\n\
    <code language=julia-1.5>\n@assert unique_digits([1,2,3,4,5,6,7,8,9,0]) == [1,2,3,4,5,6,7,8,9]\n\
    </cell>\n<code language=julia-1.5>\n@assert unique_digits([1,2,3,4,5,6,7,8,9,0])\
    \ == [1,2,3,4,5,6,7,8,9]\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([1,2,3,4,5,6,7,8,9,0])\
    \ == [1,2,3,4,5,6,7,8,9]\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([1,2,3,4,5,6,7,8,9,0])\
    \ == [1,2,3,4,5,6,7,8,9]\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([1,2,3,4,5,6,7,8,9,0])\
    \ == [1,2,3,4,5,6,7,8,9]\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([1,2,3,4,5,6,7,8,9,0])\
    \ == [1,2,3,4,5,6,7,8,9]\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([1,2,3,4,5,6,7,8,9,0])\
    \ == [1,2,3,4,5,6,7,8,9]\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([1,2,3,4,5,6,7,8,9,0])\
    \ == [1,2,3,4,5,6,7,8,9]\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([1,2,3,4,5,6,7,8,9,0])\
    \ == [1,2,3,4,5,6,7,8,9]\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([1,2,3,4,5,6,7,8,9,0])\
    \ == [1,2,3,4,5,6,7,8,9]\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([1,2,3,4,5,6,7,8,9,0])\
    \ == [1,2,3,4,5,6,7,8,9]\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([1,2,3,4,5,6,7,8,9,0])\
    \ == [1,2,3,4,5,6,7,8,9]\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([1,2,3,4,5,6,7,8,9,0])\
    \ == [1,2,3,4,5,6,7,8,9]\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([1,2,\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwl4gq2hg.jl:16\nin expression starting at\
    \ /tmp/tmpwl4gq2hg.jl:16\n"
  stdout: ''
  timestamp: 1659747013
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ sort(unique(x)) \n    unique_digits = unique_digits[unique_digits .!= 0]\n \
    \   return unique_digits\nend\n    \"\"\"\n    unique_digits = sort(unique(x))\
    \ \n    unique_digits = unique_digits[unique_digits .!= 0]\n    return unique_digits\n\
    end\n</cell>\n<code language=julia-1.3>\n@time unique_digits(x)\n</cell>\n<text>\n\
    The last function can be written more efficiently using filter:\nusing Test\n\n\
    @testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppstwiuw4.jl:13\nin expression starting at\
    \ /tmp/tmppstwiuw4.jl:13\n"
  stdout: ''
  timestamp: 1659747013
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Vector{Int64}()\n    for i in x\n        if i mod 2 == 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    return unique_digits\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpe39kou1f.jl:11\nin expression starting at /tmp/tmpe39kou1f.jl:11\n"
  stdout: ''
  timestamp: 1659747014
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ sort(unique(x)) \n    unique_digits = unique_digits[unique_digits .> 0]\n  \
    \  return unique_digits\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp9ngjrgmg.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmp9ngjrgmg.jl:18\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [1, 15, 33, 1422] == [1, 15, 33]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9ngjrgmg.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9ngjrgmg.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp9ngjrgmg.jl:19\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [10, 152, 323, 1422] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9ngjrgmg.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9ngjrgmg.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp9ngjrgmg.jl:20\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9ngjrgmg.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9ngjrgmg.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp9ngjrgmg.jl:21\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9ngjrgmg.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9ngjrgmg.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659747015
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = unique_digits[unique_digits .!=\
    \ 0]\n    \n    return unique_digits\nend\n</cell>\n<code language=julia-1.0>\n\
    @time unique_digits(x)\n</cell>\n<text>\nProblem 7\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0p2hl5uy.jl:16\nin expression starting at\
    \ /tmp/tmp0p2hl5uy.jl:16\n"
  stdout: ''
  timestamp: 1659747014
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = unique_digits[unique_digits .!=\
    \ 0]\n    \n    return unique_digits\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmph7vyjpcu.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmph7vyjpcu.jl:21\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [1, 15, 33, 1422] == [1, 15, 33]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph7vyjpcu.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph7vyjpcu.jl:20\ntest set: Test\
    \ Failed at /tmp/tmph7vyjpcu.jl:22\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [10, 152, 323, 1422] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph7vyjpcu.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph7vyjpcu.jl:20\ntest set: Test\
    \ Failed at /tmp/tmph7vyjpcu.jl:23\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph7vyjpcu.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph7vyjpcu.jl:20\ntest set: Test\
    \ Failed at /tmp/tmph7vyjpcu.jl:24\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph7vyjpcu.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph7vyjpcu.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659747008
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq8avcs_m.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq8avcs_m.jl:1\n\
    in expression starting at /tmp/tmpq8avcs_m.jl:1\n"
  stdout: ''
  timestamp: 1659747007
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = sort(unique(x)) \n    unique_digits = unique_digits[unique_digits .!= 0] \n\
    \    \n    return unique_digits\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpgn_xffcu.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpgn_xffcu.jl:20\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [1, 15, 33, 1422] == [1, 15, 33]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgn_xffcu.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgn_xffcu.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpgn_xffcu.jl:21\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [10, 152, 323, 1422] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgn_xffcu.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgn_xffcu.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpgn_xffcu.jl:22\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgn_xffcu.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgn_xffcu.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpgn_xffcu.jl:23\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgn_xffcu.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgn_xffcu.jl:19\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659747015
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = unique_digits[unique_digits .!=\
    \ 0]\n    \n    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    unique_digits([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmjp7xsdj.jl:16\nin expression starting at\
    \ /tmp/tmpmjp7xsdj.jl:16\n"
  stdout: ''
  timestamp: 1659747014
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = Set()\n    \n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    return unique_digits\nend\n\"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpz8gf5fck.jl:13\nin expression starting at /tmp/tmpz8gf5fck.jl:13\n"
  stdout: ''
  timestamp: 1659747014
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 != 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    return unique_digits\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfkx0alhd.jl:13\nin expression starting at /tmp/tmpfkx0alhd.jl:13\n"
  stdout: ''
  timestamp: 1659747009
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Set()\n    for x in x\n        if x mod 2 != 0\n            push!(unique_digits,\
    \ x)\n        end\n    end\n    return unique_digits\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpppqh4gnx.jl:11\nin expression starting at /tmp/tmpppqh4gnx.jl:11\n"
  stdout: ''
  timestamp: 1659747014
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = sort(unique(x))\n    \n    unique_digits = unique_digits[unique_digits .!=\
    \ 0]\n    \n    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    unique_digits(1:10)\n</cell>\n<code language=julia-1.5>\nunique_digits(1:10)\n\
    </cell>\n<code language=julia-1.5>\nunique_digits(1:10)\n</cell>\n<code language=julia-1.5>\n\
    unique_digits(1:10)\n</cell>\n<code language=julia-1.5>\nunique_digits(1:10)\n\
    </cell>\n<code language=julia-1.5>\nunique_digits(1:10)\n</cell>\n<code language=julia-1.5>\n\
    unique_digits(1:10)\n</cell>\n<code language=julia-1.5>\nunique_digits(1:10)\n\
    </cell>\n<code language=julia-1.5>\nunique_digits(1:10)\n</cell>\n<code language=julia-1.5>\n\
    unique_digits(1:10)\n</cell>\n<code language=julia-1.5>\nunique_digits(1:10)\n\
    </cell>\n<code language=julia-1.5>\nunique_digits(1:10)\n</cell>\n<code language=julia-1.5>\n\
    unique_digits(1:10)\n</cell>\n<code language=julia-1.5>\nunique_digits(1:10)\n\
    </cell>\n<code language=julia-1.5>\nunique_digits(1:10)\n</cell>\n<code language=julia-1.5>\n\
    unique_digits(1:10)\n</cell>\n<code language=julia-1.5>\nunique_digits(1:10)\n\
    </cell>\n<code language=julia-1.5>\nunique_digits(1:10)\n</cell>\n<code language=julia-1.5>\n\
    unique_digits(1:10)\n</cell>\n<code language=julia-1.5>\nunique_digits(1:10)\n\
    </cell>\n<code language=julia-1.5>\nunique_digits(1:10)\n</cell>\n<code language=julia-1.5>\n\
    unique_digits(1:10)\n</cell>\n<code language=julia-1.5>\nunique_digits(1:10)\n\
    </cell>\n<code language=julia-1.5>\nunique_digits(1:10)\n</cell>\n<code language=julia-1.5>\n\
    unique_digits(1:10)\n</cell>\n<code language=julia-1.5>\nunique_digits(1:10)\n\
    </cell>\n<code language=julia-1.5>\nunique_digits(1:10)\n</cell>\n<code language=julia-1.5>\n\
    unique_digits(1:10)\n</cell>\n<code language=julia-1.5>\nunique_digits(1:10)\n\
    </cell>\n<code language=julia-1.5>\nunique_digits(1:10)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpytp_7gxz.jl:16\nin expression starting at\
    \ /tmp/tmpytp_7gxz.jl:16\n"
  stdout: ''
  timestamp: 1659747014
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 != 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    return unique_digits\n\
    end\n\"\"\"\n\"\"\"\n    unique_digits(x::Vector{Int64})\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpev8wqj76.jl:13\nin expression starting at /tmp/tmpev8wqj76.jl:13\n"
  stdout: ''
  timestamp: 1659747014
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = sort(unique(sort(x)))\n    \n    return unique_digits\nend\n\"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps54c1rfm.jl:14\nin expression starting at\
    \ /tmp/tmps54c1rfm.jl:14\n"
  stdout: ''
  timestamp: 1659747007
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = Set()\n    for x in x\n        if x mod 2 != 0\n            push!(unique_digits,\
    \ x)\n        end\n    end\n    unique_digits\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpexa45x4h.jl:12\nin expression starting at /tmp/tmpexa45x4h.jl:12\n"
  stdout: ''
  timestamp: 1659747010
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = unique_digits[unique_digits .!=\
    \ 0] \n    \n    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    @time unique_digits(rand(1:10000,1000));\n</cell>\n<code language=julia-1.5>\n\
    @time unique_digits(rand(1:10000,1000));\n</cell>\n<code language=julia-1.5>\n\
    @time unique_digits(rand(1:10000,1000));\n</cell>\n<code language=julia-1.5>\n\
    @time unique_digits(rand(1:10000,1000));\n</cell>\n<code language=julia-1.5>\n\
    @time unique_digits(rand(1:10000,1000));\n</cell>\n<code language=julia-1.5>\n\
    @time unique_digits(rand(1:10000,1000));\n</cell>\n<code language=julia-1.5>\n\
    @time unique_digits(rand(1:10000,1000));\n</cell>\n<code language=julia-1.5>\n\
    @time unique_digits(rand(1:10000,1000));\n</cell>\n<code language=julia-1.5>\n\
    @time unique_digits(rand(1:10000,1000));\n</cell>\n<code language=julia-1.5>\n\
    @time unique_digits(rand(1:10000,1000));\n</cell>\n<code language=julia-1.5>\n\
    @time unique_digits(rand(1:10000,1000));\n</cell>\n<code language=julia-1.5>\n\
    @time unique_digits(rand(1:10000,1000));\n</cell>\n<code language=julia-1.5>\n\
    @time unique_digits(rand(1:10000,1000));\n</cell>\n<code language=julia-1.5>\n\
    @time unique_digits(rand(1:10000,1000));\n</cell>\n<code language=julia-1.5>\n\
    @time unique_digits(rand(1:10000,1000));\n</cell>\n<code language=julia-1.5>\n\
    @time unique_digits(rand(1:10000,1000));\n</cell>\n<code language=julia-1.5>\n\
    @time unique_digits(rand(1:10000,1000));\n</cell>\n<code language=julia-1.5>\n\
    @time unique_digits(rand(1:10000,1000));\n</cell>\n<code language=julia-1.5>\n\
    @time unique_digits(rand(1:10000,1000));\n</cell>\n<code language=julia-1.5>\n\
    @time unique_digits(rand(1:10000,1000));\n</cell>\n<code language=julia-1.5>\n\
    @time unique_digits(rand(\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc_6tbc3u.jl:16\nin expression starting at\
    \ /tmp/tmpc_6tbc3u.jl:16\n"
  stdout: ''
  timestamp: 1659747014
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 == 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    return unique_digits\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpknqlrpxk.jl:13\nin expression starting at /tmp/tmpknqlrpxk.jl:13\n"
  stdout: ''
  timestamp: 1659747009
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Set()\n    for i in x\n        unique_digits += findall(x->x%10==0, i)\n   \
    \ end\n    unique_digits\nend\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpob116zib.jl:15\nin expression starting at\
    \ /tmp/tmpob116zib.jl:15\n"
  stdout: ''
  timestamp: 1659747015
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 != 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    return unique_digits\n\
    end\n\"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpho70uqul.jl:13\nin expression starting at /tmp/tmpho70uqul.jl:13\n"
  stdout: ''
  timestamp: 1659747015
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = \nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpz72hc_9x.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpz72hc_9x.jl:1\n\
    in expression starting at /tmp/tmpz72hc_9x.jl:1\n"
  stdout: ''
  timestamp: 1659747015
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Set()\n    for n in x\n        if n % 2 == 0\n            push!(unique_digits,\
    \ n)\n        end\n    end\n    unique_digits\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpkyvr8x5k.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpkyvr8x5k.jl:22\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: Cannot\
    \ `convert` an object of type Set{Any} to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpkyvr8x5k.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkyvr8x5k.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkyvr8x5k.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpkyvr8x5k.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: Cannot\
    \ `convert` an object of type Set{Any} to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpkyvr8x5k.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n"
  timestamp: 1659747017
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 != 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    return unique_digits\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfkx0alhd.jl:13\nin expression starting at /tmp/tmpfkx0alhd.jl:13\n"
  stdout: ''
  timestamp: 1659747009
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ sort(unique(sort(x)))\n    unique_digits = unique_digits[unique_digits .!= 0]\n\
    \    return unique_digits\nend\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo2x9ftg2.jl:13\nin expression starting at\
    \ /tmp/tmpo2x9ftg2.jl:13\n"
  stdout: ''
  timestamp: 1659747015
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = unique_digits[unique_digits .!=\
    \ 0]\n    \n    return unique_digits\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmph7vyjpcu.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmph7vyjpcu.jl:21\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [1, 15, 33, 1422] == [1, 15, 33]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph7vyjpcu.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph7vyjpcu.jl:20\ntest set: Test\
    \ Failed at /tmp/tmph7vyjpcu.jl:22\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [10, 152, 323, 1422] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph7vyjpcu.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph7vyjpcu.jl:20\ntest set: Test\
    \ Failed at /tmp/tmph7vyjpcu.jl:23\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph7vyjpcu.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph7vyjpcu.jl:20\ntest set: Test\
    \ Failed at /tmp/tmph7vyjpcu.jl:24\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph7vyjpcu.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph7vyjpcu.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659747008
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    unique_digits =\
    \ Set()\n    for x in x\n        if x mod 2 != 0\n            push!(unique_digits,\
    \ x)\n        end\n    end\n    return unique_digits\nend\n\"\"\"\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpc0qkk8lw.jl:11\nin expression starting at /tmp/tmpc0qkk8lw.jl:11\n"
  stdout: ''
  timestamp: 1659747015
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = \nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpz72hc_9x.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpz72hc_9x.jl:1\n\
    in expression starting at /tmp/tmpz72hc_9x.jl:1\n"
  stdout: ''
  timestamp: 1659747015
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq8avcs_m.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq8avcs_m.jl:1\n\
    in expression starting at /tmp/tmpq8avcs_m.jl:1\n"
  stdout: ''
  timestamp: 1659747007
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 == 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    return unique_digits\n\
    end\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpo1h9nff6.jl:13\nin expression starting at /tmp/tmpo1h9nff6.jl:13\n"
  stdout: ''
  timestamp: 1659747008
- exit_code: 1
  program: "\"\"\"Given a list of positive integers x. return a sorted list of all\
    \ \n    elements that hasn't any even digit.\n\n    Note: Returned list should\
    \ be sorted in increasing order.\n    \n    For example:\n            \"\"\"\n\
    function unique_digits(x::Vector{Int64})::Vector{Int64} \n    \n    unique_digits\
    \ = Set()\n    for i in x\n        if i mod 2 == 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    unique_digits\nend\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpskpfsfy9.jl:12\nin expression starting at /tmp/tmpskpfsfy9.jl:12\n"
  stdout: ''
  timestamp: 1659747015
