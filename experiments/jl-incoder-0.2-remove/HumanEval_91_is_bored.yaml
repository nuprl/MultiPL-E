name: HumanEval_91_is_bored
language: jl
prompt: "\"\"\"\n    You'll be given a string of words, and your task is to count\
  \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
  \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
  \            \"\"\"\nfunction is_bored(S::String)::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
  Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
  I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
  \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
  You and I are going for a walk\") == 0)\nend\n"
completions: ["    if is_bored(S) == 0 then 1 else 0 end\nend\n            ", "  \
    \  if is_empty(S)\n        return 0\n    \n    boredoms = Dict{String,Int64}()\n\
    \    \n    for w in split(S)\n        if w == \"I\"\n            boredoms[w] =\
    \ 1\n        else\n            boredoms[w] = boredoms[w] + 1\n    end\n    \n\
    \    return boredoms[\"I\"]\nend\n\"\"\"\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    ", "    if is_bored(S) == 0 then 1 else 0 end\nend\n\
    \            \"\"\"\n    \n    boredoms = findall(S, \"I\")\n    boredoms = length(boredoms)\n\
    \    return boredoms\nend\n</cell>\n<code language=julia-1.3>\nboredoms(s)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of words in the string.", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    if is_empty(S) then return 0\n    else if starts_with(S, \"I\"\
    ) then return 1\n    else return 0\nend\n    \"\"\"\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    ", "    if is_bored(S) == 0 then 1 else 0 end\nend\n        \
    \    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if is_empty(S) then return 0\n    else if S == \"I\"\
    \ then return 1\n    else if S == \"!\" then return 0\n    else if S == \"?\"\
    \ then return 0\n    else return is_bored(tail(S))\nend\n    \"\"\"\n    \n  \
    \  boredom = 0\n    \n    boredom_list = list(boredom)\n    \n    for word in\
    \ words:\n        if word == \"I\":\n            boredom += 1\n        elif word\
    \ == \"!\":\n            boredom -= 1\n        elif word == \"?\":\n         \
    \   boredom += 1\n        else:\n            boredom += is_bored(word)\n     \
    \       \n    return boredom\n</cell>\n<cell>\n# Test your code\nboredom = is_bored(boredom_string)\n\
    print(f\"Number of boredoms found: {boredom}\")\n</cell>\n<text>\nExpected output\n\
    Number of boredoms found: 4", "    if is_empty(S) \n        return 0 \n    else\
    \ \n        boredoms = 0 \n        for word in split(S) \n            if starts_with(word,\
    \ \"I\") \n                boredoms += 1 \n        return boredoms \nend \n  \
    \  \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    S = lower(S)\n    \n    boredoms = 0\n    \n    for w in words(S)\n\
    \        if w == \"i\"\n            boredoms += 1\n    end\n    \n    return boredoms\n\
    end\n    \"\"\"\n    \n    S = lower(S)\n    \n    boredoms = 0\n    \n    for\
    \ w in words(S)\n        if w == \"i\"\n            boredoms += 1\n    end\n \
    \   \n    return boredoms\nend\n</cell>\n<code language=julia-1.5>\n@time is_bored(\"\
    \"\"\n    You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n     \
    \       \"\"\")\n</cell>\n<code language=julia-1.5>\n@time is_bored(\"\"\"\n \
    \   You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n     \
    \       \"\"\")\n</cell>\n<code language=julia-1.5>\n@time is_bored(\"\"\"\n \
    \   You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n     \
    \       \"\"\")\n</cell>\n<code language=julia-1.5>\n@time is_bored(\"\"\"\n \
    \   You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n     \
    \       \"\"\")\n</cell>\n<code language=julia-1.5>\n@time is_bored(\"\"\"\n \
    \   You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n     \
    \       \"\"\")\n</cell>\n<code language=julia-1.5>\n@time is_bored(\"\"\"\n \
    \   You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom ", "    if is_bored(S) == 0 then 1 else 0 end\nend\n\
    \            ", "    if is_empty(S) \n        return 0 \n    else \n        boredoms\
    \ = count_boredoms(S) \n        return boredoms \nend \n\"\"\"\n    \n    boredoms\
    \ = count_boredoms(S)\n    return boredoms\n</cell>\n<cell>\n# Test your code\n\
    s = \"I like you!\"\nboredoms = count_boredoms(s)\nprint(f\"There are {boredoms}\
    \ boredoms in {s}.\")\n</cell>\n<text>\nExpected output\nThere are 2 boredoms\
    \ in I like you!.", "    if is_empty(S)\n        return 0\n    \n    boredoms\
    \ = Dict()\n    \n    for w in split(S)\n        if is_bored(w)\n            boredoms[w]\
    \ = get(boredoms, w, 0) + 1\n        end\n    end\n    \n    return length(boredoms)\n\
    end\n    \"\"\"\n    \n    boredoms = Dict()\n    \n    for w in split(S)\n  \
    \      if is_bored(w)\n            boredoms[w] = get(boredoms, w, 0) + 1\n   \
    \     end\n    end\n    \n    return length(boredoms)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time boredoms(\"\"\"\n    You'll be given a string of words, and your task is\
    \ to count the number\n    of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For\
    \ example:\n            \"\"\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that counts the number of boredoms in a string.\nThe function should return\
    \ a dictionary where the keys are the boredom words,\nand the values are the count\
    \ of how many times they appear in the string.\nThe boredom words should be all\
    \ lowercase.\nThe function should ignore punctuation and capitalization.\nThe\
    \ function should ignore the empty string.\nThe function should ignore the empty\
    \ string.\nThe function should ignore the empty string.\nThe function should ignore\
    \ the empty string.\nThe function should ignore the empty string.\nThe function\
    \ should ignore the empty string.\nThe function should ignore the empty string.\n\
    The function should ignore the empty string.\nThe function should ignore the empty\
    \ string.\nThe function should ignore the empty string.\nThe function should ignore\
    \ the empty string.\nThe function should ignore the empty string.\nThe function\
    \ should ignore the empty string.\nThe function should ignore the empty string.\n\
    The function should ignore the empty string.\nThe function should ignore the empty\
    \ string.\nThe function should ignore the empty string.\nThe function should ignore\
    \ the empty string.\nThe function should ignore the empty string.\nThe function\
    \ should ignore the empty string.\nThe function should ignore the empty string.\n\
    The function should ignore the empty string.\nThe function should ignore the empty\
    \ string.\nThe function should ignore the empty string.\nThe function should ignore\
    \ the empty string.\nThe function should ignore the empty string.\nThe function\
    \ should ignore the empty string.\nThe function should ignore the empty string.\n\
    The function should ignore the empty string.\nThe function should ignore the empty\
    \ string.\nThe function should ignore the empty string.\nThe function should ignore ",
  "    if is_empty(S) == true \n        return 0 \n    else \n        boredoms = 0\
    \ \n        for w in S \n            if w == \"I\" \n                boredoms\
    \ = boredoms + 1 \n        return boredoms \nend \n\"\"\"\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    if is_empty(S)\n        return\
    \ 0\n    \n    boredoms = Dict{String,Int64}()\n    \n    for w in split(S)\n\
    \        if w == \"I\"\n            boredoms[w] = 1\n        end\n    end\n  \
    \  \n    return length(boredoms)\nend\n\"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    ", "    if is_empty(S) then return 0\n    \n    boredoms = Dict{String,Int64}()\n\
    \    for word in split(S) do \n        if word==\"I\" then boredoms[word] = 1\
    \ \n    end\n    return length(boredoms)\nend\n    \"\"\"\n    \n    boredoms\
    \ = Dict{String,Int64}()\n    for word in split(S) do \n        if word==\"I\"\
    \ then boredoms[word] = 1 \n    end\n    return length(boredoms)\nend\n</cell>\n\
    <code language=julia-1.5>\n@time is_bored(\"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\")\n</cell>\n<text>\n\
    Exercise: Write a function that takes a string and returns the number of words\
    \ in the string.", "    if is_empty(S) == true \n        return 0 \n    else \n\
    \        boredoms = 0 \n        for word in split(S) do \n            if word\
    \ == \"I\" then \n                boredoms = boredoms + 1 \n            end \n\
    \        end \n        return boredoms \n    end \nend \n\"\"\"\n</cell>\n<cell>\n\
    # Write your function here\n</cell>\n<cell>\n# Test your function here\n</cell>\n\
    <text>\nQuestion 7\nWrite a function that takes a string and returns a list of\
    \ all the words in the string.", "    if is_empty(S) then return 0\n    else if\
    \ S == \"I\" then return 1\n    else if S == \"?\" then return 1\n    else if\
    \ S == \"!\" then return 1\n    else return 0\nend\n\"\"\"\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    S = lower(S)\n    \n\
    \    I = 0\n    \n    for w in S\n        if w == \"i\"\n            I += 1\n\
    \        end\n    end\n    \n    return I\nend\n\"\"\"\n    \n    boredoms = count_boredoms(text)\n\
    \    \n    return boredoms\nend\n</cell>\n<code language=julia-1.5>\n# Test your\
    \ code\nboredoms = count_boredoms(\"I love Julia. Julia is my favorite language.\"\
    )\n</cell>\n<text>\nExpected Output\n12", "    if is_empty(S) then 0 else 1\n\
    end", "    if is_bored(S) == 0 \n        then return 0 \n        else return 1\
    \ \n    end\n    \n    function is_bored(S::String)::Int64 \n        if is_bored(S)\
    \ == 0 \n            then return 0 \n            else return 1 \n        end\n\
    \    \n    function is_bored(S::String)::Int64 \n        if is_bored(S) == 0 \n\
    \            then return 0 \n            else return 1 \n        end\n    \n \
    \   function is_bored(S::String)::Int64 \n        if is_bored(S) == 0 \n     \
    \       then return 0 \n            else return 1 \n        end\n    \n    function\
    \ is_bored(S::String)::Int64 \n        if is_bored(S) == 0 \n            then\
    \ return 0 \n            else return 1 \n        end\n    \n    function is_bored(S::String)::Int64\
    \ \n        if is_bored(S) == 0 \n            then return 0 \n            else\
    \ return 1 \n        end\n    \n    function is_bored(S::String)::Int64 \n   \
    \     if is_bored(S) == 0 \n            then return 0 \n            else return\
    \ 1 \n        end\n    \n    function is_bored(S::String)::Int64 \n        if\
    \ is_bored(S) == 0 \n            then return 0 \n            else return 1 \n\
    \        end\n    \n    function is_bored(S::String)::Int64 \n        if is_bored(S)\
    \ == 0 \n            then return 0 \n            else return 1 \n        end\n\
    \    \n    function is_bored(S::String)::Int64 \n        if is_bored(S) == 0 \n\
    \            then return 0 \n            else return 1 \n        end\n    \n \
    \   function is_bored(S::String)::Int64 \n        if is_bored(S) == 0 \n     \
    \       then return 0 \n            else return 1 \n        end\n    \n    function\
    \ is_bored(S::String)::Int64 \n        if is_bored(S) == 0 \n            then\
    \ return 0 \n            else return 1 \n        end\n    \n    function is_bored(S::String)::Int64\
    \ \n        if is_bored(S) == 0 \n            then return 0 \n            else\
    \ return 1 \n        end\n    \n    function is_bored(S::String)::Int64 \n   \
    \     if is_bored(S) == 0 \n            then return 0 \n            else return\
    \ 1 \n        end\n    \n    function is_bored(S::String)::Int64 \n        if\
    \ is_bored(S) == 0 \n            then return 0 \n            else return 1 \n\
    \        end\n    \n    function is_bored(S::String)::Int64 \n        if is_bo",
  "    if is_empty(S) then return 0\n    else if S == \"I\" then return 1\n    else\
    \ if S == \"!\" then return 0\n    else if S == \"?\" then return 0\n    else\
    \ return is_bored(S[1..end-1]) + is_bored(S[end..end-1]) \nend\n    \"\"\"\n \
    \   \n    boredom = 0\n    \n    for word in words:\n        if word == \"I\"\
    :\n            boredom += 1\n        elif word == \"!\":\n            boredom\
    \ += 1\n        elif word == \"?\":\n            boredom += 1\n        else:\n\
    \            boredom += is_bored(word[1:])\n    return boredom\n</cell>\n<cell>\n\
    # Test your code\nwords = [\"I\", \"am\", \"I\"]\nprint(boredom(words))\n</cell>\n\
    <text>\nPart 3: String Manipulation\n3.1 String Manipulation\n3.1.1 String Manipulation\n\
    Strings are a sequence of characters. In Julia, Strings are represented using\
    \ single quotes ('). \nFor example 'hello' is a string containing the letters\
    \ 'h', 'e', 'l', 'l', 'o'\nTo concatenate strings, use the plus sign. For example,\
    \ 'hello' + ' world' yields 'hello world'\nTo repeat strings, use the * operator.\
    \ For example, 'hello' * 3 yields 'hellohellohello'\nTo slice strings, use the\
    \ : operator. For example, 'hello'[1:2] yields 'he'\nNote that Julia uses 1-based\
    \ indexing. That means 'hello'[1] yields 'h'", "    if is_empty(S)\n        return\
    \ 0\n    \n    boredoms = Dict()\n    \n    for w in split(S)\n        if is_bored(w)\n\
    \            boredoms[w] = 1\n        end\n    end\n    \n    return length(boredoms)\n\
    end\n\"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if is_bored(S)\
    \ == 0 then 1 else 0 end\nend\nis_bored(\"\"\"I. I am a bored. I am bored.\"\"\
    \")\nis_bored(\"\"\"I. I am a bored. I am bored.\"\"\")\nis_bored(\"\"\"I. I am\
    \ a bored. I am bored.\"\"\")\nis_bored(\"\"\"I. I am a bored. I am bored.\"\"\
    \")\nis_bored(\"\"\"I. I am a bored. I am bored.\"\"\")\nis_bored(\"\"\"I. I am\
    \ a bored. I am bored.\"\"\")\nis_bored(\"\"\"I. I am a bored. I am bored.\"\"\
    \")\nis_bored(\"\"\"I. I am a bored. I am bored.\"\"\")\nis_bored(\"\"\"I. I am\
    \ a bored. I am bored.\"\"\")\nis_bored(\"\"\"I. I am a bored. I am bored.\"\"\
    \")\nis_bored(\"\"\"I. I am a bored. I am bored.\"\"\")\nis_bored(\"\"\"I. I am\
    \ a bored. I am bored.\"\"\")\nis_bored(\"\"\"I. I am a bored. I am bored.\"\"\
    \")\nis_bored(\"\"\"I. I am a bored. I am bored.\"\"\")\nis_bored(\"\"\"I. I am\
    \ a bored. I am bored.\"\"\")\nis_bored(\"\"\"I. I am a bored. I am bored.\"\"\
    \")\nis_bored(\"\"\"I. I am a bored. I am bored.\"\"\")\nis_bored(\"\"\"I. I am\
    \ a bored. I am bored.\"\"\")\nis_bored(\"\"\"I. I am a bored. I am bored.\"\"\
    \")\nis_bored(\"\"\"I. I am a bored. I am bored.\"\"\")\nis_bored(\"\"\"I. I am\
    \ a bored. I am bored.\"\"\")\nis_bored(\"\"\"I. I am a bored. I am bored.\"\"\
    \")\nis_bored(\"\"\"I. I am a bored. I am bored.\"\"\")\nis_bored(\"\"\"I. I am\
    \ a bored. I am bored.\"\"\")\nis_bored(\"\"\"I. I am a bored. I am bored.\"\"\
    \")\nis_bored(\"\"\"I. I am a bored. I am bored.\"\"\")\nis_bored(\"\"\"I. I am\
    \ a bored. I am bored.\"\"\")\nis_bored(\"\"\"I. I am a bored. I am bored.\"\"\
    \")\nis_bored(\"\"\"I. I am a bored. I am bored.\"\"\")\nis_bored(\"\"\"", " \
    \   if is_empty(S)\n        return 0\n    \n    boredoms = Dict{String,Int64}()\n\
    \    for word in split(S)\n        if word==\"I\"\n            boredoms[word]\
    \ = get(boredoms, word, 0) + 1\n        end\n    end\n    return get(boredoms,\
    \ \"I\", 0)\nend\n\"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    if is_bored(S) == 0 \n    then\
    \ 1 else 0 \n    end \nend \n\"\"\"\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    if is_empty(S) == true \n        return\
    \ 0 \n    else \n        boredoms = 0 \n        for w in split(S) do \n      \
    \      if w == \"I\" then \n                boredoms += 1 \n            end \n\
    \        end \n        return boredoms \n    end \nend \n\"\"\"\n</cell>\n<cell>\n\
    # Test your code\ns = \"I\"\nassert is_bored(s) == 0\ns = \"Boredom\"\nassert\
    \ is_bored(s) == 2\ns = \"I boredom because I love you.\"\nassert is_bored(s)\
    \ == 3\ns = \"I boredom because I love you and you.\"\nassert is_bored(s) == 4\n\
    s = \"I boredom because I love you and you and you.\"\nassert is_bored(s) == 5\n\
    s = \"I boredom because I love you and you and you and you.\"\nassert is_bored(s)\
    \ == 6\ns = \"I boredom because I love you and you and you and you and you.\"\n\
    assert is_bored(s) == 7\ns = \"I boredom because I love you and you and you and\
    \ you and you and you.\"\nassert is_bored(s) == 8\ns = \"I boredom because I love\
    \ you and you and you and you and you and you and you.\"\nassert is_bored(s) ==\
    \ 9\ns = \"I boredom because I love you and you and you and you and you and you\
    \ and you and you.\"\nassert is_bored(s) == 10\ns = \"I boredom because I love\
    \ you and you and you and you and you and you and you and you and you.\"\nassert\
    \ is_bored(s) == 11\ns = \"I boredom because I love you and you and you and you\
    \ and you and you and you and you and you and you.\"\nassert is_bored(s) == 12\n\
    s = \"I boredom because I love you and you and you and you and you and you and\
    \ you and you and you and you.\"\nassert is_bored(s) == 13\ns = \"I boredom because\
    \ I love you and you and you and you and you and you and you and you and you and\
    \ you.\"\nassert is_bored(s) == 14\ns = \"I boredom because I love you and you\
    \ and you and you and you and you and you and you and you and you.\"\nassert is_bored(s)\
    \ == 15\ns = \"I boredom because I love you ", "    if is_empty(S) then return\
    \ 0\n    else if S == \"I\" then return 1\n    else if S == \"?\" then return\
    \ 1\n    else if S == \"!\" then return 1\n    else return 0\nend\n    \"\"\"\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    S = lower(S)\n\
    \    I = 0\n    for w in split(S) do \n        if w == \"i\" then \n         \
    \   I += 1 \n        end\n    end\n    return I\nend\n    \"\"\"\n    boredoms\
    \ = sum(1 for word in split(S) if word.startswith(\"i\"))\n    return boredoms\n\
    </cell>\n<cell>\n# Test your code\nboredoms = count_boredoms(\"I like Ice cream!\"\
    )\nprint(boredoms)\n</cell>\n<text>\nExpected output\n2", "    \n    S = lower(S)\n\
    \    \n    count = 0\n    \n    for w in split(S)\n        if w == \"i\"\n   \
    \         count += 1\n            \n    return count\n\"\"\"\n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    ", "    if is_empty(S) then return 0\n    else if S == \"I\"\
    \ then return 1\n    else if S == \"!\" then return 0\n    else if S == \"?\"\
    \ then return 0\n    else if S == \".\" then return 0\n    else return is_bored(tail(S))\n\
    end\n\"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    ", "    if is_empty(S)\n        return 0\n    \n    boredoms\
    \ = Dict{String,Int64}()\n    \n    for word in split(S)\n        if word[1] ==\
    \ 'I'\n            boredoms[word] = 0\n        end\n    end\n    \n    return\
    \ length(boredoms)\nend\n\"\"\"\n    ", "    if is_bored(S) == 0 then 1 else 0\
    \ end\nend\n            ", "    if is_bored(S) == 0 then 1 else 0 end\nend", " \
    \   if is_empty(S)\n        return 0 \n    \n    boredoms = 0 \n    \n    for\
    \ w in split(S)\n        if w == \"I\"\n            boredoms += 1\n          \
    \  \n    return boredoms\nend\n    \"\"\"\n    \n    boredoms = 0\n    \n    for\
    \ w in split(s):\n        if w == \"I\":\n            boredoms += 1\n        \
    \    \n    return boredoms\n</cell>\n<code language=julia-1.5>\n# Test your code\n\
    s = \"\"\"\nI love Julia!\nIt's amazing!\nI love it!\n\"\"\"\nboredoms(s)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that counts the number of times the word\
    \ \"love\" appears in a string.", "    if is_empty(S)\n        return 0\n    \n\
    \    boredoms = Dict{String,Int64}()\n    \n    for w in split(S)\n        if\
    \ w == \"I\"\n            boredoms[w] = 1\n        end\n    end\n    \n    return\
    \ length(boredoms)\nend\n\"\"\"\n    ", "    if is_bored(S,0)==0 then 1 else 0\
    \ end\nend\n\"\"\"\n    ", "    if is_empty(S)\n        return 0\n    \n    boredoms\
    \ = Dict{String,Int64}()\n    \n    for word in split(S)\n        if word == \"\
    I\"\n            boredoms[word] = 1\n        end\n    end\n    \n    return length(boredoms)\n\
    end\n\"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    ", "    if is_empty(S)\n      \
    \  return 0\n    \n    boredoms = Dict()\n    \n    for w in split(S)\n      \
    \  if w == \"I\"\n            boredoms[w] = 1\n        end\n    end\n    \n  \
    \  return length(boredoms)\nend\n\"\"\"\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    if is_empty(S)\n        return 0\n    \n    boredoms = 0\n\
    \    for w in split(S)\n        if is_bored(w)\n            boredoms += 1\n  \
    \      end\n    end\n    return boredoms\nend\n    \"\"\"\n    \n    # YOUR CODE\
    \ HERE\n    boredoms = 0\n    for w in split(S):\n        if is_bored(w):\n  \
    \          boredoms += 1\n    return boredoms\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    if is_empty(S) then 0 else 1\nend\n            \"\"\"\n    \n    \n    \"\"\
    \"\n    Your task is to implement the function count_boredoms.\n    It should\
    \ return the number of boredoms in the given string.\n    \"\"\"\n    \n    \n\
    \    \"\"\"\n    Your task is to implement the function count_boredoms.\n    It\
    \ should return the number of boredoms in the given string.\n    \"\"\"\n    \n\
    \    \n    \"\"\"\n    Your task is to implement the function count_boredoms.\n\
    \    It should return the number of boredoms in the given string.\n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    Your task is to implement the function count_boredoms.\n\
    \    It should return the number of boredoms in the given string.\n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    Your task is to implement the function count_boredoms.\n\
    \    It should return the number of boredoms in the given string.\n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    Your task is to implement the function count_boredoms.\n\
    \    It should return the number of boredoms in the given string.\n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    Your task is to implement the function count_boredoms.\n\
    \    It should return the number of boredoms in the given string.\n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    Your task is to implement the function count_boredoms.\n\
    \    It should return the number of boredoms in the given string.\n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    Your task is to implement the function count_boredoms.\n\
    \    It should return the number of boredoms in the given string.\n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    Your task is to implement the function count_boredoms.\n\
    \    It should return the number of boredoms in the given string.\n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    Your task is to implement the function count_boredoms.\n\
    \    It should return the number of boredoms in the given string.\n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    Your task is to implement the function count_boredoms.\n\
    \    It should return the number of boredoms in the given string.\n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    Your task is to implement the function count_boredoms.\n\
    \    It should return the number of boredoms in the given string.\n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    Your task is to implement the function count_boredoms.\n\
    \    It should return the number of boredoms in the given string.\n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    Your task is to implement the function count_boredoms.\n\
    \    It should return the number of boredoms in the given string.\n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    Your task is to implement the function count_boredoms.\n\
    \    It ", "    if is_empty(S) == true \n        return 0 \n    else \n      \
    \  boredoms = 0 \n        for word in split(S) do \n            if word == \"\
    I\" then \n                boredoms += 1 \n            end \n        end \n  \
    \      return boredoms \n    end \nend \n\"\"\"\n</cell>\n<cell>\n# Test your\
    \ code\ns = \"I like Ice! I love Ice!\"\nassert is_bored(s) == 3, \"is_bored(s)\
    \ should return 3, but returned {}\".format (is_bored(s))\n</cell>\n<text>\nTask\
    \ 2: Write a function that takes a string and returns the number of words in it.",
  "    if is_empty(S)\n        return 0\n    \n    boredoms = Dict{String,Int64}()\n\
    \    \n    for w in split(S)\n        if w == \"I\"\n            boredoms[w] =\
    \ 1\n        end\n    end\n    \n    return length(boredoms)\nend\n\"\"\"\n  \
    \  ", "    \n    S = lower(S)\n    \n    count = 0\n    \n    for w in split(S)\
    \ do\n        if w == \"i\" then\n            count += 1\n        end\n    end\n\
    \    \n    return count\nend\n\"\"\"\n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    if is_empty(S)\n        return\
    \ 0\n    \n    boredoms = Dict{String,Int64}()\n    \n    for w in split(S)\n\
    \        if w == \"I\"\n            boredoms[w] = 1\n        end\n    end\n  \
    \  \n    return sum([v for (k,v) in boredoms.items()]) \nend\n\"\"\"\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    if is_empty(S)\n        return 0\n    \n    boredoms = Dict()\n\
    \    \n    for w in split(S)\n        if is_bored(w)\n            boredoms[w]\
    \ = get(boredoms, w, 0) + 1\n        end\n    end\n    \n    return length(boredoms)\n\
    end\n\"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    if is_empty(S)\n        return 0\n\
    \    \n    boredoms = 0\n    for w in split(S)\n        if is_bored(w)\n     \
    \       boredoms += 1\n        end\n    end\n    return boredoms\nend", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    if is_empty(S) then return\
    \ 0\n    else if S == \"I\" then return 1\n    else if S == \"I'm\" then return\
    \ 2\n    else if S == \"I'll\" then return 3\n    else if S == \"I'd\" then return\
    \ 4\n    else if S == \"I've\" then return 5\n    else if S == \"I'll've\" then\
    \ return 6\n    else if S == \"I'dve\" then return 7\n    else if S == \"I'llve\"\
    \ then return 8\n    else if S == \"Ive\" then return 9\n    else if S == \"I'd\"\
    \ then return 10\n    else if S == \"I\" then return 11\n    else if S == \"my\"\
    \ then return 12\n    else if S == \"your\" then return 13\n    else if S == \"\
    yours\" then return 14\n    else if S == \"yourself\" then return 15\n    else\
    \ if S == \"you've\" then return 16\n    else if S == \"you'll\" then return 17\n\
    \    else if S == \"you'd\" then return 18\n    else if S == \"you're\" then return\
    \ 19\n    else if S == \"you've\" then return 20\n    else if S == \"you'll\"\
    \ then return 21\n    else if S == \"you'd\" then return 22\n    else if S ==\
    \ \"you're\" then return 23\n    else if S == \"you've\" then return 24\n    else\
    \ if S == \"you'll\" then return 25\n    else if S == \"you'd\" then return 26\n\
    \    else if S == \"you're\" then return 27\n    else if S == \"you've\" then\
    \ return 28\n    else if S == \"you'll\" then return 29\n    else if S == \"you'd\"\
    \ then return 30\n    else if S == \"you're\" then return 31\n    else if S ==\
    \ \"you've\" then return 32\n    else if S == \"you'll\" then return 33\n    else\
    \ if S == \"you'd\" then return 34\n    else if S == \"you're\" then return 35\n\
    \    else if S == \"you've\" then return 36\n    else if S == \"you'll\" then\
    \ return 37\n    else if S == \"you'd\" then return 38\n    else if S == \"you're\"\
    \ then return 39\n    else if S == \"you've\" then return 40\n", "    if is_empty(S)\
    \ then return 0\n    \n    boredoms = Dict{String,Int64}()\n    \n    for word\
    \ in split(S) do \n        if word==\"I\" then boredoms[word] = 1 \n    end\n\
    \    \n    return sum(boredoms.values)\nend\n    \"\"\"\n    \n    boredoms =\
    \ Dict{String,Int64}()\n    \n    for word in split(S) do \n        if word==\"\
    I\" then boredoms[word] = 1 \n    end\n    \n    return sum(boredoms.values)\n\
    end\n</cell>\n<code language=julia-1.5>\n@time is_bored(\"\"\"\n    You'll be\
    \ given a string of words, and your task is to count the number\n    of boredoms.\
    \ A boredom is a sentence that starts with the word \"I\".\n    Sentences are\
    \ delimited by '.', '?' or '!'.\n   \n    For example:\n            \"\"\")\n\
    </cell>\n<code language=julia-1.5>\n@time is_bored(\"\"\"\n    You'll be given\
    \ a string of words, and your task is to count the number\n    of boredoms. A\
    \ boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited\
    \ by '.', '?' or '!'.\n   \n    For example:\n            \"\"\")\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_bored(\"\"\"\n    You'll be given a string of\
    \ words, and your task is to count the number\n    of boredoms. A boredom is a\
    \ sentence that starts with the word \"I\".\n    Sentences are delimited by '.',\
    \ '?' or '!'.\n   \n    For example:\n            \"\"\")\n</cell>\n<code language=julia-1.5>\n\
    @time is_bored(\"\"\"\n    You'll be given a string of words, and your task is\
    \ to count the number\n    of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For\
    \ example:\n            \"\"\")\n</cell>\n<code language=julia-1.5>\n@time is_bored(\"\
    \"\"\n    You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n     \
    \       \"\"\")\n</cell>\n<code language=julia-1.5>\n@time is_bored(\"\"\"\n \
    \   You'll be given ", "    if is_empty(S)\n        return 0;\n    \n    boredoms\
    \ = findall(S, \"^I\");\n    \n    return length(boredoms);\nend\n    \"\"\"\n\
    \    \n    boredoms = findall(S, \"^I\")\n    return len(boredoms)\n</cell>\n\
    <cell>\n# Test your code\ns = \"I like Ice! I love Ice!\"\nboredoms = count_boredoms(s)\n\
    print(f\"Number of boredoms in {s}: {boredoms}\")\n</cell>\n<text>\nExpected output\n\
    Number of boredoms in I like Ice! I love Ice!: 2", "    if is_bored(S) == 0 then\
    \ 1 else 0 end\nend\n            \"\"\"\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    S = lower(S)\n\
    \    \n    boredoms = 0\n    \n    for w in S\n        if w == \"i\"\n       \
    \     boredoms += 1\n        end\n    end\n    \n    return boredoms\nend\n\"\"\
    \"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "  \
    \  if is_empty(S)\n        return 0\n    \n    I = find(S, \"I\")\n    if I <\
    \ 0\n        return 0\n    \n    boredoms = 0\n    \n    for i = I + 1 to length(S)\n\
    \        if S[i] == '.'\n            boredoms += 1\n        \n    return boredoms\n\
    end\n    \"\"\"\n    \n    boredoms = 0\n    \n    for word in words:\n      \
    \  if word[0] in \"I!?\":\n            boredoms += 1\n    \n    return boredoms\n\
    </cell>\n<code language=julia-1.5>\n# Test your code\nboredoms(\"I bore you.\"\
    )\n</cell>\n<code language=julia-1.5>\n# Run this cell to see what your outputs\
    \ look like\nboredoms(\"I bore you.\")\n</cell>\n<text>\nPart 2\nThe second task\
    \ is to count the frequency of words that start with a given letter. \nThis will\
    \ be similar to the boredoms function you wrote in Part 1, but instead of looking\
    \ for a boredom, we'll count the number of times a given letter appears in a given\
    \ string.", "    if is_bored(S) == 0 then 1 else 0 end\nend\n            \"\"\"\
    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    if is_empty(S)\n        return 0\n    \n    boredoms = findall(S,\
    \ \"I\")\n    \n    length(boredoms)\nend", "    if is_empty(S)\n        return\
    \ 0\n    \n    boredoms = findall(S, \"I\")\n    \n    return length(boredoms)\n\
    end", "    if is_empty(S)\n        return 0\n    \n    boredoms = findall(S, \"\
    ^I\")\n    \n    return length(boredoms)\nend", "    if is_bored(S) == 1 then\
    \ 1 else 0 end\nend\n            \"\"\"\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    if is_empty(S)\n    \
    \    return 0\n    \n    boredoms = Dict{String,Int64}()\n    for w in split(S)\n\
    \        if w == \"I\"\n            boredoms[w] = 1\n        end\n    end\n  \
    \  return length(boredoms)\nend\n\"\"\"\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    ", "    if is_empty(S)\n        return 0\n    \n    boredoms = Dict{String,Int64}()\n\
    \    \n    for word in split(S)\n        if word == \"I\"\n            boredoms[word]\
    \ = 1\n        end\n    end\n    \n    return length(boredoms)\nend\n    \"\"\"\
    \n    \n    boredoms = Dict{String,Int64}()\n    \n    for word in split(S)\n\
    \        if word == \"I\"\n            boredoms[word] = 1\n        end\n    end\n\
    \    \n    return length(boredoms)\nend", "    if is_empty(S)\n        return\
    \ 0\n    \n    boredoms = Dict{String,Int64}()\n    \n    for word in split(S)\n\
    \        if word == \"I\"\n            boredoms[word] = 1\n        end\n    end\n\
    \    \n    return length(boredoms)\nend\n\"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    ", "    if is_empty(S)\n        return 0\n    \n    boredoms = Dict{String,Int64}()\n\
    \    \n    for w in split(S)\n        if w == \"I\"\n            boredoms[w] =\
    \ 1\n        end\n    end\n    \n    return length(boredoms)\nend\n\"\"\"\n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    ", "    if is_bored(S) == 0 then 1 else 0 end\n\
    end\n            ", "    if is_bored(S) == 0 then 1 else 0 end\nend\nis_bored(\"\
    Im a bored. Im a bored. Im a bored. Im a bored. Im a bored. Im a bored. Im a bored.\
    \ Im a bored. Im a bored. Im a bored. Im a bored. Im a bored. Im a bored. Im a\
    \ bored. Im a bored. Im a bored. Im a bored. Im a bored. Im a bored. Im a bored.\
    \ Im a bored. Im a bored. Im a bored. Im a bored. Im a bored. Im a bored. Im a\
    \ bored. Im a bored. Im a bored. Im a bored. Im a bored. Im a bored. Im a bored.\
    \ Im a bored. Im a bored. Im a bored. Im a bored. Im a bored. Im a bored. Im a\
    \ bored. Im a bored. Im a bored. Im a bored. Im a bored. Im a bored. Im a bored.\
    \ Im a bored. Im a bored. Im a bored. Im a bored. Im a bored. Im a bored. Im a\
    \ bored. Im a bored. Im a bored. Im a bored. Im a bored. Im a bored. Im a bored.\
    \ Im a bored. Im a bored. Im a bored. Im a bored. Im a bored. Im a bored. Im a\
    \ bored. Im a bored. Im a bored. Im a bored. Im a bored. Im a bored. Im a bored.\
    \ Im a bored. Im a bored. Im a bored. Im a bored. Im a bored. Im a bored. Im a\
    \ bored. Im a bored. Im a bored. Im a bored. Im ", "    if is_empty(S)\n     \
    \   return 0\n    \n    boredoms = Dict{String,Int64}()\n    \n    for w in split(S)\n\
    \        if w == \"I\"\n            boredoms[w] = 1\n        else\n          \
    \  boredoms[w] = boredoms[w] + 1\n    end\n    \n    return length(boredoms)\n\
    end\n    \"\"\"\n    \n    boredoms = Dict{String,Int64}()\n    \n    for w in\
    \ split(S)\n        if w == \"I\"\n            boredoms[w] = 1\n        else\n\
    \            boredoms[w] = boredoms[w] + 1\n        end\n    end\n    \n    return\
    \ length(boredoms)\nend\n</cell>\n<code language=julia-1.4>\n@time boredoms(\"\
    \"\"\n    You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n     \
    \       \"\"\")\n</cell>\n<code language=julia-1.4>\n@time boredoms(\"\"\"\n \
    \   You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n     \
    \       \"\"\")\n</cell>\n<code language=julia-1.4>\n@time boredoms(\"\"\"\n \
    \   You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n     \
    \       \"\"\")\n</cell>\n<code language=julia-1.4>\n@time boredoms(\"\"\"\n \
    \   You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n     \
    \       \"\"\")\n</cell>\n<code language=julia-1.4>\n@time boredoms(\"\"\"\n \
    \   You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    ", "    if is_bored(S)\
    \ == 0 then 1 else 0 end\nend", "    \n    S = lower(S)\n    \n    count = 0\n\
    \    \n    for word in split(S) do \n        if word == \"i\" then \n        \
    \    count += 1\n        end\n    end\n    \n    return count\nend\n\"\"\"\n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    S = lower(S)\n    \n    boredoms = 0\n    \n    for w in split(S) do\
    \ \n        if w == \"i\" then \n            boredoms = boredoms + 1\n       \
    \ end\n    end\n    \n    return boredoms\nend\n\"\"\"\n    \n    boredoms = 0\n\
    \    \n    for w in split(S) do \n        if w == \"i\" then \n            boredoms\
    \ = boredoms + 1\n        end\n    end\n    \n    return boredoms\nend\n</cell>\n\
    <code language=julia-1.4>\nis_bored(\"\"\"\n    You'll be given a string of words,\
    \ and your task is to count the number\n    of boredoms. A boredom is a sentence\
    \ that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or\
    \ '!'.\n   \n    For example:\n            \"\"\")\n</cell>\n<code language=julia-1.4>\n\
    is_bored(\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\")\n</cell>\n<code language=julia-1.4>\nis_bored(\"\"\"\n  \
    \  You'll be given a string of words, and your task is to count the number\n \
    \   of boredoms. A boredom is a sentence that starts with the word \"I\".\n  \
    \  Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n      \
    \      \"\"\")\n</cell>\n<code language=julia-1.4>\nis_bored(\"\"\"\n    You'll\
    \ be given a string of words, and your task is to count the number\n    of boredoms.\
    \ A boredom is a sentence that starts with the word \"I\".\n    Sentences are\
    \ delimited by '.', '?' or '!'.\n   \n    For example:\n            \"\"\")\n\
    </cell>\n<code language=julia-1.4>\nis_bored(\"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\")\n</cell>\n<code\
    \ language=julia-1.4>\nis_bored(\"\"\"\n    You'll be given a string of words,\
    \ and your task is to count the number\n    of boredoms. A bore", "    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = Dict{String,Int64}()\n    \n    for w\
    \ in split(S)\n        if w == \"I\"\n            boredoms[w] = 1\n        end\n\
    \    end\n    \n    return length(boredoms)\nend\n    \nis_bored(\"I like Ice.\"\
    )\nis_bored(\"I like ice.\")\nis_bored(\"I like ice.I\")\nis_bored(\"I like ice.I\
    \ like ice.I\")\nis_bored(\"I like ice.I like ice.I like ice.I\")\nis_bored(\"\
    I like ice.I like ice.I like ice.I like ice.I\")\nis_bored(\"I like ice.I like\
    \ ice.I like ice.I like ice.I like ice.I\")\nis_bored(\"I like ice.I like ice.I\
    \ like ice.I like ice.I like ice.I like ice.I\")\nis_bored(\"I like ice.I like\
    \ ice.I like ice.I like ice.I like ice.I like ice.I like ice.I\")\nis_bored(\"\
    I like ice.I like ice.I like ice.I like ice.I like ice.I like ice.I like ice.I\
    \ like ice.I like ice.I like ice.I like ice.I like ice.I like ice.I like ice.I\
    \ like ice.I like ice.I like ice.I like ice.I like ice.I like ice.I like ice.I\
    \ like ice.I like ice.I like ice.I like ice.I like ice.I like ice.I like ice.I\
    \ like ice.I like ice.I like ice.I like ice.I like ice.I like ice.I like ice.I\
    \ like ice.I like ice.I like ice.I like ice.I like ice.I like ice.I like ice.I\
    \ like ice.I like ice.I like ice.I like ice.I like ice.I like ice.I like ice.I\
    \ like ice.I like ice.I like ice.I like ice.I like ice.I like ice.I like ice.I\
    \ like ice.I like ice.I like ice.I like ice.I like ice.I like ice.I like ice.I\
    \ like ice.I like ice.I like ice.I like ice.I ", "    if is_bored(S,0)==0 then\
    \ 1 else 0 end\nend", "    if is_empty(S)\n        return 0;\n    \n    boredoms\
    \ = findall(S, \"^I.*\");\n    \n    if length(boredoms) == 0\n        return\
    \ 0;\n    else\n        return length(boredoms);\n    end\nend\n\"\"\"\n</cell>\n\
    <cell>\n# Test your code\ns = \"\"\"\n    I like Ice cream!\n    I like Ice cream!\n\
    \    I like Ice cream!\n    I like Ice cream!\n    I like Ice cream!\n    I like\
    \ Ice cream!\n    I like Ice cream!\n    I like Ice cream!\n    I like Ice cream!\n\
    \    I like Ice cream!\n    I like Ice cream!\n    I like Ice cream!\n    I like\
    \ Ice cream!\n    I like Ice cream!\n    I like Ice cream!\n    I like Ice cream!\n\
    \    I like Ice cream!\n    I like Ice cream!\n    I like Ice cream!\n    I like\
    \ Ice cream!\n    I like Ice cream!\n    I like Ice cream!\n    I like Ice cream!\n\
    \    I like Ice cream!\n    I like Ice cream!\n    I like Ice cream!\n    I like\
    \ Ice cream!\n    I like Ice cream!\n    I like Ice cream!\n    I like Ice cream!\n\
    \    I like Ice cream!\n    I like Ice cream!\n    I like Ice cream!\n    I like\
    \ Ice cream!\n    I like Ice cream!\n    I like Ice cream!\n    I like Ice cream!\n\
    \    I like Ice cream!\n    I like Ice cream!\n    I like Ice cream!\n    I like\
    \ Ice cream!\n    I like Ice cream!\n    I like Ice cream!\n    I like Ice cream!\n\
    \    I like Ice cream!\n    I like Ice cream!\n    I like Ice cream!\n    I like\
    \ Ice cream!\n    I like Ice cream!\n    I like I", "    if is_empty(S)\n    \
    \    return 0\n    \n    boredoms = Dict{String,Int64}()\n    \n    for word in\
    \ split(S)\n        if word == \"I\"\n            boredoms[word] = get(boredoms,\
    \ word, 0) + 1\n        end\n    end\n    \n    return length(boredoms)\nend\n\
    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    ", "    if is_bored(S) == 0 then 1 else 0 end\nend\n  \
    \          \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    if is_empty(S) \n        return 0 \n    else\
    \ \n        boredoms = 0 \n        for word in split(S) \n            if word\
    \ == \"I\" \n                boredoms += 1 \n        return boredoms \nend \n\"\
    \"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
  "    if is_bored(S) == 0 \n        then return 0 \n        else return 1 \n    end\n\
    end", "    if is_empty(S) == true \n        return 0 \n    else \n        boredoms\
    \ = 0 \n        for word in split(S) do \n            if word == \"I\" then \n\
    \                boredoms += 1 \n            end \n        end \n        return\
    \ boredoms \n    end \nend \n\"\"\"\n</cell>\n<cell>\n# Write a function that\
    \ takes a string and returns the number of boredoms \n# in the string.\ndef count_boredoms(S::String)::Int64\
    \ \n    if is_empty(S) == true \n        return 0 \n    else \n        boredoms\
    \ = 0 \n        for word in split(S) do \n            if word == \"I\" then \n\
    \                boredoms += 1 \n            end \n        end \n        return\
    \ boredoms \n    end \nend \n</cell>\n<cell>\n# Test your function below.", " \
    \   if is_empty(S) == true \n        return 0 \n    else \n        boredoms =\
    \ 0 \n        for word in split(S) do \n            if word == \"I\" then \n \
    \               boredoms += 1 \n            end \n        end \n        return\
    \ boredoms \n    end \nend \n\"\"\"\n</cell>\n<cell>\n# Write a function that\
    \ takes a string and returns the number of words in the string.\n# \n# For example:\n\
    # \n# ```\n# count_words(\"Hello World\")\n# ```\n# should return 5.\n# \n# ```\n\
    # count_words(\"Hello World. How are you?\")\n# ```\n# should return 4.\n# \n\
    # ```\n# count_words(\"Hello World! How are you?\")\n# ```\n# should return 3.\n\
    # \n# ```\n# count_words(\"Hello World! How are you? I am fine.\")\n# ```\n# should\
    \ return 3.\n# \n# ```\n# count_words(\"Hello World! How are you? I am fine. Are\
    \ you okay?\")\n# ```\n# should return 2.\n# \n# ```\n# count_words(\"Hello World!\
    \ How are you? I am fine. Are you okay.\")\n# ```\n# should return 2.\n# \n# ```\n\
    # count_words(\"Hello World! How are you? I am fine. Are you okay.\")\n# ```\n\
    # should return 2.\n# \n# ```\n# count_words(\"Hello World! How are you? I am\
    \ fine. Are you okay.\")\n# ```\n# should return 2.\n# \n# ```\n# count_words(\"\
    Hello World! How are you? I am fine. Are you okay.\")\n# ```\n# should return\
    \ 2.\n# \n# ```\n# count_words(\"Hello World! How are you? I am fine. Are you\
    \ okay.\")\n# ```\n# should return 2.\n# \n# ```\n# count_words(\"Hello World!\
    \ How are you? I am fine. Are you okay.\")\n# ```\n# should return 2.\n# \n# ```\n\
    # count_words(\"Hello World! How are you? I am fine. Are you okay.\")\n# ```\n\
    # should return 2.\n# \n# ```\n# count_words(\"Hello World! How are you? I am\
    \ fine. Are you okay.\")\n# ```\n# should return 2.\n# \n# ```\n# count_words(\"\
    Hello World! How are you? I am fine. Are you okay.\")\n# ```\n# should return\
    \ 2.", "    if is_empty(S)\n        return 0\n    \n    boredoms = Dict{String,Int64}()\n\
    \    \n    for word in split(S)\n        if word == \"I\"\n            boredoms[word]\
    \ = 1\n        else\n            boredoms[word] = boredoms[word] + 1\n       \
    \ end\n    end\n    \n    return length(boredoms)\nend\n\"\"\"\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    if is_empty(S) then return\
    \ 0\n    \n    boredoms = Dict{String,Int64}()\n    \n    for w in split(S) do\
    \ \n        if w == \"I\" then boredoms[w] = 1 \n    end\n    \n    return length(boredoms)\n\
    end\n\"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    ", "    if is_empty(S)\n        return\
    \ 0\n    \n    boredoms = findall(S, \"^I\")\n    \n    if is_empty(boredoms)\n\
    \        return 0\n    \n    return length(boredoms)\nend\n    \"\"\"\n    \n\
    \    boredoms = findall(S, \"^I\")\n    \n    if is_empty(boredoms)\n        return\
    \ 0\n    \n    return length(boredoms)\n    \n</cell>\n<code language=julia-1.5>\n\
    @time boredoms_count(boredoms)\n</cell>\n<text>\nPart 4: Finding Boredoms in Text\n\
    Now that we have our boredoms function defined, we can use it to find boredoms\
    \ in our text. Let's start by defining a function called boredom_count that takes\
    \ a text string and returns the number of boredoms in that text.", "    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = findall(S, \"^I\")\n    return length(boredoms)\n\
    end\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    if is_empty(S)\
    \ then return 0\n    else if starts_with(S, \"I\") then return 1\n    else return\
    \ 0\nend\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    \n  \
    \  boredoms = Dict{String,Int64}()\n    for word in split(S)\n        if word==\"\
    I\"\n            boredoms[word] = get(boredoms, word, 0) + 1\n        end\n  \
    \  end\n    return length(boredoms)\nend\n\"\"\"\n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    ", "    if is_bored(S) == 0 then 1 else 0 end\nend\n        \
    \    ", "    if is_empty(S)\n        return 0\n    \n    boredoms = Dict{String,Int64}()\n\
    \    for word in split(S)\n        if word == \"I\"\n            boredoms[word]\
    \ = get(boredoms, word, 0) + 1\n        end\n    end\n    return get(boredoms,\
    \ \"I\", 0)\nend", "    if is_empty(S) \n        return 0 \n    \n    boredoms\
    \ = 0 \n    \n    for w in split(S) do \n        if w == \"I\" then \n       \
    \     boredoms += 1 \n        else \n            boredoms += 0 \n    \n    return\
    \ boredoms \nend\n\"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    S = lower(S)\n\
    \    boredoms = findall(S, \"I\")\n    return length(boredoms)\nend\n    \"\"\"\
    \n    boredoms = findall(S, \"I\")\n    return length(boredoms)", "    if is_bored(S)\
    \ == 0 then 1 else 0 end\nend\n            \"\"\"\n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    S =\
    \ lower(S)\n    \n    boredoms = 0\n    \n    for w in S\n        if w == \"i\"\
    \n            boredoms += 1\n        end\n    end\n    \n    return boredoms\n\
    end\n\"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
  "    if is_bored(S) == 0 then 1 else 0 end\nend\n\"\"\"\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if is_empty(S)\
    \ then return 0\n    else if S == \"I\" then return 1\n    else return is_bored(tail(S))\n\
    end", "    if is_empty(S)\n        return 0\n    \n    boredoms = Dict{String,Int64}()\n\
    \    \n    for w in split(S)\n        if w == \"I\"\n            boredoms[w] =\
    \ 1\n        end\n    end\n    \n    return length(boredoms)\nend\n    \"\"\"\n\
    \    \n    boredoms = Dict{String,Int64}()\n    \n    for w in split(S)\n    \
    \    if w == \"I\"\n            boredoms[w] = 1\n        end\n    end\n    \n\
    \    return length(boredoms)\nend", "    if is_empty(S) then return 0\n    else\
    \ if S == \"I\" then return 1\n    else if S == \"?\" then return 1\n    else\
    \ if S == \"!\" then return 1\n    else return 0\nend\n    \"\"\"\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    if is_bored(S) == 0 then\
    \ 1 else 0 end\nend", "    if is_empty(S)\n        return 0\n    \n    boredoms\
    \ = Dict()\n    for word in split(S)\n        if is_bored(word)\n            boredoms[word]\
    \ = 1\n        end\n    end\n    return length(boredoms)\nend\n\"\"\"\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if is_empty(S)\
    \ \n        return 0 \n    \n    boredoms = 0 \n    \n    for w in split(S) do\
    \ \n        if w == \"I\" then \n            boredoms += 1 \n        else \n \
    \           boredoms += 0 \n    \n    return boredoms \nend\n    \"\"\"\n    \n\
    \    boredoms = 0\n    \n    for w in split(S):\n        if w == \"I\":\n    \
    \        boredoms += 1\n        else:\n            boredoms += 0\n    \n    return\
    \ boredoms\n</cell>\n<cell>\n# Test your code\ns = \"I love learning\"\nassert\
    \ is_bored(s) == 3, \"is_bored function should return 3 when given s = 'I love\
    \ learning'\"\nassert is_bored(\"\") == 0, \"is_bored function should return 0\
    \ when given s = ''\"\nassert is_bored(\"I love learning\") == 3, \"is_bored function\
    \ should return 3 when given s = 'I love learning'\"\nassert is_bored(\"I hate\
    \ lord of the rings\") == 0, \"is_bored function should return 0 when given s\
    \ = 'I hate lord of the rings'\"\n</cell>\n<text>\nTask 3\nWrite a function that\
    \ takes a string and returns the number of words in the string.", "    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = Dict{String,Int64}()\n    \n    for w\
    \ in words\n        if w == \"I\"\n            boredoms[w] = 1\n        else\n\
    \            boredoms[w] = boredoms[w] + 1\n    end\n    \n    return boredoms[\"\
    I\"]\nend\n\"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    if is_empty(S) then return 0\n    else if S == \"I\" then return\
    \ 1\n    else if S == \"!\" then return 0\n    else if S == \"?\" then return\
    \ 0\n    else return is_bored(S[1..end])\nend\n    \"\"\"\n    \n    boredoms\
    \ = []\n    boredoms.append(boredom)\n    boredoms.append(boredom)\n    boredoms.append(boredom)\n\
    \    boredoms.append(boredom)\n    boredoms.append(boredom)\n    boredoms.append(boredom)\n\
    \    boredoms.append(boredom)\n    boredoms.append(boredom)\n    boredoms.append(boredom)\n\
    \    boredoms.append(boredom)\n    boredoms.append(boredom)\n    boredoms.append(boredom)\n\
    \    boredoms.append(boredom)\n    boredoms.append(boredom)\n    boredoms.append(boredom)\n\
    \    boredoms.append(boredom)\n    boredoms.append(boredom)\n    boredoms.append(boredom)\n\
    \    boredoms.append(boredom)\n    boredoms.append(boredom)\n    boredoms.append(boredom)\n\
    \    boredoms.append(boredom)\n    boredoms.append(boredom)\n    boredoms.append(boredom)\n\
    \    boredoms.append(boredom)\n    boredoms.append(boredom)\n    boredoms.append(boredom)\n\
    \    boredoms.append(boredom)\n    boredoms.append(boredom)\n    boredoms.append(boredom)\n\
    \    boredoms.append(boredom)\n    boredoms.append(boredom)\n    boredoms.append(boredom)\n\
    \    boredoms.append(boredom)\n    boredoms.append(boredom)\n    boredoms.append(boredom)\n\
    \    boredoms.append(boredom)\n    boredoms.append(boredom)\n    boredoms.append(boredom)\n\
    \    boredoms.append(boredom)\n    boredoms.append(boredom)\n    boredoms.append(boredom)\n\
    \    boredoms.append(boredom)\n    boredoms.append(boredom)\n    boredoms.append(bo",
  "    S = lower(S)\n    boredoms = 0\n    for w in split(S, \".?!\")\n        if\
    \ w == \"i\"\n            boredoms += 1\n        end\n    end\n    return boredoms\n\
    end\n\"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    if is_bored(S) == 0 then 1 else 0 end\nend\n            \"\"\"\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    if is_empty(S)\n        return 0\n    \n    boredoms = Dict()\n\
    \    for word in split(S)\n        if word == \"I\"\n            boredoms[word]\
    \ = 1\n        end\n    end\n    return length(boredoms)\nend\n    \"\"\"\n  \
    \  \n    boredoms = Dict()\n    for word in split(S)\n        if word == \"I\"\
    \n            boredoms[word] = 1\n        end\n    end\n    return length(boredoms)\n\
    end\n</cell>\n<code language=julia-1.4>\n# Test your code\n@test is_bored(\"\"\
    \"\n    I love Julia\n    I love Python\n    I love R\n    I love Julia\n    I\
    \ love Julia\n    I love Julia\n    I love Julia\n    I love Julia\n    I love\
    \ Julia\n    I love Julia\n    I love Julia\n    I love Julia\n    I love Julia\n\
    \    I love Julia\n    I love Julia\n    I love Julia\n    I love Julia\n    I\
    \ love Julia\n    I love Julia\n    I love Julia\n    I love Julia\n    I love\
    \ Julia\n    I love Julia\n    I love Julia\n    I love Julia\n    I love Julia\n\
    \    I love Julia\n    I love Julia\n    I love Julia\n    I love Julia\n    I\
    \ love Julia\n    I love Julia\n    I love Julia\n    I love Julia\n    I love\
    \ Julia\n    I love Julia\n    I love Julia\n    I love Julia\n    I love Julia\n\
    \    I love Julia\n    I love Julia\n    I love Julia\n    I love Julia\n    I\
    \ love Julia\n    I love Julia\n    I love Julia\n    I love Julia\n    I love\
    \ Julia\n    I love Julia\n    I love Julia\n    I love Julia\n    I love Julia\n\
    \    I love Julia\n    I love Julia\n    I love Julia\n    I love Julia\n    I\
    \ love Julia\n", "    if is_empty(S) == true\n        return 0\n    \n    boredoms\
    \ = 0\n    \n    for word in split(S)\n        if is_bored(word) == true\n   \
    \         boredoms += 1\n        end\n    end\n    \n    return boredoms\nend\n\
    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    if is_empty(S)\
    \ then return 0\n    \n    boredoms = Dict{String,Int64}()\n    \n    for w in\
    \ split(S) do \n        if w == \"I\" then \n            boredoms[w] = 1 \n  \
    \      else \n            boredoms[w] = 0 \n    end\n    \n    return sum(boredoms.values)\n\
    end\n\"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
  "    if is_empty(S)\n        return 0 \n    \n    boredoms = 0 \n    \n    for w\
    \ in split(S)\n        if w == \"I\"\n            boredoms += 1 \n    \n    return\
    \ boredoms \nend\n\"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if is_empty(S) == true \n        return 0 \n    else\
    \ \n        boredoms = 0 \n        for word in split(S) do \n            if word\
    \ == \"I\" then \n                boredoms += 1 \n            end \n        end\
    \ \n        return boredoms \n    end \nend \n\"\"\"\n</cell>\n<cell>\n# Test\
    \ your code\ns = \"I\"\nassert is_bored(s) == 0\ns = \"Boredom is my favorite\
    \ partner\"\nassert is_bored(s) == 2\ns = \"I like my best friend's boredom\"\n\
    assert is_bored(s) == 3\ns = \"I like my best friend's boredom!\"\nassert is_bored(s)\
    \ == 3\ns = \"I like my best friend's boredom and I love my boredom!\"\nassert\
    \ is_bored(s) == 4\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of words in a given string.", "    S = lower(S)\n    boredoms = 0\n\
    \    for w in words(S)\n        if w == \"i\"\n            boredoms += 1\n   \
    \     end\n    end\n    return boredoms\nend\n    \"\"\"\n    boredoms = 0\n \
    \   for w in words(S)\n        if w == \"i\"\n            boredoms += 1\n    \
    \    end\n    end\n    return boredoms\nend\n</cell>\n<code language=julia-1.5>\n\
    @time boredoms(\"\"\"\n    You'll be given a string of words, and your task is\
    \ to count the number\n    of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For\
    \ example:\n            \"\"\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of words in the string.", "    if\
    \ is_empty(S)\n        return 0\n    \n    boredoms = findall(S, \"I\")\n    \n\
    \    return length(boredoms)\nend", "    if is_empty(S)\n        return 0\n  \
    \  \n    boredoms = 0\n    \n    for w in split(S)\n        if w == \"I\"\n  \
    \          boredoms += 1\n        end\n    end\n    \n    return boredoms\nend\n\
    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
  "    if is_empty(S)\n        return 0\n    \n    boredoms = Dict{String,Int64}()\n\
    \    \n    for word in split(S)\n        if is_bored(word)\n            boredoms[word]\
    \ += 1\n        end\n    end\n    \n    return length(boredoms)\nend\n    \"\"\
    \"\n    \n    boredoms = Dict{String,Int64}()\n    \n    for word in split(S)\n\
    \        if is_bored(word)\n            boredoms[word] += 1\n        end\n   \
    \ end\n    \n    return length(boredoms)\nend", "    if is_empty(S)\n        return\
    \ 0\n    \n    boredoms = Dict{String,Int64}()\n    \n    for word in split(S)\n\
    \        if word == \"I\"\n            boredoms[word] = 1\n        end\n    end\n\
    \    \n    return length(boredoms)\nend\n\"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    ", "    if is_bored(S) == 0 \n        then return 0 \n        else return\
    \ 1 \n    end\nend", "    if is_empty(S) then return 0\n    else if starts_with(S,\
    \ \"I\") then return 1\n    else return 0\nend\n            \"\"\"\n    \n   \
    \ \n    \n    \"\"\"\n    Write a function that takes a string and returns the\
    \ number of words\n    in the string that start with the letter 'I'.\n    \"\"\
    \"\n    \n    \n    \n    \"\"\"\n    Write a function that takes a string and\
    \ returns the number of words\n    in the string that start with the letter 'I'\
    \ and are longer than 3 characters.\n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    Write a function that takes a string and returns the number of words\n  \
    \  in the string that start with the letter 'I' and are longer than 3 characters\n\
    \    and are separated by a single space character.\n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    Write a function that takes a string and returns the number\
    \ of words\n    in the string that start with the letter 'I' and are longer than\
    \ 3 characters\n    and are separated by a single space character.\n    \"\"\"\
    \n    \n    \n    \n    \"\"\"\n    Write a function that takes a string and returns\
    \ the number of words\n    in the string that start with the letter 'I' and are\
    \ longer than 3 characters\n    and are separated by a single space character.\n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    Write a function that takes a string\
    \ and returns the number of words\n    in the string that start with the letter\
    \ 'I' and are longer than 3 characters\n    and are separated by a single space\
    \ character.\n    \"\"\"\n    \n    \n    \n    \"\"\"\n    Write a function that\
    \ takes a string and returns the number of words\n    in the string that start\
    \ with the letter 'I' and are longer than 3 characters\n    and are separated\
    \ by a single space character.\n    \"\"\"\n    \n    \n    \n    \"\"\"\n   \
    \ Write a function that takes a string and returns the number of words\n    in\
    \ the string that start with the letter 'I' and are longer than 3 characters\n\
    \    and are separated by a single space character.\n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    Write a function that takes a string and returns the number\
    \ of words\n    in the string that start with the letter 'I' and are longer than\
    \ 3 characters\n    and are separated by a single space character.\n    \"\"\"\
    \n    \n    \n    \n    \"\"\"\n    Write a function that takes a string and returns\
    \ the number of words\n    in the string that start with the letter 'I' and are\
    \ longer than 3 characters\n    and are separated by a single space character.\n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    Write a function that takes a string\
    \ and returns the number of words\n    in the string that start with the letter\
    \ 'I' and are longer than 3 characters\n    and are separated by a single space\
    \ character.\n    \"\"\"\n    \n    \n    \n    \"\"\"", "    if is_empty(S) then\
    \ return 0\n    if S == \"I\" then return 1\n    else if S == \"!\" then return\
    \ 0\n    else if S == \"?\" then return 0\n    else if S == \".\" then return\
    \ 0\n    else return is_bored(S[1..end])\nend\n    \"\"\"\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "  \
    \  if is_empty(S)\n        return 0\n    \n    boredoms = findall(S, \"^I\")\n\
    \    \n    if is_empty(boredoms)\n        return 0\n    \n    return length(boredoms)\n\
    end\n    \"\"\"\n    \n    boredoms = findall(S, \"^I\")\n    \n    if is_empty(boredoms)\n\
    \        return 0\n    \n    return length(boredoms)\n    \n</cell>\n<code language=julia-1.5>\n\
    @time boredoms = count_boredoms(boredoms_str)\n</cell>\n<code language=julia-1.5>\n\
    @time boredoms = count_boredoms(boredoms_str)\n</cell>\n<text>\nExercise\nWrite\
    \ a function that takes a string and returns the number of words in the string\
    \ that start with capital letters.", "    if is_bored(S) == 0 then 1 else 0 end\n\
    end\n            \"\"\"\n    \n    boredoms = findall(S, \"I\")\n    boredoms_count\
    \ = length(boredoms)\n    return boredoms_count\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test your code\n@code_warntype is_bored(boredoms)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that counts the number of times the word \"I\" appears in\
    \ the sentence \"I love you!\".", "    S = lower(S)\n    S = replace(S, \".\"\
    , \"?\")\n    S = replace(S, \"!\", \"?\")\n    S = replace(S, \"?\", \".\")\n\
    \    S = replace(S, \"?\", \"!\")\n    S = replace(S, \"!\", \".\")\n    S = replace(S,\
    \ \"!\", \"?\")\n    S = replace(S, \".\", \"?\")\n    S = replace(S, \"?\", \"\
    .\")\n    S = replace(S, \"?\", \"!\")\n    S = replace(S, \"!\", \".\")\n   \
    \ S = replace(S, \"!\", \"?\")\n    S = replace(S, \".\", \"?\")\n    S = replace(S,\
    \ \"?\", \".\")\n    S = replace(S, \"?\", \"!\")\n    S = replace(S, \"!\", \"\
    .\")\n    S = replace(S, \"!\", \"?\")\n    S = replace(S, \".\", \"?\")\n   \
    \ S = replace(S, \"?\", \".\")\n    S = replace(S, \"?\", \"!\")\n    S = replace(S,\
    \ \"!\", \".\")\n    S = replace(S, \"!\", \"?\")\n    S = replace(S, \".\", \"\
    ?\")\n    S = replace(S, \"?\", \".\")\n    S = replace(S, \"?\", \"!\")\n   \
    \ S = replace(S, \"!\", \".\")\n    S = replace(S, \"!\", \"?\")\n    S = replace(S,\
    \ \".\", \"?\")\n    S = replace(S, \"?\", \".\")\n    S = replace(S, \"?\", \"\
    !\")\n    S = replace(S, \"!\", \".\")\n    S = replace(S, \"!\", \"?\")\n   \
    \ S = replace(S, \".\", \"?\")\n    S = replace(S, \"?\", \".\")\n    S = replace(S,\
    \ \"?\", \"!\")\n    S = replace(S, \"!\", \".\")\n    S = replace(S, \"!\", \"\
    ?\")\n    S = replace(S, \".\", \"?\")\n    S = replace(S, \"?\", \".\")\n   \
    \ S = replace(S, \"?\", \"!\")\n    S = replace(S, \"!\", \".\")\n    S = replace(S,\
    \ \"!\", \"?\")\n    S = replace(S, \".\", \"?\")\n    S = replace(S, \"?\", \"\
    .\")\n    S = replace(S, \"?\", \"!\")\n    S = replace(S, \"!\", \".\")\n   \
    \ S = replace(S, \"!\", \"?\")\n    S = replace(S, \".\", \"?\")\n    S = replace(S,\
    \ \"?\", \".\")\n    S = replace(S, \"?\", \"!\")\n    S = replace(S, \"!\", \"\
    .\")\n    S = replace(S, \"!\", \"?\")\n    S = replace(S, \".\", \"?\")\n   \
    \ S = replace(S, \"?\", \".\")\n    S = replace(S, \"?\", \"!\")\n    S = replace(S,\
    \ \"!\", \".\")\n    S = replace(S, \"!\", \"?\")\n    S = replace(", "    if\
    \ is_empty(S)\n        return 0\n    \n    boredoms = findall(S, \"^I\")\n   \
    \ \n    if is_empty(boredoms)\n        return 0\n    \n    return length(boredoms)\n\
    end\n    \"\"\"\n    \n    boredoms = findall(S, \"^I\")\n    \n    if is_empty(boredoms)\n\
    \        return 0\n    \n    return length(boredoms)\n</cell>\n<code language=julia-1.5>\n\
    @time boredoms_count = boredoms_count(boredoms)\n</cell>\n<code language=julia-1.5>\n\
    @time boredoms_count = boredoms_count(boredoms)\n</cell>\n<code language=julia-1.5>\n\
    @time boredoms_count = boredoms_count(boredoms)\n</cell>\n<code language=julia-1.5>\n\
    @time boredoms_count = boredoms_count(boredoms)\n</cell>\n<code language=julia-1.5>\n\
    @time boredoms_count = boredoms_count(boredoms)\n</cell>\n<code language=julia-1.5>\n\
    @time boredoms_count = boredoms_count(boredoms)\n</cell>\n<code language=julia-1.5>\n\
    @time boredoms_count = boredoms_count(boredoms)\n</cell>\n<code language=julia-1.5>\n\
    @time boredoms_count = boredoms_count(boredoms)\n</cell>\n<code language=julia-1.5>\n\
    @time boredoms_count = boredoms_count(boredoms)\n</cell>\n<code language=julia-1.5>\n\
    @time boredoms_count = boredoms_count(boredoms)\n</cell>\n<code language=julia-1.5>\n\
    @time boredoms_count = boredoms_count(boredoms)\n</cell>\n<code language=julia-1.5>\n\
    @time boredoms_count = boredoms_count(boredoms)\n</cell>\n<code language=julia-1.5>\n\
    @time boredoms_count = boredoms_count(boredoms)\n</cell>\n<code language=julia-1.5>\n\
    @time boredoms_count = boredoms_count(boredoms)\n</cell>\n<code language=julia-1.5>\n\
    @time boredoms_count = boredoms_count(boredoms)\n</cell>\n<code language=julia-1.5>\n\
    @time boredoms_count = boredoms_count(boredoms)\n</cell", "    if is_empty(S)\n\
    \        return 0\n    \n    I::Int64 = 0\n    \n    for w in split(S)\n     \
    \   if w == \"I\"\n            I += 1\n        end\n    end\n    \n    return\
    \ I\nend\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    ", "    if is_empty(S)\n        return 0\n    \n    boredoms\
    \ = Dict{String,Int64}()\n    \n    for word in split(S)\n        if word==\"\
    I\"\n            boredoms[word] = get(boredoms, word, 0) + 1\n        end\n  \
    \  end\n    \n    return length(boredoms)\nend\n    \"\"\"\n    \n    boredoms\
    \ = Dict{String,Int64}()\n    \n    for word in split(S)\n        if word==\"\
    I\"\n            boredoms[word] = get(boredoms, word, 0) + 1\n        end\n  \
    \  end\n    \n    return length(boredoms)\nend\n</cell>\n<code language=julia-1.5>\n\
    is_bored(\"\"\"\n    I love Julia\n    Julia is awesome\n    Julia is awesome\n\
    \    Julia is awesome\n    Julia is awesome\n    Julia is awesome\n    Julia is\
    \ awesome\n    Julia is awesome\n    Julia is awesome\n    Julia is awesome\n\
    \    Julia is awesome\n    Julia is awesome\n    Julia is awesome\n    Julia is\
    \ awesome\n    Julia is awesome\n    Julia is awesome\n    Julia is awesome\n\
    \    Julia is awesome\n    Julia is awesome\n    Julia is awesome\n    Julia is\
    \ awesome\n    Julia is awesome\n    Julia is awesome\n    Julia is awesome\n\
    \    Julia is awesome\n    Julia is awesome\n    Julia is awesome\n    Julia is\
    \ awesome\n    Julia is awesome\n    Julia is awesome\n    Julia is awesome\n\
    \    Julia is awesome\n    Julia is awesome\n    Julia is awesome\n    Julia is\
    \ awesome\n    Julia is awesome\n    Julia is awesome\n    Julia is awesome\n\
    \    Julia is awesome\n    Julia is awesome\n    Julia is awesome\n    Julia is\
    \ awesome\n    Julia is awesome\n    Julia is awesome\n    Julia is awesome\n\
    \    Julia is awesome\n    Julia is awesome\n    Julia is awesome\n    Julia is\
    \ awesome\n    Julia is awesome\n    Julia is awesome\n    Julia is awesome\n\
    \    Julia is awesome", "    if is_empty(S)\n        return 0\n    \n    boredoms\
    \ = Dict{String,Int64}()\n    \n    for word in split(S)\n        if word==\"\
    I\"\n            boredoms[word] = boredoms[word]+1\n        end\n    end\n   \
    \ \n    return length(boredoms)\nend\n\"\"\"\n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = Dict()\n    \n    for w in split(S)\n\
    \        if is_bored(w)\n            boredoms[w] = get(boredoms, w, 0) + 1\n \
    \       end\n    end\n    \n    return length(boredoms)\nend\n\"\"\"\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if is_empty(S)\n        return 0\n    \n    boredoms\
    \ = Dict{String,Int64}()\n    \n    for w in split(S)\n        if w == \"I\"\n\
    \            boredoms[w] = get(boredoms, w, 0) + 1\n        end\n    end\n   \
    \ \n    return length(boredoms)\nend\n\"\"\"\n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    if is_bored(S)\
    \ == 0 then 1 else 0 end\nend", "    S = lower(S)\n    S = replace(S, \".\", \"\
    \")\n    S = replace(S, \"?\", \"\")\n    S = replace(S, \"!\", \"\")\n    S =\
    \ replace(S, \"I\", \"\")\n    S = replace(S, \"i\", \"\")\n    S = replace(S,\
    \ \"I\", \"\")\n    S = replace(S, \"i\", \"\")\n    S = replace(S, \"I\", \"\"\
    )\n    S = replace(S, \"i\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S,\
    \ \"i\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"i\", \"\"\
    )\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"i\", \"\")\n    S = replace(S,\
    \ \"I\", \"\")\n    S = replace(S, \"i\", \"\")\n    S = replace(S, \"I\", \"\"\
    )\n    S = replace(S, \"i\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S,\
    \ \"i\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"i\", \"\"\
    )\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"i\", \"\")\n    S = replace(S,\
    \ \"I\", \"\")\n    S = replace(S, \"i\", \"\")\n    S = replace(S, \"I\", \"\"\
    )\n    S = replace(S, \"i\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S,\
    \ \"i\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"i\", \"\"\
    )\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"i\", \"\")\n    S = replace(S,\
    \ \"I\", \"\")\n    S = replace(S, \"i\", \"\")\n    S = replace(S, \"I\", \"\"\
    )\n    S = replace(S, \"i\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S,\
    \ \"i\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"i\", \"\"\
    )\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"i\", \"\")\n    S = replace(S,\
    \ \"I\", \"\")\n    S = replace(S, \"i\", \"\")\n    S = replace(S, \"I\", \"\"\
    )\n    S = replace(S, \"i\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S,\
    \ \"i\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"i\", \"\"\
    )\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"i\", \"\")\n    S = replace(S,\
    \ \"I\", \"\")\n    S = replace(S, \"i\", \"\")\n    S = replace(S, \"I\", \"\"\
    )\n    S = replace(S, \"i\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S,\
    \ \"i\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"i\", \"\"\
    )\n    S = replace(", "    if is_empty(S)\n        return 0\n    \n    boredoms\
    \ = Dict()\n    for word in split(S)\n        if word[1] == 'I'\n            boredoms[word]\
    \ = 0\n    \n    return length(boredoms)\nend\n    \"\"\"\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    if is_empty(S)\n    \
    \    return 0\n    \n    boredoms = Dict{String,Int64}()\n    for word in split(S)\n\
    \        if word == \"I\"\n            boredoms[word] = get(boredoms, word, 0)\
    \ + 1\n        end\n    end\n    return get(boredoms, \"I\", 0)\nend\n    \"\"\
    \"\n    \n    boredoms = Dict{String,Int64}()\n    for word in split(S)\n    \
    \    if word == \"I\"\n            boredoms[word] = get(boredoms, word, 0) + 1\n\
    \        end\n    end\n    return get(boredoms, \"I\", 0)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time boredoms(\"\"\"\n    You'll be given a string of\
    \ words, and your task is to count the number\n    of boredoms. A boredom is a\
    \ sentence that starts with the word \"I\".\n    Sentences are delimited by '.',\
    \ '?' or '!'.\n   \n    For example:\n            \"\"\")\n</cell>\n<code language=julia-1.5>\n\
    @time boredoms(\"\"\"\n    You'll be given a string of words, and your task is\
    \ to count the number\n    of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For\
    \ example:\n            \"\"\")\n</cell>\n<code language=julia-1.5>\n@time boredoms(\"\
    \"\"\n    You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n     \
    \       \"\"\")\n</cell>\n<code language=julia-1.5>\n@time boredoms(\"\"\"\n \
    \   You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n     \
    \       \"\"\")\n</cell>\n<code language=julia-1.5>\n@time boredoms(\"\"\"\n \
    \   You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n     \
    \       \"\"\")\n</cell>\n<code language=julia-1.5>\n@time bo", "    if is_empty(S)\n\
    \        return 0 \n    \n    I = find(S, 'I')\n    if I < 1\n        return 0\n\
    \    \n    boredoms = 0 \n    \n    for i = I + 1 : length(S)\n        if S[i]\
    \ == '.'\n            boredoms += 1\n        \n    return boredoms\nend\n    \"\
    \"\"\n    \n    boredoms = 0\n    \n    for word in words:\n        if word.startswith('I'):\n\
    \            boredoms += 1\n    \n    return boredoms\n</cell>\n<cell>\n# Test\
    \ your code\nboredom = is_bored(boredom_sentence)\nprint(boredom)\n</cell>\n<text>\n\
    Expected output\n2", "    if is_empty(S) then return 0\n    if S == \"I\" then\
    \ return 1\n    if is_bored(S[1:end-1]) then return 1 + is_bored(S[1:end-1])\n\
    \    if is_bored(S[2:end]) then return 1 + is_bored(S[2:end])\n    if is_bored(S[2:end-1])\
    \ then return 1 + is_bored(S[2:end-1])\n    if is_bored(S[3:end]) then return\
    \ 1 + is_bored(S[3:end])\n    if is_bored(S[4:end]) then return 1 + is_bored(S[4:end])\n\
    \    if is_bored(S[2:end-1]) then return 1 + is_bored(S[2:end-1])\n    if is_bored(S[3:end-1])\
    \ then return 1 + is_bored(S[3:end-1])\n    if is_bored(S[4:end-1]) then return\
    \ 1 + is_bored(S[4:end-1])\n    if is_bored(S[2:end]) then return 1 + is_bored(S[2:end])\n\
    \    if is_bored(S[3:end]) then return 1 + is_bored(S[3:end])\n    if is_bored(S[4:end])\
    \ then return 1 + is_bored(S[4:end])\n    if is_bored(S[2:end-1]) then return\
    \ 1 + is_bored(S[2:end-1])\n    if is_bored(S[3:end-1]) then return 1 + is_bored(S[3:end-1])\n\
    \    if is_bored(S[4:end-1]) then return 1 + is_bored(S[4:end-1])\n    if is_bored(S[2:end])\
    \ then return 1 + is_bored(S[2:end])\n    if is_bored(S[3:end]) then return 1\
    \ + is_bored(S[3:end])\n    if is_bored(S[4:end]) then return 1 + is_bored(S[4:end])\n\
    \    if is_bored(S[2:end-1]) then return 1 + is_bored(S[2:end-1])\n    if is_bored(S[3:end-1])\
    \ then return 1 + is_bored(S[3:end-1])\n    if is_bored(S[4:end-1]) then return\
    \ 1 + is_bored(S[4:end-1])\n    if is_bored(S[2:end]) then return 1 + is_bored(S[2:end])\n\
    \    if is_bored(S[3:end]) then return 1 + is_bored(S[3:end])\n    if is_bored(S[4:end])\
    \ then return 1 + is_bored(S[4", "    if is_empty(S)\n        return 0\n    \n\
    \    boredoms = Dict{String,Int64}()\n    \n    for word in split(S)\n       \
    \ if word==\"I\"\n            boredoms[word] = get(boredoms, word, 0) + 1\n  \
    \      end\n    end\n    \n    return get(boredoms, \"I\", 0)\nend\n\"\"\"\n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    if is_bored(S) == 0 \n        then return 1 \n        else return 0 \n    end\
    \ \nend \n\"\"\"\n    \n    \n    \"\"\"\n    Write a function that takes a string\
    \ and returns the number of words\n    in the string that start with the letter\
    \ 'I'.\n    \n    For example:\n    \n    ```julia\n    julia> count_boredom(\"\
    I like Ice cream.\")\n    2\n    ```\n    \"\"\"\n    \n    \n    \"\"\"\n   \
    \ Write a function that takes a string and returns the number of words\n    in\
    \ the string that start with the letter 'I'.\n    \n    For example:\n    \n \
    \   ```julia\n    julia> count_boredom(\"I like Ice cream.\")\n    2\n    ```\n\
    \    \"\"\"\n    \n    \n    \"\"\"\n    Write a function that takes a string\
    \ and returns the number of words\n    in the string that start with the letter\
    \ 'I'.\n    \n    For example:\n    \n    ```julia\n    julia> count_boredom(\"\
    I like Ice cream.\")\n    2\n    ```\n    \"\"\"\n    \n    \n    \"\"\"\n   \
    \ Write a function that takes a string and returns the number of words\n    in\
    \ the string that start with the letter 'I'.\n    \n    For example:\n    \n \
    \   ```julia\n    julia> count_boredom(\"I like Ice cream.\")\n    2\n    ```\n\
    \    \"\"\"\n    \n    \n    \"\"\"\n    Write a function that takes a string\
    \ and returns the number of words\n    in the string that start with the letter\
    \ 'I'.\n    \n    For example:\n    \n    ```julia\n    julia> count_boredom(\"\
    I like Ice cream.\")\n    2\n    ```\n    \"\"\"\n    \n    \n    \"\"\"\n   \
    \ Write a function that takes a string and returns the number of words\n    in\
    \ the string that start with the letter 'I'.\n    \n    For example:\n    \n \
    \   ```julia\n    julia> count_boredom(\"I like Ice cream.\")\n    2\n    ```\n\
    \    \"\"\"\n    \n    \n    \"\"\"\n    Write a function that takes a string\
    \ and returns the number of words\n    in the string that start with the letter\
    \ 'I'.\n    \n    For example:\n    \n    ```julia\n    julia> count_boredom(\"\
    I like Ice cream.\")\n    2\n    ```\n    \"\"\"\n    \n    \n    \"\"\"\n   \
    \ Write a function that takes a string and returns the number of words\n    in\
    \ the string that start with the letter 'I'.\n    \n    For example:\n    \n \
    \   ```julia\n", "    if is_empty(S) then return 0\n    \n    boredoms = 0\n \
    \   \n    for w in split(S) do \n        if w == \"I\" then boredoms += 1\n  \
    \  end\n    \n    return boredoms\nend\n\"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    if is_empty(S) then return 0\n    else\
    \ if starts_with(S,\"I\") then return 1\n    else return 0\nend\n    \"\"\"\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    ", "    if is_empty(S)\n        return\
    \ 0;\n    \n    boredoms = findall(S,\"I\");\n    \n    return length(boredoms);\n\
    end\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    if is_bored(S) == 0 then\
    \ 1 else 0 end\nend", "    if is_empty(S) == true \n        return 0 \n    else\
    \ \n        boredoms = 0 \n        for w in S \n            if w == \"I\" \n \
    \               boredoms += 1 \n        return boredoms \nend \n\"\"\"\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if\
    \ is_empty(S) \n        0\n    else\n        length(filter(x -> x == 'I', S))\
    \ \n    end\nend\n            \n            \n            \n            \n   \
    \         \n            \n            \n            \n            \n         \
    \   \n            \n            \n            \n            \n            \n \
    \           \n            \n            \n            \n            \n       \
    \     \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n", "    if is_bored(S) == 0 \n        return\
    \ 0 \n    else \n        return 1 \n    end \nend \n\"\"\"\n    \n    \n    \"\
    \"\"\n    You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n     \
    \       \"\"\"", "    if is_bored(S) == 1 then 1 else 0 end\nend\n           \
    \ \"\"\"\n    \n    boredoms = findall(S, \"I.*\")\n    boredoms = length(boredoms)\n\
    \    \n    return boredoms\nend\n</cell>\n<code language=julia-1.5>", "    if\
    \ is_empty(S)\n        return 0\n    \n    boredoms = findall(S, \"^I\")\n   \
    \ \n    if is_empty(boredoms)\n        return 0\n    \n    return length(boredoms)\n\
    end", "    if is_bored(S) == 0 then 1 else 0 end\nend\n            \"\"\"\n  \
    \  \n    \n    \"\"\"\n    Write a function that takes a string and returns the\
    \ number of boredoms \n    in the string.\n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    Write a function that takes a string and returns the number of boredoms\
    \ \n    in the string.\n    \"\"\"\n    \n    \n    \n    \"\"\"\n    Write a\
    \ function that takes a string and returns the number of boredoms \n    in the\
    \ string.\n    \"\"\"\n    \n    \n    \n    \"\"\"\n    Write a function that\
    \ takes a string and returns the number of boredoms \n    in the string.\n   \
    \ \"\"\"\n    \n    \n    \n    \"\"\"\n    Write a function that takes a string\
    \ and returns the number of boredoms \n    in the string.\n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    Write a function that takes a string and returns\
    \ the number of boredoms \n    in the string.\n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    Write a function that takes a string and returns the number of\
    \ boredoms \n    in the string.\n    \"\"\"\n    \n    \n    \n    \"\"\"\n  \
    \  Write a function that takes a string and returns the number of boredoms \n\
    \    in the string.\n    \"\"\"\n    \n    \n    \n    \"\"\"\n    Write a function\
    \ that takes a string and returns the number of boredoms \n    in the string.\n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    Write a function that takes a string\
    \ and returns the number of boredoms \n    in the string.\n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    Write a function that takes a string and returns\
    \ the number of boredoms \n    in the string.\n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    Write a function that takes a string and returns the number of\
    \ boredoms \n    in the string.\n    \"\"\"\n    \n    \n    \n    \"\"\"\n  \
    \  Write a function that takes a string and returns the number of boredoms \n\
    \    in the string.\n    \"\"\"\n    \n    \n    \n    \"\"\"\n    Write a function\
    \ that takes a string and returns the number of boredoms \n    in the string.\n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    Write a function that takes a string\
    \ and returns the number of boredoms \n    in the string.\n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    Write a function that takes a string and returns\
    \ the number of boredoms \n    in the string.\n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    Write a function that takes a string and returns the number of\
    \ boredoms \n    in the string.\n    \"\"\"\n    \n    \n    \n    \"\"\"\n  \
    \  Write a function that takes a string and returns the number of boredoms \n",
  "    if is_empty(S)\n        return 0\n    \n    boredoms = findall(S, \"^I.*\"\
    )\n    if is_empty(boredoms)\n        return 0\n    \n    return length(boredoms)\n\
    end\n    \"\"\"\n    \n    boredoms = findall(S, \"^I.*\")\n    if is_empty(boredoms):\
    \ return 0\n    \n    return length(boredoms)\n</cell>\n<code language=julia-1.5>\n\
    @time boredoms(boredom_sentence)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of words in the string that start\
    \ with the letter 'e'.", "    S = lower(S)\n    boredoms = 0\n    for w in S\n\
    \        if w == \"i\"\n            boredoms += 1\n        end\n    end\n    return\
    \ boredoms\nend\nis_bored(\"\"\"\n    I love Julia!\n    Julia is my favorite\
    \ language!\n    Julia is my favorite language!\n    Julia is my favorite language!\n\
    \    Julia is my favorite language!\n    Julia is my favorite language!\n    Julia\
    \ is my favorite language!\n    Julia is my favorite language!\n    Julia is my\
    \ favorite language!\n    Julia is my favorite language!\n    Julia is my favorite\
    \ language!\n    Julia is my favorite language!\n    Julia is my favorite language!\n\
    \    Julia is my favorite language!\n    Julia is my favorite language!\n    Julia\
    \ is my favorite language!\n    Julia is my favorite language!\n    Julia is my\
    \ favorite language!\n    Julia is my favorite language!\n    Julia is my favorite\
    \ language!\n    Julia is my favorite language!\n    Julia is my favorite language!\n\
    \    Julia is my favorite language!\n    Julia is my favorite language!\n    Julia\
    \ is my favorite language!\n    Julia is my favorite language!\n    Julia is my\
    \ favorite language!\n    Julia is my favorite language!\n    Julia is my favorite\
    \ language!\n    Julia is my favorite language!\n    Julia is my favorite language!\n\
    \    Julia is my favorite language!\n    Julia is my favorite language!\n    Julia\
    \ is my favorite language!\n    Julia is my favorite language!\n    Julia is my\
    \ favorite language!\n    Julia is my favorite language!\n    Julia is my favorite\
    \ language!\n    Julia is my favorite language!\n    Julia is my favorite language!\n\
    \    Julia is my favorite language!\n    Julia is my favorite language!\n    Julia\
    \ is my favorite language!\n    Julia is my favorite language!\n    Julia is my\
    \ favorite language!\n    Julia is my favorite language!\n    Julia is my favorite\
    \ language!", "    \n    S = lower(S)\n    \n    boredoms = findall(S, \"^I.*\"\
    )\n    \n    return length(boredoms)\nend\n    \"\"\"\n    boredoms = findall(S,\
    \ \"^I.*\")\n    return length(boredoms)\n</cell>\n<code language=julia-1.5>\n\
    @time boredom_count = is_bored(boredoms)\n</cell>\n<text>\nExercise: Write a function\
    \ that counts the number of \"I\"s in a string.", "    if is_bored(S) == 1 then\
    \ 1 else 0 end\nend", "    if is_bored(S) == 0 then 1 else 0 end\nend\n      \
    \      ", "    if is_empty(S)\n        return 0\n    \n    boredoms = findall(S,\
    \ \"^I.*\")\n    \n    return length(boredoms)\nend\n    \"\"\"\n    \n    boredoms\
    \ = findall(S, \"^I.*\")\n    \n    return length(boredoms)\n    \n</cell>\n<code\
    \ language=julia-1.5>\n@time boredom_count = is_bored(boredoms)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns the number of words\
    \ in the string.", "    if is_empty(S) == true\n        return 0\n    else \n\
    \        boredoms = 0\n        for word in split(S)\n            if word == \"\
    I\"\n                boredoms += 1\n        return boredoms\nend\n           \
    \ \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    S = lower(S)\n    boredoms = 0\n    for w in split(S, '.',\
    \ '?', '!')\n        if w == \"i\"\n            boredoms += 1\n        end\n \
    \   end\n    return boredoms\nend\n            \"\"\"\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    ", "    S = lower(S)\n    S = strip(S)\n\
    \    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S\
    \ = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n\
    \    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S\
    \ = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n\
    \    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S\
    \ = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n\
    \    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S\
    \ = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n\
    \    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S\
    \ = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n\
    \    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S\
    \ = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n\
    \    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S\
    \ = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n\
    \    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S\
    \ = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n\
    \    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S\
    \ = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n\
    \    S = strip(S)\n    S = strip(S)\n    S = strip", "    \n    boredoms = 0\n\
    \    \n    for word in S\n        if word[0] == \"I\"\n            boredoms +=\
    \ 1\n    end\n    return boredoms\nend\n            \"\"\"\n    \n    boredoms\
    \ = 0\n    \n    for word in S\n        if word[0] == \"I\"\n            boredoms\
    \ += 1\n    end\n    return boredoms\nend\n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n", "    if is_empty(S)\n        return 0\n    \n\
    \    boredoms = Dict{String,Int64}()\n    \n    for w in split(S)\n        if\
    \ w == \"I\"\n            boredoms[w] = 1\n        end\n    end\n    \n    return\
    \ length(boredoms)\nend\n    \"\"\"\n    \n    boredoms = Dict{String,Int64}()\n\
    \    \n    for w in split(S)\n        if w == \"I\"\n            boredoms[w] =\
    \ 1\n        end\n    end\n    \n    return length(boredoms)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_bored(\"\"\"\n    You'll be given a string of\
    \ words, and your task is to count the number\n    of boredoms. A boredom is a\
    \ sentence that starts with the word \"I\".\n    Sentences are delimited by '.',\
    \ '?' or '!'.\n   \n    For example:\n            \"\"\")\n</cell>\n<code language=julia-1.5>\n\
    @time is_bored(\"\"\"\n    You'll be given a string of words, and your task is\
    \ to count the number\n    of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For\
    \ example:\n            \"\"\")\n</cell>\n<code language=julia-1.5>\n@time is_bored(\"\
    \"\"\n    You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n     \
    \       \"\"\")\n</cell>\n<code language=julia-1.5>\n@time is_bored(\"\"\"\n \
    \   You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n     \
    \       \"\"\")\n</cell>\n<code language=julia-1.5>\n@time is_bored(\"\"\"\n \
    \   You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n     \
    \       \"\"\")\n</cell>\n<code language=julia-1.5>\n@time is_bored(\"\"\"\n \
    \   You'll be given a string of words, and ", "    if is_bored(S) == 0 \n    \
    \    return 0 \n    else \n        return 1 \nend\n            \"\"\"\n    \n\
    \    \n    \"\"\"\n    Write a function that takes a string and returns the number\
    \ of boredoms.\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    ", "    if is_bored(S) == 0 then 1 else 0 end\n\
    end", "    if is_empty(S)\n        return 0\n    \n    boredoms = Dict{String,Int64}()\n\
    \    for word in split(S)\n        if word[1] == 'I'\n            boredoms[word]\
    \ = 0\n        end\n    end\n    return length(boredoms)\nend\n\"\"\"\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    ", "    if is_empty(S) then return 0\n\
    \    else if S == \"I\" then return 1\n    else if S == \"?\" then return 1\n\
    \    else if S == \"!\" then return 1\n    else return 0\nend\n            \"\"\
    \"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if\
    \ is_empty(S)\n        return 0\n    \n    I = find(S, \"I\")\n    if I < 0\n\
    \        return 0\n    \n    boredoms = 0\n    \n    for i = I + 1 to length(S)\n\
    \        if S[i] == '.'\n            boredoms += 1\n        \n    return boredoms\n\
    end\n    \"\"\"\n    \n    boredoms = 0\n    \n    for word in words:\n      \
    \  if word == \"I\":\n            boredoms += 1\n        \n    return boredoms\n\
    </cell>\n<text>\nLet's test our function", "    if is_empty(S)\n        return\
    \ 0\n    \n    boredoms = Dict{String,Int64}()\n    \n    for w in split(S)\n\
    \        if w == \"I\"\n            boredoms[w] = 1\n        end\n    end\n  \
    \  \n    return length(boredoms)\nend\n\"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    ", "    if is_empty(S)\n        return 0\n    \n    boredoms = Dict{String,Int64}()\n\
    \    for word in split(S)\n        if word == \"I\"\n            boredoms[word]\
    \ = 1\n        end\n    end\n    return length(boredoms)\nend\nis_bored(\"I like\
    \ Ice.\")\nis_bored(\"I like ice.\")\nis_bored(\"I like ice.I\")\nis_bored(\"\
    I like ice.I.\")\nis_bored(\"I like ice.I!\") # returns 1\nis_bored(\"I like ice.I!I\"\
    ) # returns 2\nis_bored(\"I like ice.I!I.\")\nis_bored(\"I like ice.I!I!\") #\
    \ returns 3\nis_bored(\"I like ice.I!I!I.\")\nis_bored(\"I like ice.I!I!I!I\"\
    ) # returns 4\nis_bored(\"I like ice.I!I!I!I.\")\nis_bored(\"I like ice.I!I!I!I!\"\
    ) # returns 5\nis_bored(\"I like ice.I!I!I!I!I\") # returns 6\nis_bored(\"I like\
    \ ice.I!I!I!I!I!\") # returns 7\nis_bored(\"I like ice.I!I!I!I!I!I\") # returns\
    \ 8\nis_bored(\"I like ice.I!I!I!I!I!I!\") # returns 9\nis_bored(\"I like ice.I!I!I!I!I!I!I\"\
    ) # returns 10\nis_bored(\"I like ice.I!I!I!I!I!I!I!\") # returns 11\nis_bored(\"\
    I like ice.I!I!I!I!I!I!I!I\") # returns 12\nis_bored(\"I like ice.I!I!I!I!I!I!I!I!\"\
    ) # returns 13\nis_bored(\"I like ice.I!I!I!I!I!I!I!I!I\") # returns 14\nis_bored(\"\
    I like ice.I!I!I!I!I!I!I!I!I!\") # returns 15\nis_bored(\"I like ice.I!I!I!I!I!I",
  "    \n    S = lower(S)\n    \n    count = 0\n    \n    for w in S:\n        if\
    \ w == \"i\":\n            count += 1\n            \n    return count\n\"\"\"\n\
    \    \n    S = lower(S)\n    \n    count = 0\n    \n    for w in S:\n        if\
    \ w == \"i\":\n            count += 1\n            \n    return count\n</cell>\n\
    <cell>\n# Test your code\ns = \"I like learning\"\nassert is_bored(s) == 3, \"\
    is_bored function should return 3 because \\\nS contains 'i' and it starts with\
    \ 'I' \"\nassert is_bored(\"\") == 0, \"is_bored function should return 0 because\
    \ \\\nS contains no characters and it starts with 'I' \"\nassert is_bored(\"I\
    \ like learning\") == 3, \"is_bored function should return 3 because \\\nS contains\
    \ 'i' and it starts with 'I' \"\nassert is_bored(\"I like learning to code\")\
    \ == 3, \"is_bored function should return 3 because \\\nS contains 'i' and it\
    \ starts with 'I' \"\nassert is_bored(\"Ilike learning to code\") == 3, \"is_bored\
    \ function should return 3 because \\\nS contains 'i' and it starts with 'I' \"\
    \nassert is_bored(\"I like !learning\") == 0, \"is_bored function should return\
    \ 0 because \\\nS contains 'i' and it starts with 'I' \"\nassert is_bored(\"I\
    \ like !learning to code\") == 0, \"is_bored function should return 0 because\
    \ \\\nS contains 'i' and it starts with 'I' \"\nassert is_bored(\"I like !learning\
    \ to code !\") == 0, \"is_bored function should return 0 because \\\nS contains\
    \ 'i' and it starts with 'I' \"\n</cell>\n<text>\nTask 2: Write a function that\
    \ counts the number of times a substring appears in a string.\nThe substring will\
    \ be a boredom sentence that starts with the word \"I\".\nSentences are delimited\
    \ by '.', '?' or '!'.\n   \n    For example:\n            \"\"\"", "    if is_empty(S)\
    \ \n        return 0 \n    else \n        boredoms = 0 \n        for w in split(S)\
    \ \n            if w == \"I\" \n                boredoms += 1 \n        return\
    \ boredoms \nend \n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    ", "    if is_bored(S) == 1 then 1 else 0 end\nend\n  \
    \          \"\"\"\n    \n    \n    \"\"\"\n    Write a function that takes a string\
    \ and returns the number of boredoms.\n    \n    For example:\n            \"\"\
    \"", "    S = lower(S)\n    boredoms = 0\n    for w in words(S)\n        if w\
    \ == \"i\"\n            boredoms += 1\n        end\n    end\n    return boredoms\n\
    end\n            \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    if is_empty(S)\n        return 0\n    \n\
    \    boredoms = Dict{String,Int64}()\n    \n    for w in split(S)\n        if\
    \ w == \"I\"\n            boredoms[w] = 1\n        end\n    end\n    \n    return\
    \ length(boredoms)\nend\n\"\"\"\n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "  \
    \  \n    boredoms = Dict{String,Int64}()\n    \n    for word in split(S)\n   \
    \     if word[1] == 'I'\n            boredoms[word] = 0\n        end\n    end\n\
    \    \n    return sum(boredoms.values)\nend\n\"\"\"\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    S = lower(S)\n    boredoms = 0\n    for w in\
    \ split(S) do \n        if starts_with(w, \"i\") then \n            boredoms +=\
    \ 1\n        end\n    end\n    return boredoms\nend\n    \"\"\"\n    boredoms\
    \ = 0\n    for w in split(S):\n        if starts_with(w, \"i\"):\n           \
    \ boredoms += 1\n    return boredoms", "    if is_empty(S)\n        return 0\n\
    \    \n    boredoms = Dict{String,Int64}()\n    \n    for w in split(S)\n    \
    \    if w == \"I\"\n            boredoms[w] = 1\n        end\n    end\n    \n\
    \    return length(boredoms)\nend\n\"\"\"\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
  "    if is_empty(S)\n        return 0\n    \n    boredoms = 0\n    \n    for word\
    \ in split(S)\n        if word == \"I\"\n            boredoms += 1\n        end\n\
    \    end\n    \n    return boredoms\nend\n\"\"\"\n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    ", "    if is_empty(S)\n        return\
    \ 0\n    \n    boredoms = Dict{String,Int64}()\n    \n    for w in split(S)\n\
    \        if w == \"I\"\n            boredoms[w] = 1\n        end\n    end\n  \
    \  \n    return length(boredoms)\nend\n\"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    ", "    S = lower(S)\n    S = replace(S, \".\", \"\")\n    S = replace(S,\
    \ \"?\", \"\")\n    S = replace(S, \"!\", \"\")\n    S = replace(S, \"I\", \"\"\
    )\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S,\
    \ \"I\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"I\", \"\"\
    )\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S,\
    \ \"I\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"I\", \"\"\
    )\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S,\
    \ \"I\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"I\", \"\"\
    )\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S,\
    \ \"I\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"I\", \"\"\
    )\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S,\
    \ \"I\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"I\", \"\"\
    )\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S,\
    \ \"I\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"I\", \"\"\
    )\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S,\
    \ \"I\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"I\", \"\"\
    )\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S,\
    \ \"I\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"I\", \"\"\
    )\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S,\
    \ \"I\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"I\", \"\"\
    )\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S,\
    \ \"I\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"I\", \"\"\
    )\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S,\
    \ \"I\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"I\", \"\"\
    )\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S,\
    \ \"I\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(", "    if is_empty(S)\
    \ then return 0\n    else if S==\"I\" then return 1\n    else if S==\".\" then\
    \ return 1\n    else if S==\"?\" then return 1\n    else if S==\"!\" then return\
    \ 1\n    else return 0\n    end\nend\n    \"\"\"\n    \n    boredoms = sum(is_bored(word)\
    \ for word in words)\n    return boredoms\n</cell>\n<text>\nLet's test your function",
  "    if is_bored(S) == 0 then 1 else 0 end\nend\n\"\"\"\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if is_bored(S)\
    \ == 0 then 1 else 0 end\nend\n            \"\"\"\n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = Dict{String,Int64}()\n    \n    for word\
    \ in split(S)\n        if word==\"I\"\n            boredoms[word] = boredoms[word]+1\n\
    \        end\n    end\n    \n    return length(boredoms)\nend\n\"\"\"\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    if is_empty(S)\n        return 0\n    \n    boredoms = Dict{String,Int64}()\n\
    \    for word in split(S)\n        if word==\"I\"\n            boredoms[word]\
    \ = get(boredoms, word, 0) + 1\n        end\n    end\n    return length(boredoms)\n\
    end\n\"\"\"\n    ", "    if is_bored(S) == 0 then 1 else 0 end\nend\n        \
    \    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if is_empty(S)\n        return 0\n    \n    boredoms\
    \ = 0\n    for w in split(S)\n        if is_bored(w)\n            boredoms +=\
    \ 1\n        end\n    end\n    return boredoms\nend\n    \n    boredoms = is_bored(\"\
    I like Ice.\")\n    @assert boredoms == 2\n    boredoms = is_bored(\"I like ice.\"\
    )\n    @assert boredoms == 1\n    boredoms = is_bored(\"I like ice.!?\")\n   \
    \ @assert boredoms == 1\n    boredoms = is_bored(\"I like ice.!?\")\n    @assert\
    \ boredoms == 0\n    boredoms = is_bored(\"I like ice.!?!?\")\n    @assert boredoms\
    \ == 0\n    boredoms = is_bored(\"I like ice.!?!?!?\")\n    @assert boredoms ==\
    \ 0\n    boredoms = is_bored(\"I like ice.!?!?!?!?\")\n    @assert boredoms ==\
    \ 0\n    boredoms = is_bored(\"I like ice.!?!?!?!?!?\")\n    @assert boredoms\
    \ == 0\n    boredoms = is_bored(\"I like ice.!?!?!?!?!?!?\")\n    @assert boredoms\
    \ == 0\n    boredoms = is_bored(\"I like ice.!?!?!?!?!?!?!?\")\n    @assert boredoms\
    \ == 0\n    boredoms = is_bored(\"I like ice.!?!?!?!?!?!?!?!?\")\n    @assert\
    \ boredoms == 0\n    boredoms = is_bored(\"I like ice.!?!?!?!?!?!?!?!?!?\")\n\
    \    @assert boredoms == 0\n    boredoms = is_bored(\"I like ice.!?!?!?!?!?!?!?!?!?!?\"\
    )\n    @assert boredoms == 0\n    boredoms = is_bored(\"I like ice.!?!?!?!?!?!?!?!?!?!?!?\"\
    )\n    @assert boredoms == 0\n    boredoms = is_bored(\"I like ice.!?!?!?!?!?!",
  "    S = strip(S)\n    S = lower(S)\n    S = replace(S, \".\", \"\")\n    S = replace(S,\
    \ \"?\", \"\")\n    S = replace(S, \"!\", \"\")\n    S = split(S)\n    S = filter(x\
    \ -> x != \"\", S)\n    S = map(x -> tolower(x), S)\n    S = filter(x -> x !=\
    \ \"i\", S)\n    S = map(x -> tolower(x), S)\n    S = filter(x -> x != \"boredom\"\
    , S)\n    S = map(x -> tolower(x), S)\n    S = filter(x -> x != \"\", S)\n   \
    \ S = map(x -> tolower(x), S)\n    S = filter(x -> x != \"i\", S)\n    S = map(x\
    \ -> tolower(x), S)\n    S = filter(x -> x != \"boredom\", S)\n    S = map(x ->\
    \ tolower(x), S)\n    S = filter(x -> x != \"\", S)\n    S = map(x -> tolower(x),\
    \ S)\n    S = filter(x -> x != \"i\", S)\n    S = map(x -> tolower(x), S)\n  \
    \  S = filter(x -> x != \"boredom\", S)\n    S = map(x -> tolower(x), S)\n   \
    \ S = filter(x -> x != \"\", S)\n    S = map(x -> tolower(x), S)\n    S = filter(x\
    \ -> x != \"i\", S)\n    S = map(x -> tolower(x), S)\n    S = filter(x -> x !=\
    \ \"boredom\", S)\n    S = map(x -> tolower(x), S)\n    S = filter(x -> x != \"\
    \", S)\n    S = map(x -> tolower(x), S)\n    S = filter(x -> x != \"i\", S)\n\
    \    S = map(x -> tolower(x), S)\n    S = filter(x -> x != \"boredom\", S)\n \
    \   S = map(x -> tolower(x), S)\n    S = filter(x -> x != \"\", S)\n    S = map(x\
    \ -> tolower(x), S)\n    S = filter(x -> x != \"i\", S)\n    S = map(x -> tolower(x),\
    \ S)\n    S = filter(x -> x != \"boredom\", S)\n    S = map(x -> tolower(x), S)\n\
    \    S = filter(x -> x != \"\", S)\n    S = map(x -> tolower(x), S)\n    S = filter(x\
    \ -> x != \"i\", S)\n    S = map(x -> tolower(x), S)\n    S = filter(x -> x !=\
    \ \"boredom\", S)\n    S = map(x -> tolower(x), S)\n    S = filter(x -> x != \"\
    \", S)\n    S = map(x -> tolower(x), S)\n    S = filter(x ", "    if is_bored(S)\
    \ == 0 then 1 else 0 end\nend\n            ", "    \n    boredoms = 0\n    \n\
    \    for word in S\n        if word = \"I\"\n            boredoms += 1\n     \
    \   end\n    end\n    \n    return boredoms\nend\n\"\"\"\n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if\
    \ is_empty(S)\n        return 0\n    \n    boredoms = Dict{String,Int64}()\n \
    \   \n    for w in split(S)\n        if w == \"I\"\n            boredoms[w] =\
    \ 1\n        end\n    end\n    \n    return length(boredoms)\nend\n\"\"\"\n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    ", "    if is_bored(S) == 0 then 1 else 0 end\n\
    end\nis_bored(\"\"\"\n    I. Love you!\n    I. Love you!\n    I. Love you!\n \
    \   I. Love you!\n    I. Love you!\n    I. Love you!\n    I. Love you!\n    I.\
    \ Love you!\n    I. Love you!\n    I. Love you!\n    I. Love you!\n    I. Love\
    \ you!\n    I. Love you!\n    I. Love you!\n    I. Love you!\n    I. Love you!\n\
    \    I. Love you!\n    I. Love you!\n    I. Love you!\n    I. Love you!\n    I.\
    \ Love you!\n    I. Love you!\n    I. Love you!\n    I. Love you!\n    I. Love\
    \ you!\n    I. Love you!\n    I. Love you!\n    I. Love you!\n    I. Love you!\n\
    \    I. Love you!\n    I. Love you!\n    I. Love you!\n    I. Love you!\n    I.\
    \ Love you!\n    I. Love you!\n    I. Love you!\n    I. Love you!\n    I. Love\
    \ you!\n    I. Love you!\n    I. Love you!\n    I. Love you!\n    I. Love you!\n\
    \    I. Love you!\n    I. Love you!\n    I. Love you!\n    I. Love you!\n    I.\
    \ Love you!\n    I. Love you!\n    I. Love you!\n    I. Love you!\n    I. Love\
    \ you!\n    I. Love you!\n    I. Love you!\n    I. Love you!\n    I. Love you!\n\
    \    I. Love you!\n    I. Love you!\n    I. Love you!\n    I. Love you!\n    I.\
    \ Love you!\n    I. Love you!\n    I. Lo", "    if is_empty(S)\n        return\
    \ 0\n    \n    boredoms = Dict()\n    for word in split(S)\n        if word[1]\
    \ == 'I'\n            boredoms[word] = 0\n    end\n    return length(boredoms)\n\
    end\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    if is_empty(S) == true then return 0\n    \n    boredoms = 0\n\
    \    \n    for w in split(S) do \n        if w == \"I\" then boredoms += 1\n \
    \   end\n    \n    return boredoms\nend\n    \"\"\"\n    \n    boredoms = 0\n\
    \    \n    for w in split(S):\n        if w == \"I\":\n            boredoms +=\
    \ 1\n    \n    return boredoms\n</cell>\n<cell>\n# Test your code\ns = \"I like\
    \ I!\"\nassert is_bored(s) == 3, \"is_bored should return 3 given s = 'I like\
    \ I!'\"\nassert is_bored(\"\") == 0, \"is_bored should return 0 given s = ''\"\
    \nassert is_bored(\"I\") == 1, \"is_bored should return 1 given s = 'I' and nothing\
    \ else\"\nassert is_bored(\"I like I!\") == 3, \"is_bored should return 3 given\
    \ s = 'I like I!'\"\nassert is_bored(\"I like I! I love I!\") == 4, \"is_bored\
    \ should return 4 given s = 'I like I! I love I!'\"\n</cell>\n<text>\nTask 3:\
    \ Write a function that takes a string and returns the number of words in the\
    \ string.", "    if is_empty(S)\n        return 0\n    \n    boredoms = findall(S,\
    \ \"^I.*\")\n    return length(boredoms)\nend\n    \"\"\"\n    \n    boredoms\
    \ = findall(S, \"^I.*\")\n    return length(boredoms)\n</cell>\n<code language=julia-1.0>\n\
    @time boredom_count = is_bored(boredoms)\n</cell>\n<code language=julia-1.0>\n\
    @time boredom_count = is_bored(boredoms)\n</cell>\n<text>\nExercise: Write a function\
    \ that counts the number of boredoms in a given string.\n    \n    Your function\
    \ should take a string as input, and return a number.", "    if is_empty(S) then\
    \ return 0\n    \n    boredoms = 0\n    \n    for w in split(S) do \n        if\
    \ w == \"I\" then boredoms += 1\n    end\n    \n    return boredoms\nend\n   \
    \ \"\"\"\n    \n    boredoms = 0\n    \n    for w in split(S):\n        if w ==\
    \ \"I\":\n            boredoms += 1\n    \n    return boredoms\n</cell>\n<code\
    \ language=julia-1.5>\n@time boredoms(boredom_sentence)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the number of words in the\
    \ string that start with the letter 'A'.", "    if is_bored(S) == 1 then 1 else\
    \ 0 end\nend", "    if is_empty(S)\n        return 0\n    \n    boredoms = findall(S,\
    \ \"^I\")\n    \n    if length(boredoms) == 0\n        return 1\n    else\n  \
    \      return length(boredoms) + 1\n    end\nend\n\"\"\"\n</cell>\n<cell>\n@test\
    \ is_bored(\"\") == 0\n@test is_bored(\"I\") == 1\n@test is_bored(\"I.\") == 2\n\
    @test is_bored(\"I?\") == 3\n@test is_bored(\"I!\") == 4\n@test is_bored(\"I!.\"\
    ) == 5\n@test is_bored(\"I!?\") == 6\n@test is_bored(\"I!??\") == 7\n@test is_bored(\"\
    I!???\") == 8\n@test is_bored(\"I!????\") == 9\n@test is_bored(\"I!?????\") ==\
    \ 10\n@test is_bored(\"I!??????\") == 11\n@test is_bored(\"I!???????\") == 12\n\
    @test is_bored(\"I!????????\") == 13\n@test is_bored(\"I!?????????\") == 14\n\
    @test is_bored(\"I!??????????\") == 15\n@test is_bored(\"I!???????????\") == 16\n\
    @test is_bored(\"I!????????????\") == 17\n@test is_bored(\"I!?????????????\")\
    \ == 18\n@test is_bored(\"I!??????????????\") == 19\n@test is_bored(\"I!???????????????\"\
    ) == 20\n@test is_bored(\"I!????????????????\") == 21\n@test is_bored(\"I!?????????????????\"\
    ) == 22\n@test is_bored(\"I!??????????????????\") == 23\n@test is_bored(\"I!???????????????????\"\
    ) == 24\n@test is_bored(\"I!????????????????????\") == 25\n@test is_bored(\"I!?????????????????????\"\
    ) == 26\n@test is_bored(\"I!??????????????????????\") == 27\n@test is_bored(\"\
    I!??????????????????????", "    if is_empty(S) == true \n        return 0 \n \
    \   else \n        boredoms = 0 \n        for word in split(S) do \n         \
    \   if word == \"I\" then \n                boredoms += 1 \n            end \n\
    \        end \n        return boredoms \n    end \nend \n\"\"\"\n</cell>\n<cell>\n\
    # Test your code\ns = \"I\"\nassert is_bored(s) == 0\ns = \"a boy I saw him yesterday\
    \ I ate him and he saw him again\"\nassert is_bored(s) == 2\ns = \"a boy I saw\
    \ him yesterday I ate him and he saw him again and he ate him and he ate him and\
    \ he ate him and he ate him and he ate him and he ate him and he ate him and he\
    \ ate him and he ate him and he ate him and he ate him and he ate him and he ate\
    \ him and he ate him and he ate him and he ate him and he ate him and he ate him\
    \ and he ate him and he ate him and he ate him and he ate him and he ate him and\
    \ he ate him and he ate him and he ate him and he ate him and he ate him and he\
    \ ate him and he ate him and he ate him and he ate him and he ate him and he ate\
    \ him and he ate him and he ate him and he ate him and he ate him and he ate him\
    \ and he ate him and he ate him and he ate him and he ate him and he ate him and\
    \ he ate him and he ate him and he ate him and he ate him and he ate him and he\
    \ ate him and he ate him and he ate him and he ate him and he ate him and he ate\
    \ him and he ate him and he ate him and he ate him and he ate him and he ate him\
    \ and he ate him and he ate him and he ate him and he ate him and he ate him and\
    \ he ate him and he ate him and he ate him and he ate him and he ate him and he\
    \ ate him and he ate him and he ate him and he ate him and he ate hi", "    if\
    \ is_empty(S)\n        return 0\n    \n    boredoms = Dict{String,Int64}()\n \
    \   \n    for w in split(S)\n        if w == \"I\"\n            boredoms[w] =\
    \ 1\n        end\n    end\n    \n    return length(boredoms)\nend\n\"\"\"\n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    ", "    if is_empty(S)\n        return 0\n\
    \    \n    boredoms = Dict()\n    \n    for w in split(S)\n        if w == \"\
    I\"\n            boredoms[w] = 1\n        end\n    end\n    \n    return length(boredoms)\n\
    end\n    \"\"\"\n    \n    boredoms = Dict()\n    \n    for w in split(S)\n  \
    \      if w == \"I\"\n            boredoms[w] = 1\n        end\n    end\n    \n\
    \    return length(boredoms)\nend\n</cell>\n<code language=julia-1.0>\n@time is_bored(\"\
    \"\"\n    You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n     \
    \       \"\"\")\n</cell>\n<code language=julia-1.0>\n@time is_bored(\"\"\"\n \
    \   You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n     \
    \       \"\"\")\n</cell>\n<code language=julia-1.0>\n@time is_bored(\"\"\"\n \
    \   You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n     \
    \       \"\"\")\n</cell>\n<code language=julia-1.0>\n@time is_bored(\"\"\"\n \
    \   You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n     \
    \       \"\"\")\n</cell>\n<code language=julia-1.0>\n@time is_bored(\"\"\"\n \
    \   You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n     \
    \       \"\"\")\n</cell>\n<code language=julia-1.0>\n@time is_bored(\"\"\"\n \
    \   You'll be given a string of words, and your task is to count the number\n\
    \    of bore", "    if is_empty(S) then return 0\n    else if S == \"I\" then\
    \ return 1\n    else if S == \"!\" then return 1\n    else if S == \"?\" then\
    \ return 1\n    else return 0\nend\n    \"\"\"\n    \n    boredoms = []\n    \n\
    \    for word in words:\n        if word == \"I\":\n            boredoms.append(1)\n\
    \        elif word == \"!\":\n            boredoms.append(1)\n        elif word\
    \ == \"?\":\n            boredoms.append(1)\n        else:\n            boredoms.append(0)\n\
    \    \n    return sum(boredoms)\n</cell>\n<cell>\n# Test your code\nboredoms_test(is_bored)\n\
    </cell>\n<text>\nRun the cell below to test your boredoms function. Notice that\
    \ boredoms_test is similar to what you did in is_bored, except is_bored returns\
    \ the boredoms as a list.", "    if is_empty(S)\n        return 0\n    \n    boredoms\
    \ = Dict()\n    for word in split(S)\n        if is_bored(word)\n            boredoms[word]\
    \ = get(boredoms, word, 0) + 1\n        end\n    end\n    return length(boredoms)\n\
    end\n    \"\"\"\n    \n    boredoms = Dict()\n    for word in split(S)\n     \
    \   if is_bored(word)\n            boredoms[word] = get(boredoms, word, 0) + 1\n\
    \        end\n    end\n    return length(boredoms)\nend", "    if is_bored(S)\
    \ == 0 then 1 else 0 end\nend\n            \"\"\"\n    \n    \n    \"\"\"\n  \
    \  Write a function that takes a string and returns the number of boredoms.\n\
    \    \n    For example:\n    \n            ```julia\n            is_bored(S::String)::Int64\n\
    \            if is_bored(S) == 0 then 1 else 0 end\n            ```\n    \n  \
    \  ```\n    \n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if\
    \ is_empty(S)\n        return 0\n    \n    I = find(S, \"I\")\n    if I < 0\n\
    \        return 0\n    \n    boredoms = length(S - I)\n    \n    return boredoms\n\
    end\n    \"\"\"\n    \n    boredoms = 0\n    \n    for word in words:\n      \
    \  if word.startswith(\"I\"):\n            boredoms += 1\n    \n    return boredoms\n\
    </cell>\n<text>\nLet's test your implementation", "    if is_bored(S) == 0 then\
    \ 1 else 0 end\nend\n\"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    if is_empty(S) == true then \n  \
    \      return 0\n    else \n        boredoms = count_boredoms(S)\n        return\
    \ boredoms\n    end\nend\n            \"\"\"\n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    S = lower(S)\n    \n    count = 0\n    \n    for w in split(S) do \n\
    \        if w == \"i\" then \n            count += 1\n        end\n    end\n \
    \   \n    return count\nend\n\"\"\"\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    if is_empty(S) == true \n       \
    \ return 0 \n    else \n        boredoms = 0 \n        for word in split(S) \n\
    \            if word[0] == \"I\" \n                boredoms += 1 \n        return\
    \ boredoms \nend \n\"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if is_empty(S)\n        return 0\n    \n    boredoms\
    \ = 0\n    \n    for w in split(S)\n        if is_bored(w)\n            boredoms\
    \ += 1\n        end\n    end\n    \n    return boredoms\nend\n\"\"\"\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
