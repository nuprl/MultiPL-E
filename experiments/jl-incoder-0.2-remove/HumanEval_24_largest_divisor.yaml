name: HumanEval_24_largest_divisor
language: jl
prompt: "\"\"\" For a given number n, find the largest number that divides n evenly,\
  \ smaller than n\n        \"\"\"\nfunction largest_divisor(n::Int64)::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
  \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
  \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
completions: ["    if n==1 \n        return 1 \n    else \n        largest_divisor(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\nlargest_divisor(10)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the factorial of a given number.\
    \ \nThe factorial of a number $n$ is defined as:", "    if n == 0 \n        0\n\
    \    else\n        largest_divisor(n / 2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(10)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of divisors of a given number. For example, for the number 10, the\
    \ function should return 3.", "    if n==0 then return 0\n    else if n==1 then\
    \ return 1\n    else if n%2==0 then return largest_divisor(n/2)\n    else return\
    \ largest_divisor(n/2)+1\nend\n</cell>\n<code language=julia-1.0>\nlargest_divisor(10)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of divisors\
    \ of a given number. For example, for the number 12, there are 3 divisors: 1,\
    \ 2, and 3.", "    if n==0 \n        0\n    else \n        largest_divisor(n-1)\n\
    \    end\nend", "    if n==0 \n        0\n    else \n        largest_divisor(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(10)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the factorial of a given number.\
    \ \nThe factorial of a number $n$ is defined as $n! = n(n-1)(n-2)...(1)$. \nFor\
    \ example, 5! = 5 x 4 x 3 x 2 x 1 = 120. \nWrite a function that returns the factorial\
    \ of a given number. \nThe factorial of a number $n$ is defined as $n! = n(n-1)(n-2)...(1)$.\
    \ \nFor example, 5! = 5 x 4 x 3 x 2 x 1 = 120. \nWrite a function that returns\
    \ the factorial of a given number. \nThe factorial of a number $n$ is defined\
    \ as $n! = n(n-1)(n-2)...(1)$. \nFor example, 5! = 5 x 4 x 3 x 2 x 1 = 120. \n\
    Write a function that returns the factorial of a given number. \nThe factorial\
    \ of a number $n$ is defined as $n! = n(n-1)(n-2)...(1)$. \nFor example, 5! =\
    \ 5 x 4 x 3 x 2 x 1 = 120. \nWrite a function that returns the factorial of a\
    \ given number. \nThe factorial of a number $n$ is defined as $n! = n(n-1)(n-2)...(1)$.\
    \ \nFor example, 5! = 5 x 4 x 3 x 2 x 1 = 120. \nWrite a function that returns\
    \ the factorial of a given number. \nThe factorial of a number $n$ is defined\
    \ as $n! = n(n-1)(n-2)...(1)$. \nFor example, 5! = 5 x 4 x 3 x 2 x 1 = 120. \n\
    Write a function that returns the factorial of a given number. \nThe factorial\
    \ of a number $n$ is defined as $n! = n(n-1)(n-2)...(1)$. \nFor example, 5! =\
    \ 5 x 4 x 3 x 2 x 1 = 120. \nWrite a function that returns the factorial of a\
    \ given number. \nThe factorial of a number $n$ is defined as $n! = n(n-1)(n-2)...(1)$.\
    \ \nFor example, 5! = 5 x 4 x 3 x 2 x 1 = 120. \nWrite a function that returns\
    \ the factorial of a given number. \nThe factorial of a number $n$ is defined\
    \ as $n! = n(n-1)(n-2)...(1)$. \nFor example, 5! = 5 x 4 x 3 x 2 x 1 = 120. \n\
    Write a function that returns the factorial of a given number. \nThe factorial ",
  "    largest_divisor = 1\n    for d in divisors(n)\n        if n % d == 0\n    \
    \        largest_divisor = d\n            break\n    return largest_divisor\n\
    end", "    if n % 2 == 0 \n        then largest_divisor(n / 2)\n        else largest_divisor(3\
    \ * n + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(10)\n\
    </cell>\n<code language=julia-1.5>", "    if n==1 \n        return 1 \n    else\
    \ \n        largest_divisor(n-1)\n        largest_divisor(n-2)\n        largest_divisor(n-3)\n\
    \        largest_divisor(n-4)\n        largest_divisor(n-5)\n        largest_divisor(n-6)\n\
    \        largest_divisor(n-7)\n        largest_divisor(n-8)\n        largest_divisor(n-9)\n\
    \        largest_divisor(n-10)\n        largest_divisor(n-11)\n        largest_divisor(n-12)\n\
    \        largest_divisor(n-13)\n        largest_divisor(n-14)\n        largest_divisor(n-15)\n\
    \        largest_divisor(n-16)\n        largest_divisor(n-17)\n        largest_divisor(n-18)\n\
    \        largest_divisor(n-19)\n        largest_divisor(n-20)\n        largest_divisor(n-21)\n\
    \        largest_divisor(n-22)\n        largest_divisor(n-23)\n        largest_divisor(n-24)\n\
    \        largest_divisor(n-25)\n        largest_divisor(n-26)\n        largest_divisor(n-27)\n\
    \        largest_divisor(n-28)\n        largest_divisor(n-29)\n        largest_divisor(n-30)\n\
    \        largest_divisor(n-31)\n        largest_divisor(n-32)\n        largest_divisor(n-33)\n\
    \        largest_divisor(n-34)\n        largest_divisor(n-35)\n        largest_divisor(n-36)\n\
    \        largest_divisor(n-37)\n        largest_divisor(n-38)\n        largest_divisor(n-39)\n\
    \        largest_divisor(n-40)\n        largest_divisor(n-41)\n        largest_divisor(n-42)\n\
    \        largest_divisor(n-43)\n        largest_divisor(n-44)\n        largest_divisor(n-45)\n\
    \        largest_divisor(n-46)\n        largest_divisor(n-47)\n        largest_divisor(n-48)\n\
    \        largest_divisor(n-49)\n        largest_divisor(n-50)\n        largest_divisor(n-51)\n\
    \        largest_divisor(n-52)\n        largest_divisor(n-53)\n        largest_divisor(n-54)\n\
    \        largest_divisor(n-55)\n        largest_divisor(n-56)\n        largest_divisor(n-57)\n\
    \        largest_divisor(n-58)\n        largest_divisor(n-59)\n        largest_divisor(n-",
  "    if n==0 then return 0\n    else if n%2==0 then return n\n    else return largest_divisor(n/2)\n\
    end\n</cell>\n<code language=julia-1.5>", "    if n==0 then return 0\n    else\
    \ if n%2==0 then return n\n    else return largest_divisor(n/2)\nend\n</cell>\n\
    <code language=julia-1.0>\nlargest_divisor(10)\n</cell>\n<code language=julia-1.0>",
  "    if n==0 \n        return 0 \n    else if n%2==0 \n        return n \n    else\
    \ \n        return largest_divisor(n/2) \nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(10)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of divisors of a given number. For example, for the number 10, the\
    \ function should return 3.", "    if n == 1 \n        return 1 \n    else \n\
    \        return largest_divisor(n-1) + 1 \nend \n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(10)\n</cell>\n<code language=julia-1.5>", "    if n==1 then return\
    \ 1\n    else if n==0 then return 0\n    else if n%2==0 then return largest_divisor(n/2)\n\
    \    else return largest_divisor(n/2) + 1\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(10)\n</cell>\n<code language=julia-1.5>\nlargest_divisor(100)\n\
    </cell>\n<code language=julia-1.5>\nlargest_divisor(1000)\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(10000)\n</cell>\n<code language=julia-1.5>\nlargest_divisor(100000)\n\
    </cell>\n<code language=julia-1.5>\nlargest_divisor(1000000)\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(10000000)\n</cell>\n<code language=julia-1.5>\nlargest_divisor(100000000)\n\
    </cell>\n<code language=julia-1.5>\nlargest_divisor(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nlargest_divisor(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(100000000000)\n</cell>\n<code language=julia-1.5>\nlargest_divisor(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nlargest_divisor(10000000000000)\n</cell>\n\
    <code language=julia-1.5>\nlargest_divisor(100000000000000)\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(1000000000000000)\n</cell>\n<code language=julia-1.5>\nlargest_divisor(10000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nlargest_divisor(100000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nlargest_divisor(1000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nlargest_divisor(10000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(100000000000000000000)\n</cell>\n<code language=julia-1.5>\nlargest_divisor(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nlargest_divisor(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nlargest_divisor(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nlargest_divisor(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nlargest_divisor(10000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nlargest_divisor(100000000000000000000000000",
  "    if n % 2 == 0 \n        return n \n    else \n        return largest_divisor(n\
    \ / 2) \nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(100)\n</cell>\n\
    <code language=julia-1.5>", "    if n==1 \n        return n\n    else if n%2==0\
    \ \n        return largest_divisor(n/2)\n    else \n        return largest_divisor(n/2)\
    \ + 1\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(10)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of divisors of n\
    \ that are less than or equal to n.", "    if n==0\n        0\n    else\n    \
    \    largest_divisor(n-1)\n    end\nend", "    if n==0 then return 0\n    else\
    \ if n%2==0 then return n\n    else return largest_divisor(n/2)\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n==0 \n        return 0 \n    else \n    \
    \    largest_divisor(n-1)\n    end \nend ", "    if n % 2 == 0 \n        then\
    \ return n \n    else \n        largest_divisor(n / 2) \nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(100)\n</cell>\n<code language=julia-1.5>", "    if n==1 \n   \
    \     return 1 \n    else \n        largest_divisor(n-1)\n        largest_divisor(n-2)\n\
    \        if n%2==0 \n            return n \n        else \n            return\
    \ largest_divisor(n-2)\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.", "    if n==1 \n        return n\n \
    \   else \n        largest_divisor(n-1)\n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n", "    if n==0 then\
    \ return 0\n    else if n==1 then return 1\n    else if n%2==0 then return n\n\
    \    else return largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>",
  "    if n==0 then return 0\n    else if n%2==0 then return n\n    else return largest_divisor(n/2)\n\
    end", "    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end", "    if n==0 \n        return 0 \n    else \n        return largest_divisor(n-1)\
    \ + 1 \nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(100)\n</cell>\n\
    <code language=julia-1.5>", "    \n    largest_divisor = 1\n    \n    for d in\
    \ divisors(n)\n        if n % d == 0\n            largest_divisor = d\n      \
    \  end\n    end\n    \n    return largest_divisor\nend", "    if n==0 \n     \
    \   0\n    else\n        largest_divisor(n-1)\n    end\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThis doesn't answer the question. OP wants to find the largest\
    \ number that divides n evenly, smaller than n.\n<|/ c |>\n<| c |>\nYes, I misread\
    \ the question. I'll edit my answer.\n<|/ c |>\n<| c |>\nThis doesn't work. Try\
    \ it with `n = 4`.\n<|/ c |>\n<| c |>\nI tested it and it works. I edited my answer\
    \ to include the full code I used.\n<|/ c |>\n<| c |>\nI tested it again and it\
    \ works. I edited my answer to include the full code I used.\n<|/ c |>\n<| a dscore=1\
    \ |>\nI wrote a recursive solution that works in O(log(n)) time:\n<code>", " \
    \   if n==1 \n        return 1 \n    else \n        largest_divisor(n-1)\n   \
    \     largest_divisor(n-2)\n        largest_divisor(n-3)\n        largest_divisor(n-4)\n\
    \        largest_divisor(n-5)\n        largest_divisor(n-6)\n        largest_divisor(n-7)\n\
    \        largest_divisor(n-8)\n        largest_divisor(n-9)\n        largest_divisor(n-10)\n\
    \        largest_divisor(n-11)\n        largest_divisor(n-12)\n        largest_divisor(n-13)\n\
    \        largest_divisor(n-14)\n        largest_divisor(n-15)\n        largest_divisor(n-16)\n\
    \        largest_divisor(n-17)\n        largest_divisor(n-18)\n        largest_divisor(n-19)\n\
    \        largest_divisor(n-20)\n        largest_divisor(n-21)\n        largest_divisor(n-22)\n\
    \        largest_divisor(n-23)\n        largest_divisor(n-24)\n        largest_divisor(n-25)\n\
    \        largest_divisor(n-26)\n        largest_divisor(n-27)\n        largest_divisor(n-28)\n\
    \        largest_divisor(n-29)\n        largest_divisor(n-30)\n        largest_divisor(n-31)\n\
    \        largest_divisor(n-32)\n        largest_divisor(n-33)\n        largest_divisor(n-34)\n\
    \        largest_divisor(n-35)\n        largest_divisor(n-36)\n        largest_divisor(n-37)\n\
    \        largest_divisor(n-38)\n        largest_divisor(n-39)\n        largest_divisor(n-40)\n\
    \        largest_divisor(n-41)\n        largest_divisor(n-42)\n        largest_divisor(n-43)\n\
    \        largest_divisor(n-44)\n        largest_divisor(n-45)\n        largest_divisor(n-46)\n\
    \        largest_divisor(n-47)\n        largest_divisor(n-48)\n        largest_divisor(n-49)\n\
    \        largest_divisor(n-50)\n        largest_divisor(n-51)\n        largest_divisor(n-52)\n\
    \        largest_divisor(n-53)\n        largest_divisor(n-54)\n        largest_divisor(n-55)\n\
    \        largest_divisor(n-56)\n        largest_divisor(n-57)\n        largest_divisor(n-58)\n\
    \        largest_divisor(n-59)\n        largest_divisor(n-", "    if n == 0 \n\
    \        0\n    else\n        largest_divisor(n-1) + n // largest_divisor(n-1)\n\
    \    end\nend", "    largest_divisor = 0\n    for d in divisors(n)\n        if\
    \ n % d == 0\n            largest_divisor = d\n        end\n    end\n    return\
    \ largest_divisor\nend", "    if n==0 then return 0\n    else if n%2==0 then return\
    \ n\n    else return largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(10)\n</cell>\n<code language=julia-1.5>", "    \n    if n==0 \n\
    \        return 0 \n    \n    largest_divisor = 1\n    \n    for d in divisors(n)\
    \ do \n        if n % d == 0 \n            largest_divisor = d \n            break\
    \ \n    \n    return largest_divisor \nend ", "    if n==1 then return 1\n   \
    \ else if n%2==0 then return largest_divisor(n/2)\n    else return largest_divisor(n/2)\
    \ + 1\nend\n</cell>\n<code language=julia-1.0>\nlargest_divisor(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of divisors of n\
    \ that are less than or equal to n.", "    largest_divisor = 1\n    for d in divisors(n)\n\
    \        if n % d == 0\n            largest_divisor = d\n            break\n \
    \   return largest_divisor\nend", "    if n==0 then return 0\n    else if n%2==0\
    \ then return n\n    else return largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>",
  "    if n==1 \n        return 1 \n    else \n        largest_divisor=n \n      \
    \  for i=2:n \n            if n%i==0 \n                largest_divisor=i \n  \
    \              break \n        return largest_divisor \nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 0 \n        0\n    else\n        largest_divisor(n-1)\n    end\nend",
  "    largest_divisor = 1\n    for d in divisors(n)\n        if n % d == 0\n    \
    \        largest_divisor = d\n        end\n    end\n    return largest_divisor\n\
    end\n</cell>\n<code language=julia-1.0>\nlargest_divisor(100)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of divisors of a given number\
    \ n. Hint: use the function divisors.", "    if n == 1 \n        return 1 \n \
    \   else \n        largest_divisor(n / 2) \n        if n % 2 == 0 \n         \
    \   largest_divisor(n / 2) \n        else \n            largest_divisor(n / 2\
    \ + 1) \n        end\n    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(100)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.", "    if n % 2 == 0 \n        return\
    \ n \n    else \n        return largest_divisor(n / 2) \nend \n</cell>\n<code\
    \ language=julia-1.5>\nlargest_divisor(10)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the number of divisors of n that are less than or equal\
    \ to n.", "    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n \
    \   end\nend", "    if n==0\n        0\n    else\n        largest_divisor(n-1)\n\
    \    end\nend", "    if n==0\n        0\n    else\n        largest_divisor(n-1)\n\
    \    end\nend", "    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n\
    \    end\nend", "    if n==1 then return 1\n    else if n%2==0 then return largest_divisor(n/2)\n\
    \    else return largest_divisor(n/2) + 1\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(100)\n</cell>\n<code language=julia-1.5>", "    if n % 2 == 0\
    \ \n        then largest_divisor(n / 2)\n        else largest_divisor(3 * n +\
    \ 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(10)\n\
    </cell>\n<code language=julia-1.5>", "    if n==0 \n        0\n    else\n    \
    \    largest_divisor(n-1)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    largest_divisor(10)\n</cell>\n<code language=julia-1.3>", "    if n==0 \n    \
    \    0\n    else\n        largest_divisor(n-1)\n    end\nend", "    if n==1 \n\
    \        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2) + 1\nend", "    if n==1 \n   \
    \     return 1 \n    else \n        largest_divisor(n-1)\n    end\nend", "   \
    \ if n==1 \n        return 1 \n    else \n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(100)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the factorial of a given number. \n\
    The factorial of a number $n$ is defined as the product of all the positive integers\
    \ less than or equal to $n$.", "    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n\
    \    end\nend", "    if n==0 then return 0 \n    else if n%2==0 then return n\
    \ \n    else return largest_divisor(n/2) \nend\n</cell>\n<code language=julia-1.4>\n\
    largest_divisor(10)\n</cell>\n<text>\nExercise 4\nWrite a function that returns\
    \ the number of divisors of n that are less than or equal to n.", "    if n==1\
    \ \n        return n\n    else \n        largest_divisor(n-1)\n    end\nend",
  "    if n==0 then return 0\n    else if n==1 then return 1\n    else if n%2==0 then\
    \ return largest_divisor(n/2)\n    else return largest_divisor(n/2) + 1\nend\n\
    </cell>\n<code language=julia-1.5>", "    largest_divisor = 1\n    for d in divisors(n)\n\
    \        if n % d == 0\n            largest_divisor = d\n            break\n \
    \   return largest_divisor\nend\n</cell>\n<code language=julia-1.4>\nlargest_divisor(100)\n\
    </cell>\n<code language=julia-1.4>", "    if n==0 then return 0\n    else if n==1\
    \ then return 1\n    else if n%2==0 then return n\n    else return largest_divisor(n/2)\n\
    end\n</cell>\n<code language=julia-1.5>", "    if n==0 \n        return 0 \n \
    \   else \n        return largest_divisor(n-1) + 1 \nend \n</cell>\n<code language=julia-1.3>\n\
    largest_divisor(10)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of divisors of n that are less than or equal to n.", "    if n==0\
    \ then return 0\n    else if n==1 then return 1\n    else if n%2==0 then return\
    \ n\n    else return largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.3>\n\
    largest_divisor(10)\n</cell>\n<code language=julia-1.3>", "    largest_divisor\
    \ = 1\n    for d in divisors(n)\n        if n % d == 0\n            largest_divisor\
    \ = d\n        end\n    end\n    return largest_divisor\nend\n</cell>\n<code language=julia-1.0>\n\
    largest_divisor(100)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of divisors of a given number n. \nFor example, for n = 10, the function\
    \ should return 3.", "    if n==0 \n        return 0 \n    else \n        return\
    \ largest_divisor(n-1) + 1 \nend \n</cell>\n<code language=julia-1.5>\nlargest_divisor(10)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes in a number n and returns\
    \ the largest number that divides n evenly, smaller than n.", "    if n==0 \n\
    \        return 0 \n    else \n        largest_divisor(n-1) \n        if n%largest_divisor(n-1)\
    \ == 0 \n            return largest_divisor(n-1) \n        else \n           \
    \ return n \nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(10)\n</cell>\n\
    <code language=julia-1.5>", "    if n==0 \n        return 0 \n    else \n    \
    \    largest_divisor(n-1)\n        if n%2==0 \n            return n\n        else\
    \ \n            return largest_divisor(n-1)\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(10)\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ in a positive integer and returns the number of digits in that integer.", " \
    \   if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\nend",
  "    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\nend",
  "    if n == 0 \n        0\n    else\n        largest_divisor(n / 2)\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\nlargest_divisor(100)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the first n prime numbers. \nHint: Use\
    \ a sieve of Eratosthenes (https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes)",
  "    largest_divisor = 1\n    for d in divisors(n)\n        if n % d == 0\n    \
    \        largest_divisor = d\n            break\n    return largest_divisor\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(100)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that computes the factorial of a given number. Hint:\
    \ use the factorial function in Julia.", "    if n==0 then return 0\n    else\
    \ if n%2==0 then return n\n    else return largest_divisor(n/2)\nend\n</cell>\n\
    <code language=julia-1.5>\nlargest_divisor(10)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the factorial of a given number. For example, factorial(5)\
    \ = 5 * 4 * 3 * 2 * 1 = 120", "    if n==1 \n        return 1 \n    else \n  \
    \      largest_divisor(n-1)\n        largest_divisor(n/2)\n        largest_divisor(n/3)\n\
    \        largest_divisor(n/4)\n        largest_divisor(n/5)\n        largest_divisor(n/6)\n\
    \        largest_divisor(n/7)\n        largest_divisor(n/8)\n        largest_divisor(n/9)\n\
    \        largest_divisor(n/10)\n        largest_divisor(n/11)\n        largest_divisor(n/12)\n\
    \        largest_divisor(n/13)\n        largest_divisor(n/14)\n        largest_divisor(n/15)\n\
    \        largest_divisor(n/16)\n        largest_divisor(n/17)\n        largest_divisor(n/18)\n\
    \        largest_divisor(n/19)\n        largest_divisor(n/20)\n        largest_divisor(n/21)\n\
    \        largest_divisor(n/22)\n        largest_divisor(n/23)\n        largest_divisor(n/24)\n\
    \        largest_divisor(n/25)\n        largest_divisor(n/26)\n        largest_divisor(n/27)\n\
    \        largest_divisor(n/28)\n        largest_divisor(n/29)\n        largest_divisor(n/30)\n\
    \        largest_divisor(n/31)\n        largest_divisor(n/32)\n        largest_divisor(n/33)\n\
    \        largest_divisor(n/34)\n        largest_divisor(n/35)\n        largest_divisor(n/36)\n\
    \        largest_divisor(n/37)\n        largest_divisor(n/38)\n        largest_divisor(n/39)\n\
    \        largest_divisor(n/40)\n        largest_divisor(n/41)\n        largest_divisor(n/42)\n\
    \        largest_divisor(n/43)\n        largest_divisor(n/44)\n        largest_divisor(n/45)\n\
    \        largest_divisor(n/46)\n        largest_divisor(n/47)\n        largest_divisor(n/48)\n\
    \        largest_divisor(n/49)\n        largest_divisor(n/50)\n        largest_divisor(n/51)\n\
    \        largest_divisor(n/52)\n        largest_divisor(n/53)\n        largest_divisor(n/54)\n\
    \        largest_divisor(n/55)\n        largest_divisor(n/56)\n        largest_divisor(n/57)\n\
    \        largest_divisor(n/58)\n        largest_divisor(n/59)\n        largest_divisor(n",
  "    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\nend",
  "    if n == 1 \n        return 1 \n    else \n        largest_divisor_recursive(n-1)\
    \ \nend ", "    if n == 0 \n        0\n    else\n        largest_divisor(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\nlargest_divisor(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of divisors of a\
    \ given number. For example, for the number 12, the number of divisors is 3.",
  "    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\nend",
  "    if n == 0 \n        0\n    else\n        largest_divisor(n / 2::Int64) + 1\n\
    \    end\nend", "    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n\
    \    end\nend", "    if n==0\n        0\n    else\n        largest_divisor(n-1)\n\
    \    end\nend", "    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(100)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of divisors of n\
    \ that are less than or equal to n.", "    if n==0 then return 0\n    if n==1\
    \ then return 1\n    largest_divisor=n\n    for d in divisors(n) do \n       \
    \ if n%d==0 then \n            if largest_divisor<d  then largest_divisor=d\n\
    \        end\n    end\n    return largest_divisor\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(100)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of divisors of n that are less than or equal to n.", "    if n==0\
    \ \n        0\n    else\n        largest_divisor(n-1)\n    end\nend", "    if\
    \ n==1 \n        return 1 \n    else \n        largest_divisor(n-1)\n    end\n\
    end\n</code>\n<|/ a tags=julia,recursion |>\n<| c |>\nThanks for your answer!\
    \ I tried to implement your solution, but I got an infinite loop. Could you please\
    \ take a look at my edited question?\n<|/ c |>\n<| c |>\nI edited my answer. There\
    \ was a mistake in the `largest_divisor` function.\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer! I tried to implement your solution, but I got an infinite loop.\
    \ Could you please take a look at my edited question?\n<|/ c |>\n<| c |>\nI edited\
    \ my answer. There was a mistake in the `largest_divisor` function.\n<|/ c |>\n\
    <| a tags=julia,recursion |>\nHere is a solution that uses recursion and memoization:\n\
    <code>", "    if n==1 \n        return n\n    else \n        largest_divisor(n-1)\n\
    \    end\nend\n</code>\n<|/ a tags=julia,recursion |>\n<| a dscore=2 |>\nThe accepted\
    \ answer does not work for me. \n<code>\njulia> largest_divisor(10)\nERROR: MethodError:\
    \ no method matching largest_divisor(::Int64)\nClosest candidates are:\n  largest_divisor(::Int64)\
    \ at REPL[27]:1\nStacktrace:\n [1] top-level scope at none:0\n</code>\nI changed\
    \ it to\n<code>", "    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(10)\n</cell>\n\
    <code language=julia-1.5>", "    if n==0 then return 0\n    else if n==1 then\
    \ return 1\n    else if n%2==0 then return largest_divisor(n/2)\n    else return\
    \ largest_divisor(n/2)+1\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(10)\n\
    </cell>\n<code language=julia-1.5>", "    if n==0 \n        return 0 \n    else\
    \ \n        largest_divisor(n-1)\n    end \nend ", "    if n==0 then return 0\
    \ \n    else if n%2==0 then return n \n    else return largest_divisor(n/2) \n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(10)\n</cell>\n<text>\n\
    Exercise 7: Write a function that returns the number of divisors of n that are\
    \ less than or equal to n.", "    largest_divisor = 1\n    for d in divisors(n)\n\
    \        if n % d == 0\n            largest_divisor = d\n            break\n \
    \   return largest_divisor\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(101)\n\
    </cell>\n<code language=julia-1.5>", "    if n==0 \n        0\n    else \n   \
    \     largest_divisor(n-1)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    largest_divisor(10)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the first n prime numbers. \nHint: use an if statement to check if n is prime.",
  "    largest_divisor = 1\n    for d in divisors(n)\n        if n % d == 0\n    \
    \        largest_divisor = d\n        end\n    end\n    return largest_divisor\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(10)\n</cell>\n<code language=julia-1.5>",
  "    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\nend",
  "    largest_divisor = 1\n    for d in divisors(n)\n        if n % d == 0\n    \
    \        largest_divisor = d\n            break\n    return largest_divisor\n\
    end", "    largest_divisor = 1\n    for d in divisors(n)\n        if n % d ==\
    \ 0\n            largest_divisor = d\n            break\n    return largest_divisor\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(100)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of divisors of a given number.\
    \ For example, for the number 12, there are two divisors: 2 and 3. Your function\
    \ should return the number of divisors, not just the number of times the function\
    \ has been called.", "    if n == 1 \n        return 1 \n    else \n        largest_divisor(n\
    \ / 2)\n        if n % 2 == 0 \n            return largest_divisor(n / 2) \n \
    \       else \n            return largest_divisor(n / 2) + 1 \nend\n</cell>\n\
    <code language=julia-1.5>\nlargest_divisor(100)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of divisors of n that are less than or\
    \ equal to n.", "    if n==1 \n        return 1 \n    else \n        largest_divisor(n-1)\
    \ // largest_divisor(n-2) \nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(10)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ given number. \nFor example factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1", " \
    \   if n==0 \n        0\n    else if n==1 \n        1\n    else if n%2==0 \n \
    \       largest_divisor(n/2)\n    else\n        largest_divisor(n/2)+1\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(10)\n</cell>\n<code language=julia-1.5>",
  "    if n==1 \n        return 1 \n    else \n        largest_divisor(n-1)\n    \
    \    if n%largest_divisor(n-1) == 0 \n            return largest_divisor(n-1)\
    \ \n        else \n            return largest_divisor(n-1) \nend\n</cell>\n<code\
    \ language=julia-1.5>\nlargest_divisor(10)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the factorial of a given number. \nThe factorial of\
    \ a number $n$ is defined as $n!$, where $n$ is an integer greater than or equal\
    \ to 1.", "    largest_divisor = 1\n    for d in divisors(n)\n        if n % d\
    \ == 0\n            largest_divisor = d\n        end\n    end\n    return largest_divisor\n\
    end", "    if n==0 then return 0 \n    else if n==1 then return 1 \n    else if\
    \ n%2==0 then return n \n    else return largest_divisor(n/2) \nend \n</cell>\n\
    <code language=julia-1.0>\nlargest_divisor(10)\n</cell>\n<code language=julia-1.0>",
  "    if n==1 \n        return 1 \n    else \n        largest_divisor(n-1)\n    \
    \    largest_divisor(n/2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(10)\n</cell>\n<code language=julia-1.5>", "    if n==1 \n    \
    \    return n\n    else \n        largest_divisor(n-1)\n        if n%largest_divisor(n-1)\
    \ == 0 \n            return n\n        else \n            return largest_divisor(n-1)\n\
    end\n</cell>\n<code language=julia-1.0>\nlargest_divisor(100)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a given number. \n\
    The factorial of a number $n$ is defined as", "    if n == 0 \n        0\n   \
    \ else\n        largest_divisor(n / 2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(10)\n</cell>\n<code language=julia-1.5>", "    if n==1 \n    \
    \    return 1 \n    else \n        largest_divisor(n-1)\n        largest_divisor(n-2)\n\
    \        if n%2==0 \n            return n \n        else \n            return\
    \ largest_divisor(n-2)\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(10)\n\
    </cell>\n<code language=julia-1.5>", "    if n % 2 == 0 \n        then largest_divisor(n\
    \ / 2)\n        else largest_divisor(3 * n + 1) \n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\nlargest_divisor(100)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the number of divisors of n that are less than or equal\
    \ to n.", "    largest_divisor = 1\n    for d in divisors(n)\n        if n % d\
    \ == 0\n            largest_divisor = d\n        end\n    end\n    return largest_divisor\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(100)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of divisors of n that are\
    \ less than or equal to n.", "    if n % 2 == 0 \n        return n \n    else\
    \ \n        return largest_divisor(n / 2) \nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(100)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of divisors of n that are less than or equal to n.", "    if n ==\
    \ 1 \n        return 1 \n    else \n        largest_divisor = largest_divisor(n-1)\
    \ + 1 \n        if n % largest_divisor == 0 \n            return largest_divisor\
    \ \n        else \n            return largest_divisor \nend ", "    if n==0 \n\
    \        then return 0\n    else if n==1 \n        then return 1\n    else \n\
    \        largest_divisor(n-1)\n        largest_divisor(n-2)\n        largest_divisor(n-3)\n\
    \        largest_divisor(n-4)\n        largest_divisor(n-5)\n        largest_divisor(n-6)\n\
    \        largest_divisor(n-7)\n        largest_divisor(n-8)\n        largest_divisor(n-9)\n\
    \        largest_divisor(n-10)\n        largest_divisor(n-11)\n        largest_divisor(n-12)\n\
    \        largest_divisor(n-13)\n        largest_divisor(n-14)\n        largest_divisor(n-15)\n\
    \        largest_divisor(n-16)\n        largest_divisor(n-17)\n        largest_divisor(n-18)\n\
    \        largest_divisor(n-19)\n        largest_divisor(n-20)\n        largest_divisor(n-21)\n\
    \        largest_divisor(n-22)\n        largest_divisor(n-23)\n        largest_divisor(n-24)\n\
    \        largest_divisor(n-25)\n        largest_divisor(n-26)\n        largest_divisor(n-27)\n\
    \        largest_divisor(n-28)\n        largest_divisor(n-29)\n        largest_divisor(n-30)\n\
    \        largest_divisor(n-31)\n        largest_divisor(n-32)\n        largest_divisor(n-33)\n\
    \        largest_divisor(n-34)\n        largest_divisor(n-35)\n        largest_divisor(n-36)\n\
    \        largest_divisor(n-37)\n        largest_divisor(n-38)\n        largest_divisor(n-39)\n\
    \        largest_divisor(n-40)\n        largest_divisor(n-41)\n        largest_divisor(n-42)\n\
    \        largest_divisor(n-43)\n        largest_divisor(n-44)\n        largest_divisor(n-45)\n\
    \        largest_divisor(n-46)\n        largest_divisor(n-47)\n        largest_divisor(n-48)\n\
    \        largest_divisor(n-49)\n        largest_divisor(n-50)\n        largest_divisor(n-51)\n\
    \        largest_divisor(n-52)\n        largest_divisor(n-53)\n        largest_divisor(n-54)\n\
    \        largest_divisor(n-55)\n        largest_divisor(n-56)\n        largest_divisor(n-57)\n\
    \        largest_divisor(n-58)\n        ", "    if n == 0 \n        return 0 \n\
    \    else \n        largest_divisor(n / 2) \n        if n % 2 == 0 \n        \
    \    largest_divisor(n / 2) \n        else \n            largest_divisor(n / 2)\
    \ \n        end\n    end\nend\n</cell>\n<code language=julia-1.4>\nlargest_divisor(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.", "    if n % 2 == 0 \n        return\
    \ n \n    else \n        return largest_divisor(n / 2) \nend \n</cell>\n<code\
    \ language=julia-1.5>\nlargest_divisor(100)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the factorial of a given number. \nThe factorial of\
    \ a number $n$ is defined as the product of all the integers up to and including\
    \ $n$, inclusive. \nFor example, 6! = 6 \xD7 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1 = 3628800,\n\
    and the factorial of 0 is 1.", "    if n==0 then return 0\n    if n==1 then return\
    \ 1\n    if n%2==0 then return n\n    else return largest_divisor(n/2)\nend\n\
    </cell>\n<code language=julia-1.5>\nlargest_divisor(10)\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(100)\n</cell>\n<code language=julia-1.5>\nlargest_divisor(1000)\n\
    </cell>\n<code language=julia-1.5>\nlargest_divisor(10000)\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(100000)\n</cell>\n<code language=julia-1.5>\nlargest_divisor(1000000)\n\
    </cell>\n<code language=julia-1.5>\nlargest_divisor(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\nlargest_divisor(100000000)\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(1000000000)\n</cell>\n<code language=julia-1.5>\nlargest_divisor(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nlargest_divisor(100000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nlargest_divisor(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(10000000000000)\n</cell>\n<code language=julia-1.5>\nlargest_divisor(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\nlargest_divisor(1000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nlargest_divisor(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nlargest_divisor(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(1000000000000000000)\n</cell>\n<code language=julia-1.5>\nlargest_divisor(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nlargest_divisor(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nlargest_divisor(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nlargest_divisor(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nlargest_divisor(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nlargest_divisor(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nlargest_divisor(10000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nlargest_divisor(100000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5", "    if n==0 \n        return 0 \n    else \n     \
    \   largest_divisor(n-1)\n        if n%2 == 0 \n            return n \n      \
    \  else \n            largest_divisor(n/2)\n        end\n    end\nend\n</cell>\n\
    <code language=julia-1.4>\nlargest_divisor(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of divisors of a given number n. \nFor\
    \ example, for n = 10, the function should return 3.", "    if n==0 \n       \
    \ 0\n    else\n        largest_divisor(n-1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(100)\n</cell>\n<code language=julia-1.5>", "    if n==0 then return\
    \ 0\n    else if n%2==0 then return n\n    else return largest_divisor(n/2)\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(10)\n</cell>\n<code language=julia-1.5>",
  "    if n==0 then return 0 \n    else if n%2==0 then return n \n    else return\
    \ largest_divisor(n/2) \nend \n</cell>\n<code language=julia-1.0>\nlargest_divisor(100)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the first n prime numbers.\
    \ \nHint: use an iterator to generate prime numbers. \nHint: use an iterator to\
    \ generate prime numbers. \nHint: use an iterator to generate prime numbers. \n\
    Hint: use an iterator to generate prime numbers.", "    if n==1 \n        return\
    \ 1 \n    else \n        largest_divisor(n-1)\n        largest_divisor(n-2)\n\
    \        if n%2==0 \n            return n \n        else \n            return\
    \ largest_divisor(n-2)\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(10)\n\
    </cell>\n<code language=julia-1.5>", "    if n==0 \n        0\n    else\n    \
    \    largest_divisor(n-1)\n    end\nend", "    if n==1 \n        return 1 \n \
    \   else \n        largest_divisor(n-1)\n        largest_divisor(n-2)\n      \
    \  if n%2==0 \n            return n \n        else \n            return largest_divisor(n-2)\n\
    end\n</cell>\n<code language=julia-1.0>\nlargest_divisor(10)\n</cell>\n<code language=julia-1.0>",
  "    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\nend",
  "    if n==0 \n        return 0 \n    else if n%2==0 \n        return n \n    else\
    \ \n        return largest_divisor(n/2) \nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(100)\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ an array of numbers and returns the mean of the numbers in the array.", "  \
    \  if n == 0 \n        return 0 \n    else \n        return largest_divisor(n\
    \ / 2) \nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an array of numbers and returns\
    \ the sum of the squares of the numbers.", "    if n == 0 \n        return 0 \n\
    \    else \n        largest_divisor = n \n        for d in divisors(n) \n    \
    \        if n % d == 0 \n                largest_divisor = d \n        return\
    \ largest_divisor \nend \n</cell>\n<code language=julia-1.5>", "    if n == 1\
    \ \n        return 1 \n    else \n        return largest_divisor(n-1) + 1 \nend",
  "    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\nend",
  "    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\nend",
  "    if n==0 \n        return 0 \n    else \n        largest_divisor(n-1)\n    \
    \    ", "    if n==0 \n        return 0 \n    else if n%2==0 \n        return\
    \ n \n    else \n        return largest_divisor(n-1) + 1 \nend \n</cell>\n<code\
    \ language=julia-1.4>\nlargest_divisor(10)\n</cell>\n<code language=julia-1.4>",
  "    if n==0 \n        0\n    else if n%2==0 \n        largest_divisor(n/2)\n  \
    \  else\n        largest_divisor(n/2)+1\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(100)\n</cell>\n<code language=julia-1.5>", "    largest_divisor\
    \ = 1\n    for d in divisors(n)\n        if n % d == 0\n            largest_divisor\
    \ = d\n            break\n    return largest_divisor\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(10)\n</cell>\n<code language=julia-1.5>\nlargest_divisor(100)\n\
    </cell>\n<code language=julia-1.5>\nlargest_divisor(1000)\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(10000)\n</cell>\n<code language=julia-1.5>\nlargest_divisor(100000)\n\
    </cell>\n<code language=julia-1.5>\nlargest_divisor(1000000)\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(10000000)\n</cell>\n<code language=julia-1.5>\nlargest_divisor(100000000)\n\
    </cell>\n<code language=julia-1.5>\nlargest_divisor(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nlargest_divisor(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(100000000000)\n</cell>\n<code language=julia-1.5>\nlargest_divisor(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nlargest_divisor(10000000000000)\n</cell>\n\
    <code language=julia-1.5>\nlargest_divisor(100000000000000)\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(1000000000000000)\n</cell>\n<code language=julia-1.5>\nlargest_divisor(10000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nlargest_divisor(100000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nlargest_divisor(1000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nlargest_divisor(10000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(100000000000000000000)\n</cell>\n<code language=julia-1.5>\nlargest_divisor(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nlargest_divisor(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nlargest_divisor(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nlargest_divisor(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nlargest_divisor(10000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nlargest_divisor(100000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nlargest_divisor", "    if n == 0 \n      \
    \  return 0 \n    else \n        return largest_divisor(n-1) + 1 \nend\n</cell>\n\
    <code language=julia-1.5>\nlargest_divisor(10)\n</cell>\n<code language=julia-1.5>",
  "    if n==0 \n        return 0 \n    else \n        largest_divisor(n-1)\n    \
    \    if n%2==0 \n            return n\n        else \n            return largest_divisor(n-1)\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(100)\n</cell>\n<code\
    \ language=julia-1.5>", "    if n==0 \n        then return 0\n    else if n%2==0\
    \ \n        then return n\n    else \n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\nlargest_divisor(10)\n</cell>\n<code language=julia-1.0>",
  "    if n==0 \n        0\n    else if n==1 \n        1\n    else if n%2==0 \n  \
    \      largest_divisor(n/2)\n    else \n        largest_divisor(n/2)+1\nend\n\
    </cell>\n<code language=julia-1.0>\nlargest_divisor(100)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a number n and returns the number of integers\
    \ less than n that divide evenly into n.", "    if n==0 then return 0\n    else\
    \ if n==1 then return 1\n    else if n%2==0 then return n\n    else return largest_divisor(n/2)\n\
    end\n</cell>\n<code language=julia-1.0>\nlargest_divisor(10)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the factorial of a given number. \n\
    The factorial of a number $n$ is defined as the product of all the integers up\
    \ to and including $n$, inclusive.\nFor example, 5! = 5 \xD7 4 \xD7 3 \xD7 2 \xD7\
    \ 1", "    if n % 2 == 0 \n        then return n \n        else return largest_divisor(n\
    \ / 2) \n    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(100)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in a number n and returns\
    \ the largest number that divides n evenly, smaller than n.", "    if n==0 \n\
    \        0\n    else\n        largest_divisor(n-1)\n    end\nend", "    if n==0\
    \ then return 0\n    if n==1 then return 1\n    if n%2==0 then return n\n    else\
    \ return largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(10)\n\
    </cell>\n<code language=julia-1.5>", "    if n==0 then return 0\n    if n==1 then\
    \ return 1\n    if n%2==0 then return n\n    else return largest_divisor(n/2)\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(10)\n</cell>\n<code language=julia-1.5>",
  "    if n == 1 \n        return 1 \n    else \n        largest_divisor(n / 2)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\nlargest_divisor(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the factorial of a given number.\
    \ For example, factorial(5) = 5 * 4 * 3 * 2 * 1 = 120", "    if n == 1 \n    \
    \    return 1 \n    else \n        largest_divisor = largest_divisor(n-1) + 1\
    \ \n        if n % largest_divisor == 0 \n            return largest_divisor \n\
    \        else \n            return largest_divisor \nend \n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(100)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of divisors of a given number. \nFor example, for the number 12,\
    \ the function should return 3.", "    if n==0\n        0\n    else\n        largest_divisor(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\nlargest_divisor(10)\n</cell>\n\
    <code language=julia-1.0>", "    largest_divisor = 0\n    for d in divisors(n)\n\
    \        if n % d == 0\n            largest_divisor = d\n            break\n \
    \   return largest_divisor\nend\n</cell>\n<code language=julia-1.4>\nlargest_divisor(10)\n\
    </cell>\n<code language=julia-1.4>\nlargest_divisor(100)\n</cell>\n<code language=julia-1.4>\n\
    largest_divisor(1000)\n</cell>\n<code language=julia-1.4>\nlargest_divisor(10000)\n\
    </cell>\n<code language=julia-1.4>\nlargest_divisor(100000)\n</cell>\n<code language=julia-1.4>\n\
    largest_divisor(1000000)\n</cell>\n<code language=julia-1.4>\nlargest_divisor(10000000)\n\
    </cell>\n<code language=julia-1.4>\nlargest_divisor(100000000)\n</cell>\n<code\
    \ language=julia-1.4>\nlargest_divisor(1000000000)\n</cell>\n<code language=julia-1.4>\n\
    largest_divisor(10000000000)\n</cell>\n<code language=julia-1.4>\nlargest_divisor(100000000000)\n\
    </cell>\n<code language=julia-1.4>\nlargest_divisor(1000000000000)\n</cell>\n\
    <code language=julia-1.4>\nlargest_divisor(10000000000000)\n</cell>\n<code language=julia-1.4>\n\
    largest_divisor(100000000000000)\n</cell>\n<code language=julia-1.4>\nlargest_divisor(1000000000000000)\n\
    </cell>\n<code language=julia-1.4>\nlargest_divisor(10000000000000000)\n</cell>\n\
    <code language=julia-1.4>\nlargest_divisor(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.4>\nlargest_divisor(1000000000000000000)\n</cell>\n<code language=julia-1.4>\n\
    largest_divisor(10000000000000000000)\n</cell>\n<code language=julia-1.4>\nlargest_divisor(100000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\nlargest_divisor(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\nlargest_divisor(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\nlargest_divisor(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\nlargest_divisor(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\nlargest_divisor(10000000000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\nlargest_divisor(100000000000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\nlargest_divisor", "    if n==0 then return\
    \ 0\n    else if n%2==0 then return n\n    else return largest_divisor(n/2)\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(100)\n</cell>\n<code\
    \ language=julia-1.5>", "    largest_divisor = 1\n    for d in divisors(n)\n \
    \       if n % d == 0\n            largest_divisor = d\n            break\n  \
    \  return largest_divisor\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(100)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes an array of numbers and\
    \ returns the number of elements in the array that are less than or equal to their\
    \ sum.", "    if n==0 then return 0\n    else if n%2==0 then return n\n    else\
    \ return largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.0>\nlargest_divisor(10)\n\
    </cell>\n<code language=julia-1.0>", "    if n==0\n        0\n    else\n     \
    \   largest_divisor(n-1)\n    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(10)\n\
    </cell>\n<code language=julia-1.5>", "    if n==0 then return 0\n    else if n==1\
    \ then return 1\n    else if n%2==0 then return largest_divisor(n/2)\n    else\
    \ return largest_divisor(n/2) + 1\nend", "    if n==0 \n        0\n    else\n\
    \        largest_divisor(n-1)\n    end\nend", "    if n==0 \n        0\n    else\n\
    \        largest_divisor(n-1)\n    end\nend", "    if n==0 then return 0\n   \
    \ else if n%2==0 then return n\n    else return largest_divisor(n/2)\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n==1 \n        return 1 \n    else \n    \
    \    largest_divisor(n-1)\n        largest_divisor(n-2)\n        if n%2==0 \n\
    \            return n \n        else \n            return largest_divisor(n-2)\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(100)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of divisors of n that are\
    \ less than or equal to n.", "    if n==0 then return 0\n    else if n%2==0 then\
    \ return n\n    else return largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(10)\n</cell>\n<code language=julia-1.5>", "    if n==0 \n    \
    \    0\n    else\n        largest_divisor(n-1)\n    end\nend", "    if n==1 \n\
    \        return 1 \n    else \n        largest_divisor(n-1)\n        if n%largest_divisor(n-1)\
    \ == 0 \n            return largest_divisor(n-1) \n        else \n           \
    \ return n \nend\n</cell>\n<code language=julia-1.3>", "    if n==0 \n       \
    \ 0\n    else\n        largest_divisor(n-1)\n    end\nend", "    if n==0 \n  \
    \      0\n    else\n        largest_divisor(n-1)\n    end\nend", "    if n==0\
    \ \n        0\n    else\n        largest_divisor(n-1)\n    end\nend", "    if\
    \ n==0 then return 0\n    else if n==1 then return 1\n    else if n%2==0 then\
    \ return n\n    else return largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.0>\n\
    largest_divisor(100)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of divisors of n that are less than or equal to n.", "    if n==0\n\
    \        0\n    else\n        largest_divisor(n-1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.4>\nlargest_divisor(10)\n</cell>\n<code language=julia-1.4>",
  "    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\nend",
  "    if n==1 \n        return 1 \n    else \n        largest_divisor(n-1)\n    end\n\
    end", "    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\nlargest_divisor(10)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of divisors of n that are\
    \ smaller than n.", "    if n==0\n        0\n    else\n        largest_divisor(n-1)\n\
    \    end\nend", "    largest_divisor = 1\n    for d in divisors(n)\n        if\
    \ n % d == 0\n            largest_divisor = d\n            break\n    return largest_divisor\n\
    end", "    if n==0 \n        0\n    elseif n==1 \n        1\n    else\n      \
    \  largest_divisor(n-1)\n    end\nend", "    if n==1 \n        return n\n    else\
    \ \n        largest_divisor(n-1)\n    end\nend", "    if n==0\n        0\n   \
    \ else\n        largest_divisor(n-1)\n    end\nend\n</cell>\n<code language=julia-1.0>",
  "    if n==0 \n        then return 0 \n    else if n==1 \n        then return 1\
    \ \n    else \n        largest_divisor(n-1)\n        largest_divisor(n-2)\n  \
    \      largest_divisor(n-3)\n        largest_divisor(n-4)\n        largest_divisor(n-5)\n\
    \        largest_divisor(n-6)\n        largest_divisor(n-7)\n        largest_divisor(n-8)\n\
    \        largest_divisor(n-9)\n        largest_divisor(n-10)\n        largest_divisor(n-11)\n\
    \        largest_divisor(n-12)\n        largest_divisor(n-13)\n        largest_divisor(n-14)\n\
    \        largest_divisor(n-15)\n        largest_divisor(n-16)\n        largest_divisor(n-17)\n\
    \        largest_divisor(n-18)\n        largest_divisor(n-19)\n        largest_divisor(n-20)\n\
    \        largest_divisor(n-21)\n        largest_divisor(n-22)\n        largest_divisor(n-23)\n\
    \        largest_divisor(n-24)\n        largest_divisor(n-25)\n        largest_divisor(n-26)\n\
    \        largest_divisor(n-27)\n        largest_divisor(n-28)\n        largest_divisor(n-29)\n\
    \        largest_divisor(n-30)\n        largest_divisor(n-31)\n        largest_divisor(n-32)\n\
    \        largest_divisor(n-33)\n        largest_divisor(n-34)\n        largest_divisor(n-35)\n\
    \        largest_divisor(n-36)\n        largest_divisor(n-37)\n        largest_divisor(n-38)\n\
    \        largest_divisor(n-39)\n        largest_divisor(n-40)\n        largest_divisor(n-41)\n\
    \        largest_divisor(n-42)\n        largest_divisor(n-43)\n        largest_divisor(n-44)\n\
    \        largest_divisor(n-45)\n        largest_divisor(n-46)\n        largest_divisor(n-47)\n\
    \        largest_divisor(n-48)\n        largest_divisor(n-49)\n        largest_divisor(n-50)\n\
    \        largest_divisor(n-51)\n        largest_divisor(n-52)\n        largest_divisor(n-53)\n\
    \        largest_divisor(n-54)\n        largest_divisor(n-55)\n        largest_divisor(n-56)\n\
    \        largest_divisor(n-57)\n        largest_divisor(n-58)\n        ", "  \
    \  if n % 2 == 0 \n        then largest_divisor(n / 2)\n        else largest_divisor(3\
    \ * n + 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(100)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.", "    if n % 2 == 0 \n        then largest_divisor(n\
    \ / 2)\n        else largest_divisor(3 * n + 1) \n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nlargest_divisor(100)\n</cell>\n<code language=julia-1.5>",
  "    if n==1 \n        return 1 \n    else \n        largest_divisor(n-1)\n    end\
    \ \nend \n</cell>\n<code language=julia-1.5>\nlargest_divisor(10)\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    largest_divisor = 1\n    \n    for d in divisors(n)\n\
    \        if n % d == 0\n            largest_divisor = d\n            break\n \
    \   end\n    \n    return largest_divisor\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(100)\n</cell>\n<code language=julia-1.5>", "    if n==1 \n   \
    \     return 1 \n    else \n        largest_divisor(n-1)\n        largest_divisor(n-2)\n\
    \        if n%2==0 \n            return n\n        else \n            return n-1\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(10)\n</cell>\n\
    <code language=julia-1.5>", "    if n==0 \n        return 0 \n    else \n    \
    \    return largest_divisor(n-1) + 1 \nend \n</cell>\n<code language=julia-1.0>\n\
    largest_divisor(10)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the factorial of a given number. For example, factorial(5) = 5 * 4 * 3 * 2 *\
    \ 1 = 120", "    if n==0 \n        return 0 \n    else \n        largest_divisor(n-1)\n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n", "    if n % 2 == 0 \n        then largest_divisor(n / 2)\n\
    \        else largest_divisor(3 * n + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(100)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of divisors of n that are less than or equal to n.", "    if n ==\
    \ 1 \n        return 1 \n    else \n        return largest_divisor(n-1) + 1 \n\
    end \n</cell>\n<code language=julia-1.5>\nlargest_divisor(10)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of divisors of n that are\
    \ less than or equal to n.", "    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n\
    \    end\nend", "    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n\
    \    end\nend", "    if n==0 \n        return 0 \n    else \n        largest_divisor(n-1)\n\
    \        if n%2==0 \n            return n \n        else \n            return\
    \ largest_divisor(n/2) \nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(10)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the first n prime numbers.\
    \ \nHint: use an iterator to generate prime numbers. \nHint: use an iterator to\
    \ generate prime numbers.", "    if n % 2 == 0 \n        then return n \n    \
    \    else return largest_divisor(n / 2) \n    end\nend", "    largest_divisor\
    \ = 1\n    for d in divisors(n)\n        if n % d == 0\n            largest_divisor\
    \ = d\n            break\n    return largest_divisor\nend", "    if n==0\n   \
    \     0\n    else\n        largest_divisor(n-1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nlargest_divisor(10)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the factorial of a given number. For example, factorial(5)\
    \ = 5 * 4 * 3 * 2 * 1 = 120", "    largest_divisor = 1\n    for d in divisors(n)\n\
    \        if n % d == 0\n            largest_divisor = d\n        end\n    end\n\
    \    return largest_divisor\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(10)\n\
    </cell>\n<code language=julia-1.5>", "    largest_divisor = 1\n    for d in divisors(n)\
    \ do \n        if n % d == 0 && (d > largest_divisor) \n            largest_divisor\
    \ = d\n    return largest_divisor\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of divisors\
    \ of a given number n. \nFor example, for the number 10, the divisors are 1, 2,\
    \ and 3.", "    if n==0 \n        return 0 \n    else \n        largest_divisor(n-1)\n\
    \    end \nend \n</cell>\n<code language=julia-1.5>\nlargest_divisor(10)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the factorial of a given number.\
    \ \nThe factorial of a number $n$ is defined as $n! = n  (n-1)  (n-2)  ...  1\
    \  $\nThe factorial of a negative number $n$ is defined as $n! = -n * (n-1)  (n-2)\
    \  ...  1  $\nThe factorial of 0 is defined as $0! = 1$\nThe factorial of negative\
    \ numbers is defined as $n! = -n * (n-1)  (n-2)  ...  1  $", "    if n==0 then\
    \ return 0\n    else if n%2==0 then return n\n    else return largest_divisor(n/2)\n\
    end\n</cell>\n<code language=julia-1.0>\nlargest_divisor(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of divisors of a given number.\
    \ For example, if the input is 10, the function should return 3.", "    if n==0\
    \ \n        return 0 \n    else \n        return largest_divisor(n-1) + 1 \nend\n\
    </cell>\n<code language=julia-1.5>\nlargest_divisor(10)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the largest prime factor of a given number.\
    \ \nThe function should take one argument, n, of type Int64, and return an Int64.\
    \ \nThe function should return 0 if the number n is 0, otherwise it should return\
    \ the largest prime factor of n. \nThe function should return 0 if the number\
    \ n is negative. \nThe function should return 0 if the number n is greater than\
    \ or equal to 2. \nThe function should return 0 if the number n is less than or\
    \ equal to 0. \nThe function should return 0 if the number n is greater than or\
    \ equal to 10. \nThe function should return 0 if the number n is less than or\
    \ equal to 10. \nThe function should return 0 if the number n is greater than\
    \ or equal to 100. \nThe function should return 0 if the number n is less than\
    \ or equal to 100. \nThe function should return 0 if the number n is greater than\
    \ or equal to 1000. \nThe function should return 0 if the number n is less than\
    \ or equal to 1000. \nThe function should return 0 if the number n is greater\
    \ than or equal to 10000. \nThe function should return 0 if the number n is less\
    \ than or equal to 10000. \nThe function should return 0 if the number n is greater\
    \ than or equal to 100000. \nThe function should return 0 if the number n is less\
    \ than or equal to 100000. \nThe function should return 0 if the number n is greater\
    \ than or equal to 1000000. \nThe function should return 0 if the number n is\
    \ less than or equal to 1000000. \nThe function should return 0 if the number\
    \ n is greater than or equal to 10000000. \nThe function should return 0 if the\
    \ number n is less than or equal to 10000000. \nThe function should return 0 if\
    \ the number n is greater than or equal to 100000000. \nThe function should return\
    \ 0 if the number n is less than or equal to 100000000. \nThe function should\
    \ return 0 if the number n is greater than or equal to 1000000000. \nThe function\
    \ should return 0 if the number n is less than or equal to 1000000000. \nThe function\
    \ should return 0 if the number n is greater than or equal to 10000000000. \n\
    The function should return 0 if the number n is less than or equal to 10000000000.\
    \ \nThe function should return 0 if the number n is greater than or equal to 1000000000000.\
    \ \nThe function should return 0 if the number n is less than or equal to 1000000000000.\
    \ \nThe function should return 0 if the number n is greater than or equal to 10000000000000.\
    \ \nThe function should return 0 if the number n is less than or equal to 10000000000000",
  "    if n==1 \n        return 1 \n    else \n        largest_divisor(n-1)\n    \
    \    if n%largest_divisor(n-1) == 0 \n            return largest_divisor(n-1)\
    \ \n        else \n            return largest_divisor(n-1) \nend\n</cell>\n<code\
    \ language=julia-1.5>\nlargest_divisor(10)\n</cell>\n<code language=julia-1.5>",
  "    largest_divisor = 1\n    for d in divisors(n)\n        if n % d == 0\n    \
    \        largest_divisor = d\n            break\n    return largest_divisor\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(123)\n</cell>\n<code\
    \ language=julia-1.5>\nlargest_divisor(124)\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(125)\n</cell>\n<code language=julia-1.5>\nlargest_divisor(126)\n\
    </cell>\n<code language=julia-1.5>\nlargest_divisor(127)\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(128)\n</cell>\n<code language=julia-1.5>\nlargest_divisor(129)\n\
    </cell>\n<code language=julia-1.5>\nlargest_divisor(130)\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(131)\n</cell>\n<code language=julia-1.5>\nlargest_divisor(132)\n\
    </cell>\n<code language=julia-1.5>\nlargest_divisor(133)\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(134)\n</cell>\n<code language=julia-1.5>\nlargest_divisor(135)\n\
    </cell>\n<code language=julia-1.5>\nlargest_divisor(136)\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(137)\n</cell>\n<code language=julia-1.5>\nlargest_divisor(138)\n\
    </cell>\n<code language=julia-1.5>\nlargest_divisor(139)\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(140)\n</cell>\n<code language=julia-1.5>\nlargest_divisor(141)\n\
    </cell>\n<code language=julia-1.5>\nlargest_divisor(142)\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(143)\n</cell>\n<code language=julia-1.5>\nlargest_divisor(144)\n\
    </cell>\n<code language=julia-1.5>\nlargest_divisor(145)\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(146)\n</cell>\n<code language=julia-1.5>\nlargest_divisor(147)\n\
    </cell>\n<code language=julia-1.5>\nlargest_divisor(148)\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(149)\n</cell>\n<code language=julia-1.5>\nlargest_divisor(150)\n\
    </cell>\n<code language=", "    if n==1 \n        return 1 \n    else \n     \
    \   largest_divisor(n-1)\n    end\nend\n</cell>\n<code language=julia-1.3>\nlargest_divisor(100)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of divisors\
    \ of a given number n. For example, for the number 12, there are two divisors:\
    \ 2 and 3. Your function should return the number of divisors rather than the\
    \ divisors themselves.", "    largest_divisor = 0\n    for d in divisors(n)\n\
    \        if n % d == 0\n            largest_divisor = d \n        end\n    end\n\
    \    return largest_divisor\nend\n</cell>\n<code language=julia-1.4>\nlargest_divisor(10)\n\
    </cell>\n<code language=julia-1.4>\nlargest_divisor(100)\n</cell>\n<code language=julia-1.4>\n\
    largest_divisor(1000)\n</cell>\n<code language=julia-1.4>\nlargest_divisor(10000)\n\
    </cell>\n<code language=julia-1.4>\nlargest_divisor(100000)\n</cell>\n<code language=julia-1.4>\n\
    largest_divisor(1000000)\n</cell>\n<code language=julia-1.4>\nlargest_divisor(10000000)\n\
    </cell>\n<code language=julia-1.4>\nlargest_divisor(100000000)\n</cell>\n<code\
    \ language=julia-1.4>\nlargest_divisor(1000000000)\n</cell>\n<code language=julia-1.4>\n\
    largest_divisor(10000000000)\n</cell>\n<code language=julia-1.4>\nlargest_divisor(100000000000)\n\
    </cell>\n<code language=julia-1.4>\nlargest_divisor(1000000000000)\n</cell>\n\
    <code language=julia-1.4>\nlargest_divisor(10000000000000)\n</cell>\n<code language=julia-1.4>\n\
    largest_divisor(100000000000000)\n</cell>\n<code language=julia-1.4>\nlargest_divisor(1000000000000000)\n\
    </cell>\n<code language=julia-1.4>\nlargest_divisor(10000000000000000)\n</cell>\n\
    <code language=julia-1.4>\nlargest_divisor(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.4>\nlargest_divisor(1000000000000000000)\n</cell>\n<code language=julia-1.4>\n\
    largest_divisor(10000000000000000000)\n</cell>\n<code language=julia-1.4>\nlargest_divisor(100000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\nlargest_divisor(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\nlargest_divisor(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\nlargest_divisor(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\nlargest_divisor(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\nlargest_divisor(10000000000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\nlargest_divisor(100000000000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\n", "    if n==0 then return 0\n    else if\
    \ n%2==0 then return n\n    else return largest_divisor(n/2)\nend\n</cell>\n<code\
    \ language=julia-1.4>\nlargest_divisor(10)\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that returns the largest number that can be divided by all the numbers\
    \ from 1 to n (inclusive).", "    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n\
    \    end\nend", "    if n==1 \n        return 1 \n    else \n        largest_divisor(n-1)\n\
    \        largest_divisor(n-2)\n        largest_divisor(n-3)\n        largest_divisor(n-4)\n\
    \        largest_divisor(n-5)\n        largest_divisor(n-6)\n        largest_divisor(n-7)\n\
    \        largest_divisor(n-8)\n        largest_divisor(n-9)\n        largest_divisor(n-10)\n\
    \        largest_divisor(n-11)\n        largest_divisor(n-12)\n        largest_divisor(n-13)\n\
    \        largest_divisor(n-14)\n        largest_divisor(n-15)\n        largest_divisor(n-16)\n\
    \        largest_divisor(n-17)\n        largest_divisor(n-18)\n        largest_divisor(n-19)\n\
    \        largest_divisor(n-20)\n        largest_divisor(n-21)\n        largest_divisor(n-22)\n\
    \        largest_divisor(n-23)\n        largest_divisor(n-24)\n        largest_divisor(n-25)\n\
    \        largest_divisor(n-26)\n        largest_divisor(n-27)\n        largest_divisor(n-28)\n\
    \        largest_divisor(n-29)\n        largest_divisor(n-30)\n        largest_divisor(n-31)\n\
    \        largest_divisor(n-32)\n        largest_divisor(n-33)\n        largest_divisor(n-34)\n\
    \        largest_divisor(n-35)\n        largest_divisor(n-36)\n        largest_divisor(n-37)\n\
    \        largest_divisor(n-38)\n        largest_divisor(n-39)\n        largest_divisor(n-40)\n\
    \        largest_divisor(n-41)\n        largest_divisor(n-42)\n        largest_divisor(n-43)\n\
    \        largest_divisor(n-44)\n        largest_divisor(n-45)\n        largest_divisor(n-46)\n\
    \        largest_divisor(n-47)\n        largest_divisor(n-48)\n        largest_divisor(n-49)\n\
    \        largest_divisor(n-50)\n        largest_divisor(n-51)\n        largest_divisor(n-52)\n\
    \        largest_divisor(n-53)\n        largest_divisor(n-54)\n        largest_divisor(n-55)\n\
    \        largest_divisor(n-56)\n        largest_divisor(n-57)\n        largest_divisor(n-58)\n\
    \        largest_divisor(n-59)\n        largest_divisor(n-", "    if n % 2 ==\
    \ 0\n        largest_divisor = n / 2\n    else\n        largest_divisor = largest_divisor\
    \ * 3 + 1\n    end\nend\n</cell>\n<code language=julia-1.0>\nlargest_divisor(100)\n\
    </cell>\n<code language=julia-1.0>", "    if n == 0 \n        0\n    else\n  \
    \      largest_divisor(n-1)\n    end\nend", "    if n==0 then return 0\n    else\
    \ if n%2==0 then return n\n    else return largest_divisor(n/2)\nend\n</cell>\n\
    <code language=julia-1.5>\nlargest_divisor(10)\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(100)\n</cell>\n<code language=julia-1.5>\nlargest_divisor(1000)\n\
    </cell>\n<code language=julia-1.5>\nlargest_divisor(10000)\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(100000)\n</cell>\n<code language=julia-1.5>\nlargest_divisor(1000000)\n\
    </cell>\n<code language=julia-1.5>\nlargest_divisor(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\nlargest_divisor(100000000)\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(1000000000)\n</cell>\n<code language=julia-1.5>\nlargest_divisor(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nlargest_divisor(100000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nlargest_divisor(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(10000000000000)\n</cell>\n<code language=julia-1.5>\nlargest_divisor(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\nlargest_divisor(1000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nlargest_divisor(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nlargest_divisor(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(1000000000000000000)\n</cell>\n<code language=julia-1.5>\nlargest_divisor(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nlargest_divisor(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nlargest_divisor(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nlargest_divisor(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nlargest_divisor(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nlargest_divisor(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nlargest_divisor(10000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nlargest_divisor(100000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nlargest_divisor(", "    if n==1 \n        return 1\
    \ \n    else \n        largest_divisor(n-1)\n        largest_divisor(n-2)\n  \
    \      if n%2==0 \n            return n\n        else \n            return largest_divisor(n-2)\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\nlargest_divisor(10)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of divisors of n\
    \ that are less than or equal to n.", "    if n == 0 \n        return 0 \n   \
    \ else \n        largest_divisor(n-1) \n    end \nend \n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the factorial of a given number. \nHint: use recursion.", "    if n==0 then\
    \ return 0\n    else if n%2==0 then return n\n    else return largest_divisor(n/2)\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(10)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the first n prime numbers. \nHint: Use\
    \ a sieve of Eratosthenes", "    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n\
    \    end\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
