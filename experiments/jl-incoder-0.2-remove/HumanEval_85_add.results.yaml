language: jl
name: HumanEval_85_add
results:
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[2::2]\n    even.+=(odd.+=0)\n    return\
    \ even\nend\n\"\"\"\n\"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp53k2d8qe.jl:255

    '
  stdout: "test set: Error During Test at /tmp/tmp53k2d8qe.jl:258\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  TypeError: in typeassert, expected\
    \ Type, got a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmp53k2d8qe.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp53k2d8qe.jl:258 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp53k2d8qe.jl:257\ntest set:\
    \ Error During Test at /tmp/tmp53k2d8qe.jl:259\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  TypeError: in typeassert, expected\
    \ Type, got a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmp53k2d8qe.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp53k2d8qe.jl:259 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp53k2d8qe.jl:257\ntest set:\
    \ Error During Test at /tmp/tmp53k2d8qe.jl:260\n  Test threw exception\n  Expression:\
    \ candidate([4, 0, 6, 7]) == 0\n  TypeError: in typeassert, expected Type, got\
    \ a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmp53k2d8qe.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp53k2d8qe.jl:260 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp53k2d8qe.jl:257\ntest set:\
    \ Error During Test at /tmp/tmp53k2d8qe.jl:261\n  Test threw exception\n  Expression:\
    \ candidate([4, 4, 6, 8]) == 12\n  TypeError: in typeassert, expected Type, got\
    \ a value of type Int64\n  Stacktr"
  timestamp: 1659749286
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x ->\
    \ x % 2 != 0, lst)]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([1,2,3,4,5,6,7,8,9])\n</cell>\n<text>\nExercise 2\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkgwo2z2k.jl:12\nin expression starting at\
    \ /tmp/tmpkgwo2z2k.jl:12\n"
  stdout: ''
  timestamp: 1659749284
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1 :end]\n    odd = lst[2 :end]\n    even.+=(odd.*2)\n    return\
    \ even\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpqvj86i_c.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpqvj86i_c.jl:17\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  MethodError: no method matching typed_hcat(::Vector{Int64},\
    \ ::Int64, ::Symbol)\n  Closest candidates are:\n    typed_hcat(!Matched::Type{T},\
    \ ::Any...) where T at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:1826\n\
    \    typed_hcat(!Matched::Type{T}, !Matched::Number...) where T at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:1532\n\
    \    typed_hcat(!Matched::Type{T}, !Matched::Union{Number, LinearAlgebra.Adjoint{T,\
    \ <:AbstractVector} where T}...) where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/adjtrans.jl:225\n\
    \    ...\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmpqvj86i_c.jl:7\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqvj86i_c.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqvj86i_c.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpqvj86i_c.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  MethodError: no method matching typed_hcat(::Vector{Int64},\
    \ ::Int64, ::Symbol)\n  Closest candidates are:\n    typed_hcat(!Matched::Type{T},\
    \ ::Any...) where T at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:1826\n\
    \    typed_hcat(!Matched::Type{T}, !Matched::Number...) where T at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:1532\n\
    \    typed_hcat(!Matched::Type{T}, !Matched::Union{Number, LinearAlgebra.Adjoint{T,\
    \ <:AbstractVector} where T}...) where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/adjtrans.jl:225\n\
    \    ...\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmpqvj86i_c.jl:7\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n   "
  timestamp: 1659749287
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbizkfu3z.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbizkfu3z.jl:1\n\
    in expression starting at /tmp/tmpbizkfu3z.jl:1\n"
  stdout: ''
  timestamp: 1659749284
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[2::2]\n    even.+=(odd.+0)\n    return\
    \ even\nend\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqlajhb9i.jl:12\nin expression starting at\
    \ /tmp/tmpqlajhb9i.jl:12\n"
  stdout: ''
  timestamp: 1659749284
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n  \
    \  evens = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n    evens\
    \ = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n    evens =\
    \ evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> x != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x ->\
    \ x != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x\
    \ != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x !=\
    \ 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x != 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n  \
    \  evens = evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n    evens =\
    \ evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n  \
    \  evens = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n    evens\
    \ = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n    evens =\
    \ evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> x != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x ->\
    \ x != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x\
    \ != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x !=\
    \ 0, evens)]\n    evens = evens[2:end]\n    evens = evens[\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpokmq3vz2.jl:1\nin expression starting at /tmp/tmpokmq3vz2.jl:1\n"
  stdout: ''
  timestamp: 1659749284
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[1 : (end-1)]\n    evens = filter(x -> x % 2 == 0, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = reduce(+, evens)\n    return\
    \ evens\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpw1i5idvr.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpw1i5idvr.jl:18\n  Expression: candidate([4,\
    \ 88]) == 88\n   Evaluated: 5 == 88\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw1i5idvr.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw1i5idvr.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpw1i5idvr.jl:19\n  Expression: candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n   Evaluated: 15 == 122\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw1i5idvr.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw1i5idvr.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpw1i5idvr.jl:20\n  Expression: candidate([4, 0, 6, 7]) == 0\n\
    \   Evaluated: 13 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw1i5idvr.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw1i5idvr.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpw1i5idvr.jl:21\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 17 == 12\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw1i5idvr.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw1i5idvr.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659749285
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[1 : (end-1)]\n    odds = lst[(end-1) : end]\n    evens = filter(x\
    \ -> x % 2 == 0, evens)\n    odds = filter(x -> x % 2 == 1, odds)\n    evens =\
    \ collect(evens)\n    odds = collect(odds)\n    evens = sum(evens)\n    odds =\
    \ sum(odds)\n    return evens + odds\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warn\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy2l3lkk8.jl:17\nin expression starting at\
    \ /tmp/tmpy2l3lkk8.jl:17\n"
  stdout: ''
  timestamp: 1659749285
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> mod(x,2) == 0, lst)]\n    evens = evens[findall(x\
    \ -> mod(x,2) == 1, lst)]\n    evens = evens[findall(x -> mod(x,2) == 2, lst)]\n\
    \    evens = evens[findall(x -> mod(x,2) == 3, lst)]\n    evens = evens[findall(x\
    \ -> mod(x,2) == 4, lst)]\n    evens = evens[findall(x -> mod(x,2) == 5, lst)]\n\
    \    evens = evens[findall(x -> mod(x,2) == 6, lst)]\n    evens = evens[findall(x\
    \ -> mod(x,2) == 7, lst)]\n    evens = evens[findall(x -> mod(x,2) == 8, lst)]\n\
    \    evens = evens[findall(x -> mod(x,2) == 9, lst)]\n    evens = evens[findall(x\
    \ -> mod(x,2) == 10, lst)]\n    evens = evens[findall(x -> mod(x,2) == 11, lst)]\n\
    \    evens = evens[findall(x -> mod(x,2) == 12, lst)]\n    evens = evens[findall(x\
    \ -> mod(x,2) == 13, lst)]\n    evens = evens[findall(x -> mod(x,2) == 14, lst)]\n\
    \    evens = evens[findall(x -> mod(x,2) == 15, lst)]\n    evens = evens[findall(x\
    \ -> mod(x,2) == 16, lst)]\n    evens = evens[findall(x -> mod(x,2) == 17, lst)]\n\
    \    evens = evens[findall(x -> mod(x,2) == 18, lst)]\n    evens = evens[findall(x\
    \ -> mod(x,2) == 19, lst)]\n    evens = evens[findall(x -> mod(x,2) == 20, lst)]\n\
    \    evens = evens[findall(x -> mod(x,2) == 21, lst)]\n    evens = evens[findall(x\
    \ -> mod(x,2) == 22, lst)]\n    evens = evens[findall(x -> mod(x,2) == 23, lst)]\n\
    \    evens = evens[findall(x -> mod(x,2) == 24, lst)]\n    evens = evens[findall(x\
    \ -> mod(x,2) == 25, lst)]\n    evens = evens[findall(x -> mod(x,2) == 26, lst)]\n\
    \    evens = evens[findall(x -> mod(x,2) == 27, lst)]\n    evens = evens[findall(x\
    \ -> mod(x,2) == 28, lst)]\n    evens = evens[findall(x -> mod(x,2) == 29, lst)]\n\
    \    evens = evens[findall(x -> mod(x,2) == 30, lst)]\n    evens = evens[findall(x\
    \ -> mod(x,2) == 31, lst)]\n\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpo9a83egg.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpo9a83egg.jl:1\n\
    in expression starting at /tmp/tmpo9a83egg.jl:1\n"
  stdout: ''
  timestamp: 1659749284
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[2::2]\n    even.+=(odd.+=0)\n    return\
    \ even\nend\n</cell>\n<code language=julia-1.3>\n@assert add([1]) == 1;\n@assert\
    \ add([1,2]) == 3;\n@assert add([1,2,3]) == 5;\n@assert add([1,2,3,4]) == 7;\n\
    @assert add([1,2,3,4,5]) == 10;\n@assert add([1,2,3,4,5,6]) == 13;\n@assert add([1,2,3,4,5,6,7])\
    \ == 16;\n@assert add([1,2,3,4,5,6,7,8]) == 19;\n@assert add([1,2,3,4,5,6,7,8,9])\
    \ == 22;\n@assert add([1,2,3,4,5,6,7,8,9,10]) == 25;\n@assert add([1,2,3,4,5,6,7,8,9,10,11])\
    \ == 28;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12]) == 31;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13])\
    \ == 34;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14]) == 37;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\
    \ == 40;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == 43;\n@assert\
    \ add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) == 46;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\
    \ == 49;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) == 52;\n\
    @assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 55;\n@assert\
    \ add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) == 58;\n@assert\
    \ add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]) == 61;\n@assert\
    \ add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]) == 64;\n\
    @assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\
    \ == 67;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyezhcg34.jl:12\nin expression starting at\
    \ /tmp/tmpyezhcg34.jl:12\n"
  stdout: ''
  timestamp: 1659749284
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x ->\
    \ x % 2 != 0, lst)]\n    even.+=(odd.+0)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert add([1]) == 1;\n@assert add([1,2]) == 3;\n@assert\
    \ add([1,2,3]) == 5;\n@assert add([1,2,3,4,5]) == 10;\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the numbers in a vector. \nThe function\
    \ should work for both real and complex numbers. \nThe function should work for\
    \ both real and complex numbers. \nThe function should work for both real and\
    \ complex numbers. \nThe function should work for both real and complex numbers.\
    \ \nThe function should work for both real and complex numbers. \nThe function\
    \ should work for both real and complex numbers. \nThe function should work for\
    \ both real and complex numbers. \nThe function should work for both real and\
    \ complex numbers. \nThe function should work for both real and complex numbers.\
    \ \nThe function should work for both real and complex numbers. \nThe function\
    \ should work for both real and complex numbers. \nThe function should work for\
    \ both real and complex numbers. \nThe function should work for both real and\
    \ complex numbers. \nThe function should work for both real and complex numbers.\
    \ \nThe function should work for both real and complex numbers. \nThe function\
    \ should work for both real and complex numbers. \nThe function should work for\
    \ both real and complex numbers. \nThe function should work for both real and\
    \ complex numbers. \nThe function should work for both real and complex numbers.\
    \ \nThe function should work for both real and complex numbers. \nThe function\
    \ should work for both real and complex numbers. \nThe function should work for\
    \ both real and complex numbers. \nThe function should work for both real and\
    \ complex numbers. \nThe function should work for both real and complex numbers.\
    \ \nThe function should work for both real and complex numbers. \nThe function\
    \ should work for both real and complex numbers. \nThe function should work for\
    \ both real and complex numbers. \nThe function should work for both real and\
    \ complex numbers. \nThe function should work for both real and complex numbers.\
    \ \nThe function should work for both real and complex numbers. \nThe function\
    \ should work for both real and complex numbers. \nThe function should work for\
    \ both real and complex numbers. \nThe function should work for both real and\
    \ complex numbers. \nThe function should work for both real and complex numbers.\
    \ \nThe function should work for both real and complex numbers. \nThe function\
    \ should work for both real and complex numbers. \nThe function should work for\
    \ \nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88])\
    \ == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp23qvdy6w.jl:12\nin expression starting at\
    \ /tmp/tmp23qvdy6w.jl:12\n"
  stdout: ''
  timestamp: 1659749284
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> mod(x,2)==0, lst)]\n    evens = evens[2:end]\n\
    \    evens = sum(evens)\n    return evens\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpua8umize.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmpua8umize.jl:18\n  Expression: candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n   Evaluated: 130 == 122\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpua8umize.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpua8umize.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpua8umize.jl:19\n  Expression: candidate([4, 0, 6, 7]) == 0\n\
    \   Evaluated: 6 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpua8umize.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpua8umize.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpua8umize.jl:20\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 18 == 12\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpua8umize.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpua8umize.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659749285
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = \nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoze4twnj.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoze4twnj.jl:1\n\
    in expression starting at /tmp/tmpoze4twnj.jl:1\n"
  stdout: ''
  timestamp: 1659749284
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x ->\
    \ x % 2 != 0, lst)]\n    return sum(even) + sum(odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    add(lst)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of elements in the list that are less than the given value.\nusing Test\n\n\
    @testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpav1we_9q.jl:11\nin expression starting at\
    \ /tmp/tmpav1we_9q.jl:11\n"
  stdout: ''
  timestamp: 1659749284
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[2::2]\n    even.+=(odd.+0)\n    return\
    \ even\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpf8mdija1.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpf8mdija1.jl:17\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  TypeError: in typeassert, expected\
    \ Type, got a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpf8mdija1.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf8mdija1.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf8mdija1.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpf8mdija1.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  TypeError: in typeassert, expected\
    \ Type, got a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpf8mdija1.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf8mdija1.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf8mdija1.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpf8mdija1.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([4, 0, 6, 7]) == 0\n  TypeError: in typeassert, expected Type, got\
    \ a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmpf8mdija1.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf8mdija1.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf8mdija1.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpf8mdija1.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([4, 4, 6, 8]) == 12\n  TypeError: in typeassert, expected Type, got\
    \ a value of type Int64\n  Stacktrace:\n   [1"
  timestamp: 1659749286
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[2::2]\n    even.+=(odd)\n    return even\n\
    end\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbypvgxn3.jl:12\nin expression starting at\
    \ /tmp/tmpbypvgxn3.jl:12\n"
  stdout: ''
  timestamp: 1659749284
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[findall(x\
    \ -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4xv6c5_p.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4xv6c5_p.jl:1\n\
    in expression starting at /tmp/tmp4xv6c5_p.jl:1\n"
  stdout: ''
  timestamp: 1659749284
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x ->\
    \ x % 2 != 0, lst)]\n    even.+(odd.-even)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add([1]) == 3\n@assert add([1,2,3]) == 6\n@assert add([1,3,5,7,9]) ==\
    \ 10\n@assert add([1,3,5,7,9,11]) == 13\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns the number of elements in a list that are less than a\
    \ given value.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqyktzztd.jl:11\nin expression starting at\
    \ /tmp/tmpqyktzztd.jl:11\n"
  stdout: ''
  timestamp: 1659749284
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = \nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoze4twnj.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoze4twnj.jl:1\n\
    in expression starting at /tmp/tmpoze4twnj.jl:1\n"
  stdout: ''
  timestamp: 1659749284
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n  \
    \  evens = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n    evens\
    \ = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n    evens =\
    \ evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> x != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x ->\
    \ x != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x\
    \ != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x !=\
    \ 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x != 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n  \
    \  evens = evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n    evens =\
    \ evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n  \
    \  evens = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n    evens\
    \ = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n    evens =\
    \ evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> x != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x ->\
    \ x != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x\
    \ != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x !=\
    \ 0, evens)]\n    evens = evens[2:end]\n    evens = evens[\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpokmq3vz2.jl:1\nin expression starting at /tmp/tmpokmq3vz2.jl:1\n"
  stdout: ''
  timestamp: 1659749284
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[1::2]\n    even.+=(odd.-even)\n    return\
    \ even\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpsndbm6dj.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpsndbm6dj.jl:17\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  TypeError: in typeassert, expected\
    \ Type, got a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpsndbm6dj.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsndbm6dj.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsndbm6dj.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpsndbm6dj.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  TypeError: in typeassert, expected\
    \ Type, got a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpsndbm6dj.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsndbm6dj.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsndbm6dj.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpsndbm6dj.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([4, 0, 6, 7]) == 0\n  TypeError: in typeassert, expected Type, got\
    \ a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmpsndbm6dj.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsndbm6dj.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsndbm6dj.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpsndbm6dj.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([4, 4, 6, 8]) == 12\n  TypeError: in typeassert, expected Type, got\
    \ a value of type Int64\n  Stacktrace:\n   [1"
  timestamp: 1659749286
- exit_code: -1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1 : (end-1)]\n    odd = lst[(end-2):end]\n    even.+=(odd.+0)\n\
    \    return even\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpznvwnawa.jl:17\n  Test threw
    exception\n  Expression: candidate([4, 88]) == 88\n  BoundsError: attempt to access
    2-element Vector{Int64} at index [0:2]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},
    I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n     @
    ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867 [inlined]\n   [4]
    add(lst::Vector{Int64})\n     @ Main /tmp/tmpznvwnawa.jl:8\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [6]
    macro expansion\n     @ /tmp/tmpznvwnawa.jl:17 [inlined]\n   [7] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [8]
    top-level scope\n     @ /tmp/tmpznvwnawa.jl:16\ntest set: Error During Test at
    /tmp/tmpznvwnawa.jl:18\n  Test threw exception\n  Expression: candidate([4, 5,
    6, 7, 2, 122]) == 122\n  DimensionMismatch("array could not be broadcast to match
    destination")\n  Stacktrace:\n    [1] check_broadcast_shape\n      @ ./broadcast.jl:540
    [inlined]\n    [2] check_broadcast_axes\n      @ ./broadcast.jl:543 [inlined]\n    [3]
    check_broadcast_axes\n      @ ./broadcast.jl:547 [inlined]\n    [4] instantiate\n      @
    ./broadcast.jl:284 [inlined]\n    [5] materialize!\n      @ ./broadcast.jl:871
    [inlined]\n    [6] materialize!\n      @ ./broadcast.jl:868 [inlined]\n    [7]
    add(lst::Vector{Int64})\n      @ Main /tmp/tmpznvwnawa.jl:9\n    [8] macro expansion\n      @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n    [9]
    macro expansion\n      @ /tmp/tmpznvwnawa.jl:18 [inlined]\n   [10] macro expansion\n      @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [11]
    top-level scope\n      @ /tmp/tmpznvwnawa.jl:16\ntest set: Error During Test at
    /tmp/tmpznvwnawa.jl:19\n  Test threw exception\n  Expression: candidate([4, 0,
    6, 7]) == 0\n  MethodError: Cannot `convert` an object of '
  timestamp: 1659749288
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> mod(x,2)==0, lst)]\n    evens = evens[2:end]\n\
    \    return sum(evens)\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmprm9pp4ww.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmprm9pp4ww.jl:17\n  Expression: candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n   Evaluated: 130 == 122\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprm9pp4ww.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprm9pp4ww.jl:15\ntest set: Test\
    \ Failed at /tmp/tmprm9pp4ww.jl:18\n  Expression: candidate([4, 0, 6, 7]) == 0\n\
    \   Evaluated: 6 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprm9pp4ww.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprm9pp4ww.jl:15\ntest set: Test\
    \ Failed at /tmp/tmprm9pp4ww.jl:19\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 18 == 12\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprm9pp4ww.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprm9pp4ww.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659749286
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122])\
    \ == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6,\
    \ 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp18ik9wzu.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp18ik9wzu.jl:1\n\
    in expression starting at /tmp/tmp18ik9wzu.jl:1\n"
  stdout: ''
  timestamp: 1659749285
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x ->\
    \ x % 2 != 0, lst)]\n    even.+=(odd.+0)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd(lst)\n</cell>\n<text>\nExercise\nWrite a function that\
    \ returns the sum of the even numbers in a given list. \nWrite a function that\
    \ returns the sum of the odd numbers in a given list. \nWrite a function that\
    \ returns the sum of the even numbers in a given list and the sum of the odd numbers\
    \ in a given list. \nWrite a function that returns the sum of the even numbers\
    \ in a given list and the sum of the odd numbers in a given list and the sum of\
    \ the even numbers in a given list. \nWrite a function that returns the sum of\
    \ the even numbers in a given list and the sum of the odd numbers in a given list\
    \ and the sum of the even numbers in a given list and the sum of the odd numbers\
    \ in a given list. \nWrite a function that returns the sum of the even numbers\
    \ in a given list and the sum of the odd numbers in a given list and the sum of\
    \ the even numbers in a given list and the sum of the odd numbers in a given list\
    \ and the sum of the even numbers in a given list and the sum of the odd numbers\
    \ in a given list. \nWrite a function that returns the sum of the even numbers\
    \ in a given list and the sum of the odd numbers in a given list and the sum of\
    \ the even numbers in a given list and the sum of the odd numbers in a given list\
    \ and the sum of the even numbers in a given list and the sum of the odd numbers\
    \ in a given list and the sum of the even numbers in a given list and the sum\
    \ of the odd numbers in a given list and the sum of the even numbers in a given\
    \ list and the sum of the odd numbers in a given list and the sum of the even\
    \ numbers in a given list and the sum of the odd numbers in a given list and the\
    \ sum of the even numbers in a given list and the sum of the odd numbers in a\
    \ given list and the sum of the even numbers in a given list and the sum of the\
    \ odd numbers in a given list and the sum of the even numbers in a given list\
    \ and the sum of the odd numbers in a given list and the sum of the even numbers\
    \ in a given list and the sum of the odd numbers in a given list and the sum of\
    \ the even numbers in a given list and the sum of the odd numbers in a given list\
    \ and the sum of the even numbers in a given list and the sum of the odd numbers\
    \ in a given list and the sum of the even numbers in a given list and the sum\
    \ of the odd numbers in a given list and the sum of the even numbers in a given\
    \ list and the sum of the odd numbers in a given list and the sum of the even\
    \ numbers in a given list and the sum of the odd numbers in a given list and the\
    \ sum of the even numbers in a given list and the sum of the odd numbers in a\
    \ given list and the sum of the even numbers in a given list and the sum of the\
    \ odd numbers in a given list and the sum\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp90nfdt2b.jl:12\nin expression starting at\
    \ /tmp/tmp90nfdt2b.jl:12\n"
  stdout: ''
  timestamp: 1659749284
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122])\
    \ == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6,\
    \ 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp18ik9wzu.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp18ik9wzu.jl:1\n\
    in expression starting at /tmp/tmp18ik9wzu.jl:1\n"
  stdout: ''
  timestamp: 1659749285
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[1::2]\n    even.+ + odd.+\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert add([1]) == 1;\n@assert add([1,2]) == 3;\n\
    @assert add([1,2,3]) == 5;\n@assert add([1,2,3,4]) == 7;\n@assert add([1,2,3,4,5])\
    \ == 10;\n@assert add([1,2,3,4,5,6]) == 13;\n@assert add([1,2,3,4,5,6,7]) == 16;\n\
    @assert add([1,2,3,4,5,6,7,8]) == 19;\n@assert add([1,2,3,4,5,6,7,8,9]) == 22;\n\
    @assert add([1,2,3,4,5,6,7,8,9,10]) == 25;\n@assert add([1,2,3,4,5,6,7,8,9,10,11])\
    \ == 28;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12]) == 32;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13])\
    \ == 35;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14]) == 38;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\
    \ == 41;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == 44;\n@assert\
    \ add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) == 47;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\
    \ == 50;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) == 53;\n\
    @assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 56;\n@assert\
    \ add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) == 59;\n@assert\
    \ add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]) == 62;\n@assert\
    \ add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]) == 65;\n\
    @assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\
    \ == 68;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpx5zjp4bu.jl:10\nin expression starting at /tmp/tmpx5zjp4bu.jl:10\n"
  stdout: ''
  timestamp: 1659749286
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122])\
    \ == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6,\
    \ 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp18ik9wzu.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp18ik9wzu.jl:1\n\
    in expression starting at /tmp/tmp18ik9wzu.jl:1\n"
  stdout: ''
  timestamp: 1659749285
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = \nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoze4twnj.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoze4twnj.jl:1\n\
    in expression starting at /tmp/tmpoze4twnj.jl:1\n"
  stdout: ''
  timestamp: 1659749284
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> mod(x,2)==0, lst)]\n    evens = evens[2:end]\n\
    \    return sum(evens)\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmprm9pp4ww.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmprm9pp4ww.jl:17\n  Expression: candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n   Evaluated: 130 == 122\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprm9pp4ww.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprm9pp4ww.jl:15\ntest set: Test\
    \ Failed at /tmp/tmprm9pp4ww.jl:18\n  Expression: candidate([4, 0, 6, 7]) == 0\n\
    \   Evaluated: 6 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprm9pp4ww.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprm9pp4ww.jl:15\ntest set: Test\
    \ Failed at /tmp/tmprm9pp4ww.jl:19\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 18 == 12\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprm9pp4ww.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprm9pp4ww.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659749286
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[2::2]\n    even.+=(odd.+0)\n    return\
    \ even\nend\n</cell>\n<code language=julia-1.3>\nadd(vec(1:10))\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns the sum\
    \ of the even elements in the vector.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc13e4enf.jl:12\nin expression starting at\
    \ /tmp/tmpc13e4enf.jl:12\n"
  stdout: ''
  timestamp: 1659749286
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = map(x -> x + 1, evens)\n    return sum(evens)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmplzpdorne.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmplzpdorne.jl:17\n  Expression: candidate([4,\
    \ 88]) == 88\n   Evaluated: 89 == 88\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmplzpdorne.jl:17 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplzpdorne.jl:16\ntest set: Test\
    \ Failed at /tmp/tmplzpdorne.jl:18\n  Expression: candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n   Evaluated: 133 == 122\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplzpdorne.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplzpdorne.jl:16\ntest set: Test\
    \ Failed at /tmp/tmplzpdorne.jl:19\n  Expression: candidate([4, 0, 6, 7]) == 0\n\
    \   Evaluated: 8 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplzpdorne.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplzpdorne.jl:16\ntest set: Test\
    \ Failed at /tmp/tmplzpdorne.jl:20\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 21 == 12\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplzpdorne.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplzpdorne.jl:16\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659749287
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[1::2]\n    even.+ + odd.+\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert add(1:5) == 6\n</cell>\n<code language=julia-1.5>\n\
    @assert add(1:10) == 15\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the squares of the even numbers in a given list.\nusing Test\n\n\
    @testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkvvu8cpj.jl:10\nin expression starting at /tmp/tmpkvvu8cpj.jl:10\n"
  stdout: ''
  timestamp: 1659749286
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[1::2]\n    even.+=(odd.+0)\n    return\
    \ even\nend\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp96czrui9.jl:12\nin expression starting at\
    \ /tmp/tmp96czrui9.jl:12\n"
  stdout: ''
  timestamp: 1659749286
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[1 :end] \n    odds = lst[2 :end] \n    evens + odds\nend\n\
    </cell>\n<code language=julia-1.0>\n@assert add([1]) == 1;\n@assert add([2]) ==\
    \ 2;\n@assert add([3]) == 3;\n@assert add([4]) == 4;\n@assert add([5]) == 5;\n\
    @assert add([6]) == 6;\n@assert add([7]) == 7;\n@assert add([8]) == 8;\n@assert\
    \ add([9]) == 9;\n@assert add([10]) == 10;\n@assert add([11]) == 11;\n@assert\
    \ add([12]) == 12;\n@assert add([13]) == 13;\n@assert add([14]) == 14;\n@assert\
    \ add([15]) == 15;\n@assert add([16]) == 16;\n@assert add([17]) == 17;\n@assert\
    \ add([18]) == 18;\n@assert add([19]) == 19;\n@assert add([20]) == 20;\n@assert\
    \ add([21]) == 21;\n@assert add([22]) == 22;\n@assert add([23]) == 23;\n@assert\
    \ add([24]) == 24;\n@assert add([25]) == 25;\n@assert add([26]) == 26;\n@assert\
    \ add([27]) == 27;\n@assert add([28]) == 28;\n@assert add([29]) == 29;\n@assert\
    \ add([30]) == 30;\n@assert add([31]) == 31;\n@assert add([32]) == 32;\n@assert\
    \ add([33]) == 33;\n@assert add([34]) == 34;\n@assert add([35]) == 35;\n@assert\
    \ add([36]) == 36;\n@assert add([37]) == 37;\n@assert add([38]) == 38;\n@assert\
    \ add([39]) == 39;\n@assert add([40]) == 40;\n@assert add([41]) == 41;\n@assert\
    \ add([42]) == 42;\n@assert add([43]) == 43;\n@assert add([44]) == 44;\n@assert\
    \ add([45]) == 45;\n@assert add([46]) == 46;\n@assert add([47]) == 47;\n@assert\
    \ add([48]) == 48;\n@assert add([49]) == 49;\n@assert add([50]) == 50;\n@assert\
    \ add([51]) == 5\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1odsdmuy.jl:11\nin expression starting at\
    \ /tmp/tmp1odsdmuy.jl:11\n"
  stdout: ''
  timestamp: 1659749286
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[1::2]\n    even.+=(odd.+=0)\n    return\
    \ even\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpvm42e0cy.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpvm42e0cy.jl:17\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  TypeError: in typeassert, expected\
    \ Type, got a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpvm42e0cy.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvm42e0cy.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvm42e0cy.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpvm42e0cy.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  TypeError: in typeassert, expected\
    \ Type, got a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpvm42e0cy.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvm42e0cy.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvm42e0cy.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpvm42e0cy.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([4, 0, 6, 7]) == 0\n  TypeError: in typeassert, expected Type, got\
    \ a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmpvm42e0cy.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvm42e0cy.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvm42e0cy.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpvm42e0cy.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([4, 4, 6, 8]) == 12\n  TypeError: in typeassert, expected Type, got\
    \ a value of type Int64\n  Stacktrace:\n   [1"
  timestamp: 1659749288
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[2::2]\n    even.+=(odd.+0)\n    return\
    \ even\nend\n</cell>\n<code language=julia-1.5>\n@assert add(1:10) == [2,4,6,8,10,12,14,16,18,20]\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector v and returns\
    \ the sum of the squares of the elements in the vector.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr3kl04xf.jl:12\nin expression starting at\
    \ /tmp/tmpr3kl04xf.jl:12\n"
  stdout: ''
  timestamp: 1659749286
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[2::2]\n    even.+=(odd.+0)\n    return\
    \ even\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpf8mdija1.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpf8mdija1.jl:17\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  TypeError: in typeassert, expected\
    \ Type, got a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpf8mdija1.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf8mdija1.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf8mdija1.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpf8mdija1.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  TypeError: in typeassert, expected\
    \ Type, got a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpf8mdija1.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf8mdija1.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf8mdija1.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpf8mdija1.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([4, 0, 6, 7]) == 0\n  TypeError: in typeassert, expected Type, got\
    \ a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmpf8mdija1.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf8mdija1.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf8mdija1.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpf8mdija1.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([4, 4, 6, 8]) == 12\n  TypeError: in typeassert, expected Type, got\
    \ a value of type Int64\n  Stacktrace:\n   [1"
  timestamp: 1659749286
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[1 : (end-1)]\n    odds = lst[2 : end]\n    evens + odds\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88])\
    \ == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpjpioiuf8.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpjpioiuf8.jl:16\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmpjpioiuf8.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjpioiuf8.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjpioiuf8.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpjpioiuf8.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmpjpioiuf8.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjpioiuf8.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n"
  timestamp: 1659749289
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[2::2]\n    even.+=(odd.+0)\n    return\
    \ even\nend\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqlajhb9i.jl:12\nin expression starting at\
    \ /tmp/tmpqlajhb9i.jl:12\n"
  stdout: ''
  timestamp: 1659749284
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> mod(x,2)==0, lst)]\n    evens = evens[findall(x\
    \ -> mod(x,2)==1, lst)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> mod(x,2)==0, lst)]\n    evens = evens[findall(x -> mod(x,2)==1, lst)]\n \
    \   evens = evens[2:end]\n    evens = evens[findall(x -> mod(x,2)==0, lst)]\n\
    \    evens = evens[findall(x -> mod(x,2)==1, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> mod(x,2)==0, lst)]\n    evens = evens[findall(x\
    \ -> mod(x,2)==1, lst)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> mod(x,2)==0, lst)]\n    evens = evens[findall(x -> mod(x,2)==1, lst)]\n \
    \   evens = evens[2:end]\n    evens = evens[findall(x -> mod(x,2)==0, lst)]\n\
    \    evens = evens[findall(x -> mod(x,2)==1, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> mod(x,2)==0, lst)]\n    evens = evens[findall(x\
    \ -> mod(x,2)==1, lst)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> mod(x,2)==0, lst)]\n    evens = evens[findall(x -> mod(x,2)==1, lst)]\n \
    \   evens = evens[2:end]\n    evens = evens[findall(x -> mod(x,2)==0, lst)]\n\
    \    evens = evens[findall(x -> mod(x,2)==1, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> mod(x,2)==0, lst)]\n    evens = evens[findall(x\
    \ -> mod(x,2)==1, lst)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> mod(x,2)==0, lst)]\n    evens = evens[findall(x -> mod(x,2)==1, lst)]\n \
    \   evens = evens[2:end]\n    evens = evens[findall(x -> mod(x,2)==0, lst)]\n\
    \    evens = evens[findall(x -> mod(x,2)==1, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> mod(x,2)==0, lst)]\n    evens = evens[findall(x\
    \ -> mod(x,2)==1, lst)]\n\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t\
    @test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\
    \t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwuevzp89.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwuevzp89.jl:1\n\
    in expression starting at /tmp/tmpwuevzp89.jl:1\n"
  stdout: ''
  timestamp: 1659749286
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[2::2]\n    even.+=(odd)\n    return even\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert add(Vector{Int64}([1,2,3,4,5,6,7,8,9,10]))\
    \ == Vector{Int64}([2,4,6,8,10])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the sum of the numbers in a vector. \nThe function should work\
    \ for both real and complex numbers.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmgek41w6.jl:12\nin expression starting at\
    \ /tmp/tmpmgek41w6.jl:12\n"
  stdout: ''
  timestamp: 1659749286
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[2::2]\n    even.+=(odd.+0)\n    return\
    \ even\nend\n\"\"\"\n\"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmph4g2hd91.jl:255

    '
  stdout: "test set: Error During Test at /tmp/tmph4g2hd91.jl:258\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  TypeError: in typeassert, expected\
    \ Type, got a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmph4g2hd91.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph4g2hd91.jl:258 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph4g2hd91.jl:257\ntest set:\
    \ Error During Test at /tmp/tmph4g2hd91.jl:259\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  TypeError: in typeassert, expected\
    \ Type, got a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmph4g2hd91.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph4g2hd91.jl:259 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph4g2hd91.jl:257\ntest set:\
    \ Error During Test at /tmp/tmph4g2hd91.jl:260\n  Test threw exception\n  Expression:\
    \ candidate([4, 0, 6, 7]) == 0\n  TypeError: in typeassert, expected Type, got\
    \ a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmph4g2hd91.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph4g2hd91.jl:260 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph4g2hd91.jl:257\ntest set:\
    \ Error During Test at /tmp/tmph4g2hd91.jl:261\n  Test threw exception\n  Expression:\
    \ candidate([4, 4, 6, 8]) == 12\n  TypeError: in typeassert, expected Type, got\
    \ a value of type Int64\n  Stacktr"
  timestamp: 1659749288
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122])\
    \ == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6,\
    \ 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp18ik9wzu.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp18ik9wzu.jl:1\n\
    in expression starting at /tmp/tmp18ik9wzu.jl:1\n"
  stdout: ''
  timestamp: 1659749285
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x ->\
    \ x % 2 != 0, lst)]\n    even.+=(odd.+0)\n    return even\nend\n\"\"\"\n\"\"\"\
    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpq7ax7gmy.jl:248

    '
  stdout: "test set: Error During Test at /tmp/tmpq7ax7gmy.jl:251\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  DimensionMismatch(\"array could not\
    \ be broadcast to match destination\")\n  Stacktrace:\n    [1] check_broadcast_shape\n\
    \      @ ./broadcast.jl:540 [inlined]\n    [2] check_broadcast_axes\n      @ ./broadcast.jl:543\
    \ [inlined]\n    [3] check_broadcast_axes\n      @ ./broadcast.jl:547 [inlined]\n\
    \    [4] instantiate\n      @ ./broadcast.jl:284 [inlined]\n    [5] materialize!\n\
    \      @ ./broadcast.jl:871 [inlined]\n    [6] materialize!\n      @ ./broadcast.jl:868\
    \ [inlined]\n    [7] add(lst::Vector{Int64})\n      @ Main /tmp/tmpq7ax7gmy.jl:9\n\
    \    [8] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmpq7ax7gmy.jl:251 [inlined]\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpq7ax7gmy.jl:250\ntest set:\
    \ Error During Test at /tmp/tmpq7ax7gmy.jl:252\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  DimensionMismatch(\"array could not\
    \ be broadcast to match destination\")\n  Stacktrace:\n    [1] check_broadcast_shape\n\
    \      @ ./broadcast.jl:540 [inlined]\n    [2] check_broadcast_axes\n      @ ./broadcast.jl:543\
    \ [inlined]\n    [3] check_broadcast_axes\n      @ ./broadcast.jl:547 [inlined]\n\
    \    [4] instantiate\n      @ ./broadcast.jl:284 [inlined]\n    [5] materialize!\n\
    \      @ ./broadcast.jl:871 [inlined]\n    [6] materialize!\n      @ ./broadcast.jl:868\
    \ [inlined]\n    [7] add(lst::Vector{Int64})\n      @ Main /tmp/tmpq7ax7gmy.jl:9\n\
    \    [8] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmpq7ax7gmy.jl:252 [inlined]\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpq7ax7gmy.jl:250\ntest set:\
    \ Error During Test at /tmp/tmpq7a"
  timestamp: 1659749289
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x ->\
    \ x % 2 != 0, lst)]\n    even = even[findall(x -> x % 2 != 0, even)]\n    odd\
    \ = odd[findall(x -> x % 2 == 0, even)]\n    even = even[findall(x -> x % 2 ==\
    \ 0, odd)]\n    odd = odd[findall(x -> x % 2 != 0, even)]\n    even = even[findall(x\
    \ -> x % 2 != 0, odd)]\n    odd = odd[findall(x -> x % 2 == 0, odd)]\n    even\
    \ = even[findall(x -> x % 2 != 0, even)]\n    odd = odd[findall(x -> x % 2 !=\
    \ 0, odd)]\n    even = even[findall(x -> x % 2 == 0, even)]\n    odd = odd[findall(x\
    \ -> x % 2 == 0, even)]\n    even = even[findall(x -> x % 2 != 0, even)]\n   \
    \ odd = odd[findall(x -> x % 2 != 0, odd)]\n    even = even[findall(x -> x % 2\
    \ == 0, even)]\n    odd = odd[findall(x -> x % 2 == 0, odd)]\n    even = even[findall(x\
    \ -> x % 2 != 0, even)]\n    odd = odd[findall(x -> x % 2 != 0, odd)]\n    even\
    \ = even[findall(x -> x % 2 == 0, even)]\n    odd = odd[findall(x -> x % 2 ==\
    \ 0, odd)]\n    even = even[findall(x -> x % 2 != 0, even)]\n    odd = odd[findall(x\
    \ -> x % 2 != 0, odd)]\n    even = even[findall(x -> x % 2 == 0, even)]\n    odd\
    \ = odd[findall(x -> x % 2 == 0, odd)]\n    even = even[findall(x -> x % 2 !=\
    \ 0, even)]\n    odd = odd[findall(x -> x % 2 != 0, odd)]\n    even = even[findall(x\
    \ -> x % 2 == 0, even)]\n    odd = odd[findall(x -> x % 2 == 0, odd)]\n    even\
    \ = even[findall(x -> x % 2 != 0, even)]\n    odd = odd[findall(x -> x % 2 !=\
    \ 0, odd)]\n    even = even[findall(x -> x % 2 == 0, even)]\n    odd = odd[findall(x\
    \ -> x % 2 == 0, odd)]\n    even = \nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpa7pp28wy.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpa7pp28wy.jl:1\n\
    in expression starting at /tmp/tmpa7pp28wy.jl:1\n"
  stdout: ''
  timestamp: 1659749286
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[1::2]\n    even = even(:);\n    odd =\
    \ odd(:);\n    even = union(even, odd);\n    even = union(even, lst[end-1:end]);\n\
    \    return length(even)\nend\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp36k6piqa.jl:15\nin expression starting at\
    \ /tmp/tmp36k6piqa.jl:15\n"
  stdout: ''
  timestamp: 1659749286
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = sum(evens)\n    return evens\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpl783rx90.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmpl783rx90.jl:18\n  Expression: candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n   Evaluated: 130 == 122\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl783rx90.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl783rx90.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpl783rx90.jl:19\n  Expression: candidate([4, 0, 6, 7]) == 0\n\
    \   Evaluated: 6 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl783rx90.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl783rx90.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpl783rx90.jl:20\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 18 == 12\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl783rx90.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl783rx90.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659749288
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbizkfu3z.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbizkfu3z.jl:1\n\
    in expression starting at /tmp/tmpbizkfu3z.jl:1\n"
  stdout: ''
  timestamp: 1659749284
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[2::2]\n    even.+=(odd.+0)\n    return\
    \ even\nend\n</cell>\n<code language=julia-1.5>\n@assert add(1:10) == [2,4,6,8,10,12,14,16,18,20]\n\
    </cell>\n<text>\nExercise 2\nWrite a function called evens that takes a vector\
    \ and returns the even indices. For example, evens([1,2,3,4,5,6,7,8,9,10]) should\
    \ return [2,4,6,8].\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfid8xp0l.jl:12\nin expression starting at\
    \ /tmp/tmpfid8xp0l.jl:12\n"
  stdout: ''
  timestamp: 1659749287
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> mod(x,2)==0, lst)]\n    evens = evens[findall(x\
    \ -> mod(x,2)==1, lst)]\n    evens = evens[findall(x -> mod(x,2)==0, lst)]\n \
    \   evens = evens[findall(x -> mod(x,2)==1, lst)]\n    evens = evens[findall(x\
    \ -> mod(x,2)==0, lst)]\n    evens = evens[findall(x -> mod(x,2)==1, lst)]\n \
    \   evens = evens[findall(x -> mod(x,2)==0, lst)]\n    evens = evens[findall(x\
    \ -> mod(x,2)==1, lst)]\n    evens = evens[findall(x -> mod(x,2)==0, lst)]\n \
    \   evens = evens[findall(x -> mod(x,2)==1, lst)]\n    evens = evens[findall(x\
    \ -> mod(x,2)==0, lst)]\n    evens = evens[findall(x -> mod(x,2)==1, lst)]\n \
    \   evens = evens[findall(x -> mod(x,2)==0, lst)]\n    evens = evens[findall(x\
    \ -> mod(x,2)==1, lst)]\n    evens = evens[findall(x -> mod(x,2)==0, lst)]\n \
    \   evens = evens[findall(x -> mod(x,2)==1, lst)]\n    evens = evens[findall(x\
    \ -> mod(x,2)==0, lst)]\n    evens = evens[findall(x -> mod(x,2)==1, lst)]\n \
    \   evens = evens[findall(x -> mod(x,2)==0, lst)]\n    evens = evens[findall(x\
    \ -> mod(x,2)==1, lst)]\n    evens = evens[findall(x -> mod(x,2)==0, lst)]\n \
    \   evens = evens[findall(x -> mod(x,2)==1, lst)]\n    evens = evens[findall(x\
    \ -> mod(x,2)==0, lst)]\n    evens = evens[findall(x -> mod(x,2)==1, lst)]\n \
    \   evens = evens[findall(x -> mod(x,2)==0, lst)]\n    evens = evens[findall(x\
    \ -> mod(x,2)==1, lst)]\n    evens = evens[findall(x -> mod(x,2)==0, lst)]\n \
    \   evens = evens[findall(x -> mod(x,2)==1, lst)]\n    evens = evens[findall(x\
    \ -> mod(x,2)==0, lst)]\n    evens = evens[findall(x -> mod(x,2)==1, lst)]\n \
    \   evens = evens[findall(x -> mod(x,2)==0, lst)]\n    evens = evens[findall(x\
    \ -> mod(x,2)==1, lst)]\n\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t\
    @test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\
    \t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpduzz8_u7.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpduzz8_u7.jl:1\n\
    in expression starting at /tmp/tmpduzz8_u7.jl:1\n"
  stdout: ''
  timestamp: 1659749287
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1 : (end-1)]\n    odd = lst[2 : end]\n    even.+=(odd.*2)\n\
    \    return even\nend\n\"\"\"\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1200i803.jl:12\nin expression starting at\
    \ /tmp/tmp1200i803.jl:12\n"
  stdout: ''
  timestamp: 1659749288
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1 : (end-1)]\n    odd = lst[2 : end]\n    even.+=(odd.*2)\n\
    \    return even\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpt7s829yg.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpt7s829yg.jl:17\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmpt7s829yg.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt7s829yg.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt7s829yg.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpt7s829yg.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmpt7s829yg.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt7s829yg.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scop"
  timestamp: 1659749291
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1 : (end-1)]\n    odd = lst[2 : end]\n    even.+=(odd.*2)\n\
    \    return even\nend\n\"\"\"\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(lst)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum\
    \ of the even numbers in a given list. \nWrite a function that returns the sum\
    \ of the odd numbers in a given list. \nWrite a function that returns the product\
    \ of the even numbers in a given list. \nWrite a function that returns the product\
    \ of the odd numbers in a given list. \nWrite a function that returns the maximum\
    \ of the even numbers in a given list. \nWrite a function that returns the maximum\
    \ of the odd numbers in a given list. \nWrite a function that returns the minimum\
    \ of the even numbers in a given list. \nWrite a function that returns the minimum\
    \ of the odd numbers in a given list. \nWrite a function that returns the product\
    \ of the even numbers in a given list multiplied by the sum of the odd numbers\
    \ in a given list. \nWrite a function that returns the product of the odd numbers\
    \ in a given list multiplied by the sum of the even numbers in a given list. \n\
    Write a function that returns the product of the even numbers in a given list\
    \ multiplied by the product of the odd numbers in a given list. \nWrite a function\
    \ that returns the product of the odd numbers in a given list multiplied by the\
    \ product of the even numbers in a given list. \nWrite a function that returns\
    \ the product of the even numbers in a given list divided by the sum of the odd\
    \ numbers in a given list. \nWrite a function that returns the product of the\
    \ odd numbers in a given list divided by the sum of the even numbers in a given\
    \ list. \nWrite a function that returns the product of the even numbers in a given\
    \ list divided by the product of the odd numbers in a given list. \nWrite a function\
    \ that returns the product of the odd numbers in a given list divided by the product\
    \ of the even numbers in a given list. \nWrite a function that returns the sum\
    \ of the even numbers in a given list divided by the sum of the odd numbers in\
    \ a given list. \nWrite a function that returns the sum of the odd numbers in\
    \ a given list divided by the sum of the even numbers in a given list. \nWrite\
    \ a function that returns the sum of the even numbers in a given list divided\
    \ by the product of the odd numbers in a given list. \nWrite a function that returns\
    \ the sum of the odd numbers in a given list divided by the product of the even\
    \ numbers in a given list. \nWrite a function that returns the product of the\
    \ even numbers in a given list divided by the sum of the odd numbers in a given\
    \ list. \nWrite a function that returns the product of the odd numbers in a given\
    \ list divided by the sum of the even numbers in a given list. \nWrite a function\
    \ that returns the product of the even numbers in a given list divided by the\
    \ product of the odd numbers in a given list. \nWrite a function that returns\
    \ the product of the odd numbers in a given \nusing Test\n\n@testset begin\n\n\
    candidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfhaho0zj.jl:12\nin expression starting at\
    \ /tmp/tmpfhaho0zj.jl:12\n"
  stdout: ''
  timestamp: 1659749288
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = \nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoze4twnj.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoze4twnj.jl:1\n\
    in expression starting at /tmp/tmpoze4twnj.jl:1\n"
  stdout: ''
  timestamp: 1659749284
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    return sum(evens)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmphfdpf3b9.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmphfdpf3b9.jl:17\n  Expression: candidate([4,\
    \ 88]) == 88\n   Evaluated: 0 == 88\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphfdpf3b9.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphfdpf3b9.jl:16\ntest set: Test\
    \ Failed at /tmp/tmphfdpf3b9.jl:18\n  Expression: candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n   Evaluated: 0 == 122\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphfdpf3b9.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphfdpf3b9.jl:16\ntest set: Test\
    \ Failed at /tmp/tmphfdpf3b9.jl:20\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphfdpf3b9.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphfdpf3b9.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659749289
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1 :end] \n    odd = lst[2 :end] \n    even.+=(odd.*2)\n   \
    \ return even\nend\n</cell>\n<code language=julia-1.3>\n@assert add([1]) == 1;\n\
    @assert add([2]) == 3;\n@assert add([3]) == 5;\n@assert add([4]) == 7;\n@assert\
    \ add([5]) == 9;\n@assert add([6]) == 11;\n@assert add([7]) == 13;\n@assert add([8])\
    \ == 15;\n@assert add([9]) == 17;\n@assert add([10]) == 19;\n@assert add([11])\
    \ == 23;\n@assert add([12]) == 27;\n@assert add([13]) == 31;\n@assert add([14])\
    \ == 35;\n@assert add([15]) == 39;\n@assert add([16]) == 43;\n@assert add([17])\
    \ == 47;\n@assert add([18]) == 51;\n@assert add([19]) == 55;\n@assert add([20])\
    \ == 59;\n@assert add([21]) == 63;\n@assert add([22]) == 67;\n@assert add([23])\
    \ == 71;\n@assert add([24]) == 75;\n@assert add([25]) == 79;\n@assert add([26])\
    \ == 83;\n@assert add([27]) == 87;\n@assert add([28]) == 91;\n@assert add([29])\
    \ == 95;\n@assert add([30]) == 99;\n@assert add([31]) == 103;\n@assert add([32])\
    \ == 107;\n@assert add([33]) == 111;\n@assert add([34]) == 115;\n@assert add([35])\
    \ == 119;\n@assert add([36]) == 123;\n@assert add([37]) == 127;\n@assert add([38])\
    \ == 131;\n@assert add([39]) == 135;\n@assert add([40]) == 139;\n@assert add([41])\
    \ == 143;\n@assert add([42]) == 147;\n@assert add([43]) == 151;\n@assert add([44])\
    \ == 155;\n@assert add([45]) == 159;\n@assert add([46]) == 163;\n@assert add([47])\
    \ == 167;\n@assert add([48]) == 171;\n@assert add([49]) == 175;\n\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa36kw99q.jl:12\nin expression starting at\
    \ /tmp/tmpa36kw99q.jl:12\n"
  stdout: ''
  timestamp: 1659749288
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    return sum(evens)\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpivtp636m.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmpivtp636m.jl:17\n  Expression: candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n   Evaluated: 130 == 122\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpivtp636m.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpivtp636m.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpivtp636m.jl:18\n  Expression: candidate([4, 0, 6, 7]) == 0\n\
    \   Evaluated: 6 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpivtp636m.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpivtp636m.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpivtp636m.jl:19\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 18 == 12\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpivtp636m.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpivtp636m.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659749289
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[1::2]\n    even.+=(odd.+=1)\n    return\
    \ even\nend\n</cell>\n<code language=julia-1.0>\n@assert add([1]) == [2]\n@assert\
    \ add([1,2,3]) == [2,4,6]\n@assert add([1,2,3,4,5]) == [2,4,6,8,10]\n</cell>\n\
    <text>\nExercise 2\nWrite a function called sub that subtracts the even elements\
    \ that are at odd indices.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphaqjfox9.jl:12\nin expression starting at\
    \ /tmp/tmphaqjfox9.jl:12\n"
  stdout: ''
  timestamp: 1659749288
- exit_code: -1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1 : (end-1)]\n    odd = lst[2:end]\n    even.+=(odd.*2)\n \
    \   return even\nend\n\"\"\"\n\"\"\"\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\
    \    add(lst)\n    lst\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: MethodError: Cannot `convert` an object of type Vector{Int64}
    to an object of type Int64\nClosest candidates are:\n  convert(::Type{T}, !Matched::T)
    where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n  convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n  convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n  ...\nStacktrace:\n
    [1] add(lst::Vector{Int64})\n   @ Main /tmp/'''
  stdout: None
  timestamp: 1659749291
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[findall(x\
    \ -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4xv6c5_p.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4xv6c5_p.jl:1\n\
    in expression starting at /tmp/tmp4xv6c5_p.jl:1\n"
  stdout: ''
  timestamp: 1659749284
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[findall(x\
    \ -> x % 2 != 0, evens)]\n    return sum(evens)\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the even numbers in a given list of integers. \nWrite a function\
    \ that returns the sum of the even numbers in a given list of integers. \nWrite\
    \ a function that returns the sum of the even numbers in a given list of integers.\
    \ \nWrite a function that returns the sum of the even numbers in a given list\
    \ of integers. \nWrite a function that returns the sum of the even numbers in\
    \ a given list of integers. \nWrite a function that returns the sum of the even\
    \ numbers in a given list of integers. \nWrite a function that returns the sum\
    \ of the even numbers in a given list of integers. \nWrite a function that returns\
    \ the sum of the even numbers in a given list of integers. \nWrite a function\
    \ that returns the sum of the even numbers in a given list of integers. \nWrite\
    \ a function that returns the sum of the even numbers in a given list of integers.\
    \ \nWrite a function that returns the sum of the even numbers in a given list\
    \ of integers. \nWrite a function that returns the sum of the even numbers in\
    \ a given list of integers. \nWrite a function that returns the sum of the even\
    \ numbers in a given list of integers. \nWrite a function that returns the sum\
    \ of the even numbers in a given list of integers. \nWrite a function that returns\
    \ the sum of the even numbers in a given list of integers. \nWrite a function\
    \ that returns the sum of the even numbers in a given list of integers. \nWrite\
    \ a function that returns the sum of the even numbers in a given list of integers.\
    \ \nWrite a function that returns the sum of the even numbers in a given list\
    \ of integers. \nWrite a function that returns the sum of the even numbers in\
    \ a given list of integers. \nWrite a function that returns the sum of the even\
    \ numbers in a given list of integers. \nWrite a function that returns the sum\
    \ of the even numbers in a given list of integers. \nWrite a function that returns\
    \ the sum of the even numbers in a given list of integers. \nWrite a function\
    \ that returns the sum of the even numbers in a given list of integers. \nWrite\
    \ a function that returns the sum of the even numbers in a given list of integers.\
    \ \nWrite a function that returns the sum of the even numbers in a given list\
    \ of integers. \nWrite a function that returns the sum of the even numbers in\
    \ a given list of integers. \nWrite a function that returns the sum of the even\
    \ numbers in a given list of integers. \nWrite a function that returns the sum\
    \ of the even numbers in a given list of integers. \nWrite a function that returns\
    \ the sum of the even numbers in a given list of integers. \nWrite a function\
    \ that returns the sum of the even numbers in a given list of integers. \nWrite\
    \ a function that returns the sum of the even numbers in a given list of integers.\
    \ \nWrite a function that returns the sum of the even numbers in a given list\
    \ of integer\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp74jqirmg.jl:11\nin expression starting at\
    \ /tmp/tmp74jqirmg.jl:11\n"
  stdout: ''
  timestamp: 1659749288
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[2::2]\n    even.+=(odd.+0)\n    return\
    \ even\nend\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqlajhb9i.jl:12\nin expression starting at\
    \ /tmp/tmpqlajhb9i.jl:12\n"
  stdout: ''
  timestamp: 1659749284
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1 :] \n    odd = lst[2 :]\n    even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpfbwmmwnq.jl:6 expected\
    \ \"end\", got \"Test\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfbwmmwnq.jl:10\n\
    in expression starting at /tmp/tmpfbwmmwnq.jl:10\n"
  stdout: ''
  timestamp: 1659749288
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x ->\
    \ x % 2 != 0, lst)]\n    even.+=(odd.*2)\n    return even\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpyplepvoy.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpyplepvoy.jl:17\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  DimensionMismatch(\"array could not\
    \ be broadcast to match destination\")\n  Stacktrace:\n    [1] check_broadcast_shape\n\
    \      @ ./broadcast.jl:540 [inlined]\n    [2] check_broadcast_axes\n      @ ./broadcast.jl:543\
    \ [inlined]\n    [3] check_broadcast_axes\n      @ ./broadcast.jl:547 [inlined]\n\
    \    [4] instantiate\n      @ ./broadcast.jl:284 [inlined]\n    [5] materialize!\n\
    \      @ ./broadcast.jl:871 [inlined]\n    [6] materialize!\n      @ ./broadcast.jl:868\
    \ [inlined]\n    [7] add(lst::Vector{Int64})\n      @ Main /tmp/tmpyplepvoy.jl:9\n\
    \    [8] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmpyplepvoy.jl:17 [inlined]\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpyplepvoy.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpyplepvoy.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  DimensionMismatch(\"array could not\
    \ be broadcast to match destination\")\n  Stacktrace:\n    [1] check_broadcast_shape\n\
    \      @ ./broadcast.jl:540 [inlined]\n    [2] check_broadcast_axes\n      @ ./broadcast.jl:543\
    \ [inlined]\n    [3] check_broadcast_axes\n      @ ./broadcast.jl:547 [inlined]\n\
    \    [4] instantiate\n      @ ./broadcast.jl:284 [inlined]\n    [5] materialize!\n\
    \      @ ./broadcast.jl:871 [inlined]\n    [6] materialize!\n      @ ./broadcast.jl:868\
    \ [inlined]\n    [7] add(lst::Vector{Int64})\n      @ Main /tmp/tmpyplepvoy.jl:9\n\
    \    [8] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmpyplepvoy.jl:18 [inlined]\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpyplepvoy.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpyplepvoy."
  timestamp: 1659749291
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[2::2]\n    even.+=(odd.+0)\n    return\
    \ even\nend\n\"\"\"\n\"\"\"\n    lst = [1,2,3,4,5,6,7,8,9,10]\n    add(lst)\n\
    \    lst\n    \n    \n    \n\"\"\"\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: TypeError: in typeassert, expected Type, got a value\
    \ of type Int64\nStacktrace:\n [1] add(lst::Vector{Int64})\n   @ Main /tmp/tmpreyv1n_u.jl:7\n\
    \ [2] top-level scope\n   @ /tmp/tmpreyv1n_u.jl:15\nin expression starting at\
    \ /tmp/tmpreyv1n_u.jl:15\n"
  stdout: ''
  timestamp: 1659749289
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x ->\
    \ x % 2 != 0, lst)]\n    even.+=(odd.+0)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert add([1]) == 3\n@assert add([1,2]) == 3\n@assert\
    \ add([1,2,3]) == 6\n@assert add([1,2,3,4]) == 10\n@assert add([1,2,3,4,5]) ==\
    \ 15\n@assert add([1,2,3,4,5,6]) == 21\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the sum of the numbers in the list lst that have even indices.\
    \ \nWrite a function that returns the sum of the numbers in the list lst that\
    \ have odd indices. \nWrite a function that returns the sum of the numbers in\
    \ the list lst that have both even and odd indices.\nWrite a function that returns\
    \ the sum of the numbers in the list lst that have no even or odd indices.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8y_zxi1o.jl:12\nin expression starting at\
    \ /tmp/tmp8y_zxi1o.jl:12\n"
  stdout: ''
  timestamp: 1659749288
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1 :end]\n    odd = lst[2 :end]\n    even.+=(odd.+0)\n    return\
    \ even\nend\n\"\"\"\n\"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpfnxm_hqj.jl:254

    '
  stdout: "test set: Error During Test at /tmp/tmpfnxm_hqj.jl:257\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  MethodError: no method matching typed_hcat(::Vector{Int64},\
    \ ::Int64, ::Symbol)\n  Closest candidates are:\n    typed_hcat(!Matched::Type{T},\
    \ ::Any...) where T at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:1826\n\
    \    typed_hcat(!Matched::Type{T}, !Matched::Number...) where T at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:1532\n\
    \    typed_hcat(!Matched::Type{T}, !Matched::Union{Number, LinearAlgebra.Adjoint{T,\
    \ <:AbstractVector} where T}...) where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/adjtrans.jl:225\n\
    \    ...\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmpfnxm_hqj.jl:7\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfnxm_hqj.jl:257 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfnxm_hqj.jl:256\ntest set:\
    \ Error During Test at /tmp/tmpfnxm_hqj.jl:258\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  MethodError: no method matching typed_hcat(::Vector{Int64},\
    \ ::Int64, ::Symbol)\n  Closest candidates are:\n    typed_hcat(!Matched::Type{T},\
    \ ::Any...) where T at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:1826\n\
    \    typed_hcat(!Matched::Type{T}, !Matched::Number...) where T at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:1532\n\
    \    typed_hcat(!Matched::Type{T}, !Matched::Union{Number, LinearAlgebra.Adjoint{T,\
    \ <:AbstractVector} where T}...) where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/adjtrans.jl:225\n\
    \    ...\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmpfnxm_hqj.jl:7\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion"
  timestamp: 1659749291
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x ->\
    \ x % 2 != 0, lst)]\n    even.+=(odd.-even)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert add([1]) == 2 \n@assert add([1,2]) == 3 \n@assert\
    \ add([1,2,3]) == 5 \n@assert add([1,2,3,4]) == 6\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the sum of the numbers in the list lst that have\
    \ even indices. For example, sum([1,3,5,7,9]) should return 10, and sum([1,3,5,7,9,11])\
    \ should return 17.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyrb5n0hx.jl:12\nin expression starting at\
    \ /tmp/tmpyrb5n0hx.jl:12\n"
  stdout: ''
  timestamp: 1659749289
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x->x%2==0,lst)]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpukm4hx07.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpukm4hx07.jl:1\n\
    in expression starting at /tmp/tmpukm4hx07.jl:1\n"
  stdout: ''
  timestamp: 1659749289
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x ->\
    \ x % 2 != 0, lst)]\n    even = even[findall(x -> x % 2 == 0, even)]\n    odd\
    \ = odd[findall(x -> x % 2 != 0, odd)]\n    even = even[findall(x -> x % 2 !=\
    \ 0, even)]\n    odd = odd[findall(x -> x % 2 == 0, odd)]\n    even = even[findall(x\
    \ -> x % 2 != 0, even)]\n    odd = odd[findall(x -> x % 2 != 0, odd)]\n    even\
    \ = even[findall(x -> x % 2 != 0, even)]\n    odd = odd[findall(x -> x % 2 ==\
    \ 0, odd)]\n    even = even[findall(x -> x % 2 != 0, even)]\n    odd = odd[findall(x\
    \ -> x % 2 != 0, odd)]\n    even = even[findall(x -> x % 2 != 0, even)]\n    odd\
    \ = odd[findall(x -> x % 2 == 0, odd)]\n    even = even[findall(x -> x % 2 !=\
    \ 0, even)]\n    odd = odd[findall(x -> x % 2 != 0, odd)]\n    even = even[findall(x\
    \ -> x % 2 != 0, even)]\n    odd = odd[findall(x -> x % 2 == 0, odd)]\n    even\
    \ = even[findall(x -> x % 2 != 0, even)]\n    odd = odd[findall(x -> x % 2 !=\
    \ 0, odd)]\n    even = even[findall(x -> x % 2 != 0, even)]\n    odd = odd[findall(x\
    \ -> x % 2 == 0, odd)]\n    even = even[findall(x -> x % 2 != 0, even)]\n    odd\
    \ = odd[findall(x -> x % 2 != 0, odd)]\n    even = even[findall(x -> x % 2 !=\
    \ 0, even)]\n    odd = odd[findall(x -> x % 2 == 0, odd)]\n    even = even[findall(x\
    \ -> x % 2 != 0, even)]\n    odd = odd[findall(x -> x % 2 != 0, odd)]\n    even\
    \ = even[findall(x -> x % 2 != 0, even)]\n    odd = odd[findall(x -> x % 2 ==\
    \ 0, odd)]\n    even = even[findall(x -> x % 2 != 0, even)]\n    odd = odd[findall(x\
    \ -> x % 2 \nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpshuofl04.jl:39\nin expression starting at\
    \ /tmp/tmpshuofl04.jl:39\n"
  stdout: ''
  timestamp: 1659749289
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[findall(x\
    \ -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n    return sum(evens)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp169i1gyi.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmp169i1gyi.jl:17\n  Expression: candidate([4,\
    \ 88]) == 88\n   Evaluated: 0 == 88\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp169i1gyi.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp169i1gyi.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp169i1gyi.jl:18\n  Expression: candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n   Evaluated: 0 == 122\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp169i1gyi.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp169i1gyi.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp169i1gyi.jl:20\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp169i1gyi.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp169i1gyi.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659749291
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1 : (end-1)]\n    odd = lst[2:end]\n    even.+=(odd.*2)\n \
    \   return even\nend\n</cell>\n<code language=julia-1.0>\nadd(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector and returns the sum of\
    \ the squares of the elements of the vector.\nusing Test\n\n@testset begin\n\n\
    candidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt5ptapo0.jl:12\nin expression starting at\
    \ /tmp/tmpt5ptapo0.jl:12\n"
  stdout: ''
  timestamp: 1659749289
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x ->\
    \ x % 2 != 0, lst)]\n    even.+ odd.\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpc6gcdoci.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpc6gcdoci.jl:1\n\
    in expression starting at /tmp/tmpc6gcdoci.jl:1\n"
  stdout: ''
  timestamp: 1659749289
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x ->\
    \ x % 2 != 0, lst)]\n    even = even[findall(x -> x % 2 != 0, even)]\n    odd\
    \ = odd[findall(x -> x % 2 == 0, even)]\n    even = even[findall(x -> x % 2 ==\
    \ 0, odd)]\n    odd = odd[findall(x -> x % 2 != 0, odd)]\n    even = even[findall(x\
    \ -> x % 2 != 0, even)]\n    odd = odd[findall(x -> x % 2 == 0, even)]\n    even\
    \ = even[findall(x -> x % 2 == 0, odd)]\n    odd = odd[findall(x -> x % 2 != 0,\
    \ odd)]\n    even = even[findall(x -> x % 2 != 0, even)]\n    odd = odd[findall(x\
    \ -> x % 2 == 0, even)]\n    even = even[findall(x -> x % 2 == 0, odd)]\n    odd\
    \ = odd[findall(x -> x % 2 != 0, odd)]\n    even = even[findall(x -> x % 2 !=\
    \ 0, even)]\n    odd = odd[findall(x -> x % 2 == 0, even)]\n    even = even[findall(x\
    \ -> x % 2 == 0, odd)]\n    odd = odd[findall(x -> x % 2 != 0, odd)]\n    even\
    \ = even[findall(x -> x % 2 != 0, even)]\n    odd = odd[findall(x -> x % 2 ==\
    \ 0, even)]\n    even = even[findall(x -> x % 2 == 0, odd)]\n    odd = odd[findall(x\
    \ -> x % 2 != 0, odd)]\n    even = even[findall(x -> x % 2 != 0, even)]\n    odd\
    \ = odd[findall(x -> x % 2 == 0, even)]\n    even = even[findall(x -> x % 2 ==\
    \ 0, odd)]\n    odd = odd[findall(x -> x % 2 != 0, odd)]\n    even = even[findall(x\
    \ -> x % 2 != 0, even)]\n    odd = odd[findall(x -> x % 2 == 0, even)]\n    even\
    \ = even[findall(x -> x % 2 == 0, odd)]\n    odd = odd[findall(x -> x % 2 != 0,\
    \ odd)]\n    even = even[findall(x -> x % 2 != 0, even)]\n    odd = odd[findall(x\
    \ -> x % 2 == 0, even)]\n    even\nusing Test\n\n@testset begin\n\ncandidate =\
    \ add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122])\
    \ == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6,\
    \ 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyfdank9q.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyfdank9q.jl:1\n\
    in expression starting at /tmp/tmpyfdank9q.jl:1\n"
  stdout: ''
  timestamp: 1659749289
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = \nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoze4twnj.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoze4twnj.jl:1\n\
    in expression starting at /tmp/tmpoze4twnj.jl:1\n"
  stdout: ''
  timestamp: 1659749284
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 1, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 1, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 1, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 1, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 1, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 1, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 1, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 1, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 1, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 1, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 1, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkie_i91h.jl:54\nin expression starting at\
    \ /tmp/tmpkie_i91h.jl:54\n"
  stdout: ''
  timestamp: 1659749289
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122])\
    \ == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6,\
    \ 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp18ik9wzu.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp18ik9wzu.jl:1\n\
    in expression starting at /tmp/tmp18ik9wzu.jl:1\n"
  stdout: ''
  timestamp: 1659749285
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[1::2]\n    even.+ + odd.+\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert add([1]) == 3\n@assert add([1,2]) == 3\n@assert\
    \ add([1,2,3]) == 6\n@assert add([1,2,3,4]) == 10\n@assert add([1,2,3,4,5]) ==\
    \ 15\n@assert add([1,2,3,4,5,6]) == 21\n@assert add([1,2,3,4,5,6,7]) == 28\n@assert\
    \ add([1,2,3,4,5,6,7,8]) == 36\n@assert add([1,2,3,4,5,6,7,8,9]) == 45\n@assert\
    \ add([1,2,3,4,5,6,7,8,9,10]) == 55\n@assert add([1,2,3,4,5,6,7,8,9,10,11]) ==\
    \ 66\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12]) == 76\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13])\
    \ == 86\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14]) == 96\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\
    \ == 105\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == 116\n@assert\
    \ add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) == 126\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\
    \ == 136\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) == 145\n\
    @assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 156\n@assert\
    \ add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) == 165\n@assert\
    \ add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]) == 176\n@assert\
    \ add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]) == 186\n\
    @assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\
    \ == 196\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])\
    \ == 205\n@assert add([1,2,3,4,\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0b477cnz.jl:10\nin expression starting at /tmp/tmp0b477cnz.jl:10\n"
  stdout: ''
  timestamp: 1659749289
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[1::2]\n    even.+=(odd.+0)\n    return\
    \ even\nend\n</cell>\n<code language=julia-1.5>\n@assert add([1]) == [2]\n@assert\
    \ add([1,2]) == [3,4]\n@assert add([1,2,3]) == [2,4,6]\n@assert add([1,2,3,4,5])\
    \ == [2,4,6,8,10]\n@assert add([1,2,3,4,5,6,7,8,9,10]) == [2,4,6,8,10,12,14,16,18,20]\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the numbers\
    \ in the list lst that are divisible by 3.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdkyv943i.jl:12\nin expression starting at\
    \ /tmp/tmpdkyv943i.jl:12\n"
  stdout: ''
  timestamp: 1659749289
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[2::2]\n    return sum(even) + sum(odd)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88])\
    \ == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp208y5su8.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmp208y5su8.jl:16\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  TypeError: in typeassert, expected\
    \ Type, got a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmp208y5su8.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp208y5su8.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp208y5su8.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp208y5su8.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  TypeError: in typeassert, expected\
    \ Type, got a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmp208y5su8.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp208y5su8.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp208y5su8.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp208y5su8.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([4, 0, 6, 7]) == 0\n  TypeError: in typeassert, expected Type, got\
    \ a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmp208y5su8.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp208y5su8.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp208y5su8.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp208y5su8.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([4, 4, 6, 8]) == 12\n  TypeError: in typeassert, expected Type, got\
    \ a value of type Int64\n  Stacktrace:\n   [1"
  timestamp: 1659749291
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x->x%2==0,lst)]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpukm4hx07.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpukm4hx07.jl:1\n\
    in expression starting at /tmp/tmpukm4hx07.jl:1\n"
  stdout: ''
  timestamp: 1659749289
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = \nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoze4twnj.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoze4twnj.jl:1\n\
    in expression starting at /tmp/tmpoze4twnj.jl:1\n"
  stdout: ''
  timestamp: 1659749284
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1 : (end-1)]\n    odd = lst[2:end]\n    even.+=(odd.*2)\n \
    \   return even\nend\n</cell>\n<code language=julia-1.5>\n@assert add([1]) ==\
    \ 3\n@assert add([1,2,3]) == 6\n@assert add([1,2,3,4,5]) == 15\n@assert add([1,3,5,7,9])\
    \ == 21\n@assert add([1,3,5,7,9,11,13,15]) == 35\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the sum of the squares of the integers in lst. For\
    \ example, sum([1,2,3]) should return 9. Make sure your function works with lists\
    \ of different lengths.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t\
    @test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\
    \t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp79y14nf7.jl:12\nin expression starting at\
    \ /tmp/tmp79y14nf7.jl:12\n"
  stdout: ''
  timestamp: 1659749289
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = \nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoze4twnj.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoze4twnj.jl:1\n\
    in expression starting at /tmp/tmpoze4twnj.jl:1\n"
  stdout: ''
  timestamp: 1659749284
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[2::2]\n    even.+=(odd.+0)\n    return\
    \ even\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpf8mdija1.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpf8mdija1.jl:17\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  TypeError: in typeassert, expected\
    \ Type, got a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpf8mdija1.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf8mdija1.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf8mdija1.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpf8mdija1.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  TypeError: in typeassert, expected\
    \ Type, got a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpf8mdija1.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf8mdija1.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf8mdija1.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpf8mdija1.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([4, 0, 6, 7]) == 0\n  TypeError: in typeassert, expected Type, got\
    \ a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmpf8mdija1.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf8mdija1.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf8mdija1.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpf8mdija1.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([4, 4, 6, 8]) == 12\n  TypeError: in typeassert, expected Type, got\
    \ a value of type Int64\n  Stacktrace:\n   [1"
  timestamp: 1659749286
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = map(add, evens)\n    return sum(evens)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpu0li4sxf.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpu0li4sxf.jl:17\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  MethodError: no method matching add(::Int64)\n\
    \  Closest candidates are:\n    add(!Matched::Vector{Int64}) at /tmp/tmpu0li4sxf.jl:6\n\
    \  Stacktrace:\n   [1] iterate\n     @ ./generator.jl:47 [inlined]\n   [2] _collect\n\
    \     @ ./array.jl:744 [inlined]\n   [3] collect_similar\n     @ ./array.jl:653\
    \ [inlined]\n   [4] map\n     @ ./abstractarray.jl:2867 [inlined]\n   [5] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpu0li4sxf.jl:9\n   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpu0li4sxf.jl:17 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpu0li4sxf.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpu0li4sxf.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  MethodError: no method matching add(::Int64)\n\
    \  Closest candidates are:\n    add(!Matched::Vector{Int64}) at /tmp/tmpu0li4sxf.jl:6\n\
    \  Stacktrace:\n   [1] iterate\n     @ ./generator.jl:47 [inlined]\n   [2] _collect\n\
    \     @ ./array.jl:744 [inlined]\n   [3] collect_similar\n     @ ./array.jl:653\
    \ [inlined]\n   [4] map\n     @ ./abstractarray.jl:2867 [inlined]\n   [5] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpu0li4sxf.jl:9\n   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpu0li4sxf.jl:18 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpu0li4sxf.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpu0li4sxf.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([4, 0, 6, 7]) == 0\n  MethodError: no method matching add(::Int64)\n\
    \  Closest candidates are:\n    add(!Matched::Vector{Int64}) at /tmp/tmpu0li4sxf.jl:6\n\
    \  Stacktrace:\n   [1] iterate\n     @"
  timestamp: 1659749292
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = \nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoze4twnj.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoze4twnj.jl:1\n\
    in expression starting at /tmp/tmpoze4twnj.jl:1\n"
  stdout: ''
  timestamp: 1659749284
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1 : (end-1)]\n    odd = lst[2:end]\n    even.+=(odd)\n    return\
    \ even\nend\n\"\"\"\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \n\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5hgh1dpd.jl:12\nin expression starting at\
    \ /tmp/tmp5hgh1dpd.jl:12\n"
  stdout: ''
  timestamp: 1659749290
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1 : (end-1)]\n    odd = lst[2:end]\n    even.+ + odd.+\nend\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp81fmosry.jl:10\nin expression starting at /tmp/tmp81fmosry.jl:10\n"
  stdout: ''
  timestamp: 1659749290
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122])\
    \ == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6,\
    \ 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp18ik9wzu.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp18ik9wzu.jl:1\n\
    in expression starting at /tmp/tmp18ik9wzu.jl:1\n"
  stdout: ''
  timestamp: 1659749285
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> mod(x,2)==0, lst)]\n    evens = evens[findall(x\
    \ -> mod(x,2)==1, lst)]\n    evens = evens[2:end]\n    return sum(evens)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmph9hp797l.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmph9hp797l.jl:17\n  Expression: candidate([4,\
    \ 88]) == 88\n   Evaluated: 0 == 88\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph9hp797l.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph9hp797l.jl:16\ntest set: Error\
    \ During Test at /tmp/tmph9hp797l.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([4, 0, 6, 7]) == 0\n  BoundsError: attempt to access 3-element Vector{Int64}\
    \ at index [[4]]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64}, I::Tuple{Vector{Int64}})\n\
    \     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n     @ ./abstractarray.jl:656\
    \ [inlined]\n   [3] _getindex\n     @ ./multidimensional.jl:838 [inlined]\n  \
    \ [4] getindex\n     @ ./abstractarray.jl:1218 [inlined]\n   [5] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmph9hp797l.jl:8\n   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmph9hp797l.jl:19 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmph9hp797l.jl:16\ntest set:\
    \ Test Failed at /tmp/tmph9hp797l.jl:20\n  Expression: candidate([4, 4, 6, 8])\
    \ == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph9hp797l.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph9hp797l.jl:16\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     2      1      4\n"
  timestamp: 1659749293
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[1::2]\n    even.+=(odd.+=0)\n    return\
    \ even\nend\n</cell>\n<code language=julia-1.5>\n@assert add([1]) == 3\n@assert\
    \ add([1,2]) == 3\n@assert add([1,2,3]) == 6\n@assert add([1,2,3,4]) == 10\n@assert\
    \ add([1,2,3,4,5]) == 15\n@assert add([1,2,3,4,5,6]) == 21\n@assert add([1,2,3,4,5,6,7])\
    \ == 28\n@assert add([1,2,3,4,5,6,7,8]) == 36\n@assert add([1,2,3,4,5,6,7,8,9])\
    \ == 45\n@assert add([1,2,3,4,5,6,7,8,9,10]) == 54\n@assert add([1,2,3,4,5,6,7,8,9,10,11])\
    \ == 63\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12]) == 72\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13])\
    \ == 81\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14]) == 90\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\
    \ == 100\n</cell>\n<text>\nExercise 2\nWrite a function called sum that takes\
    \ a list of numbers and returns the sum of the numbers. \nWrite a test that passes\
    \ when the function works as expected.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpctpyz5ac.jl:12\nin expression starting at\
    \ /tmp/tmpctpyz5ac.jl:12\n"
  stdout: ''
  timestamp: 1659749290
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = sum(evens)\n    return evens\nend\n\"\"\"\n\"\"\"\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpbggeka2r.jl:243

    '
  stdout: "test set: Test Failed at /tmp/tmpbggeka2r.jl:246\n  Expression: candidate([4,\
    \ 88]) == 88\n   Evaluated: 0 == 88\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbggeka2r.jl:246 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbggeka2r.jl:245\ntest set: Test\
    \ Failed at /tmp/tmpbggeka2r.jl:247\n  Expression: candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n   Evaluated: 0 == 122\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbggeka2r.jl:247 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbggeka2r.jl:245\ntest set: Test\
    \ Failed at /tmp/tmpbggeka2r.jl:249\n  Expression: candidate([4, 4, 6, 8]) ==\
    \ 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbggeka2r.jl:249 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbggeka2r.jl:245\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659749292
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[2::2]\n    even.+=(odd)\n    return even\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert add(Vector{Int64}([1,2,3,4,5,6,7,8,9,10]))\
    \ == Vector{Int64}([2,4,6,8,10,12,14,16,18,20])\n</cell>\n<text>\nExercise 2\n\
    Write a function called add_all that takes in a list of integers and returns the\
    \ sum of all the even numbers in the list. \nWrite another function called add_all_even\
    \ that takes in a list of integers and returns the sum of all the even numbers\
    \ in the list. \nWrite another function called add_all_odd that takes in a list\
    \ of integers and returns the sum of all the odd numbers in the list. \nWrite\
    \ another function called add_all_even that takes in a list of integers and returns\
    \ the sum of all the even numbers in the list. \nWrite another function called\
    \ add_all_odd that takes in a list of integers and returns the sum of all the\
    \ odd numbers in the list. \nWrite another function called add_all_even that takes\
    \ in a list of integers and returns the sum of all the even numbers in the list.\
    \ \nWrite another function called add_all_odd that takes in a list of integers\
    \ and returns the sum of all the odd numbers in the list. \nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1a7sicxp.jl:12\nin expression starting at\
    \ /tmp/tmp1a7sicxp.jl:12\n"
  stdout: ''
  timestamp: 1659749290
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[2::2]\n    even.+=(odd.+0)\n    return\
    \ even\nend\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqlajhb9i.jl:12\nin expression starting at\
    \ /tmp/tmpqlajhb9i.jl:12\n"
  stdout: ''
  timestamp: 1659749284
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1 :] \n    odd = lst[2 :]\n    even.+ odd.\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert add([1]) == 1;\n@assert add([1,2]) == 3;\n\
    @assert add([1,2,3]) == 5;\n@assert add([1,2,3,4]) == 8;\n@assert add([1,2,3,4,5])\
    \ == 10;\n@assert add([1,2,3,4,5,6]) == 12;\n@assert add([1,2,3,4,5,6,7]) == 15;\n\
    @assert add([1,2,3,4,5,6,7,8]) == 18;\n@assert add([1,2,3,4,5,6,7,8,9]) == 21;\n\
    @assert add([1,2,3,4,5,6,7,8,9,10]) == 24;\n@assert add([1,2,3,4,5,6,7,8,9,10,11])\
    \ == 27;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12]) == 30;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13])\
    \ == 33;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14]) == 36;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\
    \ == 39;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == 42;\n@assert\
    \ add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) == 45;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\
    \ == 48;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) == 51;\n\
    @assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 54;\n@assert\
    \ add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) == 57;\n@assert\
    \ add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]) == 60;\n@assert\
    \ add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]) == 63;\n\
    @assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\
    \ == 66;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppgugs5zq.jl:11\nin expression starting at\
    \ /tmp/tmppgugs5zq.jl:11\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = map(add, evens)\n    evens = reduce(add, evens)\n    return evens\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88])\
    \ == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmppv33pohh.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmppv33pohh.jl:18\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  MethodError: no method matching add(::Int64)\n\
    \  Closest candidates are:\n    add(!Matched::Vector{Int64}) at /tmp/tmppv33pohh.jl:6\n\
    \  Stacktrace:\n   [1] iterate\n     @ ./generator.jl:47 [inlined]\n   [2] _collect\n\
    \     @ ./array.jl:744 [inlined]\n   [3] collect_similar\n     @ ./array.jl:653\
    \ [inlined]\n   [4] map\n     @ ./abstractarray.jl:2867 [inlined]\n   [5] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmppv33pohh.jl:9\n   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmppv33pohh.jl:18 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmppv33pohh.jl:17\ntest set:\
    \ Error During Test at /tmp/tmppv33pohh.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  MethodError: no method matching add(::Int64)\n\
    \  Closest candidates are:\n    add(!Matched::Vector{Int64}) at /tmp/tmppv33pohh.jl:6\n\
    \  Stacktrace:\n   [1] iterate\n     @ ./generator.jl:47 [inlined]\n   [2] _collect\n\
    \     @ ./array.jl:744 [inlined]\n   [3] collect_similar\n     @ ./array.jl:653\
    \ [inlined]\n   [4] map\n     @ ./abstractarray.jl:2867 [inlined]\n   [5] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmppv33pohh.jl:9\n   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmppv33pohh.jl:19 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmppv33pohh.jl:17\ntest set:\
    \ Error During Test at /tmp/tmppv33pohh.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([4, 0, 6, 7]) == 0\n  MethodError: no method matching add(::Int64)\n\
    \  Closest candidates are:\n    add(!Matched::Vector{Int64}) at /tmp/tmppv33pohh.jl:6\n\
    \  Stacktrace:\n   [1] iterate\n     @"
  timestamp: 1659749293
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x ->\
    \ x % 2 != 0, lst)]\n    even.+=(odd.-even)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert add([1]) == 3\n@assert add([1,2,3]) == 5\n@assert\
    \ add([1,3,5,7,9]) == 10\n@assert add([1,3,5,7,9,11,13,15]) == 15\n@assert add([1,3,5,7,9,11,13,15,17,19])\
    \ == 19\n@assert add([1,3,5,7,9,11,13,15,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97])\
    \ == 103\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum of\
    \ the numbers in the list lst that are divisible by 3.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptlgvuo6x.jl:12\nin expression starting at\
    \ /tmp/tmptlgvuo6x.jl:12\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x ->\
    \ x % 2 != 0, lst)]\n    even.+=(odd.*2)\n    return even\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpyplepvoy.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpyplepvoy.jl:17\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  DimensionMismatch(\"array could not\
    \ be broadcast to match destination\")\n  Stacktrace:\n    [1] check_broadcast_shape\n\
    \      @ ./broadcast.jl:540 [inlined]\n    [2] check_broadcast_axes\n      @ ./broadcast.jl:543\
    \ [inlined]\n    [3] check_broadcast_axes\n      @ ./broadcast.jl:547 [inlined]\n\
    \    [4] instantiate\n      @ ./broadcast.jl:284 [inlined]\n    [5] materialize!\n\
    \      @ ./broadcast.jl:871 [inlined]\n    [6] materialize!\n      @ ./broadcast.jl:868\
    \ [inlined]\n    [7] add(lst::Vector{Int64})\n      @ Main /tmp/tmpyplepvoy.jl:9\n\
    \    [8] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmpyplepvoy.jl:17 [inlined]\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpyplepvoy.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpyplepvoy.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  DimensionMismatch(\"array could not\
    \ be broadcast to match destination\")\n  Stacktrace:\n    [1] check_broadcast_shape\n\
    \      @ ./broadcast.jl:540 [inlined]\n    [2] check_broadcast_axes\n      @ ./broadcast.jl:543\
    \ [inlined]\n    [3] check_broadcast_axes\n      @ ./broadcast.jl:547 [inlined]\n\
    \    [4] instantiate\n      @ ./broadcast.jl:284 [inlined]\n    [5] materialize!\n\
    \      @ ./broadcast.jl:871 [inlined]\n    [6] materialize!\n      @ ./broadcast.jl:868\
    \ [inlined]\n    [7] add(lst::Vector{Int64})\n      @ Main /tmp/tmpyplepvoy.jl:9\n\
    \    [8] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmpyplepvoy.jl:18 [inlined]\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpyplepvoy.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpyplepvoy."
  timestamp: 1659749291
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[1::2]\n    even.+=(odd.+=0)\n    return\
    \ even\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpvm42e0cy.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpvm42e0cy.jl:17\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  TypeError: in typeassert, expected\
    \ Type, got a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpvm42e0cy.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvm42e0cy.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvm42e0cy.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpvm42e0cy.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  TypeError: in typeassert, expected\
    \ Type, got a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpvm42e0cy.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvm42e0cy.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvm42e0cy.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpvm42e0cy.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([4, 0, 6, 7]) == 0\n  TypeError: in typeassert, expected Type, got\
    \ a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmpvm42e0cy.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvm42e0cy.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvm42e0cy.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpvm42e0cy.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([4, 4, 6, 8]) == 12\n  TypeError: in typeassert, expected Type, got\
    \ a value of type Int64\n  Stacktrace:\n   [1"
  timestamp: 1659749288
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = \nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoze4twnj.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoze4twnj.jl:1\n\
    in expression starting at /tmp/tmpoze4twnj.jl:1\n"
  stdout: ''
  timestamp: 1659749284
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[1::2]\n    even.+=(odd.-even)\n    return\
    \ even\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpsndbm6dj.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpsndbm6dj.jl:17\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  TypeError: in typeassert, expected\
    \ Type, got a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpsndbm6dj.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsndbm6dj.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsndbm6dj.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpsndbm6dj.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  TypeError: in typeassert, expected\
    \ Type, got a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpsndbm6dj.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsndbm6dj.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsndbm6dj.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpsndbm6dj.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([4, 0, 6, 7]) == 0\n  TypeError: in typeassert, expected Type, got\
    \ a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmpsndbm6dj.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsndbm6dj.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsndbm6dj.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpsndbm6dj.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([4, 4, 6, 8]) == 12\n  TypeError: in typeassert, expected Type, got\
    \ a value of type Int64\n  Stacktrace:\n   [1"
  timestamp: 1659749286
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1 : (end-1)]\n    odd = lst[2:end]\n    even = even.+odd\n\
    \    return even\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpnkn8i_ix.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpnkn8i_ix.jl:17\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmpnkn8i_ix.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnkn8i_ix.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnkn8i_ix.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnkn8i_ix.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmpnkn8i_ix.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnkn8i_ix.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scop"
  timestamp: 1659749294
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x ->\
    \ x % 2 != 0, lst)]\n    even.+ odd.\nend\n</cell>\n<code language=julia-1.3>\n\
    @assert add([1]) == 1;\n@assert add([1,2,3]) == 3;\n@assert add([1,2,3,4,5]) ==\
    \ 10;\n@assert add([1,2,3,4,5,6,7,8,9,10]) == 45;\n</cell>\n<text>\nExercise 2\n\
    Write a function called sum that takes in a list of integers and returns the sum\
    \ of all the integers in the list. Test it on a list of integers and a vector\
    \ of integers.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdp27b9ib.jl:11\nin expression starting at\
    \ /tmp/tmpdp27b9ib.jl:11\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[2::2]\n    even.+=(odd.+0)\n    return\
    \ even\nend\n</cell>\n<code language=julia-1.3>\n@code_warntype add(lst)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a list of integers and returns\
    \ the sum of the even elements that are at odd indices.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1i3jiir4.jl:12\nin expression starting at\
    \ /tmp/tmp1i3jiir4.jl:12\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x ->\
    \ x % 2 != 0, lst)]\n    even = even.(2:end).+even.(1:end-1)\n    odd = odd.(2:end).+odd.(1:end-1)\n\
    \    even = even.(2:end).+even.(1:end-1)\n    odd = odd.(2:end).+odd.(1:end-1)\n\
    \    even = even.(2:end).+even.(1:end-1)\n    odd = odd.(2:end).+odd.(1:end-1)\n\
    \    even = even.(2:end).+even.(1:end-1)\n    odd = odd.(2:end).+odd.(1:end-1)\n\
    \    even = even.(2:end).+even.(1:end-1)\n    odd = odd.(2:end).+odd.(1:end-1)\n\
    \    even = even.(2:end).+even.(1:end-1)\n    odd = odd.(2:end).+odd.(1:end-1)\n\
    \    even = even.(2:end).+even.(1:end-1)\n    odd = odd.(2:end).+odd.(1:end-1)\n\
    \    even = even.(2:end).+even.(1:end-1)\n    odd = odd.(2:end).+odd.(1:end-1)\n\
    \    even = even.(2:end).+even.(1:end-1)\n    odd = odd.(2:end).+odd.(1:end-1)\n\
    \    even = even.(2:end).+even.(1:end-1)\n    odd = odd.(2:end).+odd.(1:end-1)\n\
    \    even = even.(2:end).+even.(1:end-1)\n    odd = odd.(2:end).+odd.(1:end-1)\n\
    \    even = even.(2:end).+even.(1:end-1)\n    odd = odd.(2:end).+odd.(1:end-1)\n\
    \    even = even.(2:end).+even.(1:end-1)\n    odd = odd.(2:end).+odd.(1:end-1)\n\
    \    even = even.(2:end).+even.(1:end-1)\n    odd = odd.(2:end).+odd.(1:end-1)\n\
    \    even = even.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9zleejn6.jl:9\nin expression\
    \ starting at /tmp/tmp9zleejn6.jl:9\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[findall(x\
    \ -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n    evens = sum(evens)\n \
    \   return evens\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmprj5w0lpp.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmprj5w0lpp.jl:18\n  Expression: candidate([4,\
    \ 88]) == 88\n   Evaluated: 0 == 88\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprj5w0lpp.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprj5w0lpp.jl:17\ntest set: Test\
    \ Failed at /tmp/tmprj5w0lpp.jl:19\n  Expression: candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n   Evaluated: 0 == 122\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprj5w0lpp.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprj5w0lpp.jl:17\ntest set: Test\
    \ Failed at /tmp/tmprj5w0lpp.jl:21\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprj5w0lpp.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprj5w0lpp.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659749292
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x ->\
    \ x % 2 != 0, lst)]\n    return sum(even + odd)\nend\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdvwyczrr.jl:11\nin expression starting at\
    \ /tmp/tmpdvwyczrr.jl:11\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1 :end] \n    odd = lst[2 :end] \n    even.+ odd.+ \nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the even elements that are at odd indices.\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmph8eksbsu.jl:10\nin expression starting at /tmp/tmph8eksbsu.jl:10\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = map(x -> x + 2, evens)\n    evens = reduce(+, evens)\n    return\
    \ evens\nend\n</cell>\n<code language=julia-1.5>\n@assert add([1]) == 3\n@assert\
    \ add([1,2,3]) == 6\n@assert add([1,2,3,4,5]) == 10\n@assert add([1,2,3,4,5,6,7,8,9,10])\
    \ == 15\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum of\
    \ the numbers in the list lst starting with the number at index idx. For example,\
    \ if the list lst is [1,2,3,4,5,6,7,8,9,10], and idx is 2, the function should\
    \ return 17.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpak93hxij.jl:13\nin expression starting at\
    \ /tmp/tmpak93hxij.jl:13\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122])\
    \ == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6,\
    \ 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp18ik9wzu.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp18ik9wzu.jl:1\n\
    in expression starting at /tmp/tmp18ik9wzu.jl:1\n"
  stdout: ''
  timestamp: 1659749285
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x ->\
    \ x % 2 != 0, lst)]\n    even.+=(odd.+0)\n    return even\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp_2_ipv_c.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmp_2_ipv_c.jl:17\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  DimensionMismatch(\"array could not\
    \ be broadcast to match destination\")\n  Stacktrace:\n    [1] check_broadcast_shape\n\
    \      @ ./broadcast.jl:540 [inlined]\n    [2] check_broadcast_axes\n      @ ./broadcast.jl:543\
    \ [inlined]\n    [3] check_broadcast_axes\n      @ ./broadcast.jl:547 [inlined]\n\
    \    [4] instantiate\n      @ ./broadcast.jl:284 [inlined]\n    [5] materialize!\n\
    \      @ ./broadcast.jl:871 [inlined]\n    [6] materialize!\n      @ ./broadcast.jl:868\
    \ [inlined]\n    [7] add(lst::Vector{Int64})\n      @ Main /tmp/tmp_2_ipv_c.jl:9\n\
    \    [8] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmp_2_ipv_c.jl:17 [inlined]\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp_2_ipv_c.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp_2_ipv_c.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  DimensionMismatch(\"array could not\
    \ be broadcast to match destination\")\n  Stacktrace:\n    [1] check_broadcast_shape\n\
    \      @ ./broadcast.jl:540 [inlined]\n    [2] check_broadcast_axes\n      @ ./broadcast.jl:543\
    \ [inlined]\n    [3] check_broadcast_axes\n      @ ./broadcast.jl:547 [inlined]\n\
    \    [4] instantiate\n      @ ./broadcast.jl:284 [inlined]\n    [5] materialize!\n\
    \      @ ./broadcast.jl:871 [inlined]\n    [6] materialize!\n      @ ./broadcast.jl:868\
    \ [inlined]\n    [7] add(lst::Vector{Int64})\n      @ Main /tmp/tmp_2_ipv_c.jl:9\n\
    \    [8] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmp_2_ipv_c.jl:18 [inlined]\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp_2_ipv_c.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp_2_ipv_c."
  timestamp: 1659749295
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[findall(x\
    \ -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4xv6c5_p.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4xv6c5_p.jl:1\n\
    in expression starting at /tmp/tmp4xv6c5_p.jl:1\n"
  stdout: ''
  timestamp: 1659749284
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[1::2]\n    even.+=(odd.+=0)\n    return\
    \ even\nend\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb986en7_.jl:12\nin expression starting at\
    \ /tmp/tmpb986en7_.jl:12\n"
  stdout: ''
  timestamp: 1659749292
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x->x%2==0,lst)]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpukm4hx07.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpukm4hx07.jl:1\n\
    in expression starting at /tmp/tmpukm4hx07.jl:1\n"
  stdout: ''
  timestamp: 1659749289
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[1::2]\n    even.+=(odd.+0)/2\n    return\
    \ even\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpl55fcr6s.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpl55fcr6s.jl:17\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  TypeError: in typeassert, expected\
    \ Type, got a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpl55fcr6s.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl55fcr6s.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl55fcr6s.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpl55fcr6s.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  TypeError: in typeassert, expected\
    \ Type, got a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpl55fcr6s.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl55fcr6s.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl55fcr6s.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpl55fcr6s.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([4, 0, 6, 7]) == 0\n  TypeError: in typeassert, expected Type, got\
    \ a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmpl55fcr6s.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl55fcr6s.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl55fcr6s.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpl55fcr6s.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([4, 4, 6, 8]) == 12\n  TypeError: in typeassert, expected Type, got\
    \ a value of type Int64\n  Stacktrace:\n   [1"
  timestamp: 1659749294
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[2::2]\n    return sum(even) + sum(odd)\n\
    end\n</cell>\n<code language=julia-1.5>\nadd(lst)\n</cell>\n<text>\nExercise 2\n\
    Write a function called sum2 that sums up all even numbers in a given list. \n\
    Write a function called sum3 that sums up all even numbers in a given list. \n\
    Write a function called sum4 that sums up all even numbers in a given list. \n\
    Write a function called sum5 that sums up all even numbers in a given list. \n\
    Write a function called sum6 that sums up all even numbers in a given list. \n\
    Write a function called sum7 that sums up all even numbers in a given list. \n\
    Write a function called sum8 that sums up all even numbers in a given list. \n\
    Write a function called sum9 that sums up all even numbers in a given list. \n\
    Write a function called sum10 that sums up all even numbers in a given list. \n\
    Write a function called sum11 that sums up all even numbers in a given list. \n\
    Write a function called sum12 that sums up all even numbers in a given list. \n\
    Write a function called sum13 that sums up all even numbers in a given list. \n\
    Write a function called sum14 that sums up all even numbers in a given list. \n\
    Write a function called sum15 that sums up all even numbers in a given list. \n\
    Write a function called sum16 that sums up all even numbers in a given list. \n\
    Write a function called sum17 that sums up all even numbers in a given list. \n\
    Write a function called sum18 that sums up all even numbers in a given list. \n\
    Write a function called sum19 that sums up all even numbers in a given list. \n\
    Write a function called sum20 that sums up all even numbers in a given list. \n\
    Write a function called sum21 that sums up all even numbers in a given list. \n\
    Write a function called sum22 that sums up all even numbers in a given list. \n\
    Write a function called sum23 that sums up all even numbers in a given list. \n\
    Write a function called sum24 that sums up all even numbers in a given list. \n\
    Write a function called sum25 that sums up all even numbers in a given list. \n\
    Write a function called sum26 that sums up all even numbers in a given list. \n\
    Write a function called sum27 that sums up all even numbers in a given list. \n\
    Write a function called sum28 that sums up all even numbers in a given list. \n\
    Write a function called \nusing Test\n\n@testset begin\n\ncandidate = add;\n\t\
    @test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\
    \t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc3nkgkdo.jl:11\nin expression starting at\
    \ /tmp/tmpc3nkgkdo.jl:11\n"
  stdout: ''
  timestamp: 1659749292
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[2::2]\n    even.+=(odd.+=0)\n    return\
    \ even\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp76hkue8k.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmp76hkue8k.jl:17\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  TypeError: in typeassert, expected\
    \ Type, got a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmp76hkue8k.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp76hkue8k.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp76hkue8k.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp76hkue8k.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  TypeError: in typeassert, expected\
    \ Type, got a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmp76hkue8k.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp76hkue8k.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp76hkue8k.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp76hkue8k.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([4, 0, 6, 7]) == 0\n  TypeError: in typeassert, expected Type, got\
    \ a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmp76hkue8k.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp76hkue8k.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp76hkue8k.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp76hkue8k.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([4, 4, 6, 8]) == 12\n  TypeError: in typeassert, expected Type, got\
    \ a value of type Int64\n  Stacktrace:\n   [1"
  timestamp: 1659749294
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> mod(x,2)==0, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> mod(x,2)==1, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> mod(x,2)==2, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> mod(x,2)==3, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> mod(x,2)==4, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> mod(x,2)==5, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> mod(x,2)==6, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> mod(x,2)==7, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> mod(x,2)==8, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> mod(x,2)==9, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> mod(x,2)==10, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> mod(x,2)==11, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> mod(x,2)==12, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> mod(x,2)==13, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> mod(x,2)==14, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> mod(x,2)==15, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> mod(x,2)==16, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> mod(x,2)==17, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> mod(x,2)==18, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> mod(x,2)==19, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> mod(x,2)==20, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> \nusing Test\n\n@testset begin\n\ncandidate =\
    \ add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122])\
    \ == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6,\
    \ 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9feice6b.jl:52\nin expression starting at\
    \ /tmp/tmp9feice6b.jl:52\n"
  stdout: ''
  timestamp: 1659749292
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> mod(x,2)==0, lst)]\n    evens = evens[2:end]\n\
    \    return sum(evens)\nend\n\"\"\"\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add(lst)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the squares of the even elements of a given list. \nWrite a function that\
    \ returns the sum of the squares of the even elements of a given vector. \nWrite\
    \ a function that returns the sum of the squares of the even elements of a given\
    \ matrix. \nWrite a function that returns the sum of the squares of the even elements\
    \ of a given tensor. \nWrite a function that returns the sum of the squares of\
    \ the even elements of a given tensor. \nWrite a function that returns the sum\
    \ of the squares of the even elements of a given tensor. \nWrite a function that\
    \ returns the sum of the squares of the even elements of a given tensor. \nWrite\
    \ a function that returns the sum of the squares of the even elements of a given\
    \ tensor. \nWrite a function that returns the sum of the squares of the even elements\
    \ of a given tensor. \nWrite a function that returns the sum of the squares of\
    \ the even elements of a given tensor. \nWrite a function that returns the sum\
    \ of the squares of the even elements of a given tensor. \nWrite a function that\
    \ returns the sum of the squares of the even elements of a given tensor. \nWrite\
    \ a function that returns the sum of the squares of the even elements of a given\
    \ tensor. \nWrite a function that returns the sum of the squares of the even elements\
    \ of a given tensor. \nWrite a function that returns the sum of the squares of\
    \ the even elements of a given tensor. \nWrite a function that returns the sum\
    \ of the squares of the even elements of a given tensor. \nWrite a function that\
    \ returns the sum of the squares of the even elements of a given tensor. \nWrite\
    \ a function that returns the sum of the squares of the even elements of a given\
    \ tensor. \nWrite a function that returns the sum of the squares of the even elements\
    \ of a given tensor. \nWrite a function that returns the sum of the squares of\
    \ the even elements of a given tensor. \nWrite a function that returns the sum\
    \ of the squares of the even elements of a given tensor. \nWrite a function that\
    \ returns the sum of the squares of the even elements of a given tensor. \nWrite\
    \ a function that returns the sum of the squares of the even elements of a given\
    \ tensor. \nWrite a function that returns the sum of the squares of the even elements\
    \ of a given tensor. \nWrite a function that returns the sum of the squares of\
    \ the even elements of a given tensor. \nWrite a function that returns the sum\
    \ of the squares of the even elements of a given tensor. \nWrite a function that\
    \ returns the sum of the squares of the even elements of a given tensor. \nWrite\
    \ a function that returns the sum of the squares of the even elements of a given\
    \ tensor. \nWrite a function that returns the sum of the squares of the even elements\
    \ of a given tensor. \nWrite a function that returns the sum of the squares of\
    \ the even elements of a given tensor. \nWrite \nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfbwv5lzo.jl:11\nin expression starting at\
    \ /tmp/tmpfbwv5lzo.jl:11\n"
  stdout: ''
  timestamp: 1659749292
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1 : (end-1)]\n    odd = lst[(end-2):end]\n    return sum(even)\
    \ + sum(odd)\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpcgir8jcl.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpcgir8jcl.jl:16\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  BoundsError: attempt to access 2-element\
    \ Vector{Int64} at index [0:2]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] add(lst::Vector{Int64})\n     @ Main /tmp/tmpcgir8jcl.jl:8\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpcgir8jcl.jl:16 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpcgir8jcl.jl:15\ntest set:\
    \ Test Failed at /tmp/tmpcgir8jcl.jl:17\n  Expression: candidate([4, 5, 6, 7,\
    \ 2, 122]) == 122\n   Evaluated: 155 == 122\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcgir8jcl.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcgir8jcl.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpcgir8jcl.jl:18\n  Expression: candidate([4, 0, 6, 7]) == 0\n\
    \   Evaluated: 23 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcgir8jcl.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcgir8jcl.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpcgir8jcl.jl:19\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 32 == 12\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcgir8jcl.jl:19 [inlined]\n [3]\
    \ macro ex"
  timestamp: 1659749295
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[2::2]\n    even.+=(odd.+0)\n    return\
    \ even\nend\n\"\"\"\n\"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmph4g2hd91.jl:255

    '
  stdout: "test set: Error During Test at /tmp/tmph4g2hd91.jl:258\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  TypeError: in typeassert, expected\
    \ Type, got a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmph4g2hd91.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph4g2hd91.jl:258 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph4g2hd91.jl:257\ntest set:\
    \ Error During Test at /tmp/tmph4g2hd91.jl:259\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  TypeError: in typeassert, expected\
    \ Type, got a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmph4g2hd91.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph4g2hd91.jl:259 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph4g2hd91.jl:257\ntest set:\
    \ Error During Test at /tmp/tmph4g2hd91.jl:260\n  Test threw exception\n  Expression:\
    \ candidate([4, 0, 6, 7]) == 0\n  TypeError: in typeassert, expected Type, got\
    \ a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmph4g2hd91.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph4g2hd91.jl:260 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph4g2hd91.jl:257\ntest set:\
    \ Error During Test at /tmp/tmph4g2hd91.jl:261\n  Test threw exception\n  Expression:\
    \ candidate([4, 4, 6, 8]) == 12\n  TypeError: in typeassert, expected Type, got\
    \ a value of type Int64\n  Stacktr"
  timestamp: 1659749288
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x ->\
    \ x % 2 != 0, lst)]\n    return sum(even + odd)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpybua90cv.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpybua90cv.jl:16\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  DimensionMismatch(\"dimensions must\
    \ match: a has dims (Base.OneTo(2),), b has dims (Base.OneTo(0),), mismatch at\
    \ 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n\
    \   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpybua90cv.jl:9\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpybua90cv.jl:16 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpybua90cv.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpybua90cv.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  DimensionMismatch(\"dimensions must\
    \ match: a has dims (Base.OneTo(4),), b has dims (Base.OneTo(2),), mismatch at\
    \ 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n\
    \   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpybua90cv.jl:9\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpybua90cv.jl:17 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpybua90cv.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpybua90cv.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([4, 0, 6, 7]) == 0\n  DimensionMismatch(\"dimensions must match: a\
    \ has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n \
    \ Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:16"
  timestamp: 1659749294
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[1 :end] \n    odds = lst[2 :end] \n    evens + odds\nend\n\
    </cell>\n<code language=julia-1.0>\n@assert add([1]) == 1 \n@assert add([1,2])\
    \ == 3\n@assert add([1,2,3]) == 6\n@assert add([1,2,3,4]) == 10\n@assert add([1,2,3,4,5])\
    \ == 15\n</cell>\n<text>\nExercise 2\nWrite a function called mul that multiplies\
    \ all the numbers in a list. \nThe function should work when the list has any\
    \ number of elements.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcb_7hiay.jl:11\nin expression starting at\
    \ /tmp/tmpcb_7hiay.jl:11\n"
  stdout: ''
  timestamp: 1659749292
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = \nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoze4twnj.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoze4twnj.jl:1\n\
    in expression starting at /tmp/tmpoze4twnj.jl:1\n"
  stdout: ''
  timestamp: 1659749284
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1 : (end-1)]\n    odd = lst[2:end]\n    even.+=(odd.*2)\n \
    \   return even\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp6cb8ebbd.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmp6cb8ebbd.jl:17\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmp6cb8ebbd.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6cb8ebbd.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6cb8ebbd.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp6cb8ebbd.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmp6cb8ebbd.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6cb8ebbd.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scop"
  timestamp: 1659749296
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[1 : (end-1)]\n    evens = evens[evens .% 2 == 0]\n    evens\
    \ = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens\
    \ .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n   \
    \ evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens\
    \ .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n   \
    \ evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens\
    \ .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n   \
    \ evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens\
    \ .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n   \
    \ evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens\
    \ .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n   \
    \ evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens\
    \ .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n   \
    \ evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens\
    \ .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n   \
    \ evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens\
    \ .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n   \
    \ evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens\
    \ .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n   \
    \ evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens\
    \ .!= 0]\n    evens = evens[evens .!= 0]\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpx6janjsf.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpx6janjsf.jl:1\n\
    in expression starting at /tmp/tmpx6janjsf.jl:1\n"
  stdout: ''
  timestamp: 1659749293
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[2::2]\n    even.+=(odd.+0)\n    return\
    \ even\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpf8mdija1.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpf8mdija1.jl:17\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  TypeError: in typeassert, expected\
    \ Type, got a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpf8mdija1.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf8mdija1.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf8mdija1.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpf8mdija1.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  TypeError: in typeassert, expected\
    \ Type, got a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpf8mdija1.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf8mdija1.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf8mdija1.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpf8mdija1.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([4, 0, 6, 7]) == 0\n  TypeError: in typeassert, expected Type, got\
    \ a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmpf8mdija1.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf8mdija1.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf8mdija1.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpf8mdija1.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([4, 4, 6, 8]) == 12\n  TypeError: in typeassert, expected Type, got\
    \ a value of type Int64\n  Stacktrace:\n   [1"
  timestamp: 1659749286
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = \nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoze4twnj.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoze4twnj.jl:1\n\
    in expression starting at /tmp/tmpoze4twnj.jl:1\n"
  stdout: ''
  timestamp: 1659749284
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x->x%2==0, lst)]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq1b7smyj.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq1b7smyj.jl:1\n\
    in expression starting at /tmp/tmpq1b7smyj.jl:1\n"
  stdout: ''
  timestamp: 1659749293
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[2::2]\n    even.+=(odd.+0)\n    return\
    \ even\nend\n\"\"\"\n\"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmph4g2hd91.jl:255

    '
  stdout: "test set: Error During Test at /tmp/tmph4g2hd91.jl:258\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  TypeError: in typeassert, expected\
    \ Type, got a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmph4g2hd91.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph4g2hd91.jl:258 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph4g2hd91.jl:257\ntest set:\
    \ Error During Test at /tmp/tmph4g2hd91.jl:259\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  TypeError: in typeassert, expected\
    \ Type, got a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmph4g2hd91.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph4g2hd91.jl:259 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph4g2hd91.jl:257\ntest set:\
    \ Error During Test at /tmp/tmph4g2hd91.jl:260\n  Test threw exception\n  Expression:\
    \ candidate([4, 0, 6, 7]) == 0\n  TypeError: in typeassert, expected Type, got\
    \ a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmph4g2hd91.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph4g2hd91.jl:260 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph4g2hd91.jl:257\ntest set:\
    \ Error During Test at /tmp/tmph4g2hd91.jl:261\n  Test threw exception\n  Expression:\
    \ candidate([4, 4, 6, 8]) == 12\n  TypeError: in typeassert, expected Type, got\
    \ a value of type Int64\n  Stacktr"
  timestamp: 1659749288
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = \nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoze4twnj.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoze4twnj.jl:1\n\
    in expression starting at /tmp/tmpoze4twnj.jl:1\n"
  stdout: ''
  timestamp: 1659749284
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n  \
    \  evens = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n    evens\
    \ = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n    evens =\
    \ evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> x != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x ->\
    \ x != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x\
    \ != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x !=\
    \ 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x != 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n  \
    \  evens = evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n    evens =\
    \ evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n  \
    \  evens = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n    evens\
    \ = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n    evens =\
    \ evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> x != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x ->\
    \ x != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x\
    \ != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x !=\
    \ 0, evens)]\n    evens = evens[2:end]\n    evens = evens[\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpokmq3vz2.jl:1\nin expression starting at /tmp/tmpokmq3vz2.jl:1\n"
  stdout: ''
  timestamp: 1659749284
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1 :end]\n    odd = lst[2 :end]\n    even = even(even(:))\n\
    \    even = even + odd\n    even\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ add([1]) == 1;\n@assert add([1,2]) == 3;\n@assert add([1,2,3]) == 5;\n@assert\
    \ add([1,2,3,4]) == 7;\n@assert add([1,2,3,4,5]) == 10;\n@assert add([1,2,3,4,5,6])\
    \ == 13;\n</cell>\n<text>\nExercise 2\nWrite a function called sum that takes\
    \ in a list of integers and returns the sum of the integers in the list. For example,\
    \ sum([1,2,3]) should return 6. Make sure your function works with negative numbers\
    \ as well.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwnwkwyrn.jl:13\nin expression starting at\
    \ /tmp/tmpwnwkwyrn.jl:13\n"
  stdout: ''
  timestamp: 1659749293
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x ->\
    \ x % 2 != 0, lst)]\n    even.+(odd.-even)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add([1]) == 1;\n@assert add([1,2]) == 3;\n@assert add([1,2,3]) == 5;\n\
    @assert add([1,2,3,4]) == 7;\n</cell>\n<text>\nExercise 3\nWrite a function called\
    \ count_evens that takes a vector and returns the number of even elements in the\
    \ vector. For example, count_evens([1,3,5]) should return 2.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnmo0cccg.jl:11\nin expression starting at\
    \ /tmp/tmpnmo0cccg.jl:11\n"
  stdout: ''
  timestamp: 1659749293
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n  \
    \  evens = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n    evens\
    \ = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n    evens =\
    \ evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> x != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x ->\
    \ x != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x\
    \ != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x !=\
    \ 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x != 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n  \
    \  evens = evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n    evens =\
    \ evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n  \
    \  evens = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n    evens\
    \ = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n    evens =\
    \ evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> x != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x ->\
    \ x != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x\
    \ != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x !=\
    \ 0, evens)]\n    evens = evens[2:end]\n    evens = evens[\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpokmq3vz2.jl:1\nin expression starting at /tmp/tmpokmq3vz2.jl:1\n"
  stdout: ''
  timestamp: 1659749284
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[1::2]\n    even.+=(odd.-even)\n    return\
    \ even\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpsndbm6dj.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpsndbm6dj.jl:17\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  TypeError: in typeassert, expected\
    \ Type, got a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpsndbm6dj.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsndbm6dj.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsndbm6dj.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpsndbm6dj.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  TypeError: in typeassert, expected\
    \ Type, got a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpsndbm6dj.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsndbm6dj.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsndbm6dj.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpsndbm6dj.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([4, 0, 6, 7]) == 0\n  TypeError: in typeassert, expected Type, got\
    \ a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmpsndbm6dj.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsndbm6dj.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsndbm6dj.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpsndbm6dj.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([4, 4, 6, 8]) == 12\n  TypeError: in typeassert, expected Type, got\
    \ a value of type Int64\n  Stacktrace:\n   [1"
  timestamp: 1659749286
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122])\
    \ == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6,\
    \ 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp18ik9wzu.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp18ik9wzu.jl:1\n\
    in expression starting at /tmp/tmp18ik9wzu.jl:1\n"
  stdout: ''
  timestamp: 1659749285
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1 : (end-1)]\n    odd = lst[(end-2) : (end-1)]\n    even.+=(odd.*2)\n\
    \    return even\nend\n\"\"\"\n\"\"\"\n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpypz7edli.jl:252

    '
  stdout: "test set: Error During Test at /tmp/tmpypz7edli.jl:255\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  BoundsError: attempt to access 2-element\
    \ Vector{Int64} at index [0:1]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] add(lst::Vector{Int64})\n     @ Main /tmp/tmpypz7edli.jl:8\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpypz7edli.jl:255 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpypz7edli.jl:254\ntest set:\
    \ Error During Test at /tmp/tmpypz7edli.jl:256\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  DimensionMismatch(\"array could not\
    \ be broadcast to match destination\")\n  Stacktrace:\n    [1] check_broadcast_shape\n\
    \      @ ./broadcast.jl:540 [inlined]\n    [2] check_broadcast_axes\n      @ ./broadcast.jl:543\
    \ [inlined]\n    [3] check_broadcast_axes\n      @ ./broadcast.jl:547 [inlined]\n\
    \    [4] instantiate\n      @ ./broadcast.jl:284 [inlined]\n    [5] materialize!\n\
    \      @ ./broadcast.jl:871 [inlined]\n    [6] materialize!\n      @ ./broadcast.jl:868\
    \ [inlined]\n    [7] add(lst::Vector{Int64})\n      @ Main /tmp/tmpypz7edli.jl:9\n\
    \    [8] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmpypz7edli.jl:256 [inlined]\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpypz7edli.jl:254\ntest set:\
    \ Error During Test at /tmp/tmpypz7edli.jl:257\n  Test threw exception\n  Expression:\
    \ candidate([4, 0, 6, 7]) == 0\n  DimensionMismatch(\"array could not be broadcast\
    \ to match destination\")\n  Stacktrace:\n    "
  timestamp: 1659749295
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[2::2]\n    even.+=(odd.+0)\n    return\
    \ even\nend\n\"\"\"\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88])\
    \ == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1pvsutj1.jl:12\nin expression starting at\
    \ /tmp/tmp1pvsutj1.jl:12\n"
  stdout: ''
  timestamp: 1659749293
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122])\
    \ == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6,\
    \ 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp18ik9wzu.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp18ik9wzu.jl:1\n\
    in expression starting at /tmp/tmp18ik9wzu.jl:1\n"
  stdout: ''
  timestamp: 1659749285
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[2::2]\n    even.+=(odd.+0)\n    return\
    \ even\nend\n</cell>\n<code language=julia-1.5>\n@assert add([1]) == [2]\n@assert\
    \ add([1,2,3]) == [2,4,6]\n@assert add([1,2,3,4,5]) == [2,4,6,8,10]\n@assert add([1,2,3,4,5,6,7,8,9,10])\
    \ == [2,4,6,8,10,12,14,16,18,20]\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the sum of the squares of the numbers in a given list.\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzztqn5wo.jl:12\nin expression starting at\
    \ /tmp/tmpzztqn5wo.jl:12\n"
  stdout: ''
  timestamp: 1659749293
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122])\
    \ == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6,\
    \ 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp18ik9wzu.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp18ik9wzu.jl:1\n\
    in expression starting at /tmp/tmp18ik9wzu.jl:1\n"
  stdout: ''
  timestamp: 1659749285
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = \nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoze4twnj.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoze4twnj.jl:1\n\
    in expression starting at /tmp/tmpoze4twnj.jl:1\n"
  stdout: ''
  timestamp: 1659749284
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[1::2]\n    even.+=(odd.+0)\n    return\
    \ even\nend\n\"\"\"\n\"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpk5xxmn38.jl:255

    '
  stdout: "test set: Error During Test at /tmp/tmpk5xxmn38.jl:258\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  TypeError: in typeassert, expected\
    \ Type, got a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpk5xxmn38.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk5xxmn38.jl:258 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk5xxmn38.jl:257\ntest set:\
    \ Error During Test at /tmp/tmpk5xxmn38.jl:259\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  TypeError: in typeassert, expected\
    \ Type, got a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpk5xxmn38.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk5xxmn38.jl:259 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk5xxmn38.jl:257\ntest set:\
    \ Error During Test at /tmp/tmpk5xxmn38.jl:260\n  Test threw exception\n  Expression:\
    \ candidate([4, 0, 6, 7]) == 0\n  TypeError: in typeassert, expected Type, got\
    \ a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmpk5xxmn38.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk5xxmn38.jl:260 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk5xxmn38.jl:257\ntest set:\
    \ Error During Test at /tmp/tmpk5xxmn38.jl:261\n  Test threw exception\n  Expression:\
    \ candidate([4, 4, 6, 8]) == 12\n  TypeError: in typeassert, expected Type, got\
    \ a value of type Int64\n  Stacktr"
  timestamp: 1659749295
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[1::2]\n    even.+=(odd.+0)\n    return\
    \ even\nend\n</cell>\n<code language=julia-1.4>\nadd([1,2,3,4,5,6])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the squares of the\
    \ even elements of a given list.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122])\
    \ == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6,\
    \ 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpra0wg4dk.jl:12\nin expression starting at\
    \ /tmp/tmpra0wg4dk.jl:12\n"
  stdout: ''
  timestamp: 1659749294
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[2::2]\n    even.+=(odd.+0)\n    return\
    \ even\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpf8mdija1.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpf8mdija1.jl:17\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  TypeError: in typeassert, expected\
    \ Type, got a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpf8mdija1.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf8mdija1.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf8mdija1.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpf8mdija1.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  TypeError: in typeassert, expected\
    \ Type, got a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpf8mdija1.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf8mdija1.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf8mdija1.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpf8mdija1.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([4, 0, 6, 7]) == 0\n  TypeError: in typeassert, expected Type, got\
    \ a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmpf8mdija1.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf8mdija1.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf8mdija1.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpf8mdija1.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([4, 4, 6, 8]) == 12\n  TypeError: in typeassert, expected Type, got\
    \ a value of type Int64\n  Stacktrace:\n   [1"
  timestamp: 1659749286
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[2::2]\n    even.+=(odd.+0)\n    return\
    \ even\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpf8mdija1.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpf8mdija1.jl:17\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  TypeError: in typeassert, expected\
    \ Type, got a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpf8mdija1.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf8mdija1.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf8mdija1.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpf8mdija1.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  TypeError: in typeassert, expected\
    \ Type, got a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpf8mdija1.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf8mdija1.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf8mdija1.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpf8mdija1.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([4, 0, 6, 7]) == 0\n  TypeError: in typeassert, expected Type, got\
    \ a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmpf8mdija1.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf8mdija1.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf8mdija1.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpf8mdija1.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([4, 4, 6, 8]) == 12\n  TypeError: in typeassert, expected Type, got\
    \ a value of type Int64\n  Stacktrace:\n   [1"
  timestamp: 1659749286
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = \nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoze4twnj.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoze4twnj.jl:1\n\
    in expression starting at /tmp/tmpoze4twnj.jl:1\n"
  stdout: ''
  timestamp: 1659749284
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[1::2]\n    even.+=(odd.+0)\n    return\
    \ even\nend\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp96czrui9.jl:12\nin expression starting at\
    \ /tmp/tmp96czrui9.jl:12\n"
  stdout: ''
  timestamp: 1659749286
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[2::2]\n    even.+=(odd.+0)\n    return\
    \ even\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpf8mdija1.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpf8mdija1.jl:17\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  TypeError: in typeassert, expected\
    \ Type, got a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpf8mdija1.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf8mdija1.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf8mdija1.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpf8mdija1.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  TypeError: in typeassert, expected\
    \ Type, got a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpf8mdija1.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf8mdija1.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf8mdija1.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpf8mdija1.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([4, 0, 6, 7]) == 0\n  TypeError: in typeassert, expected Type, got\
    \ a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmpf8mdija1.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf8mdija1.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf8mdija1.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpf8mdija1.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([4, 4, 6, 8]) == 12\n  TypeError: in typeassert, expected Type, got\
    \ a value of type Int64\n  Stacktrace:\n   [1"
  timestamp: 1659749286
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x ->\
    \ x % 2 != 0, lst)]\n    even = even.+odd\n    return even\nend\n\"\"\"\n\"\"\"\
    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp_hvo4cnl.jl:249

    '
  stdout: "test set: Error During Test at /tmp/tmp_hvo4cnl.jl:252\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  DimensionMismatch(\"arrays could not\
    \ be broadcast to a common size; got a dimension with lengths 2 and 0\")\n  Stacktrace:\n\
    \    [1] _bcs1\n      @ ./broadcast.jl:516 [inlined]\n    [2] _bcs\n      @ ./broadcast.jl:510\
    \ [inlined]\n    [3] broadcast_shape\n      @ ./broadcast.jl:504 [inlined]\n \
    \   [4] combine_axes\n      @ ./broadcast.jl:499 [inlined]\n    [5] instantiate\n\
    \      @ ./broadcast.jl:281 [inlined]\n    [6] materialize\n      @ ./broadcast.jl:860\
    \ [inlined]\n    [7] add(lst::Vector{Int64})\n      @ Main /tmp/tmp_hvo4cnl.jl:9\n\
    \    [8] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmp_hvo4cnl.jl:252 [inlined]\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp_hvo4cnl.jl:251\ntest set:\
    \ Error During Test at /tmp/tmp_hvo4cnl.jl:253\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  DimensionMismatch(\"arrays could not\
    \ be broadcast to a common size; got a dimension with lengths 4 and 2\")\n  Stacktrace:\n\
    \    [1] _bcs1\n      @ ./broadcast.jl:516 [inlined]\n    [2] _bcs\n      @ ./broadcast.jl:510\
    \ [inlined]\n    [3] broadcast_shape\n      @ ./broadcast.jl:504 [inlined]\n \
    \   [4] combine_axes\n      @ ./broadcast.jl:499 [inlined]\n    [5] instantiate\n\
    \      @ ./broadcast.jl:281 [inlined]\n    [6] materialize\n      @ ./broadcast.jl:860\
    \ [inlined]\n    [7] add(lst::Vector{Int64})\n      @ Main /tmp/tmp_hvo4cnl.jl:9\n\
    \    [8] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmp_hvo4cnl.jl:253 [inlined]\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp_hvo4cnl.jl:251\ntest set:\
    \ Error During Test at /tmp/tmp_hvo4cnl."
  timestamp: 1659749297
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    return sum(evens)\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpivtp636m.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmpivtp636m.jl:17\n  Expression: candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n   Evaluated: 130 == 122\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpivtp636m.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpivtp636m.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpivtp636m.jl:18\n  Expression: candidate([4, 0, 6, 7]) == 0\n\
    \   Evaluated: 6 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpivtp636m.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpivtp636m.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpivtp636m.jl:19\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 18 == 12\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpivtp636m.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpivtp636m.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659749289
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[1::2]\n    even.+=(odd.-even)\n    return\
    \ even\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpsndbm6dj.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpsndbm6dj.jl:17\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  TypeError: in typeassert, expected\
    \ Type, got a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpsndbm6dj.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsndbm6dj.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsndbm6dj.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpsndbm6dj.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  TypeError: in typeassert, expected\
    \ Type, got a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpsndbm6dj.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsndbm6dj.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsndbm6dj.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpsndbm6dj.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([4, 0, 6, 7]) == 0\n  TypeError: in typeassert, expected Type, got\
    \ a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmpsndbm6dj.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsndbm6dj.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsndbm6dj.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpsndbm6dj.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([4, 4, 6, 8]) == 12\n  TypeError: in typeassert, expected Type, got\
    \ a value of type Int64\n  Stacktrace:\n   [1"
  timestamp: 1659749286
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x ->\
    \ x % 2 != 0, lst)]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function called sub that subtracts two lists.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj1vit_33.jl:12\nin expression starting at\
    \ /tmp/tmpj1vit_33.jl:12\n"
  stdout: ''
  timestamp: 1659749294
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[1 : (end-1)]\n    odds = lst[(end-1) : end]\n    evens = filter(x\
    \ -> x % 2 == 0, evens)\n    odds = filter(x -> x % 2 == 1, odds)\n    evens =\
    \ map(x -> x + 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens = map(x\
    \ -> x + 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens = map(x -> x +\
    \ 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens = map(x -> x + 1, evens)\n\
    \    odds = map(x -> x - 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds\
    \ = map(x -> x - 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x\
    \ -> x - 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x -> x -\
    \ 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x -> x - 1, odds)\n\
    \    evens = map(x -> x + 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens\
    \ = map(x -> x + 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens = map(x\
    \ -> x + 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens = map(x -> x +\
    \ 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens = map(x -> x + 1, evens)\n\
    \    odds = map(x -> x - 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds\
    \ = map(x -> x - 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x\
    \ -> x - 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x -> x -\
    \ 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x -> x - 1, odds)\n\
    \    evens = map(x -> x + 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens\
    \ = map(x -> x + 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens = map(x\
    \ -> x + 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens = map(x -> x +\
    \ 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens = \nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6sqf_096.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6sqf_096.jl:1\n\
    in expression starting at /tmp/tmp6sqf_096.jl:1\n"
  stdout: ''
  timestamp: 1659749294
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122])\
    \ == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6,\
    \ 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp18ik9wzu.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp18ik9wzu.jl:1\n\
    in expression starting at /tmp/tmp18ik9wzu.jl:1\n"
  stdout: ''
  timestamp: 1659749285
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[1 : (end-1)]\n    evens = filter(x -> x % 2 == 0, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x % 2 == 0, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x % 2 == 0, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x % 2 == 0, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x % 2 == 0, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x % 2 == 0, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x % 2 == 0, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x % 2 == 0, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x % 2 == 0, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x % 2 == 0, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x % 2 == 0, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x % 2 == 0, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x % 2 == 0, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x % 2 == 0, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x % 2 == 0, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x % 2 == 0, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x % 2 == 0, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x % 2 == 0, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x % 2 == 0, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x % 2 == 0, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x % 2 == 0, evens)\n\
    \    evens = map(x -> x + 1, \nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzbzcv69e.jl:52\nin expression starting at\
    \ /tmp/tmpzbzcv69e.jl:52\n"
  stdout: ''
  timestamp: 1659749294
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x ->\
    \ x % 2 != 0, lst)]\n    even.+(odd.-even)\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector and returns the sum of the squares of the even elements in the vector.\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpto9xxyk0.jl:11\nin expression starting at\
    \ /tmp/tmpto9xxyk0.jl:11\n"
  stdout: ''
  timestamp: 1659749294
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[1 : (end-1)]\n    odds = lst[(end-1):end]\n    evens = filter(x\
    \ -> x % 2 == 0, evens)\n    odds = filter(x -> x % 2 != 0, odds)\n    evens =\
    \ collect(evens)\n    odds = collect(odds)\n    evens = union(evens, odds)\n \
    \   evens = collect(evens)\n    odds = collect(odds)\n    evens = union(evens,\
    \ odds)\n    evens = collect(evens)\n    odds = collect(odds)\n    evens = union(evens,\
    \ odds)\n    evens = collect(evens)\n    odds = collect(odds)\n    evens = union(evens,\
    \ odds)\n    evens = collect(evens)\n    odds = collect(odds)\n    evens = union(evens,\
    \ odds)\n    evens = collect(evens)\n    odds = collect(odds)\n    evens = union(evens,\
    \ odds)\n    evens = collect(evens)\n    odds = collect(odds)\n    evens = union(evens,\
    \ odds)\n    evens = collect(evens)\n    odds = collect(odds)\n    evens = union(evens,\
    \ odds)\n    evens = collect(evens)\n    odds = collect(odds)\n    evens = union(evens,\
    \ odds)\n    evens = collect(evens)\n    odds = collect(odds)\n    evens = union(evens,\
    \ odds)\n    evens = collect(evens)\n    odds = collect(odds)\n    evens = union(evens,\
    \ odds)\n    evens = collect(evens)\n    odds = collect(odds)\n    evens = union(evens,\
    \ odds)\n    evens = collect(evens)\n    odds = collect(odds)\n    evens = union(evens,\
    \ odds)\n    evens = collect(evens)\n    odds = collect(odds)\n    evens = union(evens,\
    \ odds)\n    evens = collect(evens)\n    odds = collect(odds)\n    evens = union(evens,\
    \ odds)\n    evens = collect(evens)\n    odds = collect(odds)\n    evens = union(evens,\
    \ odds)\n    evens = collect(evens)\n    odds = collect(odds)\n    evens = union(evens,\
    \ odds)\n    evens = collect(evens)\n    odds = collect(odds)\n    evens = union(evens,\
    \ odds)\n    evens = collect(evens)\n    odds = collect(odds)\nusing Test\n\n\
    @testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6y2qzek_.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6y2qzek_.jl:1\n\
    in expression starting at /tmp/tmp6y2qzek_.jl:1\n"
  stdout: ''
  timestamp: 1659749294
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    evens = collect(evens)\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122])\
    \ == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6,\
    \ 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp18ik9wzu.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp18ik9wzu.jl:1\n\
    in expression starting at /tmp/tmp18ik9wzu.jl:1\n"
  stdout: ''
  timestamp: 1659749285
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[2::2]\n    even.+=(odd.+0)\n    return\
    \ even\nend\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqlajhb9i.jl:12\nin expression starting at\
    \ /tmp/tmpqlajhb9i.jl:12\n"
  stdout: ''
  timestamp: 1659749284
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[findall(x\
    \ -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4xv6c5_p.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4xv6c5_p.jl:1\n\
    in expression starting at /tmp/tmp4xv6c5_p.jl:1\n"
  stdout: ''
  timestamp: 1659749284
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[2::2]\n    even.+=(odd.+0)\n    return\
    \ even\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpf8mdija1.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpf8mdija1.jl:17\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  TypeError: in typeassert, expected\
    \ Type, got a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpf8mdija1.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf8mdija1.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf8mdija1.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpf8mdija1.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  TypeError: in typeassert, expected\
    \ Type, got a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpf8mdija1.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf8mdija1.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf8mdija1.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpf8mdija1.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([4, 0, 6, 7]) == 0\n  TypeError: in typeassert, expected Type, got\
    \ a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmpf8mdija1.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf8mdija1.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf8mdija1.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpf8mdija1.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([4, 4, 6, 8]) == 12\n  TypeError: in typeassert, expected Type, got\
    \ a value of type Int64\n  Stacktrace:\n   [1"
  timestamp: 1659749286
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[1 : (end-1)]\n    odds = lst[(end-1):end]\n    evens + sum(odds)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert add([1]) == 1;\n@assert add([1,2])\
    \ == 3;\n@assert add([1,2,3]) == 5;\n@assert add([1,2,3,4]) == 8;\n@assert add([1,2,3,4,5])\
    \ == 13;\n@assert add([1,2,3,4,5,6]) == 18;\n@assert add([1,2,3,4,5,6,7]) == 23;\n\
    @assert add([1,2,3,4,5,6,7,8]) == 30;\n@assert add([1,2,3,4,5,6,7,8,9]) == 37;\n\
    @assert add([1,2,3,4,5,6,7,8,9,10]) == 44;\n@assert add([1,2,3,4,5,6,7,8,9,10,11])\
    \ == 51;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12]) == 59;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13])\
    \ == 66;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14]) == 73;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\
    \ == 80;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == 87;\n@assert\
    \ add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) == 94;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\
    \ == 101;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) == 108;\n\
    @assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 115;\n@assert\
    \ add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) == 122;\n@assert\
    \ add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]) == 129;\n@assert\
    \ add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]) == 136;\n\
    @assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\
    \ == 143;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5_gmtedn.jl:11\nin expression starting at\
    \ /tmp/tmp5_gmtedn.jl:11\n"
  stdout: ''
  timestamp: 1659749294
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1 : (end-1)]\n    odd = lst[(end-1) : end]\n    even.+=(odd.*2)\n\
    \    return even\nend\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdv76nhnh.jl:12\nin expression starting at\
    \ /tmp/tmpdv76nhnh.jl:12\n"
  stdout: ''
  timestamp: 1659749294
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[1::2]\n    even.+ + odd.+ + even.+ + odd.+\
    \ + even.+ + odd.+ + even.+ + odd.+ + even.+ + odd.+ + even.+ + odd.+ + even.+\
    \ + odd.+ + even.+ + odd.+ + even.+ + odd.+ + even.+ + odd.+ + even.+ + odd.+\
    \ + even.+ + odd.+ + even.+ + odd.+ + even.+ + odd.+ + even.+ + odd.+ + even.+\
    \ + odd.+ + even.+ + odd.+ + even.+ + odd.+ + even.+ + odd.+ + even.+ + odd.+\
    \ + even.+ + odd.+ + even.+ + odd.+ + even.+ + odd.+ + even.+ + odd.+ + even.+\
    \ + odd.+ + even.+ + odd.+ + even.+ + odd.+ + even.+ + odd.+ + even.+ + odd.+\
    \ + even.+ + odd.+ + even.+ + odd.+ + even.+ + odd.+ + even.+ + odd.+ + even.+\
    \ + odd.+ + even.+ + odd.+ + even.+ + odd.+ + even.+ + odd.+ + even.+ + odd.+\
    \ + even.+ + odd.+ + even.+ + odd.+ + even.+ + odd.+ + even.+ + odd.+ + even.+\
    \ + odd.+ + even.+ + odd.+ + even.+ + odd.+ + even.+ + odd.+ + even.+ + odd.+\
    \ + even.+ + odd.+ + even.+ + odd.+ + even.+ + odd.+ + even.+ + odd.+ + even.+\
    \ + odd.+ + even.+ + odd.+ + even.+ + odd.+ + even.+ + odd.+ + even.+ + odd.+\
    \ + even.+ + odd.+ + even.+ + odd.+ + even.+ + odd.+ + even.+ + odd.+ + even.+\
    \ + odd.+ + even.+ + odd.+ \nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqwgt7gff.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqwgt7gff.jl:1\n\
    in expression starting at /tmp/tmpqwgt7gff.jl:1\n"
  stdout: ''
  timestamp: 1659749294
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    return sum(evens)\nend\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp95kpcd4c.jl:11\nin expression starting at\
    \ /tmp/tmp95kpcd4c.jl:11\n"
  stdout: ''
  timestamp: 1659749294
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[findall(x\
    \ -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4xv6c5_p.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4xv6c5_p.jl:1\n\
    in expression starting at /tmp/tmp4xv6c5_p.jl:1\n"
  stdout: ''
  timestamp: 1659749284
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[2::2]\n    even.+=(odd.+=0)\n    return\
    \ even\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp76hkue8k.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmp76hkue8k.jl:17\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  TypeError: in typeassert, expected\
    \ Type, got a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmp76hkue8k.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp76hkue8k.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp76hkue8k.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp76hkue8k.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  TypeError: in typeassert, expected\
    \ Type, got a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmp76hkue8k.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp76hkue8k.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp76hkue8k.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp76hkue8k.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([4, 0, 6, 7]) == 0\n  TypeError: in typeassert, expected Type, got\
    \ a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmp76hkue8k.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp76hkue8k.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp76hkue8k.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp76hkue8k.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([4, 4, 6, 8]) == 12\n  TypeError: in typeassert, expected Type, got\
    \ a value of type Int64\n  Stacktrace:\n   [1"
  timestamp: 1659749294
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[1::2]\n    even.+=(odd.-even)\n    return\
    \ even\nend\n</cell>\n<code language=julia-1.5>\n@assert add([1]) == [2]\n@assert\
    \ add([1,2,3]) == [2,4,6]\n@assert add([1,2,3,4,5]) == [2,4,6,8,10]\n@assert add([1,2,3,4,5,6,7,8,9,10])\
    \ == [2,4,6,8,10,12,14,16,18,20]\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ called add_all that takes in a list of integers and returns the sum of all the\
    \ even numbers in the list.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8ux0i6tx.jl:12\nin expression starting at\
    \ /tmp/tmp8ux0i6tx.jl:12\n"
  stdout: ''
  timestamp: 1659749295
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n  \
    \  evens = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n    evens\
    \ = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n    evens =\
    \ evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> x != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x ->\
    \ x != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x\
    \ != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x !=\
    \ 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x != 0,\
    \ evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n\
    \    evens = evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n  \
    \  evens = evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n    evens =\
    \ evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n  \
    \  evens = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n    evens\
    \ = evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n    evens =\
    \ evens[findall(x -> x != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> x != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x ->\
    \ x != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x\
    \ != 0, evens)]\n    evens = evens[2:end]\n    evens = evens[findall(x -> x !=\
    \ 0, evens)]\n    evens = evens[2:end]\n    evens = evens[\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpokmq3vz2.jl:1\nin expression starting at /tmp/tmpokmq3vz2.jl:1\n"
  stdout: ''
  timestamp: 1659749284
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = map(add, evens)\n    return sum(evens)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpu0li4sxf.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpu0li4sxf.jl:17\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  MethodError: no method matching add(::Int64)\n\
    \  Closest candidates are:\n    add(!Matched::Vector{Int64}) at /tmp/tmpu0li4sxf.jl:6\n\
    \  Stacktrace:\n   [1] iterate\n     @ ./generator.jl:47 [inlined]\n   [2] _collect\n\
    \     @ ./array.jl:744 [inlined]\n   [3] collect_similar\n     @ ./array.jl:653\
    \ [inlined]\n   [4] map\n     @ ./abstractarray.jl:2867 [inlined]\n   [5] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpu0li4sxf.jl:9\n   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpu0li4sxf.jl:17 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpu0li4sxf.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpu0li4sxf.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  MethodError: no method matching add(::Int64)\n\
    \  Closest candidates are:\n    add(!Matched::Vector{Int64}) at /tmp/tmpu0li4sxf.jl:6\n\
    \  Stacktrace:\n   [1] iterate\n     @ ./generator.jl:47 [inlined]\n   [2] _collect\n\
    \     @ ./array.jl:744 [inlined]\n   [3] collect_similar\n     @ ./array.jl:653\
    \ [inlined]\n   [4] map\n     @ ./abstractarray.jl:2867 [inlined]\n   [5] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpu0li4sxf.jl:9\n   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpu0li4sxf.jl:18 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpu0li4sxf.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpu0li4sxf.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([4, 0, 6, 7]) == 0\n  MethodError: no method matching add(::Int64)\n\
    \  Closest candidates are:\n    add(!Matched::Vector{Int64}) at /tmp/tmpu0li4sxf.jl:6\n\
    \  Stacktrace:\n   [1] iterate\n     @"
  timestamp: 1659749292
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[1 : (end-1)]\n    evens = filter(x -> x % 2 == 0, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens\
    \ = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x\
    \ + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens\
    \ = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x\
    \ + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens\
    \ = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x\
    \ + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens\
    \ = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x\
    \ + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = map(\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjm5lyhzg.jl:56\nin expression starting at\
    \ /tmp/tmpjm5lyhzg.jl:56\n"
  stdout: ''
  timestamp: 1659749295
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[1 : (end-1)]\n    odds = lst[2 : end]\n    evens + sum(odds)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88])\
    \ == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpltsotc3y.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpltsotc3y.jl:16\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  MethodError: no method matching +(::Vector{Int64},\
    \ ::Int64)\n  For element-wise addition, use broadcasting with dot syntax: array\
    \ .+ scalar\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n    +(!Matched::T,\
    \ ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32,\
    \ UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:87\n \
    \   +(!Matched::T, ::Integer) where T<:AbstractChar at /shared/centos7/julia/1.7.3/share/julia/base/char.jl:237\n\
    \    ...\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmpltsotc3y.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpltsotc3y.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpltsotc3y.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpltsotc3y.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  MethodError: no method matching +(::Vector{Int64},\
    \ ::Int64)\n  For element-wise addition, use broadcasting with dot syntax: array\
    \ .+ scalar\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n    +(!Matched::T,\
    \ ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32,\
    \ UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:87\n \
    \   +(!Matched::T, ::Integer) where T<:AbstractChar at /shared/centos7/julia/1.7.3/share/julia/base/char.jl:237\n\
    \    ...\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmpltsotc3y.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp"
  timestamp: 1659749298
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[2::2]\n    even.+=(odd.+0)\n    return\
    \ even\nend\n\"\"\"\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<text>\n\
    Exercise: Write a function that returns the sum of the even numbers in a given\
    \ list.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfrr1sdey.jl:12\nin expression starting at\
    \ /tmp/tmpfrr1sdey.jl:12\n"
  stdout: ''
  timestamp: 1659749295
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    return sum(evens)\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpivtp636m.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmpivtp636m.jl:17\n  Expression: candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n   Evaluated: 130 == 122\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpivtp636m.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpivtp636m.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpivtp636m.jl:18\n  Expression: candidate([4, 0, 6, 7]) == 0\n\
    \   Evaluated: 6 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpivtp636m.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpivtp636m.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpivtp636m.jl:19\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 18 == 12\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpivtp636m.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpivtp636m.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659749289
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = \nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoze4twnj.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoze4twnj.jl:1\n\
    in expression starting at /tmp/tmpoze4twnj.jl:1\n"
  stdout: ''
  timestamp: 1659749284
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x ->\
    \ x % 2 != 0, lst)]\n    even.+(odd.-even)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add([1]) == 3\n@assert add([1,2]) == 3\n@assert add([1,2,3]) == 6\n@assert\
    \ add([1,2,3,4,5]) == 15\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of elements in a list that satisfy a given predicate.\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4226ajuc.jl:11\nin expression starting at\
    \ /tmp/tmp4226ajuc.jl:11\n"
  stdout: ''
  timestamp: 1659749295
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = map(x -> x + 1, evens)\n    evens = reduce(+, evens)\n    return\
    \ evens\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwnl0fhyc.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpwnl0fhyc.jl:18\n  Expression: candidate([4,\
    \ 88]) == 88\n   Evaluated: 89 == 88\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwnl0fhyc.jl:18 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwnl0fhyc.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpwnl0fhyc.jl:19\n  Expression: candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n   Evaluated: 133 == 122\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwnl0fhyc.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwnl0fhyc.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpwnl0fhyc.jl:20\n  Expression: candidate([4, 0, 6, 7]) == 0\n\
    \   Evaluated: 8 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwnl0fhyc.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwnl0fhyc.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpwnl0fhyc.jl:21\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 21 == 12\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwnl0fhyc.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwnl0fhyc.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659749296
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x->x%2==0,lst)]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpukm4hx07.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpukm4hx07.jl:1\n\
    in expression starting at /tmp/tmpukm4hx07.jl:1\n"
  stdout: ''
  timestamp: 1659749289
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = \nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoze4twnj.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoze4twnj.jl:1\n\
    in expression starting at /tmp/tmpoze4twnj.jl:1\n"
  stdout: ''
  timestamp: 1659749284
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[2::2]\n    even.+=(odd.+0)\n    return\
    \ even\nend\n\"\"\"\n\"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmph4g2hd91.jl:255

    '
  stdout: "test set: Error During Test at /tmp/tmph4g2hd91.jl:258\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  TypeError: in typeassert, expected\
    \ Type, got a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmph4g2hd91.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph4g2hd91.jl:258 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph4g2hd91.jl:257\ntest set:\
    \ Error During Test at /tmp/tmph4g2hd91.jl:259\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  TypeError: in typeassert, expected\
    \ Type, got a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmph4g2hd91.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph4g2hd91.jl:259 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph4g2hd91.jl:257\ntest set:\
    \ Error During Test at /tmp/tmph4g2hd91.jl:260\n  Test threw exception\n  Expression:\
    \ candidate([4, 0, 6, 7]) == 0\n  TypeError: in typeassert, expected Type, got\
    \ a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmph4g2hd91.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph4g2hd91.jl:260 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph4g2hd91.jl:257\ntest set:\
    \ Error During Test at /tmp/tmph4g2hd91.jl:261\n  Test threw exception\n  Expression:\
    \ candidate([4, 4, 6, 8]) == 12\n  TypeError: in typeassert, expected Type, got\
    \ a value of type Int64\n  Stacktr"
  timestamp: 1659749288
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[1::2]\n    even.+=(odd.-even)\n    return\
    \ even\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpsndbm6dj.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpsndbm6dj.jl:17\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  TypeError: in typeassert, expected\
    \ Type, got a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpsndbm6dj.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsndbm6dj.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsndbm6dj.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpsndbm6dj.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  TypeError: in typeassert, expected\
    \ Type, got a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpsndbm6dj.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsndbm6dj.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsndbm6dj.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpsndbm6dj.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([4, 0, 6, 7]) == 0\n  TypeError: in typeassert, expected Type, got\
    \ a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmpsndbm6dj.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsndbm6dj.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsndbm6dj.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpsndbm6dj.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([4, 4, 6, 8]) == 12\n  TypeError: in typeassert, expected Type, got\
    \ a value of type Int64\n  Stacktrace:\n   [1"
  timestamp: 1659749286
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[2::2]\n    even.+=(odd.+=0)\n    return\
    \ even\nend\n</cell>\n<code language=julia-1.5>\n@assert add([1]) == 1;\n@assert\
    \ add([1,2]) == 3;\n@assert add([1,2,3]) == 5;\n@assert add([1,2,3,4]) == 8;\n\
    @assert add([1,2,3,4,5]) == 13;\n@assert add([1,2,3,4,5,6]) == 19;\n@assert add([1,2,3,4,5,6,7])\
    \ == 25;\n@assert add([1,2,3,4,5,6,7,8]) == 30;\n@assert add([1,2,3,4,5,6,7,8,9])\
    \ == 36;\n@assert add([1,2,3,4,5,6,7,8,9,10]) == 43;\n@assert add([1,2,3,4,5,6,7,8,9,10,11])\
    \ == 49;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12]) == 55;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13])\
    \ == 61;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14]) == 67;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\
    \ == 74;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == 81;\n@assert\
    \ add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) == 87;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\
    \ == 94;\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) == 101;\n\
    @assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 108;\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of the numbers in the\
    \ list lst that are divisible by 3.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwjcsy5sz.jl:12\nin expression starting at\
    \ /tmp/tmpwjcsy5sz.jl:12\n"
  stdout: ''
  timestamp: 1659749296
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x ->\
    \ x % 2 != 0, lst)]\n    even.+=(odd.+0)/2\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert add([1]) == 1;\n@assert add([1,2]) == 3;\n@assert\
    \ add([1,2,3]) == 5;\n@assert add([1,2,3,4,5]) == 10;\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function called add_all that takes a list of numbers and returns\
    \ the sum of the even numbers and the sum of the odd numbers.\nusing Test\n\n\
    @testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprzyer687.jl:12\nin expression starting at\
    \ /tmp/tmprzyer687.jl:12\n"
  stdout: ''
  timestamp: 1659749296
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[2::2]\n    even.+=(odd)\n    return even\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert add([1]) == [2]\n@assert add([1,2,3])\
    \ == [2,4,6]\n@assert add([1,2,3,4,5]) == [2,4,6,8,10]\n@assert add([1,2,3,4,5,6,7,8,9,10])\
    \ == [2,4,6,8,10,12,14,16,18,20]\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the sum of the numbers in a vector. \nThe function should work\
    \ for both real and complex numbers. \nThe function should work for both real\
    \ and complex numbers. \nThe function should work for both real and complex numbers.\
    \ \nThe function should work for both real and complex numbers. \nThe function\
    \ should work for both real and complex numbers. \nThe function should work for\
    \ both real and complex numbers. \nThe function should work for both real and\
    \ complex numbers. \nThe function should work for both real and complex numbers.\
    \ \nThe function should work for both real and complex numbers. \nThe function\
    \ should work for both real and complex numbers. \nThe function should work for\
    \ both real and complex numbers. \nThe function should work for both real and\
    \ complex numbers. \nThe function should work for both real and complex numbers.\
    \ \nThe function should work for both real and complex numbers. \nThe function\
    \ should work for both real and complex numbers. \nThe function should work for\
    \ both real and complex numbers. \nThe function should work for both real and\
    \ complex numbers. \nThe function should work for both real and complex numbers.\
    \ \nThe function should work for both real and complex numbers. \nThe function\
    \ should work for both real and complex numbers. \nThe function should work for\
    \ both real and complex numbers. \nThe function should work for both real and\
    \ complex numbers. \nThe function should work for both real and complex numbers.\
    \ \nThe function should work for both real and complex numbers. \nThe function\
    \ should work for both real and complex numbers. \nThe function should work for\
    \ both real and complex numbers. \nThe function should work for both real and\
    \ complex numbers. \nThe function should work for both real and complex numbers.\
    \ \nThe function should work for both real and complex numbers. \nThe function\
    \ should work for both real and complex numbers. \nThe function should work for\
    \ both real and complex numbers. \nThe function should work for both real and\
    \ complex numbers. \nThe function should work for both real and complex numbers.\
    \ \nThe function should work for both real and complex numbers. \nThe function\
    \ should work for both real and complex numbers. \nThe function should work for\
    \ both real and \nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp36tb7dvq.jl:12\nin expression starting at\
    \ /tmp/tmp36tb7dvq.jl:12\n"
  stdout: ''
  timestamp: 1659749296
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[2::2]\n    even.+=(odd.+0)\n    return\
    \ even\nend\n</cell>\n<code language=julia-1.0>\n@assert add([1]) == [2]\n@assert\
    \ add([1,2,3]) == [2,4,6]\n@assert add([1,2,3,4,5]) == [2,4,6,8,10]\n@assert add([1,2,3,4,5,6,7,8,9,10])\
    \ == [2,4,6,8,10,12,14,16,18,20]\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ called add_all that takes in a list of integers and returns the sum of all the\
    \ even numbers in the list. Also return the sum of all the odd numbers in the\
    \ list.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprj4g9asz.jl:12\nin expression starting at\
    \ /tmp/tmprj4g9asz.jl:12\n"
  stdout: ''
  timestamp: 1659749296
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[2::2]\n    even.+=(odd.+=0)\n    return\
    \ even\nend\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg61ksb8t.jl:12\nin expression starting at\
    \ /tmp/tmpg61ksb8t.jl:12\n"
  stdout: ''
  timestamp: 1659749296
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = map(add, evens)\n    return sum(evens)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpu0li4sxf.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpu0li4sxf.jl:17\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  MethodError: no method matching add(::Int64)\n\
    \  Closest candidates are:\n    add(!Matched::Vector{Int64}) at /tmp/tmpu0li4sxf.jl:6\n\
    \  Stacktrace:\n   [1] iterate\n     @ ./generator.jl:47 [inlined]\n   [2] _collect\n\
    \     @ ./array.jl:744 [inlined]\n   [3] collect_similar\n     @ ./array.jl:653\
    \ [inlined]\n   [4] map\n     @ ./abstractarray.jl:2867 [inlined]\n   [5] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpu0li4sxf.jl:9\n   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpu0li4sxf.jl:17 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpu0li4sxf.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpu0li4sxf.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  MethodError: no method matching add(::Int64)\n\
    \  Closest candidates are:\n    add(!Matched::Vector{Int64}) at /tmp/tmpu0li4sxf.jl:6\n\
    \  Stacktrace:\n   [1] iterate\n     @ ./generator.jl:47 [inlined]\n   [2] _collect\n\
    \     @ ./array.jl:744 [inlined]\n   [3] collect_similar\n     @ ./array.jl:653\
    \ [inlined]\n   [4] map\n     @ ./abstractarray.jl:2867 [inlined]\n   [5] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpu0li4sxf.jl:9\n   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpu0li4sxf.jl:18 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpu0li4sxf.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpu0li4sxf.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([4, 0, 6, 7]) == 0\n  MethodError: no method matching add(::Int64)\n\
    \  Closest candidates are:\n    add(!Matched::Vector{Int64}) at /tmp/tmpu0li4sxf.jl:6\n\
    \  Stacktrace:\n   [1] iterate\n     @"
  timestamp: 1659749292
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[1 : (end-1)]\n    odds = lst[(end-1) : end]\n    evens + sum(odds)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88])\
    \ == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpr3w6n42w.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpr3w6n42w.jl:16\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  MethodError: no method matching +(::Vector{Int64},\
    \ ::Int64)\n  For element-wise addition, use broadcasting with dot syntax: array\
    \ .+ scalar\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n    +(!Matched::T,\
    \ ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32,\
    \ UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:87\n \
    \   +(!Matched::T, ::Integer) where T<:AbstractChar at /shared/centos7/julia/1.7.3/share/julia/base/char.jl:237\n\
    \    ...\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmpr3w6n42w.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr3w6n42w.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr3w6n42w.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpr3w6n42w.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  MethodError: no method matching +(::Vector{Int64},\
    \ ::Int64)\n  For element-wise addition, use broadcasting with dot syntax: array\
    \ .+ scalar\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n    +(!Matched::T,\
    \ ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32,\
    \ UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:87\n \
    \   +(!Matched::T, ::Integer) where T<:AbstractChar at /shared/centos7/julia/1.7.3/share/julia/base/char.jl:237\n\
    \    ...\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmpr3w6n42w.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp"
  timestamp: 1659749298
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = \nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoze4twnj.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoze4twnj.jl:1\n\
    in expression starting at /tmp/tmpoze4twnj.jl:1\n"
  stdout: ''
  timestamp: 1659749284
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[1::2]\n    even.+=(odd.+=1)\n    return\
    \ even\nend\n</cell>\n<code language=julia-1.5>\n@assert add([1]) == [2]\n@assert\
    \ add([1,2,3]) == [2,4,6]\n@assert add([1,2,3,4,5]) == [2,4,6,8,10]\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the product of the even elements\
    \ of a given list. \nWrite a function that returns the product of the odd elements\
    \ of a given list. \nWrite a function that returns the product of the even and\
    \ odd elements of a given list. \nWrite a function that returns the product of\
    \ the even and even elements of a given list. \nWrite a function that returns\
    \ the product of the odd elements of a given list. \nWrite a function that returns\
    \ the product of the even and odd elements of a given list. \nWrite a function\
    \ that returns the product of the even and even elements of a given list. \nWrite\
    \ a function that returns the product of the odd elements of a given list. \n\
    Write a function that returns the product of the even and odd elements of a given\
    \ list. \nWrite a function that returns the product of the even and even elements\
    \ of a given list. \nWrite a function that returns the product of the odd elements\
    \ of a given list. \nWrite a function that returns the product of the even and\
    \ odd elements of a given list. \nWrite a function that returns the product of\
    \ the even and even elements of a given list. \nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9kyt4f90.jl:12\nin expression starting at\
    \ /tmp/tmp9kyt4f90.jl:12\n"
  stdout: ''
  timestamp: 1659749296
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[2::2]\n    return sum(even) + sum(odd)\n\
    end\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t\
    @test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\
    \t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsk3hjbga.jl:11\nin expression starting at\
    \ /tmp/tmpsk3hjbga.jl:11\n"
  stdout: ''
  timestamp: 1659749296
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x ->\
    \ x % 2 != 0, lst)]\n    even.+ odd.\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpc6gcdoci.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpc6gcdoci.jl:1\n\
    in expression starting at /tmp/tmpc6gcdoci.jl:1\n"
  stdout: ''
  timestamp: 1659749289
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1 : (end-1)]\n    odd = lst[2 : end]\n    even.+=(odd.*2)\n\
    \    return even\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpt7s829yg.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpt7s829yg.jl:17\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmpt7s829yg.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt7s829yg.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt7s829yg.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpt7s829yg.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmpt7s829yg.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt7s829yg.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scop"
  timestamp: 1659749291
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[1::2]\n    even.+=(odd.-even)\n    return\
    \ even\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpsndbm6dj.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpsndbm6dj.jl:17\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  TypeError: in typeassert, expected\
    \ Type, got a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpsndbm6dj.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsndbm6dj.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsndbm6dj.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpsndbm6dj.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  TypeError: in typeassert, expected\
    \ Type, got a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpsndbm6dj.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsndbm6dj.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsndbm6dj.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpsndbm6dj.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([4, 0, 6, 7]) == 0\n  TypeError: in typeassert, expected Type, got\
    \ a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmpsndbm6dj.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsndbm6dj.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsndbm6dj.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpsndbm6dj.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([4, 4, 6, 8]) == 12\n  TypeError: in typeassert, expected Type, got\
    \ a value of type Int64\n  Stacktrace:\n   [1"
  timestamp: 1659749286
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1::2]\n    odd = lst[1::2]\n    even.+=(odd.-even)\n    return\
    \ even\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpsndbm6dj.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpsndbm6dj.jl:17\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  TypeError: in typeassert, expected\
    \ Type, got a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpsndbm6dj.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsndbm6dj.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsndbm6dj.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpsndbm6dj.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  TypeError: in typeassert, expected\
    \ Type, got a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpsndbm6dj.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsndbm6dj.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsndbm6dj.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpsndbm6dj.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([4, 0, 6, 7]) == 0\n  TypeError: in typeassert, expected Type, got\
    \ a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmpsndbm6dj.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsndbm6dj.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsndbm6dj.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpsndbm6dj.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([4, 4, 6, 8]) == 12\n  TypeError: in typeassert, expected Type, got\
    \ a value of type Int64\n  Stacktrace:\n   [1"
  timestamp: 1659749286
- exit_code: 1
  program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        \"\"\"\nfunction add(lst::Vector{Int64})::Int64\
    \ \n    even = lst[1 : (end-1)]\n    odd = lst[2:end]\n    even.+=(odd.*2)\n \
    \   return even\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp6cb8ebbd.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmp6cb8ebbd.jl:17\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmp6cb8ebbd.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6cb8ebbd.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6cb8ebbd.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp6cb8ebbd.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmp6cb8ebbd.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6cb8ebbd.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scop"
  timestamp: 1659749296
