name: HumanEval_119_match_parens
language: jl
prompt: "\"\"\"\n    You are given a list of two strings, both strings consist of\
  \ open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check\
  \ if it is possible to concatenate the two strings in\n    some order, that the\
  \ resulting string will be good.\n    A string S is considered to be good if and\
  \ only if all parentheses in S\n    are balanced. For example: the string '(())()'\
  \ is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way\
  \ to make a good string, and return 'No' otherwise.\n\n    Examples:\n         \
  \   \"\"\"\nfunction match_parens(lst::Vector{String})::String \n"
tests: "using Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
  ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
  (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"]) ==\
  \ \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
  ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
  )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\"\
  , \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"\
  (\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
completions: ["    \n    if length(lst) == 0 \n        return \"No\"\n    end\n  \
    \  \n    if length(lst) == 1 \n        if lst[1] == \"(\" \n            return\
    \ \"Yes\"\n        elseif lst[1] == \")\" \n            return \"No\"\n      \
    \  else\n            return \"No\"\n        end\n    end\n    \n    stack = Vector{String}(\"\
    \")\n    \n    for str in lst \n        if str == \"(\" \n            push!(stack,\
    \ str)\n        elseif str == \")\" \n            pop!(stack)\n        else\n\
    \            if length(stack) == 0 \n                return \"No\"\n         \
    \   end\n            \n            if str == \"(\" \n                push!(stack,\
    \ str)\n            elseif str == \")\" \n                pop!(stack)\n      \
    \      else\n                if stack[length(stack)-1] == \"(\" \n           \
    \         push!(stack, str)\n                elseif str == \")\" \n          \
    \          pop!(stack)\n                else\n                    if str == stack[length(stack)-1]\
    \ \n                        pop!(stack)\n                    else\n          \
    \              if str == \"(\" \n                            push!(stack, str)\n\
    \                        elseif str == \")\" \n                            pop!(stack)\n\
    \                        else\n                            if str == stack[length(stack)-1]\
    \ \n                                pop!(stack)\n                            else\n\
    \                                push!(stack, str)\n                         \
    \   end\n                        end\n                    end\n              \
    \  end\n            end\n        end\n    end\n    return \"No\"\nend", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    if length(lst) == 2 \n        return\
    \ \"Yes\"\n    \n    stack = Stack()\n    \n    for s in lst \n        if s ==\
    \ '('\n            push!(stack, s)\n        else if s == ')'\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    return \"No\"\nend\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"(()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"(()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"(()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"(()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"(()\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"(()\", \"()\", \"()\", \"()\", \"()\",\
    \ \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()", "    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    good = true \n    \n    for s in lst \n        if s\
    \ == \"(\" \n            good = false \n        else \n            if s == \"\
    )\" \n                good = false \n            else \n                good =\
    \ true \n            end \n        end \n    end \n    \n    if good \n      \
    \  return \"Yes\" \n    else \n        return \"No\" \n    end \nend ", "    \n\
    \    stack = Stack()\n    stack.append(lst[1])\n    \n    for i in lst[2:end]\n\
    \        \n        if i == \"(\"\n            stack.append(i)\n        elseif\
    \ i == \")\"\n            if stack.pop() == \"(\"\n                return \"Yes\"\
    \n            else\n                return \"No\"\n            end\n        end\n\
    \    end\n    return \"No\"\nend", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    stack = Stack()\n    for s in lst\n        if s == '('\n\
    \            push!(stack, s)\n        elseif s == ')'\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    if isempty(stack)\n        return\
    \ 'Yes'\n    else\n        return 'No'\n    end\nend", "    \n    good = \"Yes\"\
    \n    bad = \"No\"\n    \n    if length(lst) == 0 \n        return bad\n    end\n\
    \    \n    if length(lst) == 1 \n        return good \n    end\n    \n    good\
    \ = \"Yes\"\n    bad = \"No\"\n    \n    stack = Stack()\n    \n    for x in lst\n\
    \        if x == \"(\"\n            push!(stack, x)\n        elseif x == \")\"\
    \n            if isempty(stack)\n                return bad\n            else\n\
    \                pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return bad\n            else\n                pop!(stack)\n \
    \           end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ good\n    else\n        return bad\n    end\nend", "    \n    good = \"Yes\"\
    \n    bad = \"No\"\n    \n    \n    if length(lst) == 0 \n        return bad\n\
    \    end\n    \n    if length(lst) == 1 \n        if lst[1] == \"(\" || lst[1]\
    \ == \"[\" || lst[1] == \"{\" \n            return good\n        else\n      \
    \      return bad\n        end\n    end\n    \n    if lst[1] == \"(\" || lst[1]\
    \ == \"[\" || lst[1] == \"{\" \n        \n        if match_parens(lst[2:end-1])\
    \ == good\n            return good\n        else\n            return bad\n   \
    \     end\n    end\n    \n    if lst[1] == \"(\" || lst[1] == \"[\" || lst[1]\
    \ == \"{\" \n        \n        if match_parens(lst[2:end-1]) == bad\n        \
    \    return bad\n        else\n            return good\n        end\n    end\n\
    \    \n    if lst[1] == \"(\" || lst[1] == \"[\" || lst[1] == \"{\" \n       \
    \ \n        if match_parens(lst[2:end-1]) == bad\n            return bad\n   \
    \     else\n            return good\n        end\n    end\n    \n    if lst[1]\
    \ == \"(\" || lst[1] == \"[\" || lst[1] == \"{\" \n        \n        if match_parens(lst[2:end-1])\
    \ == bad\n            return bad\n        else\n            return good\n    \
    \    end\n    end\n    \n    if lst[1] == \"(\" || lst[1] == \"[\" || lst[1] ==\
    \ \"{\" \n        \n        if match_parens(lst[2:end-1]) == bad\n           \
    \ return bad\n        else\n            return good\n        end\n    end\n  \
    \  \n    if lst[1] == \"(\" || lst[1] == \"[\" || lst[1] == \"{\" \n        \n\
    \        if match_parens(lst[2:end-1]) == bad\n            return bad\n      \
    \  else\n            return good\n        end\n    end\n    \n    if lst[1] ==\
    \ \"(\" || lst[1] == \"[\" || lst[1] == \"{\" \n        \n        if match_parens(lst[2:end-1])\
    \ == bad\n            return bad\n        else\n            return good\n    \
    \    end\n    end\n    \n    if lst[1] == \"(\" || lst[1] == \"[\" || lst[1] ==\
    \ \"{\" \n        \n        if match_parens(lst[2:end-1]) == bad\n           \
    \ return bad\n        else\n            return good\n        end\n    end\n  \
    \  \n    if lst[1] == \"(\" || lst[1] == \"[\" || lst[1] == \"{\" \n        \n\
    \        if match_parens(lst[2:end-1]) == bad\n            return bad\n      \
    \  else\n            return good\n        end\n    end\n    \n    if lst[1] ==\
    \ \"(\" || lst[1] == \"[\" || lst[1] == \"{\" \n        \n        if match_parens(lst[2:end-1])\
    \ == bad\n            return bad\n        else\n            return good\n    \
    \    end\n    end\n    \n    if lst[1] == \"", "    \n    stack = Stack()\n  \
    \  \n    for s in lst\n        if s == '('\n            push!(stack, s)\n    \
    \    elseif s == ')'\n            if isempty(stack)\n                return 'No'\n\
    \            else\n                pop!(stack)\n            end\n        else\n\
    \            if isempty(stack)\n                return 'No'\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    \n  \
    \  if isempty(stack)\n        return 'Yes'\n    else\n        return 'No'\n  \
    \  end\nend", "    stack = Stack()\n    for s in lst\n        if s == '('\n  \
    \          push!(stack, s)\n        elseif s == ')'\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    if isempty(stack)\n        return\
    \ 'Yes'\n    else\n        return 'No'\n    end\nend", "    lst = sort(lst)\n\
    \    parens = Dict{String, Int}()\n    for s in lst\n        if parens[s] == 0\n\
    \            parens[s] = -1\n        else\n            parens[s] += 1\n      \
    \  end\n    end\n    \n    good = parens[lst[1]] == 0\n    for s in lst[2:end]\n\
    \        good &= parens[s] == 0\n    end\n    \n    if good\n        return \"\
    Yes\"\n    else\n        return \"No\"\n    end\nend", "    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    stack = Vector{String}()\n    \n    for s in\
    \ lst\n        if s == '('\n            push!(stack, s)\n        elseif s == ')'\n\
    \            if isempty(stack)\n                return 'No'\n            else\n\
    \                pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ 'Yes'\n    else\n        return 'No'\n    end\nend", "    \n    if length(lst)\
    \ == 0 \n        return \"No\"\n    \n    if length(lst) == 1 \n        if lst[1]\
    \ == \"(\" \n            return \"Yes\"\n        else \n            return \"\
    No\"\n    end\n    \n    stack = Vector{String}(\"\")\n    \n    for s in lst\
    \ \n        if s == \"(\" \n            push!(stack, s)\n        else \n     \
    \       if s == \"(\" and stack[end] == \"(\" \n                push!(stack, s)\n\
    \            else \n                if s == \"(\" and stack[end] != \")\" \n \
    \                   return \"No\"\n                else \n                   \
    \ if s == \"(\" and stack[end] == \")\" \n                        pop!(stack)\n\
    \                    else \n                        if s == \"(\" and stack[end]\
    \ == \")\" \n                            pop!(stack)\n                       \
    \     pop!(stack)\n                        else \n                           \
    \ if s == \"(\" and stack[end] != \")\" \n                                return\
    \ \"No\"\n                            else \n                                push!(stack,\
    \ s)\n                            end\n                        end\n         \
    \           end\n                end\n            end\n        end\n    end\n\
    \    \n    if stack[end] == \")\" \n        return \"Yes\"\n    else \n      \
    \  return \"No\"\n    end\nend", "    \n    stack = Stack()\n    \n    for s in\
    \ lst\n        if s == '('\n            push!(stack, s)\n        elseif s == ')'\n\
    \            if isempty(stack)\n                return 'No'\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    \n  \
    \  if isempty(stack)\n        return 'Yes'\n    else\n        return 'No'\n  \
    \  end\nend", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    stack = Stack()\n\
    \    stack.length = 0\n    \n    for s in lst\n        if s == '('\n         \
    \   push!(stack, s)\n        elseif s == ')'\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return 'No'\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    if isempty(stack)\n        return 'Yes'\n   \
    \ else\n        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"(())\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    (())\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(())\",\
    \ \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(())\", \"()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(())\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"(())\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"(())\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    (())\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(())\",\
    \ \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(())\", \"()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(())\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"(())\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"(())\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    (())\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(())\",\
    \ \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(())\", \"()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(())\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"(())\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"(())\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    (())\", \"()\"])", "    \n    if length(lst) == 0 \n        return \"No\"\n  \
    \  \n    if length(lst) == 1 \n        return \"Yes\"\n    \n    stack = Stack()\n\
    \    \n    for s in lst \n        if s == \"(\" \n            push!(stack, s)\n\
    \        else if s == \")\" \n            if isempty(stack) \n               \
    \ return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    return \"Yes\"\nend", "    \n    if length(lst)\
    \ == 0 \n        return \"No\"\n    \n    if length(lst) == 1 \n        return\
    \ lst[1]\n    \n    if lst[1] == \"(\" \n        return match_parens(lst[2:end])\n\
    \    \n    if lst[1] == \")\" \n        return match_parens(lst[1:end-1])\n  \
    \  \n    if lst[1] == \"(\" \n        return match_parens(lst[2:end])\n    \n\
    \    if lst[1] == \")\" \n        return match_parens(lst[1:end-1])\n    \n  \
    \  if lst[1] == \"(\" \n        return match_parens(lst[2:end])\n    \n    if\
    \ lst[1] == \")\" \n        return match_parens(lst[1:end-1])\n    \n    if lst[1]\
    \ == \"(\" \n        return match_parens(lst[2:end])\n    \n    if lst[1] == \"\
    )\" \n        return match_parens(lst[1:end-1])\n    \n    if lst[1] == \"(\"\
    \ \n        return match_parens(lst[2:end])\n    \n    if lst[1] == \")\" \n \
    \       return match_parens(lst[1:end-1])\n    \n    if lst[1] == \"(\" \n   \
    \     return match_parens(lst[2:end])\n    \n    if lst[1] == \")\" \n       \
    \ return match_parens(lst[1:end-1])\n    \n    if lst[1] == \"(\" \n        return\
    \ match_parens(lst[2:end])\n    \n    if lst[1] == \")\" \n        return match_parens(lst[1:end-1])\n\
    \    \n    if lst[1] == \"(\" \n        return match_parens(lst[2:end])\n    \n\
    \    if lst[1] == \")\" \n        return match_parens(lst[1:end-1])\n    \n  \
    \  if lst[1] == \"(\" \n        return match_parens(lst[2:end])\n    \n    if\
    \ lst[1] == \")\" \n        return match_parens(lst[1:end-1])\n    \n    if lst[1]\
    \ == \"(\" \n        return match_parens(lst[2:end])\n    \n    if lst[1] == \"\
    )\" \n        return match_parens(lst[1:end-1])\n    \n    if lst[1] == \"(\"\
    \ \n        return match_parens(lst[2:end])\n    \n    if lst[1] == \")\" \n \
    \       return match_parens(lst[1:end-1])\n    \n    if lst[1] == \"(\" \n   \
    \     return match_parens(lst[2:end])\n    \n    if lst[1] == \")\" \n       \
    \ return match_parens(lst[1:end-1])\n    \n    if lst[1] == \"(\" \n        return\
    \ match_parens(lst[2:end])\n    \n    if lst[1] == \")\" \n        return match_parens(lst[1:end-1])\n\
    \    \n    if lst[1] == \"(\" \n        return match_parens(lst[2:end])\n    \n\
    \    if lst[1] == \")\" \n        return match_parens(lst[1:end", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    stack = Stack()\n    for s\
    \ in lst\n        if s == '('\n            push!(stack, s)\n        elseif s ==\
    \ ')'\n            if isempty(stack)\n                return 'No'\n          \
    \  else\n                pop!(stack)\n            end\n        else\n        \
    \    if isempty(stack)\n                return 'No'\n            else\n      \
    \          pop!(stack)\n            end\n        end\n    end\n    if isempty(stack)\n\
    \        return 'Yes'\n    else\n        return 'No'\n    end\nend", "    \n \
    \   if length(lst) == 0 \n        return \"No\"\n    \n    if length(lst) == 1\
    \ \n        return \"Yes\"\n    \n    stack = Vector{String}()\n    \n    for\
    \ s in lst\n        if s == \"(\" \n            push!(stack, s)\n        else\
    \ if s == \")\" \n            if isempty(stack)\n                return \"No\"\
    \n            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    \n    if isempty(stack)\n        return \"No\"\n    else\n     \
    \   return \"Yes\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    (())\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"\
    ()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"(())\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\"(())\", \"(())\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"(())\", \"(())\", \"(())\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"(())\", \"(())\", \"(())\", \"(())\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(())\", \"(())\", \"(())\"\
    , \"(())\", \"(())\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(())\"\
    , \"(())\", \"(())\", \"(())\", \"(())\", \"(())\", \"(())\"])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"(())\", \"(())\", \"(())\", \"(())\", \"\
    (())\", \"(())\", \"(())\", \"(())\", \"(())\", \"(())\", \"(())\", \"(())\",\
    \ \"(())\", \"(())\", \"(())\", \"(())\", \"(())\", \"(())\", \"(())\", \"(())\"\
    , \"(())\", \"(())\", \"(())\", \"(())\", \"(())\", \"(())\", \"(())\", \"(())\"\
    , \"(())\", \"(())\", \"(())\", \"(())\", \"(())\", \"(())\", \"(())\", \"(())\"\
    , \"(())\", \"(())\", \"(())\", \"(())\", \"(())\", \"(())\", \"(())\", \"(())\"\
    , \"(())\", \"(())\", \"(())\", \"(())\", \"(())\", \"(())\", \"(())\", \"(())\"\
    , \"(())\", \"(())\", \"(())\", \"(())\", \"(())\", \"(())\", \"(())\", \"(())\"\
    , \"(())\", \"(())\", \"(())", "    \n    \n    if length(lst) == 0 \n       \
    \ return \"No\"\n    \n    if length(lst) == 1 \n        if lst[1] == \"(\" \n\
    \            return \"Yes\"\n        else \n            return \"No\"\n    end\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    ", "    \n    stack = Stack()\n    \n    for s in lst\n        if s\
    \ == '('\n            push!(stack, s)\n        elseif s == ')'\n            if\
    \ isempty(stack)\n                return 'No'\n            else\n            \
    \    pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ 'Yes'\n    else\n        return 'No'\n    end\nend", "    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    stack = Stack()\n    \n   \
    \ for s in lst\n        if s == '('\n            push!(stack, s)\n        elseif\
    \ s == ')'\n            if isempty(stack)\n                return 'No'\n     \
    \       else\n                pop!(stack)\n            end\n        else\n   \
    \         if isempty(stack)\n                return 'No'\n            else\n \
    \               pop!(stack)\n            end\n        end\n    end\n    \n   \
    \ if isempty(stack)\n        return 'Yes'\n    else\n        return 'No'\n   \
    \ end\nend", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    stack = Vector{String}()\n    \n    for s in lst\n        if s == '('\n\
    \            push!(stack, s)\n        elseif s == ')'\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return 'No'\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    if isempty(stack)\n        return 'Yes'\n   \
    \ else\n        return 'No'\n    end\nend", "    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    paren_stack = Stack{String}()\n    \n    for s in lst\n        if s == '('\n\
    \            paren_stack.push(s)\n        elseif s == ')'\n            if paren_stack.size\
    \ == 0\n                return 'No'\n            else\n                paren_stack.pop()\n\
    \            end\n        else\n            if paren_stack.size == 0\n       \
    \         return 'No'\n            else\n                paren_stack.pop()\n \
    \           end\n        end\n    end\n    \n    if paren_stack.size == 0\n  \
    \      return 'Yes'\n    else\n        return 'No'\n    end\nend", "    \n   \
    \ stack = Stack()\n    stack.append(lst[1])\n    \n    for i in lst[2:end]\n \
    \       if i == '('\n            stack.append(i)\n        elseif i == ')'\n  \
    \          if stack.length() == 0\n                return 'No'\n            else\n\
    \                stack.pop()\n            end\n        else\n            if stack.length()\
    \ == 0\n                return 'No'\n            else\n                stack.pop()\n\
    \            end\n        end\n    end\n    return 'Yes'\nend", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    stack = Stack()\n    for s\
    \ in lst\n        if s == '('\n            push!(stack, s)\n        elseif s ==\
    \ ')'\n            if isempty(stack)\n                return 'No'\n          \
    \  else\n                pop!(stack)\n            end\n        else\n        \
    \    if isempty(stack)\n                return 'No'\n            else\n      \
    \          pop!(stack)\n            end\n        end\n    end\n    if isempty(stack)\n\
    \        return 'Yes'\n    else\n        return 'No'\n    end\nend\n</code>\n\
    <|/ a tags=string,algorithm,language-agnostic,parentheses |>\n<| c |>\nThis is\
    \ not correct. Consider `'(())'`. The string `'(())'` is good, while the string\
    \ `'())'` is not.\n<|/ c |>\n<| c |>\nI didn't see that case. Thanks for pointing\
    \ it out. I've updated my answer.\n<|/ c |>\n<| c |>\nThis is not correct. Consider\
    \ `'(())'`. The string `'(())'` is good, while the string `'())'` is not.\n<|/\
    \ c |>\n<| c |>\nI didn't see that case. Thanks for pointing it out. I've updated\
    \ my answer.\n<|/ c |>\n<| c |>\nThis is not correct. Consider `'(())'`. The string\
    \ `'(())'` is good, while the string `'())'` is not.\n<|/ c |>\n<| a dscore=4\
    \ |>\nA simple recursive solution would be:\n<code>\ndef isGood(str)\n  str =\
    \ str[1..end-1]\n  if str == '()'\n    return true\n  else\n    return isGood(str[1..end-1])\
    \ && isGood(str[end..end-1])\n  end\nend\n</code>\n<|/ a tags=string,algorithm,language-agnostic,parentheses\
    \ |>\n<| c |>\nThis is not correct. Consider `'(())'`. The string `'(())'` is\
    \ good, while the string `'())'` is not.\n<|/ c |>\n<| c |>\nThis is not correct.\
    \ Consider `'(())'`. The string `'(())'` is good, while the string `'())'` is\
    \ not.\n<|/ c |>\n<| c |>\nThis is not correct. Consider `'(())'`. The string\
    \ `'(())'` is good, while the string `'())'` is not.\n<|/ c |>\n<| c |>\nThis\
    \ is not correct. Consider `'(())", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    stack = Stack()\n    stack.append(lst[1])\n    \n \
    \   for i in lst[2:end]\n        \n        if i == \"(\"\n            stack.append(i)\n\
    \        elseif i == \")\"\n            if stack.size == 0\n                return\
    \ \"No\"\n            else\n                popped = stack.pop()\n           \
    \     if popped == \"(\"\n                    stack.append(i)\n              \
    \  else\n                    return \"No\"\n            end\n        end\n   \
    \ end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ((\", \"()\", \"())\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ((\", \"()\", \"())\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ((\", \"()\", \"())\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ((\", \"()\", \"())\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ((\", \"()\", \"())\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ((\", \"()\", \"())\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ((\", \"()\", \"())\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ((\", \"()\", \"())\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ((\", \"()\", \"())\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ((\", \"()\", \"())\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ((\", \"()\", \"())\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ((\", \"()\", \"())\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ((\", \"()\", \"())\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ((\", \"()\", \"())\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ((\", \"()\", \"())\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ((\", \"()\", \"())\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ((\", \"()\", \"())\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ((\", \"()\", \"())\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ((\", \"()\", \"())\"])\n</cell>", "    \n    good = \"Yes\"\n    bad = \"No\"\
    \n    \n    stack = Vector{String}()\n    \n    for s in lst\n        if s ==\
    \ \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n            if\
    \ isempty(stack)\n                good = \"No\"\n            else\n          \
    \      pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                bad = \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    return good\nend", "    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    stack = Vector{String}()\n\
    \    \n    for s in lst\n        if s == '('\n            push!(stack, s)\n  \
    \      elseif s == ')'\n            if isempty(stack)\n                return\
    \ 'No'\n            else\n                pop!(stack)\n            end\n     \
    \   else\n            if isempty(stack)\n                return 'No'\n       \
    \     else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    \n    if isempty(stack)\n        return 'Yes'\n    else\n        return 'No'\n\
    \    end\nend", "    \n    lst = sort(lst)\n    \n    if length(lst) == 2 \n \
    \       return \"Yes\"\n    \n    stack = Vector{String}()\n    \n    for x in\
    \ lst\n        if x == \"(\"\n            push!(stack, x)\n        elseif x ==\
    \ \")\"\n            if isempty(stack)\n                return \"No\"\n      \
    \      else\n                pop!(stack)\n            end\n        else\n    \
    \        if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    \n  \
    \  return \"Yes\"\nend", "    stack = Stack()\n    for s in lst\n        if s\
    \ == '('\n            push!(stack, s)\n        elseif s == ')'\n            if\
    \ isempty(stack)\n                return 'No'\n            else\n            \
    \    pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return 'Yes'\nend\n</code>\n<|/ a\
    \ |>\n<| a tags=string,algorithm,language-agnostic |>\n<code>", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    stack = Vector{String}()\n\
    \    \n    for s in lst\n        if s == '('\n            push!(stack, s)\n  \
    \      elseif s == ')'\n            if isempty(stack)\n                return\
    \ 'No'\n            else\n                pop!(stack)\n            end\n     \
    \   else\n            if isempty(stack)\n                return 'No'\n       \
    \     else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    \n    if isempty(stack)\n        return 'Yes'\n    else\n        return 'No'\n\
    \    end\nend", "    stack = Stack()\n    for s in lst\n        if s == '('\n\
    \            push!(stack, s)\n        elseif s == ')'\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    if isempty(stack)\n        return\
    \ 'Yes'\n    else\n        return 'No'\n    end\nend", "    \n    stack = Stack()\n\
    \    \n    for s in lst\n        if s == '('\n            push!(stack, s)\n  \
    \      elseif s == ')'\n            if isempty(stack)\n                return\
    \ 'No'\n            else\n                pop!(stack)\n            end\n     \
    \   else\n            if isempty(stack)\n                return 'No'\n       \
    \     else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    \n    if isempty(stack)\n        return 'Yes'\n    else\n        return 'No'\n\
    \    end\nend", "    \n    good = \"Yes\"\n    bad = \"No\"\n    \n    if length(lst)\
    \ == 0 \n        return \"No\"\n    end\n    \n    stack = Stack()\n    \n   \
    \ for x in lst\n        if x == \"(\" \n            push!(stack, x)\n        elseif\
    \ x == \")\"\n            if !isempty(stack)\n                pop!(stack)\n  \
    \          else\n                good = \"No\"\n                break\n      \
    \      end\n        end\n    end\n    \n    return good\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"(()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    (()\", \"())\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(()\", \"\
    (())\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(()\", \"(()())\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(()\", \"(())()\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\"(()\", \"(())()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"(()\", \"(())()\"])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"(()\", \"(())()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"(()\", \"(())()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    (()\", \"(())()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(()\"\
    , \"(())()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(()\", \"\
    (())()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(()\", \"(())()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(()\", \"(())()\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\"(()\", \"(())()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"(()\", \"(())()\"])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"(()\", \"(())()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"(()\", \"(())()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    (()\", \"(())()\"])", "    stack = Stack()\n    for s in lst\n        if s ==\
    \ '('\n            push!(stack, s)\n        elseif s == ')'\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return 'No'\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    if isempty(stack)\n        return 'Yes'\n    else\n\
    \        return 'No'\n    end\nend\n\"\"\"\n\"\"\"\n    You are given a list of\
    \ two strings, both strings consist of open\n    parentheses '(' or close parentheses\
    \ ')' only.\n    Your job is to check if it is possible to concatenate the two\
    \ strings in\n    some order, that the resulting string will be good.\n    A string\
    \ S is considered to be good if and only if all parentheses in S\n    are balanced.\
    \ For example: the string '(())()' is good, while the string\n    '())' is not.\n\
    \    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.",
  "    stack = Stack()\n    for s in lst\n        if s == '('\n            push!(stack,\
    \ s)\n        elseif s == ')'\n            if isempty(stack)\n               \
    \ return 'No'\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    if isempty(stack)\n        return 'Yes'\n    else\n\
    \        return 'No'\n    end\nend", "    \n    if length(lst) == 0 \n       \
    \ return \"No\"\n    \n    if length(lst) == 1 \n        return match_parens(lst[1:end-1])\
    \ + lst[1]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    good = \"Yes\"\n\
    \    bad = \"No\"\n    \n    \n    if length(lst) == 2 \n        \n        if\
    \ lst[1] == \"(\" && lst[2] == \")\" \n            good = \"Yes\"\n        else\
    \ \n            bad = \"Yes\"\n        end\n        \n    else\n        \n   \
    \     bad = \"Yes\"\n    end\n    \n    return good\nend", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    lst = sort(lst)\n    \n   \
    \ if length(lst) == 0 \n        return \"No\"\n    \n    if length(lst) == 1 \n\
    \        return \"Yes\"\n    \n    if lst[1] == \"(\" \n        return match_parens(lst[2:end])\n\
    \    \n    if lst[end] == \")\" \n        return match_parens(lst[1:end-1])\n\
    \    \n    if lst[1] == \"(\" and lst[end] == \")\" \n        return match_parens(lst[2:end-1])\n\
    \    \n    if lst[1] == \"(\" and lst[end] != \")\" \n        return match_parens(lst[2:end])\n\
    \    \n    if lst[end] == \")\" and lst[1] != \"(\" \n        return match_parens(lst[2:end-1])\n\
    \    \n    if lst[end] != \")\" and lst[1] == \"(\" \n        return match_parens(lst[2:end])\n\
    \    \n    return \"No\"\nend", "    \n    stack = Stack()\n    stack.append(lst[1])\n\
    \    \n    for s in lst[2:end]\n        if s == \"(\"\n            stack.append(s)\n\
    \        elseif s == \")\"\n            if stack.length() == 0\n             \
    \   return \"No\"\n            else\n                stack.pop()\n           \
    \ end\n        else\n            if stack.length() == 0\n                return\
    \ \"No\"\n            else\n                stack.pop()\n            end\n   \
    \     end\n    end\n    return \"Yes\"\nend", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    stack = Stack()\n    for s in lst\n   \
    \     if s == '('\n            push!(stack, s)\n        elseif s == ')'\n    \
    \        if isempty(stack)\n                return 'No'\n            else\n  \
    \              pop!(stack)\n            end\n        end\n    end\n    if isempty(stack)\n\
    \        return 'Yes'\n    else\n        return 'No'\n    end\nend", "    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    lst = sort(lst)\n\
    \    \n    if length(lst) == 0 \n        return \"No\"\n    end\n    \n    if\
    \ length(lst) == 1 \n        if lst[1] == \"(\" \n            return \"Yes\"\n\
    \        elseif lst[1] == \")\" \n            return \"No\"\n        else\n  \
    \          return \"No\"\n        end\n    end\n    \n    stack = Vector{String}(\"\
    \")\n    \n    for x in lst\n        if x == \"(\" \n            push!(stack,\
    \ x)\n        elseif x == \")\" \n            if length(stack) == 0 \n       \
    \         return \"No\"\n            end\n            pop!(stack)\n        else\n\
    \            if length(stack) == 0 \n                return \"No\"\n         \
    \   end\n            push!(stack, x)\n        end\n    end\n    \n    if length(stack)\
    \ == 0 \n        return \"No\"\n    end\n    \n    return \"Yes\"\nend", "   \
    \ \n    stack = Stack()\n    \n    for s in lst\n        if s == '('\n       \
    \     push!(stack, s)\n        elseif s == ')'\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return 'No'\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    if isempty(stack)\n        return 'Yes'\n   \
    \ else\n        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"((\", \"(\", \")(\", \")\", \")(\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"(\", \"(\", \")(\", \")\", \")(\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"(\", \"(\", \")(\", \")\", \")(\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"(\", \"(\", \")(\", \")\", \")(\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"(\", \"(\", \")(\", \")\", \")(\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"(\", \"(\", \")(\", \")\", \")(\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"(\", \"(\", \")(\", \")\", \")(\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"(\", \"(\", \")(\", \")\", \")(\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"(\", \"(\", \")(\", \")\", \")(\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"(\", \"(\", \")(\", \")\", \")(\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"(\", \"(\", \")(\", \")\", \")(\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"(\", \"(\", \")(\", \")\", \")(\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"(\", \"(\", \")(\", \")\", \")(\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"(\", \"(\", \")(\", \")\", \")(\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"(\", \"(\", \")(\", \")\", \")(\"", "    \n    stack = Stack()\n\
    \    stack.append(lst[1])\n    \n    for i in lst[2:end]\n        \n        if\
    \ i == \"(\"\n            stack.append(i)\n        elseif i == \")\"\n       \
    \     if stack.length() == 0\n                return \"No\"\n            else\n\
    \                stack.pop()\n            end\n        else\n            if stack.length()\
    \ > 0 && stack[stack.length()-1] == i\n                stack.pop()\n         \
    \   else\n                return \"No\"\n            end\n        end\n    end\n\
    \    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\"", "    \n    stack = Stack()\n    stack.length = 0\n    \n    for s in lst\n\
    \        if s == '('\n            push!(stack, s)\n        elseif s == ')'\n \
    \           if isempty(stack)\n                return 'No'\n            else\n\
    \                pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ 'Yes'\n    else\n        return 'No'\n    end\nend", "    \n    lst = sort(lst)\n\
    \    \n    if length(lst) == 0 \n        return \"No\"\n    end", "    \n    stack\
    \ = Vector{String}()\n    \n    for s in lst\n        if s == '('\n          \
    \  push!(stack, s)\n        elseif s == ')'\n            if isempty(stack)\n \
    \               return 'No'\n            else\n                pop!(stack)\n \
    \           end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ 'Yes'\n    else\n        return 'No'\n    end\nend", "    \n    \n    if length(lst)\
    \ == 0 \n        return \"No\"\n    \n    if length(lst) == 1 \n        return\
    \ \"Yes\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    good = true \n    for s in lst \n        if s !~ /^\\(|\\)$/ \n         \
    \   good = false \n            break \n    end \n    if good \n        return\
    \ \"Yes\" \n    else \n        return \"No\" \n    end \nend \n\"\"\"\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    ", "    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    stack\
    \ = Stack()\n    for s in lst\n        if s == '('\n            push!(stack, s)\n\
    \        elseif s == ')'\n            if isempty(stack)\n                return\
    \ 'No'\n            else\n                pop!(stack)\n            end\n     \
    \   else\n            if isempty(stack)\n                return 'No'\n       \
    \     else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    return 'Yes'\nend", "    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    if length(lst) == 2 \n        return match_parens(lst[1:end-1]) \n    \n\
    \    if length(lst) == 1 \n        return \"No\" \n    \n    if lst[1] == \"(\"\
    \ \n        return \"Yes\" \n    \n    if lst[1] == \")\" \n        return \"\
    Yes\" \n    \n    if lst[1] == \"(\" \n        return match_parens(lst[2:end])\
    \ \n    \n    if lst[1] == \")\" \n        return match_parens(lst[1:end-1]) \n\
    \    \n    return \"No\" \nend", "    \n    stack = Stack()\n    \n    for s in\
    \ lst\n        if s == '('\n            push!(stack, s)\n        elseif s == ')'\n\
    \            if isempty(stack)\n                return 'No'\n            else\n\
    \                pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ 'Yes'\n    else\n        return 'No'\n    end\nend", "    \n    stack = Stack()\n\
    \    \n    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n\
    \        elseif s == \")\"\n            if isempty(stack)\n                return\
    \ \"No\"\n            else\n                pop!(stack)\n            end\n   \
    \     else\n            if isempty(stack)\n                return \"No\"\n   \
    \         else\n                pop!(stack)\n            end\n        end\n  \
    \  end\n    \n    return \"Yes\"\nend", "    \n    paren_stack = Stack()\n   \
    \ \n    for s in lst\n        if s == '('\n            paren_stack.push(s)\n \
    \       elseif s == ')'\n            if paren_stack.size == 0\n              \
    \  return 'No'\n            else\n                paren_stack.pop()\n        \
    \    end\n        else\n            if paren_stack.size == 0\n               \
    \ return 'No'\n            else\n                paren_stack.pop()\n         \
    \   end\n        end\n    end\n    \n    return 'Yes'\nend", "    \n    paren_count\
    \ = Dict{String,Int}()\n    \n    for s in lst\n        paren_count[s] = paren_count[s]\
    \ + 1 if s in \"()\" else 0\n    end\n    \n    if paren_count[\"()\"] == paren_count[\"\
    ()\"]\n        return \"Yes\"\n    else\n        return \"No\"\n    end\nend",
  "    \n    stack = Stack()\n    \n    for s in lst\n        if s == '('\n      \
    \      push!(stack, s)\n        elseif s == ')'\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return 'No'\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    if isempty(stack)\n        return 'Yes'\n   \
    \ else\n        return 'No'\n    end\nend", "    \n    paren_stack = Stack{String}()\n\
    \    paren_stack.push(\"(\")\n    paren_stack.push(\")\")\n    \n    good_string\
    \ = \"Yes\"\n    \n    for s in lst\n        if paren_stack.top() == \"(\"\n \
    \           if s == \"(\"\n                paren_stack.push(\")\")\n         \
    \   else\n                paren_stack.push(\"(\")\n        end\n        if paren_stack.top()\
    \ == \")\"\n            if s == \")\"\n                paren_stack.pop()\n   \
    \         else\n                paren_stack.pop()\n        end\n    end\n    \n\
    \    if paren_stack.top() != \"(\"\n        good_string = \"No\"\n    end\n  \
    \  \n    return good_string\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    (()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(()\", \"\
    ()\", \"(())\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(()\", \"\
    ()\", \"(())\", \"()()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    (()\", \"()\", \"(())\", \"()()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"(()\", \"()\", \"(())\", \"()()\", \"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"(()\", \"()\", \"(())\", \"()()\",\
    \ \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    (()\", \"()\", \"(())\", \"()()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"(()\", \"()\", \"(())\", \"()()\",\
    \ \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"(()\", \"()\", \"(())\", \"()()\", \"()\", \"()\", \"()\", \"\
    ()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(()\", \"\
    ()\", \"(())\", \"()()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"(()\", \"()\", \"(())\", \"()()\",\
    \ \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"(()\", \"()\", \"(())\", \"()()\", \"()\", \"()\", \"()\", \"",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    stack = Stack()\n\
    \    stack = Stack(lst)\n    \n    if length(stack) == 0 \n        return \"No\"\
    \n    \n    \n    if length(stack) == 1 \n        if isequal(stack.pop(),\"(\"\
    )\n            return \"Yes\"\n        else\n            return \"No\"\n    end\n\
    \    \n    \n    if isequal(stack.pop(),\"(\")\n        \n        if isequal(stack.pop(),\"\
    )\")\n            return \"Yes\"\n        else\n            return \"No\"\n  \
    \  end\n    \n    \n    if isequal(stack.pop(),\")\")\n        \n        if isequal(stack.pop(),\"\
    (\")\n            return \"Yes\"\n        else\n            return \"No\"\n  \
    \  end\n    \n    \n    if isequal(stack.pop(),\")\")\n        \n        if isequal(stack.pop(),\"\
    )\")\n            return \"Yes\"\n        else\n            return \"No\"\n  \
    \  end\n    \n    \n    if isequal(stack.pop(),\")\")\n        \n        if isequal(stack.pop(),\"\
    (\")\n            return \"Yes\"\n        else\n            return \"No\"\n  \
    \  end\n    \n    \n    if isequal(stack.pop(),\")\")\n        \n        if isequal(stack.pop(),\"\
    )\")\n            return \"Yes\"\n        else\n            return \"No\"\n  \
    \  end\n    \n    \n    if isequal(stack.pop(),\")\")\n        \n        if isequal(stack.pop(),\"\
    )\")\n            return \"Yes\"\n        else\n            return \"No\"\n  \
    \  end\n    \n    \n    if isequal(stack.pop(),\")\")\n        \n        if isequal(stack.pop(),\"\
    )\")\n            return \"Yes\"\n        else\n            return \"No\"\n  \
    \  end\n    \n    \n    if isequal(stack.pop(),\")\")\n        \n        if isequal(stack.pop(),\"\
    )\")\n            return \"Yes\"\n        else\n            return \"No\"\n  \
    \  end\n    \n    \n    if isequal(stack.pop(),\")\")\n        \n        if isequal(stack.pop(),\"\
    )\")\n            return \"Yes\"\n        else\n            return \"No\"\n  \
    \  end\n    \n    \n    if isequal(stack.pop(),\")\")\n        \n        if isequal(stack.pop(),\"\
    )\")\n            return \"Yes\"\n        else\n            return \"No\"\n  \
    \  end\n    \n    \n    if isequal(stack.pop(),\")\")\n        \n        if isequal(stack.pop(),\"\
    )\")\n            return \"Yes\"\n        else\n            return \"No\"\n  \
    \  end\n    \n    \n    if isequal(stack.pop(),\")\")\n        \n        if isequal(stack.pop(),\"\
    )\")\n            return \"Yes\"\n        else\n            return \"No\"\n  \
    \  end\n    \n    \n    if isequal(stack.pop(),\")\")\n        \n        if isequal(stack",
  "    \n    stack = Stack()\n    \n    for s in lst\n        if s == '('\n      \
    \      push!(stack, s)\n        elseif s == ')'\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return 'No'\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    if isempty(stack)\n        return 'Yes'\n   \
    \ else\n        return 'No'\n    end\nend", "    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    stack = Stack()\n    \n    for s in lst\n        if s ==\
    \ '('\n            push!(stack, s)\n        elseif s == ')'\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ 'Yes'\n    else\n        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"(())\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    (())\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    (())\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    (())\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"(())\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"(())\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    (())\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(())\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()", "    \n    \n    if length(lst) == 0 \n        return 'No'\n    \n  \
    \  \n    if length(lst) == 1 \n        if lst[0] == '(' or lst[0] == ')' \n  \
    \          return 'Yes'\n        else\n            return 'No'\n    end\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    if length(lst) == 0 \n        return \"No\"\n    \n    if length(lst) ==\
    \ 1 \n        return \"Yes\"\n    \n    stack = Vector{String}()\n    \n    for\
    \ s in lst \n        if s == \"(\" \n            push!(stack, s)\n        else\
    \ \n            if s == \")\" \n                if isempty(stack) \n         \
    \           return \"No\"\n                else\n                    pop!(stack)\n\
    \                end\n            else\n                if isempty(stack) \n \
    \                   return \"No\"\n                else\n                    push!(stack,\
    \ s)\n                end\n            end\n        end\n    end\n    \n    if\
    \ isempty(stack) \n        return \"No\"\n    else\n        return \"Yes\"\n \
    \   end\nend", "    \n    stack = Stack()\n    for s in lst\n        if s == \"\
    (\"\n            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return \"Yes\"\nend", "    stack = Stack()\n    for\
    \ s in lst\n        if s == '('\n            push!(stack, s)\n        elseif s\
    \ == ')'\n            if isempty(stack)\n                return 'No'\n       \
    \     else\n                pop!(stack)\n            end\n        else\n     \
    \       if isempty(stack)\n                return 'No'\n            else\n   \
    \             pop!(stack)\n            end\n        end\n    end\n    if isempty(stack)\n\
    \        return 'Yes'\n    else\n        return 'No'\n    end\nend\n\"\"\"\n \
    \   You are given a list of two strings, both strings consist of open\n    parentheses\
    \ '(' or close parentheses ')' only.\n    Your job is to check if it is possible\
    \ to concatenate the two strings in\n    some order, that the resulting string\
    \ will be good.\n    A string S is considered to be good if and only if all parentheses\
    \ in S\n    are balanced. For example: the string '(())()' is good, while the\
    \ string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good\
    \ string, and return 'No' otherwise.", "    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    stack = Stack()\n    \n    for s in lst\n   \
    \     if s == '('\n            push!(stack, s)\n        elseif s == ')'\n    \
    \        if isempty(stack)\n                return 'No'\n            else\n  \
    \              pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ 'Yes'\n    else\n        return 'No'\n    end\nend", "    \n    good = \"Yes\"\
    \n    bad = \"No\"\n    \n    if length(lst) == 2 \n        if lst[1] == \"(\"\
    \ && lst[2] == \")\" \n            return \"Yes\"\n        elseif lst[1] == \"\
    (\" && lst[2] == \"(\" \n            return \"Yes\"\n        elseif lst[1] ==\
    \ \"(\" && lst[2] == \"(\" \n            return \"Yes\"\n        elseif lst[1]\
    \ == \"(\" && lst[2] == \")\" \n            return \"Yes\"\n        elseif lst[1]\
    \ == \"(\" && lst[2] == \")\" \n            return \"Yes\"\n        elseif lst[1]\
    \ == \"(\" && lst[2] == \"(\" \n            return \"Yes\"\n        elseif lst[1]\
    \ == \"(\" && lst[2] == \")\" \n            return \"Yes\"\n        elseif lst[1]\
    \ == \"(\" && lst[2] == \"(\" \n            return \"Yes\"\n        elseif lst[1]\
    \ == \"(\" && lst[2] == \")\" \n            return \"Yes\"\n        elseif lst[1]\
    \ == \"(\" && lst[2] == \"(\" \n            return \"Yes\"\n        elseif lst[1]\
    \ == \"(\" && lst[2] == \")\" \n            return \"Yes\"\n        elseif lst[1]\
    \ == \"(\" && lst[2] == \"(\" \n            return \"Yes\"\n        elseif lst[1]\
    \ == \"(\" && lst[2] == \")\" \n            return \"Yes\"\n        elseif lst[1]\
    \ == \"(\" && lst[2] == \"(\" \n            return \"Yes\"\n        elseif lst[1]\
    \ == \"(\" && lst[2] == \")\" \n            return \"Yes\"\n        elseif lst[1]\
    \ == \"(\" && lst[2] == \"(\" \n            return \"Yes\"\n        elseif lst[1]\
    \ == \"(\" && lst[2] == \")\" \n            return \"Yes\"\n        elseif lst[1]\
    \ == \"(\" && lst[2] == \"(\" \n            return \"Yes\"\n        elseif lst[1]\
    \ == \"(\" && lst[2] == \")\" \n            return \"Yes\"\n        elseif lst[1]\
    \ == \"(\" && lst[2] == \"(\" \n            return \"Yes\"\n        elseif lst[1]\
    \ == \"(\" && lst[2] == \")\" \n            return \"Yes\"\n        elseif lst[1]\
    \ == \"(\" && lst[2] == \"(\" \n            return \"Yes\"\n        elseif lst[1]\
    \ == \"(\" && lst[2] == \")\" \n            return \"Yes\"\n        elseif lst[1]\
    \ == \"(\" && lst[2] == \"(\" \n            return \"Yes\"\n        elseif lst[1]\
    \ == \"(\" && lst[2] == \")\" \n            return \"Yes\"\n        elseif lst[1]\
    \ == \"(\" && lst[2] == \"(\" \n            return \"Yes\"\n        elseif lst[1]\
    \ == \"(\" && lst[2] == \")\" \n            return \"Yes\"\n        elseif lst[1]\
    \ == \"(\" && lst[2] == \"(\" \n            return \"Yes\"\n        elseif lst[1]\
    \ == \"(\" && lst[2] == \")\" \n            return \"Yes", "    \n    stack =\
    \ Stack()\n    stack.append(lst[1])\n    \n    for i in 2:length(lst)\n      \
    \  if lst[i] == '('\n            stack.append(lst[i])\n        elseif lst[i] ==\
    \ ')'\n            if !isempty(stack)\n                popped = stack.pop()\n\
    \                if popped == lst[i]\n                    return 'Yes'\n     \
    \           else\n                    return 'No'\n                end\n     \
    \       else\n                return 'No'\n            end\n        end\n    end\n\
    \    return 'No'\nend", "    \n    stack = Stack()\n    for s in lst\n       \
    \ if s == '('\n            push!(stack, s)\n        elseif s == ')'\n        \
    \    if isempty(stack)\n                return 'No'\n            else\n      \
    \          pop!(stack)\n            end\n        end\n    end\n    if isempty(stack)\n\
    \        return 'Yes'\n    else\n        return 'No'\n    end\nend", "    \n \
    \   stack = Stack()\n    \n    for s in lst\n        if s == '('\n           \
    \ push!(stack, s)\n        elseif s == ')'\n            if isempty(stack)\n  \
    \              return 'No'\n            else\n                pop!(stack)\n  \
    \          end\n        else\n            if isempty(stack)\n                return\
    \ 'No'\n            else\n                pop!(stack)\n            end\n     \
    \   end\n    end\n    \n    if isempty(stack)\n        return 'Yes'\n    else\n\
    \        return 'No'\n    end\nend", "    stack = Vector{String}()\n    for s\
    \ in lst\n        if s == \"(\"\n            push!(stack, s)\n        elseif s\
    \ == \")\"\n            if isempty(stack)\n                return \"No\"\n   \
    \         else\n                pop!(stack)\n            end\n        end\n  \
    \  end\n    return \"Yes\"\nend", "    lst = sort(lst)\n    i = 0\n    j = length(lst)\n\
    \    while i < j\n        if lst[i] == '('\n            i += 1\n        elseif\
    \ lst[i] == ')'\n            j -= 1\n        else\n            i += 1\n      \
    \  end\n    end\n    if i == j\n        return 'Yes'\n    else\n        return\
    \ 'No'\n    end\nend", "    stack = Stack()\n    for s in lst\n        if s ==\
    \ \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n            if\
    \ isempty(stack)\n                return \"No\"\n            else\n          \
    \      pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend", "    \n    stack\
    \ = Stack()\n    \n    for s in lst\n        if s == '('\n            push!(stack,\
    \ s)\n        elseif s == ')'\n            if isempty(stack)\n               \
    \ return 'No'\n            else\n                pop!(stack)\n            end\n\
    \        else\n            if isempty(stack)\n                return 'No'\n  \
    \          else\n                pop!(stack)\n            end\n        end\n \
    \   end\n    \n    if isempty(stack)\n        return 'Yes'\n    else\n       \
    \ return 'No'\n    end\nend", "    \n    stack = Vector{String}()\n    \n    for\
    \ s in lst\n        if s == '('\n            push!(stack, s)\n        elseif s\
    \ == ')'\n            if isempty(stack)\n                return 'No'\n       \
    \     else\n                pop!(stack)\n            end\n        else\n     \
    \       if isempty(stack)\n                return 'No'\n            else\n   \
    \             pop!(stack)\n            end\n        end\n    end\n    \n    if\
    \ isempty(stack)\n        return 'Yes'\n    else\n        return 'No'\n    end\n\
    end", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    if\
    \ length(lst) == 2 \n        \n        if lst[1] == '(' && lst[2] == ')' \n  \
    \          return 'Yes'\n        elseif lst[1] == '(' && lst[2] == '('\n     \
    \       return 'No'\n        elseif lst[1] == ')' && lst[2] == ')' \n        \
    \    return 'No'\n        elseif lst[1] == ')' && lst[2] == '('\n            return\
    \ 'No'\n        elseif lst[1] == '(' && lst[2] == '('\n            return 'No'\n\
    \        elseif lst[1] == '(' && lst[2] == ')' \n            return 'No'\n   \
    \     elseif lst[1] == '(' && lst[2] == '('\n            return 'No'\n       \
    \ elseif lst[1] == '(' && lst[2] == ')' \n            return 'No'\n        elseif\
    \ lst[1] == '(' && lst[2] == '('\n            return 'No'\n        elseif lst[1]\
    \ == '(' && lst[2] == ')' \n            return 'No'\n        elseif lst[1] ==\
    \ '(' && lst[2] == '('\n            return 'No'\n        elseif lst[1] == '('\
    \ && lst[2] == ')' \n            return 'No'\n        elseif lst[1] == '(' &&\
    \ lst[2] == '('\n            return 'No'\n        elseif lst[1] == '(' && lst[2]\
    \ == ')' \n            return 'No'\n        elseif lst[1] == '(' && lst[2] ==\
    \ '('\n            return 'No'\n        elseif lst[1] == '(' && lst[2] == ')'\
    \ \n            return 'No'\n        elseif lst[1] == '(' && lst[2] == '('\n \
    \           return 'No'\n        elseif lst[1] == '(' && lst[2] == ')' \n    \
    \        return 'No'\n        elseif lst[1] == '(' && lst[2] == '('\n        \
    \    return 'No'\n        elseif lst[1] == '(' && lst[2] == ')' \n           \
    \ return 'No'\n        elseif lst[1] == '(' && lst[2] == '('\n            return\
    \ 'No'\n        elseif lst[1] == '(' && lst[2] == ')' \n            return 'No'\n\
    \        elseif lst[1] == '(' && lst[2] == '('\n            return 'No'\n    \
    \    elseif lst[1] == '(' && lst[2] == ')' \n            return 'No'\n       \
    \ elseif lst[1] == '(' && lst[2] == '('\n            return 'No'\n        elseif\
    \ lst[1] == '(' && lst[2] == ')' \n            return 'No'\n        elseif lst[1]\
    \ == '(' && lst[2] == '('\n            return 'No'\n        elseif lst[1] == '('\
    \ && lst[2] == ')' \n            return 'No'\n        elseif lst[1] == '(' &&\
    \ lst[2] == '('\n            return 'No'\n        elseif lst[1] == '(' && lst[2]\
    \ == ')' \n            return 'No'\n        elseif lst[1] == '(' && lst[2] ==\
    \ '", "    \n    paren_stack = Stack{String}()\n    \n    for paren in lst\n \
    \       if paren == \"(\"\n            paren_stack.push(\"(\")\n        elseif\
    \ paren == \")\"\n            if paren_stack.size == 0\n                return\
    \ \"No\"\n            else\n                paren_stack.pop()\n            end\n\
    \        else\n            if paren_stack.size == 0\n                return \"\
    No\"\n            else\n                paren_stack.push(\"(\")\n            end\n\
    \        end\n    end\n    \n    if paren_stack.size == 0\n        return \"Yes\"\
    \n    else\n        return \"No\"\n    end\nend", "    \n    stack = Vector{String}()\n\
    \    \n    for s in lst\n        if s == '('\n            push!(stack, s)\n  \
    \      elseif s == ')'\n            if isempty(stack)\n                return\
    \ 'No'\n            else\n                pop!(stack)\n            end\n     \
    \   else\n            if isempty(stack)\n                return 'No'\n       \
    \     else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    \n    if isempty(stack)\n        return 'Yes'\n    else\n        return 'No'\n\
    \    end\nend", "    \n    stack = Vector{String}()\n    \n    for s in lst\n\
    \        if s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\
    \n            if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    lst = sort(lst)\n    \n   \
    \ if length(lst) == 0 or length(lst) == 1 \n        return \"No\"\n    end", " \
    \   \n    if length(lst) == 0 \n        return 'No'\n    \n    if length(lst)\
    \ == 1 \n        if lst[1] == '(' or lst[1] == '[' or lst[1] == '{' \n       \
    \     return 'Yes'\n        else \n            return 'No'\n    end\n    \n  \
    \  if lst[1] == '(' and lst[2] == ')' \n        return match_parens(lst[3:end])\n\
    \    \n    if lst[1] == '(' and lst[2] == '[' \n        return match_parens(lst[3:end])\n\
    \    \n    if lst[1] == '(' and lst[2] == '{' \n        return match_parens(lst[3:end])\n\
    \    \n    if lst[1] == '[' and lst[2] == ']' \n        return match_parens(lst[3:end])\n\
    \    \n    if lst[1] == '[' and lst[2] == '{' \n        return match_parens(lst[3:end])\n\
    \    \n    if lst[1] == '{' and lst[2] == '}' \n        return match_parens(lst[3:end])\n\
    \    \n    if lst[1] == '{' and lst[2] == '(' \n        return match_parens(lst[3:end])\n\
    \    \n    if lst[1] == '{' and lst[2] == '[' \n        return match_parens(lst[3:end])\n\
    \    \n    if lst[1] == '[' and lst[2] == '}' \n        return match_parens(lst[3:end])\n\
    \    \n    if lst[1] == '[' and lst[2] == '(' \n        return match_parens(lst[3:end])\n\
    \    \n    if lst[1] == '[' and lst[2] == '[' \n        return match_parens(lst[3:end])\n\
    \    \n    if lst[1] == '{' and lst[2] == '}' \n        return match_parens(lst[3:end])\n\
    \    \n    if lst[1] == '{' and lst[2] == '(' \n        return match_parens(lst[3:end])\n\
    \    \n    if lst[1] == '{' and lst[2] == '[' \n        return match_parens(lst[3:end])\n\
    \    \n    if lst[1] == '[' and lst[2] == '}' \n        return match_parens(lst[3:end])\n\
    \    \n    if lst[1] == '[' and lst[2] == '(' \n        return match_parens(lst[3:end])\n\
    \    \n    if lst[1] == '[' and lst[2] == '[' \n        return match_parens(lst[3:end])\n\
    \    \n    if lst[1] == '{' and lst[2] == '}' \n        return match_parens(lst[3:end])\n\
    \    \n    if lst[1] == '{' and lst[2] == '(' \n        return match_parens(lst[3:end])\n\
    \    \n    if lst[1] == '{' and lst[2] == '[' \n        return match_paren", " \
    \   \n    good = true \n    for s in lst \n        if s == \"()\" \n         \
    \   good = false \n        else \n            good = true if match_parens(s[1:end-1])\
    \ == true else false \n    end\n    if good \n        return \"Yes\" \n    else\
    \ \n        return \"No\" \n    end\nend", "    \n    stack = Stack()\n    \n\
    \    for s in lst\n        if s == '('\n            push!(stack, s)\n        elseif\
    \ s == ')'\n            if isempty(stack)\n                return 'No'\n     \
    \       else\n                pop!(stack)\n            end\n        else\n   \
    \         if isempty(stack)\n                return 'No'\n            else\n \
    \               pop!(stack)\n            end\n        end\n    end\n    \n   \
    \ if isempty(stack)\n        return 'Yes'\n    else\n        return 'No'\n   \
    \ end\nend", "    stack = Stack()\n    for s in lst\n        if s == '('\n   \
    \         push!(stack, s)\n        elseif s == ')'\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return 'No'\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return 'Yes'\nend", "    lst = sort(lst)\n    stack\
    \ = Stack()\n    for s in lst\n        if s == '('\n            push!(stack, s)\n\
    \        elseif s == ')'\n            if isempty(stack)\n                return\
    \ 'No'\n            else\n                pop!(stack)\n            end\n     \
    \   else\n            if isempty(stack)\n                return 'No'\n       \
    \     else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    if isempty(stack)\n        return 'Yes'\n    else\n        return 'No'\n\
    \    end\nend\n</code>\n<|/ a |>\n<| c |>\nThis doesn't seem to work. `match_parens([\"\
    (()\", \"())\"])` returns `No`, but `match_parens([\"(()\", \"())\", \"()\"])`\
    \ returns `Yes`.\n<|/ c |>\n<| c |>\nI added a fix for that case\n<|/ c |>\n<|\
    \ c |>\nI added a fix for that case\n<|/ c |>\n<| c |>\nI added a fix for that\
    \ case\n<|/ c |>\n<| c |>\nI added a fix for that case\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "    \n    stack = Stack()\n    \n    for s in lst\n        if\
    \ s == '('\n            push!(stack, s)\n        elseif s == ')'\n           \
    \ if isempty(stack)\n                return 'No'\n            else\n         \
    \       pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ 'Yes'\n    else\n        return 'No'\n    end\nend", "    \n    if length(lst)\
    \ == 0 \n        return \"No\"\n    \n    if length(lst) == 1 \n        return\
    \ \"Yes\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    if length(lst)\
    \ == 0 \n        return \"No\"\n    end\n    \n    if length(lst) == 1 \n    \
    \    return lst[1]\n    end\n    \n    stack = Stack()\n    \n    for s in lst\n\
    \        if s == \"(\" \n            push!(stack, s)\n        elseif s == \")\"\
    \ \n            pop!(stack)\n        elseif s == \")\" and stack.length > 0 \n\
    \            pop!(stack)\n        elseif s == \"(\" and stack.length > 0 \n  \
    \          push!(stack, s)\n        else\n            return \"No\"\n        end\n\
    \    end\n    \n    if stack.length == 0 \n        return \"Yes\"\n    end\n \
    \   \n    return \"No\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    (())\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(())\",\
    \ \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(())\"\
    , \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    (())\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"(())\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"(())\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(())\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"(())\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(())\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"", "    lst = sort(lst)\n    paren_count =\
    \ 0\n    open_count = 0\n    close_count = 0\n    for x in lst\n        if x ==\
    \ '('\n            open_count += 1\n        elseif x == ')'\n            close_count\
    \ += 1\n        elseif x == '('\n            open_count += 1\n        elseif x\
    \ == ')'\n            close_count += 1\n        else\n            paren_count\
    \ += 1\n        end\n    end\n    if open_count != close_count\n        return\
    \ \"No\"\n    end\n    if open_count == close_count\n        return \"Yes\"\n\
    \    end\n    if open_count > close_count\n        return \"Yes\"\n    end\n \
    \   return \"No\"\nend", "    \n    lst = sort(lst)\n    \n    if length(lst)\
    \ == 0 \n        return \"No\"\n    \n    if length(lst) == 1 \n        return\
    \ \"Yes\"\n    \n    if lst[1] == \"(\" \n        return match_parens(lst[2:end])\n\
    \    \n    if lst[end] == \")\" \n        return match_parens(lst[1:end-1])\n\
    \    \n    if lst[1] == \"(\" and lst[end] == \")\" \n        return match_parens(lst[2:end-1])\n\
    \    \n    if lst[1] == \"(\" and lst[end] != \"(\" \n        return \"No\"\n\
    \    \n    if lst[end] == \")\" and lst[1] != \"(\" \n        return \"No\"\n\
    \    \n    if lst[1] == \"(\" and lst[end] != \"(\" \n        return \"No\"\n\
    \    \n    if lst[end] == \")\" and lst[1] != \"(\" \n        return \"No\"\n\
    \    \n    if lst[1] == \"(\" and lst[end] != \"(\" \n        return \"No\"\n\
    \    \n    if lst[end] == \")\" and lst[1] != \"(\" \n        return \"No\"\n\
    \    \n    if lst[1] == \"(\" and lst[end] != \"(\" \n        return \"No\"\n\
    \    \n    if lst[end] == \")\" and lst[1] != \"(\" \n        return \"No\"\n\
    \    \n    if lst[1] == \"(\" and lst[end] != \"(\" \n        return \"No\"\n\
    \    \n    if lst[end] == \")\" and lst[1] != \"(\" \n        return \"No\"\n\
    \    \n    if lst[1] == \"(\" and lst[end] != \"(\" \n        return \"No\"\n\
    \    \n    if lst[end] == \")\" and lst[1] != \"(\" \n        return \"No\"\n\
    \    \n    if lst[1] == \"(\" and lst[end] != \"(\" \n        return \"No\"\n\
    \    \n    if lst[end] == \")\" and lst[1] != \"(\" \n        return \"No\"\n\
    \    \n    if lst[1] == \"(\" and lst[end] != \"(\" \n        return \"No\"\n\
    \    \n    if lst[end] == \")\" and lst[1] != \"(\" \n        return \"No\"\n\
    \    \n    if lst[1] == \"(\" and lst[end] != \"(\" \n        return \"No\"\n\
    \    \n    if lst[end] == \")\" and lst[1] != \"(\" \n        return \"No\"\n\
    \    \n    if lst[1] == \"(\" and lst[end] != \"(\" \n        return \"No\"\n\
    \    \n    if lst[end] == \")\" and lst[1] != \"(\" \n        return \"No\"\n\
    \    \n    if lst[1] == \"(\" and lst[end] != \"(\" \n        return \"No\"\n\
    \    \n    if lst[end] == \")", "    stack = Stack()\n    for s in lst\n     \
    \   if s == '('\n            push!(stack, s)\n        elseif s == ')'\n      \
    \      if isempty(stack)\n                return 'No'\n            else\n    \
    \            pop!(stack)\n            end\n        end\n    end\n    if isempty(stack)\n\
    \        return 'Yes'\n    else\n        return 'No'\n    end\nend\n</code>\n\
    <|/ a tags=string,algorithm,pattern-matching,haskell |>\n<| c |>\nThis doesn't\
    \ seem to work. `match_parens [\"(()\", \"())\"]` returns `\"No\"` instead of\
    \ `\"Yes\"`.\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing it out.\n\
    <|/ c |>\n<| a dscore=0 |>\nI wrote a solution in Haskell that uses recursion\
    \ and pattern matching to solve this problem. \n<code>\nimport Data.List", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    stack = Stack()\n\
    \    stack.append(lst[1])\n    \n    for elem in lst[2:end]\n        if elem ==\
    \ \"(\"\n            stack.append(elem)\n        elseif elem == \")\"\n      \
    \      if stack.pop() != elem\n                return \"No\"\n            else\n\
    \                stack.pop()\n            end\n        end\n    end\n    return\
    \ \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"((\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\"", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    stack = Stack()\n    stack.append(lst[1])\n    \n    for i in 2:length(lst)\n\
    \        if lst[i] == '('\n            stack.append(lst[i])\n        elseif lst[i]\
    \ == ')'\n            if length(stack) == 0\n                return 'No'\n   \
    \         else\n                stack.pop()\n            end\n        else\n \
    \           if length(stack) == 0\n                return 'No'\n            else\n\
    \                stack.pop()\n            end\n        end\n    end\n    \n  \
    \  if length(stack) == 0\n        return 'Yes'\n    else\n        return 'No'\n\
    \    end\nend", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    paren_stack\
    \ = Stack{String}()\n    paren_stack.push(\"(\")\n    paren_stack.push(\")\")\n\
    \    \n    good_string = \"Yes\"\n    \n    for s in lst\n        if paren_stack.top()\
    \ == \"(\"\n            if s == \"(\"\n                paren_stack.push(\"(\"\
    )\n            elseif s == \")\"\n                paren_stack.pop()\n        \
    \    else\n                paren_stack.push(\")\")\n                good_string\
    \ = \"No\"\n        end\n    end\n    \n    return good_string\nend", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    stack = Stack()\n    \n    for s\
    \ in lst\n        if s == '('\n            push!(stack, s)\n        elseif s ==\
    \ ')'\n            if isempty(stack)\n                return 'No'\n          \
    \  else\n                pop!(stack)\n            end\n        else\n        \
    \    if isempty(stack)\n                return 'No'\n            else\n      \
    \          pop!(stack)\n            end\n        end\n    end\n    \n    if isempty(stack)\n\
    \        return 'Yes'\n    else\n        return 'No'\n    end\nend", "    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    stack = Stack()\n    for s in lst\n\
    \        if s == '('\n            push!(stack, s)\n        elseif s == ')'\n \
    \           if isempty(stack)\n                return 'No'\n            else\n\
    \                pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    if isempty(stack)\n        return\
    \ 'Yes'\n    else\n        return 'No'\n    end\nend", "    \n    \n    if length(lst)\
    \ == 0 \n        return \"No\"\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    stack = Stack()\n\
    \    for s in lst\n        if s == '('\n            push!(stack, s)\n        elseif\
    \ s == ')'\n            if isempty(stack)\n                return 'No'\n     \
    \       else\n                pop!(stack)\n            end\n        else\n   \
    \         if isempty(stack)\n                return 'No'\n            else\n \
    \               pop!(stack)\n            end\n        end\n    end\n    if isempty(stack)\n\
    \        return 'Yes'\n    else\n        return 'No'\n    end\nend", "    \n \
    \   if length(lst) == 0 \n        return \"No\"\n    \n    if length(lst) == 1\
    \ \n        return \"Yes\"\n    \n    if lst[1] == \"(\" \n        return match_parens(lst[2:end])\n\
    \    \n    if lst[end] == \")\" \n        return match_parens(lst[1:end-1])\n\
    \    \n    if lst[1] == \"(\" and lst[end] == \")\" \n        return match_parens(lst[2:end-1])\n\
    \    \n    if lst[1] == \"(\" and lst[end] != \"(\" \n        return \"No\"\n\
    \    \n    if lst[end] == \")\" and lst[1] != \"(\" \n        return \"No\"\n\
    \    \n    if lst[1] == \"(\" and lst[end] != \"(\" \n        return \"No\"\n\
    \    \n    if lst[end] == \")\" and lst[1] != \"(\" \n        return \"No\"\n\
    \    \n    if lst[1] != \"(\" and lst[end] != \"(\" \n        return \"No\"\n\
    \    \n    if lst[1] != \"(\" and lst[end] != \"(\" \n        return \"No\"\n\
    \    \n    if lst[1] != \"(\" and lst[end] != \"(\" \n        return \"No\"\n\
    \    \n    if lst[1] != \"(\" and lst[end] != \"(\" \n        return \"No\"\n\
    \    \n    if lst[1] != \"(\" and lst[end] != \"(\" \n        return \"No\"\n\
    \    \n    if lst[1] != \"(\" and lst[end] != \"(\" \n        return \"No\"\n\
    \    \n    if lst[1] != \"(\" and lst[end] != \"(\" \n        return \"No\"\n\
    \    \n    if lst[1] != \"(\" and lst[end] != \"(\" \n        return \"No\"\n\
    \    \n    if lst[1] != \"(\" and lst[end] != \"(\" \n        return \"No\"\n\
    \    \n    if lst[1] != \"(\" and lst[end] != \"(\" \n        return \"No\"\n\
    \    \n    if lst[1] != \"(\" and lst[end] != \"(\" \n        return \"No\"\n\
    \    \n    if lst[1] != \"(\" and lst[end] != \"(\" \n        return \"No\"\n\
    \    \n    if lst[1] != \"(\" and lst[end] != \"(\" \n        return \"No\"\n\
    \    \n    if lst[1] != \"(\" and lst[end] != \"(\" \n        return \"No\"\n\
    \    \n    if lst[1] != \"(\" and lst[end] != \"(\" \n        return \"No\"\n\
    \    \n    if lst[1] != \"(\" and lst[end] != \"(\" \n        return \"No\"\n\
    \    \n    if lst[1] != \"(\" and lst[end] != \"(\" \n        return \"No\"\n\
    \    \n    if lst[1] != \"(\" and lst", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    paren_count = Dict()\n    for paren in lst\n\
    \        if paren in paren_count\n            paren_count[paren] += 1\n      \
    \  else\n            paren_count[paren] = 1\n        end\n    end\n    \n    good_string\
    \ = \"\"\n    for paren in paren_count\n        if paren_count[paren] == 2\n \
    \           good_string += paren\n        end\n    end\n    \n    if good_string\
    \ == \"\"\n        return \"No\"\n    else\n        return \"Yes\"\n    end\n\
    end", "    \n    stack = Stack()\n    \n    for s in lst\n        if s == '('\n\
    \            push!(stack, s)\n        elseif s == ')'\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return 'No'\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    if isempty(stack)\n        return 'Yes'\n   \
    \ else\n        return 'No'\n    end\nend", "    \n    stack = Stack()\n    \n\
    \    for s in lst\n        if s == '('\n            push!(stack, s)\n        elseif\
    \ s == ')'\n            if isempty(stack)\n                return 'No'\n     \
    \       else\n                pop!(stack)\n            end\n        else\n   \
    \         if isempty(stack)\n                return 'No'\n            else\n \
    \               pop!(stack)\n            end\n        end\n    end\n    \n   \
    \ if isempty(stack)\n        return 'Yes'\n    else\n        return 'No'\n   \
    \ end\nend", "    \n    stack = Stack()\n    stack.append(lst[1])\n    \n    for\
    \ i in lst[2:end]\n        if i == \"(\"\n            stack.append(i)\n      \
    \  elseif i == \")\"\n            if stack.pop() == \"(\"\n                return\
    \ \"Yes\"\n            else\n                return \"No\"\n            end\n\
    \        else\n            if stack.pop() != i\n                return \"No\"\n\
    \            end\n        end\n    end\n    return \"No\"\nend", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    stack = Stack()\n   \
    \ \n    for s in lst\n        if s == '('\n            push!(stack, s)\n     \
    \   elseif s == ')'\n            if isempty(stack)\n                return 'No'\n\
    \            else\n                pop!(stack)\n            end\n        else\n\
    \            if isempty(stack)\n                return 'No'\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    \n  \
    \  if isempty(stack)\n        return 'Yes'\n    else\n        return 'No'\n  \
    \  end\nend", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    stack = Stack()\n\
    \    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n      \
    \  elseif s == \")\"\n            if isempty(stack)\n                return \"\
    No\"\n            else\n                pop!(stack)\n            end\n       \
    \ end\n    end\n    return \"Yes\"\nend", "    stack = Vector{String}()\n    stack\
    \ = push!(stack, \"\")\n    stack = push!(stack, \"\")\n    for s in lst\n   \
    \     if s == \")\"\n            if length(stack) == 0\n                return\
    \ \"No\"\n            else\n                stack = pop!(stack)\n            end\n\
    \        elseif s == \"(\"\n            if length(stack) == 0\n              \
    \  return \"No\"\n            else\n                stack = pop!(stack)\n    \
    \        end\n        else\n            push!(stack, s)\n        end\n    end\n\
    \    return \"Yes\"\nend", "    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    stack = Stack()\n    for s in lst\n        if s == '('\n      \
    \      push!(stack, s)\n        elseif s == ')'\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return 'No'\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    if isempty(stack)\n        return 'Yes'\n    else\n\
    \        return 'No'\n    end\nend", "    \n    stack = Stack()\n    stack.append(lst[1])\n\
    \    \n    for i in lst[2:end]\n        if i == \"(\"\n            stack.append(i)\n\
    \        elseif i == \")\"\n            if stack.size == 0\n                return\
    \ \"No\"\n            else\n                popped = stack.pop()\n           \
    \     if popped == \"(\"\n                    stack.append(i)\n              \
    \  else\n                    return \"No\"\n            end\n        else\n  \
    \          if stack.size == 0\n                return \"No\"\n            else\n\
    \                popped = stack.pop()\n                if popped == \"(\"\n  \
    \                  stack.append(i)\n                else\n                   \
    \ return \"No\"\n            end\n        end\n    end\n    return \"Yes\"\nend\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\"(\", \"(\", \"(\", \"(\",\
    \ \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\"", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    stack = Stack()\n\
    \    \n    for s in lst\n        if s == '('\n            push!(stack, s)\n  \
    \      elseif s == ')'\n            if isempty(stack)\n                return\
    \ 'No'\n            else\n                pop!(stack)\n            end\n     \
    \   end\n    end\n    \n    if isempty(stack)\n        return 'Yes'\n    else\n\
    \        return 'No'\n    end\nend", "    \n    if length(lst) == 0 \n       \
    \ return \"No\"\n    \n    if length(lst) == 1 \n        return \"Yes\"\n    \n\
    \    stack = Stack()\n    \n    for elem in lst\n        if elem == \"(\"\n  \
    \          push!(stack, elem)\n        else if elem == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    return \"Yes\"\nend", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   stack = Stack()\n    for s in lst\n        if s == '('\n            push!(stack,\
    \ s)\n        elseif s == ')'\n            if isempty(stack)\n               \
    \ return 'No'\n            else\n                pop!(stack)\n            end\n\
    \        else\n            if isempty(stack)\n                return 'No'\n  \
    \          else\n                pop!(stack)\n            end\n        end\n \
    \   end\n    return 'Yes'\nend", "    \n    stack = Stack()\n    \n    for s in\
    \ lst\n        if s == '('\n            push!(stack, s)\n        elseif s == ')'\n\
    \            if isempty(stack)\n                return 'No'\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    \n  \
    \  if isempty(stack)\n        return 'Yes'\n    else\n        return 'No'\n  \
    \  end\nend", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    \n    if length(lst) == 0 \n        return \"No\"\n    \n    \n    if\
    \ length(lst) == 1 \n        if lst[1] == \"(\" \n            return \"Yes\"\n\
    \        else \n            return \"No\"\n    end\n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    \n    \n  \
    \  if length(lst) == 0 \n        return \"No\"\n    end\n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    lst = sort(lst)\n    \n    if length(lst) == 0 \n        return \"No\"\n\
    \    \n    if length(lst) == 1 \n        if lst[1] == \"(\" \n            return\
    \ \"Yes\"\n        elseif lst[1] == \")\" \n            return \"No\"\n      \
    \  else\n            return \"No\"\n    end\n    \n    stack = Stack()\n    \n\
    \    for x in lst\n        if x == \"(\" \n            push!(stack, x)\n     \
    \   elseif x == \")\" \n            if length(stack) == 0\n                return\
    \ \"No\"\n            else\n                pop!(stack)\n            end\n   \
    \     end\n    end\n    \n    return \"No\"\nend", "    \n    stack = Stack()\n\
    \    \n    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n\
    \        elseif s == \")\"\n            if isempty(stack)\n                return\
    \ \"No\"\n            else\n                pop!(stack)\n            end\n   \
    \     else\n            if isempty(stack)\n                return \"No\"\n   \
    \         else\n                pop!(stack)\n            end\n        end\n  \
    \  end\n    \n    if isempty(stack)\n        return \"Yes\"\n    else\n      \
    \  return \"No\"\n    end\nend", "    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    stack = Stack()\n    \n    for s in lst\n        if\
    \ s == '('\n            push!(stack, s)\n        elseif s == ')'\n           \
    \ if isempty(stack)\n                return 'No'\n            else\n         \
    \       pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ 'Yes'\n    else\n        return 'No'\n    end\nend", "    lst = sort(lst)\n\
    \    \n    if length(lst) == 0 or length(lst) == 1 \n        return \"No\"\n \
    \   end\n    \n    stack = Stack()\n    \n    for paren in lst\n        if paren\
    \ == \"(\"\n            push!(stack, paren)\n        elseif paren == \")\"\n \
    \           pop!(stack)\n        else\n            if !isempty(stack)\n      \
    \          if paren == pop!(stack)\n                    push!(stack, paren)\n\
    \                else\n                    return \"No\"\n                end\n\
    \            else\n                return \"No\"\n            end\n        end\n\
    \    end\n    \n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens(\"(())\")\n</cell>\n<code language=julia-1.5>\nmatch_parens(\"(()())\"\
    )\n</cell>\n<code language=julia-1.5>\nmatch_parens(\"()\")\n</cell>\n<code language=julia-1.5>\n\
    match_parens(\"()()\")\n</cell>\n<code language=julia-1.5>\nmatch_parens(\"(()())()\"\
    )\n</cell>\n<code language=julia-1.5>\nmatch_parens(\"(()())()()\")\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens(\"(()())()()()\")\n</cell>\n<code language=julia-1.5>\n\
    match_parens(\"(()())()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()",
  "    \n    lst = sort(lst)\n    \n    if length(lst) == 0 \n        return 'No'\n\
    \    \n    if length(lst) == 1 \n        return lst[1]\n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    ", "    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    stack = Vector{String}()\n\
    \    stack = push!(stack, \"\")\n    for s in lst\n        if s == \"(\"\n   \
    \         push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return \"Yes\"\nend\n</code>\n<|/ a tags=string,algorithm,ruby\
    \ |>\n<| a dscore=0 |>\n<code>\ndef match_parens(str)\n  stack = []\n  stack <<\
    \ str\n  while stack.any?\n    str = stack.pop\n    if str[-1] == ')'\n      stack.pop\n\
    \      stack << str\n    elsif str[-1] == '('\n      stack << str\n    end\n \
    \ end\n  stack.empty?\nend\n</code>\n<|/ a tags=string,algorithm,ruby |>\n<| c\
    \ |>\nThis doesn't work. Try it with `match_parens(\"()\")`.\n<|/ c |>\n<| c |>\n\
    It does work. Try it with `match_parens(\"()\")`.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work. Try it with `match_parens(\"()\")`.\n<|/ c |>\n<| c |>\nIt does work.\
    \ Try it with `match_parens(\"()\")`.\n<|/ c |>\n<| c |>\nIt does work. Try it\
    \ with `match_parens(\"()\")`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndef match_parens(str)\n\
    \  stack = []\n  stack << str\n  while stack.any?\n    str = stack.pop\n    if\
    \ str[-1] == ')'\n      stack.pop\n      stack << str\n    elsif str[-1] == '('\n\
    \      stack << str\n    end\n  end\n  stack.empty?\nend\n</code>\n<|/ a tags=string,algorithm,ruby\
    \ |>\n<| c |>\nThis doesn't work. Try it with `match_parens(\"()\")`.\n<|/ c |>\n\
    <| c |>\nIt does work. Try it with `match_parens(\"()\")`.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\ndef match_parens(str)\n  stack = []\n  stack << str\n  while stack.any?\n\
    \    str = stack.pop\n    if str[-1] == ')'\n      stack.pop\n      stack << str",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    stack = Stack()\n\
    \    for s in lst\n        if s == '('\n            push!(stack, s)\n        elseif\
    \ s == ')'\n            if isempty(stack)\n                return 'No'\n     \
    \       else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    return 'Yes'\nend\n</code>\n<|/ a tags=string,algorithm,ruby,recursion |>\n\
    <| c |>\nThis doesn't work for `match_parens([')'])` which should return `'Yes'`.\n\
    <|/ c |>\n<| c |>\nIt returns `'No'` for `match_parens([')'])` because `match_parens([])`\
    \ returns `'No'`.\n<|/ c |>\n<| c |>\nYes, but `match_parens([')'])` should return\
    \ `'Yes'`, not `'No'`.\n<|/ c |>\n<| c |>\nOh, I see. Thanks for pointing that\
    \ out. I've updated my answer.\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndef match_parens(str)\n\
    \  stack = Stack.new\n  str.each_char do |c|\n    if c == '('\n      stack.push(c)\n\
    \    elsif c == ')'\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  true\nend\n</code>\n<|/ a tags=string,algorithm,ruby,recursion\
    \ |>\n<| c |>\nThis doesn't work for `match_parens([')'])` which should return\
    \ `'Yes'`.\n<|/ c |>\n<| c |>\nIt returns `'No'` for `match_parens([')'])` because\
    \ `match_parens([])` returns `'No'`.\n<|/ c |>\n<| a tags=string,algorithm,ruby,recursion\
    \ |>\n<code>\ndef match_parens(str)\n  stack = Stack.new\n  str.each_char do |c|\n\
    \    if c == '('\n      stack.push(c)\n    elsif c == ')'\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  true\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work for `match_parens([')'])`\
    \ which should return `'Yes'`.\n<|/ c |>\n<| a tags=string,algorithm,ruby,recursion\
    \ |>\n<code>\ndef match_parens(str)\n  stack = Stack.new\n  str.each_char ", " \
    \   lst = sort(lst)\n    parens = Vector{Bool}()\n    parens[1] = true\n    parens[2]\
    \ = true\n    parens[3] = true\n    parens[4] = true\n    parens[5] = true\n \
    \   parens[6] = true\n    parens[7] = true\n    parens[8] = true\n    parens[9]\
    \ = true\n    parens[10] = true\n    parens[11] = true\n    parens[12] = true\n\
    \    parens[13] = true\n    parens[14] = true\n    parens[15] = true\n    parens[16]\
    \ = true\n    parens[17] = true\n    parens[18] = true\n    parens[19] = true\n\
    \    parens[20] = true\n    parens[21] = true\n    parens[22] = true\n    parens[23]\
    \ = true\n    parens[24] = true\n    parens[25] = true\n    parens[26] = true\n\
    \    parens[27] = true\n    parens[28] = true\n    parens[29] = true\n    parens[30]\
    \ = true\n    parens[31] = true\n    parens[32] = true\n    parens[33] = true\n\
    \    parens[34] = true\n    parens[35] = true\n    parens[36] = true\n    parens[37]\
    \ = true\n    parens[38] = true\n    parens[39] = true\n    parens[40] = true\n\
    \    parens[41] = true\n    parens[42] = true\n    parens[43] = true\n    parens[44]\
    \ = true\n    parens[45] = true\n    parens[46] = true\n    parens[47] = true\n\
    \    parens[48] = true\n    parens[49] = true\n    parens[50] = true\n    parens[51]\
    \ = true\n    parens[52] = true\n    parens[53] = true\n    parens[54] = true\n\
    \    parens[55] = true\n    parens[56] = true\n    parens[57] = true\n    parens[58]\
    \ = true\n    parens[59] = true\n    parens[60] = true\n    parens[61] = true\n\
    \    parens[62] = true\n    parens[63] = true\n    parens[64] = true\n    parens[65]\
    \ = true\n    parens[66] = true\n    parens[67] = true\n    parens[68] = true\n\
    \    parens[69] = true\n    parens[70] = true\n    parens[71] = true\n    parens[72]\
    \ = ", "    \n    \n    if length(lst) == 0 \n        return \"No\"\n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    \n    if length(lst) == 2 \n    \
    \    return \"Yes\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    if length(lst) == 0 \n    \
    \    return \"No\"\n    end", "    \n    if length(lst) == 0 \n        return\
    \ \"No\"\n    \n    if length(lst) == 1 \n        return \"Yes\"\n    \n    stack\
    \ = Stack()\n    \n    for s in lst \n        if s == '(' \n            push!(stack,\
    \ s)\n        else if s == ')' \n            if isempty(stack) \n            \
    \    return \"No\"\n            elseif pop!(stack) == s \n                return\
    \ \"Yes\"\n            else \n                return \"No\"\n        else \n \
    \           if isempty(stack) \n                return \"No\"\n            elseif\
    \ pop!(stack) == s \n                return \"Yes\"\n            else \n     \
    \           return \"No\"\n    end\nend", "    \n    if length(lst) == 0 \n  \
    \      return \"No\"\n    \n    stack = Stack()\n    \n    for s in lst \n   \
    \     if s == '('\n            push!(stack, s)\n        elseif s == ')'\n    \
    \        if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    \n  \
    \  if isempty(stack)\n        return \"Yes\"\n    else\n        return \"No\"\n\
    \    end\nend", "    \n    stack = Stack()\n    \n    for s in lst\n        if\
    \ s == '('\n            push!(stack, s)\n        elseif s == ')'\n           \
    \ if isempty(stack)\n                return 'No'\n            else\n         \
    \       pop!(stack)\n            end\n        end\n    end\n    \n    if isempty(stack)\n\
    \        return 'Yes'\n    else\n        return 'No'\n    end\nend", "    \n \
    \   \n    if length(lst) == 0 \n        return \"No\"\n    end", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    stack = Stack()\n    for s in lst\n        if\
    \ s == '('\n            push!(stack, s)\n        elseif s == ')'\n           \
    \ if isempty(stack)\n                return 'No'\n            else\n         \
    \       pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return 'Yes'\nend", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    stack = Vector{String}()\n\
    \    \n    for s in lst\n        if s == '('\n            push!(stack, s)\n  \
    \      elseif s == ')'\n            if isempty(stack)\n                return\
    \ 'No'\n            else\n                pop!(stack)\n            end\n     \
    \   else\n            if isempty(stack)\n                return 'No'\n       \
    \     else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    \n    if isempty(stack)\n        return 'Yes'\n    else\n        return 'No'\n\
    \    end\nend", "    \n    stack = Stack()\n    \n    for s in lst\n        if\
    \ s == '('\n            push!(stack, s)\n        elseif s == ')'\n           \
    \ if isempty(stack)\n                return 'No'\n            else\n         \
    \       pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ 'Yes'\n    else\n        return 'No'\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"(())\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    (())\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"\
    ()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()\", \"()\"])\n</cell>", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    stack = Stack()\n    for s in lst\n        if s ==\
    \ '('\n            push!(stack, s)\n        elseif s == ')'\n            if isempty(stack)\n\
    \                return 'No'\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    if isempty(stack)\n        return\
    \ 'Yes'\n    else\n        return 'No'\n    end\nend\n\"\"\"\n    You are given\
    \ a list of two strings, both strings consist of open\n    parentheses '(' or\
    \ close parentheses ')' only.\n    Your job is to check if it is possible to concatenate\
    \ the two strings in\n    some order, that the resulting string will be good.\n\
    \    A string S is considered to be good if and only if all parentheses in S\n\
    \    are balanced. For example: the string '(())()' is good, while the string\n\
    \    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and\
    \ return 'No' otherwise.", "    \n    stack = Stack()\n    \n    for s in lst\n\
    \        if s == '('\n            push!(stack, s)\n        elseif s == ')'\n \
    \           if isempty(stack)\n                return 'No'\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    \n  \
    \  if isempty(stack)\n        return 'Yes'\n    else\n        return 'No'\n  \
    \  end\nend", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    if\
    \ length(lst) == 0 \n        return 'No'\n    \n    if length(lst) == 1 \n   \
    \     if lst[1] == '(' or lst[1] == '[' or lst[1] == '{' \n            return\
    \ 'Yes'\n        else \n            return 'No'\n    end\n    \n    if lst[1]\
    \ == '(' and lst[2] == '(' and lst[3] == '(' and lst[4] == '(' and lst[5] == '('\
    \ and lst[6] == '(' and lst[7] == '(' and lst[8] == '(' and lst[9] == '(' and\
    \ lst[10] == '(' and lst[11] == '(' and lst[12] == '(' and lst[13] == '(' and\
    \ lst[14] == '(' and lst[15] == '(' and lst[16] == '(' and lst[17] == '(' and\
    \ lst[18] == '(' and lst[19] == '(' and lst[20] == '(' and lst[21] == '(' and\
    \ lst[22] == '(' and lst[23] == '(' and lst[24] == '(' and lst[25] == '(' and\
    \ lst[26] == '(' and lst[27] == '(' and lst[28] == '(' and lst[29] == '(' and\
    \ lst[30] == '(' and lst[31] == '(' and lst[32] == '(' and lst[33] == '(' and\
    \ lst[34] == '(' and lst[35] == '(' and lst[36] == '(' and lst[37] == '(' and\
    \ lst[38] == '(' and lst[39] == '(' and lst[40] == '(' and lst[41] == '(' and\
    \ lst[42] == '(' and lst[43] == '(' and lst[44] == '(' and lst[45] == '(' and\
    \ lst[46] == '(' and lst[47] == '(' and lst[48] == '(' and lst[49] == '(' and\
    \ lst[50] == '(' and lst[51] == '(' and lst[52] == '(' and lst[53] == '(' and\
    \ lst[54] == '(' and lst[55] == '(' and lst[56] == '(' and lst[57] == '(' and\
    \ lst[58] == '(' and lst[59] == '(' and lst[60] == '(' and lst[61] == '(' and\
    \ lst[62] == '(' and lst[63] == '(' and lst[64] == '(' and lst[65] == '(' and\
    \ lst[66] == '(' and lst[67] == '(' and lst[68] == '(' and lst[69] == '(' and\
    \ lst[70] == '(' and lst[71] == '(' and lst[72] == '(' and lst[73] == '(' and\
    \ lst[74] == '(' and lst[75] == '(' and lst[76] == '(' and lst[77] == '(' and\
    \ lst[78] == '"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
