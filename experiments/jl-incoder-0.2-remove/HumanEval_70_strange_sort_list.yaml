name: HumanEval_70_strange_sort_list
language: jl
prompt: "\"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
  \ sorting, is when you start with the minimum value,\n    then maximum of the remaining\
  \ integers, then minimum and so on.\n\n    Examples:\n                \"\"\"\nfunction\
  \ strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
  \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8,\
  \ 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
  \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
  \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
  \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2,\
  \ 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
  \ == [111111])\nend\n"
completions: ["    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    ", "  \
    \  lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    ", "    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    lst = sort(lst)\n    lst = lst.map(x -> if x == minimum then maximum else\
    \ x)\n    return lst\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like your solution,\
    \ but I wonder if it can be done without `map`? I mean, `sort` returns a new vector,\
    \ so it seems like a waste to map it back into a new vector.\n<|/ c |>\n<| c |>\n\
    Yes, it can be done without `map`, but then it would be a one-liner `minimum(sort(lst))`\n\
    <|/ c |>\n<| a |>\nI came up with this solution:\n<code>", "    \n    lst = sort(lst)\n\
    \    \n    i = 0\n    \n    while i < length(lst)\n        \n        if lst[i]\
    \ > lst[i+1]\n            \n            lst[i], lst[i+1] = lst[i+1], lst[i]\n\
    \            \n        end\n        \n        i += 1\n        \n    end\n    \n\
    \    return lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list([1,3,2])\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list([1,2,4])\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([1,4,2])\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([1,4,3])\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list([1,4,5])\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list([1,4,6])\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([1,4,7])\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([1,4,8])\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list([1,4,9])\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list([1,4,10])\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([1,4,11])\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([1,4,12])\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list([1,4,13])\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list([1,4,14])\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([1,4,15])\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([1,4,16])\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list([1,4,17])\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list([1,4,18])\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([1,4,19])\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([1,4,20])\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list([1,", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    ", "    lst = sort(lst)\n    lst = reverse(lst)\n  \
    \  lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    ", "  \
    \  minimum = minimum(lst)\n    maximum = maximum(lst)\n    lst = sort(lst)\n \
    \   lst = lst.*(minimum < lst)\n    lst = lst.*(lst<maximum)\n    lst = lst.*(minimum\
    \ > lst)\n    lst = lst.*(maximum < lst)\n    lst = lst.*(minimum < maximum)\n\
    \    lst = lst.*(minimum > maximum)\n    lst = lst.*(maximum < minimum)\n    lst\
    \ = lst.*(maximum > minimum)\n    return lst\nend\n</code>\n<|/ a tags=sorting,julia\
    \ |>\n<| a dscore=1 |>\nThe answer by is very good, but I thought I'd add my own\
    \ solution, which is based on a similar idea to that of Benjamin W. but which\
    \ I believe is more efficient (at least in terms of memory usage).\n<code>", " \
    \   \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    lst =\
    \ sort(lst)\n    \n    lst = lst.map(x -> if x == minimum then maximum else x)\n\
    \    \n    return lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector and returns\
    \ a vector with its elements reversed.", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=sorting,julia |>\n\
    <code>", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n\
    <|/ a tags=sorting,julia |>\n<| c |>\n`sort!` modifies the input array, so this\
    \ doesn't work. `sort!` returns a new array and leaves the input untouched.\n\
    <|/ c |>\n<| c |>\nThanks for pointing that out. I fixed the code accordingly.\n\
    <|/ c |>\n<| a dscore=2 |>\nThe most efficient way is to use sortperm:\n<code>\n\
    julia> sortperm([1,3,2])\n2-element Array{Int64,1}:\n 2\n 1\n</code>\n<|/ a tags=sorting,julia\
    \ |>\n<| a tags=sorting,julia |>\nThe most efficient way is to use sortperm:\n\
    <code>\njulia> sortperm([1,3,2])\n2-element Array{Int64,1}:\n 2\n 1\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\nThe most efficient way is to use sortperm:\n\
    <code>\njulia> sortperm([1,3,2])\n2-element Array{Int64,1}:\n 2\n 1\n</code>\n\
    <|/ a tags=sorting,julia |>\n<| a tags=sorting,julia |>\nThe most efficient way\
    \ is to use sortperm:\n<code>\njulia> sortperm([1,3,2])\n2-element Array{Int64,1}:\n\
    \ 2\n 1\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\nThe most efficient way\
    \ is to use sortperm:\n<code>\njulia> sortperm([1,3,2])\n2-element Array{Int64,1}:\n\
    \ 2\n 1\n</code>\n<|/ a tags=sorting,julia |>\n<| a |>\n<code>\njulia> sortperm([1,3,2])\n\
    2-element Array{Int64,1}:\n 2\n 1\n</code>\n<|/ a dscore=1 tags=sorting,julia\
    \ |>\n<| a tags=sorting,julia |>\n<code>\njulia> sortperm([1,3,2])\n2-element\
    \ Array{Int64,1}:\n 2\n 1\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    julia> sortperm([1,3,2])\n2-element Array{Int64,1}:\n 2\n 1\n</code>\n<|/ a tags=",
  "    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    ", "    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n\
    \    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n\
    \    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n\
    \    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n\
    \    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n\
    \    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n\
    \    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n\
    \    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n\
    \    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n\
    \    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n\
    \    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n\
    \    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n\
    \    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n\
    \    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n\
    \    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n\
    \    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n\
    \    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n\
    \    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n", "    lst =\
    \ sort(lst)\n    lst = reverse(lst)\n    return lst\nend", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    ", "    lst = sort(lst)\n    lst = reverse(lst)\n  \
    \  return lst\nend\n</code>\n<|/ a tags=sorting,julia,arrays |>\n<| a tags=sorting,julia,arrays\
    \ |>\nIn Julia 1.5 you can use the function sort!:\n<code>\njulia> sort!([1,2,3,4,5,6,7,8,9,10])\n\
    10-element Array{Int64,1}:\n 10\n 9\n 8\n 7\n 6\n 5\n 4\n 3\n 2\n 1\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=sorting,julia,arrays |>\nIn Julia 1.5 you can use\
    \ the function sort!:\n<code>\njulia> sort!([1,2,3,4,5,6,7,8,9,10])\n10-element\
    \ Array{Int64,1}:\n 10\n 9\n 8\n 7\n 6\n 5\n 4\n 3\n 2\n 1\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=sorting,julia,arrays |>\nIn Julia 1.5 you can use the function\
    \ sort!:\n<code>\njulia> sort!([1,2,3,4,5,6,7,8,9,10])\n10-element Array{Int64,1}:\n\
    \ 10\n 9\n 8\n 7\n 6\n 5\n 4\n 3\n 2\n 1\n</code>\n<|/ a dscore=1 |>\n<| a tags=sorting,julia,arrays\
    \ |>\nIn Julia 1.5 you can use the function sort!:\n<code>\njulia> sort!([1,2,3,4,5,6,7,8,9,10])\n\
    10-element Array{Int64,1}:\n 10\n 9\n 8\n 7\n 6\n 5\n 4\n 3\n 2\n 1\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\nIn Julia 1.5 you can use the function sort!:\n\
    <code>\njulia> sort!([1,2,3,4,5,6,7,8,9,10])\n10-element Array{Int64,1}:\n 10\n\
    \ 9\n 8\n 7\n 6\n 5\n 4\n 3\n 2\n 1\n</code>\n<|/ a tags=sorting,julia,arrays\
    \ |>\n<| a dscore=0 |>\nIn Julia 1.5 you can use the function sort!:\n<code>\n\
    julia> sort!([1,2,3,4,5,6,7,8,9,10])\n10-element Array{Int64,1}", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend", "    lst = sort(lst)\n    lst =\
    \ reverse(lst)\n    return lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector as input and\
    \ returns a vector of the same length where each element is the sum of the elements\
    \ in the input vector. For example, if the input vector is [1,2,3,4,5], then the\
    \ output vector should be [2,3,4,5,6].", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend\n</code>\n<|/ a tags=sorting,julia |>\n<| c |>\nThis doesn't\
    \ work for me. `sort(lst)` returns `ERROR: MethodError: no method matching sort(::Array{Int64,1})`.\
    \ `sort(lst, dims=1)` returns `ERROR: MethodError: no method matching sort(::Array{Int64,1},\
    \ ::Int64)`. `sort(lst, dims=2)` returns `ERROR: MethodError: no method matching\
    \ sort(::Array{Int64,2}, ::Int64)`. `sort(lst, dims=3)` returns `ERROR: MethodError:\
    \ no method matching sort(::Array{Int64,3}, ::Int64)`. `sort(lst, dims=4)` returns\
    \ `ERROR: MethodError: no method matching sort(::Array{Int64,4}, ::Int64)`. `sort(lst,\
    \ dims=5)` returns `ERROR: MethodError: no method matching sort(::Array{Int64,5},\
    \ ::Int64)`. `sort(lst, dims=6)` returns `ERROR: MethodError: no method matching\
    \ sort(::Array{Int64,6}, ::Int64)`. `sort(lst, dims=7)` returns `ERROR: MethodError:\
    \ no method matching sort(::Array{Int64,7}, ::Int64)`. `sort(lst, dims=8)` returns\
    \ `ERROR: MethodError: no method matching sort(::Array{Int64,8}, ::Int64)`. `sort(lst,\
    \ dims=9)` returns `ERROR: MethodError: no method matching sort(::Array{Int64,9},\
    \ ::Int64)`. `sort(lst, dims=10)` returns `ERROR: MethodError: no method matching\
    \ sort(::Array{Int64,10}, ::Int64)`. `sort(lst, dims=11)` returns `ERROR: MethodError:\
    \ no method matching sort(::Array{Int64,11}, ::Int64)`. `sort(lst, dims=12)` returns\
    \ `ERROR: MethodError: no method matching sort(::Array{Int64,12}, ::Int64)`. `sort(lst,\
    \ dims=13)` returns `ERROR: MethodError: no method matching sort(::Array{Int64,13},\
    \ ::Int64)`. `sort(lst, dims=14)` returns `ERROR: MethodError: no method matching\
    \ sort(::Array{Int64,14}, ::Int64)`. `sort(lst, dims=15)` returns `ERROR: MethodError:\
    \ no method matching sort(::Array{Int64,15}, ::Int64)`. `sort(lst, dims=16)` returns\
    \ `ERROR: MethodError: no method matching sort(::Array{Int64,16}, ::Int64)`. `sort(",
  "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/\
    \ a dscore=1 |>\n<| c |>\nThis is not the correct answer. `sort` sorts lexicographically,\
    \ not numerically.\n<|/ c |>\n<| c |>\n`sort` sorts lexicographically by default.\
    \ `sort([3,2,1])` returns `[1,2,3]`.\n<|/ c |>\n<| c |>\nYes, but `sort` sorts\
    \ lexicographically by default, not numerically. `sort([3,2,1])` returns `[1,2,3]`,\
    \ not `[3,2,1]`.\n<|/ c |>\n<| c |>\n`sort` sorts lexicographically by default.\
    \ `sort([3,2,1])` returns `[1,2,3]`.\n<|/ c |>\n<| c |>\nYes, but `sort` sorts\
    \ lexicographically by default, not numerically. `sort([3,2,1])` returns `[1,2,3]`,\
    \ not `[3,2,1]`.\n<|/ c |>\n<| a tags=sorting,julia |>\n<code>\njulia> function\
    \ strange_sort_list(lst::Vector{Int64})::Vector{Int64}\n           return sort(lst)\n\
    \       end\nstrange_sort_list (generic function with 1 method)", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/ a tags=sorting,julia\
    \ |>\n<| a dscore=2 |>\n<code>", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=sorting,julia |>\n\
    <code>", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n\
    <|/ a tags=julia,sorting,arrays |>\n<| c |>\nThis doesn't work if you have a vector\
    \ of strings. `sort` will sort lexicographically instead of numerically.\n<|/\
    \ c |>\n<| c |>\n`sort` will sort lexicographically if you give it a vector of\
    \ strings. `sort!` will sort numerically if you give it a vector of strings. `sort!`\
    \ will sort numerically if you give it a vector of numbers. `sort!` will sort\
    \ numerically if you give it a vector of booleans. `sort!` will sort numerically\
    \ if you give it a vector of tuples. `sort!` will sort numerically if you give\
    \ it a vector of arrays. `sort!` will sort numerically if you give it a vector\
    \ of dictionaries. `sort!` will sort numerically if you give it a vector of dates.\
    \ `sort!` will sort numerically if you give it a vector of datetimes. `sort!`\
    \ will sort numerically if you give it a vector of vectors. `sort!` will sort\
    \ numerically if you give it a vector of matrices. `sort!` will sort numerically\
    \ if you give it a vector of arrays of numbers. `sort!` will sort numerically\
    \ if you give it a vector of arrays of strings. `sort!` will sort numerically\
    \ if you give it a vector of arrays of booleans. `sort!` will sort numerically\
    \ if you give it a vector of arrays of tuples. `sort!` will sort numerically if\
    \ you give it a vector of arrays of arrays. `sort!` will sort numerically if you\
    \ give it a vector of arrays of dictionaries. `sort!` will sort numerically if\
    \ you give it a vector of arrays of dates. `sort!` will sort numerically if you\
    \ give it a vector of arrays of datetimes. `sort!` will sort numerically if you\
    \ give it a vector of arrays of vectors. `sort!` will sort numerically if you\
    \ give it a vector of arrays of matrices. `sort!` will sort numerically if you\
    \ give it a vector of arrays of arrays of numbers. `sort!` will sort numerically\
    \ if you give it a vector of arrays of arrays of strings. `sort!` will sort numerically\
    \ if you give it a vector of arrays of arrays of booleans. `sort!` will sort numerically\
    \ if you give it a vector of arrays of arrays of tuples. `sort!` will sort numerically\
    \ if you give it a vector of arrays of arrays of arrays. `sort!` will sort numerically\
    \ if you give it ", "    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)", "    lst = sort(lst)\n    lst = reverse(lst)\n  \
    \  return lst\nend\n</cell>\n<code language=julia-1.4>\nstrange_sort_list([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nstrange_sort_list([2,1,3])\n</cell>\n<code\
    \ language=julia-1.4>\nstrange_sort_list([3,2,1])\n</cell>\n<code language=julia-1.4>\n\
    strange_sort_list([2,3,1])\n</cell>\n<code language=julia-1.4>\nstrange_sort_list([2,1,3])\n\
    </cell>\n<code language=julia-1.4>\nstrange_sort_list([3,2,1])\n</cell>\n<code\
    \ language=julia-1.4>\nstrange_sort_list([2,3,1])\n</cell>\n<code language=julia-1.4>\n\
    strange_sort_list([2,1,3])\n</cell>\n<code language=julia-1.4>\nstrange_sort_list([3,2,1])\n\
    </cell>\n<code language=julia-1.4>\nstrange_sort_list([2,3,1])\n</cell>\n<code\
    \ language=julia-1.4>\nstrange_sort_list([2,1,3])\n</cell>\n<code language=julia-1.4>\n\
    strange_sort_list([3,2,1])\n</cell>\n<code language=julia-1.4>\nstrange_sort_list([2,3,1])\n\
    </cell>\n<code language=julia-1.4>\nstrange_sort_list([2,1,3])\n</cell>\n<code\
    \ language=julia-1.4>\nstrange_sort_list([3,2,1])\n</cell>\n<code language=julia-1.4>\n\
    strange_sort_list([2,3,1])\n</cell>\n<code language=julia-1.4>\nstrange_sort_list([2,1,3])\n\
    </cell>\n<code language=julia-1.4>\nstrange_sort_list([3,2,1])\n</cell>\n<code\
    \ language=julia-1.4>\nstrange_sort_list([2,3,1])\n</cell>\n<code language=julia-1.4>\n\
    strange_sort_list([2,1,3])\n</cell>\n<code language=julia-1.4>\nstrange_sort_list([3,2,1])\n\
    </cell>\n<code language=julia-1.4>\nstrange_sort_list([2,3,1])\n</cell>\n<code\
    \ language=julia-1.4>\nstrange_sort_list([2,1,3])\n</cell>\n<code language=julia-1.4>\n\
    strange_sort_list([3,2,1])\n</cell>\n<code language=julia-1.4>\nstrange_sort_list([2,3,1])\n\
    </cell", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n\
    <|/ a tags=julia |>\n<| a tags=julia |>\n<code>", "    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    return lst\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis\
    \ doesn't seem to work. `strange_sort_list([1,2,3,4,5,6,7,8,9,10])` returns `[10,9,8,7,6,5,4,3,2,1]`.\n\
    <|/ c |>\n<| c |>\nYes, it does. I tested it before posting. Maybe you missed\
    \ something.\n<|/ c |>\n<| c |>\nOh, I see. Sorry, I missed the fact that you\
    \ were using `sort` instead of `sort!`. Thanks for pointing that out.\n<|/ c |>\n\
    <| a dscore=1 |>\n<code>", "    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    minimum_index = findfirst(i->i==minimum, lst)\n    maximum_index = findfirst(i->i==maximum,\
    \ lst)\n    \n    lst[minimum_index], lst[maximum_index] = lst[maximum_index],\
    \ lst[minimum_index]\n    \n    return lst\nend\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector and returns the number of unique elements in\
    \ the vector.", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\n\
    end", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</cell>\n\
    <code language=julia-1.5>\nstrange_sort_list(1:10)\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list(1:10)\n</cell>\n<code language=julia-1.5>\nstrange_sort_list(1:10)\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list(1:10)\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list(1:10)\n</cell>\n<code language=julia-1.5>\nstrange_sort_list(1:10)\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list(1:10)\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list(1:10)\n</cell>\n<code language=julia-1.5>\nstrange_sort_list(1:10)\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list(1:10)\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list(1:10)\n</cell>\n<code language=julia-1.5>\nstrange_sort_list(1:10)\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list(1:10)\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list(1:10)\n</cell>\n<code language=julia-1.5>\nstrange_sort_list(1:10)\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list(1:10)\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list(1:10)\n</cell>\n<code language=julia-1.5>\nstrange_sort_list(1:10)\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list(1:10)\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list(1:10)\n</cell>\n<code language=julia-1.5>\nstrange_sort_list(1:10)\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list(1:10)\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list(1:10)\n</cell>\n<code language=julia-1.5>\nstrange_sort_list(1:10)\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list(1:10)\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list(1:10)\n</cell>\n<code language=julia-1.5>\nstrange_sort_list(1:10)\n\
    </cell>\n<code language=julia-", "    \n    minimum = minimum(lst)\n    maximum\
    \ = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    ", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend", "    lst = sort(lst)\n    lst = reverse(lst)\n    lst =\
    \ sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    ", "  \
    \  \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    lst = sort(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    lst =\
    \ sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n  \
    \  \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    ", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</cell>\n\
    <code language=julia-1.5>\nstrange_sort_list([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes in a list of integers and returns\
    \ the sum of the integers in the list.", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend", "    lst = sort(lst)\n    lst = reverse(lst)\n    return\
    \ lst\nend", "    minimum = minimum(lst)\n    maximum = maximum(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n", "    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    ", "    lst = sort(lst)\n    lst = reverse(lst)\n  \
    \  return lst\nend", "    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    ", "  \
    \  lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend", "    lst = sort(lst)\n    lst =\
    \ reverse(lst)\n    return lst\nend\n</code>\n<|/ a |>\n<| c |>\nThis doesn't\
    \ work if you have a list of strings and want to sort them alphabetically. `sort`\
    \ will sort them lexicographically, not alphabetically.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work for me in Julia 1.5.1. I get the following error: `MethodError:\
    \ no method matching sort(::Array{String,1})`\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work for me in Julia 1.5.1. I get the following error: `MethodError: no method\
    \ matching sort(::Array{String,1})`\n<|/ c |>\n<| c |>\nThis doesn't work for\
    \ me in Julia 1.5.1. I get the following error: `MethodError: no method matching\
    \ sort(::Array{String,1})`\n<|/ c |>\n<| c |>\nThis doesn't work for me in Julia\
    \ 1.5.1. I get the following error: `MethodError: no method matching sort(::Array{String,1})`\n\
    <|/ c |>\n<| a tags=julia |>\nI wrote a package that does this for you:\nhttps://github.com/jmhoffman/sorting.jl\n\
    <code>\nusing Sorting", "    lst = sort(lst)\n    lst = reverse(lst)\n    return\
    \ lst\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=sorting,julia |>\n<code>", " \
    \   lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    ", "    lst = sort(lst)\n    lst = reverse(lst)\n  \
    \  return lst\nend", "    lst = sort(lst)\n    lst = reverse(lst)\n    return\
    \ lst\nend", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n\
    </code>\n<|/ a tags=sorting,julia |>\n<| c |>\nThis doesn't work. `sort` returns\
    \ a `Vector{Int64}`, not a `Vector{Int}`.\n<|/ c |>\n<| c |>\nI fixed the code.\
    \ Thanks for pointing out.\n<|/ c |>\n<| a tags=sorting,julia |>\n<code>", " \
    \   \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum2\
    \ = minimum(lst)\n    maximum2 = maximum(lst)\n    \n    minimum3 = minimum(lst)\n\
    \    maximum3 = maximum(lst)\n    \n    minimum4 = minimum(lst)\n    maximum4\
    \ = maximum(lst)\n    \n    minimum5 = minimum(lst)\n    maximum5 = maximum(lst)\n\
    \    \n    minimum6 = minimum(lst)\n    maximum6 = maximum(lst)\n    \n    minimum7\
    \ = minimum(lst)\n    maximum7 = maximum(lst)\n    \n    minimum8 = minimum(lst)\n\
    \    maximum8 = maximum(lst)\n    \n    minimum9 = minimum(lst)\n    maximum9\
    \ = maximum(lst)\n    \n    minimum10 = minimum(lst)\n    maximum10 = maximum(lst)\n\
    \    \n    minimum11 = minimum(lst)\n    maximum11 = maximum(lst)\n    \n    minimum12\
    \ = minimum(lst)\n    maximum12 = maximum(lst)\n    \n    minimum13 = minimum(lst)\n\
    \    maximum13 = maximum(lst)\n    \n    minimum14 = minimum(lst)\n    maximum14\
    \ = maximum(lst)\n    \n    minimum15 = minimum(lst)\n    maximum15 = maximum(lst)\n\
    \    \n    minimum16 = minimum(lst)\n    maximum16 = maximum(lst)\n    \n    minimum17\
    \ = minimum(lst)\n    maximum17 = maximum(lst)\n    \n    minimum18 = minimum(lst)\n\
    \    maximum18 = maximum(lst)\n    \n    minimum19 = minimum(lst)\n    maximum19\
    \ = maximum(lst)\n    \n    minimum20 = minimum(lst)\n    maximum20 = maximum(lst)\n\
    \    \n    minimum21 = minimum(lst)\n    maximum21 = maximum(lst)\n    \n    minimum22\
    \ = minimum(lst)\n    maximum22 = maximum(lst)\n    \n    minimum23 = minimum(lst)\n\
    \    maximum23 = maximum(lst)\n    \n    minimum24 = minimum(lst)\n    maximum24\
    \ = maximum(lst)\n    \n    minimum25 = minimum(lst)\n    maximum25 = maximum(lst)\n\
    \    \n    minimum26 = minimum(lst)\n    maximum26 = maximum(lst)\n    \n    minimum27\
    \ = minimum(lst)\n    maximum27 = maximum(lst)\n    \n    minimum28 = minimum(lst)\n\
    \    maximum28 = maximum(lst)\n    \n    minimum", "    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    return lst\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\n\
    This doesn't seem to work. `julia> strange_sort_list(1:10)\n10-element Array{Int64,1}:\n\
    \ 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n\
    \ 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n\
    \ 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n\
    \ 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n\
    \ 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n\
    \ 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n\
    \ 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n\
    115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n\
    131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n\
    147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n\
    163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ tags=sorting,julia |>\nI wrote a package for this:\nhttps://github.com/sjl/sorting.jl\n\
    <code>\njulia> using Sorting", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend", "    lst = sort(lst)\n    lst = reverse(lst)\n    lst =\
    \ sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    ", "  \
    \  lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    ", "    lst = sort(lst)\n    lst = reverse(lst)\n  \
    \  return lst\nend\n</code>\n<|/ a tags=sorting,julia |>\n<| c |>\nThis doesn't\
    \ work for me. `sort(lst)` returns `ERROR: MethodError: no method matching sort(::Array{Int64,1})`\n\
    <|/ c |>\n<| c |>\nThis doesn't work for me either. `sort(lst)` returns `ERROR:\
    \ MethodError: no method matching sort(::Array{Int64,1})`\n<|/ c |>\n<| c |>\n\
    This doesn't work for me either. `sort(lst)` returns `ERROR: MethodError: no method\
    \ matching sort(::Array{Int64,1})`\n<|/ c |>\n<| c |>\nThis doesn't work for me\
    \ either. `sort(lst)` returns `ERROR: MethodError: no method matching sort(::Array{Int64,1})`\n\
    <|/ c |>\n<| c |>\nThis doesn't work for me either. `sort(lst)` returns `ERROR:\
    \ MethodError: no method matching sort(::Array{Int64,1})`\n<|/ c |>\n<| a |>\n\
    I believe that this is what you want:\n<code>\njulia> function strange_sort_list(lst::Vector{Int64})::Vector{Int64}\n\
    \           lst = sort(lst)\n           lst = reverse(lst)\n           return\
    \ lst\n       end\nstrange_sort_list (generic function with 1 method)", "    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    ", "    lst = sort(lst)\n    lst = reverse(lst)\n  \
    \  lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    ", "  \
    \  lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/ a |>\n<| c |>\n`sort!`\
    \ modifies the original array. `sort!` should be avoided if possible. `sort!`\
    \ should be used only when it is absolutely necessary.\n<|/ c |>\n<| c |>\nI agree\
    \ with you, but in this case it seems that `sort!` does not modify the original\
    \ array. `sort!` modifies the original array only if the original array is mutable\
    \ and `sort!` returns a new array.\n<|/ c |>\n<| c |>\n`sort!` modifies the original\
    \ array only if the original array is mutable and `sort!` returns a new array.\
    \ `sort!` modifies the original array only if the original array is mutable and\
    \ `sort!` returns a new array. `sort!` modifies the original array only if the\
    \ original array is mutable and `sort!` returns a new array. `sort!` modifies\
    \ the original array only if the original array is mutable and `sort!` returns\
    \ a new array. `sort!` modifies the original array only if the original array\
    \ is mutable and `sort!` returns a new array. `sort!` modifies the original array\
    \ only if the original array is mutable and `sort!` returns a new array. `sort!`\
    \ modifies the original array only if the original array is mutable and `sort!`\
    \ returns a new array. `sort!` modifies the original array only if the original\
    \ array is mutable and `sort!` returns a new array. `sort!` modifies the original\
    \ array only if the original array is mutable and `sort!` returns a new array.\
    \ `sort!` modifies the original array only if the original array is mutable and\
    \ `sort!` returns a new array. `sort!` modifies the original array only if the\
    \ original array is mutable and `sort!` returns a new array. `sort!` modifies\
    \ the original array only if the original array is mutable and `sort!` returns\
    \ a new array. `sort!` modifies the original array only if the original array\
    \ is mutable and `sort!` returns a new array. `sort!` modifies the original array\
    \ only if the original array is mutable and `sort!` returns a new array. `sort!`\
    \ modifies the original array only if the original array is mutable and `sort!`\
    \ returns a new array. `sort!` modifies the original array only if the original\
    \ array is mutable and `sort!` returns a new array. `sort!` modifies the original\
    \ array only if the original array is mutable and `sort!", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/ a tags=julia,sorting,arrays\
    \ |>\n<| c |>\nThis doesn't work for me. `sort` returns a `Vector{Int64}`, not\
    \ a `Vector{Int}`.\n<|/ c |>\n<| c |>\nIt works for me on Julia 0.6.2\n<|/ c |>\n\
    <| c |>\nIt works for me on Julia 0.6.2\n<|/ c |>\n<| c |>\nIt works for me on\
    \ Julia 0.6.2\n<|/ c |>\n<| c |>\nIt works for me on Julia 0.6.2\n<|/ c |>\n<|\
    \ a dscore=5 |>\nIn Julia 0.6.2 you can use the sort function on any array and\
    \ it will return a sorted array:\n<code>\njulia> sort([1,2,3])\n3-element Array{Int64,1}:\n\
    \ 1\n 2\n 3\n</code>\n<|/ a tags=julia,sorting,arrays |>\n<| c |>\nIt works for\
    \ me on Julia 0.6.2\n<|/ c |>\n<| c |>\nIt works for me on Julia 0.6.2\n<|/ c\
    \ |>\n<| c |>\nIt works for me on Julia 0.6.2\n<|/ c |>\n<| c |>\nIt works for\
    \ me on Julia 0.6.2\n<|/ c |>\n<| c |>\nIt works for me on Julia 0.6.2\n<|/ c\
    \ |>\n<| a tags=julia,sorting,arrays |>\nIn Julia 0.6.2 you can use the sort function\
    \ on any array and it will return a sorted array:\n<code>\njulia> sort([1,2,3])\n\
    3-element Array{Int64,1}:\n 1\n 2\n 3\n</code>\n<|/ a dscore=5 |>\n<| c |>\nIt\
    \ works for me on Julia 0.6.2\n<|/ c |>\n<| c |>\nIt works for me on Julia 0.6.2\n\
    <|/ c |>\n<| c |>\nIt works for me on Julia 0.6.2\n<|/ c |>\n<| a tags=julia,sorting,arrays\
    \ |>\nIn Julia 0.6.2 you can use the sort function on any array and it will return\
    \ a sorted array:\n<code>\njulia> sort([1,2,3])\n3-element Array{Int64,1}:\n 1\n\
    \ 2\n 3\n</code>\n<|/ a dscore=5 ", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    ", "  \
    \  lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    ", "    lst = sort(lst)\n    lst = reverse(lst)\n  \
    \  return lst\nend", "    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    ", "  \
    \  \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = lst.map(x -> if x == minimum then maximum else x)\n    \n   \
    \ return lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([1,2,3,4,5,6,7,8,9])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector and returns\
    \ a vector where each element is the sum of the elements in the original vector\
    \ except the element at position i.", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    ", "  \
    \  \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)",
  "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/ a tags=julia |>\n<|\
    \ c |>\nThis doesn't seem to work. `sort(lst)` returns `ERROR: MethodError: no\
    \ method matching sort(::Array{Int64,1})`\n<|/ c |>\n<| c |>\nI tested it on Julia\
    \ 0.4.0 and it works. What version are you using?\n<|/ c |>\n<| c |>\nI'm on 0.4.0\
    \ as well. I'm on 0.4.1 as well. I'm on 0.4.2 as well. I'm on 0.4.3 as well. I'm\
    \ on 0.4.4 as well. I'm on 0.4.5 as well. I'm on 0.4.6 as well. I'm on 0.4.7 as\
    \ well. I'm on 0.4.8 as well. I'm on 0.4.9 as well. I'm on 0.5.0. I'm on 0.5.1\n\
    <|/ c |>\n<| c |>\nI'm on 0.4.9 as well. I'm on 0.5.0. I'm on 0.5.1\n<|/ c |>\n\
    <| c |>\nI'm on 0.4.9 as well. I'm on 0.5.0. I'm on 0.5.1\n<|/ c |>\n<| a dscore=3\
    \ |>\nThe function sort() sorts arrays in place, so it modifies the original array.\
    \ \nTo avoid this, you can use the function copy() which creates a copy of an\
    \ array:\n<code>\njulia> sort([1,2,3])\n3-element Array{Int64,1}:\n 1\n 2\n 3",
  "    minimum = minimum(lst)\n    maximum = maximum(lst)\n    lst = sort(lst)\n \
    \   lst = lst.map(x -> minimum < x ? minimum : x < maximum ? x : maximum)\n  \
    \  return lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a list of integers and\
    \ returns the list sorted in descending order. \nThe function should return a\
    \ new list and not modify the original list.", "    lst = sort(lst)\n    lst =\
    \ reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    ", "    lst = sort(lst)\n    lst = reverse(lst)\n  \
    \  return lst\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nThis does not provide\
    \ an answer to the question. To critique or request clarification from an author,\
    \ leave a comment below their post. - [From Review](/review/low-quality-posts/27827814)\n\
    <|/ c |>\n<| c |>\nI believe it does answer the question. He asked how to sort\
    \ a list of integers in Julia, and I provided a solution that does exactly that.\
    \ He also asked how to reverse the order of the list, and I provided a solution\
    \ that does exactly that. He also asked how to sort a list in a strange order,\
    \ and I provided a solution that does exactly that. He also asked how to sort\
    \ a list in a strange order, and I provided a solution that does exactly that.\
    \ He also asked how to sort a list in a strange order, and I provided a solution\
    \ that does exactly that. He also asked how to sort a list in a strange order,\
    \ and I provided a solution that does exactly that. He also asked how to sort\
    \ a list in a strange order, and I provided a solution that does exactly that.\
    \ He also asked how to sort a list in a strange order, and I provided a solution\
    \ that does exactly that. He also asked how to sort a list in a strange order,\
    \ and I provided a solution that does exactly that.\n<|/ c |>\n<| c |>\nI believe\
    \ this answer does answer the question. He asked how to sort a list of integers\
    \ in Julia, and I provided a solution that does exactly that. He also asked how\
    \ to reverse the order of the list, and I provided a solution that does exactly\
    \ that. He also asked how to sort a list in a strange order, and I provided a\
    \ solution that does exactly that. He also asked how to sort a list in a strange\
    \ order, and I provided a solution that does exactly that. He also asked how to\
    \ sort a list in a strange order, and I provided a solution that does exactly\
    \ that. He also asked how to sort a list in a strange order, and I provided a\
    \ solution that does exactly that. He also asked how to sort a list in a strange\
    \ order, and I provided a solution that does exactly that. He also asked how to\
    \ sort a list in a strange order, and I provided a solution that does exactly\
    \ that. He also asked how to sort a list in a str", "    lst = sort(lst)\n   \
    \ lst = reverse(lst)\n    return lst\nend", "    minimum = minimum(lst)\n    maximum\
    \ = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum", "    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    ", "    minimum = minimum(lst)\n    maximum = maximum(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n", "    \n\
    \    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)",
  "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend", "    lst = sort(lst)\n    lst =\
    \ reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    ", "    \n    minimum = minimum(lst)\n    maximum =\
    \ maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    ", "    minimum = minimum(lst)\n    maximum =\
    \ maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\n\
    end", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>", "    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum_index = findfirst(i->i<=minimum,\
    \ lst)\n    maximum_index = findfirst(i->i>=maximum, lst)\n    \n    minimum_value\
    \ = minimum(lst[minimum_index:maximum_index])\n    maximum_value = maximum(lst[minimum_index:maximum_index])\n\
    \    \n    minimum_index = findfirst(i->i<=minimum, lst)\n    maximum_index =\
    \ findfirst(i->i>=maximum, lst)\n    \n    minimum_value = minimum(lst[minimum_index:maximum_index])\n\
    \    maximum_value = maximum(lst[minimum_index:maximum_index])\n    \n    minimum_index\
    \ = findfirst(i->i<=minimum, lst)\n    maximum_index = findfirst(i->i>=maximum,\
    \ lst)\n    \n    minimum_value = minimum(lst[minimum_index:maximum_index])\n\
    \    maximum_value = maximum(lst[minimum_index:maximum_index])\n    \n    minimum_index\
    \ = findfirst(i->i<=minimum, lst)\n    maximum_index = findfirst(i->i>=maximum,\
    \ lst)\n    \n    minimum_value = minimum(lst[minimum_index:maximum_index])\n\
    \    maximum_value = maximum(lst[minimum_index:maximum_index])\n    \n    minimum_index\
    \ = findfirst(i->i<=minimum, lst)\n    maximum_index = findfirst(i->i>=maximum,\
    \ lst)\n    \n    minimum_value = minimum(lst[minimum_index:maximum_index])\n\
    \    maximum_value = maximum(lst[minimum_index:maximum_index])\n    \n    minimum_index\
    \ = findfirst(i->i<=minimum, lst)\n    maximum_index = findfirst(i->i>=maximum,\
    \ lst)\n    \n    minimum_value = minimum(lst[minimum_index:maximum_index])\n\
    \    maximum_value = maximum(lst[minimum_index:maximum_index])\n    \n    minimum_index\
    \ = findfirst(i->i<=minimum, lst)\n    maximum_index = findfirst(i->i>=maximum,\
    \ lst)\n    \n    minimum_value = minimum(lst[minimum_index:maximum_index])\n\
    \    maximum_value = maximum(lst[minimum_index:maximum_index])\n    \n    minimum_index\
    \ = findfirst(i->i<=minimum, lst)\n    maximum_index = findfirst(i->i>=maximum,\
    \ lst)\n    \n    minimum_value = minimum(lst[minimum_index:maximum_index])\n\
    \    maximum_value = maximum(lst[minimum_index:maximum_index])\n    \n    minimum_index\
    \ = findfirst(i->i<=minimum, lst)\n    maximum_index = findfirst(i->", "    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    ", "    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    minimum2 = minimum(lst)\n    maximum2 = maximum(lst)\n    minimum3 = minimum(lst)\n\
    \    maximum3 = maximum(lst)\n    minimum4 = minimum(lst)\n    maximum4 = maximum(lst)\n\
    \    minimum5 = minimum(lst)\n    maximum5 = maximum(lst)\n    minimum6 = minimum(lst)\n\
    \    maximum6 = maximum(lst)\n    minimum7 = minimum(lst)\n    maximum7 = maximum(lst)\n\
    \    minimum8 = minimum(lst)\n    maximum8 = maximum(lst)\n    minimum9 = minimum(lst)\n\
    \    maximum9 = maximum(lst)\n    minimum10 = minimum(lst)\n    maximum10 = maximum(lst)\n\
    \    minimum11 = minimum(lst)\n    maximum11 = maximum(lst)\n    minimum12 = minimum(lst)\n\
    \    maximum12 = maximum(lst)\n    minimum13 = minimum(lst)\n    maximum13 = maximum(lst)\n\
    \    minimum14 = minimum(lst)\n    maximum14 = maximum(lst)\n    minimum15 = minimum(lst)\n\
    \    maximum15 = maximum(lst)\n    minimum16 = minimum(lst)\n    maximum16 = maximum(lst)\n\
    \    minimum17 = minimum(lst)\n    maximum17 = maximum(lst)\n    minimum18 = minimum(lst)\n\
    \    maximum18 = maximum(lst)\n    minimum19 = minimum(lst)\n    maximum19 = maximum(lst)\n\
    \    minimum20 = minimum(lst)\n    maximum20 = maximum(lst)\n    minimum21 = minimum(lst)\n\
    \    maximum21 = maximum(lst)\n    minimum22 = minimum(lst)\n    maximum22 = maximum(lst)\n\
    \    minimum23 = minimum(lst)\n    maximum23 = maximum(lst)\n    minimum24 = minimum(lst)\n\
    \    maximum24 = maximum(lst)\n    minimum25 = minimum(lst)\n    maximum25 = maximum(lst)\n\
    \    minimum26 = minimum(lst)\n    maximum26 = maximum(lst)\n    minimum27 = minimum(lst)\n\
    \    maximum27 = maximum(lst)\n    minimum28 = minimum(lst)\n    maximum28 = maximum(lst)\n\
    \    minimum29 = minimum(lst)\n    maximum29 = maximum(lst)\n    minimum30 = minimum(lst)\n\
    \    maximum30 = maximum(lst)\n    minimum31 = minimum(lst)\n    maximum31 = maximum(lst)\n\
    \    minimum32 = minimum(lst)\n", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend\n</code>\n<|/ a tags=sorting,julia |>\n<| c |>\nThis doesn't\
    \ work if you have a vector of strings. `sort` will sort lexicographically and\
    \ `reverse` will reverse the order of the strings. So `sort` will sort `[\"a\"\
    , \"b\", \"c\"]` into `[\"c\", \"b\", \"a\"]` and `reverse` will reverse that\
    \ to `[\"a\", \"b\", \"c\"]`.\n<|/ c |>\n<| a dscore=2 |>\nI came up with a solution\
    \ which I believe is more efficient than sorting the entire vector and then reversing\
    \ it (as suggested in other answers). \n<code>\njulia> function strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n           return [lst[end-i] for i in 1:length(lst)] \n       end\nstrange_sort_list\
    \ (generic function with 1 method)", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend\n</code>\n<|/ a tags=sorting,julia |>\n<| c |>\nI like your\
    \ answer, but I think it would be more helpful if you explained what your code\
    \ does.\n<|/ c |>\n<| c |>\nI added some comments to explain my code. Hope it\
    \ helps.\n<|/ c |>\n<| c |>\nI added some comments to explain my code. Hope it\
    \ helps.\n<|/ c |>\n<| a dscore=1 |>\nI like answers above but I think they can\
    \ be improved.\n<code>", "    lst = sort(lst)\n    lst = reverse(lst)\n    return\
    \ lst\nend\n</code>\n<|/ a tags=sorting,julia,arrays |>\n<| c |>\nThis does not\
    \ answer the question. The question was about sorting an array of integers, not\
    \ an array of strings. Your answer does not sort the array of integers either.\n\
    <|/ c |>\n<| c |>\nThe question was about sorting an array of integers, not an\
    \ array of strings. Your answer does not sort the array of integers either.\n\
    <|/ c |>\n<| a tags=sorting,julia,arrays |>\nThe answer by is correct but can\
    \ be simplified a bit:\n<code>\njulia> function strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n           return sort(lst)\n       end\nstrange_sort_list (generic function\
    \ with 1 method)", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\n\
    end\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([1,5,2,3,4])\n</cell>\n\
    <code language=julia-1.5>\nstrange_sort_list([1,5,2,3,4])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector and returns a new vector where each\
    \ element is the product of all the elements in the original vector. For example,\
    \ given [1,2,3], the function should return [1,2,3].", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/ a tags=sorting,julia\
    \ |>\n<| c |>\nThis doesn't seem to work. `sort([1,2,3])` gives `[1,2,3]`, but\
    \ `sort([3,2,1])` gives `[1,2,3]`.\n<|/ c |>\n<| c |>\nIt does work. `sort([3,2,1])`\
    \ gives `[1,2,3]`. `sort([1,2,3])` gives `[1,2,3]`.\n<|/ c |>\n<| c |>\nYes, it\
    \ does work. `sort([3,2,1])` gives `[1,2,3]`. `sort([1,2,3])` gives `[1,2,3]`.\n\
    <|/ c |>\n<| c |>\nYes, it does work. `sort([3,2,1])` gives `[1,2,3]`. `sort([1,2,3])`\
    \ gives `[1,2,3]`.\n<|/ c |>\n<| c |>\nIt does work. `sort([3,2,1])` gives `[1,2,3]`.\
    \ `sort([1,2,3])` gives `[1,2,3]`.\n<|/ c |>\n<| a dscore=3 |>\nI like using sortperm:\n\
    <code>\njulia> sortperm([3,2,1])\n3-element Array{Int64,1}:\n 3\n 1\n 2\n</code>\n\
    <|/ a tags=sorting,julia |>\n<| a tags=sorting,julia |>\nThe function sortperm()\
    \ will do what you want, but it will not do what you think it does. sortperm()\
    \ will sort the array in lexicographical order (i.e. it will sort it alphabetically),\
    \ not numerical order (i.e. it will sort it numerically).\n<code>\njulia> sortperm([3,2,1])\n\
    3-element Array{Int64,1}:\n 3\n 1\n 2\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3\
    \ |>\nThe function sortperm() will do what you want, but it will not do what you\
    \ think it does. sortperm() will sort the array in lexicographical order (i.e.\
    \ it will sort it alphabetically), not numerical order (i.e. it will sort it numerically).\n\
    <code>\njulia> sortperm([3,2,1])\n3-element Array{Int64,1}:\n 3\n 1\n 2\n</code>\n\
    <|/ a tags=sorting,julia |>\n<| a dscore=3 |>\nThe function sortperm() will do\
    \ what you wan", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\n\
    end", "    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    ", "  \
    \  lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    ", "    lst = sort(lst)\n    lst = reverse(lst)\n  \
    \  return lst\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=sorting,julia |>\nThe\
    \ other answers here are great, but I thought I'd add my own solution, which is\
    \ more general:\n<code>", "    lst = sort(lst)\n    lst = reverse(lst)\n    return\
    \ lst\nend\n</code>\n<|/ a tags=sorting,julia |>\n<| c |>\nThis doesn't work for\
    \ me. `sort` returns `ERROR: MethodError: no method matching sort(::Array{Int64,1})`\n\
    <|/ c |>\n<| c |>\n`sort` works for me on Julia 0.6.2\n<|/ c |>\n<| c |>\nIt works\
    \ for me on Julia 0.6.2\n<|/ c |>\n<| c |>\nIt works for me on Julia 0.6.2\n<|/\
    \ c |>\n<| c |>\nIt works for me on Julia 0.6.2\n<|/ c |>\n<| a tags=sorting,julia\
    \ |>\n<code>\njulia> sort([3,2,1])\n3-element Array{Int64,1}:\n 1\n 2\n 3", " \
    \   \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    lst =\
    \ sort(lst)\n    \n    lst = lst.map(x -> if x == minimum then maximum else x)\n\
    \    \n    return lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a list of integers and\
    \ returns the sum of all integers in the list.", "    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    return lst\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\n\
    end\n</cell>\n<code language=julia-1.5>\nstrange_sort_list(1:10)\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list(1:100)\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list(1:1000)\n</cell>\n<code language=julia-1.5>\nstrange_sort_list(1:10000)\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list(1:100000)\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list(1:1000000)\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list(1:10000000)\n</cell>\n<code language=julia-1.5>\nstrange_sort_list(1:100000000)\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list(1:1000000000)\n</cell>\n\
    <code language=julia-1.5>\nstrange_sort_list(1:10000000000)\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list(1:100000000000)\n</cell>\n<code language=julia-1.5>\nstrange_sort_list(1:1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list(1:10000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstrange_sort_list(1:100000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list(1:1000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list(1:10000000000000000)\n</cell>\n<code language=julia-1.5>\nstrange_sort_list(1:100000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list(1:1000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list(1:10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list(1:100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list(1:1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list(1:10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list(1:100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list(1:1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list(1:", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend", "    lst = sort(lst)\n    lst =\
    \ reverse(lst)\n    return lst\nend", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend\n</code>\n<|/ a tags=sorting,julia,arrays |>\n<| a dscore=2\
    \ |>\nI came up with a solution that is more efficient than sorting the array\
    \ twice. \n<code>", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\n\
    end", "    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n  \
    \  lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    ", "    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n  \
    \  lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst =\
    \ sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    ", "  \
    \  minimum = minimum(lst)\n    maximum = maximum(lst)\n    lst = sort(lst)\n \
    \   lst = lst.map(x -> if x == minimum then maximum else x)\n    return lst\n\
    end\n</code>\n<|/ a tags=julia,sorting,arrays |>\n<| c |>\nThis is not the correct\
    \ solution. `sort` sorts lexicographically, not numerically. `sort!` will sort\
    \ numerically, but will also change the order of the elements in the original\
    \ array. `sort!` also has some performance issues, see [here](https://stackoverflow.com/questions/47702922/julia-sort-performance-issue).\n\
    <|/ c |>\n<| c |>\nI agree with you, `sort!` will change the order of the elements\
    \ in the original array. `sort!` also has some performance issues, see [here](https://stackoverflow.com/questions/47702922/julia-sort-performance-issue).\n\
    <|/ c |>\n<| c |>\nI agree with you, `sort!` will change the order of the elements\
    \ in the original array. `sort!` also has some performance issues, see [here](https://stackoverflow.com/questions/47702922/julia-sort-performance-issue).\n\
    <|/ c |>\n<| c |>\nI agree with you, `sort!` will change the order of the elements\
    \ in the original array. `sort!` also has some performance issues, see [here](https://stackoverflow.com/questions/47702922/julia-sort-performance-issue).\n\
    <|/ c |>\n<| c |>\nI agree with you, `sort!` will change the order of the elements\
    \ in the original array. `sort!` also has some performance issues, see [here](https://stackoverflow.com/questions/47702922/julia-sort-performance-issue).\n\
    <|/ c |>\n<| a |>\nThe answer by is correct, but I thought I'd add some explanation\
    \ as to why it works.\nThe key point is that sort sorts lexicographically, not\
    \ numerically. sort! will sort numerically, but will also change the order of\
    \ the elements in the original array. sort! also has some performance issues,\
    \ see here.\nThe key point is that sort sorts lexicographically, not numerically.\
    \ sort! will sort numerically, but will also change the order of the elements\
    \ in the original array. sort! also has some performance issues, see here.\nThe\
    \ key point is that sort sorts lexicographically, not numerically. sort! will\
    \ sort numerically, but will also change the order of the elements in the original\
    \ array", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend",
  "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/ a tags=sorting,julia\
    \ |>\n<| c |>\nThis doesn't work for me. `sort` returns a `Vector{Int64}`, but\
    \ `reverse` expects a `Vector{Int}`. `reverse(sort(lst))` works, but `reverse(sort(lst))[1]`\
    \ throws an error.\n<|/ c |>\n<| c |>\n`sort` returns a `Vector{Int64}`, but `reverse`\
    \ expects a `Vector{Int}`. `reverse(sort(lst))` works, but `reverse(sort(lst))[1]`\
    \ throws an error.\n<|/ c |>\n<| c |>\n`reverse(sort(lst))[1]` throws an error\
    \ because `sort` returns a `Vector{Int64}`, but `reverse` expects a `Vector{Int}`.\
    \ `reverse(sort(lst))[1]` throws an error because `sort` returns a `Vector{Int64}`,\
    \ but `reverse` expects a `Vector{Int}`. `reverse(sort(lst))[1]` throws an error\
    \ because `sort` returns a `Vector{Int64}`, but `reverse` expects a `Vector{Int}`.\
    \ `reverse(sort(lst))[1]` throws an error because `sort` returns a `Vector{Int64}`,\
    \ but `reverse` expects a `Vector{Int}`. `reverse(sort(lst))[1]` throws an error\
    \ because `sort` returns a `Vector{Int64}`, but `reverse` expects a `Vector{Int}`.\
    \ `reverse(sort(lst))[1]` throws an error because `sort` returns a `Vector{Int64}`,\
    \ but `reverse` expects a `Vector{Int}`. `reverse(sort(lst))[1]` throws an error\
    \ because `sort` returns a `Vector{Int64}`, but `reverse` expects a `Vector{Int}`.\
    \ `reverse(sort(lst))[1]` throws an error because `sort` returns a `Vector{Int64}`,\
    \ but `reverse` expects a `Vector{Int}`. `reverse(sort(lst))[1]` throws an error\
    \ because `sort` returns a `Vector{Int64}`, but `reverse` expects a `Vector{Int}`.\
    \ `reverse(sort(lst))[1]` throws an error because `sort` returns a `Vector{Int64}`,\
    \ but `reverse` expects a `Vector{Int}`. `reverse(sort(lst))[1]` throws an error\
    \ because `sort` returns a `Vector{Int64}`, but `reverse` ", "    \n    lst =\
    \ sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n \
    \   lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)",
  "    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    ", "    lst = sort(lst)\n    lst = reverse(lst)\n  \
    \  return lst\nend", "    lst = sort(lst)\n    lst = reverse(lst)\n    return\
    \ lst\nend", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector.", "    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    minimum2 = minimum(lst)\n  \
    \  maximum2 = maximum(lst)\n    minimum3 = minimum(lst)\n    maximum3 = maximum(lst)\n\
    \    minimum4 = minimum(lst)\n    maximum4 = maximum(lst)\n    minimum5 = minimum(lst)\n\
    \    maximum5 = maximum(lst)\n    minimum6 = minimum(lst)\n    maximum6 = maximum(lst)\n\
    \    minimum7 = minimum(lst)\n    maximum7 = maximum(lst)\n    minimum8 = minimum(lst)\n\
    \    maximum8 = maximum(lst)\n    minimum9 = minimum(lst)\n    maximum9 = maximum(lst)\n\
    \    minimum10 = minimum(lst)\n    maximum10 = maximum(lst)\n    minimum11 = minimum(lst)\n\
    \    maximum11 = maximum(lst)\n    minimum12 = minimum(lst)\n    maximum12 = maximum(lst)\n\
    \    minimum13 = minimum(lst)\n    maximum13 = maximum(lst)\n    minimum14 = minimum(lst)\n\
    \    maximum14 = maximum(lst)\n    minimum15 = minimum(lst)\n    maximum15 = maximum(lst)\n\
    \    minimum16 = minimum(lst)\n    maximum16 = maximum(lst)\n    minimum17 = minimum(lst)\n\
    \    maximum17 = maximum(lst)\n    minimum18 = minimum(lst)\n    maximum18 = maximum(lst)\n\
    \    minimum19 = minimum(lst)\n    maximum19 = maximum(lst)\n    minimum20 = minimum(lst)\n\
    \    maximum20 = maximum(lst)\n    minimum21 = minimum(lst)\n    maximum21 = maximum(lst)\n\
    \    minimum22 = minimum(lst)\n    maximum22 = maximum(lst)\n    minimum23 = minimum(lst)\n\
    \    maximum23 = maximum(lst)\n    minimum24 = minimum(lst)\n    maximum24 = maximum(lst)\n\
    \    minimum25 = minimum(lst)\n    maximum25 = maximum(lst)\n    minimum26 = minimum(lst)\n\
    \    maximum26 = maximum(lst)\n    minimum27 = minimum(lst)\n    maximum27 = maximum(lst)\n\
    \    minimum28 = minimum(lst)\n    maximum28 = maximum(lst)\n    minimum29 = minimum(lst)\n\
    \    maximum29 = maximum(lst)\n    minimum30 = minimum(lst)\n    maximum30 = maximum(lst)\n\
    \    minimum31 = minimum(lst)\n    maximum31 = maximum(lst)\n    minimum32 = minimum(lst)\n",
  "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/ a |>\n<| a dscore=0\
    \ |>\n<code>", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\n\
    end", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend", "  \
    \  lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    ", "    \n    minimum = minimum(lst)\n    maximum =\
    \ maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n",
  "    minimum = minimum(lst)\n    maximum = maximum(lst)\n    lst = sort(lst)\n \
    \   lst = lst.map(x -> if x == minimum then maximum else x)\n    return lst\n\
    end\n</code>\n<|/ a tags=sorting,julia |>\n<| c |>\nThis doesn't work if you have\
    \ negative numbers in the list\n<|/ c |>\n<| a tags=sorting,julia |>\n<code>",
  "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/\
    \ a |>\n<| c |>\nThis doesn't seem to work. `strange_sort_list([1,2,3,4,5,6,7,8,9,10])`\
    \ returns `[10,9,8,7,6,5,4,3,2,1]`.\n<|/ c |>\n<| c |>\nIt does work. `strange_sort_list([1,2,3,4,5,6,7,8,9,10])`\
    \ returns `[10,9,8,7,6,5,4,3,2,1]`. What do you mean by \"doesn't work\"?\n<|/\
    \ c |>\n<| c |>\nIt doesn't sort the list as expected. `strange_sort_list([1,2,3,4,5,6,7,8,9,10])`\
    \ returns `[10,9,8,7,6,5,4,3,2,1]`.\n<|/ c |>\n<| c |>\nIt does work. `strange_sort_list([1,2,3,4,5,6,7,8,9,10])`\
    \ returns `[10,9,8,7,6,5,4,3,2,1]`. What do you mean by \"doesn't work\"?\n<|/\
    \ c |>\n<| c |>\nIt doesn't sort the list as expected. `strange_sort_list([1,2,3,4,5,6,7,8,9,10])`\
    \ returns `[10,9,8,7,6,5,4,3,2,1]`.\n<|/ c |>\n<| a dscore=2 |>\nThe easiest way\
    \ is to use sort!\n<code>\njulia> sort!([1,2,3,4,5,6,7,8,9,10])\n10-element Array{Int64,1}:\n\
    \ 10\n 9\n 8\n 7\n 6\n 5\n 4\n 3\n 2\n 1\n</code>\n<|/ a tags=julia,sorting |>\n\
    <| a tags=julia,sorting |>\n<code>\njulia> function strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n           return sort(lst)\n       end\nstrange_sort_list (generic function\
    \ with 1 method)", "    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    ", "  \
    \  minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    lst = sort(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum", "    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    return lst\nend", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,julia,list\
    \ |>\n<code>", "    \n    lst = sort(lst)\n    \n    i = 0\n    \n    while i\
    \ < length(lst)\n        \n        if lst[i] < lst[i-1]\n            \n      \
    \      lst[i], lst[i-1] = lst[i-1], lst[i]\n            \n            i += 1\n\
    \            \n        elseif lst[i] > lst[i-1]\n            \n            lst[i],\
    \ lst[i-1] = lst[i-1], lst[i]\n            \n            i += 1\n            \n\
    \        else\n            \n            i += 1\n            \n        end\n \
    \       \n    end\n    \n    return lst\nend\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([2,1,3,4,5,6,7,8,9])\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list([2,1,3,4,5,6,7,8,9])\n</cell>\n\
    <code language=julia-1.5>\nstrange_sort_list([2,1,3,4,5,6,7,8,9])\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list([2,1,3,4,5,6,7,8,9])\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list([2,1,3,4,5,6,7,8,9])\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list([2,1,3,4,5,6,7,8,9])\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list([2,1,3,4,5,6,7,8,9])\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list([2,1,3,4,5,6,7,8,9])\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list([2,1,3,4,5,6,7,8,9])\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list([2,1,3,4,5,6,7,8,9])\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list([2,1,3,4,5,6,7,8,9])\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list([2,1,3,4,5,6,7,8,9])\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list([2,1,3,4,5,6,7,8,9])\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list([2,1,3,4,5,6,7,8,9])\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list([2,1,3,4,5,", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    ", "    \n    minimum = minimum(lst)\n    maximum =\
    \ maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n",
  "    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    ", "    lst = sort(lst)\n    lst = reverse(lst)\n  \
    \  return lst\nend\n</code>\n<|/ a tags=sorting,julia |>\n<| c |>\nThis doesn't\
    \ work if you have negative numbers. `sort` will sort them in descending order.\
    \ `reverse` will reverse the order of the numbers. `sort!` will sort them in ascending\
    \ order. `reverse!` will reverse the order of the numbers. `sort!` will sort them\
    \ in ascending order. `reverse!` will reverse the order of the numbers. `sort!`\
    \ will sort them in ascending order. `reverse!` will reverse the order of the\
    \ numbers. `sort!` will sort them in ascending order. `reverse!` will reverse\
    \ the order of the numbers. `sort!` will sort them in ascending order. `reverse!`\
    \ will reverse the order of the numbers. `sort!` will sort them in ascending order.\
    \ `reverse!` will reverse the order of the numbers. `sort!` will sort them in\
    \ ascending order. `reverse!` will reverse the order of the numbers. `sort!` will\
    \ sort them in ascending order. `reverse!` will reverse the order of the numbers.\
    \ `sort!` will sort them in ascending order. `reverse!` will reverse the order\
    \ of the numbers. `sort!` will sort them in ascending order. `reverse!` will reverse\
    \ the order of the numbers. `sort!` will sort them in ascending order. `reverse!`\
    \ will reverse the order of the numbers. `sort!` will sort them in ascending order.\
    \ `reverse!` will reverse the order of the numbers. `sort!` will sort them in\
    \ ascending order. `reverse!` will reverse the order of the numbers. `sort!` will\
    \ sort them in ascending order. `reverse!` will reverse the order of the numbers.\
    \ `sort!` will sort them in ascending order. `reverse!` will reverse the order\
    \ of the numbers. `sort!` will sort them in ascending order. `reverse!` will reverse\
    \ the order of the numbers. `sort!` will sort them in ascending order. `reverse!`\
    \ will reverse the order of the numbers. `sort!` will sort them in ascending order.\
    \ `reverse!` will reverse the order of the numbers. `sort!` will sort them in\
    \ ascending order. `reverse!` will reverse the order of the numbers. `sort!` will\
    \ sort them in asc", "    lst = sort(lst)\n    lst = reverse(lst)\n    return\
    \ lst\nend", "    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    ", "  \
    \  lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    ", "    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    minimum2 = minimum(lst)\n    maximum2 = maximum(lst)\n    minimum3 = minimum(lst)\n\
    \    maximum3 = maximum(lst)\n    minimum4 = minimum(lst)\n    maximum4 = maximum(lst)\n\
    \    minimum5 = minimum(lst)\n    maximum5 = maximum(lst)\n    minimum6 = minimum(lst)\n\
    \    maximum6 = maximum(lst)\n    minimum7 = minimum(lst)\n    maximum7 = maximum(lst)\n\
    \    minimum8 = minimum(lst)\n    maximum8 = maximum(lst)\n    minimum9 = minimum(lst)\n\
    \    maximum9 = maximum(lst)\n    minimum10 = minimum(lst)\n    maximum10 = maximum(lst)\n\
    \    minimum11 = minimum(lst)\n    maximum11 = maximum(lst)\n    minimum12 = minimum(lst)\n\
    \    maximum12 = maximum(lst)\n    minimum13 = minimum(lst)\n    maximum13 = maximum(lst)\n\
    \    minimum14 = minimum(lst)\n    maximum14 = maximum(lst)\n    minimum15 = minimum(lst)\n\
    \    maximum15 = maximum(lst)\n    minimum16 = minimum(lst)\n    maximum16 = maximum(lst)\n\
    \    minimum17 = minimum(lst)\n    maximum17 = maximum(lst)\n    minimum18 = minimum(lst)\n\
    \    maximum18 = maximum(lst)\n    minimum19 = minimum(lst)\n    maximum19 = maximum(lst)\n\
    \    minimum20 = minimum(lst)\n    maximum20 = maximum(lst)\n    minimum21 = minimum(lst)\n\
    \    maximum21 = maximum(lst)\n    minimum22 = minimum(lst)\n    maximum22 = maximum(lst)\n\
    \    minimum23 = minimum(lst)\n    maximum23 = maximum(lst)\n    minimum24 = minimum(lst)\n\
    \    maximum24 = maximum(lst)\n    minimum25 = minimum(lst)\n    maximum25 = maximum(lst)\n\
    \    minimum26 = minimum(lst)\n    maximum26 = maximum(lst)\n    minimum27 = minimum(lst)\n\
    \    maximum27 = maximum(lst)\n    minimum28 = minimum(lst)\n    maximum28 = maximum(lst)\n\
    \    minimum29 = minimum(lst)\n    maximum29 = maximum(lst)\n    minimum30 = minimum(lst)\n\
    \    maximum30 = maximum(lst)\n    minimum31 = minimum(lst)\n    maximum31 = maximum(lst)\n\
    \    minimum32 = minimum(lst)\n", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend", "    lst = sort(lst)\n    lst = reverse(lst)\n    return\
    \ lst\nend", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend",
  "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/\
    \ a dscore=2 |>\n<| a dscore=1 |>\n<code>", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend", "    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum", " \
    \   lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/\
    \ a dscore=2 |>\n<| a tags=sorting,julia |>\n<code>\njulia> function strange_sort(lst::Vector{Int64})\n\
    \           return sort(lst)\n       end\nstrange_sort (generic function with\
    \ 1 method)", "    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    ", "  \
    \  \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    lst = sort(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    lst =\
    \ sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n  \
    \  \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    ", "    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n  \
    \  lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst =\
    \ sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    ", "  \
    \  minimum = minimum(lst)\n    maximum = maximum(lst)\n    minimum, maximum =\
    \ minimum, maximum\n    minimum, maximum = minimum + maximum, minimum + maximum\n\
    \    minimum, maximum = minimum - maximum, minimum - maximum\n    minimum, maximum\
    \ = minimum + maximum, minimum + maximum\n    minimum, maximum = minimum - maximum,\
    \ minimum - maximum\n    minimum, maximum = minimum + maximum, minimum + maximum\n\
    \    minimum, maximum = minimum - maximum, minimum - maximum\n    minimum, maximum\
    \ = minimum + maximum, minimum + maximum\n    minimum, maximum = minimum - maximum,\
    \ minimum - maximum\n    minimum, maximum = minimum + maximum, minimum + maximum\n\
    \    minimum, maximum = minimum - maximum, minimum - maximum\n    minimum, maximum\
    \ = minimum + maximum, minimum + maximum\n    minimum, maximum = minimum - maximum,\
    \ minimum - maximum\n    minimum, maximum = minimum + maximum, minimum + maximum\n\
    \    minimum, maximum = minimum - maximum, minimum - maximum\n    minimum, maximum\
    \ = minimum + maximum, minimum + maximum\n    minimum, maximum = minimum - maximum,\
    \ minimum - maximum\n    minimum, maximum = minimum + maximum, minimum + maximum\n\
    \    minimum, maximum = minimum - maximum, minimum - maximum\n    minimum, maximum\
    \ = minimum + maximum, minimum + maximum\n    minimum, maximum = minimum - maximum,\
    \ minimum - maximum\n    minimum, maximum = minimum + maximum, minimum + maximum\n\
    \    minimum, maximum = minimum - maximum, minimum - maximum\n    minimum, maximum\
    \ = minimum + maximum, minimum + maximum\n    minimum, maximum = minimum - maximum,\
    \ minimum - maximum\n    minimum, maximum = minimum + maximum, minimum + maximum\n\
    \    minimum, maximum = minimum - maximum, minimum - maximum\n    minimum, maximum\
    \ = minimum + maximum, minimum + maximum\n    minimum, maximum = minimum - maximum,\
    \ minimum - maximum\n    minimum, maximum = minimum + maximum, minimum + maximum\n\
    \    minimum, maximum = minimum - maximum, minimum - maximum\n    minimum, maximum\
    \ = minimum + maximum, minimum + maximum\n    minimum, maximum = minimum - maximum,\
    \ minimum - maximum\n    minimum, maximum = minimum + maximum, minimum + maximum\n\
    \    minimum, maximum = minimum - maximum, minimum - maximum\n    minimum, maximum\
    \ = minimum + maximum, minimum + maximum\n    minimum, maximum = minimum - maximum,\
    \ minimum - maximum\n    minimum, maximum = minimum + maximum, minimum + maximum\n\
    \    minimum, maximum = minimum - ", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    ", "  \
    \  lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list(Int64[1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of integers and returns\
    \ a vector of strings in alphabetical order.", "    lst = sort(lst)\n    lst =\
    \ reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    ", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer the question. `strange_sort_list([2,4,6,8,10,12,14,16,18,20])`\
    \ returns `[2,4,6,8,10,12,14,16,18,20]`, not `[2,4,6,8,10,14,16,18,20,12]`.\n\
    <|/ c |>\n<| c |>\nI thought the question was about sorting in general. I'll edit\
    \ the answer to include a general solution.\n<|/ c |>\n<| c |>\nI edited the answer\
    \ to include a general solution. Hope it helps.\n<|/ c |>\n<| a tags=sorting,julia\
    \ |>\n<code>", "    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    ", "  \
    \  lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/\
    \ a tags=julia,sorting |>\n<| a tags=julia,sorting |>\n<code>", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend", "    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum_index = findfirst(i->lst[i]==minimum,\
    \ lst)\n    maximum_index = findfirst(i->lst[i]==maximum, lst)\n    \n    minimum_index\
    \ == maximum_index ? \n        lst[minimum_index] : \n        lst[minimum_index]\
    \ .. lst[maximum_index]\nend", "    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)", "    lst = sort(lst)\n    lst = reverse(lst)\n  \
    \  return lst\nend", "    lst = sort(lst)\n    lst = reverse(lst)\n    return\
    \ lst\nend", "    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n\
    \    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)", "    lst = sort(lst)\n    lst = reverse(lst)\n  \
    \  return lst\nend", "    lst = sort(lst)\n    lst = reverse(lst)\n    return\
    \ lst\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "    \n   \
    \ minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    lst = sort(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    lst =\
    \ sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n  \
    \  \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    ", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend", " \
    \   lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/\
    \ a dscore=2 |>\n<| c |>\nThis doesn't seem to work. `strange_sort_list([1,2,3])`\
    \ returns `[3,2,1]`.\n<|/ c |>\n<| c |>\nIt does work. `strange_sort_list([1,2,3])`\
    \ returns `[3,2,1]`\n<|/ c |>\n<| c |>\nI guess you meant `strange_sort_list(sort([1,2,3]))`\n\
    <|/ c |>\n<| c |>\nYes, I meant `strange_sort_list(sort([1,2,3]))`\n<|/ c |>\n\
    <| a dscore=1 |>\nThe function below will sort a vector in descending order and\
    \ return the sorted vector. \n<code>", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    ", "  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    ", "    lst = sort(lst)\n    lst = reverse(lst)\n  \
    \  lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    ", "  \
    \  \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)",
  "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns the sum\
    \ of the squares of the integers in the vector.", "    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    return lst\nend", "    \n    lst = sort(lst)\n    \n   \
    \ i = 0\n    \n    while i < length(lst)\n        \n        if lst[i] > lst[i+1]\n\
    \            \n            lst[i], lst[i+1] = lst[i+1], lst[i]\n            \n\
    \            i += 1\n            \n        end\n        \n    end\n    \n    return\
    \ lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([1,5,3,2])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector and returns\
    \ a vector where each element is the product of all the elements in the original\
    \ vector. For example, if the vector is [1,2,3], the function should return [1,2,6].",
  "    \n    lst = sort(lst)\n    \n    i = 0\n    while i < length(lst)\n       \
    \ if lst[i] < lst[i-1]\n            lst[i] = lst[i-1]\n            lst[i-1] =\
    \ lst[i]\n            lst[i] = lst[i-1]\n        end\n        i += 1\n    end\n\
    \    \n    return lst\nend", "    lst = sort(lst)\n    lst = reverse(lst)\n  \
    \  lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    ", "  \
    \  lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend", "    lst = sort(lst)\n    lst =\
    \ reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    ", "    lst = sort(lst)\n    lst = reverse(lst)\n  \
    \  return lst\nend", "    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    ", "    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    lst\
    \ = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum", " \
    \   lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    ", "    lst = sort(lst)\n    lst = reverse(lst)\n  \
    \  return lst\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\n`sort!` modifies the\
    \ original array. `sort!` should be avoided if possible.\n<|/ c |>\n<| c |>\n\
    I agree with you, but I wanted to show that `sort!` can be used in this case.\
    \ `sort!` modifies the original array in place, so it can be used in this case.\
    \ `sort!` can be avoided if possible, but in this case it can be used.\n<|/ c\
    \ |>\n<| c |>\nI agree with you, but I wanted to show that `sort!` can be used\
    \ in this case. `sort!` modifies the original array in place, so it can be used\
    \ in this case. `sort!` can be avoided if possible, but in this case it can be\
    \ used.\n<|/ c |>\n<| c |>\nI agree with you, but I wanted to show that `sort!`\
    \ can be used in this case. `sort!` modifies the original array in place, so it\
    \ can be used in this case. `sort!` can be avoided if possible, but in this case\
    \ it can be used.\n<|/ c |>\n<| c |>\nI agree with you, but I wanted to show that\
    \ `sort!` can be used in this case. `sort!` modifies the original array in place,\
    \ so it can be used in this case. `sort!` can be avoided if possible, but in this\
    \ case it can be used.\n<|/ c |>\n<| a dscore=2 |>\nI came up with a solution\
    \ that uses only a single pass over the input array:\n<code>", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/ a tags=sorting,julia\
    \ |>\n<| a |>\n<code>", "    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    ", "  \
    \  lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/\
    \ a |>\n<| c |>\nThis doesn't work if you have a list of strings. You will get\
    \ `ERROR: MethodError: no method matching reverse(::Array{String,1})`\n<|/ c |>\n\
    <| c |>\nThis doesn't work if you have a list of strings. You will get `ERROR:\
    \ MethodError: no method matching reverse(::Array{String,1})`\n<|/ c |>\n<| c\
    \ |>\nThis doesn't work if you have a list of strings. You will get `ERROR: MethodError:\
    \ no method matching reverse(::Array{String,1})`\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if you have a list of strings. You will get `ERROR: MethodError: no method\
    \ matching reverse(::Array{String,1})`\n<|/ c |>\n<| c |>\nThis doesn't work if\
    \ you have a list of strings. You will get `ERROR: MethodError: no method matching\
    \ reverse(::Array{String,1})`\n<|/ c |>\n<| a dscore=5 |>\nIn Julia 1.3, you can\
    \ use the function sortperm:\n<code>\njulia> sortperm([1,2,3])\n3-element Array{Int64,1}:\n\
    \ 3\n 1\n 2\n</code>\n<|/ a tags=julia,sorting |>\n<| c |>\nThis doesn't work\
    \ if you have a list of strings. You will get `ERROR: MethodError: no method matching\
    \ reverse(::Array{String,1})`\n<|/ c |>\n<| c |>\nThis doesn't work if you have\
    \ a list of strings. You will get `ERROR: MethodError: no method matching reverse(::Array{String,1})`\n\
    <|/ c |>\n<| c |>\nThis doesn't work if you have a list of strings. You will get\
    \ `ERROR: MethodError: no method matching reverse(::Array{String,1})`\n<|/ c |>\n\
    <| c |>\nThis doesn't work if you have a list of strings. You will get `ERROR:\
    \ MethodError: no method matching reverse(::Array{String,1})`\n<|/ c |>\n<| c\
    \ |>\nThis doesn't work if you have a list of strings. You will get `ERROR: MethodError:\
    \ no method matching reverse(::Array{String,1})`\n<|/ c |>\n<| a tags=julia,sorting\
    \ |>\nIn Julia 1.3, you can use the function sortperm:\n<code>\njulia> sortperm([1,2,3])\n\
    3-element Array{Int64,1}:\n 3\n 1\n 2\n</code>\n<|/ a dscore=5 |>", "    lst =\
    \ sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    ", "    lst = sort(lst)\n    lst = reverse(lst)\n  \
    \  lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    ", "  \
    \  lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    ", "    \n    minimum = minimum(lst)\n    maximum =\
    \ maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n",
  "    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    lst = sort(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    lst =\
    \ sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n  \
    \  \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    ", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend", " \
    \   lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    ", "    \n    minimum = minimum(lst)\n    maximum =\
    \ maximum(lst)\n    \n    lst = sort(lst)\n    \n    lst = lst[minimum:maximum]\n\
    \    \n    return lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([1,3,5,7,9])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector and returns\
    \ the sum of the elements in the vector. \nWrite a function that takes a vector\
    \ and returns the product of the elements in the vector. \nWrite a function that\
    \ takes a vector and returns the mean of the elements in the vector. \nWrite a\
    \ function that takes a vector and returns the median of the elements in the vector.\
    \ \nWrite a function that takes a vector and returns the mode of the elements\
    \ in the vector. ", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\n\
    end", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=sorting,julia |>\n<code>", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
