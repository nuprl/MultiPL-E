name: HumanEval_139_special_factorial
language: jl
prompt: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
  \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    \n\
  \    The function will receive an integer as input and should return the special\n\
  \    factorial of this integer.\n    \"\"\"\nfunction special_factorial(n::Int64)::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
  \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
  \t@test(candidate(1) == 1)\nend\n"
completions: ["    if n == 0 \n        1 \n    else \n        special_factorial(n-1)\
    \ * n\nend\n</cell>\n<code language=julia-1.5>\n@assert special_factorial(1) ==\
    \ 1 \n@assert special_factorial(2) == 2 \n@assert special_factorial(3) == 6 \n\
    @assert special_factorial(4) == 24 \n@assert special_factorial(5) == 120 \n@assert\
    \ special_factorial(6) == 720 \n@assert special_factorial(7) == 5040 \n@assert\
    \ special_factorial(8) == 40320 \n@assert special_factorial(9) == 362880 \n@assert\
    \ special_factorial(10) == 3628800\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that computes the factorial of a given number using recursion.", "    if n ==\
    \ 0 \n        1\n    else\n        factorial(n) * factorial(n-1)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@time factorial(100);\n</cell>\n<code language=julia-1.5>\n\
    @time special_factorial(100);\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ calculates the factorial of a given number using recursion.", "    if n == 0\
    \ \n        1 \n    else \n        special_factorial(n - 1) * n\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n# Test the function \nspecial_factorial(3)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that calculates the factorial of\
    \ a given number using recursion.", "    if n == 0\n        1\n    else\n    \
    \    n! * (n-1)! * (n-2)! * ... * 1!\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    special_factorial(5)\n</cell>\n<text>\nExercise 2\nWrite a function that calculates\
    \ the factorial of a number using recursion.", "    if n == 0 \n        1 \n \
    \   else \n        special_factorial(n - 1) * n\nend\n</cell>\n<text>\nExercise\
    \ 2: Write a function that calculates the factorial of a given number using recursion.",
  "    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) * n\nend\n\
    </cell>\n<text>\nThe function special_factorial is recursive, meaning that it\
    \ will call itself until it reaches the base case where n == 0. In this case,\
    \ the base case is when n == 0, which means that we return 1 since 1 factorial\
    \ is equal to 1. We will also need to import the function factorial from the math\
    \ library to complete the function definition:", "    if n == 0\n        1\n \
    \   else\n        n! * (n-1)! * (n-2)! * ... * 1!\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nspecial_factorial(5)\n</cell>\n<text>\nThe function factorial\
    \ is defined as:\n    factorial(n) = n!", "    if n == 0 \n        1 \n    else\
    \ \n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n    where n > 0", "    if n == 0 \n        1 \n\
    \    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert special_factorial(3) == 6\n@assert special_factorial(4) == 24\n@assert\
    \ special_factorial(5) == 120\n@assert special_factorial(6) == 720\n@assert special_factorial(7)\
    \ == 5040\n@assert special_factorial(8) == 40320\n@assert special_factorial(9)\
    \ == 362880\n@assert special_factorial(10) == 3628800\n@assert special_factorial(11)\
    \ == 39916800\n@assert special_factorial(12) == 479001600\n@assert special_factorial(13)\
    \ == 6227020800\n@assert special_factorial(14) == 87178291200\n@assert special_factorial(15)\
    \ == 1307674368000\n@assert special_factorial(16) == 20922789888000\n@assert special_factorial(17)\
    \ == 355687428096000\n@assert special_factorial(18) == 6402373705728000\n@assert\
    \ special_factorial(19) == 121645100408832000\n@assert special_factorial(20) ==\
    \ 2432902008176640000\n@assert special_factorial(21) == 51090942171709440000\n\
    @assert special_factorial(22) == 1124000727777607680000\n@assert special_factorial(23)\
    \ == 25852016738884976640000\n@assert special_factorial(24) == 620448401733239439360000\n\
    @assert special_factorial(25) == 15511210043330985984000000\n@assert special_factorial(26)\
    \ == 403291461126605635584000000\n@assert special_factorial(27) == 10888869450418352160768000000\n\
    @assert special_factorial(28) == 304888344611713860501504000000\n@assert special_factorial(29)\
    \ == 8841761993739701954543616000000\n@assert special_factorial(30) == 265252859812191058636308480000000\n\
    @assert special_factorial(31) == 8222838654177922817725562880000000\n@assert special_factorial(32)\
    \ == 263130836933693530167218012160000000\n@assert special_factorial(33) == 8683317618811886495518194401280000000\n\
    @assert special_factorial(34) == 28521267700285334472656250000000000000000\n@assert\
    \ special_factorial(", "    if n == 0 \n        1 \n    else \n        special_factorial(n-1)\
    \ * n\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time brazilian_factorial(10)\n\
    </cell>\n<code language=julia-1.5>\n@time special_factorial(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the factorial of a given number using\
    \ recursion.", "    if n == 0 \n        1 \n    else \n        special_factorial(n\
    \ - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\nThe Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0", "    if n == 0 \n        1 \n    else \n        special_factorial(n\
    \ - 1) * n\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time brazilian_factorial(100);\n\
    </cell>\n<code language=julia-1.5>\n@time special_factorial(100);\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the factorial of a number given as\
    \ a parameter. \nThe function should return the factorial of the number given\
    \ as a parameter. \nThe function should raise an error if the number given as\
    \ a parameter is negative.", "    if n == 0 \n        1 \n    else \n        special_factorial(n\
    \ - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\nThe Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0", "    if n == 0 \n        1 \n    else \n        special_factorial(n\
    \ - 1) * n\n    end\nend", "    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time factorial(100);\n@time\
    \ special_factorial(100);\n</cell>\n<text>\nExercise\nWrite a function that calculates\
    \ the factorial of a given number using recursion.", "    if n == 0\n        1\n\
    \    else\n        n * (special_factorial(n-1))\n    end\nend", "    if n == 0\n\
    \        1\n    else\n        n! * (n-1)! * (n-2)! * ... * 1!\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype special_factorial(3)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype special_factorial(4)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a given number using\
    \ recursion.", "    if n == 0 \n        1 \n    else \n        special_factorial(n\
    \ - 1) * n \nend\n</cell>\n<code language=julia-1.5>\n\"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0", "    if n == 0 \n        1 \n    else \n        special_factorial(n\
    \ - 1) * n \nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\nThe factorial of\
    \ a number n is defined as:\n    factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0", "    if n == 0 \n        1\n    else\n        n! * (n-1)! *\
    \ (n-2)! * (n-3)! * (n-4)! * (n-5)! * (n-6)! * (n-7)! * (n-8)! * (n-9)! * (n-10)!\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\nspecial_factorial(10)\n</cell>\n\
    <code language=julia-1.0>\n\"\"\"\n    factorial_series(n::Int64)::Int64", " \
    \   if n == 0 \n        1 \n    else \n        special_factorial(n - 1) * n\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    factorial_series(n::Int64)",
  "    if n == 0 \n        1\n    else\n        n * (special_factorial(n-1))\n   \
    \ end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\nThe Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0", "    if n == 0 \n        1 \n    else \n        special_factorial(n-1)\
    \ * n\nend\n</cell>\n<code language=julia-1.5>\n@assert special_factorial(1) ==\
    \ 1 \n@assert special_factorial(2) == 2 \n@assert special_factorial(3) == 6 \n\
    @assert special_factorial(4) == 24 \n@assert special_factorial(5) == 120 \n@assert\
    \ special_factorial(6) == 720 \n@assert special_factorial(7) == 5040 \n@assert\
    \ special_factorial(8) == 40320 \n@assert special_factorial(9) == 362880 \n@assert\
    \ special_factorial(10) == 3628800\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)!\
    \ * (n-2)! * ... * 1!\n    where n > 0", "    if n == 0\n        1\n    else\n\
    \        n! * (n-1)! * (n-2)! * (n-3)! * (n-4)! * (n-5)! * (n-6)! * (n-7)! * (n-8)!\
    \ * (n-9)! * (n-10)! * (n-11)! * (n-12)! * (n-13)! * (n-14)! * (n-15)! * (n-16)!\
    \ * (n-17)! * (n-18)! * (n-19)! * (n-20)! * (n-21)! * (n-22)! * (n-23)! * (n-24)!\
    \ * (n-25)! * (n-26)! * (n-27)! * (n-28)! * (n-29)! * (n-30)! * (n-31)! * (n-32)!\
    \ * (n-33)! * (n-34)! * (n-35)! * (n-36)! * (n-37)! * (n-38)! * (n-39)! * (n-40)!\
    \ * (n-41)! * (n-42)! * (n-43)! * (n-44)! * (n-45)! * (n-46)! * (n-47)! * (n-48)!\
    \ * (n-49)! * (n-50)! * (n-51)! * (n-52)! * (n-53)! * (n-54)! * (n-55)! * (n-56)!\
    \ * (n-57)! * (n-58)! * (n-59)! * (n-60)! * (n-61)! * (n-60)! * (n-62)! * (n-63)!\
    \ * (n-64)! * (n-65)! * (n-66)! * (n-67)! * (n-68)! * (n-69)! * (n-70)! * (n-71)!\
    \ * (n-72)! * (n-73)! * (n-74)! * (n-75)! * (n-76)! * (n-77)! * (n-78)! * (n-79)!\
    \ * (n-80)! * (n-81)! * (n-82)! * (n-83)! * (n-84)! * (n-85)! * (n-86)! * (n-87)!\
    \ * (n-88)! * (n-89)! * (n-90)! * (n-91)! * (n-92)! * (n-93)! * (n-94)! * (n-95)!\
    \ * (n-96)! * (n-97)! * (n-98)! * (n-99)! * (n-100)! * (n-101)! * (n-102)! * (n-103)!\
    \ * (n-104)! * (n-105)! * (n-106)", "    if n == 0 \n        1 \n    else \n \
    \       special_factorial(n - 1) * n \nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that calculates the factorial of a number using recursion.", "  \
    \  if n == 0 \n        1 \n    else \n        special_factorial(n - 1) * n \n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\nThe Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0", "    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n# Test\n@assert special_factorial(1)\
    \ == 1 \n@assert special_factorial(2) == 2 \n@assert special_factorial(3) == 6\
    \ \n@assert special_factorial(4) == 24 \n@assert special_factorial(5) == 120 \n\
    @assert special_factorial(6) == 720 \n@assert special_factorial(7) == 5040 \n\
    @assert special_factorial(8) == 40320 \n@assert special_factorial(9) == 362880\
    \ \n@assert special_factorial(10) == 3628800\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that calculates the factorial of a number given as an input parameter\
    \ and returns the factorial as a Float64. Test your function with the following\
    \ values:", "    if n == 0 \n        1 \n    else \n        special_factorial(n-1)\
    \ * n\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    factorial(n::Int64)",
  "    if n == 0\n        1\n    else\n        n * (special_factorial(n - 1))\n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>\n@time factorial(10000);\n</cell>\n\
    <code language=julia-1.5>\n@time special_factorial(10000);\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the factorial of a given number using\
    \ recursion.", "    if n == 0 \n        1 \n    else \n        special_factorial(n\
    \ - 1) * n\nend", "    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n\
    \    end\nend", "    if n == 0 \n        1 \n    else \n        special_factorial(n\
    \ - 1) * n \nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\nThe factorial of\
    \ a number n is defined as:\n    factorial(n) = n!\n    where n > 0", "    if\
    \ n == 0 \n        1 \n    else \n        special_factorial(n - 1) * n\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert special_factorial(5) == 120\n</cell>\n\
    <text>\nExercise 2\nWrite a function that calculates the factorial of a number\
    \ using recursion.", "    if n == 0 \n        1\n    else \n        special_factorial(n\
    \ - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n@time brazilian_factorial(100);\n\
    </cell>\n<text>\nExercise 3\nWrite a function that calculates the factorial of\
    \ a number using recursion.", "    if n == 0 \n        1 \n    else \n       \
    \ special_factorial(n - 1) * n \nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ special_factorial(5) == 120\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ calculates the factorial of a given number using recursion.", "    if n == 0\
    \ \n        1\n    else\n        n * (special_factorial(n-1))\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\nThe Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0", "    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time factorial(10)\n</cell>\n\
    <code language=julia-1.5>\n@time special_factorial(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the factorial of a given number using recursion.",
  "    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) * n \n\
    end\n</cell>\n<code language=julia-1.3>\nspecial_factorial(5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the factorial of a given number.\
    \ \nThe function should receive a number as input and should return the factorial\
    \ of this number.", "    if n == 0\n        1\n    else\n        n! * (n-1)! *\
    \ (n-2)! * ... * 1!\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)!\
    \ * (n-2)! * ... * 1!\n    where n > 0", "    if n == 0 \n        1 \n    else\
    \ \n        special_factorial(n - 1) * n \nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n    where n > 0", "    if n == 0 \n        1 \n\
    \    else \n        special_factorial(n - 1) * n \nend\n</cell>\n<text>\nThe factorial\
    \ function above is recursive, meaning that it will call itself until it reaches\
    \ the base case (when n is 0). In the special factorial function, we will also\
    \ need to keep track of the factorial of previous numbers. To do this, we will\
    \ use a mutable variable called factorials. We will initialize this variable with\
    \ 1 because factorials[0] will always be 1. We will also need a variable called\
    \ n to keep track of the current factorial we are calculating. Finally, we will\
    \ use a for loop to iterate over all numbers from 1 to n. Finally, we will return\
    \ the factorial of n by multiplying the factorials variable with the current factorial.",
  "    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\nend\n\
    </cell>\n<code language=julia-1.5>\nspecial_factorial(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the factorial of a number using recursion.",
  "    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) * n \n\
    end\n</cell>\n<code language=julia-1.5>\n@assert special_factorial(5) == 120\n\
    </cell>\n<text>\nExercise 2\nWrite a function that calculates the factorial of\
    \ a number given as an input.", "    if n == 0 \n        1\n    else\n       \
    \ n! * (n-1)! * (n-2)! * (n-3)! * (n-4)! * (n-5)! * ... * (n-(n+1))!\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0", "    if n == 0 \n        1 \n    else \n        special_factorial(n\
    \ - 1) * n\n    end\nend", "    if n == 0 \n        1\n    else\n        n * (special_factorial(n-1))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0", "    if n == 0 \n        1 \n    else \n        special_factorial(n\
    \ - 1) * n\n    end\nend", "    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n\
    \    end\nend\n</cell>\n<text>\nNow let's test the function by giving it a number\
    \ between 0 and 20", "    if n == 0\n        1\n    else\n        factorial(n)\
    \ * factorial(n-1)\n    end\nend", "    if n == 0 \n        1 \n    else \n  \
    \      special_factorial(n-1) * n\n    end\nend\n</cell>\n<code language=julia-1.1>\n\
    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n    where n > 0", "    if n == 0\n        1\n\
    \    else\n        n! * (n-1)! * (n-2)! * ... * 1!\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype special_factorial(10)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype special_factorial(100)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ special_factorial(1000)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ special_factorial(10000)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ special_factorial(100000)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ special_factorial(1000000)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ special_factorial(10000000)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ special_factorial(100000000)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ special_factorial(1000000000)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ special_factorial(10000000000)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ special_factorial(100000000000)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ special_factorial(1000000000000)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ special_factorial(10000000000000)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ special_factorial(100000000000000)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ special_factorial(1000000000000000)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ special_factorial(10000000000000000)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ special_factorial(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype special_factorial(1000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype special_factorial(10000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype special_factorial(100000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype special_factorial(1000000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype special_factorial(10000000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype special_factorial(100000000000000000000000)\n</cell>\n", "    if\
    \ n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert special_factorial(1) == 1 \"\
    The function special_factorial should return 1 when n = 1\"\n@assert special_factorial(2)\
    \ == 2 \"The function special_factorial should return 2 when n = 2\"\n@assert\
    \ special_factorial(3) == 6 \"The function special_factorial should return 6 when\
    \ n = 3\"\n@assert special_factorial(4) == 24 \"The function special_factorial\
    \ should return 24 when n = 4\"\n@assert special_factorial(5) == 120 \"The function\
    \ special_factorial should return 120 when n = 5\"\n@assert special_factorial(6)\
    \ == 720 \"The function special_factorial should return 720 when n = 6\"\n@assert\
    \ special_factorial(7) == 50401 \"The function special_factorial should return\
    \ 50401 when n = 7\"\n@assert special_factorial(8) == 40320 \"The function special_factorial\
    \ should return 40320 when n = 8\"\n@assert special_factorial(9) == 362880 \"\
    The function special_factorial should return 362880 when n = 9\"\n@assert special_factorial(10)\
    \ == 3628800 \"The function special_factorial should return 3628800\"\n@assert\
    \ special_factorial(11) == 39916800 \"The function special_factorial should return\
    \ 39916800\"\n@assert special_factorial(12) == 479001600 \"The function special_factorial\
    \ should return 479001600\"\n@assert special_factorial(13) == 6227020800 \"The\
    \ function special_factorial should return 6227020800\"\n@assert special_factorial(14)\
    \ == 87178291200 \"The function special_factorial should return 87178291200\"\n\
    @assert special_factorial(15) == 13076743680000 \"The function special_factorial\
    \ should return 13076743680000\"\n@assert special_factorial(16) == 20922789888000\
    \  \"The function special_factorial should return 20922789888000\"\n@assert special_factorial(17)\
    \ == 355687428096000  \"The function special_factorial should return 355687428096000\"\
    \n@assert special_factorial(18) == 6402373705728000  \"The function special_factorial\
    \ should return 6402373705728000\"\n@assert special_factorial(19) == 121645100408832000\
    \  \"The function special_factorial should return 121645100408832000\"\n@assert ",
  "    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) * n\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0", "    if n == 0 \n        1 \n    else \n        special_factorial(n\
    \ - 1) * n\nend", "    if n == 0 \n        1 \n    else \n        special_factorial(n-1)\
    \ * n\nend\n</cell>\n<code language=julia-1.5>\nspecial_factorial(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that calculates the factorial of a given\
    \ number using recursion.", "    if n == 0 \n        1\n    else \n        n *\
    \ special_factorial(n-1)\n    end\nend", "    if n == 0 \n        1 \n    else\
    \ \n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n    where n > 0", "    if n == 0 \n        1\n\
    \    else\n        n! * (n-1)! * (n-2)! * (n-3)! * (n-4)! * (n-5)! * ... * (n-(n+1))!\n\
    \    end\nend", "    if n == 0 \n        1 \n    else \n        special_factorial(n\
    \ - 1) * n\nend\n</cell>\n<code language=julia-1.5>\nspecial_factorial(5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that calculates the factorial of a number\
    \ using recursion.", "    if n == 0 \n        1\n    else\n        n * (special_factorial(n-1))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nspecial_factorial(5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that calculates the factorial of a given\
    \ number using recursion.", "    if n == 0 \n        1 \n    else \n        special_factorial(n\
    \ - 1) * n \nend\n</cell>\n<text>\nThe factorial function will return the factorial\
    \ of a given number n. For example, factorial(5) = 5 x 4 x 3 x 2 x 1 = 120.",
  "    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@time factorial(100000);\n</cell>\n<code\
    \ language=julia-1.5>\n@time special_factorial(100000);\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the factorial of a number using recursion.",
  "    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) * n\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    factorial(n::Int64)",
  "    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert special_factorial(1) == 1 \"\
    The function special_factorial should return 1 when n is 1\"\n@assert special_factorial(2)\
    \ == 2 \"The function special_factorial should return 2 when n is 2\"\n@assert\
    \ special_factorial(3) == 6 \"The function special_factorial should return 6 when\
    \ n is 3\"\n@assert special_factorial(4) == 24 \"The function special_factorial\
    \ should return 24 when n is 4\"\n@assert special_factorial(5) == 120 \"The function\
    \ special_factorial should return 120 when n is 5\"\n@assert special_factorial(6)\
    \ == 720 \"The function special_factorial should return 720 when n is 6\"\n@assert\
    \ special_factorial(7) == 50401 \"The function special_factorial should return\
    \ 50401 when n is 7\"\n@assert special_factorial(8) == 40320 \"The function special_factorial\
    \ should return 40320 when n is 8\"\n@assert special_factorial(9) == 362880 \"\
    The function special_factorial should return 362880 when n is 9\"\n@assert special_factorial(10)\
    \ == 3628800 \"The function special_factorial should return 3628800 when n is\
    \ 10\"\n@assert special_factorial(11) == 39916800 \"The function special_factorial\
    \ should return 39916800 when n is 11\"\n@assert special_factorial(12) == 479001600\
    \ \"The function special_factorial should return 479001600 when n is 12\"\n@assert\
    \ special_factorial(13) == 6227020800 \"The function special_factorial should\
    \ return 6227020800 when n is 13\"\n@assert special_factorial(14) == 87178291200\
    \ \"The function special_factorial should return 87178291200 when n is 14\"\n\
    @assert special_factorial(15) == 1307674368000 \"The function special_factorial\
    \ should return 1307674368000 when n is 15\"\n@assert special_factorial(16) ==\
    \ 20922789888000 \"The function special_factorial should return 20922789888000\
    \ when n is 16\"\n@assert special_factorial(17) == 35568742809600 \"The function\
    \ special_factorial should return 35568742809600 when n is 17\"\n@assert special_factorial(18)\
    \ == 640237370572800 \"The function special_factorial ", "    if n == 0 \n   \
    \     1 \n    else \n        special_factorial(n - 1) * n\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@time factorial(10000);\n@time special_factorial(10000);\n\
    </cell>\n<text>\nExercise 3\nWrite a function that calculates the factorial of\
    \ a given number using recursion.", "    if n == 0 \n        1 \n    else \n \
    \       special_factorial(n - 1) * n \nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n    where n > 0", "    if n == 0 \n        1 \n\
    \    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n    where n > 0", "    if n == 0\n        1\n\
    \    else\n        factorial(n) * factorial(n-1)\n    end\nend", "    if n ==\
    \ 0 \n        1 \n    else \n        special_factorial(n - 1) * n \nend\n</cell>\n\
    <code language=julia-1.3>\nspecial_factorial(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that calculates the factorial of a given number using recursion.",
  "    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) * n\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\nThe Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0", "    if n == 0 \n        1 \n    else \n        special_factorial(n\
    \ - 1) * n\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time factorial(10000);\n\
    </cell>\n<code language=julia-1.5>\n@time special_factorial(10000);\n</cell>\n\
    <text>\nExercise 3\nWrite a function that calculates the factorial of a number\
    \ given as input.", "    if n == 0 \n        1 \n    else \n        special_factorial(n-1)\
    \ * n\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\nThe Brazilian\
    \ factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)!\
    \ * ... * 1!\n    where n > 0", "    if n == 0\n        1\n    else\n        n\
    \ * (special_factorial(n-1))\n    end\nend\n</cell>\n<code language=julia-1.1>\n\
    \"\"\"\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n    where n > 0", "    if n == 0 \n        1 \n\
    \    else \n        special_factorial(n - 1) * n \nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    factorial(n::Int64)", "    if n == 0 \n        1 \n    else \n   \
    \     special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\"\
    \"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! *\
    \ (n-1)! * (n-2)! * ... * 1!\n    where n > 0", "    if n == 0 \n        1\n \
    \   else\n        n * (special_factorial(n-1))\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n    where n > 0", "    if n == 0 \n        1 \n\
    \    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test the function \nspecial_factorial(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that computes the factorial of a given number using a recursive function.",
  "    if n == 0 \n        1\n    else\n        special_factorial(n-1) * n\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    factorial(n::Int64)", " \
    \   if n == 0\n        1\n    else\n        n * special_factorial(n-1)\n    end\n\
    end", "    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\nThe Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0", "    if n == 0 \n        1 \n    else \n        special_factorial(n\
    \ - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\nThe Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0", "    if n == 0 \n        1 \n    else \n        special_factorial(n\
    \ - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n@assert special_factorial(5)\
    \ == 120\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the factorial\
    \ of a given number using recursion.", "    if n == 0\n        1\n    else\n \
    \       n * special_factorial(n-1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test the function\n@assert special_factorial(5) == 120\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the factorial of a given number using recursion.",
  "    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) * n\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"The Brazilian factorial is defined as:\n\
    \    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0",
  "    if n == 0 \n        1\n    else\n        n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nspecial_factorial(3)\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0", "    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n# Test the function \nspecial_factorial(5)\n</cell>\n\
    <code language=julia-1.5>\n# Test the function \nspecial_factorial(10)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that calculates the factorial of a number\
    \ given as an input parameter. \nThe function should return the factorial of the\
    \ number given as an input parameter. \nThe function should raise a TypeError\
    \ if the input parameter is not a number.", "    if n == 0\n        1\n    else\n\
    \        n * (special_factorial(n-1))\n    end\nend", "    if n == 0 \n      \
    \  1 \n    else \n        special_factorial(n - 1) * n\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"\n    factorial(n::Int64)::Int64\n    \n    Computes\
    \ the factorial of a given integer.\n    \n    For example:\n    \n    The function\
    \ will receive an integer as input and should return the factorial of this integer.\n\
    \    \"\"\"", "    if n == 0 \n        1 \n    else \n        special_factorial(n\
    \ - 1) * n \nend\n</cell>\n<code language=julia-1.5>\n@time brazilian_factorial(100);\n\
    </cell>\n<text>\nExercise 2\nWrite a function that calculates the factorial of\
    \ a number using recursion.", "    if n == 0 \n        1 \n    else \n       \
    \ special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ special_factorial(5) == 120\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ calculates the factorial of a given number using recursion.", "    if n == 0\
    \ \n        1 \n    else \n        special_factorial(n - 1) * n\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that calculates the factorial of a given\
    \ integer n using recursion.", "    if n == 0 \n        1 \n    else \n      \
    \  special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n# Test\
    \ the function with different inputs\nprintln(special_factorial(1))\nprintln(special_factorial(2))\n\
    println(special_factorial(3))\nprintln(special_factorial(4))\nprintln(special_factorial(5))\n\
    println(special_factorial(6))\nprintln(special_factorial(7))\nprintln(special_factorial(8))\n\
    println(special_factorial(9))\nprintln(special_factorial(10))\nprintln(special_factorial(11))\n\
    println(special_factorial(12))\nprintln(special_factorial(13))\nprintln(special_factorial(14))\n\
    println(special_factorial(15))\nprintln(special_factorial(16))\nprintln(special_factorial(17))\n\
    println(special_factorial(18))\nprintln(special_factorial(19))\nprintln(special_factorial(20))\n\
    println(special_factorial(21))\nprintln(special_factorial(22))\nprintln(special_factorial(23))\n\
    println(special_factorial(24))\nprintln(special_factorial(25))\nprintln(special_factorial(26))\n\
    println(special_factorial(27))\nprintln(special_factorial(28))\nprintln(special_factorial(29))\n\
    println(special_factorial(30))\nprintln(special_factorial(31))\nprintln(special_factorial(32))\n\
    println(special_factorial(33))\nprintln(special_factorial(34))\nprintln(special_factorial(35))\n\
    println(special_factorial(36))\nprintln(special_factorial(37))\nprintln(special_factorial(38))\n\
    println(special_factorial(39))\nprintln(special_factorial(40))\nprintln(special_factorial(41))\n\
    println(special_factorial(42))\nprintln(special_factorial(43))\nprintln(special_factorial(44))\n\
    println(special_factorial(45))\nprintln(special_factorial(46))\nprintln(special_factorial(47))\n\
    println(special_factorial(48))\nprintln(special_factorial(49))\nprintln(special_factorial(50))\n\
    println(special_factorial(51))\nprintln(special_factorial(52))\nprintln(special_factorial(53))\n\
    println(special_factorial(54))\nprintln(special_factorial(55))\nprintln(special_factorial(56))\n\
    println(special_factorial(57))\nprintln(special_factorial(58))\nprintln(special_factorial(59))\n\
    println(special_factorial(60))\nprintln(special_factorial(", "    if n == 0 \n\
    \        1\n    else \n        special_factorial(n - 1) * n\n    end\nend", " \
    \   if n == 0 \n        1 \n    else \n        special_factorial(n - 1) * n \n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the factorial\
    \ of a given number using recursion.", "    if n == 0 \n        1 \n    else \n\
    \        special_factorial(n - 1) * n \nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that receives an integer as input and returns the factorial of this\
    \ integer.", "    if n == 0 \n        1 \n    else \n        special_factorial(n\
    \ - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n@assert special_factorial(5)\
    \ == 120\n</cell>\n<text>\nExercise 2\nWrite a function that computes the factorial\
    \ of a given number using recursion.", "    if n == 0 \n        1 \n    else \n\
    \        special_factorial(n - 1) * n \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    factorial(n::Int64)", "    if n == 0 \n        1 \n    else \n   \
    \     special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    special_factorial(5)\n</cell>\n<code language=julia-1.5>\n\"\"\"The Brazilian\
    \ factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)!\
    \ * ... * 1!\n    where n > 0", "    if n == 0\n        1\n    else\n        n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test the function \nspecial_factorial(3)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that calculates the factorial of a given number using recursion.",
  "    if n == 0\n        1\n    else\n        n! * (n-1)! * (n-2)! * ... * 1!\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\n# Test the function \nspecial_factorial(4)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that computes the factorial of a\
    \ number using a while loop.", "    if n == 0 \n        1 \n    else \n      \
    \  special_factorial(n - 1) * n\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    factorial(n::Int64)", "    if n == 0 \n        1 \n    else \n   \
    \     special_factorial(n-1) * n\nend\n</cell>\n<code language=julia-1.5>\n\"\"\
    \"\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! *\
    \ (n-1)! * (n-2)! * ... * 1!\n    where n > 0", "    if n == 0 \n        1 \n\
    \    else \n        special_factorial(n - 1) * n\n    end\nend", "    if n ==\
    \ 0\n        1\n    else\n        n! * (n-1)! * (n-2)! * ... * 1!\n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that receives a number as input\
    \ and returns the factorial of this number.", "    if n == 0\n        1\n    else\n\
    \        n * (special_factorial(n-1))\n    end\nend", "    if n == 0 \n      \
    \  1 \n    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    factorial_series(n::Int64)::Int64\n    \n    Calculates the factorial\
    \ series up to n.\n    \n    For example:\n    \n    The function will receive\
    \ an integer as input and should return the factorial\n    series of this integer.\n\
    \    \"\"\"", "    if n == 0 \n        1 \n    else \n        special_factorial(n\
    \ - 1) * n\nend\n</cell>\n<text>\nExercise 3\nWrite a function that calculates\
    \ the factorial of a given number using recursion.", "    if n == 0 \n       \
    \ 1 \n    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    factorial_series(n::Int64)", "    if n == 0 \n        1\n    else\n\
    \        n * (special_factorial(n-1))\n    end\nend", "    if n == 0\n       \
    \ 1\n    else\n        n! * (n-1)! * (n-2)! * ... * 1!\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    factorial(n::Int64)", "    if n == 0 \n\
    \        1\n    else\n        n * (special_factorial(n-1))\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@time factorial(10000);\n</cell>\n<code language=julia-1.5>\n\
    @time special_factorial(10000);\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that calculates the factorial of a number using recursion.", "    if n == 0\
    \ \n        1\n    else\n        n * (special_factorial(n-1))\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    factorial_series(n::Int64)", " \
    \   if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n   \
    \ end\nend", "    if n == 0 \n        1\n    else\n        n * (special_factorial(n-1))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time factorial(10000);\n</cell>\n\
    <code language=julia-1.5>\n@time special_factorial(10000);\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the factorial of a given number using\
    \ recursion.", "    if n == 0 \n        1 \n    else \n        special_factorial(n\
    \ - 1) * n\nend\n</cell>\n<text>\nThe factorial function above is recursive, which\
    \ means that it calls itself until it reaches the base case. In the case of the\
    \ factorial function, the base case is when the input is 0. The factorial function\
    \ will keep calling itself until it reaches the base case. In the case of the\
    \ factorial function, the base case is when the input is 0. The factorial function\
    \ will keep calling itself until it reaches the base case. In the case of the\
    \ factorial function, the base case is when the input is 0. The factorial function\
    \ will keep calling itself until it reaches the base case. In the case of the\
    \ factorial function, the base case is when the input is 0. The factorial function\
    \ will keep calling itself until it reaches the base case. In the case of the\
    \ factorial function, the base case is when the input is 0. The factorial function\
    \ will keep calling itself until it reaches the base case. In the case of the\
    \ factorial function, the base case is when the input is 0. The factorial function\
    \ will keep calling itself until it reaches the base case. In the case of the\
    \ factorial function, the base case is when the input is 0. The factorial function\
    \ will keep calling itself until it reaches the base case. In the case of the\
    \ factorial function, the base case is when the input is 0. The factorial function\
    \ will keep calling itself until it reaches the base case. In the case of the\
    \ factorial function, the base case is when the input is 0. The factorial function\
    \ will keep calling itself until it reaches the base case. In the case of the\
    \ factorial function, the base case is when the input is 0. The factorial function\
    \ will keep calling itself until it reaches the base case. In the case of the\
    \ factorial function, the base case is when the input is 0. The factorial function\
    \ will keep calling itself until it reaches the base case. In the case of the\
    \ factorial function, the base case is when the input is 0. The factorial function\
    \ will keep calling itself until it reaches the base case. In the case of the\
    \ factorial function, the base case is when the input is 0. The factorial function\
    \ will keep calling itself until it reaches the base case. In the case of the\
    \ factorial function, the base case is when the input is 0. The factorial function\
    \ will keep calling itself until it reaches the base case. In the case of the\
    \ factorial function, the base case is when the input is 0. The factorial function\
    \ will keep calling itself until it reaches the base case. In the case of the\
    \ factorial function, the base case is when the input is 0. The factorial function\
    \ will keep calling itself until it reaches the base case. In the case of the\
    \ factorial function, the base case is when the input is 0. The factorial function\
    \ will keep ", "    if n == 0 \n        1 \n    else \n        special_factorial(n\
    \ - 1) * n \nend\n</cell>\n<code language=julia-1.5>\n@time factorial(10000);\n\
    @time special_factorial(10000);\n</cell>\n<text>\nExercise: Write a function that\
    \ calculates the factorial of a given number using recursion.", "    if n == 0\
    \ \n        1 \n    else \n        special_factorial(n - 1) * n \nend\n</cell>\n\
    <code language=julia-1.5>\n@time brazilian_factorial(100);\n</cell>\n<code language=julia-1.5>\n\
    @time special_factorial(100);\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ calculates the factorial of a given number using recursion.", "    if n == 0\n\
    \        1\n    else\n        n! * (n-1)! * (n-2)! * (n-3)! * (n-4)! * (n-5)!\
    \ * (n-6)! * (n-7)! * (n-8)! * (n-9)! * (n-10)! * (n-11)! * (n-12)! * (n-13)!\
    \ * (n-14)! * (n-15)! * (n-16)! * (n-17)! * (n-18)! * (n-19)! * (n-20)! * (n-21)!\
    \ * (n-22)! * (n-23)! * (n-24)! * (n-25)! * (n-26)! * (n-27)! * (n-28)! * (n-29)!\
    \ * (n-30)! * (n-31)! * (n-32)! * (n-33)! * (n-34)! * (n-35)! * (n-36)! * (n-37)!\
    \ * (n-38)! * (n-39)! * (n-40)! * (n-41)! * (n-42)! * (n-43)! * (n-44)! * (n-45)!\
    \ * (n-46)! * (n-47)! * (n-48)! * (n-49)! * (n-50)! * (n-51)! * (n-52)! * (n-53)!\
    \ * (n-54)! * (n-55)! * (n-56)! * (n-57)! * (n-58)! * (n-59)! * (n-60)! * (n-61)!\
    \ * (n-62)! * (n-63)! * (n-64)! * (n-65)! * (n-66)! * (n-67)! * (n-68)! * (n-69)!\
    \ * (n-70)! * (n-71)! * (n-72)! * (n-73)! * (n-74)! * (n-75)! * (n-76)! * (n-77)!\
    \ * (n-78)! * (n-79)! * (n-80)! * (n-81)! * (n-82)! * (n-83)! * (n-84)! * (n-85)!\
    \ * (n-86)! * (n-87)! * (n-88)! * (n-89)! * (n-90)! * (n-91)! * (n-92)! * (n-93)!\
    \ * (n-94)! * (n-95)! * (n-96)! * (n-97)! * (n-98)! * (n-99)! * (n-100)! * (n-101)!\
    \ * (n-102)! * (n-103)! * (n-104)! * (n-105)! * (n-106)! * (n-107", "    if n\
    \ == 0 \n        1 \n    else \n        special_factorial(n - 1) * n \nend\n</cell>\n\
    <code language=julia-1.5>\n# TEST special_factorial (5th block)\n@test special_factorial(5)\
    \ == 120\n</cell>\n<text>\nExercise 3\nWrite a function that computes the factorial\
    \ of a given number using recursion.", "    if n == 0 \n        1\n    else\n\
    \        n * special_factorial(n-1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time factorial(10000)\n</cell>\n<code language=julia-1.5>\n@time special_factorial(10000)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that calculates the factorial of\
    \ a given number using recursion.", "    if n == 0\n        1\n    else\n    \
    \    n * (special_factorial(n-1))\n    end\nend\n</cell>\n<text>\nNow let's test\
    \ the function with some examples:", "    if n == 0 \n        1 \n    else \n\
    \        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert special_factorial(5) == 120\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that calculates the factorial of a given number using recursion.", "    if n\
    \ == 0\n        1\n    else\n        n * special_factorial(n-1)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nspecial_factorial(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the factorial of a number using recursion.",
  "    if n == 0 \n        1\n    else\n        n * (special_factorial(n-1))\n   \
    \ end\nend", "    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time factorial(10000);\n</cell>\n\
    <code language=julia-1.5>\n@time special_factorial(10000);\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the factorial of a given number using\
    \ recursion.", "    if n == 0 \n        1\n    else\n        n! * (n-1)! * (n-2)!\
    \ * ... * 1!\n    end\nend\n</cell>\n<text>\nThe function special_factorial is\
    \ defined in the file factorial.jl. Let's see how it works:", "    if n == 0 \n\
    \        1 \n    else \n        special_factorial(n - 1) * n \nend\n</cell>\n\
    <code language=julia-1.5>\n@time brazilian_factorial(100);\n</cell>\n<code language=julia-1.5>\n\
    @time special_factorial(100);\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ calculates the factorial of a number using recursion.", "    if n == 0 \n  \
    \      1 \n    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<code\
    \ language=julia-1.5>\n# Let's test the function with some examples\n@test special_factorial(5)\
    \ == 120\n@test special_factorial(4) == 24\n@test special_factorial(3) == 6\n\
    @test special_factorial(2) == 2\n@test special_factorial(0) == 1\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that computes the factorial of a number given as\
    \ an input argument.", "    if n == 0 \n        1 \n    else \n        special_factorial(n\
    \ - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\nThe Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0", "    if n == 0 \n        1 \n    else \n        special_factorial(n\
    \ - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n@assert special_factorial(3)\
    \ == 6\n@assert special_factorial(4) == 24\n@assert special_factorial(5) == 120\n\
    @assert special_factorial(6) == 720\n@assert special_factorial(7) == 5040\n@assert\
    \ special_factorial(8) == 40320\n@assert special_factorial(9) == 362880\n@assert\
    \ special_factorial(10) == 3628800\n@assert special_factorial(11) == 39916800\n\
    @assert special_factorial(12) == 479001600\n@assert special_factorial(13) == 6227020800\n\
    @assert special_factorial(14) == 87178291200\n@assert special_factorial(15) ==\
    \ 1307674368000\n@assert special_factorial(16) == 20922789888000\n@assert special_factorial(17)\
    \ == 355687428096000\n@assert special_factorial(18) == 6402373705728000\n@assert\
    \ special_factorial(19) == 121645100408832000\n@assert special_factorial(20) ==\
    \ 2432902008176640000\n@assert special_factorial(21) == 51090942171709440000\n\
    @assert special_factorial(22) == 1124000727777607680000\n@assert special_factorial(23)\
    \ == 25852016738884976640000\n@assert special_factorial(24) == 620448401733239439360000\n\
    @assert special_factorial(25) == 15511210043330985984000000\n@assert special_factorial(26)\
    \ == 403291461126605635584000000\n@assert special_factorial(27) == 10888869450418352160768000000\n\
    @assert special_factorial(28) == 304888344611713860501504000000\n@assert special_factorial(29)\
    \ == 8841761993739701954543616000000\n@assert special_factorial(30) == 265252859812191058636308480000000\n\
    @assert special_factorial(31) == 8222838654177922817725562880000000\n@assert special_factorial(32)\
    \ == 263130836933693530167218012160000000\n@assert special_factorial(33) == 82228386541779228177255628800000000\n\
    @assert special_factorial(34) == 108888694504183521607680000000000\n@assert special_factorial(35",
  "    if n == 0 \n        1\n    else\n        n * (special_factorial(n-1))\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"The Brazilian factorial is defined as:\n\
    \    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0",
  "    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) * n\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    factorial(n::Int64)", "    if\
    \ n == 0 \n        1\n    else\n        n * special_factorial(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\nThe Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0", "    if n == 0\n        1\n    else\n        factorial(n) * factorial(n-1)\n\
    \    end\nend", "    if n == 0 \n        1 \n    else \n        special_factorial(n\
    \ - 1) * n\nend", "    if n == 0 \n        1 \n    else \n        special_factorial(n\
    \ - 1) * n \nend\n</cell>\n<code language=julia-1.5>\n# Test the function\n@assert\
    \ special_factorial(5) == 120\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ calculates the factorial of a number given as an input parameter and prints\
    \ the result to the screen.", "    if n == 0 \n        1 \n    else \n       \
    \ special_factorial(n - 1) * n\n    end\nend", "    if n == 0 \n        1 \n \
    \   else \n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n    where n > 0", "    if n == 0 \n        1 \n\
    \    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    factorial(n::Int64)", "    if n == 0 \n        1\n    else\n     \
    \   n! * (n-1)! * (n-2)! * (n-3)! * (n-4)! * ... * (n-(n-1))!\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    factorial(n::Int64)", "    if\
    \ n == 0\n        1\n    else\n        n * special_factorial(n-1)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\nThe Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0", "    if n == 0 \n        1 \n    else \n        special_factorial(n\
    \ - 1) * n\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\nThe Brazilian\
    \ factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)!\
    \ * ... * 1!\n    where n > 0", "    if n == 0 \n        1\n    else\n       \
    \ n! * (n-1)! * (n-2)! * ... * 1!\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert special_factorial(5) == 120\n@assert special_factorial(10) == 3628800\n\
    @assert special_factorial(20) == 5040\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that calculates the factorial of a given number using recursion.", "    if n\
    \ == 0 \n        1\n    else\n        n * special_factorial(n-1)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert special_factorial(1) == 1 \n@assert\
    \ special_factorial(2) == 2 \n@assert special_factorial(3) == 6 \n@assert special_factorial(4)\
    \ == 24 \n@assert special_factorial(5) == 120 \n@assert special_factorial(6) ==\
    \ 720 \n@assert special_factorial(7) == 5040 \n@assert special_factorial(8) ==\
    \ 40320 \n@assert special_factorial(9) == 362880 \n@assert special_factorial(10)\
    \ == 3628800\n</cell>\n<code language=julia-1.5>\n\"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0", "    if n == 0 \n        1 \n    else \n        special_factorial(n\
    \ - 1) * n\nend\n</cell>\n<code language=julia-1.5>\nspecial_factorial(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that calculates the factorial of a given\
    \ number. \nThe function should receive an integer as input and should return\
    \ the factorial of this integer.", "    if n == 0\n        1\n    else\n     \
    \   n! * (n-1)! * (n-2)! * (n-3)! * (n-4)! * (n-5)! * (n-6)! * (n-7)! * (n-8)!\
    \ * (n-9)! * (n-10)! * (n-11)! * (n-12)! * (n-13)! * (n-14)! * (n-15)! * (n-16)!\
    \ * (n-17)! * (n-18)! * (n-19)! * (n-20)! * (n-21)! * (n-22)! * (n-23)! * (n-24)!\
    \ * (n-25)! * (n-26)! * (n-27)! * (n-28)! * (n-29)! * (n-30)! * (n-31)! * (n-32)!\
    \ * (n-33)! * (n-34)! * (n-35)! * (n-36)! * (n-37)! * (n-38)! * (n-39)! * (n-40)!\
    \ * (n-41)! * (n-42)! * (n-43)! * (n-44)! * (n-45)! * (n-46)! * (n-47)! * (n-48)!\
    \ * (n-49)! * (n-50)! * (n-51)! * (n-52)! * (n-53)! * (n-54)! * (n-55)! * (n-56)!\
    \ * (n-57)! * (n-58)! * (n-59)! * (n-60)! * (n-61)! * (n-62)! * (n-63)! * (n-64)!\
    \ * (n-65)! * (n-66)! * (n-67)! * (n-68)! * (n-69)! * (n-70)! * (n-71)! * (n-72)!\
    \ * (n-73)! * (n-74)! * (n-75)! * (n-76)! * (n-77)! * (n-78)! * (n-79)! * (n-80)!\
    \ * (n-81)! * (n-82)! * (n-83)! * (n-84)! * (n-85)! * (n-86)! * (n-87)! * (n-88)!\
    \ * (n-89)! * (n-90)! * (n-91)! * (n-92)! * (n-93)! * (n-94)! * (n-95)! * (n-96)!\
    \ * (n-97)! * (n-98)! * (n-99)! * (n-100)! * (n-101)! * (n-102)! * (n-103)! *\
    \ (n-104)! * (n-105)! * (n-106)! * (n-107", "    if n == 0 \n        1 \n    else\
    \ \n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n    where n > 0", "    if n == 0 \n        1 \n\
    \    else \n        special_factorial(n - 1) * n \nend\n</cell>\n<code language=julia-1.5>\n\
    @assert special_factorial(5) == 120\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that calculates the factorial of a number using recursion.", "    if n == 0\n\
    \        1\n    else\n        n * (special_factorial(n - 1))\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0", "    if n == 0 \n     \
    \   1\n    else\n        factorial(n) * factorial(n-1)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert special_factorial(1) == 1 \n@assert special_factorial(2)\
    \ == 2 \n@assert special_factorial(3) == 6 \n@assert special_factorial(4) == 24\
    \ \n@assert special_factorial(5) == 120 \n@assert special_factorial(6) == 720\
    \ \n@assert special_factorial(7) == 5040 \n@assert special_factorial(8) == 40320\
    \ \n@assert special_factorial(9) == 362880 \n@assert special_factorial(10) ==\
    \ 3628800\n</cell>\n<text>\nExercise 3\nWrite a function that calculates the factorial\
    \ of a given number using recursion.", "    if n == 0\n        1\n    else\n \
    \       n * special_factorial(n-1)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    special_factorial(3)\n</cell>\n<code language=julia-1.3>\n\"\"\"\nThe Brazilian\
    \ factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)!\
    \ * ... * 1!\n    where n > 0", "    if n == 0\n        1\n    else\n        n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n    end\nend", "    if n == 0 \n        1 \n \
    \   else \n        special_factorial(n - 1) * n \nend\n</cell>\n<code language=julia-1.5>\n\
    # Test the function\n@assert special_factorial(5) == 120\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that calculates the factorial of a number given as an input.",
  "    if n == 0 \n        1\n    else\n        n * (special_factorial(n-1))\n   \
    \ end\nend\n</cell>\n<code language=julia-1.1>\n\"\"\"The factorial of a number\
    \ is the product of all positive integers up to and \nincluding the number itself.\
    \ For example, 5! = 5 x 4 x 3 x 2 x 1 = 120.\n    \n    For example:\n    \n \
    \   The function will receive an integer as input and should return the factorial\
    \ \n    of this integer.\n    \"\"\"", "    if n == 0\n        1\n    else\n \
    \       n! * (n-1)! * (n-2)! * ... * 1!\n    end\nend\n</cell>\n<text>\nThe function\
    \ special_factorial is defined in the cell above. Let's see how it works:", " \
    \   if n == 0 \n        1\n    else\n        n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert special_factorial(1)\
    \ == 1 \"The function special_factorial should return 1 when n is 1\"\n@assert\
    \ special_factorial(2) == 2 \"The function special_factorial should return 2 when\
    \ n is 2\"\n@assert special_factorial(3) == 6 \"The function special_factorial\
    \ should return 6 when n is 3\"\n@assert special_factorial(4) == 24 \"The function\
    \ special_factorial should return 24 when n is 4\"\n@assert special_factorial(5)\
    \ == 120 \"The function special_factorial should return 120 when n is 5\"\n@assert\
    \ special_factorial(6) == 720 \"The function special_factorial should return 720\
    \ when n is 6\"\n@assert special_factorial(7) == 50401 \"The function special_factorial\
    \ should return 50401 when n is 7\"\n@assert special_factorial(8) == 40320 \"\
    The function special_factorial should return 40320 when n is 8\"\n@assert special_factorial(9)\
    \ == 362880 \"The function special_factorial should return 362880 when n is 9\"\
    \n@assert special_factorial(10) == 3628800 \"The function special_factorial should\
    \ return 3628800 when n is 10\"\n@assert special_factorial(11) == 39916800 \"\
    The function special_factorial should return 39916800 when n is 11\"\n@assert\
    \ special_factorial(12) == 479001600 \"The function special_factorial should return\
    \ 479001600 when n is 12\"\n@assert special_factorial(13) == 6227020800 \"The\
    \ function special_factorial should return 6227020800 when n is 13\"\n@assert\
    \ special_factorial(14) == 87178291200 \"The function special_factorial should\
    \ return 87178291200 when n is 14\"\n@assert special_factorial(15) == 13076743680000\
    \ \"The function special_factorial should return 13076743680000 when n is 15\"\
    \n@assert special_factorial(16) == 20922789888000  \"The function special_factorial\
    \ should return 20922789888000 when n is 16\"\n@assert special_factorial(17) ==\
    \ 355687428096000  \"The function special_factorial should return 355687428096000\
    \ when n is 17\"\n@assert special_factorial(18) == 6402373705728", "    if n ==\
    \ 0\n        1\n    else\n        n * special_factorial(n-1)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nspecial_factorial(5)\n</cell>\n<text>\nExercise 2\n\
    Write a function that calculates the factorial of a number using recursion.",
  "    if n == 0 \n        1\n    else \n        special_factorial(n - 1) * n\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that receives a number as input\
    \ and returns the factorial of it modulo 10.", "    if n == 0 \n        1\n  \
    \  else\n        n! * (n-1)! * (n-2)! * ... * 1!\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time brazilian_factorial(100);\n</cell>\n<code language=julia-1.5>\n\
    @time special_factorial(100);\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ computes the factorial of a number using recursion.", "    if n == 0\n     \
    \   1\n    else\n        n * (special_factorial(n-1))\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that receives a number as input and returns\
    \ the factorial of this number.", "    if n == 0 \n        1 \n    else \n   \
    \     special_factorial(n - 1) * n \nend\n</cell>\n<text>\nThe function special_factorial\
    \ is called recursively until it reaches the base case where n == 0. The base\
    \ case is when n == 0. In this case, the function returns 1 since 1 is the factorial\
    \ of 0. Otherwise, the function returns the product of the previous result multiplied\
    \ by the factorial of n. For example, special_factorial(5) == 5*4*3*2*1 == 120.",
  "    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n    end\n\
    end", "    if n == 0 \n        1 \n    else \n        special_factorial(n-1) *\
    \ n\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"The Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0", "    if n == 0 \n        1 \n    else \n        special_factorial(n\
    \ - 1) * n \nend\n</cell>\n<code language=julia-1.5>\n\"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0", "    if n == 0 \n        1\n    else\n        n! * (n-1)! *\
    \ (n-2)! * ... * 1!\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n\
    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)!\
    \ * (n-2)! * ... * 1!\n    where n > 0", "    if n == 0\n        1\n    else\n\
    \        special_factorial(n - 1) * n\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    factorial(n::Int64)", "    if n == 0 \n        1\n    else \n    \
    \    special_factorial(n - 1) * n\nend\n</cell>\n<text>\nExercise\nWrite a function\
    \ that receives an integer as input and returns the factorial of this integer.",
  "    if n == 0 \n        1 \n    else \n        special_factorial(n-1) * n\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that calculates the factorial of\
    \ a given number. Your function should accept a number as input and should return\
    \ the factorial of this number.", "    if n == 0 \n        1\n    else\n     \
    \   n! * (n-1)! * (n-2)! * ... * 1!\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    factorial(n::Int64)", "    if n == 0\n        1\n    else\n      \
    \  n! * (n-1)! * (n-2)! * ... * 1!\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test the function \nspecial_factorial(4)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that computes the factorial of a number using recursion.", "    if\
    \ n == 0 \n        1\n    else \n        special_factorial(n-1) * n\nend\n</cell>\n\
    <text>\nExercise 7\nWrite a function that will return the factorial of a given\
    \ number using recursion.", "    if n == 0 \n        1 \n    else \n        special_factorial(n\
    \ - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n# Test the function \nspecial_factorial(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that calculates the factorial of\
    \ a given number using recursion.", "    if n == 0 \n        1 \n    else \n \
    \       special_factorial(n-1) * n\nend", "    if n == 0\n        1\n    else\n\
    \        n * (special_factorial(n-1))\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time factorial(10000);\n@time special_factorial(10000);\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that calculates the factorial of a number using recursion.",
  "    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) * n \n\
    end\n</cell>\n<code language=julia-1.5>\n# Test the function \nspecial_factorial(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that calculates the factorial of\
    \ a given number using recursion.", "    if n == 0 \n        1 \n    else \n \
    \       special_factorial(n - 1) * n\nend\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that receives a number as input and returns the factorial of the\
    \ number raised to some power.", "    if n == 0 \n        1 \n    else \n    \
    \    special_factorial(n - 1) * n\nend", "    if n == 0 \n        1 \n    else\
    \ \n        special_factorial(n - 1) * n \nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n    where n > 0", "    if n == 0 \n        1 \n\
    \    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert special_factorial(5) == 120\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that computes the factorial of a number given as an input argument. \nThe function\
    \ should raise a TypeError if the input is not a number.", "    if n == 0\n  \
    \      1\n    else\n        n * (special_factorial(n-1))\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert special_factorial(1) == 1 \"The function special_factorial\
    \ should return 1 when n = 1\"\n@assert special_factorial(2) == 2 \"The function\
    \ special_factorial should return 2 when n = 2\"\n@assert special_factorial(3)\
    \ == 6 \"The function special_factorial should return 6 when n = 3\"\n@assert\
    \ special_factorial(4) == 24 \"The function special_factorial should return 24\
    \ when n = 4\"\n@assert special_factorial(5) == 120 \"The function special_factorial\
    \ should return 120 when n = 5\"\n@assert special_factorial(6) == 720 \"The function\
    \ special_factorial should return 720 when n = 6\"\n@assert special_factorial(7)\
    \ == 50401 \"The function special_factorial should return 50401 when n = 7\"\n\
    @assert special_factorial(8) == 40320 \"The function special_factorial should\
    \ return 40320 when n = 8\"\n@assert special_factorial(9) == 362880 \"The function\
    \ special_factorial should return 362880 when n = 9\"\n@assert special_factorial(10)\
    \ == 3628800 \"The function special_factorial should return 3628800\"\n@assert\
    \ special_factorial(11) == 39916800 \"The function special_factorial should return\
    \ 39916800\"\n@assert special_factorial(12) == 479001600 \"The function special_factorial\
    \ should return 479001600\"\n@assert special_factorial(13) == 6227020800 \"The\
    \ function special_factorial should return 6227020800\"\n@assert special_factorial(14)\
    \ == 87178291200 \"The function special_factorial should return 87178291200\"\n\
    @assert special_factorial(15) == 13076743680000 \"The function special_factorial\
    \ should return 13076743680000\"\n@assert special_factorial(16) == 20922789888000\
    \  \"The function special_factorial should return 20922789888000\"\n@assert special_factorial(17)\
    \ == 355687428096000  \"The function special_factorial should return 355687428096000\"\
    \n@assert special_factorial(18) == 6402373705728000  \"The function special_factorial\
    \ should return 6402373705728000\"\n@assert special_factorial(19) == 121645100408832000\
    \  \"The function special_factorial should return 121645100408832000\"\n@assert ",
  "    if n == 0\n        1\n    else\n        n! * (n-1)! * (n-2)! * (n-3)! * (n-4)!\
    \ * (n-5)! * (n-6)! * (n-7)! * (n-8)! * (n-9)! * (n-10)!\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\nThe Brazilian factorial is defined as:\n  \
    \  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0",
  "    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) * n \n\
    end\n</cell>\n<code language=julia-1.5>\n# Test the function \nspecial_factorial(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ given number using recursion.", "    if n == 0 \n        1 \n    else \n   \
    \     special_factorial(n-1) * n\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ special_factorial(1) == 1 \n@assert special_factorial(2) == 2 \n@assert special_factorial(3)\
    \ == 6 \n@assert special_factorial(4) == 24 \n@assert special_factorial(5) ==\
    \ 120 \n@assert special_factorial(6) == 720 \n@assert special_factorial(7) ==\
    \ 5040 \n@assert special_factorial(8) == 40320 \n@assert special_factorial(9)\
    \ == 362880 \n@assert special_factorial(10) == 3628800\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the factorial of a number given as a parameter.\
    \ \nThe function should raise an error if the number given is negative.", "  \
    \  if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nspecial_factorial(5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the factorial of a given number using\
    \ recursion.", "    if n == 0 \n        1 \n    else \n        special_factorial(n-1)\
    \ * n\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\nThe Brazilian\
    \ factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)!\
    \ * ... * 1!\n    where n > 0", "    if n == 0\n        1\n    else\n        n\
    \ * (special_factorial(n-1))\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    # Test the function special_factorial\n@assert special_factorial(1) == 1 \n@assert\
    \ special_factorial(2) == 2 \n@assert special_factorial(3) == 6 \n@assert special_factorial(4)\
    \ == 24 \n@assert special_factorial(5) == 120 \n@assert special_factorial(6) ==\
    \ 720 \n@assert special_factorial(7) == 5040 \n@assert special_factorial(8) ==\
    \ 40320 \n@assert special_factorial(9) == 362880 \n@assert special_factorial(10)\
    \ == 3628800\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the\
    \ factorial of a number given as an input parameter and returns the result rounded\
    \ to the nearest integer.", "    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    factorial(n::Int64)",
  "    if n == 0 \n        1\n    else \n        special_factorial(n - 1) * n\n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>\n# Test the function \nspecial_factorial(4)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that calculates the factorial of\
    \ a number using recursion.", "    if n == 0\n        1\n    else\n        n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n    end\nend", "    if n == 0 \n        1 \n \
    \   else \n        special_factorial(n - 1) * n \nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n    where n > 0", "    if n == 0\n        1\n\
    \    else\n        special_factorial(n-1) * n\nend", "    if n == 0 \n       \
    \ 1 \n    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n    where n > 0", "    if n == 0 \n        1 \n\
    \    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert special_factorial(1) == 1 \n@assert special_factorial(2) == 2 \n@assert\
    \ special_factorial(3) == 6 \n@assert special_factorial(4) == 24 \n@assert special_factorial(5)\
    \ == 120 \n@assert special_factorial(6) == 720 \n@assert special_factorial(7)\
    \ == 5040 \n@assert special_factorial(8) == 40320 \n@assert special_factorial(9)\
    \ == 362880 \n@assert special_factorial(10) == 3628800\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that computes the factorial of a number given as an input\
    \ parameter. \nThe function should raise a TypeError if the input is not a number.",
  "    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) * n\n \
    \   end\nend", "    if n == 0 \n        1 \n    else \n        special_factorial(n\
    \ - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n@assert special_factorial(5)\
    \ == 120\n</cell>\n<text>\nExercise 3\nWrite a function that calculates the factorial\
    \ of a given number using recursion.", "    if n == 0 \n        1 \n    else \n\
    \        special_factorial(n - 1) * n\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    # Tests\n@test special_factorial(1) == 1 \n@test special_factorial(2) == 2 \n\
    @test special_factorial(3) == 6 \n@test special_factorial(4) == 24 \n@test special_factorial(5)\
    \ == 120 \n@test special_factorial(6) == 720 \n@test special_factorial(7) == 5040\
    \ \n@test special_factorial(8) == 40320 \n@test special_factorial(9) == 362880\
    \ \n@test special_factorial(10) == 3628800\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that calculates the factorial of a number given as a parameter. \n\
    The function should return the factorial of the number passed as a parameter.\
    \ \nThe function should raise an error if the number passed as parameter is not\
    \ positive.", "    if n == 0 \n        1 \n    else \n        special_factorial(n\
    \ - 1) * n \n    end\nend", "    if n == 0 \n        1\n    else\n        n! *\
    \ (n-1)! * (n-2)! * ... * 1!\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    special_factorial(10)\n</cell>\n<code language=julia-1.5>\n\"\"\"The Brazilian\
    \ factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)!\
    \ * ... * 1!\n    where n > 0", "    if n == 0\n        1\n    else\n        n\
    \ * special_factorial(n-1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert special_factorial(1) == 1 \"The factorial of 1 should be 1\"\n@assert\
    \ special_factorial(2) == 2 \"The factorial of 2 should be 2\"\n@assert special_factorial(3)\
    \ == 6 \"The factorial of 3 should be 6\"\n@assert special_factorial(4) == 24\
    \ \"The factorial of 4 should be 24\"\n@assert special_factorial(5) == 120 \"\
    The factorial of 5 should be 120\"\n@assert special_factorial(6) == 720 \"The\
    \ factorial of 6 should be 720\"\n@assert special_factorial(7) == 5040  \"The\
    \ factorial of 7 should be 5040\"\n@assert special_factorial(8) == 40320 \"The\
    \ factorial of 8 should be 40320\"\n@assert special_factorial(9) == 362880 \"\
    The factorial of 9 should be 362880\"\n@assert special_factorial(10) == 3628800\
    \ \"The factorial of 10 should be 3628800\"\n@assert special_factorial(11) ==\
    \ 39916800 \"The factorial of 11 should be 39916800\"\n@assert special_factorial(12)\
    \ == 479001600 \"The factorial of 12 should be 479001600\"\n@assert special_factorial(13)\
    \ == 6227020800 \"The factorial of 13 should be 6227020800\"\n@assert special_factorial(14)\
    \ == 87178291200 \"The factorial of 14 should be 87178291200\"\n@assert special_factorial(15)\
    \ == 13076743680000 \"The factorial of 15 should be 13076743680000\"\n@assert\
    \ special_factorial(16) == 20922789888000  \"The factorial of 16 should be 20922789888000\"\
    \n@assert special_factorial(17) == 355687428096000  \"The factorial of 17 should\
    \ be 355687428096000\"\n@assert special_factorial(18) == 6402373705728000  \"\
    The factorial of 18 should be 6402373705728000\"\n@assert special_factorial(19)\
    \ == 121645100408832000  \"The factorial of 19 should be 121645100408832000\"\n\
    @assert special_factorial(20) == 2432902008176640000  \"The factorial of 20 should\
    \ be 2432902008176640000\"\n@assert special_factorial(21) == 51090942171709440000\
    \  \"The factorial of 21 should be ", "    if n == 0 \n        1\n    else \n\
    \        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert special_factorial(1) == 1 \n@assert special_factorial(2) == 2 \n@assert\
    \ special_factorial(3) == 6 \n@assert special_factorial(4) == 24 \n@assert special_factorial(5)\
    \ == 120 \n@assert special_factorial(6) == 720 \n@assert special_factorial(7)\
    \ == 5040 \n@assert special_factorial(8) == 40320 \n@assert special_factorial(9)\
    \ == 362880 \n@assert special_factorial(10) == 3628800\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that calculates the factorial of a given number using recursion."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
