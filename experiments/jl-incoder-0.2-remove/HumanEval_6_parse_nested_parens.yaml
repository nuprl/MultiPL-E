name: HumanEval_6_parse_nested_parens
language: jl
prompt: "\"\"\" Input to this function is a string represented multiple groups for\
  \ nested parentheses separated by spaces.\n    For each of the group, output the\
  \ deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels\
  \ of nesting while ((())) has three.\n\n        \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
  (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
  \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
  end\n"
completions: ["    paren_levels = Vector{Int64}()\n    paren_levels_stack = Vector{Int64}()\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_", "    paren_vec\
    \ = paren_string.split(\" \")\n    paren_vec = paren_vec[1 .. end]\n    paren_vec\
    \ = paren_vec[1 .. end]\n    paren_vec = paren_vec[1 .. end]\n    paren_vec =\
    \ paren_vec[1 .. end]\n    paren_vec = paren_vec[1 .. end]\n    paren_vec = paren_vec[1\
    \ .. end]\n    paren_vec = paren_vec[1 .. end]\n    paren_vec = paren_vec[1 ..\
    \ end]\n    paren_vec = paren_vec[1 .. end]\n    paren_vec = paren_vec[1 .. end]\n\
    \    paren_vec = paren_vec[1 .. end]\n    paren_vec = paren_vec[1 .. end]\n  \
    \  paren_vec = paren_vec[1 .. end]\n    paren_vec = paren_vec[1 .. end]\n    paren_vec\
    \ = paren_vec[1 .. end]\n    paren_vec = paren_vec[1 .. end]\n    paren_vec =\
    \ paren_vec[1 .. end]\n    paren_vec = paren_vec[1 .. end]\n    paren_vec = paren_vec[1\
    \ .. end]\n    paren_vec = paren_vec[1 .. end]\n    paren_vec = paren_vec[1 ..\
    \ end]\n    paren_vec = paren_vec[1 .. end]\n    paren_vec = paren_vec[1 .. end]\n\
    \    paren_vec = paren_vec[1 .. end]\n    paren_vec = paren_vec[1 .. end]\n  \
    \  paren_vec = paren_vec[1 .. end]\n    paren_vec = paren_vec[1 .. end]\n    paren_vec\
    \ = paren_vec[1 .. end]\n    paren_vec = paren_vec[1 .. end]\n    paren_vec =\
    \ paren_vec[1 .. end]\n    paren_vec = paren_vec[1 .. end]\n    paren_vec = paren_vec[1\
    \ .. end]\n    paren_vec = paren_vec[1 .. end]\n    paren_vec = paren_vec[1 ..\
    \ end]\n    paren_vec = paren_vec[1 .. end]\n    paren_vec = paren_vec[1 .. end]\n\
    \    paren_vec = paren_vec[1 .. end]\n    paren_vec = paren_vec[1 .. end]\n  \
    \  paren_vec = paren_vec[1 .. end]\n    paren_vec = paren_vec[1 .. end]\n    paren_vec\
    \ = paren_vec[1 .. end]\n    paren_vec = paren_vec[1 .. end]", "    paren_string\
    \ = paren_string.trim()\n    paren_chars = paren_string.chars()\n    paren_chars\
    \ = paren_chars.filter(x -> x != ')')\n    paren_chars = paren_chars.filter(x\
    \ -> x != '(')\n    paren_chars = paren_chars.filter(x -> x != ' ')\n    paren_chars\
    \ = paren_chars.filter(x -> x != '\\n')\n    paren_chars = paren_chars.filter(x\
    \ -> x != '\\t')\n    paren_chars = paren_chars.filter(x -> x != '\\r')\n    paren_chars\
    \ = paren_chars.filter(x -> x != '\\v')\n    paren_chars = paren_chars.filter(x\
    \ -> x != '\\0')\n    paren_chars = paren_chars.filter(x -> x != '\\a')\n    paren_chars\
    \ = paren_chars.filter(x -> x != '\\e')\n    paren_chars = paren_chars.filter(x\
    \ -> x != '\\v')\n    paren_chars = paren_chars.filter(x -> x != '\\0')\n    paren_chars\
    \ = paren_chars.filter(x -> x != '\\a')\n    paren_chars = paren_chars.filter(x\
    \ -> x != '\\e')\n    paren_chars = paren_chars.filter(x -> x != '\\v')\n    paren_chars\
    \ = paren_chars.filter(x -> x != '\\0')\n    paren_chars = paren_chars.filter(x\
    \ -> x != '\\a')\n    paren_chars = paren_chars.filter(x -> x != '\\e')\n    paren_chars\
    \ = paren_chars.filter(x -> x != '\\v')\n    paren_chars = paren_chars.filter(x\
    \ -> x != '\\0')\n    paren_chars = paren_chars.filter(x -> x != '\\a')\n    paren_chars\
    \ = paren_chars.filter(x -> x != '\\e')\n    paren_chars = paren_chars.filter(x\
    \ -> x != '\\v')\n    paren_chars = paren_chars.filter(x -> x != '\\0')\n    paren_chars\
    \ = paren_chars.filter(x -> x != '\\a')\n    paren_chars = paren_chars.filter(x\
    \ -> x != '\\e')\n    paren_chars = paren_chars.filter(x -> x != '\\v')\n    paren_chars\
    \ = paren_chars.filter(x -> x != '\\0')\n    paren_chars = paren_", "    paren_groups\
    \ = split(paren_string, \" \")\n    paren_groups = filter(x -> x != \"\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"()\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"[]\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()\", paren_groups)\n    paren_groups = filter(x -> x != \"\
    {}[]()[]()()\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()\", paren_groups)\n \
    \   paren_groups = filter(x -> x != \"{}[]()[]()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()", "    paren_vec\
    \ = paren_string.split(\" \")\n    paren_vec = paren_vec[paren_vec .!= \"\"]\n\
    \    paren_vec = paren_vec[paren_vec .!= \" \"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \")\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \")\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_", "    paren_groups = split(paren_string, \" \")\n    paren_groups\
    \ = filter(x -> x != \"\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"()\", paren_groups)\n    paren_groups = filter(x -> x != \"[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}[]\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()()()()\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}[]()[]()()()()()\", paren_groups)\n    paren_groups = filter(x -> x\
    \ != \"{}[]()[]()()()()()()\", paren_groups)\n    paren_groups = filter(x -> x\
    \ != \"{}[]()[]()()()()()()()\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}[]()[]()()()()()()()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()()()()()()()()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()()()()()()()()()()()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()()()()()()()()()()()()\", paren_groups)\n   \
    \ paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()", "    paren_string\
    \ = paren_string.trim()\n    paren_levels = Vector{Int64}()\n    paren_level =\
    \ 0\n    paren_levels = paren_levels\n    for paren in paren_string\n        if\
    \ paren == '('\n            paren_level += 1\n            paren_levels = paren_levels\n\
    \        elseif paren == ')'\n            paren_level -= 1\n            paren_levels\
    \ = paren_levels[paren_levels:end]\n        else\n            paren_levels = paren_levels[paren_levels:end]\n\
    \        end\n    end\n    return paren_levels\nend", "    paren_stack = Vector{Int64}()\n\
    \    paren_stack = paren_string.split(\" \") |> collect{|x| x.to_i}\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[", "    paren_string = paren_string.trim()\n    paren_string =\
    \ paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"[]\")\n\
    \    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = paren_string.strip(\"\
    ..\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren", "    paren_stack\
    \ = Vector{Int64}()\n    paren_stack = paren_string.split(\" \") |> collect{|x|\
    \ x.to_i}\n    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[", "    paren_array = paren_string.split(\" \"\
    )\n    paren_array_size = length(paren_array)\n    paren_array_max = 0\n    paren_array_level\
    \ = 0\n    for paren_level in paren_array\n        if paren_level == \"(\"\n \
    \           paren_array_level += 1\n        elseif paren_level == \")\"\n    \
    \        paren_array_level -= 1\n            if paren_array_level == 0\n     \
    \           if paren_array_max < paren_array_level\n                    paren_array_max\
    \ = paren_array_level\n                end\n            end\n        end\n   \
    \ end\n    paren_array_max\nend", "    paren_groups = split(paren_string, \" \"\
    )\n    paren_groups = filter(x -> x != \"\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")\", paren_groups)\n    paren_groups = filter(x -> x != \"\
    )(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n",
  "    paren_stack = Vector{Int64}()\n    paren_stack = paren_string.split(' ').map(x\
    \ -> parse(Int64, x))\n    paren_stack = paren_stack[1..end]\n    paren_stack\
    \ = paren_stack.map(x -> max(paren_stack[x], paren_stack[x-1]))\n    return paren_stack\n\
    end", "    paren_array = paren_string.split(\" \")\n    paren_array_size = length(paren_array)\n\
    \    paren_array_max = 0\n    paren_array_index = 0\n    paren_array_max_index\
    \ = 0\n    paren_array_max_value = 0\n    paren_array_max_value_index = 0\n  \
    \  for paren_array_index in 1:paren_array_size\n        paren_array_value = paren_array[paren_array_index]\n\
    \        if paren_array_value == \"(\"\n            paren_array_max_value = paren_array_max_value_index\n\
    \            paren_array_max_value_index = paren_array_index\n        elseif paren_array_value\
    \ == \")\"\n            if paren_array_max_value == paren_array_max_value_index\n\
    \                paren_array_max = paren_array_max_value\n            else\n \
    \               paren_array_max = paren_array_max_value\n            end\n   \
    \     elseif paren_array_value == \"(\"\n            paren_array_max_value = paren_array_max_value_index\n\
    \            paren_array_max_value_index = paren_array_index\n        elseif paren_array_value\
    \ == \")\"\n            if paren_array_max_value == paren_array_max_value_index\n\
    \                paren_array_max = paren_array_max_value\n            else\n \
    \               paren_array_max = paren_array_max_value\n            end\n   \
    \     else\n            paren_array_max = paren_array_max_value\n        end\n\
    \    end\n    paren_array_max = paren_array_max + 1\n    paren_array_max_index\
    \ = paren_array_max_index + 1\n    paren_array_max_value = paren_array[paren_array_max_index]\n\
    \    paren_array_max_value_index = paren_array_max_value_index + 1\n    paren_array_max\
    \ = paren_array_max + 1\n    paren_array_max_index = paren_array_max_index + 1\n\
    \    paren_array_max_value = paren_array[paren_array_max_index]\n    paren_array_max_value_index\
    \ = paren_array_max_value_index + 1\n    paren_array_max = paren_array_max + 1\n\
    \    paren_array_max_index = paren_array_max_index + 1\n    paren_array_max_value\
    \ = paren_array[paren_array_max_index]\n    paren_array_max_value_index = paren_array_max_value_index\
    \ + 1\n    paren_array_max = paren_array_max + 1\n    paren_array_max_index =\
    \ paren_array_max_index + 1\n    paren_array_max_value = paren_array[paren_array_max_index]\n\
    \    paren_array_max_value_index = paren_array_max_value_index + 1\n    paren_array_max\
    \ = paren_array_max + 1\n    paren_array_max_index = paren_array_max_index + 1\n\
    \    ", "    paren_string = paren_string.trim()\n    paren_levels = Vector{Int64}()\n\
    \    paren_level = 0\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 2\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 3\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 4\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 5\n    paren_levels[paren_level] = paren_level\n    paren_level = 6\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 7\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 8\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 9\n    paren_levels[paren_level] = paren_level\n    paren_level = 10\n   \
    \ paren_levels[paren_level] = paren_level\n    paren_level = 11\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 12\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 13\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 14\n    paren_levels[paren_level] = paren_level\n    paren_level = 15\n  \
    \  paren_levels[paren_level] = paren_level\n    paren_level = 16\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 17\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 18\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 19\n    paren_levels[paren_level] = paren_level\n    paren_level = 20\n  \
    \  paren_levels[paren_level] = paren_level\n    paren_level = 21\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 22\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 23\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 24\n    paren_levels[paren_level] = paren_level\n    paren_level = 25\n  \
    \  paren_levels[paren_level] = ", "    paren_string = paren_string.trim()\n  \
    \  paren_groups = paren_string.split(\" \")\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n",
  "    paren_groups = split(paren_string, \" \")\n    paren_groups = filter(x -> x\
    \ != \"\", paren_groups)\n    paren_groups = filter(x -> x != \")\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")()\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")()()\", paren_groups)\n    paren_groups = filter(x -> x != \")()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")()()()()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \")()()()()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \")()()()()()()\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")()()()()()()()\", paren_groups)\n    paren_groups = filter(x -> x != \")()()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \")()()()()()()()()()\",\
    \ paren_groups)\n    paren_groups = filter(x -> x != \")()()()()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \")()()()()()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \")()()()()()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \")()()()()()()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \")()()()()()()()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \")()()()()()()()()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \")()()()()()()()()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \")()()()()()()()()()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \")()()()()()", "    paren_groups\
    \ = paren_string.split(\" \")\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:", "    paren_vec = paren_string.split(\" \")\n    paren_vec\
    \ = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec .!= \"\
    \ \"]\n    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_",
  "    paren_array = paren_string.split(\" \")\n    paren_array_size = length(paren_array)\n\
    \    paren_array_max = 0\n    for paren_array_index in range(paren_array_size)\n\
    \        if paren_array[paren_array_index] != \"()\"\n            paren_array_max\
    \ = paren_array_index\n            break\n    end\n    paren_array_max = paren_array_max\
    \ + 1\n    paren_array_size = paren_array_size - paren_array_max\n    paren_array_size\
    \ = paren_array_size - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size\
    \ = paren_array_size - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size\
    \ = paren_array_size - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size\
    \ = paren_array_size - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size\
    \ = paren_array_size - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size\
    \ = paren_array_size - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size\
    \ = paren_array_size - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size\
    \ = paren_array_size - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size\
    \ = paren_array_size - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size\
    \ = paren_array_size - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size\
    \ = paren_array_size - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size\
    \ = paren_array_size - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size\
    \ = paren_array_size - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size\
    \ = paren_array_size - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size\
    \ = paren_array_size - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size\
    \ = paren_array_size - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size\
    \ = paren_array_size - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size\
    \ = paren_array_size - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size\
    \ = paren_array_size - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_",
  "    paren_levels = Vector{Int64}()\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n", "    paren_groups = split(paren_string, \" \")\n    paren_groups\
    \ = filter(x -> x != \"\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"()\", paren_groups)\n    paren_groups = filter(x -> x != \"[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}[]\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()[]()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()[]()[]\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}[]()[]()[]()[]()\", paren_groups)\n    paren_groups = filter(x -> x\
    \ != \"{}[]()[]()[]()[]()[]\", paren_groups)\n    paren_groups = filter(x -> x\
    \ != \"{}[]()[]()[]()[]()[]()\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}[]()[]()[]()[]()[]()[]\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()[]()[]()[]()[]()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()[]()[]()[]()[]()[]\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]\", paren_groups)\n   \
    \ paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]", "  \
    \  paren_vec = paren_string.split(\" \")\n    paren_vec = paren_vec[1 : (length(paren_vec)\
    \ - 1)]\n    paren_vec = paren_vec[1 : length(paren_vec)]\n    paren_vec = paren_vec[1\
    \ : length(paren_vec)]\n    paren_vec = paren_vec[1 : length(paren_vec)]\n   \
    \ paren_vec = paren_vec[1 : length(paren_vec)]\n    paren_vec = paren_vec[1 :\
    \ length(paren_vec)]\n    paren_vec = paren_vec[1 : length(paren_vec)]\n    paren_vec\
    \ = paren_vec[1 : length(paren_vec)]\n    paren_vec = paren_vec[1 : length(paren_vec)]\n\
    \    paren_vec = paren_vec[1 : length(paren_vec)]\n    paren_vec = paren_vec[1\
    \ : length(paren_vec)]\n    paren_vec = paren_vec[1 : length(paren_vec)]\n   \
    \ paren_vec = paren_vec[1 : length(paren_vec)]\n    paren_vec = paren_vec[1 :\
    \ length(paren_vec)]\n    paren_vec = paren_vec[1 : length(paren_vec)]\n    paren_vec\
    \ = paren_vec[1 : length(paren_vec)]\n    paren_vec = paren_vec[1 : length(paren_vec)]\n\
    \    paren_vec = paren_vec[1 : length(paren_vec)]\n    paren_vec = paren_vec[1\
    \ : length(paren_vec)]\n    paren_vec = paren_vec[1 : length(paren_vec)]\n   \
    \ paren_vec = paren_vec[1 : length(paren_vec)]\n    paren_vec = paren_vec[1 :\
    \ length(paren_vec)]\n    paren_vec = paren_vec[1 : length(paren_vec)]\n    paren_vec\
    \ = paren_vec[1 : length(paren_vec)]\n    paren_vec = paren_vec[1 : length(paren_vec)]\n\
    \    paren_vec = paren_vec[1 : length(paren_vec)]\n    paren_vec = paren_vec[1\
    \ : length(paren_vec)]\n    paren_vec = paren_vec[1 : length(paren_vec)]\n   \
    \ paren_vec = paren_vec[1 : length(paren_vec)]\n    paren_vec = paren_vec[1 :\
    \ length(paren_vec)]\n    paren_vec = paren_vec[1 : length(paren_vec)]\n    paren_vec\
    \ = paren_vec[1 : length(paren_vec)]\n    paren_vec = paren_vec[1 : length(paren_vec)]\n\
    \    paren_vec = paren_", "    paren_stack = Vector{Int64}()\n    paren_stack\
    \ = paren_string.split(\" \") |> collect{|x| x.to_i}\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[", "    paren_string\
    \ = paren_string.trim()\n    paren_string = paren_string.strip(\"()\")\n    paren_string\
    \ = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"{}\")\n\
    \    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]()\")\n    paren_string = paren_string.strip(\"{}[]()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()\")\n   \
    \ paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()", "    paren_groups = split(paren_string,\
    \ \" \")\n    paren_groups = filter(x -> x != \"\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"()\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}[]()[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()[]()[]\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()[]()[]()\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}[]()[]()[]()[]()[]\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}[]()[]()[]()[]()[]()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()[]()[]()[]()[]\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()[]()[]()[]()[]()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()[]()[]()[]()[]()[]\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]\", paren_groups)\n   \
    \ paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]", "  \
    \  paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]()\")\n    paren_string = paren_string.strip(\"{}[]()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()\")\n   \
    \ paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n    paren_string =\
    \ paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n\
    \    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n  \
    \  paren", "    paren_stack = Vector{Int64}()\n    paren_stack = paren_stack +\
    \ paren_string.split(\" \")\n    paren_stack = paren_stack[paren_stack.length-1]\n\
    \    paren_stack = paren_stack.replace(\"(\",\"\").replace(\")\",\"\")\n    paren_stack\
    \ = paren_stack.replace(\")\",\"\")\n    paren_stack = paren_stack.replace(\"\
    (\",\"\")\n    paren_stack = paren_stack.replace(\")\",\"\")\n    paren_stack\
    \ = paren_stack.replace(\",\",\"\")\n    paren_stack = paren_stack.replace(\"\
    ;\",\"\")\n    paren_stack = paren_stack.replace(\":\",\"\")\n    paren_stack\
    \ = paren_stack.replace(\"{\",\"\")\n    paren_stack = paren_stack.replace(\"\
    }\",\"\")\n    paren_stack = paren_stack.replace(\"[\",\"\")\n    paren_stack\
    \ = paren_stack.replace(\"]\",\"\")\n    paren_stack = paren_stack.replace(\"\
    +\",\"\")\n    paren_stack = paren_stack.replace(\"/\",\"\")\n    paren_stack\
    \ = paren_stack.replace(\"*\",\"\")\n    paren_stack = paren_stack.replace(\"\
    -\",\"\")\n    paren_stack = paren_stack.replace(\"^\",\"\")\n    paren_stack\
    \ = paren_stack.replace(\"~\",\"\")\n    paren_stack = paren_stack.replace(\"\
    %\",\"\")\n    paren_stack = paren_stack.replace(\"&\",\"\")\n    paren_stack\
    \ = paren_stack.replace(\"<\",\"\")\n    paren_stack = paren_stack.replace(\"\
    >\",\"\")\n    paren_stack = paren_stack.replace(\"|\",\"\")\n    paren_stack\
    \ = paren_stack.replace(\"?\",\"\")\n    paren_stack = paren_stack.replace(\"\
    !\",\"\")\n    paren_stack = paren_stack.replace(\"|\",\"\")\n    paren_stack\
    \ = paren_stack.replace(\"{\",\"\")\n    paren_stack = paren_stack.replace(\"\
    }\",\"\")\n    paren_stack = paren_stack.replace(\"[\",\"\")\n    paren_stack\
    \ = paren_stack.replace(\"]\",\"\")\n    paren_stack = paren_stack.replace(\"\
    +\",\"\")\n    paren_stack = paren_stack.replace(\"/\",\"\")\n    paren_stack\
    \ = paren_stack.replace(\"*\",\"\")\n    paren_stack = paren_stack.replace(\"\
    -\",\"\")\n    paren_stack = paren_stack.replace(\"^\",\"\")\n    paren_stack\
    \ = paren_stack.replace(\"~\",\"\")\n    paren_stack = paren_stack.replace(\"\
    %\",\"\")\n    paren_stack = paren_stack.replace(\"&\",", "    paren_string =\
    \ paren_string.trim()\n    paren_array = paren_string.split(\" \")\n    paren_array\
    \ = [Int64(x) for x in paren_array]\n    paren_array = [x for x in paren_array\
    \ if x != 0]\n    paren_array = [x for x in paren_array if x > 0]\n    paren_array\
    \ = [x for x in paren_array if x <= paren_array.length]\n    paren_array = [x\
    \ for x in paren_array if x > 0]\n    paren_array = [x for x in paren_array if\
    \ x <= paren_array.length]\n    paren_array = [x for x in paren_array if x > 0]\n\
    \    paren_array = [x for x in paren_array if x <= paren_array.length]\n    paren_array\
    \ = [x for x in paren_array if x > 0]\n    paren_array = [x for x in paren_array\
    \ if x <= paren_array.length]\n    paren_array = [x for x in paren_array if x\
    \ > 0]\n    paren_array = [x for x in paren_array if x <= paren_array.length]\n\
    \    paren_array = [x for x in paren_array if x > 0]\n    paren_array = [x for\
    \ x in paren_array if x <= paren_array.length]\n    paren_array = [x for x in\
    \ paren_array if x > 0]\n    paren_array = [x for x in paren_array if x <= paren_array.length]\n\
    \    paren_array = [x for x in paren_array if x > 0]\n    paren_array = [x for\
    \ x in paren_array if x <= paren_array.length]\n    paren_array = [x for x in\
    \ paren_array if x > 0]\n    paren_array = [x for x in paren_array if x <= paren_array.length]\n\
    \    paren_array = [x for x in paren_array if x > 0]\n    paren_array = [x for\
    \ x in paren_array if x <= paren_array.length]\n    paren_array = [x for x in\
    \ paren_array if x > 0]\n    paren_array = [x for x in paren_array if x <= paren_array.length]\n\
    \    paren_array = [x for x in paren_array if x > 0]\n    paren_array = [x for\
    \ x in paren_array if x <= paren_array.length]\n    paren_array = [x for x in\
    \ paren_array if x > 0]\n    paren_array = [x for x in paren_array if x <= paren_array.length]\n\
    \    paren_array = [x for x in paren_array if x > 0]\n    paren_array = [x for\
    \ x in paren_array if x <= paren_array.length]\n    paren_array = [x for x in\
    \ paren_array if x > 0]\n    paren_array = [x for x in paren_array if x <= paren_array.length]\n\
    \    paren_array = [x for x in paren_array if x > 0]\n    paren_", "    paren_levels\
    \ = Vector{Int64}()\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n", "    paren_level::Int64 = 0\n    paren_levels = Vector{Int64}()\n  \
    \  paren_levels[paren_level] = paren_level\n    paren_levels[paren_level + 1]\
    \ = 1\n    paren_levels[paren_level + 2] = 1\n    paren_levels[paren_level + 3]\
    \ = 1\n    paren_levels[paren_level + 4] = 1\n    paren_levels[paren_level + 5]\
    \ = 1\n    paren_levels[paren_level + 6] = 1\n    paren_levels[paren_level + 7]\
    \ = 1\n    paren_levels[paren_level + 8] = 1\n    paren_levels[paren_level + 9]\
    \ = 1\n    paren_levels[paren_level + 10] = 1\n    paren_levels[paren_level +\
    \ 11] = 1\n    paren_levels[paren_level + 12] = 1\n    paren_levels[paren_level\
    \ + 13] = 1\n    paren_levels[paren_level + 14] = 1\n    paren_levels[paren_level\
    \ + 15] = 1\n    paren_levels[paren_level + 16] = 1\n    paren_levels[paren_level\
    \ + 17] = 1\n    paren_levels[paren_level + 18] = 1\n    paren_levels[paren_level\
    \ + 19] = 1\n    paren_levels[paren_level + 20] = 1\n    paren_levels[paren_level\
    \ + 21] = 1\n    paren_levels[paren_level + 22] = 1\n    paren_levels[paren_level\
    \ + 23] = 1\n    paren_levels[paren_level + 24] = 1\n    paren_levels[paren_level\
    \ + 25] = 1\n    paren_levels[paren_level + 26] = 1\n    paren_levels[paren_level\
    \ + 27] = 1\n    paren_levels[paren_level + 28] = 1\n    paren_levels[paren_level\
    \ + 29] = 1\n    paren_levels[paren_level + 30] = 1\n    paren_levels[paren_level\
    \ + 31] = 1\n    paren_levels[paren_level + 32] = 1\n    paren_levels[paren_level\
    \ + 33] = 1\n    paren_levels[paren_level + 34] = 1\n    paren_levels[paren_level\
    \ + 35] = 1\n    paren_levels[paren_level + 36] = 1\n    paren_levels[paren_level\
    \ + 37] = 1\n    paren_levels[paren_level + 38] = 1\n    paren_levels[paren_level\
    \ + 39] = 1\n    paren_levels[paren_level", "    paren_groups = paren_string.split(\"\
    \ \")\n    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:",
  "    paren_array = paren_string.split(\" \")\n    paren_array_size = length(paren_array)\n\
    \    paren_array_max = 0\n    paren_array_level = 0\n    for paren_array_index\
    \ in 1:paren_array_size\n        if paren_array[paren_array_index] == '('\n  \
    \          paren_array_level = paren_array_level + 1\n        elseif paren_array[paren_array_index]\
    \ == ')'\n            paren_array_level = paren_array_level - 1\n            if\
    \ paren_array_level == 0\n                paren_array_max = paren_array_max +\
    \ 1\n            end\n        end\n    end\n    paren_array_max\nend", "    paren_vec\
    \ = paren_string.split(\" \")\n    paren_vec = paren_vec[1..end]\n    paren_vec\
    \ = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec .!= \"\
    \ \"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \")\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \")\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]", "    paren_string = paren_string.trim()\n    paren_array = paren_string.split(\"\
    \ \")\n    paren_array = [Int64(elem) for elem in paren_array]\n    paren_array\
    \ = [elem for elem in paren_array if elem != \"\"]\n    paren_array = [elem for\
    \ elem in paren_array if elem != \")\"]\n    paren_array = [elem for elem in paren_array\
    \ if elem != \"]\"]\n    paren_array = [elem for elem in paren_array if elem !=\
    \ \"(\"]\n    paren_array = [elem for elem in paren_array if elem != \"]\"]\n\
    \    paren_array = [elem for elem in paren_array if elem != \"(\"]\n    paren_array\
    \ = [elem for elem in paren_array if elem != \")\"]\n    paren_array = [elem for\
    \ elem in paren_array if elem != \"(\"]\n    paren_array = [elem for elem in paren_array\
    \ if elem != \"]\"]\n    paren_array = [elem for elem in paren_array if elem !=\
    \ \"(\"]\n    paren_array = [elem for elem in paren_array if elem != \")\"]\n\
    \    paren_array = [elem for elem in paren_array if elem != \"(\"]\n    paren_array\
    \ = [elem for elem in paren_array if elem != \"]\"]\n    paren_array = [elem for\
    \ elem in paren_array if elem != \"(\"]\n    paren_array = [elem for elem in paren_array\
    \ if elem != \")\"]\n    paren_array = [elem for elem in paren_array if elem !=\
    \ \"(\"]\n    paren_array = [elem for elem in paren_array if elem != \"]\"]\n\
    \    paren_array = [elem for elem in paren_array if elem != \"(\"]\n    paren_array\
    \ = [elem for elem in paren_array if elem != \")\"]\n    paren_array = [elem for\
    \ elem in paren_array if elem != \"(\"]\n    paren_array = [elem for elem in paren_array\
    \ if elem != \"]\"]\n    paren_array = [elem for elem in paren_array if elem !=\
    \ \"(\"]\n    paren_array = [elem for elem in paren_array if elem != \"]\"]\n\
    \    paren_array = [elem for elem in paren_array if elem != \"(\"]\n    paren_array\
    \ = [elem for elem in paren_array if elem != \")\"]\n    paren_array = [elem for\
    \ elem in paren_array if elem != \"(\"]\n    paren_array = [elem for elem in ",
  "    paren_stack = Vector{Int64}()\n    paren_stack = paren_string.split(\" \")\
    \ |> collect{|x| x.to_i}\n    paren_stack = paren_stack[1..-1]\n    paren_stack\n\
    end\n</cell>\n<code language=julia-1.5>", "    paren_levels = Vector{Int64}()\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n", " \
    \   paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\"(\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\"(\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\"(\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\"(\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\"(\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\"(\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string", "    paren_groups = split(paren_string,\
    \ \" \")\n    paren_groups = filter(x -> x != \"\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"()\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}[]()[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()()()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()()()()()\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}[]()[]()()()()()()\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}[]()[]()()()()()()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()()()()()()()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()()()()()()()()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()()()()()()()()()()()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()()()()()()()()()()()()\", paren_groups)\n   \
    \ paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()", "    paren_string\
    \ = paren_string.trim()\n    paren_string = paren_string.strip(\"()\")\n    paren_string\
    \ = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"{}\")\n\
    \    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string", "    paren_string = paren_string.trim()\n\
    \    paren_chars = paren_string.chars\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]",
  "    paren_array = paren_string.split(\" \")\n    paren_array_size = length(paren_array)\n\
    \    paren_array_max_size = paren_array_size\n    paren_array_max_size = 1\n \
    \   paren_array_max_size = 1\n    for paren_array_index in range(paren_array_size-1)\n\
    \        paren_array_max_size = paren_array_max_size * paren_array[paren_array_index\
    \ + 1]\n    end\n    paren_array_max_size\nend", "    paren_vec = paren_string.split(\"\
    \ \")\n    paren_vec = paren_vec[1..end]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"\"]\n    paren_vec = paren_vec[paren_vec .!= \" \"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \")\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \")\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]", "    paren_array =\
    \ paren_string.split(\" \")\n    paren_array_size = length(paren_array)\n    paren_array_max\
    \ = 0\n    paren_array_index = 0\n    paren_array_level = 0\n    paren_array_level_size\
    \ = 0\n    paren_array_level_max = 0\n    paren_array_level_max_index = 0\n  \
    \  paren_array_level_max_size = 0\n    paren_array_level_max_index = 0\n    paren_array_level_max_size_index\
    \ = 0\n    paren_array_level_max_size_index = 0\n    for paren_array_index in\
    \ range(paren_array_size)\n        if paren_array[paren_array_index] ~= \"(\"\n\
    \            paren_array_level_size += 1\n        elseif paren_array[paren_array_index]\
    \ == \")\"\n            if paren_array_level_size >= paren_array_max\n       \
    \         paren_array_max = paren_array_level_size\n                paren_array_level_max\
    \ = paren_array_index\n            elseif paren_array_level_size < paren_array_max\n\
    \                paren_array_level_size += 1\n            end\n        elseif\
    \ paren_array[paren_array_index] == \")\"\n            if paren_array_level_size\
    \ >= paren_array_max\n                paren_array_max = paren_array_level_size\n\
    \                paren_array_level_max_size = paren_array_index\n            elseif\
    \ paren_array_level_size < paren_array_max\n                paren_array_level_size\
    \ += 1\n            end\n        elseif paren_array[paren_array_index] ~= \"(\"\
    \n            if paren_array_level_size >= paren_array_max\n                paren_array_max\
    \ = paren_array_level_size\n                paren_array_level_max_size = paren_array_index\n\
    \            elseif paren_array_level_size < paren_array_max\n               \
    \ paren_array_level_size += 1\n            end\n        elseif paren_array[paren_array_index]\
    \ == \")\"\n            if paren_array_level_size >= paren_array_max\n       \
    \         paren_array_max = paren_array_level_size\n                paren_array_level_max_size\
    \ = paren_array_index\n            elseif paren_array_level_size < paren_array_max\n\
    \                paren_array_level_size += 1\n            end\n        end\n \
    \   end\n    paren_array_level_max_size_index = 0\n    for paren_array_level_max_size_index\
    \ in range(paren_array_level_max_size)\n        if paren_array[paren_array_level_max_size_index]\
    \ ~= \"(\"\n            paren_array_level_max_size += 1\n        elseif paren_array[paren_array_level_max_size_index]\
    \ == \")\"\n            if paren_array_level_max_size >= paren_array_level_max\n",
  "    paren_groups = split(paren_string, \" \")\n    paren_groups = filter(x -> x\
    \ != \"\", paren_groups)\n    paren_groups = filter(x -> x != \"()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"[]\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()[]\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()[]()[]()\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]", "  \
    \  paren_vec = paren_string.split(\" \")\n    paren_vec = paren_vec[1..end-1]\n\
    \    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \")\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \")\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= ", "    paren_levels::Vector{Int64} = []\n    paren_level\
    \ = 0\n    paren_levels << paren_level\n    paren_string = paren_string.strip\n\
    \    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    []\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}[]\")\n    paren_string = paren_string.strip(\"{}[]()\")\n    paren_string =\
    \ paren_string.strip(\"{}[]()[]\")\n    paren_string = paren_string.strip(\"{}[]()[]()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()[]()[]\")\n    paren_string =\
    \ paren_string.strip(\"{}[]()[]()[]()\")\n    paren_string = paren_string.strip(\"\
    {}[]()[]()[]()[]\")\n    paren_string = paren_string.strip(\"{}[]()[]()[]()[]()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()[]()[]()[]()[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()[]()[]()[]()[]\")\n    paren_string = paren_string.strip(\"\
    {}[]()[]()[]()[]()[]()\")\n    paren_string = paren_string.strip(\"{}[]()[]()[]()[]()[]()[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]()[]()[]()[]()[]()[]()\")\n   \
    \ paren_string = paren_string.strip(\"{}[]()[]()[]()[]()[]()[]()[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()[]()[]()[]()[]()[]()[]\")\n    paren_string = paren_string.strip(\"\
    {}[]()[]()[]()[]()[]()[]()[]()\")\n    paren_string = paren_string.strip(\"{}[]()[]()[]()[]()[]()[]()[]()[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]()[]()[]()[]()[]()[]()[]()[]()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()[]()[]()[]()[]()[]()[]()[]()[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]()[]()[]()[]()[]()[]()[]()[]()[]()\"\
    )\n    paren_string = paren_string", "    paren_stack = Vector{Int64}()\n    paren_stack\
    \ = paren_string.split(\" \") |> collect{|x| x.to_i}\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[", "    paren_stack\
    \ = Vector{Int64}()\n    paren_stack = paren_stack + paren_string.split(\" \"\
    ) |> collect{|x| x.to_i}\n    paren_stack = paren_stack[1..-1]\n    paren_stack\n\
    end", "    paren_vec = paren_string.split(\" \")\n    paren_vec = paren_vec[1..end]\n\
    \    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \")\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \")\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]", "    paren_array = paren_string.split(\" \")\n\
    \    paren_array = [Int64(elem) for elem in paren_array]\n    paren_array = [elem\
    \ for elem in paren_array if elem != 0]\n    paren_array = [elem for elem in paren_array\
    \ if elem != 0]\n    paren_array = [elem for elem in paren_array if elem != 0]\n\
    \    paren_array = [elem for elem in paren_array if elem != 0]\n    paren_array\
    \ = [elem for elem in paren_array if elem != 0]\n    paren_array = [elem for elem\
    \ in paren_array if elem != 0]\n    paren_array = [elem for elem in paren_array\
    \ if elem != 0]\n    paren_array = [elem for elem in paren_array if elem != 0]\n\
    \    paren_array = [elem for elem in paren_array if elem != 0]\n    paren_array\
    \ = [elem for elem in paren_array if elem != 0]\n    paren_array = [elem for elem\
    \ in paren_array if elem != 0]\n    paren_array = [elem for elem in paren_array\
    \ if elem != 0]\n    paren_array = [elem for elem in paren_array if elem != 0]\n\
    \    paren_array = [elem for elem in paren_array if elem != 0]\n    paren_array\
    \ = [elem for elem in paren_array if elem != 0]\n    paren_array = [elem for elem\
    \ in paren_array if elem != 0]\n    paren_array = [elem for elem in paren_array\
    \ if elem != 0]\n    paren_array = [elem for elem in paren_array if elem != 0]\n\
    \    paren_array = [elem for elem in paren_array if elem != 0]\n    paren_array\
    \ = [elem for elem in paren_array if elem != 0]\n    paren_array = [elem for elem\
    \ in paren_array if elem != 0]\n    paren_array = [elem for elem in paren_array\
    \ if elem != 0]\n    paren_array = [elem for elem in paren_array if elem != 0]\n\
    \    paren_array = [elem for elem in paren_array if elem != 0]\n    paren_array\
    \ = [elem for elem in paren_array if elem != 0]\n    paren_array = [elem for elem\
    \ in paren_array if elem != 0]\n    paren_array = [elem for elem in paren_array\
    \ if elem != 0]\n    paren_array = [elem for elem in paren_array if elem != 0]\n\
    \    paren_array = [elem for elem in paren_", "    paren_groups = split(paren_string,\
    \ \" \")\n    levels = Vector{Int64}()\n    for paren_group in paren_groups\n\
    \        paren_group_levels = parse_nested_parens(paren_group)\n        push!(levels,\
    \ paren_group_levels)\n    end\n    levels\nend\n</cell>\n<code language=julia-1.5>",
  "    paren_groups = split(paren_string, \" \")\n    paren_groups = filter(x -> x\
    \ != \"\", paren_groups)\n    paren_groups = filter(x -> x != \"()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"[]\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()()()()()\", paren_groups)\n    paren_groups = filter(x -> x\
    \ != \"{}[]()()()()()()()\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()()()()()()()()\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()()()()()()()()()()\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}[]()()()()()()()()()()()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()()()()()()()()()()()()()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()()()()()()()()()()()()()()\", paren_groups)\n   \
    \ paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()",
  "    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren", "    paren_array = paren_string.split(\" \")\n    paren_array_size\
    \ = length(paren_array)\n    paren_array_max = 0\n    for paren_array_index in\
    \ 1:paren_array_size\n        paren_array_max = max(paren_array_max, length(paren_array[paren_array_index]))\n\
    \    end\n    paren_array_max = paren_array_max + 1\n    paren_array_vector =\
    \ Vector{Int64}(paren_array_max)\n    for paren_array_index in 1:paren_array_size\n\
    \        paren_array_vector[paren_array_index] = paren_array_index\n    end\n\
    \    return paren_array_vector\nend", "    paren_groups = split(paren_string,\
    \ \" \")\n    paren_groups = filter(x -> x != \"\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"()\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}[]()[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()()()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()()()()()\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}[]()[]()()()()()()\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}[]()[]()()()()()()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()()()()()()()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()()()()()()()()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()()()()()()()()()()\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}[]()[]()()()()()()()()()()()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()()()()()()()()()()()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()()()()()()()()()()()()\", paren_groups)\n   \
    \ paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()()()()\", ", " \
    \   paren_groups = split(paren_string, \" \")\n    paren_groups = filter(x ->\
    \ x != \"\", paren_groups)\n    paren_groups = filter(x -> x != \"()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"[]\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}{}\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}{}[]\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}{}{}\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}{}{}[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}{}{}{}\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}{}{}{}[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}{}{}{}{}\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}{}{}{}{}[]\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}{}{}{}{}{}\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}{}{}{}{}{}[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}{}{}{}{}{}{}\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}{}{}{}{}{}{}[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}{}{}{}{}{}{}{}\", paren_groups)\n   \
    \ paren_groups = filter(x -> x != \"{}{}{}{}{}{}{}{}[]\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}{}{}{}{}{}{}{}{}\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}{}{}{}{}{}{}{}{}[]\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}{}{}{}{}{}{}{}{}{}\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}{}{}{}{}{}{}{}{}{}[]\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}", "    paren_array = paren_string.split(\" \")\n   \
    \ paren_array_size = length(paren_array)\n    paren_array_max_level = 0\n    paren_array_level\
    \ = 0\n    paren_array_max_level = 0\n    for paren_array_level in 1:paren_array_size\n\
    \        if paren_array[paren_array_level] == '('\n            if paren_array_level\
    \ > paren_array_max_level\n                paren_array_max_level = paren_array_level\n\
    \            end\n        elseif paren_array[paren_array_level] == ')'\n     \
    \       if paren_array_level > paren_array_max_level\n                paren_array_max_level\
    \ = paren_array_level\n            end\n        end\n    end\n    paren_array_max_level\n\
    end", "    paren_vec = paren_string.split(\" \")\n    paren_vec = paren_vec[1..end]\n\
    \    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \")\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \")\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]", "    paren_array = paren_string.split(\" \")\n\
    \    paren_array_size = length(paren_array)\n    paren_array_max = 0\n    paren_array_index\
    \ = 0\n    paren_array_level = 0\n    paren_array_max_index = 0\n    paren_array_max_level\
    \ = 0\n    paren_array_max_level_index = 0\n    paren_array_max_level_paren_index\
    \ = 0\n    paren_array_max_level_paren_level = 0\n    paren_array_max_level_paren_level_index\
    \ = 0\n    paren_array_max_level_paren_level_paren_index = 0\n    paren_array_max_level_paren_level_paren_level\
    \ = 0\n    paren_array_max_level_paren_level_paren_level_index = 0\n    paren_array_max_level_paren_level_paren_level_paren_index\
    \ = 0\n    paren_array_max_level_paren_level_paren_level_paren_level = 0\n   \
    \ paren_array_max_level_paren_level_paren_level_paren_level_index = 0\n    paren_array_max_level_paren_level_paren_level_paren_level_paren_index\
    \ = 0\n    paren_array_max_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    paren_array_max_level_paren_level_paren_level_paren_level_paren_level_index\
    \ = 0\n    paren_array_max_level_paren_level_paren_level_paren_level_paren_level_paren_index\
    \ = 0\n    paren_array_max_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    paren_array_max_level_paren_level_paren_level_paren_level_paren_level_paren_level_index\
    \ = 0\n    paren_array_max_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_index\
    \ = 0\n    paren_array_max_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    paren_array_max_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_index\
    \ = 0\n    paren_array_max_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_index\
    \ = 0\n    paren_array_max_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    paren_array_max_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_index\
    \ = 0\n    paren_array_max_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_",
  "    paren_array = paren_string.split(' ')\n    paren_array_size = length(paren_array)\n\
    \    paren_array_max_size = paren_array_size\n    paren_array_max_size = 1\n \
    \   paren_array_max_size = 0\n    paren_array_max_size = 0\n    paren_array_max_size\
    \ = 0\n    paren_array_max_size = 0\n    paren_array_max_size = 0\n    paren_array_max_size\
    \ = 0\n    paren_array_max_size = 0\n    paren_array_max_size = 0\n    paren_array_max_size\
    \ = 0\n    paren_array_max_size = 0\n    paren_array_max_size = 0\n    paren_array_max_size\
    \ = 0\n    paren_array_max_size = 0\n    paren_array_max_size = 0\n    paren_array_max_size\
    \ = 0\n    paren_array_max_size = 0\n    paren_array_max_size = 0\n    paren_array_max_size\
    \ = 0\n    paren_array_max_size = 0\n    paren_array_max_size = 0\n    paren_array_max_size\
    \ = 0\n    paren_array_max_size = 0\n    paren_array_max_size = 0\n    paren_array_max_size\
    \ = 0\n    paren_array_max_size = 0\n    paren_array_max_size = 0\n    paren_array_max_size\
    \ = 0\n    paren_array_max_size = 0\n    paren_array_max_size = 0\n    paren_array_max_size\
    \ = 0\n    paren_array_max_size = 0\n    paren_array_max_size = 0\n    paren_array_max_size\
    \ = 0\n    paren_array_max_size = 0\n    paren_array_max_size = 0\n    paren_array_max_size\
    \ = 0\n    paren_array_max_size = 0\n    paren_array_max_size = 0\n    paren_array_max_size\
    \ = 0\n    paren_array_max_size = 0\n    paren_array_max_size = 0\n    paren_array_max_size\
    \ = 0\n    paren_array_max_size = 0\n    paren_array_max_size = 0\n    paren_array_max_size\
    \ = 0\n    paren_array_max_size = 0\n    paren_array_max_size = 0\n    paren_array_max_size\
    \ = 0\n    paren_array_max_size = 0\n    paren_array_max_size = 0\n    paren_array_max_size\
    \ = 0\n    paren_array_max_size = 0\n    paren_array_max_size = 0\n    paren_array_max_size\
    \ = 0\n    paren_array_max_size = 0\n    paren_array_max_size = 0\n    paren_array_max_size\
    \ = 0\n    paren_array_max_size = 0\n    paren_array_max_size = 0\n    paren",
  "    paren_stack = Vector{Int64}()\n    paren_stack = paren_string.split(\" \")\
    \ |> collect{|x| x.to_i}\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[", "    paren_groups = split(paren_string,\
    \ \" \")\n    paren_levels = Vector{Int64}()\n    for paren_group in paren_groups\n\
    \        paren_level = 0\n        for paren in paren_group\n            if paren\
    \ == \"(\"\n                paren_level += 1\n            elseif paren == \")\"\
    \n                paren_level -= 1\n            else\n                paren_level\
    \ += paren_level\n        end\n        paren_levels[paren_level] += 1\n    end\n\
    \    return paren_levels\nend", "    paren_levels = Vector{Int64}()\n    paren_level\
    \ = 0\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 2\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 3\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 4\n    paren_levels[paren_level] = paren_level\n    paren_level = 5\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 6\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 7\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 8\n    paren_levels[paren_level] = paren_level\n    paren_level = 9\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 10\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 11\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 12\n    paren_levels[paren_level] = paren_level\n    paren_level = 13\n  \
    \  paren_levels[paren_level] = paren_level\n    paren_level = 14\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 15\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 16\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 17\n    paren_levels[paren_level] = paren_level\n    paren_level = 18\n  \
    \  paren_levels[paren_level] = paren_level\n    paren_level = 19\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 20\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 21\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 22\n    paren_levels[paren_level] = paren_level\n    paren_level = 23\n  \
    \  paren_levels[paren_level] = paren_level\n    paren_level = 24\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 25\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 26\n", "    paren_vec = paren_string.split(\" \")\n    paren_vec\
    \ = paren_vec[1..end]\n    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec\
    \ = paren_vec[paren_vec .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"\
    \"]\n    paren_vec = paren_vec[paren_vec .!= \" \"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"\"]\n    paren_vec = paren_vec[paren_vec .!= \" \"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"\"]\n    paren_vec = paren_vec[paren_vec .!= \" \"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"\"]\n    paren_vec = paren_vec[paren_vec .!= \" \"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"\"]\n    paren_vec = paren_vec[paren_vec .!= \" \"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"\"]\n    paren_vec = paren_vec[paren_vec .!= \" \"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"\"]\n    paren_vec = paren_vec[paren_vec .!= \" \"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"\"]\n    paren_vec = paren_vec[paren_vec .!= \" \"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"\"]\n    paren_vec = paren_vec[paren_vec .!= \" \"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"\"]\n    paren_vec = paren_vec[paren_vec .!= \" \"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"\"]\n    paren_vec = paren_vec[paren_vec .!= \" \"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"\"]\n    paren_vec = paren_vec[paren_vec .!= \" \"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"\"]\n    paren_vec = paren_vec[paren_vec .!= \" \"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"\"", "    paren_groups = split(paren_string, \" \")\n    paren_groups\
    \ = filter(x -> x != \"\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"()\", paren_groups)\n    paren_groups = filter(x -> x != \"[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}[]\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}{}\", paren_groups)\n    paren_groups = filter(x -> x != \"{}{}[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}{}{}\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}{}{}[]\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}{}{}{}\", paren_groups)\n    paren_groups = filter(x -> x != \"\
    {}{}{}{}[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}{}{}{}{}\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}{}{}{}{}[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}{}{}{}{}{}\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}{}{}{}{}{}[]\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}{}{}{}{}{}{}\", paren_groups)\n    paren_groups = filter(x -> x\
    \ != \"{}{}{}{}{}{}{}[]\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}{}{}{}{}{}{}{}\", paren_groups)\n    paren_groups = filter(x -> x != \"\
    {}{}{}{}{}{}{}{}[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}{}{}{}{}{}{}{}{}\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}{}{}{}{}{}{}{}{}[]\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}{}{}{}{}{}{}{}{}{}\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}{}{}{}{}{}{}{}{}{}[]\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}", "    paren_array =\
    \ paren_string.split(\" \")\n    paren_array = [x for x in paren_array if x !=\
    \ \"\"]\n    paren_array = [x for x in paren_array if x != \"()\"]\n    paren_array\
    \ = [x for x in paren_array if x != \"[]\"]\n    paren_array = [x for x in paren_array\
    \ if x != \"{}\"]\n    paren_array = [x for x in paren_array if x != \"{}[]\"\
    ]\n    paren_array = [x for x in paren_array if x != \"{}{}\"]\n    paren_array\
    \ = [x for x in paren_array if x != \"{}{}[]\"]\n    paren_array = [x for x in\
    \ paren_array if x != \"{}{}{}\"]\n    paren_array = [x for x in paren_array if\
    \ x != \"{}{}{}[]\"]\n    paren_array = [x for x in paren_array if x != \"{}{}{}{}\"\
    ]\n    paren_array = [x for x in paren_array if x != \"{}{}{}{}[]\"]\n    paren_array\
    \ = [x for x in paren_array if x != \"{}{}{}{}{}\"]\n    paren_array = [x for\
    \ x in paren_array if x != \"{}{}{}{}{}[]\"]\n    paren_array = [x for x in paren_array\
    \ if x != \"{}{}{}{}{}{}\"]\n    paren_array = [x for x in paren_array if x !=\
    \ \"{}{}{}{}{}{}[]\"]\n    paren_array = [x for x in paren_array if x != \"{}{}{}{}{}{}{}\"\
    ]\n    paren_array = [x for x in paren_array if x != \"{}{}{}{}{}{}{}[]\"]\n \
    \   paren_array = [x for x in paren_array if x != \"{}{}{}{}{}{}{}{}\"]\n    paren_array\
    \ = [x for x in paren_array if x != \"{}{}{}{}{}{}{}{}[]\"]\n    paren_array =\
    \ [x for x in paren_array if x != \"{}{}{}{}{}{}{}{}{}\"]\n    paren_array = [x\
    \ for x in paren_array if x != \"{}{}{}{}{}{}{}{}{}[]\"]\n    paren_array = [x\
    \ for x in paren_array if x != \"{}{}{}{}{}{}{}{}{}{}\"]\n    paren_array = [x\
    \ for x in paren_array if x != \"{}{}{}{}{}{}{}{}{}[]\"]\n    paren_array = [x\
    \ for x in paren_array if x != \"{}{}{}{}{}{}{}{}{}{}\"]\n    paren_array = [x\
    \ for x in paren_array if x != \"{}{}{}{}{}{}{}{}{}{}[]\"]\n    paren_array =\
    \ [x for x in paren_array if ", "    paren_groups = paren_string.split(\" \")\
    \ |> String.split \"\\\\(|\\\\)\" |> Vector{String}\n    paren_groups = paren_groups[2:end]\
    \ |> Vector{String}\n    paren_groups = paren_groups[2:end] |> Vector{String}\n\
    \    paren_groups = paren_groups[2:end] |> Vector{String}\n    paren_groups =\
    \ paren_groups[2:end] |> Vector{String}\n    paren_groups = paren_groups[2:end]\
    \ |> Vector{String}\n    paren_groups = paren_groups[2:end] |> Vector{String}\n\
    \    paren_groups = paren_groups[2:end] |> Vector{String}\n    paren_groups =\
    \ paren_groups[2:end] |> Vector{String}\n    paren_groups = paren_groups[2:end]\
    \ |> Vector{String}\n    paren_groups = paren_groups[2:end] |> Vector{String}\n\
    \    paren_groups = paren_groups[2:end] |> Vector{String}\n    paren_groups =\
    \ paren_groups[2:end] |> Vector{String}\n    paren_groups = paren_groups[2:end]\
    \ |> Vector{String}\n    paren_groups = paren_groups[2:end] |> Vector{String}\n\
    \    paren_groups = paren_groups[2:end] |> Vector{String}\n    paren_groups =\
    \ paren_groups[2:end] |> Vector{String}\n    paren_groups = paren_groups[2:end]\
    \ |> Vector{String}\n    paren_groups = paren_groups[2:end] |> Vector{String}\n\
    \    paren_groups = paren_groups[2:end] |> Vector{String}\n    paren_groups =\
    \ paren_groups[2:end] |> Vector{String}\n    paren_groups = paren_groups[2:end]\
    \ |> Vector{String}\n    paren_groups = paren_groups[2:end] |> Vector{String}\n\
    \    paren_groups = paren_groups[2:end] |> Vector{String}\n    paren_groups =\
    \ paren_groups[2:end] |> Vector{String}\n    paren_groups = paren_groups[2:end]\
    \ |> Vector{String}\n    paren_groups = paren_groups[", "    paren_string = paren_string.trim()\n\
    \    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    []\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}[]\")\n    paren_string = paren_string.strip(\"{}[]{}\")\n    paren_string =\
    \ paren_string.strip(\"{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]\")\n    paren_string =\
    \ paren_string.strip(\"{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n  \
    \  paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n\
    \    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]", "    paren_groups\
    \ = split(paren_string, \" \")\n    paren_groups = filter(x -> x != \"\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"()\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"[]\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()\", paren_groups)\n    paren_groups = filter(x -> x != \"\
    {}[]()[]()[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()[]()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()\", paren_groups)\n \
    \   paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]", "  \
    \  paren_stack = Vector{Int64}()\n    paren_stack = paren_string.split(\" \")\
    \ |> collect{|x| x.to_i}\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[", "    paren_string = paren_string.trim()\n\
    \    paren_array = paren_string.split(\" \")\n    paren_array_size = length(paren_array)\n\
    \    paren_array_max = 0\n    paren_array_index = 0\n    paren_array_max_index\
    \ = 0\n    paren_array_max_value = 0\n    paren_array_max_value_count = 0\n  \
    \  paren_array_max_value_count_index = 0\n    for paren_array_index in 1:paren_array_size\n\
    \        paren_array_value = paren_array[paren_array_index]\n        if paren_array_value\
    \ == \"(\"\n            paren_array_max_value = paren_array_max_value + 1\n  \
    \          if paren_array_max_value == paren_array_max_value_count\n         \
    \       paren_array_max_value_count_index = paren_array_index\n            end\n\
    \        elseif paren_array_value == \")\"\n            if paren_array_max_value\
    \ == paren_array_max_value_count\n                paren_array_max_value_count_index\
    \ = paren_array_index\n            end\n        elseif paren_array_value == \"\
    (\"\n            paren_array_max = paren_array_max + 1\n        elseif paren_array_value\
    \ == \")\"\n            if paren_array_max == paren_array_max_value\n        \
    \        paren_array_max_index = paren_array_index\n            end\n        end\n\
    \    end\n    paren_array_max_value_count = paren_array_max_value_count + 1\n\
    \    paren_array_max_value_count_index = paren_array_index\n    paren_array_max_value\
    \ = paren_array_max\n    paren_array_max_index = paren_array_index\n    paren_array_max_value_count_index\
    \ = paren_array_max_index\n    paren_array_max_value_count = paren_array_max_value_count\
    \ + 1\n    paren_array_max_value_count_index = paren_array_index\n    paren_array_max_value\
    \ = paren_array_max\n    paren_array_max_index = paren_array_index\n    paren_array_max_value_count_index\
    \ = paren_array_max_index\n    paren_array_max_value_count = paren_array_max_value_count\
    \ + 1\n    paren_array_max_value_count_index = paren_array_index\n    paren_array_max_value\
    \ = paren_array_max\n    paren_array_max_index = paren_array_index\n    paren_array_max_value_count_index\
    \ = paren_array_max_index\n    paren_array_max_value_count = paren_array_max_value_count\
    \ + 1\n    paren_array_max_value_count_index = paren_array_index\n    paren_array_max_value\
    \ = paren_array_max\n    paren_array_max_index = paren_array_index\n    paren_array_max_value_count_index\
    \ = paren_array_max_index\n    paren_array_max_value_count = ", "    paren_string\
    \ = paren_string.trim()\n    paren_chars = paren_string.chars\n    paren_chars\
    \ = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars\
    \ = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars\
    \ = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars\
    \ = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars\
    \ = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars\
    \ = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars\
    \ = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars\
    \ = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars\
    \ = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars\
    \ = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars\
    \ = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars\
    \ = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars\
    \ = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars\
    \ = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars\
    \ = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars\
    \ = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars\
    \ = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars\
    \ = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars\
    \ = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars\
    \ = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n    paren_chars\
    \ = paren_chars[2:end]", "    paren_groups = split(paren_string, \" \")\n    levels\
    \ = Vector{Int64}()\n    level = 1\n    for paren_group in paren_groups\n    \
    \    if paren_group == \"(\"\n            push!(levels, level)\n            level\
    \ += 1\n        elseif paren_group == \")\"\n            level = pop!(levels)\n\
    \        else\n            error(\"Parentheses group not correctly formatted\"\
    )\n        end\n    end\n    level\nend\n</cell>\n<code language=julia-1.5>",
  "    paren_groups = split(paren_string, \" \")\n    paren_groups = filter(x -> x\
    \ != \"\", paren_groups)\n    paren_groups = filter(x -> x != \"()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"[]\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()()()()()\", paren_groups)\n    paren_groups = filter(x -> x\
    \ != \"{}[]()()()()()()()\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()()()()()()()()\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()()()()()()()()()()\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}[]()()()()()()()()()()()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()()()()()()()()()()()()()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()()()()()()()()()()()()()()\", paren_groups)\n   \
    \ paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()",
  "    paren_groups = split(paren_string, \" \")\n    levels_of_nesting = []\n   \
    \ for paren_group in paren_groups\n        paren_group_levels_of_nesting = parse_nested_parens(paren_group)\n\
    \        push!(levels_of_nesting, paren_group_levels_of_nesting)\n    end\n  \
    \  return levels_of_nesting\nend", "    paren_vec = paren_string.split(\" \")\n\
    \    paren_vec = paren_vec[1 : length(paren_vec)]\n    paren_vec = paren_vec[1\
    \ : length(paren_vec)]\n    paren_vec = paren_vec[1 : length(paren_vec)]\n   \
    \ paren_vec = paren_vec[1 : length(paren_vec)]\n    paren_vec = paren_vec[1 :\
    \ length(paren_vec)]\n    paren_vec = paren_vec[1 : length(paren_vec)]\n    paren_vec\
    \ = paren_vec[1 : length(paren_vec)]\n    paren_vec = paren_vec[1 : length(paren_vec)]\n\
    \    paren_vec = paren_vec[1 : length(paren_vec)]\n    paren_vec = paren_vec[1\
    \ : length(paren_vec)]\n    paren_vec = paren_vec[1 : length(paren_vec)]\n   \
    \ paren_vec = paren_vec[1 : length(paren_vec)]\n    paren_vec = paren_vec[1 :\
    \ length(paren_vec)]\n    paren_vec = paren_vec[1 : length(paren_vec)]\n    paren_vec\
    \ = paren_vec[1 : length(paren_vec)]\n    paren_vec = paren_vec[1 : length(paren_vec)]\n\
    \    paren_vec = paren_vec[1 : length(paren_vec)]\n    paren_vec = paren_vec[1\
    \ : length(paren_vec)]\n    paren_vec = paren_vec[1 : length(paren_vec)]\n   \
    \ paren_vec = paren_vec[1 : length(paren_vec)]\n    paren_vec = paren_vec[1 :\
    \ length(paren_vec)]\n    paren_vec = paren_vec[1 : length(paren_vec)]\n    paren_vec\
    \ = paren_vec[1 : length(paren_vec)]\n    paren_vec = paren_vec[1 : length(paren_vec)]\n\
    \    paren_vec = paren_vec[1 : length(paren_vec)]\n    paren_vec = paren_vec[1\
    \ : length(paren_vec)]\n    paren_vec = paren_vec[1 : length(paren_vec)]\n   \
    \ paren_vec = paren_vec[1 : length(paren_vec)]\n    paren_vec = paren_vec[1 :\
    \ length(paren_vec)]\n    paren_vec = paren_vec[1 : length(paren_vec)]\n    paren_vec\
    \ = paren_vec[1 : length(paren_vec)]\n    paren_vec = paren_vec[1 : length(paren_vec)]\n\
    \    paren_vec = paren_vec[1 : length(paren_vec)]\n    paren_vec = paren_vec[",
  "    paren_levels = Vector{Int64}()\n    paren_level = 0\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 2\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 3\n    paren_levels[paren_level] = paren_level\n    paren_level = 4\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 5\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 6\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 7\n    paren_levels[paren_level] = paren_level\n    paren_level = 8\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 9\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 10\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 11\n    paren_levels[paren_level] = paren_level\n    paren_level = 12\n  \
    \  paren_levels[paren_level] = paren_level\n    paren_level = 13\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 14\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 15\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 16\n    paren_levels[paren_level] = paren_level\n    paren_level = 17\n  \
    \  paren_levels[paren_level] = paren_level\n    paren_level = 18\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 19\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 20\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 21\n    paren_levels[paren_level] = paren_level\n    paren_level = 22\n  \
    \  paren_levels[paren_level] = paren_level\n    paren_level = 23\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 24\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 25\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 26\n", "    paren_array = paren_string.split(\" \")\n    paren_array = [Int64(x)\
    \ for x in paren_array]\n    paren_array = [x for x in paren_array if x > 0]\n\
    \    paren_array = [x for x in paren_array if x <= paren_array.length]\n    paren_array\
    \ = [x for x in paren_array if x != paren_array.length]\n    paren_array = [x\
    \ for x in paren_array if x == paren_array.length]\n    paren_array = [x for x\
    \ in paren_array if x == 0]\n    return paren_array\nend", "    paren_string =\
    \ paren_string.trim()\n    paren_string = paren_string.strip(\"()\")\n    paren_string\
    \ = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"{}\")\n\
    \    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren", "    paren_stack = Vector{Int64}()\n    paren_stack = paren_string.split(\"\
    \ \") |> collect{|x| x.to_i}\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[", "    paren_groups = split(paren_string,\
    \ \" \")\n    paren_groups = filter(x -> x != \"\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"()\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}[]()[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()()()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()()()()()\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}[]()[]()()()()()()\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}[]()[]()()()()()()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()()()()()()()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()()()()()()()()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()()()()()()()()()()()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()()()()()()()()()()()()\", paren_groups)\n   \
    \ paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()", "    paren_groups\
    \ = split(paren_string, \" \")\n    paren_groups = filter(x -> x != \"\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"()\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"[]\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()()()\", paren_groups)\n    paren_groups = filter(x -> x != \"\
    {}[]()()()()()\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()",
  "    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string", "    paren_levels = Vector{Int64}()\n\
    \    paren_levels_stack = Vector{Int64}()\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_stack = paren_levels_stack\n    paren_levels_stack = paren_levels_stack\n\
    \    paren_levels_", "    paren_array = paren_string.split(\" \")\n    paren_array_sorted\
    \ = sort(paren_array)\n    paren_array_sorted = paren_array_sorted[paren_array_sorted\
    \ .!= paren_array_sorted[1]]\n    paren_array_sorted = paren_array_sorted[paren_array_sorted\
    \ .!= paren_array_sorted[2]]\n    paren_array_sorted = paren_array_sorted[paren_array_sorted\
    \ .!= paren_array_sorted[3]]\n    paren_array_sorted = paren_array_sorted[paren_array_sorted\
    \ .!= paren_array_sorted[4]]\n    paren_array_sorted = paren_array_sorted[paren_array_sorted\
    \ .!= paren_array_sorted[5]]\n    paren_array_sorted = paren_array_sorted[paren_array_sorted\
    \ .!= paren_array_sorted[6]]\n    paren_array_sorted = paren_array_sorted[paren_array_sorted\
    \ .!= paren_array_sorted[7]]\n    paren_array_sorted = paren_array_sorted[paren_array_sorted\
    \ .!= paren_array_sorted[8]]\n    paren_array_sorted = paren_array_sorted[paren_array_sorted\
    \ .!= paren_array_sorted[9]]\n    paren_array_sorted = paren_array_sorted[paren_array_sorted\
    \ .!= paren_array_sorted[10]]\n    paren_array_sorted = paren_array_sorted[paren_array_sorted\
    \ .!= paren_array_sorted[11]]\n    paren_array_sorted = paren_array_sorted[paren_array_sorted\
    \ .!= paren_array_sorted[12]]\n    paren_array_sorted = paren_array_sorted[paren_array_sorted\
    \ .!= paren_array_sorted[13]]\n    paren_array_sorted = paren_array_sorted[paren_array_sorted\
    \ .!= paren_array_sorted[14]]\n    paren_array_sorted = paren_array_sorted[paren_array_sorted\
    \ .!= paren_array_sorted[15]]\n    paren_array_sorted = paren_array_sorted[paren_array_sorted\
    \ .!= paren_array_sorted[16]]\n    paren_array_sorted = paren_array_sorted[paren_array_sorted\
    \ .!= paren_array_sorted[17]]\n    paren_array_sorted = paren_array_sorted[paren_array_sorted\
    \ .!= paren_array_sorted[18]]\n    paren_array_sorted = paren_array_sorted[paren_array_sorted\
    \ .!= paren_array_sorted[19]]\n    paren_array_sorted = paren_array_sorted[paren_array_sorted\
    \ .!= paren_array_sorted[20]]\n    paren_array_", "    paren_array = paren_string.split('\
    \ ')\n    paren_array_size = length(paren_array)\n    paren_array_max_level =\
    \ paren_array_size\n    paren_array_level = 1\n    paren_array_max_level = 0\n\
    \    for paren_element in paren_array\n        if paren_element == '('\n     \
    \       if paren_array_level > paren_array_max_level\n                paren_array_max_level\
    \ = paren_array_level\n            paren_array_level += 1\n        elseif paren_element\
    \ == ')'\n            if paren_array_level > paren_array_max_level\n         \
    \       paren_array_max_level = paren_array_level\n            paren_array_level\
    \ -= 1\n        end\n    end\n    paren_array_max_level\nend\n</cell>\n<code language=julia-1.5>",
  "    paren_groups = split(paren_string, \" \")\n    paren_groups = filter(x -> !isdigit(x),\
    \ paren_groups)\n    paren_groups = filter(x -> x == \"\", paren_groups)\n   \
    \ paren_groups = filter(x -> x == \" \", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"()\", paren_groups)\n    paren_groups = filter(x -> x != \"[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}()\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}{}\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}{}()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}{}[]\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}{}{}\", paren_groups)\n    paren_groups = filter(x -> x != \"{}{}{}()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}{}{}[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}{}{}{}\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}{}{}{}()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}{}{}{}[]\", paren_groups)\n    paren_groups = filter(x -> x != \"\
    {}{}{}{}{}\", paren_groups)\n    paren_groups = filter(x -> x != \"{}{}{}{}{}()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}{}{}{}{}[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}{}{}{}{}{}\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}{}{}{}{}{}()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}{}{}{}{}{}[]\", paren_groups)\n    paren_groups = filter(x -> x\
    \ != \"{}{}{}{}{}{}{}\", paren_groups)\n    paren_groups = filter(x -> x != \"\
    {}{}{}{}{}{}{}()\", paren_groups)\n    paren_groups = filter(x -> x ", "    paren_levels\
    \ = Vector{Int64}()\n    paren_level = 1\n    paren_levels << paren_level\n  \
    \  paren_level = 1\n    paren_levels << paren_level\n    paren_level = 1\n   \
    \ paren_levels << paren_level\n    paren_level = 1\n    paren_levels << paren_level\n\
    \    paren_level = 1\n    paren_levels << paren_level\n    paren_level = 1\n \
    \   paren_levels << paren_level\n    paren_level = 1\n    paren_levels << paren_level\n\
    \    paren_level = 1\n    paren_levels << paren_level\n    paren_level = 1\n \
    \   paren_levels << paren_level\n    paren_level = 1\n    paren_levels << paren_level\n\
    \    paren_level = 1\n    paren_levels << paren_level\n    paren_level = 1\n \
    \   paren_levels << paren_level\n    paren_level = 1\n    paren_levels << paren_level\n\
    \    paren_level = 1\n    paren_levels << paren_level\n    paren_level = 1\n \
    \   paren_levels << paren_level\n    paren_level = 1\n    paren_levels << paren_level\n\
    \    paren_level = 1\n    paren_levels << paren_level\n    paren_level = 1\n \
    \   paren_levels << paren_level\n    paren_level = 1\n    paren_levels << paren_level\n\
    \    paren_level = 1\n    paren_levels << paren_level\n    paren_level = 1\n \
    \   paren_levels << paren_level\n    paren_level = 1\n    paren_levels << paren_level\n\
    \    paren_level = 1\n    paren_levels << paren_level\n    paren_level = 1\n \
    \   paren_levels << paren_level\n    paren_level = 1\n    paren_levels << paren_level\n\
    \    paren_level = 1\n    paren_levels << paren_level\n    paren_level = 1\n \
    \   paren_levels << paren_level\n    paren_level = 1\n    paren_levels << paren_level\n\
    \    paren_level = 1\n    paren_levels << paren_level\n    paren_level = 1\n \
    \   paren_levels << paren_level\n    paren_level = 1\n    paren_levels << paren_level\n\
    \    paren_level", "    paren_vec = paren_string.split(\" \")\n    paren_vec =\
    \ paren_vec[paren_vec!=\"\")\n    paren_vec = paren_vec[paren_vec != \" \"]\n\
    \    paren_vec = paren_vec[paren_vec != \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ != \" \"]\n    paren_vec = paren_vec[paren_vec != \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ != \" \"]\n    paren_vec = paren_vec[paren_vec != \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ != \" \"]\n    paren_vec = paren_vec[paren_vec != \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ != \" \"]\n    paren_vec = paren_vec[paren_vec != \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ != \" \"]\n    paren_vec = paren_vec[paren_vec != \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ != \" \"]\n    paren_vec = paren_vec[paren_vec != \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ != \" \"]\n    paren_vec = paren_vec[paren_vec != \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ != \" \"]\n    paren_vec = paren_vec[paren_vec != \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ != \" \"]\n    paren_vec = paren_vec[paren_vec != \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ != \" \"]\n    paren_vec = paren_vec[paren_vec != \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ != \" \"]\n    paren_vec = paren_vec[paren_vec != \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ != \" \"]\n    paren_vec = paren_vec[paren_vec != \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ != \" \"]\n    paren_vec = paren_vec[paren_vec != \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ != \" \"]\n    paren_vec = paren_vec[paren_vec != \"\"]\n    paren_vec = paren_vec[paren",
  "    paren_groups = split(paren_string, \" \")\n    parsed_parens = Vector{Int64}()\n\
    \    for paren_group in paren_groups\n        paren_group_split = split(paren_group,\
    \ \")\")\n        paren_group_split[end] = paren_group_split[end][2:end]\n   \
    \     parsed_parens = parsed_parens ++ paren_group_split\n    end\n    return\
    \ parsed_parens\nend", "    paren_groups = split(paren_string, \" \")\n    paren_groups\
    \ = filter(x -> x != \"\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"()\", paren_groups)\n    paren_groups = filter(x -> x != \"[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}[]\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()[]()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()[]()[]\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}[]()[]()[]()[]()\", paren_groups)\n    paren_groups = filter(x -> x\
    \ != \"{}[]()[]()[]()[]()[]\", paren_groups)\n    paren_groups = filter(x -> x\
    \ != \"{}[]()[]()[]()[]()[]()\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}[]()[]()[]()[]()[]()[]\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()[]()[]()[]()[]()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()[]()[]()[]()[]()[]\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]\", paren_groups)\n   \
    \ paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]", "  \
    \  paren_levels = Vector{Int64}()\n    paren_level = 0\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 2\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 3\n    paren_levels[paren_level] = paren_level\n    paren_level = 4\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 5\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 6\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 7\n    paren_levels[paren_level] = paren_level\n    paren_level = 8\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 9\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 10\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 11\n    paren_levels[paren_level] = paren_level\n    paren_level = 12\n  \
    \  paren_levels[paren_level] = paren_level\n    paren_level = 13\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 14\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 15\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 16\n    paren_levels[paren_level] = paren_level\n    paren_level = 17\n  \
    \  paren_levels[paren_level] = paren_level\n    paren_level = 18\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 19\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 20\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 21\n    paren_levels[paren_level] = paren_level\n    paren_level = 22\n  \
    \  paren_levels[paren_level] = paren_level\n    paren_level = 23\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 24\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 25\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 26\n", "    paren_groups = split(paren_string, \" \")\n    paren_groups =\
    \ filter(x -> x != \"\", paren_groups)\n    paren_groups = filter(x -> x != \"\
    ()\", paren_groups)\n    paren_groups = filter(x -> x != \"[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}[]\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()[]()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()[]()[]\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}[]()[]()[]()[]()\", paren_groups)\n    paren_groups = filter(x -> x\
    \ != \"{}[]()[]()[]()[]()[]\", paren_groups)\n    paren_groups = filter(x -> x\
    \ != \"{}[]()[]()[]()[]()[]()\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}[]()[]()[]()[]()[]()[]\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()[]()[]()[]()[]()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()[]()[]()[]()[]()[]\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]\", paren_groups)\n   \
    \ paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]", "  \
    \  paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]()\")\n    paren_string = paren_string.strip(\"{}[]()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()\")\n   \
    \ paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()", "    paren_groups = split(paren_string,\
    \ \" \")\n    paren_groups = filter(x -> x != \"\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \")\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n",
  "    paren_groups = split(paren_string, \" \")\n    levels = Vector{Int64}()\n \
    \   for paren_group in paren_groups\n        paren_group_levels = parse_nested_parens(paren_group)\n\
    \        push!(levels, paren_group_levels)\n    end\n    levels\nend\n</cell>\n\
    <code language=julia-1.5>\nparse_nested_parens(\"((()))\")\n</cell>\n<code language=julia-1.5>",
  "    paren_vec = paren_string.split(\" \")\n    paren_vec = paren_vec[1..end]\n\
    \    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \")\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \")\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]", "    paren_groups = split(paren_string, \" \"\
    )\n    paren_groups = filter(x -> !isdigit(x), paren_groups)\n    paren_groups\
    \ = filter(x -> x == \"\", paren_groups)\n    paren_groups = filter(x -> x ==\
    \ \" \", paren_groups)\n    paren_groups = filter(x -> x != \"()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"[]\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()[]\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()[]()[]()\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]()", " \
    \   paren_groups = split(paren_string, \" \")\n    paren_groups = filter(x ->\
    \ x != \"\", paren_groups)\n    paren_groups = filter(x -> x != \"()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"[]\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()()()()()\", paren_groups)\n    paren_groups = filter(x -> x\
    \ != \"{}[]()()()()()()()\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()()()()()()()()\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()()()()()()()()()\", paren_groups)\n    paren_groups = filter(x -> x\
    \ != \"{}[]()()()()()()()()()()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()()()()()()()()()()()()\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}[]()()()()()()()()()()()()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()()()()()()()()()()()()()()\", paren_groups)\n   \
    \ paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()()\"\
    , paren_groups)\n    ", "    paren_groups = paren_string.split(\" \")\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n    paren_groups\
    \ = paren_groups[2:end]\n    paren_groups = paren_groups[2:", "    paren_stack\
    \ = Vector{Int64}()\n    paren_stack = paren_string.split(\" \")\n    paren_stack\
    \ = paren_stack[end-1:end]\n    paren_stack = paren_stack[paren_stack .!= \"\"\
    ]\n    paren_stack = paren_stack[paren_stack .!= \" \"]\n    paren_stack = paren_stack[paren_stack\
    \ .!= \" \\n\"]\n    paren_stack = paren_stack[paren_stack .!= \" \\t\"]\n   \
    \ paren_stack = paren_stack[paren_stack .!= \" \\r\"]\n    paren_stack = paren_stack[paren_stack\
    \ .!= \" \\t\\n\"]\n    paren_stack = paren_stack[paren_stack .!= \" \\t\\r\"\
    ]\n    paren_stack = paren_stack[paren_stack .!= \" \\t\\r\\n\"]\n    paren_stack\
    \ = paren_stack[paren_stack .!= \" \\t\\r\\n \"]\n    paren_stack = paren_stack[paren_stack\
    \ .!= \" \\t\\r\\n \\t\"]\n    paren_stack = paren_stack[paren_stack .!= \" \\\
    t\\r\\n \\t\\n\"]\n    paren_stack = paren_stack[paren_stack .!= \" \\t\\r\\n\
    \ \\t\\r\"]\n    paren_stack = paren_stack[paren_stack .!= \" \\t\\r\\n \\t\\\
    r\\n\"]\n    paren_stack = paren_stack[paren_stack .!= \" \\t\\r\\n \\t\\r\\n\
    \ \"]\n    paren_stack = paren_stack[paren_stack .!= \" \\t\\r\\n \\t\\r\\n \\\
    t\"]\n    paren_stack = paren_stack[paren_stack .!= \" \\t\\r\\n \\t\\r\\n \\\
    t\\n\"]\n    paren_stack = paren_stack[paren_stack .!= \" \\t\\r\\n \\t\\r\\n\
    \ \\t\\r\"]\n    paren_stack = paren_stack[paren_stack .!= \" \\t\\r\\n \\t\\\
    r\\n \\t\\r\\n\"]\n    paren_stack = paren_stack[paren_stack .!= \" \\t\\r\\n\
    \ \\t\\r\\n \\t\\r\\n \"]\n    paren_stack = paren_stack[paren_stack .!= \" \\\
    t\\r\\n \\t\\r\\n \\t\\r\\n \\t\"]\n    paren_stack = paren_stack[paren_stack\
    \ .!= \" \\t\\r\\n \\t\\r\\n \\t\\r\\n \\t\\n\"]\n    paren_stack = paren_stack[paren_stack\
    \ .!= \" \\t\\r\\n \\t\\r\\n \\t", "    paren_groups = split(paren_string, \"\
    \ \")\n    paren_groups = filter(x -> x != \"\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"()\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}[]()[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()[]()[]\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()[]()[]()\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}[]()[]()[]()[]()[]\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}[]()[]()[]()[]()[]()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()[]()[]()[]()[]\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()[]()[]()[]()[]()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()[]()[]()[]()[]()[]\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]\", paren_groups)\n   \
    \ paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]", "  \
    \  paren_groups = split(paren_string, \" \")\n    paren_groups = filter(x -> x\
    \ != \"\", paren_groups)\n    paren_groups = filter(x -> x != \"()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"[]\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}{}\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}{}[]\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}{}{}\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}{}{}[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}{}{}{}\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}{}{}{}[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}{}{}{}{}\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}{}{}{}{}[]\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}{}{}{}{}{}\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}{}{}{}{}{}[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}{}{}{}{}{}{}\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}{}{}{}{}{}{}[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}{}{}{}{}{}{}{}\", paren_groups)\n   \
    \ paren_groups = filter(x -> x != \"{}{}{}{}{}{}{}{}[]\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}{}{}{}{}{}{}{}{}\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}{}{}{}{}{}{}{}{}[]\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}{}{}{}{}{}{}{}{}{}\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}{}{}{}{}{}{}{}{}{}[]\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}", "    paren_array = paren_string.split(\" \")\n   \
    \ paren_array_size = length(paren_array)\n    paren_array_max = 0\n    for paren_array_index\
    \ in 1:paren_array_size\n        paren_array_max = max(paren_array_max, length(paren_array[paren_array_index]))\n\
    \    end\n    paren_array_max\nend", "    paren_vec = paren_string.split(\" \"\
    )\n    paren_vec = paren_vec[1..end]\n    paren_vec = paren_vec[paren_vec .!=\
    \ \"\"]\n    paren_vec = paren_vec[paren_vec .!= \" \"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \")\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \")\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]", "    paren_stack =\
    \ Vector{Int64}()\n    paren_stack = paren_stack + paren_string.split(\" \")\n\
    \    paren_stack = paren_stack[1..end]\n    paren_stack = paren_stack[paren_stack\
    \ .!= paren_string]\n    paren_stack = paren_stack[paren_stack .!= paren_string]\n\
    \    paren_stack = paren_stack[paren_stack .!= paren_string]\n    paren_stack\
    \ = paren_stack[paren_stack .!= paren_string]\n    paren_stack = paren_stack[paren_stack\
    \ .!= paren_string]\n    paren_stack = paren_stack[paren_stack .!= paren_string]\n\
    \    paren_stack = paren_stack[paren_stack .!= paren_string]\n    paren_stack\
    \ = paren_stack[paren_stack .!= paren_string]\n    paren_stack = paren_stack[paren_stack\
    \ .!= paren_string]\n    paren_stack = paren_stack[paren_stack .!= paren_string]\n\
    \    paren_stack = paren_stack[paren_stack .!= paren_string]\n    paren_stack\
    \ = paren_stack[paren_stack .!= paren_string]\n    paren_stack = paren_stack[paren_stack\
    \ .!= paren_string]\n    paren_stack = paren_stack[paren_stack .!= paren_string]\n\
    \    paren_stack = paren_stack[paren_stack .!= paren_string]\n    paren_stack\
    \ = paren_stack[paren_stack .!= paren_string]\n    paren_stack = paren_stack[paren_stack\
    \ .!= paren_string]\n    paren_stack = paren_stack[paren_stack .!= paren_string]\n\
    \    paren_stack = paren_stack[paren_stack .!= paren_string]\n    paren_stack\
    \ = paren_stack[paren_stack .!= paren_string]\n    paren_stack = paren_stack[paren_stack\
    \ .!= paren_string]\n    paren_stack = paren_stack[paren_stack .!= paren_string]\n\
    \    paren_stack = paren_stack[paren_stack .!= paren_string]\n    paren_stack\
    \ = paren_stack[paren_stack .!= paren_string]\n    paren_stack = paren_stack[paren_stack\
    \ .!= paren_string]\n    paren_stack = paren_stack[paren_stack .!= paren_string]\n\
    \    paren_stack = ", "    paren_groups = split(paren_string, \" \")\n    paren_groups\
    \ = filter(x -> x != \"\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"()\", paren_groups)\n    paren_groups = filter(x -> x != \"[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}[]\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()()()()\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}[]()[]()()()()()\", paren_groups)\n    paren_groups = filter(x -> x\
    \ != \"{}[]()[]()()()()()()\", paren_groups)\n    paren_groups = filter(x -> x\
    \ != \"{}[]()[]()()()()()()()\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}[]()[]()()()()()()()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()()()()()()()()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()()()()()()()()()()()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()()()()()()()()()()()()\", paren_groups)\n   \
    \ paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()", "    paren_vec\
    \ = paren_string.split(\" \")\n    paren_vec = paren_vec[1..end]\n    paren_vec\
    \ = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec .!= \"\
    \ \"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \")\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \")\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]", "    paren_groups = split(paren_string, \" \")\n    paren_groups =\
    \ filter(x -> x != \"\", paren_groups)\n    paren_groups = filter(x -> x != \"\
    ()\", paren_groups)\n    paren_groups = filter(x -> x != \"[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}[]\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()()()()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()()()()()()()\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}[]()()()()()()()()\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}[]()()()()()()()()()()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()()()()()()()()()()()()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()()()()()()()()()()()()()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()()()()()()()()()()()()()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()\", paren_groups)\n \
    \   paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()()\",\
    \ paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()",
  "    paren_groups = split(paren_string, \" \")\n    levels = Vector{Int64}()\n \
    \   for paren_group in paren_groups\n        paren_group_levels = parse_nested_parens(paren_group)\n\
    \        push!(levels, paren_group_levels)\n    end\n    return levels\nend",
  "    paren_groups = split(paren_string, \" \")\n    paren_groups = filter(x -> x\
    \ != \"\", paren_groups)\n    paren_groups = filter(x -> x != \"()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"[]\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()()()()()\", paren_groups)\n    paren_groups = filter(x -> x\
    \ != \"{}[]()()()()()()()\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()()()()()()()()\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()()()()()()()()()\", paren_groups)\n    paren_groups = filter(x -> x\
    \ != \"{}[]()()()()()()()()()()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()()()()()()()()()()()()\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}[]()()()()()()()()()()()()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()()()()()()()()()()()()()()\", paren_groups)\n   \
    \ paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()()\"\
    , paren_groups)\n    ", "    paren_groups = split(paren_string, \" \")\n    paren_groups\
    \ = filter(x -> x != \"\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"()\", paren_groups)\n    paren_groups = filter(x -> x != \"[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}[]\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()[]()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()[]()[]\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}[]()[]()[]()[]()\", paren_groups)\n    paren_groups = filter(x -> x\
    \ != \"{}[]()[]()[]()[]()[]\", paren_groups)\n    paren_groups = filter(x -> x\
    \ != \"{}[]()[]()[]()[]()[]()\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}[]()[]()[]()[]()[]()[]\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()[]()[]()[]()[]()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()[]()[]()[]()[]()[]\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]\", paren_groups)\n   \
    \ paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]", "  \
    \  paren_array = paren_string.split(\" \")\n    paren_array_size = length(paren_array)\n\
    \    paren_array_max = 0\n    for paren_level in paren_array\n        if paren_level\
    \ == \"()\"\n            paren_array_max = paren_array_max + 1\n        elseif\
    \ paren_level == \"[]\"\n            paren_array_max = paren_array_max + 1\n \
    \       elseif paren_level == \"{}\"\n            paren_array_max = paren_array_max\
    \ + 1\n        elseif paren_level == \"[]{}\"\n            paren_array_max = paren_array_max\
    \ + 1\n        elseif paren_level == \"{}[]\"\n            paren_array_max = paren_array_max\
    \ + 1\n        elseif paren_level == \"[][]\"\n            paren_array_max = paren_array_max\
    \ + 1\n        elseif paren_level == \"{}{}[]\"\n            paren_array_max =\
    \ paren_array_max + 1\n        elseif paren_level == \"[]{}[]\"\n            paren_array_max\
    \ = paren_array_max + 1\n        elseif paren_level == \"{}[][]\"\n          \
    \  paren_array_max = paren_array_max + 1\n        elseif paren_level == \"[][][]\"\
    \n            paren_array_max = paren_array_max + 1\n        elseif paren_level\
    \ == \"{}{}[][]\"\n            paren_array_max = paren_array_max + 1\n       \
    \ elseif paren_level == \"[]{}[][]\"\n            paren_array_max = paren_array_max\
    \ + 1\n        elseif paren_level == \"{}[][][]\"\n            paren_array_max\
    \ = paren_array_max + 1\n        elseif paren_level == \"[][][][]\"\n        \
    \    paren_array_max = paren_array_max + 1\n        elseif paren_level == \"{}{}[][][]\"\
    \n            paren_array_max = paren_array_max + 1\n        elseif paren_level\
    \ == \"[]{}[][][]\"\n            paren_array_max = paren_array_max + 1\n     \
    \   elseif paren_level == \"{}[][][][]\"\n            paren_array_max = paren_array_max\
    \ + 1\n        elseif paren_level == \"[][][][][]\"\n            paren_array_max\
    \ = paren_array_max + 1\n        elseif paren_level == \"{}{}[][][][]\"\n    \
    \        paren_array_max = paren_array_max + 1\n        elseif paren_level ==\
    \ \"[]{}[][][][]\"\n            paren_array_max = paren_array_max + 1\n      \
    \  elseif paren_level == \"{}[][][][]", "    paren_stack = Vector{Int64}()\n \
    \   paren_stack = paren_string.split(\" \") # split string into vector of strings\
    \ by space\n    paren_stack = paren_stack[paren_stack.length-1] # get last element\
    \ of paren_stack\n    paren_stack = paren_stack.split('(') # split string into\
    \ vector of strings by '('\n    paren_stack = paren_stack[paren_stack.length-1]\
    \ # get last element of paren_stack\n    paren_stack = paren_stack.split(')')\
    \ # split string into vector of strings by ')'\n    paren_stack = paren_stack[paren_stack.length-1]\
    \ # get last element of paren_stack\n    paren_stack = paren_stack.split('[')\
    \ # split string into vector of strings by '['\n    paren_stack = paren_stack[paren_stack.length-1]\
    \ # get last element of paren_stack\n    paren_stack = paren_stack.split(']')\
    \ # split string into vector of strings by ']'\n    paren_stack = paren_stack[paren_stack.length-1]\
    \ # get last element of paren_stack\n    paren_stack = paren_stack.split('{')\
    \ # split string into vector of strings by '{'\n    paren_stack = paren_stack[paren_stack.length-1]\
    \ # get last element of paren_stack\n    paren_stack = paren_stack.split('}')\
    \ # split string into vector of strings by '}'\n    paren_stack = paren_stack[paren_stack.length-1]\
    \ # get last element of paren_stack\n    paren_stack = paren_stack.split('+')\
    \ # split string into vector of strings by '+'\n    paren_stack = paren_stack[paren_stack.length-1]\
    \ # get last element of paren_stack\n    paren_stack = paren_stack.split('-')\
    \ # split string into vector of strings by '-'\n    paren_stack = paren_stack[paren_stack.length-1]\
    \ # get last element of paren_stack\n    paren_stack = paren_stack.split('*')\
    \ # split string into vector of strings by '*'\n    paren_stack = paren_stack[paren_stack.length-1]\
    \ # get last element of paren_stack\n    paren_stack = paren_stack.split('/')\
    \ # split string into vector of strings by '/'\n    paren_stack = paren_stack[paren_stack.length-1]\
    \ # get last element of paren_stack\n    paren_stack = paren_stack.split('%')\
    \ # split string into vector of strings by '%'\n    paren_stack = paren_", " \
    \   paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]()\")\n    paren_string = paren_string.strip(\"{}[]()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()\")\n   \
    \ paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()", "    paren_groups = split(paren_string,\
    \ \" \")\n    paren_levels = Vector{Int64}()\n    for paren_group in paren_groups\n\
    \        paren_level = 0\n        for paren in paren_group\n            if paren\
    \ == \"(\"\n                paren_level += 1\n            elseif paren == \")\"\
    \n                paren_level -= 1\n                if paren_level == 0\n    \
    \                paren_levels << paren_level\n                end\n          \
    \  end\n        end\n    end\n    return paren_levels\nend\n</cell>\n<code language=julia-1.5>",
  "    paren_array = paren_string.split(\" \")\n    paren_array = [Int64(x) for x\
    \ in paren_array]\n    paren_array = [x for x in paren_array if x != 0]\n    paren_array\
    \ = [x for x in paren_array if x > 0]\n    paren_array = [x for x in paren_array\
    \ if x <= paren_array[1]]\n    paren_array = [x for x in paren_array if x <= paren_array[2]]\n\
    \    paren_array = [x for x in paren_array if x <= paren_array[3]]\n    paren_array\
    \ = [x for x in paren_array if x <= paren_array[4]]\n    paren_array = [x for\
    \ x in paren_array if x <= paren_array[5]] \n    paren_array = [x for x in paren_array\
    \ if x <= paren_array[6]]\n    paren_array = [x for x in paren_array if x <= paren_array[7]]\n\
    \    paren_array = [x for x in paren_array if x <= paren_array[8]]\n    paren_array\
    \ = [x for x in paren_array if x <= paren_array[9]]\n    paren_array = [x for\
    \ x in paren_array if x <= paren_array[10]]\n    paren_array = [x for x in paren_array\
    \ if x <= paren_array[11]]\n    paren_array = [x for x in paren_array if x <=\
    \ paren_array[12]]\n    paren_array = [x for x in paren_array if x <= paren_array[13]]\n\
    \    paren_array = [x for x in paren_array if x <= paren_array[14]]\n    paren_array\
    \ = [x for x in paren_array if x <= paren_array[15]]\n    paren_array = [x for\
    \ x in paren_array if x <= paren_array[16]]\n    paren_array = [x for x in paren_array\
    \ if x <= paren_array[17]]\n    paren_array = [x for x in paren_array if x <=\
    \ paren_array[18]]\n    paren_array = [x for x in paren_array if x <= paren_array[19]]\n\
    \    paren_array = [x for x in paren_array if x <= paren_array[20]]\n    paren_array\
    \ = [x for x in paren_array if x <= paren_array[21]]\n    paren_array = [x for\
    \ x in paren_array if x <= paren_array[22]]\n    paren_array = [x for x in paren_array\
    \ if x <= paren_array[23]]\n    paren_array = [x for x in paren_array if x <=\
    \ paren_array[24]]\n    paren_array = [x for x in paren_array if x <= paren_array[25]]\n\
    \    paren_array = [x for x in paren_array if x <= paren_array[26]]\n    paren_array\
    \ = [x for x in paren_array if x <= paren_array[27]]\n    paren_array", "    paren_groups\
    \ = split(paren_string, \" \")\n    paren_groups = filter(x -> x != \"\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"()\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"[]\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()()()\", paren_groups)\n    paren_groups = filter(x -> x != \"\
    {}[]()()()()()\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()()\"\
    , paren_groups)\n    ", "    paren_string = paren_string.trim()\n    paren_string\
    \ = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"[]\")\n\
    \    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren", "    paren_string\
    \ = paren_string.trim()\n    paren_string = paren_string.strip(\"()\")\n    paren_string\
    \ = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"{}\")\n\
    \    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]()\")\n    paren_string = paren_string.strip(\"{}[]()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()\")\n   \
    \ paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n    paren_string =\
    \ paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")",
  "    paren_groups = split(paren_string, \" \")\n    paren_groups = filter(x -> x\
    \ != \"\", paren_groups)\n    paren_groups = filter(x -> x != \")\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n", "    paren_groups = split(paren_string,\
    \ \" \")\n    paren_groups = filter(x -> x != \"\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"()\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}[]()[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()()()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()()()()()\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}[]()[]()()()()()()\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}[]()[]()()()()()()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()()()()()()()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()()()()()()()()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()()()()()()()()()()()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()()()()()()()()()()()()\", paren_groups)\n   \
    \ paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()", "    paren_array\
    \ = paren_string.split(\" \")\n    paren_array = [Int64(x) for x in paren_array]\n\
    \    paren_array = [x for x in paren_array if x > 0]\n    paren_array = [x for\
    \ x in paren_array if x < paren_array.length]\n    paren_array = [x for x in paren_array\
    \ if x == paren_array.length]\n    paren_array = [x for x in paren_array if x\
    \ == 0]\n    return paren_array\nend", "    paren_string = paren_string.trim()\n\
    \    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    []\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}[]\")\n    paren_string = paren_string.strip(\"{}[]()\")\n    paren_string =\
    \ paren_string.strip(\"{}[]()()\")\n    paren_string = paren_string.strip(\"{}[]()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()\")\n    paren_string =\
    \ paren_string.strip(\"{}[]()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()()()()()\"\
    )\n    paren_string = paren", "    paren_stack = Vector{Int64}()\n    paren_stack\
    \ = paren_string.split(\" \") |> collect{|x| x.to_i}\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[", "    paren_string\
    \ = paren_string.trim()\n    paren_levels = Vector{Int64}()\n    paren_level =\
    \ 0\n    paren_levels = paren_levels\n    paren_levels = paren_levels\n    paren_levels\
    \ = paren_levels\n    paren_levels = paren_levels\n    paren_levels = paren_levels\n\
    \    paren_levels = paren_levels\n    paren_levels = paren_levels\n    paren_levels\
    \ = paren_levels\n    paren_levels = paren_levels\n    paren_levels = paren_levels\n\
    \    paren_levels = paren_levels\n    paren_levels = paren_levels\n    paren_levels\
    \ = paren_levels\n    paren_levels = paren_levels\n    paren_levels = paren_levels\n\
    \    paren_levels = paren_levels\n    paren_levels = paren_levels\n    paren_levels\
    \ = paren_levels\n    paren_levels = paren_levels\n    paren_levels = paren_levels\n\
    \    paren_levels = paren_levels\n    paren_levels = paren_levels\n    paren_levels\
    \ = paren_levels\n    paren_levels = paren_levels\n    paren_levels = paren_levels\n\
    \    paren_levels = paren_levels\n    paren_levels = paren_levels\n    paren_levels\
    \ = paren_levels\n    paren_levels = paren_levels\n    paren_levels = paren_levels\n\
    \    paren_levels = paren_levels\n    paren_levels = paren_levels\n    paren_levels\
    \ = paren_levels\n    paren_levels = paren_levels\n    paren_levels = paren_levels\n\
    \    paren_levels = paren_levels\n    paren_levels = paren_levels\n    paren_levels\
    \ = paren_levels\n    paren_levels = paren_levels\n    paren_levels = paren_levels\n\
    \    paren_levels = paren_levels\n    paren_levels = paren_levels\n    paren_levels\
    \ = paren_levels\n    paren_levels = paren_levels\n    paren_levels = paren_levels\n\
    \    paren_levels = paren_levels\n    paren_levels = paren_levels\n    paren_levels\
    \ = paren_levels\n    paren_level", "    paren_groups = split(paren_string, \"\
    \ \")\n    paren_groups = filter(x -> x != \"\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"()\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}[]()()\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()()()()()()\", paren_groups)\n \
    \   paren_groups = filter(x -> x != \"{}[]()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()()\"\
    , paren_groups)\n    ", "    paren_vec = paren_string.split(\" \")\n    paren_vec\
    \ = paren_vec[1..end-1]\n    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec\
    \ = paren_vec[paren_vec .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"\
    ]\"]\n    paren_vec = paren_vec[paren_vec .!= \")\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \")\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= ", "    paren_levels::Vector{Int64}\
    \ = Vector{Int64}()\n    paren_levels::Vector{Int64} = []\n    paren_levels::Vector{Int64}\
    \ = [paren_levels[1]] \n    for paren in paren_string\n        if paren == '('\n\
    \            paren_levels::Vector{Int64} = [paren_levels[1] + 1]\n        elseif\
    \ paren == ')'\n            paren_levels::Vector{Int64} = [paren_levels[end] +\
    \ 1]\n        elseif paren == '['\n            paren_levels::Vector{Int64} = [paren_levels[end]\
    \ + 1]\n        elseif paren == ']'\n            paren_levels::Vector{Int64} =\
    \ [paren_levels[end] + 1]\n        elseif paren == '{'\n            paren_levels::Vector{Int64}\
    \ = [paren_levels[end] + 1]\n        elseif paren == '}'\n            paren_levels::Vector{Int64}\
    \ = [paren_levels[end] + 1]\n        else\n            paren_levels::Vector{Int64}\
    \ = [paren_levels[end] + 1]\n        end\n    end\n    return paren_levels\nend",
  "    paren_stack = Vector{Int64}()\n    paren_stack = paren_string.split(\" \")\
    \ |> collect{|x| x.to_i}\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack\nend", "    paren_levels = Vector{Int64}()\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n", " \
    \   paren_string = paren_string.trim()\n    paren_levels = Vector{Int64}()\n \
    \   paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = ", "    paren_groups = split(paren_string,\
    \ \" \")\n    levels = Vector{Int64}()\n    for paren_group in paren_groups\n\
    \        paren_group_levels = parse_nested_parens(paren_group)\n        push!(levels,\
    \ paren_group_levels)\n    end\n    return levels\nend", "    paren_groups = paren_string.split(\"\
    \ \")\n    paren_groups = [paren_groups[i] for i in range(1,length(paren_groups))\
    \ if paren_groups[i]!=\"\"]\n    paren_groups = [paren_groups[i] for i in range(1,length(paren_groups))\
    \ if paren_groups[i]!=\"\"]\n    paren_groups = [paren_groups[i] for i in range(1,length(paren_groups))\
    \ if paren_groups[i]!=\"\"]\n    paren_groups = [paren_groups[i] for i in range(1,length(paren_groups))\
    \ if paren_groups[i]!=\"\"]\n    paren_groups = [paren_groups[i] for i in range(1,length(paren_groups))\
    \ if paren_groups[i]!=\"\"]\n    paren_groups = [paren_groups[i] for i in range(1,length(paren_groups))\
    \ if paren_groups[i]!=\"\"]\n    paren_groups = [paren_groups[i] for i in range(1,length(paren_groups))\
    \ if paren_groups[i]!=\"\"]\n    paren_groups = [paren_groups[i] for i in range(1,length(paren_groups))\
    \ if paren_groups[i]!=\"\"]\n    paren_groups = [paren_groups[i] for i in range(1,length(paren_groups))\
    \ if paren_groups[i]!=\"\"]\n    paren_groups = [paren_groups[i] for i in range(1,length(paren_groups))\
    \ if paren_groups[i]!=\"\"]\n    paren_groups = [paren_groups[i] for i in range(1,length(paren_groups))\
    \ if paren_groups[i]!=\"\"]\n    paren_groups = [paren_groups[i] for i in range(1,length(paren_groups))\
    \ if paren_groups[i]!=\"\"]\n    paren_groups = [paren_groups[i] for i in range(1,length(paren_groups))\
    \ if paren_groups[i]!=\"\"]\n    paren_groups = [paren_groups[i] for i in range(1,length(paren_groups))\
    \ if paren_groups[i]!=\"\"]\n    paren_groups = [paren_groups[i] for i in range(1,length(paren_groups))\
    \ if paren_groups[i]!=\"\"]\n    paren_groups = [paren_groups[i] for i in range(1,length(paren_groups))\
    \ if paren_groups[i]!=\"\"]\n    paren_groups = [paren_groups[i] for i in range(1,length(paren_groups))\
    \ if paren_groups[i]!=\"\"]\n    paren_groups = [paren_groups[i] for i in range(1,length(paren_groups))\
    \ if paren_groups[i]!=\"\"]\n    paren_groups = [paren_groups[i] for i in range(1,length(paren_groups))\
    \ if paren_groups[i]!=\"\"]\n    paren_groups = [paren_groups[i] for i in range(1,length(paren_groups))\
    \ if paren_groups[i]!=\"\"]\n    paren", "    paren_string = paren_string.trim()\n\
    \    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    []\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}[]\")\n    paren_string = paren_string.strip(\"{}[]()\")\n    paren_string =\
    \ paren_string.strip(\"{}[]()()\")\n    paren_string = paren_string.strip(\"{}[]()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()\")\n    paren_string =\
    \ paren_string.strip(\"{}[]()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n\
    \    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n  \
    \  paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n\
    \    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n\
    \    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n\
    \    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n\
    \    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()()",
  "    paren_groups = split(paren_string, \" \")\n    paren_levels = Vector{Int64}()\n\
    \    for paren_group in paren_groups\n        paren_level = 0\n        for paren\
    \ in paren_group\n            if paren == \"(\"\n                paren_level +=\
    \ 1\n            elseif paren == \")\"\n                paren_level -= 1\n   \
    \         else\n                paren_level += paren_level\n            end\n\
    \        end\n        paren_levels[paren_level] += 1\n    end\n    paren_levels\n\
    end", "    paren_vec = paren_string.split(\" \")\n    paren_vec = paren_vec[1..end]\n\
    \    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \")\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \")\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]", "    paren_vec = paren_string.split(\" \")\n \
    \   paren_vec = paren_vec[1 : end]\n    paren_vec = paren_vec[1 : end]\n    paren_vec\
    \ = paren_vec[1 : end]\n    paren_vec = paren_vec[1 : end]\n    paren_vec = paren_vec[1\
    \ : end]\n    paren_vec = paren_vec[1 : end]\n    paren_vec = paren_vec[1 : end]\n\
    \    paren_vec = paren_vec[1 : end]\n    paren_vec = paren_vec[1 : end]\n    paren_vec\
    \ = paren_vec[1 : end]\n    paren_vec = paren_vec[1 : end]\n    paren_vec = paren_vec[1\
    \ : end]\n    paren_vec = paren_vec[1 : end]\n    paren_vec = paren_vec[1 : end]\n\
    \    paren_vec = paren_vec[1 : end]\n    paren_vec = paren_vec[1 : end]\n    paren_vec\
    \ = paren_vec[1 : end]\n    paren_vec = paren_vec[1 : end]\n    paren_vec = paren_vec[1\
    \ : end]\n    paren_vec = paren_vec[1 : end]\n    paren_vec = paren_vec[1 : end]\n\
    \    paren_vec = paren_vec[1 : end]\n    paren_vec = paren_vec[1 : end]\n    paren_vec\
    \ = paren_vec[1 : end]\n    paren_vec = paren_vec[1 : end]\n    paren_vec = paren_vec[1\
    \ : end]\n    paren_vec = paren_vec[1 : end]\n    paren_vec = paren_vec[1 : end]\n\
    \    paren_vec = paren_vec[1 : end]\n    paren_vec = paren_vec[1 : end]\n    paren_vec\
    \ = paren_vec[1 : end]\n    paren_vec = paren_vec[1 : end]\n    paren_vec = paren_vec[1\
    \ : end]\n    paren_vec = paren_vec[1 : end]\n    paren_vec = paren_vec[1 : end]\n\
    \    paren_vec = paren_vec[1 : end]\n    paren_vec = paren_vec[1 : end]\n    paren_vec\
    \ = paren_vec[1 : end]\n    paren_vec = paren_vec[1 : end]\n    paren_vec = paren_vec[1\
    \ : end]\n    paren_vec = paren_vec[1 : end]\n    paren_vec = paren_vec[1 : end]\n\
    \    paren_vec = paren_vec[1 : end]\n    paren_vec = paren_vec[1 : end]\n    paren_vec\
    \ = paren_vec[1 : end]\n    paren_vec = paren_vec[", "    paren_groups = split(paren_string,\
    \ \" \")\n    paren_groups = filter(x -> x != \"\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"()\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}[]()[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()()()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()()()()()\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}[]()[]()()()()()()\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}[]()[]()()()()()()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()()()()()()()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()()()()()()()()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()()()()()()()()()()()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()()()()()()()()()()()()\", paren_groups)\n   \
    \ paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()", "    paren_array\
    \ = paren_string.split(\" \")\n    paren_array_size = length(paren_array)\n  \
    \  paren_array_max = 0\n    for paren_array_index in range(paren_array_size)\n\
    \        if paren_array[paren_array_index] == \")\"\n            paren_array_max\
    \ = paren_array_max+1\n        end\n    end\n    \n    parsed_paren_array = zeros(paren_array_max)\n\
    \    for paren_array_index in range(paren_array_size)\n        if paren_array[paren_array_index]\
    \ == \")\"\n            parsed_paren_array[paren_array_index] = paren_array_max\n\
    \        end\n    end\n    return parsed_paren_array\nend", "    paren_stack =\
    \ Vector{Int64}()\n    paren_stack = paren_string.split(\" \") |> collect{|x|\
    \ x.to_i}\n    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[", "    paren_string = paren_string.trim()\n  \
    \  paren_array = paren_string.split(\" \")\n    paren_array_size = length(paren_array)\n\
    \    paren_array_max = 0\n    for paren_array_index in 1:paren_array_size\n  \
    \      if paren_array[paren_array_index] != \"()\"\n            paren_array_max\
    \ = paren_array_max+1\n        end\n    end\n    paren_array_max = paren_array_max+1\n\
    \    paren_array_max\nend", "    paren_array = paren_string.split(\" \")\n   \
    \ paren_array = [Int64(x) for x in paren_array]\n    paren_array = [x for x in\
    \ paren_array if x > 0]\n    paren_array = [x for x in paren_array if x <= paren_array[1]]\n\
    \    paren_array = [x for x in paren_array if x <= paren_array[2]]\n    paren_array\
    \ = [x for x in paren_array if x <= paren_array[3]]\n    paren_array = [x for\
    \ x in paren_array if x <= paren_array[4]]\n    paren_array = [x for x in paren_array\
    \ if x <= paren_array[5]]\n    paren_array = [x for x in paren_array if x <= paren_array[6]]\n\
    \    paren_array = [x for x in paren_array if x <= paren_array[7]]\n    paren_array\
    \ = [x for x in paren_array if x <= paren_array[8]]\n    paren_array = [x for\
    \ x in paren_array if x <= paren_array[9]]\n    paren_array = [x for x in paren_array\
    \ if x <= paren_array[10]]\n    paren_array = [x for x in paren_array if x <=\
    \ paren_array[11]]\n    paren_array = [x for x in paren_array if x <= paren_array[12]]\n\
    \    paren_array = [x for x in paren_array if x <= paren_array[13]]\n    paren_array\
    \ = [x for x in paren_array if x <= paren_array[14]]\n    paren_array = [x for\
    \ x in paren_array if x <= paren_array[15]]\n    paren_array = [x for x in paren_array\
    \ if x <= paren_array[16]]\n    paren_array = [x for x in paren_array if x <=\
    \ paren_array[17]]\n    paren_array = [x for x in paren_array if x <= paren_array[18]]\n\
    \    paren_array = [x for x in paren_array if x <= paren_array[19]]\n    paren_array\
    \ = [x for x in paren_array if x <= paren_array[20]]\n    paren_array = [x for\
    \ x in paren_array if x <= paren_array[21]]\n    paren_array = [x for x in paren_array\
    \ if x <= paren_array[22]]\n    paren_array = [x for x in paren_array if x <=\
    \ paren_array[23]]\n    paren_array = [x for x in paren_array if x <= paren_array[24]]\n\
    \    paren_array = [x for x in paren_array if x <= paren_array[25]]\n    paren_array\
    \ = [x for x in paren_array if x <= paren_array[26]]\n    paren_array = [x for\
    \ x in paren_array if x <= paren_array[27]]\n    paren_array = [x for x in paren_array\
    \ if x <= paren_array[28]]\n    ", "    paren_stack = Vector{Int64}()\n    paren_stack\
    \ = paren_string.split(\" \")\n    paren_stack = paren_stack[1..end]\n    paren_stack\
    \ = paren_stack[paren_stack.length-1]\n    paren_stack = paren_stack.split(')')\n\
    \    paren_stack = paren_stack[1..end]\n    paren_stack = paren_stack[paren_stack.length-1]\n\
    \    paren_stack = paren_stack.split(')')\n    paren_stack = paren_stack[1..end]\n\
    \    paren_stack = paren_stack[paren_stack.length-1]\n    paren_stack = paren_stack.split(')')\n\
    \    paren_stack = paren_stack[1..end]\n    paren_stack = paren_stack[paren_stack.length-1]\n\
    \    paren_stack = paren_stack.split(')')\n    paren_stack = paren_stack[1..end]\n\
    \    paren_stack = paren_stack[paren_stack.length-1]\n    paren_stack = paren_stack.split(')')\n\
    \    paren_stack = paren_stack[1..end]\n    paren_stack = paren_stack[paren_stack.length-1]\n\
    \    paren_stack = paren_stack.split(')')\n    paren_stack = paren_stack[1..end]\n\
    \    paren_stack = paren_stack[paren_stack.length-1]\n    paren_stack = paren_stack.split(')')\n\
    \    paren_stack = paren_stack[1..end]\n    paren_stack = paren_stack[paren_stack.length-1]\n\
    \    paren_stack = paren_stack.split(')')\n    paren_stack = paren_stack[1..end]\n\
    \    paren_stack = paren_stack[paren_stack.length-1]\n    paren_stack = paren_stack.split(')')\n\
    \    paren_stack = paren_stack[1..end]\n    paren_stack = paren_stack[paren_stack.length-1]\n\
    \    paren_stack = paren_stack.split(')')\n    paren_stack = paren_stack[1..end]\n\
    \    paren_stack = paren_stack[paren_stack.length-1]\n    paren_stack = paren_stack.split(')')\n\
    \    paren_stack = paren_stack[1..end]\n    paren_stack = paren_stack[paren_stack.length-1]\n\
    \    paren_stack = paren_stack.split(')')\n    paren_stack = paren_stack[1..end]\n\
    \    paren_stack = paren_stack[", "    paren_vec = paren_string.split(\" \")\n\
    \    paren_vec = paren_vec[1..end-1]\n    paren_vec = paren_vec[paren_vec .!=\
    \ \"\"]\n    paren_vec = paren_vec[paren_vec .!= \" \"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \")\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"](\"]\n    paren_vec = paren_vec[paren_vec .!= \"\
    )(\"]\n    paren_vec = paren_vec[paren_vec .!= \")(\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \")(\"]\n    paren_vec = paren_vec[paren_vec .!= \")(\"]\n    paren_vec\
    \ = paren_vec[paren_vec .!= \")(\"]\n    paren_vec = paren_vec[paren_vec .!= \"\
    )(\"]\n    paren_vec = paren_vec[paren_vec .!= \")(\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \")(\"]\n    paren_vec = paren_vec[paren_vec .!= \")(\"]\n    paren_vec\
    \ = paren_vec[paren_vec .!= \")(\"]\n    paren_vec = paren_vec[paren_vec .!= \"\
    )(\"]\n    paren_vec = paren_vec[paren_vec .!= \")(\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \")(\"]\n    paren_vec = paren_vec[paren_vec .!= \")(\"]\n    paren_vec\
    \ = paren_vec[paren_vec .!= \")(\"]\n    paren_vec = paren_vec[paren_vec .!= \"\
    )(\"]\n    paren_vec = paren_vec[paren_vec .!= \")(\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \")(\"]\n    paren_vec = paren_vec[paren_vec .!= \")(\"]\n    paren_vec\
    \ = paren_vec[paren_vec .!= \")(\"]\n    paren_vec = paren_vec[paren_vec .!= \"\
    )(\"]\n    paren_vec = paren_vec[paren_vec .!= \")(\"]\n    paren_vec = paren_vec[",
  "    paren_array = paren_string.split(\" \")\n    paren_array = [Int64(x) for x\
    \ in paren_array]\n    paren_array = [x for x in paren_array if x != 0]\n    paren_array\
    \ = [x for x in paren_array if x > 0]\n    paren_array = [x for x in paren_array\
    \ if x <= paren_array.length]\n    paren_array = [x for x in paren_array if x\
    \ > 0]\n    paren_array = [x for x in paren_array if x <= paren_array.length]\n\
    \    paren_array = [x for x in paren_array if x > 0]\n    paren_array = [x for\
    \ x in paren_array if x <= paren_array.length]\n    paren_array = [x for x in\
    \ paren_array if x > 0]\n    paren_array = [x for x in paren_array if x <= paren_array.length]\n\
    \    paren_array = [x for x in paren_array if x > 0]\n    paren_array = [x for\
    \ x in paren_array if x <= paren_array.length]\n    paren_array = [x for x in\
    \ paren_array if x > 0]\n    paren_array = [x for x in paren_array if x <= paren_array.length]\n\
    \    paren_array = [x for x in paren_array if x > 0]\n    paren_array = [x for\
    \ x in paren_array if x <= paren_array.length]\n    paren_array = [x for x in\
    \ paren_array if x > 0]\n    paren_array = [x for x in paren_array if x <= paren_array.length]\n\
    \    paren_array = [x for x in paren_array if x > 0]\n    paren_array = [x for\
    \ x in paren_array if x <= paren_array.length]\n    paren_array = [x for x in\
    \ paren_array if x > 0]\n    paren_array = [x for x in paren_array if x <= paren_array.length]\n\
    \    paren_array = [x for x in paren_array if x > 0]\n    paren_array = [x for\
    \ x in paren_array if x <= paren_array.length]\n    paren_array = [x for x in\
    \ paren_array if x > 0]\n    paren_array = [x for x in paren_array if x <= paren_array.length]\n\
    \    paren_array = [x for x in paren_array if x > 0]\n    paren_array = [x for\
    \ x in paren_array if x <= paren_array.length]\n    paren_array = [x for x in\
    \ paren_array if x > 0]\n    paren_array = [x for x in paren_array if x <= paren_array.length]\n\
    \    paren_array = [x for x in paren_array if x > 0]\n    paren_array = [x for\
    \ x in paren_array if x <= paren_array.length]\n    paren_array = [x for x in\
    \ paren_array if x > 0]\n    paren_array = [x for x in paren_array if x <= paren_",
  "    paren_groups = split(paren_string, \" \")\n    paren_groups = filter(x -> x\
    \ != \"\", paren_groups)\n    paren_groups = filter(x -> x != \"()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"[]\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()()\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()[]()()()\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()()()[]\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()()()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()[]()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()[]()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()[]()()()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()[]()()()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()[]()()()[]()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()[]()()()[]()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()[]()()()[]()()()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()[]()()()[]()()()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()[]()()()[]()()()[]", "  \
    \  paren_string = paren_string.trim()\n    paren_array = paren_string.split(\"\
    \\\\s\")\n    paren_array_size = length(paren_array)\n    paren_array_size = paren_array_size\
    \ - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size = paren_array_size\
    \ - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size = paren_array_size\
    \ - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size = paren_array_size\
    \ - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size = paren_array_size\
    \ - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size = paren_array_size\
    \ - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size = paren_array_size\
    \ - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size = paren_array_size\
    \ - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size = paren_array_size\
    \ - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size = paren_array_size\
    \ - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size = paren_array_size\
    \ - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size = paren_array_size\
    \ - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size = paren_array_size\
    \ - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size = paren_array_size\
    \ - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size = paren_array_size\
    \ - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size = paren_array_size\
    \ - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size = paren_array_size\
    \ - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size = paren_array_size\
    \ - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size = paren_array_size\
    \ - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size = paren_array_size\
    \ - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size = paren_array_size\
    \ - 1\n    paren_array_size = paren_array_size - 1\n    paren_array_size = paren_array_size\
    \ - 1\n    paren_array_size = paren_array_", "    paren_stack = Vector{Int64}()\n\
    \    paren_stack = paren_string.split(\" \")\n    paren_stack = paren_stack[1\
    \ .. end]\n    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1\
    \ .. end]\n    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1\
    \ .. end]\n    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1\
    \ .. end]\n    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1\
    \ .. end]\n    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1\
    \ .. end]\n    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1\
    \ .. end]\n    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1\
    \ .. end]\n    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1\
    \ .. end]\n    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1\
    \ .. end]\n    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1\
    \ .. end]\n    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1\
    \ .. end]\n    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1\
    \ .. end]\n    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1\
    \ .. end]\n    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1\
    \ .. end]\n    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1\
    \ .. end]\n    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1\
    \ .. end]\n    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1\
    \ .. end]\n    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1\
    \ .. end]\n    paren_stack = paren_stack[", "    paren_string = paren_string.trim()\n\
    \    paren_groups = split(paren_string, \" \")\n    paren_groups = filter(x ->\
    \ x != \"\", paren_groups)\n    paren_groups = filter(x -> x != \"()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"[]\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()[]\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()[]()[]()\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]", "    paren_groups = split(paren_string,\
    \ \" \")\n    paren_groups = filter(x -> x != \"\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"()\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}[]()[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()[]()[]\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()[]()[]()\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}[]()[]()[]()[]()[]\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}[]()[]()[]()[]()[]()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()[]()[]()[]()[]\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()[]()[]()[]()[]()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()[]()[]()[]()[]()[]\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]\", paren_groups)\n   \
    \ paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]", "  \
    \  paren_array = paren_string.split(\" \")\n    paren_array_size = length(paren_array)\n\
    \    paren_array_max = 0\n    for paren_array_index in 1:paren_array_size\n  \
    \      paren_array_max = max(paren_array_max, length(paren_array[paren_array_index]))\n\
    \    end\n    paren_array_max = paren_array_max + 1\n    paren_array_max\nend",
  "    paren_groups = paren_string.split(\" \")\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:", "    paren_vec = paren_string.split(\" \"\
    )\n    paren_vec = paren_vec[1..end]\n    paren_vec = paren_vec[paren_vec .!=\
    \ \"\"]\n    paren_vec = paren_vec[paren_vec .!= \" \"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \")\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \")\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]", "    paren_array =\
    \ paren_string.split(' ')\n    paren_array = [Int64(x) for x in paren_array]\n\
    \    paren_array = [x for x in paren_array if x > 0]\n    paren_array = [x for\
    \ x in paren_array if x <= paren_array.length]\n    paren_array = [paren_array[x-1]\
    \ for x in paren_array]\n    return paren_array\nend", "    paren_string = paren_string.trim()\n\
    \    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    []\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}[]\")\n    paren_string = paren_string.strip(\"{}[]()\")\n    paren_string =\
    \ paren_string.strip(\"{}[]()()\")\n    paren_string = paren_string.strip(\"{}[]()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()\")\n    paren_string =\
    \ paren_string.strip(\"{}[]()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n\
    \    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n  \
    \  paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}", "    paren_vec = paren_string.split(\"\
    \ \")\n    paren_vec = paren_vec[1..end]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"\"]\n    paren_vec = paren_vec[paren_vec .!= \" \"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"\"]\n    paren_vec = paren_vec[paren_vec .!= \" \"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"\"]\n    paren_vec = paren_vec[paren_vec .!= \" \"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"\"]\n    paren_vec = paren_vec[paren_vec .!= \" \"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"\"]\n    paren_vec = paren_vec[paren_vec .!= \" \"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"\"]\n    paren_vec = paren_vec[paren_vec .!= \" \"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"\"]\n    paren_vec = paren_vec[paren_vec .!= \" \"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"\"]\n    paren_vec = paren_vec[paren_vec .!= \" \"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"\"]\n    paren_vec = paren_vec[paren_vec .!= \" \"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"\"]\n    paren_vec = paren_vec[paren_vec .!= \" \"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"\"]\n    paren_vec = paren_vec[paren_vec .!= \" \"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"\"]\n    paren_vec = paren_vec[paren_vec .!= \" \"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"\"]\n    paren_vec = paren_vec[paren_vec .!= \" \"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"\"]\n    paren_vec = paren_vec[paren_vec .!= \" \"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"\"", "    paren_array = paren_string.split(\" \")\n    paren_array_size\
    \ = length(paren_array)\n    paren_array_max = 0\n    for paren_level in paren_array\n\
    \        if paren_level == \"(\"\n            paren_array_max = max(paren_array_max,\
    \ paren_array_size+1)\n        elseif paren_level == \")\"\n            paren_array_max\
    \ = max(paren_array_max, paren_array_size-1)\n        end\n    end\n    paren_array_max\
    \ = max(paren_array_max, 1)\n    paren_array_size = paren_array_max\n    paren_array\
    \ = []\n    for paren_level in paren_array\n        if paren_level == \"(\"\n\
    \            paren_array_size = paren_array_size + 1\n        elseif paren_level\
    \ == \")\"\n            paren_array_size = paren_array_size - 1\n        end\n\
    \        paren_array = [paren_array_size] + paren_array\n    end\n    return paren_array\n\
    end", "    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]()\")\n    paren_string = paren_string.strip(\"{}[]()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()\")\n   \
    \ paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()", "    paren_groups = split(paren_string,\
    \ \" \")\n    parsed_parens = Vector{Int64}()\n    for paren_group in paren_groups\n\
    \        paren_group_split = split(paren_group, \")\")\n        parsed_parens\
    \ = parsed_parens + paren_group_split\n    end\n    return parsed_parens\nend",
  "    paren_stack = Vector{Int64}()\n    paren_stack = paren_string.split(\" \")\
    \ |> collect{|x| x.to_i}\n    paren_stack = paren_stack[1..-1]\n    paren_stack\n\
    end", "    paren_groups = split(paren_string, \" \")\n    paren_levels = Vector{Int64}()\n\
    \    for paren_group in paren_groups\n        paren_level = 0\n        for paren\
    \ in paren_group\n            if paren == \"(\"\n                paren_level +=\
    \ 1\n            elseif paren == \")\"\n                paren_level -= 1\n   \
    \         end\n        end\n        paren_levels[paren_level] += 1\n    end\n\
    \    return paren_levels\nend", "    paren_groups = split(paren_string, \" \"\
    )\n    paren_groups = filter(x -> x != \"\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"()\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}[]()()\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()()()()()()\", paren_groups)\n \
    \   paren_groups = filter(x -> x != \"{}[]()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()()\"\
    , paren_groups)\n    ", "    paren_groups = split(paren_string, \" \")\n    paren_groups\
    \ = filter(x -> x != \"\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"()\", paren_groups)\n    paren_groups = filter(x -> x != \"[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}[]\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()[]()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()[]()[]\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}[]()[]()[]()[]()\", paren_groups)\n    paren_groups = filter(x -> x\
    \ != \"{}[]()[]()[]()[]()[]\", paren_groups)\n    paren_groups = filter(x -> x\
    \ != \"{}[]()[]()[]()[]()[]()\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}[]()[]()[]()[]()[]()[]\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()[]()[]()[]()[]()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()[]()[]()[]()[]()[]\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]\", paren_groups)\n   \
    \ paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]", "  \
    \  paren_vec = paren_string.split(\" \")\n    paren_vec = paren_vec[1..end]\n\
    \    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \")\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \")\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]", "    paren_stack = Vector{Int64}()\n    paren_stack\
    \ = paren_string.split(\" \") # split on space\n    paren_stack = paren_stack[end-1:end]\
    \ # remove last element which is empty\n    paren_stack = paren_stack[end-1:end]\
    \ # remove last element which is empty\n    paren_stack = paren_stack[end-1:end]\
    \ # remove last element which is empty\n    paren_stack = paren_stack[end-1:end]\
    \ # remove last element which is empty\n    paren_stack = paren_stack[end-1:end]\
    \ # remove last element which is empty\n    paren_stack = paren_stack[end-1:end]\
    \ # remove last element which is empty\n    paren_stack = paren_stack[end-1:end]\
    \ # remove last element which is empty\n    paren_stack = paren_stack[end-1:end]\
    \ # remove last element which is empty\n    paren_stack = paren_stack[end-1:end]\
    \ # remove last element which is empty\n    paren_stack = paren_stack[end-1:end]\
    \ # remove last element which is empty\n    paren_stack = paren_stack[end-1:end]\
    \ # remove last element which is empty\n    paren_stack = paren_stack[end-1:end]\
    \ # remove last element which is empty\n    paren_stack = paren_stack[end-1:end]\
    \ # remove last element which is empty\n    paren_stack = paren_stack[end-1:end]\
    \ # remove last element which is empty\n    paren_stack = paren_stack[end-1:end]\
    \ # remove last element which is empty\n    paren_stack = paren_stack[end-1:end]\
    \ # remove last element which is empty\n    paren_stack = paren_stack[end-1:end]\
    \ # remove last element which is empty\n    paren_stack = paren_stack[end-1:end]\
    \ # remove last element which is empty\n    paren_stack = paren_stack[end-1:end]\
    \ # remove last element which is empty\n    paren_stack = paren_stack[end-1:end]\
    \ # remove last element which is empty\n    paren_stack = paren_stack[end-1:end]\
    \ # remove last element which is empty\n    paren_stack = paren_stack[end-1:end]\
    \ # remove last element which is empty\n    paren_stack = paren_stack[end-1:end]\
    \ # remove last element which is empty\n    paren_stack = paren_stack[end-1:end]\
    \ # remove last element which is empty\n    paren_stack = paren_stack[end-1:end]\
    \ # remove last element which is empty\n    paren_stack = paren_stack[", "   \
    \ paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string", "    paren_levels = Vector{Int64}()\n\
    \    paren_level = 0\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 2\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 3\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 4\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 5\n    paren_levels[paren_level] = paren_level\n    paren_level = 6\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 7\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 8\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 9\n    paren_levels[paren_level] = paren_level\n    paren_level = 10\n   \
    \ paren_levels[paren_level] = paren_level\n    paren_level = 11\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 12\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 13\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 14\n    paren_levels[paren_level] = paren_level\n    paren_level = 15\n  \
    \  paren_levels[paren_level] = paren_level\n    paren_level = 16\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 17\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 18\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 19\n    paren_levels[paren_level] = paren_level\n    paren_level = 20\n  \
    \  paren_levels[paren_level] = paren_level\n    paren_level = 21\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 22\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 23\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 24\n    paren_levels[paren_level] = paren_level\n    paren_level = 25\n  \
    \  paren_levels[paren_level] = paren_level\n    paren_level = 26\n", "    paren_string\
    \ = paren_string.trim()\n    paren_levels = Vector{Int64}()\n    paren_level =\
    \ 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = ", "    paren_vec = paren_string.split(\" \")\n    paren_vec = paren_vec[1..end]\n\
    \    paren_vec = paren_vec[paren_vec .!= \"\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \" \"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \")\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \")\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"\
    ]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec = paren_vec[paren_vec\
    \ .!= \"]\"]\n    paren_vec = paren_vec[paren_vec .!= \"]\"]\n    paren_vec =\
    \ paren_vec[paren_vec .!= \"]", "    paren_stack = Vector{Int64}()\n    paren_stack\
    \ = paren_string.split(\" \") |> collect{|x| x.to_i}\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack[1..-1]\n    paren_stack = paren_stack[", "    paren_string\
    \ = paren_string.trim()\n    paren_array = paren_string.split(\" \")\n    paren_array_size\
    \ = length(paren_array)\n    paren_array_max = 0\n    paren_array_index = 0\n\
    \    paren_array_max_index = 0\n    paren_array_max_value = 0\n    for paren_array_index\
    \ in 1:paren_array_size\n        paren_array_value = paren_array[paren_array_index]\n\
    \        if paren_array_value == \"(\"\n            paren_array_max += 1\n   \
    \     elseif paren_array_value == \")\"\n            if paren_array_max > paren_array_max_value\n\
    \                paren_array_max_value = paren_array_max\n                paren_array_max_index\
    \ = paren_array_index\n            end\n            paren_array_max -= 1\n   \
    \     end\n    end\n    paren_array_max_index\nend\n</cell>\n<code language=julia-1.5>",
  "    paren_groups = split(paren_string, \" \")\n    paren_groups = filter(x -> x\
    \ != \"\", paren_groups)\n    paren_groups = filter(x -> x != \")\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n", "    paren_level::Int64 = 0\n   \
    \ paren_stack::Vector{Int64} = Vector{Int64}()\n    paren_stack[paren_level] =\
    \ paren_level\n    paren_stack[paren_level + 1] = paren_level + 1\n    paren_stack[paren_level\
    \ + 2] = paren_level + 2\n    paren_stack[paren_level + 3] = paren_level + 3\n\
    \    paren_stack[paren_level + 4] = paren_level + 4\n    paren_stack[paren_level\
    \ + 5] = paren_level + 5\n    paren_stack[paren_level + 6] = paren_level + 6\n\
    \    paren_stack[paren_level + 7] = paren_level + 7\n    paren_stack[paren_level\
    \ + 8] = paren_level + 8\n    paren_stack[paren_level + 9] = paren_level + 9\n\
    \    paren_stack[paren_level + 10] = paren_level + 10\n    paren_stack[paren_level\
    \ + 11] = paren_level + 11\n    paren_stack[paren_level + 12] = paren_level +\
    \ 12\n    paren_stack[paren_level + 13] = paren_level + 13\n    paren_stack[paren_level\
    \ + 14] = paren_level + 14\n    paren_stack[paren_level + 15] = paren_level +\
    \ 15\n    paren_stack[paren_level + 16] = paren_level + 16\n    paren_stack[paren_level\
    \ + 17] = paren_level + 17\n    paren_stack[paren_level + 18] = paren_level +\
    \ 18\n    paren_stack[paren_level + 19] = paren_level + 19\n    paren_stack[paren_level\
    \ + 20] = paren_level + 20\n    paren_stack[paren_level + 21] = paren_level +\
    \ 21\n    paren_stack[paren_level + 22] = paren_level + 22\n    paren_stack[paren_level\
    \ + 23] = paren_level + 23\n    paren_stack[paren_level + 24] = paren_level +\
    \ 24\n    paren_stack[paren_level + 25] = paren_level + 25\n    paren_stack[paren_level\
    \ + 26] = paren_level + 26\n    paren_stack[paren_level + 27] = paren_level +\
    \ 27\n    paren_stack[paren_level + 28] = paren_level + 28\n    ", "    paren_string\
    \ = paren_string.trim()\n    paren_levels = Vector{Int64}()\n    paren_level =\
    \ 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = ", "    paren_levels = Vector{Int64}()\n    paren_level = 0\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 2\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 3\n    paren_levels[paren_level] = paren_level\n    paren_level = 4\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 5\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 6\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 7\n    paren_levels[paren_level] = paren_level\n    paren_level = 8\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 9\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 10\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 11\n    paren_levels[paren_level] = paren_level\n    paren_level = 12\n  \
    \  paren_levels[paren_level] = paren_level\n    paren_level = 13\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 14\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 15\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 16\n    paren_levels[paren_level] = paren_level\n    paren_level = 17\n  \
    \  paren_levels[paren_level] = paren_level\n    paren_level = 18\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 19\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 20\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 21\n    paren_levels[paren_level] = paren_level\n    paren_level = 22\n  \
    \  paren_levels[paren_level] = paren_level\n    paren_level = 23\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 24\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 25\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 26\n", "    paren_array = paren_string.split(\" \")\n    paren_array_size\
    \ = length(paren_array)\n    paren_array_max = 0\n    paren_array_max_index =\
    \ 0\n    for paren_array_index in 1:paren_array_size\n        if paren_array[paren_array_index]\
    \ == \")\"\n            paren_array_max = paren_array_max+1\n            if paren_array_max\
    \ > paren_array_max_index\n                paren_array_max_index = paren_array_index\n\
    \            end\n        end\n    end\n    paren_array_max_index\nend", "   \
    \ paren_groups = split(paren_string, \" \")\n    paren_groups = filter(x -> x\
    \ != \"\", paren_groups)\n    paren_groups = filter(x -> x != \"()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"[]\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()()()()()\", paren_groups)\n    paren_groups = filter(x -> x\
    \ != \"{}[]()()()()()()()\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()()()()()()()()\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()()()()()()()()()()\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}[]()()()()()()()()()()()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()()()()()()()()()()()()()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()()()()()()()()()()()()()()\", paren_groups)\n   \
    \ paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()()()()()()()()()()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()()()()()()()()()",
  "    paren_array = paren_string.split(\" \")\n    paren_array = [Int64(x) for x\
    \ in paren_array]\n    paren_array = [x for x in paren_array if x > 0]\n    paren_array\
    \ = [x for x in paren_array if x <= paren_array[1]]\n    paren_array = [x for\
    \ x in paren_array if x > paren_array[1]]\n    paren_array = [x for x in paren_array\
    \ if x <= paren_array[2]]\n    paren_array = [x for x in paren_array if x > paren_array[2]]\n\
    \    paren_array = [x for x in paren_array if x <= paren_array[3]]\n    paren_array\
    \ = [x for x in paren_array if x > paren_array[3]]\n    paren_array = [x for x\
    \ in paren_array if x <= paren_array[4]]\n    paren_array = [x for x in paren_array\
    \ if x > paren_array[4]]\n    paren_array = [x for x in paren_array if x <= paren_array[5]]\
    \ \n    paren_array = [x for x in paren_array if x > paren_array[5]] \n    paren_array\
    \ = [x for x in paren_array if x <= paren_array[6]]\n    paren_array = [x for\
    \ x in paren_array if x > paren_array[6]]\n    paren_array = [x for x in paren_array\
    \ if x <= paren_array[7]]\n    paren_array = [x for x in paren_array if x > paren_array[7]]\n\
    \    paren_array = [x for x in paren_array if x <= paren_array[8]]\n    paren_array\
    \ = [x for x in paren_array if x > paren_array[8]]\n    paren_array = [x for x\
    \ in paren_array if x <= paren_array[9]]\n    paren_array = [x for x in paren_array\
    \ if x > paren_array[9]]\n    paren_array = [x for x in paren_array if x <= paren_array[10]]\n\
    \    paren_array = [x for x in paren_array if x > paren_array[10]]\n    paren_array\
    \ = [x for x in paren_array if x <= paren_array[11]]\n    paren_array = [x for\
    \ x in paren_array if x > paren_array[11]]\n    paren_array = [x for x in paren_array\
    \ if x <= paren_array[12]]\n    paren_array = [x for x in paren_array if x > paren_array[12]]\n\
    \    paren_array = [x for x in paren_array if x <= paren_array[13]]\n    paren_array\
    \ = [x for x in paren_array if x > paren_array[13]]\n    paren_array = [x for\
    \ x in paren_array if x <= paren_array[14]]\n    paren_array = [x for x in paren_array\
    \ if x > paren_array[14]]\n    paren_", "    paren_stack = Vector{Int64}()\n \
    \   paren_stack = paren_string.split(\" \") |> collect{|x| x.to_i}\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[", "    paren_array = paren_string.split(\" \")\n    paren_array\
    \ = [Int64(elem) for elem in paren_array]\n    paren_array = [elem for elem in\
    \ paren_array if elem != 0]\n    paren_array = [elem for elem in paren_array if\
    \ elem != 0]\n    paren_array = [elem for elem in paren_array if elem != 0]\n\
    \    paren_array = [elem for elem in paren_array if elem != 0]\n    paren_array\
    \ = [elem for elem in paren_array if elem != 0]\n    paren_array = [elem for elem\
    \ in paren_array if elem != 0]\n    paren_array = [elem for elem in paren_array\
    \ if elem != 0]\n    paren_array = [elem for elem in paren_array if elem != 0]\n\
    \    paren_array = [elem for elem in paren_array if elem != 0]\n    paren_array\
    \ = [elem for elem in paren_array if elem != 0]\n    paren_array = [elem for elem\
    \ in paren_array if elem != 0]\n    paren_array = [elem for elem in paren_array\
    \ if elem != 0]\n    paren_array = [elem for elem in paren_array if elem != 0]\n\
    \    paren_array = [elem for elem in paren_array if elem != 0]\n    paren_array\
    \ = [elem for elem in paren_array if elem != 0]\n    paren_array = [elem for elem\
    \ in paren_array if elem != 0]\n    paren_array = [elem for elem in paren_array\
    \ if elem != 0]\n    paren_array = [elem for elem in paren_array if elem != 0]\n\
    \    paren_array = [elem for elem in paren_array if elem != 0]\n    paren_array\
    \ = [elem for elem in paren_array if elem != 0]\n    paren_array = [elem for elem\
    \ in paren_array if elem != 0]\n    paren_array = [elem for elem in paren_array\
    \ if elem != 0]\n    paren_array = [elem for elem in paren_array if elem != 0]\n\
    \    paren_array = [elem for elem in paren_array if elem != 0]\n    paren_array\
    \ = [elem for elem in paren_array if elem != 0]\n    paren_array = [elem for elem\
    \ in paren_array if elem != 0]\n    paren_array = [elem for elem in paren_array\
    \ if elem != 0]\n    paren_array = [elem for elem in paren_array if elem != 0]\n\
    \    paren_array = [elem for elem in paren_", "    paren_groups = split(paren_string,\
    \ \" \")\n    paren_groups = filter(x -> x != \"\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \")\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \")(\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \")(\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \")(\", paren_groups)\n    paren_groups = filter(x -> x != \")(\", paren_groups)\n",
  "    paren_stack = Vector{Int64}()\n    paren_stack = paren_string.split(\" \")\n\
    \    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1 .. end]\n\
    \    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1 .. end]\n\
    \    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1 .. end]\n\
    \    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1 .. end]\n\
    \    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1 .. end]\n\
    \    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1 .. end]\n\
    \    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1 .. end]\n\
    \    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1 .. end]\n\
    \    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1 .. end]\n\
    \    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1 .. end]\n\
    \    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1 .. end]\n\
    \    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1 .. end]\n\
    \    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1 .. end]\n\
    \    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1 .. end]\n\
    \    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1 .. end]\n\
    \    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1 .. end]\n\
    \    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1 .. end]\n\
    \    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[1 .. end]\n\
    \    paren_stack = paren_stack[1 .. end]\n    paren_stack = paren_stack[", " \
    \   paren_groups = paren_string.split(\" \")\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:", "    paren_levels = Vector{Int64}()\n  \
    \  paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n", " \
    \   paren_groups = paren_string.split(\" \")\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:", "    paren_string = paren_string.trim()\n\
    \    paren_groups = paren_string.split(\" \")\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n",
  "    paren_levels = Vector{Int64}()\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n", "    paren_groups = split(paren_string, \" \")\n    paren_groups\
    \ = filter(x -> x != \"\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"()\", paren_groups)\n    paren_groups = filter(x -> x != \"[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}[]\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"{}[]()\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()()()()\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}[]()[]()()()()()\", paren_groups)\n    paren_groups = filter(x -> x\
    \ != \"{}[]()[]()()()()()()\", paren_groups)\n    paren_groups = filter(x -> x\
    \ != \"{}[]()[]()()()()()()()\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}[]()[]()()()()()()()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()()()()()()()()()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()()()()()()()()()()()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()()()()()()()()()()()()\", paren_groups)\n   \
    \ paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()()()()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()()()()()()()()()()", "    paren_groups\
    \ = split(paren_string, \" \")\n    levels = Vector{Int64}()\n    for paren_group\
    \ in paren_groups\n        paren_groups = split(paren_group, \")\")\n        level\
    \ = 0\n        for paren_group in paren_groups\n            if paren_group ==\
    \ \"(\"\n                level += 1\n            elseif paren_group == \")\"\n\
    \                level -= 1\n            else\n                throw(ArgumentError(\"\
    Parentheses group is not balanced\"))\n        end\n        push!(levels, level)\n\
    \    end\n    return levels\nend\n</cell>\n<code language=julia-1.5>", "    paren_stack\
    \ = Vector{Int64}()\n    paren_stack = paren_string.split(' ').map(x -> parse(x))\
    \ |> collect\n    paren_stack = paren_stack[1..end]\n    paren_stack = paren_stack.map(x\
    \ -> max(paren_stack[x], paren_stack[x-1]))\nend\n</cell>\n<code language=julia-1.5>\n\
    parse_nested_parens(\"()()\")\n</cell>\n<code language=julia-1.5>\nparse_nested_parens(\"\
    ((()))\")\n</cell>\n<code language=julia-1.5>\nparse_nested_parens(\"(()())\"\
    )\n</cell>\n<code language=julia-1.5>\nparse_nested_parens(\"(()()())\")\n</cell>\n\
    <code language=julia-1.5>\nparse_nested_parens(\"((()())())\")\n</cell>\n<code\
    \ language=julia-1.5>\nparse_nested_parens(\"((()())())()\")\n</cell>\n<code language=julia-1.5>\n\
    parse_nested_parens(\"((()())())()()\")\n</cell>\n<code language=julia-1.5>\n\
    parse_nested_parens(\"((()())())()()()\")\n</cell>\n<code language=julia-1.5>\n\
    parse_nested_parens(\"((()())())()()()()\")\n</cell>\n<code language=julia-1.5>\n\
    parse_nested_parens(\"((()())())()()()()()()\")\n</cell>\n<code language=julia-1.5>\n\
    parse_nested_parens(\"((()())())()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()",
  "    paren_string = paren_string.trim()\n    paren_levels = Vector{Int64}()\n  \
    \  paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = ", "    paren_stack = Vector{Int64}()\n\
    \    paren_stack = paren_string.split(\" \") |> collect{|x| x.to_i}\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[", "    paren_stack = Vector{Int64}()\n    paren_stack = paren_string.split('\
    \ ').collect{|x| paren_stack.push(x)}\n    paren_stack = paren_stack[1..-1]\n\
    \    paren_stack = paren_stack.collect{|x| paren_stack.count(x)}\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack\nend", "    paren_groups = split(paren_string,\
    \ \" \")\n    paren_groups = filter(x -> x != \"\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"()\", paren_groups)\n    paren_groups = filter(x -> x !=\
    \ \"[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}[]()[]\", paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()\"\
    , paren_groups)\n    paren_groups = filter(x -> x != \"{}[]()[]()[]\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()[]()[]\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()[]()[]()\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}[]()[]()[]()[]()[]\", paren_groups)\n    paren_groups = filter(x ->\
    \ x != \"{}[]()[]()[]()[]()[]()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()[]()[]()[]()[]\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()[]()[]()[]()[]()\", paren_groups)\n    paren_groups = filter(x\
    \ -> x != \"{}[]()[]()[]()[]()[]()[]()[]\", paren_groups)\n    paren_groups =\
    \ filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()\", paren_groups)\n    paren_groups\
    \ = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]\", paren_groups)\n   \
    \ paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]()\", paren_groups)\n\
    \    paren_groups = filter(x -> x != \"{}[]()[]()[]()[]()[]()[]()[]()[]", "  \
    \  paren_string = paren_string.trim()\n    paren_levels = Vector{Int64}()\n  \
    \  paren_level = 0\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 2\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 3\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 4\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 5\n    paren_levels[paren_level] = paren_level\n    paren_level = 6\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 7\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 8\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 9\n    paren_levels[paren_level] = paren_level\n    paren_level = 10\n   \
    \ paren_levels[paren_level] = paren_level\n    paren_level = 11\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 12\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 13\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 14\n    paren_levels[paren_level] = paren_level\n    paren_level = 15\n  \
    \  paren_levels[paren_level] = paren_level\n    paren_level = 16\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 17\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 18\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 19\n    paren_levels[paren_level] = paren_level\n    paren_level = 20\n  \
    \  paren_levels[paren_level] = paren_level\n    paren_level = 21\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 22\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 23\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 24\n    paren_levels[paren_level] = paren_level\n    paren_level = 25\n  \
    \  paren_levels[paren_level] = ", "    paren_string = paren_string.trim()\n  \
    \  paren_stack = Vector{Int64}()\n    paren_stack = paren_stack + paren_string.count(\"\
    (\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + ",
  "    paren_array = paren_string.split(\" \")\n    paren_array_size = length(paren_array)\n\
    \    paren_array_max = 0\n    paren_array_index = 0\n    paren_array_level = 0\n\
    \    paren_array_max_level = 0\n    paren_array_max_level_paren_array = []\n \
    \   for paren_array_index in 1:paren_array_size\n        if paren_array[paren_array_index]\
    \ ~= \"(\"\n            paren_array_level = paren_array_level + 1\n        elseif\
    \ paren_array[paren_array_index] == \")\"\n            paren_array_level = paren_array_level\
    \ - 1\n            if paren_array_level == 0\n                paren_array_max_level\
    \ = paren_array_max_level + 1\n                if paren_array_max < paren_array_max_level\n\
    \                    paren_array_max = paren_array_max_level\n               \
    \     paren_array_max_level_paren_array = paren_array_index\n                end\n\
    \            end\n        end\n    end\n    paren_array_max_level_paren_array\
    \ = paren_array_max_level_paren_array + 1\n    paren_array_max_level_paren_array\
    \ = paren_array_max_level_paren_array - 1\n    paren_array_max_level_paren_array\
    \ = paren_array_max_level_paren_array - 1\n    paren_array_max_level_paren_array\
    \ = paren_array_max_level_paren_array - 1\n    paren_array_max_level_paren_array\
    \ = paren_array_max_level_paren_array - 1\n    paren_array_max_level_paren_array\
    \ = paren_array_max_level_paren_array - 1\n    paren_array_max_level_paren_array\
    \ = paren_array_max_level_paren_array - 1\n    paren_array_max_level_paren_array\
    \ = paren_array_max_level_paren_array - 1\n    paren_array_max_level_paren_array\
    \ = paren_array_max_level_paren_array - 1\n    paren_array_max_level_paren_array\
    \ = paren_array_max_level_paren_array - 1\n    paren_array_max_level_paren_array\
    \ = paren_array_max_level_paren_array - 1\n    paren_array_max_level_paren_array\
    \ = paren_array_max_level_paren_array - 1\n    paren_array_max_level_paren_array\
    \ = paren_array_max_level_paren_array - 1\n    paren_array_max_level_paren_array\
    \ = paren_array_max_level_paren_array - 1\n    paren_array_max_level_paren_array\
    \ = paren_array_max_level_paren_array - 1\n    paren_array_max_level_paren_array\
    \ = paren_array_max_level_paren_array - 1\n    paren_array_max_level_paren_array\
    \ = paren_array_max_level_paren_array - 1\n    paren_array_", "    paren_string\
    \ = paren_string.trim()\n    paren_chars = paren_string.chars()\n    paren_chars\
    \ = paren_chars.filter(x -> x != ')')\n    paren_chars = paren_chars.filter(x\
    \ -> x != '(')\n    paren_chars = paren_chars.filter(x -> x != ' ')\n    paren_chars\
    \ = paren_chars.filter(x -> x != '\\n')\n    paren_chars = paren_chars.filter(x\
    \ -> x != '\\t')\n    paren_chars = paren_chars.filter(x -> x != '\\r')\n    paren_chars\
    \ = paren_chars.filter(x -> x != '\\v')\n    paren_chars = paren_chars.filter(x\
    \ -> x != '\\0')\n    paren_chars = paren_chars.filter(x -> x != '\\0')\n    paren_chars\
    \ = paren_chars.filter(x -> x != '\\0')\n    paren_chars = paren_chars.filter(x\
    \ -> x != '\\0')\n    paren_chars = paren_chars.filter(x -> x != '\\0')\n    paren_chars\
    \ = paren_chars.filter(x -> x != '\\0')\n    paren_chars = paren_chars.filter(x\
    \ -> x != '\\0')\n    paren_chars = paren_chars.filter(x -> x != '\\0')\n    paren_chars\
    \ = paren_chars.filter(x -> x != '\\0')\n    paren_chars = paren_chars.filter(x\
    \ -> x != '\\0')\n    paren_chars = paren_chars.filter(x -> x != '\\0')\n    paren_chars\
    \ = paren_chars.filter(x -> x != '\\0')\n    paren_chars = paren_chars.filter(x\
    \ -> x != '\\0')\n    paren_chars = paren_chars.filter(x -> x != '\\0')\n    paren_chars\
    \ = paren_chars.filter(x -> x != '\\0')\n    paren_chars = paren_chars.filter(x\
    \ -> x != '\\0')\n    paren_chars = paren_chars.filter(x -> x != '\\0')\n    paren_chars\
    \ = paren_chars.filter(x -> x != '\\0')\n    paren_chars = paren_chars.filter(x\
    \ -> x != '\\0')\n    paren_chars = paren_chars.filter(x -> x != '\\0')\n    paren_chars\
    \ = paren_chars.filter(x -> x != '\\0')\n    paren_chars = paren_chars.filter(x\
    \ -> x != '\\0')\n"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
