language: jl
name: HumanEval_18_how_many_times
results:
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string\n        if substring\
    \ == c\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj040oxzc.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmpj040oxzc.jl:18\n  Expression: candidate(\"\
    xyxyxyx\", \"x\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj040oxzc.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj040oxzc.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpj040oxzc.jl:19\n  Expression: candidate(\"cacacacac\", \"\
    cac\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj040oxzc.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj040oxzc.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpj040oxzc.jl:20\n  Expression: candidate(\"john doe\", \"john\"\
    ) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj040oxzc.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj040oxzc.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659748221
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    if string == \"\" || substring == \"\"\n   \
    \     return 0\n    else\n        count = 0\n        for c in string\n       \
    \     if c == substring\n                count += 1\n            else\n      \
    \          count = 0\n        end\n        return count\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6y18e4pu.jl:3\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6y18e4pu.jl:1\n\
    in expression starting at /tmp/tmp6y18e4pu.jl:1\n"
  stdout: ''
  timestamp: 1659748220
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string\n        if c\
    \ == substring\n            count += 1\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvveosmo3.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmpvveosmo3.jl:18\n  Expression: candidate(\"\
    xyxyxyx\", \"x\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvveosmo3.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvveosmo3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpvveosmo3.jl:19\n  Expression: candidate(\"cacacacac\", \"\
    cac\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvveosmo3.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvveosmo3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpvveosmo3.jl:20\n  Expression: candidate(\"john doe\", \"john\"\
    ) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvveosmo3.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvveosmo3.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659748221
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string:\n        if\
    \ c == substring:\n            count += 1\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzk7r6msy.jl:6\nin expression starting at /tmp/tmpzk7r6msy.jl:6\n"
  stdout: ''
  timestamp: 1659748220
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for char in string\n\
    \        if char == substring[1]\n            count += 1\n        end\n    end\n\
    \    \n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpupf_usy5.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpupf_usy5.jl:22\n  Expression: candidate(\"\
    cacacacac\", \"cac\") == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpupf_usy5.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpupf_usy5.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     1      4\n"
  timestamp: 1659748221
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for char in string\n\
    \        if char == substring\n            count += 1\n        end\n    end\n\
    \    \n    return count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"The quick brown fox jumps over the lazy dog\", \"foxe\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"The quick brown fox jumps over the\
    \ lazy dog\", \"foxe\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"The quick brown fox jumps over the\
    \ lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"The quick brown fox jumps over the\
    \ lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"The quick brown fox jumps over the\
    \ lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"The quick brown fox jumps over the\
    \ lazy dog\", \"fox\")\n\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnc45uorw.jl:15\nin expression starting at\
    \ /tmp/tmpnc45uorw.jl:15\n"
  stdout: ''
  timestamp: 1659748220
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for c in string:\n\
    \        if c == substring[0]:\n            count += 1\n            if substring[1:]\
    \ == string[count+1:]:\n                count += 1\n                if substring[2:]\
    \ == string[count+2:]:\n                    count += 1\n                    if\
    \ substring[3:] == string[count+3:]:\n                        count += 1\n   \
    \                     if substring[4:] == string[count+4:]:\n                \
    \            count += 1\n                            if substring[5:] == string[count+5:]:\n\
    \                                count += 1\n                                if\
    \ substring[6:] == string[count+6:]:\n                                    count\
    \ += 1\n                                    if substring[7:] == string[count+7:]:\n\
    \                                        count += 1\n                        \
    \                if substring[8:] == string[count+8:]:\n                     \
    \                       count += 1\n                                         \
    \   if substring[9:] == string[count+9:]:\n                                  \
    \              count += 1\n                                                if\
    \ substring[10:] == string[count+10:]:\n                                     \
    \               count += 1\n                                                 \
    \   if substring[11:] == string[count+11:]:\n                                \
    \                        count += 1\n                                        \
    \                if substring[12:] == string[count+12:]:\n                   \
    \                                         count += 1\n                       \
    \                                     if substring[13:] == string[count+13:]:\n\
    \                                                                count += 1\n\
    \                                                                if substring[14:]\
    \ == string[count+14:]:\n                                                    \
    \                count += 1\n                                                \
    \                    if substring[15:] == string[count+15:]:\n               \
    \                                                         count += 1\n       \
    \                                                 if substring[16:] == string[count+16:]:\n\
    \                                                            count += 1\n    \
    \                                                        if substring[17:] ==\
    \ string[count+17:]:\n                                                       \
    \         count += 1\n                                                       \
    \         if substring[18:] == string[count+18:]:\n                          \
    \                                          count += 1\n                      \
    \                                              if substring[19:] == string[count+19:]:\n\
    \                                                                        count\
    \ += 1\n                                                        if substring[20:]\
    \ == string[count+20:]:\n                                                    \
    \        count += 1\n                                                        \
    \    if substring[21:] == string[count+21:]:\n                               \
    \                                 count += 1\n                               \
    \                                 if substring[22:] == string[count+22:]:\n  \
    \                                                                  count += 1\n\
    \                                                                    if substring[23:]\
    \ == string[count+23:]:\n                                                    \
    \                    count += 1\n                                            \
    \            if substring[24:] == string[count+24:]:\n                       \
    \                                     count += 1\n                           \
    \                                 if substring[25:] == string[count+25:]:\n  \
    \                                                              count += 1\n  \
    \                                                              if substring[26:]\
    \ == string[count+26:]:\n                                                    \
    \                count += 1\n                                                \
    \                    if substring[27:] == string[count+27:]:\n               \
    \                                                         count += 1\n       \
    \                                                 if substring[28:] == string[count+28:]:\n\
    \                                                            count += 1\n    \
    \                                                        if substring[29:] ==\
    \ string[count+29:]:\n                                                       \
    \         count += 1\n                                                       \
    \         if \nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t\
    @test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\
    \t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\"\
    , \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwpo179r8.jl:8\nin expression starting at /tmp/tmpwpo179r8.jl:8\n"
  stdout: ''
  timestamp: 1659748220
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    if string == \"\" || substring == \"\"\n   \
    \     return 0\n    \n    count = 0\n    \n    for c in string\n        if c ==\
    \ substring\n            count += 1\n        end\n    end\n    \n    return count\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abc\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcd\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"c\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"bcde\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bcdef\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bcdefg\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\",\
    \ \"bcdefgh\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bcdefghi\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bcdefghij\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bcdefghijk\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bcdefghijkl\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bcdefghijklm\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bcdefghijklmn\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bcdefghijklmno\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bcdefghijklmnop\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bcdefghijklmnopq\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bcdefghijklmnopqr\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    ab\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz5y2ll31.jl:17\nin expression starting at\
    \ /tmp/tmpz5y2ll31.jl:17\n"
  stdout: ''
  timestamp: 1659748220
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string\n        if c\
    \ == substring\n            count += 1\n        end\n    end\n    return count\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abba\", \"ba\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abba\", \"bb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abba\", \"bbb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\"\
    , \"bbba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\", \"bbab\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\", \"bbaba\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abba\", \"bbabaa\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abba\", \"bbabaaa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abba\", \"bbabaaab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abba\", \"bbabaaabb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abba\", \"bbabaaabbb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abba\", \"bbabaaabbbb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abba\", \"bbabaaabbbba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abba\", \"bbabaaabbbbba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abba\", \"bbabaaabbbbbaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abba\", \"bbabaaabbbbbaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abba\", \"bbabaaabbbbbaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abba\", \"bbabaaabbbbbaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_\nusing\
    \ Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\"\
    , \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbsiyfxd5.jl:12\nin expression starting at\
    \ /tmp/tmpbsiyfxd5.jl:12\n"
  stdout: ''
  timestamp: 1659748220
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    if string == \"\" || substring == \"\"\n   \
    \     return 0\n    \n    string_length = len(string)\n    substring_length =\
    \ len(substring)\n    \n    i = 0\n    j = 0\n    \n    while i < string_length\
    \ && j < substring_length\n        if string[i] == substring[j]\n            i\
    \ += 1\n            j += 1\n        else\n            if j == substring_length\n\
    \                return i\n            else\n                j += 1\n        end\n\
    \    end\n    \n    return -1\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"abc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\
    bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bca\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bca\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bca\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bca\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\
    bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bca\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bca\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bca\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bca\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bca\")\n</cell>\n<code language=julia-1.5>\nho\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbapxuha6.jl:27\nin expression starting at\
    \ /tmp/tmpbapxuha6.jl:27\n"
  stdout: ''
  timestamp: 1659748220
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for c in string:\n\
    \        if c == substring[0]:\n            count += 1\n            \n       \
    \     if count > substring.length\n                return 0\n            \n  \
    \          substring = substring[substring.length..]\n            \n        elif\
    \ c == substring[substring.length]\n            count += 1\n            \n   \
    \         if count > substring.length\n                return 0\n            \n\
    \            substring = substring[1..substring.length]\n            \n      \
    \  else\n            count = 0\n        end\n    end\n    \n    return count\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abc\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bca\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcc\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bccc\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"bccca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bcca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bccaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\
    bccaab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bccaabb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bccaabbb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bccaabbbb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bccaabbbbc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bccaabbbbcc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bccaabbbbccc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bccaabbbbccca\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bccaabbbbcccaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\nusing\
    \ Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\"\
    , \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxk0c6fns.jl:8\nin expression starting at /tmp/tmpxk0c6fns.jl:8\n"
  stdout: ''
  timestamp: 1659748220
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    \n    for c in string\n     \
    \   if c == substring\n            count += 1\n        end\n    end\n    \n  \
    \  return count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"abc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\
    bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abcde\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcde\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcde\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcdef\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"bcdefg\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bcdefgh\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bcdefghij\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bcdefghijk\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bcdefghijkl\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bcdefghijklm\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bcdefghijklmn\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bcdefghijklmno\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bcdefghijklmnop\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bcdefghijklmnopq\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bcdefghijklmnopqr\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bcdefghijklmnopqrs\")\n</\nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwrijxypk.jl:14\nin expression starting at\
    \ /tmp/tmpwrijxypk.jl:14\n"
  stdout: ''
  timestamp: 1659748220
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for char in string\n\
    \        if char == substring\n            count += 1\n        end\n    end\n\
    \    \n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpcd4wa69v.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpcd4wa69v.jl:21\n  Expression: candidate(\"\
    xyxyxyx\", \"x\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcd4wa69v.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcd4wa69v.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpcd4wa69v.jl:22\n  Expression: candidate(\"cacacacac\", \"\
    cac\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcd4wa69v.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcd4wa69v.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpcd4wa69v.jl:23\n  Expression: candidate(\"john doe\", \"john\"\
    ) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcd4wa69v.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcd4wa69v.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659748221
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    if string == \"\" || substring == \"\"\n   \
    \     return 0\n    end\n    \n    count = 0\n    \n    for char in string\n \
    \       if char == substring[1]\n            count += 1\n        end\n    end\n\
    \    \n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8tzpmrjx.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmp8tzpmrjx.jl:25\n  Expression: candidate(\"\
    cacacacac\", \"cac\") == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8tzpmrjx.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8tzpmrjx.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     1      4\n"
  timestamp: 1659748221
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string:\n        if\
    \ c == substring:\n            count += 1\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzk7r6msy.jl:6\nin expression starting at /tmp/tmpzk7r6msy.jl:6\n"
  stdout: ''
  timestamp: 1659748220
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    \n    for c in string\n     \
    \   if c == substring\n            count += 1\n        end\n    end\n    \n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4x9hsjw9.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmp4x9hsjw9.jl:20\n  Expression: candidate(\"\
    xyxyxyx\", \"x\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4x9hsjw9.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4x9hsjw9.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp4x9hsjw9.jl:21\n  Expression: candidate(\"cacacacac\", \"\
    cac\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4x9hsjw9.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4x9hsjw9.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp4x9hsjw9.jl:22\n  Expression: candidate(\"john doe\", \"john\"\
    ) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4x9hsjw9.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4x9hsjw9.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659748221
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string:\n        if\
    \ c == substring:\n            count += 1\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzk7r6msy.jl:6\nin expression starting at /tmp/tmpzk7r6msy.jl:6\n"
  stdout: ''
  timestamp: 1659748220
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string\n        if c\
    \ == substring\n            count += 1\n        end\n    end\n    return count\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abc\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of times the string \"ab\" appears in the string. \nWrite a function\
    \ that takes a string and returns the number of times the string \"ab\" appears\
    \ in the string ignoring case. \nWrite a function that takes a string and returns\
    \ the number of times the string \"ab\" appears in the string ignoring case.\n\
    Write a function that takes a string and returns the number of times the string\
    \ \"ab\" appears in the string ignoring case.\nWrite a function that takes a string\
    \ and returns the number of times the string \"ab\" appears in the string ignoring\
    \ case.\nWrite a function that takes a string and returns the number of times\
    \ the string \"ab\" appears in the string ignoring case.\nWrite a function that\
    \ takes a string and returns the number of times the string \"ab\" appears in\
    \ the string ignoring case.\nWrite a function that takes a string and returns\
    \ the number of times the string \"ab\" appears in the string ignoring case.\n\
    Write a function that takes a string and returns the number of times the string\
    \ \"ab\" appears in the string ignoring case.\nWrite a function that takes a string\
    \ and returns the number of times the string \"ab\" appears in the string ignoring\
    \ case.\nWrite a function that takes a string and returns the number of times\
    \ the string \"ab\" appears in the string ignoring case.\nWrite a function that\
    \ takes a string and returns the number of times the string \"ab\" appears in\
    \ the string ignoring case.\nWrite a function that takes a string and returns\
    \ the number of times the string \"ab\" appears in the string ignoring case.\n\
    Write a function that takes a string and returns the number of times the string\
    \ \"ab\" appears in the string ignoring case.\nWrite a function that takes a string\
    \ and returns the number of times the string \"ab\" appears in the string ignoring\
    \ case.\nWrite a function that takes a string and returns the number of times\
    \ the string \"ab\" appears in the string ignoring case.\nWrite a function that\
    \ takes a string and returns the number of times the string \"ab\" appears in\
    \ the string ignoring case.\nWrite a function that takes a string and returns\
    \ the number of times the string \"ab\" appears in the string ignoring case.\n\
    Write a function that takes a string and returns the number of times the string\
    \ \"ab\" appears in the string ignoring case.\nWrite a function that takes a string\
    \ and returns the number of times the string \"ab\" appears in the string ignoring\
    \ case.\nWrite a function that takes a string and returns the number of times\
    \ the string \"ab\" appears in the string ignoring case.\nWrite a function that\
    \ takes a string and returns the number of times the string \"ab\" appears in\
    \ the string \nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t\
    @test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\
    \t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\"\
    , \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi8xa9b5u.jl:12\nin expression starting at\
    \ /tmp/tmpi8xa9b5u.jl:12\n"
  stdout: ''
  timestamp: 1659748220
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string:\n        if\
    \ c == substring[0]:\n            count += 1\n            if substring[1:] ==\
    \ string[count+1:]:\n                count += 1\n                if substring[2:]\
    \ == string[count+2:]:\n                    count += 1\n                    if\
    \ substring[3:] == string[count+3:]:\n                        count += 1\n   \
    \                     if substring[4:] == string[count+4:]:\n                \
    \            count += 1\n                            if substring[5:] == string[count+5:]:\n\
    \                                count += 1\n                                if\
    \ substring[6:] == string[count+6:]:\n                                    count\
    \ += 1\n                                    if substring[7:] == string[count+7:]:\n\
    \                                        count += 1\n                        \
    \                if substring[8:] == string[count+8:]:\n                     \
    \                       count += 1\n                                         \
    \   if substring[9:] == string[count+9:]:\n                                  \
    \              count += 1\n                                                if\
    \ substring[10:] == string[count+10:]:\n                                     \
    \               count += 1\n                                                 \
    \   if substring[11:] == string[count+11:]:\n                                \
    \                        count += 1\n                                        \
    \                if substring[12:] == string[count+12:]:\n                   \
    \                                         count += 1\n                       \
    \                                     if substring[13:] == string[count+13:]:\n\
    \                                                                count += 1\n\
    \                                                                if substring[14:]\
    \ == string[count+14:]:\n                                                    \
    \                count += 1\n                                                \
    \                    if substring[15:] == string[count+15:]:\n               \
    \                                                         count += 1\n       \
    \                                                 if substring[16:] == string[count+16:]:\n\
    \                                                            count += 1\n    \
    \                                                        if substring[17:] ==\
    \ string[count+17:]:\n                                                       \
    \         count += 1\n                                                       \
    \         if substring[18:] == string[count+18:]:\n                          \
    \                                          count += 1\n                      \
    \                                              if substring[19:] == string[count+19:]:\n\
    \                                                                        count\
    \ += 1\n                                                        if substring[20:]\
    \ == string[count+20:]:\n                                                    \
    \        count += 1\n                                                        \
    \    if substring[21:] == string[count+21:]:\n                               \
    \                                 count += 1\n                               \
    \                                 if substring[22:] == string[count+22:]:\n  \
    \                                                                  count += 1\n\
    \                                                                    if substring[23:]\
    \ == string[count+23:]:\n                                                    \
    \                    count += 1\n                                            \
    \            if substring[24:] == string[count+24:]:\n                       \
    \                                     count += 1\n                           \
    \                                 if substring[25:] == string[count+25:]:\n  \
    \                                                              count += 1\n  \
    \                                                              if substring[26:]\
    \ == string[count+26:]:\n                                                    \
    \                count += 1\n                                                \
    \                    if substring[27:] == string[count+27:]:\n               \
    \                                                         count += 1\n       \
    \                                                 if substring[28:] == string[count+28:]:\n\
    \                                                            count += 1\n    \
    \                                                        if substring[29:] ==\
    \ string[count+29:]:\n                                                       \
    \         count += 1\n                                                       \
    \         if substring[30] == \nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu6nxb913.jl:6\nin expression starting at /tmp/tmpu6nxb913.jl:6\n"
  stdout: ''
  timestamp: 1659748220
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    if string == \"\" || substring == \"\" \n  \
    \      0\n    else\n        string.count(substring)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"The quick brown fox jumps over the lazy\
    \ dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"The quick\
    \ brown fox jumps over the lazy dog\", \"dog\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"The quick brown fox jumps over the\
    \ lazy dog\", \"dog\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"The quick brown fox jumps over the lazy dog\", \"dog\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"The quick brown fox jumps over the\
    \ lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    The quick brown fox jumps over the lazy dog\", \"dog\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"The quick brown fox jumps over the\
    \ lazy dog\", \"dog\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"The quick brown fox jumps over the lazy dog\", \"dog\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"The quick brown fox jumps over the\
    \ lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    The quick brown fox jumps over the lazy dog\", \"dog\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp249dpt7k.jl:10\nin expression starting at\
    \ /tmp/tmp249dpt7k.jl:10\n"
  stdout: ''
  timestamp: 1659748220
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    \n    for c in string:\n    \
    \    if c == substring[0]:\n            count += 1\n            if count > substring.length\n\
    \                return substring.length\n            \n        elif c == substring[1]:\n\
    \            count += 1\n            if count > substring.length\n           \
    \     return substring.length\n            \n        elif c == substring[2]:\n\
    \            count += 1\n            if count > substring.length\n           \
    \     return substring.length\n            \n        elif c == substring[3]:\n\
    \            count += 1\n            if count > substring.length\n           \
    \     return substring.length\n            \n        elif c == substring[4]:\n\
    \            count += 1\n            if count > substring.length\n           \
    \     return substring.length\n            \n        elif c == substring[5]:\n\
    \            count += 1\n            if count > substring.length\n           \
    \     return substring.length\n            \n        elif c == substring[6]:\n\
    \            count += 1\n            if count > substring.length\n           \
    \     return substring.length\n            \n        elif c == substring[7]:\n\
    \            count += 1\n            if count > substring.length\n           \
    \     return substring.length\n            \n        elif c == substring[8]:\n\
    \            count += 1\n            if count > substring.length\n           \
    \     return substring.length\n            \n        elif c == substring[9]:\n\
    \            count += 1\n            if count > substring.length\n           \
    \     return substring.length\n            \n        elif c == substring[10]:\n\
    \            count += 1\n            if count > substring.length\n           \
    \     return substring.length\n            \n        elif c == substring[11]:\n\
    \            count += 1\n            if count > substring.length\n           \
    \     return substring.length\n            \n        elif c == substring[12]:\n\
    \            count += 1\n            if count > substring.length\n           \
    \     return substring.length\n            \n        elif c == substring[13]:\n\
    \            count += 1\n            if count > substring.length\n           \
    \     return substring.length\n            \n        elif c == substring[14]:\n\
    \            count += 1\n            if count > substring.length\n           \
    \     return substring.length\n            \n        elif c == substring[15]:\n\
    \            count += 1\n            if count > substring.length\n           \
    \     return substring.length\n            \n        elif c == substring[16]:\n\
    \            count += 1\n            if count > substring.length\n           \
    \     return substring.length\n            \n        elif c == substring[17]:\n\
    \            count += 1\n            if count > substring.length\n           \
    \     return substring.length\n            \n        elif c == substring[18]:\n\
    \            count += 1\n            if count > substring.length\n           \
    \     return substring.length\n            \n        elif c == substring[19]:\n\
    \            count += 1\n            if count > substring.length\n           \
    \     return substring.length\n            \n        elif c == substring[20]:\n\
    \            count += 1\n            if count > substring.length\n           \
    \     return substring.length\n            \n        elif c == substring[21]:\n\
    \            count += 1\n            if count > substring.length\n           \
    \     return substring.length\n            \n        elif c == substring[22]:\n\
    \            count += 1\n            if count > substring.length\n           \
    \     return substring.length\n            \n        elif c == substring[23]:\n\
    \            count += 1\n            if \nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqke6lgux.jl:7\nin expression starting at /tmp/tmpqke6lgux.jl:7\n"
  stdout: ''
  timestamp: 1659748220
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string:\n        if\
    \ c == substring:\n            count += 1\n    return count\nend\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"abc\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabcbb\", \"bcb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabcbb\", \"bb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\"\
    , \"c\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"\
    bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bbc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bbc\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bbc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bbc\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bbc\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabcbb\", \"bbc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabcbb\", \"bbc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\"\
    , \"bbc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"\
    bbc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bbc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bbc\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bbc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bbc\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bbc\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabcbb\", \"bbc\")\n</cell>\n<code language=julia-1.5>\nhow_\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdp15t6l8.jl:6\nin expression starting at /tmp/tmpdp15t6l8.jl:6\n"
  stdout: ''
  timestamp: 1659748220
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    if string == \"\" || substring == \"\" \n  \
    \      return 0 \n    else \n        string_length = len(string)\n        substring_index\
    \ = 0\n        substring_index += string.find(substring)\n        while substring_index\
    \ < string_length \n            substring_index += string.find(substring, substring_index\
    \ + 1)\n        end\n        return substring_index - substring_index\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp3ofdwzjr.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp3ofdwzjr.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"xyxyxyx\", \"x\") == 4\n  UndefVarError: len not defined\n\
    \  Stacktrace:\n   [1] how_many_times(string::String, substring::String)\n   \
    \  @ Main /tmp/tmp3ofdwzjr.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3ofdwzjr.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3ofdwzjr.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp3ofdwzjr.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"cacacacac\", \"cac\") == 4\n  UndefVarError: len not defined\n \
    \ Stacktrace:\n   [1] how_many_times(string::String, substring::String)\n    \
    \ @ Main /tmp/tmp3ofdwzjr.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3ofdwzjr.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3ofdwzjr.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp3ofdwzjr.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"john doe\", \"john\") == 1\n  UndefVarError: len not defined\n \
    \ Stacktrace:\n   [1] how_many_times(string::String, substring::String)\n    \
    \ @ Main /tmp/tmp3ofdwzjr.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3ofdwzjr.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3ofdwzjr.jl:20\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      3      4\n"
  timestamp: 1659748222
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for c in string:\n\
    \        if c == substring[0]:\n            count += 1\n            if count ==\
    \ substring.length\n                return count\n            \n        elif c\
    \ == substring[1]:\n            count += 1\n            if count == substring.length\n\
    \                return count\n            \n        elif c == substring[2]:\n\
    \            count += 1\n            if count == substring.length\n          \
    \      return count\n            \n        elif c == substring[3]:\n         \
    \   count += 1\n            if count == substring.length\n                return\
    \ count\n            \n        elif c == substring[4]:\n            count += 1\n\
    \            if count == substring.length\n                return count\n    \
    \        \n        elif c == substring[5]:\n            count += 1\n         \
    \   if count == substring.length\n                return count\n            \n\
    \        elif c == substring[6]:\n            count += 1\n            if count\
    \ == substring.length\n                return count\n            \n        elif\
    \ c == substring[7]:\n            count += 1\n            if count == substring.length\n\
    \                return count\n            \n        elif c == substring[8]:\n\
    \            count += 1\n            if count == substring.length\n          \
    \      return count\n            \n        elif c == substring[9]:\n         \
    \   count += 1\n            if count == substring.length\n                return\
    \ count\n            \n        elif c == substring[10]:\n            count +=\
    \ 1\n            if count == substring.length\n                return count\n\
    \            \n        elif c == substring[11]:\n            count += 1\n    \
    \        if count == substring.length\n                return count\n        \
    \    \n        elif c == substring[12]:\n            count += 1\n            if\
    \ count == substring.length\n                return count\n            \n    \
    \    elif c == substring[13]:\n            count += 1\n            if count ==\
    \ substring.length\n                return count\n            \n        elif c\
    \ == substring[14]:\n            count += 1\n            if count == substring.length\n\
    \                return count\n            \n        elif c == substring[15]:\n\
    \            count += 1\n            if count == substring.length\n          \
    \      return count\n            \n        elif c == substring[16]:\n        \
    \    count += 1\n            if count == substring.length\n                return\
    \ count\n            \n        elif c == substring[17]:\n            count +=\
    \ 1\n            if count == substring.length\n                return count\n\
    \            \n        elif c == substring[18]:\n            count += 1\n    \
    \        if count == substring.length\n                return count\n        \
    \    \n        elif c == substring[19]:\n            count += 1\n            if\
    \ count == substring.length\n                return count\n            \n    \
    \    elif c == substring[20]:\n            count += 1\n            if count ==\
    \ substring.length\n                return count\n            \n        elif c\
    \ == substring[21]:\n            count += 1\n            if count == substring.length\n\
    \                return count\n            \n        elif c == substring[22]:\n\
    \            count += 1\n            if count == substring.length\n          \
    \      return count\n            \n        elif c == substring[23]:\n        \
    \    count += 1\n            if count == substring.length\n                return\
    \ count\n            \n        elif c == substring[24]:\n            count +=\
    \ 1\n            if count == substring.length\n                return count\n\
    \            \n        elif c == substring[25]:\n            count += 1\n    \
    \        if count == substring.length\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2icgsncr.jl:8\nin expression starting at /tmp/tmp2icgsncr.jl:8\n"
  stdout: ''
  timestamp: 1659748220
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for char in string\n\
    \        if char == substring\n            count += 1\n        end\n    end\n\
    \    \n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpcd4wa69v.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpcd4wa69v.jl:21\n  Expression: candidate(\"\
    xyxyxyx\", \"x\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcd4wa69v.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcd4wa69v.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpcd4wa69v.jl:22\n  Expression: candidate(\"cacacacac\", \"\
    cac\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcd4wa69v.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcd4wa69v.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpcd4wa69v.jl:23\n  Expression: candidate(\"john doe\", \"john\"\
    ) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcd4wa69v.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcd4wa69v.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659748221
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    if string == \"\" || substring == \"\" \n  \
    \      then return 0\n    else \n        local count = 0\n        local substring_index\
    \ = 0\n        local string_index = 0\n        while substring_index < substring.length\
    \ \n            && string_index < string.length \n            && substring[substring_index]\
    \ == string[string_index]\n            do substring_index += 1\n            string_index\
    \ += 1\n            count = count + 1\n        end\n        return count\n   \
    \ end\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\
    abc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcd\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"c\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"ab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"abc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\
    bcd\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"c\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"abc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bcd\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"c\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"abc\")\n</cell>\n<code language=juli\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmpbn75jp.jl:5\nin expression starting at /tmp/tmpmpbn75jp.jl:5\n"
  stdout: ''
  timestamp: 1659748220
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    if string == \"\" || substring == \"\"\n   \
    \     return 0\n    \n    count = 0\n    \n    for c in string\n        if c ==\
    \ substring[1]\n            count += 1\n        else\n            count = 0\n\
    \    end\n    \n    return count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabcbb\", \"abc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\"\
    , \"bba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"\
    bb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"a\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bc\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bbc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bb\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bb\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabcbb\", \"bb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabcbb\", \"bb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\"\
    , \"bb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"\
    bb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bb\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bb\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bb\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bb\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabcbb\", \"bb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabcbb\", \"bb\")\n</cell>\n<code language=julia-1.5>\nho\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplnwsooy3.jl:18\nin expression starting at\
    \ /tmp/tmplnwsooy3.jl:18\n"
  stdout: ''
  timestamp: 1659748222
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    if string == \"\" || substring == \"\"\n   \
    \     return 0\n    else\n        count = 0\n        for c in string\n       \
    \     if c == substring\n                count += 1\n            else\n      \
    \          if count > 0\n                    return count\n                count\
    \ = 0\n        end\n        return count\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"abc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bca\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcc\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bca\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"bcc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bcc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\
    bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bca\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcc\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bca\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"bcc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bcc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\
    bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcc\"\
    )\n</cell>\n\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t\
    @test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\
    \t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\"\
    , \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp85d8kaku.jl:19\nin expression starting at\
    \ /tmp/tmp85d8kaku.jl:19\n"
  stdout: ''
  timestamp: 1659748222
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for c in string:\n\
    \        if c == substring[0]:\n            count += 1\n            if substring[1:]\
    \ == string[count+1:]:\n                count += 1\n                if substring[2:]\
    \ == string[count+2:]:\n                    count += 1\n                    if\
    \ substring[3:] == string[count+3:]:\n                        count += 1\n   \
    \                     if substring[4:] == string[count+4:]:\n                \
    \            count += 1\n                            if substring[5:] == string[count+5:]:\n\
    \                                count += 1\n                                if\
    \ substring[6:] == string[count+6:]:\n                                    count\
    \ += 1\n                                    if substring[7:] == string[count+7:]:\n\
    \                                        count += 1\n                        \
    \                if substring[8:] == string[count+8:]:\n                     \
    \                       count += 1\n                                         \
    \   if substring[9:] == string[count+9:]:\n                                  \
    \              count += 1\n                                                if\
    \ substring[10:] == string[count+10:]:\n                                     \
    \               count += 1\n                                                 \
    \   if substring[11:] == string[count+11:]:\n                                \
    \                        count += 1\n                                        \
    \                if substring[12:] == string[count+12:]:\n                   \
    \                                         count += 1\n                       \
    \                                     if substring[13:] == string[count+13:]:\n\
    \                                                                count += 1\n\
    \                                                                if substring[14:]\
    \ == string[count+14:]:\n                                                    \
    \                count += 1\n                                                \
    \                    if substring[15:] == string[count+15:]:\n               \
    \                                                         count += 1\n       \
    \                                                 if substring[16:] == string[count+16:]:\n\
    \                                                            count += 1\n    \
    \                                                        if substring[17:] ==\
    \ string[count+17:]:\n                                                       \
    \         count += 1\n                                                       \
    \         if substring[18:] == string[count+18:]:\n                          \
    \                                          count += 1\n                      \
    \                                              if substring[19:] == string[count+19:]:\n\
    \                                                                        count\
    \ += 1\n                                                        if substring[20:]\
    \ == string[count+20:]:\n                                                    \
    \        count += 1\n                                                        \
    \    if substring[21:] == string[count+21:]:\n                               \
    \                                 count += 1\n                               \
    \                                 if substring[22:] == string[count+22:]:\n  \
    \                                                                  count += 1\n\
    \                                                                    if substring[23:]\
    \ == string[count+23:]:\n                                                    \
    \                    count += 1\n                                            \
    \            if substring[24:] == string[count+24:]:\n                       \
    \                                     count += 1\n                           \
    \                                 if substring[25:] == string[count+25:]:\n  \
    \                                                              count += 1\n  \
    \                                                              if substring[26:]\
    \ == string[count+26:]:\n                                                    \
    \                count += 1\n                                                \
    \                    if substring[27:] == string[count+27:]:\n               \
    \                                                         count += 1\n       \
    \                                                 if substring[28:] == string[count+28:]:\n\
    \                                                            count += 1\n    \
    \                                                        if substring[29:] ==\
    \ string[count+29:]:\n                                                       \
    \         count += 1\n                                                       \
    \         if \nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t\
    @test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\
    \t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\"\
    , \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwpo179r8.jl:8\nin expression starting at /tmp/tmpwpo179r8.jl:8\n"
  stdout: ''
  timestamp: 1659748220
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    \n    for c in string\n     \
    \   if c == substring\n            count += 1\n        end\n    end\n    \n  \
    \  return count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\", \"ba\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\", \"bb\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abba\", \"abba\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abba\", \"abbb\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abba\", \"abbbb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abba\", \"abbbba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\"\
    , \"abbbbba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\", \"\
    abbbbbac\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\", \"abbbbbacab\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\", \"abbbbbacabc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\", \"abbbbbacabcc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\", \"abbbbbacabccc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\", \"abbbbbacabccca\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\", \"abbbbbacabcccba\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\", \"abbbbbacabcccbb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\", \"abbbbbacabcccbbb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\", \"abbbbbacabcccbbba\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\", \"abbbbbacabcc\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3tdhcse1.jl:14\nin expression starting at\
    \ /tmp/tmp3tdhcse1.jl:14\n"
  stdout: ''
  timestamp: 1659748222
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for c in string:\n\
    \        if c == substring[0]:\n            count += 1\n            if count >\
    \ substring.length\n                return substring.length\n            \n  \
    \      elif c == substring[substring.length]\n            count += 1\n       \
    \     if count > substring.length\n                return substring.length\n \
    \           \n        elif substring.length <= count <= substring.length + 1 \n\
    \            return substring.length\n            \n    return substring.length\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8ulne5h8.jl:8\nin expression starting at /tmp/tmp8ulne5h8.jl:8\n"
  stdout: ''
  timestamp: 1659748222
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string:\n        if\
    \ c == substring:\n            count += 1\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzk7r6msy.jl:6\nin expression starting at /tmp/tmpzk7r6msy.jl:6\n"
  stdout: ''
  timestamp: 1659748220
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for char in string\n\
    \        if char == substring[1]\n            count += 1\n        end\n    end\n\
    \    \n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpupf_usy5.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpupf_usy5.jl:22\n  Expression: candidate(\"\
    cacacacac\", \"cac\") == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpupf_usy5.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpupf_usy5.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     1      4\n"
  timestamp: 1659748221
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    \n    for char in string\n  \
    \      if char == substring\n            count += 1\n        end\n    end\n  \
    \  \n    return count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"abc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\
    bcc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bca\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bca\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcc\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bcc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\
    bcc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bca\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bca\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcc\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bcc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\
    bcc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bca\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcc\")\n</cell\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq0_scy88.jl:14\nin expression starting at\
    \ /tmp/tmpq0_scy88.jl:14\n"
  stdout: ''
  timestamp: 1659748222
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    if string == \"\" || substring == \"\" \n  \
    \      then 0\n        else string.count(substring) + how_many_times(string.substring(1,string.length-1),\
    \ substring)\n    end\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabcbb\", \"abc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\"\
    , \"bb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"\
    c\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bbc\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bbc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bbc\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bbc\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabcbb\", \"bbc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabcbb\", \"bbc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\"\
    , \"bbc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"\
    bbc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bbc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bbc\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bbc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bbc\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bbc\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabcbb\", \"bbc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabcbb\", \"bbc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpl6zdr45o.jl:5\nin expression starting at /tmp/tmpl6zdr45o.jl:5\n"
  stdout: ''
  timestamp: 1659748222
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    if string == \"\" || substring == \"\"\n   \
    \     return 0\n    end\n    \n    count = 0\n    \n    for char in string\n \
    \       if char == substring[1]\n            count += 1\n        elseif char ==\
    \ substring[2]\n            count += 1\n        elseif char == substring[3]\n\
    \            count += 1\n        elseif char == substring[4]\n            count\
    \ += 1\n        elseif char == substring[5]\n            count += 1\n        elseif\
    \ char == substring[6]\n            count += 1\n        elseif char == substring[7]\n\
    \            count += 1\n        elseif char == substring[8]\n            count\
    \ += 1\n        elseif char == substring[9]\n            count += 1\n        elseif\
    \ char == substring[10]\n            count += 1\n        elseif char == substring[11]\n\
    \            count += 1\n        elseif char == substring[12]\n            count\
    \ += 1\n        elseif char == substring[13]\n            count += 1\n       \
    \ elseif char == substring[14]\n            count += 1\n        elseif char ==\
    \ substring[15]\n            count += 1\n        elseif char == substring[16]\n\
    \            count += 1\n        elseif char == substring[17]\n            count\
    \ += 1\n        elseif char == substring[18]\n            count += 1\n       \
    \ elseif char == substring[19]\n            count += 1\n        elseif char ==\
    \ substring[20]\n            count += 1\n        elseif char == substring[21]\n\
    \            count += 1\n        elseif char == substring[22]\n            count\
    \ += 1\n        elseif char == substring[23]\n            count += 1\n       \
    \ elseif char == substring[24]\n            count += 1\n        elseif char ==\
    \ substring[25]\n            count += 1\n        elseif char == substring[26]\n\
    \            count += 1\n        elseif char == substring[27]\n            count\
    \ += 1\n        elseif char == substring[28]\n            count += 1\n       \
    \ elseif char == substring[29]\n            count += 1\n        elseif char ==\
    \ substring[30]\n            count += 1\n        elseif char == substring[31]\n\
    \            count += 1\n        elseif char == substring[32]\n            count\
    \ += 1\n        elseif char == substring[33]\n            count += 1\n       \
    \ elseif char == substring[34]\n            count += 1\n        elseif char ==\
    \ substring[35]\n            count += 1\n        elseif char == substring[36]\n\
    \            count += 1\n        elseif char == substring[37]\n            count\
    \ += 1\n        elseif char == substring[38]\n            count += 1\n       \
    \ elseif char == substring[39]\n            count += 1\n        elseif char ==\
    \ substring[40]\n            count += 1\n        elseif char == substring[41]\n\
    \            count += 1\n        elseif char == substring[42]\n            count\
    \ += 1\n        elseif char == substring[\nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwwvetjcw.jl:1\nin expression starting at /tmp/tmpwwvetjcw.jl:1\n"
  stdout: ''
  timestamp: 1659748222
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    if string == \"\" then return 0 \n    if substring\
    \ == \"\" then return 1 \n    if string[0] == substring[0] then return how_many_times(string[1:],\
    \ substring[1:]) + 1 \n    else return how_many_times(string[1:], substring) \n\
    end\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpebhhptdn.jl:4\nin expression starting at /tmp/tmpebhhptdn.jl:4\n"
  stdout: ''
  timestamp: 1659748222
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for c in string:\n\
    \        if c == substring[0]:\n            count += 1\n            if substring[1:]\
    \ == string[count+1:]:\n                count += 1\n        else:\n          \
    \  count = 0\n    \n    return count\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"abc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\
    abcde\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abcc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abccc\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abccca\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abcccba\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abcccbac\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abcccbaca\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abcccbacab\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abcccbacabc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abcccbacabca\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abcccbacabcaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abcccbacabcaab\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abcccbacabcaabb\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abcccbacabcaabbb\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abcccbacabcaabbbb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abcccbacabcaabbbbc\"\
    )\n</cell>\n<code language=\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_x2351h1.jl:8\nin expression starting at /tmp/tmp_x2351h1.jl:8\n"
  stdout: ''
  timestamp: 1659748222
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string:\n        if\
    \ c == substring:\n            count += 1\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzk7r6msy.jl:6\nin expression starting at /tmp/tmpzk7r6msy.jl:6\n"
  stdout: ''
  timestamp: 1659748220
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for c in string\n\
    \        if substring == c\n            count += 1\n        end\n    end\n   \
    \ \n    return count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabcbb\", \"abc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\"\
    , \"bcc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"\
    bb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bbb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bbc\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bb\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bb\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bb\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabcbb\", \"bb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabcbb\", \"bb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\"\
    , \"bb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"\
    bb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bb\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bb\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bb\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bb\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabcbb\", \"bb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabcbb\", \"bb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\"\
    , \"bb\")\n\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi0s84gys.jl:15\nin expression starting at\
    \ /tmp/tmpi0s84gys.jl:15\n"
  stdout: ''
  timestamp: 1659748222
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    \n    for c in string:\n    \
    \    if c == substring[0]:\n            count += 1\n            if count == len(substring):\n\
    \                return count\n        elif c == substring[1]:\n            count\
    \ += 1\n            if count == len(substring):\n                return count\n\
    \        else:\n            count = 0\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6_v7muqn.jl:7\nin expression starting at /tmp/tmp6_v7muqn.jl:7\n"
  stdout: ''
  timestamp: 1659748222
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    \n    for c in string:\n    \
    \    if c == substring[0]:\n            count += 1\n            if substring[1:]\
    \ == string[count+1:]:\n                count += 1\n        else:\n          \
    \  count = 0\n    \n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpylje4ip_.jl:7\nin expression starting at /tmp/tmpylje4ip_.jl:7\n"
  stdout: ''
  timestamp: 1659748222
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    \n    for c in string:\n    \
    \    if c == substring[0]:\n            count += 1\n            if count == len(substring):\n\
    \                return count\n        elif c == substring[1]:\n            count\
    \ += 1\n            if count == len(substring):\n                return count\n\
    \        elif c == substring[2]:\n            count += 1\n            if count\
    \ == len(substring):\n                return count\n        elif c == substring[3]:\n\
    \            count += 1\n            if count == len(substring):\n           \
    \     return count\n        elif c == substring[4]:\n            count += 1\n\
    \            if count == len(substring):\n                return count\n     \
    \   elif c == substring[5]:\n            count += 1\n            if count == len(substring):\n\
    \                return count\n        elif c == substring[6]:\n            count\
    \ += 1\n            if count == len(substring):\n                return count\n\
    \        elif c == substring[7]:\n            count += 1\n            if count\
    \ == len(substring):\n                return count\n        elif c == substring[8]:\n\
    \            count += 1\n            if count == len(substring):\n           \
    \     return count\n        elif c == substring[9]:\n            count += 1\n\
    \            if count == len(substring):\n                return count\n     \
    \   elif c == substring[10]:\n            count += 1\n            if count ==\
    \ len(substring):\n                return count\n        elif c == substring[11]:\n\
    \            count += 1\n            if count == len(substring):\n           \
    \     return count\n        elif c == substring[12]:\n            count += 1\n\
    \            if count == len(substring):\n                return count\n     \
    \   elif c == substring[13]:\n            count += 1\n            if count ==\
    \ len(substring):\n                return count\n        elif c == substring[14]:\n\
    \            count += 1\n            if count == len(substring):\n           \
    \     return count\n        elif c == substring[15]:\n            count += 1\n\
    \            if count == len(substring):\n                return count\n     \
    \   elif c == substring[16]:\n            count += 1\n            if count ==\
    \ len(substring):\n                return count\n        elif c == substring[17]:\n\
    \            count += 1\n            if count == len(substring):\n           \
    \     return count\n        elif c == substring[18]:\n            count += 1\n\
    \            if count == len(substring):\n                return count\n     \
    \   elif c == substring[19]:\n            count += 1\n            if count ==\
    \ len(substring):\n                return count\n        elif c == substring[20]:\n\
    \            count += 1\n            if count == len(substring):\n           \
    \     return count\n        elif c == substring[21]:\n            count += 1\n\
    \            if count == len(substring):\n                return count\n     \
    \   elif c == substring[22]:\n            count += 1\n            if count ==\
    \ len(substring):\n                return count\n        elif c == substring[23]:\n\
    \            count += 1\n            if count == len(substring):\n           \
    \     return count\n        elif c == substring[24]:\n            count += 1\n\
    \            if count == len(substring):\n                return count\n     \
    \   elif c == substring[25]:\n            count += 1\n            if count ==\
    \ len(substring):\n                return count\n        elif c == substring[26]:\n\
    \            count += 1\n            if count == len(substring):\n           \
    \     return count\n        elif c == substring[\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp293rtpjh.jl:7\nin expression starting at /tmp/tmp293rtpjh.jl:7\n"
  stdout: ''
  timestamp: 1659748222
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string\n        if c\
    \ == substring\n            count += 1\n        end\n    end\n    return count\n\
    end\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"abcabc\", \"abc\")\n\
    </cell>\n<code language=julia-1.4>\nhow_many_times(\"abcabc\", \"bca\")\n</cell>\n\
    <code language=julia-1.4>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code\
    \ language=julia-1.4>\nhow_many_times(\"abcabc\", \"c\")\n</cell>\n<code language=julia-1.4>\n\
    how_many_times(\"abcabc\", \"bc\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\
    abcabc\", \"bc\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"abcabc\"\
    , \"bc\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"abcabc\", \"bc\"\
    )\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n\
    <code language=julia-1.4>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code\
    \ language=julia-1.4>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code language=julia-1.4>\n\
    how_many_times(\"abcabc\", \"bc\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\
    abcabc\", \"bc\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"abcabc\"\
    , \"bc\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"abcabc\", \"bc\"\
    )\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n\
    <code language=julia-1.4>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code\
    \ language=julia-1.4>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code language=julia-1.4>\n\
    how_many_times(\"abcabc\", \"bc\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\
    abcabc\", \"bc\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"abcabc\"\
    , \"bc\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"abcabc\", \"bc\"\
    )\n</cell>\n<code language=\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6h2luayg.jl:12\nin expression starting at\
    \ /tmp/tmp6h2luayg.jl:12\n"
  stdout: ''
  timestamp: 1659748222
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string:\n        if\
    \ c == substring[0]:\n            count += 1\n            if count > substring.length\n\
    \                count = 0\n        elif c == substring[substring.length]\n  \
    \          count += 1\n            if count > substring.length\n             \
    \   count = 0\n        else\n            count = 0\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5u9l7nin.jl:6\nin expression starting at /tmp/tmp5u9l7nin.jl:6\n"
  stdout: ''
  timestamp: 1659748222
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for c in string:\n\
    \        if c == substring:\n            count += 1\n        \n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj1k8za_u.jl:8\nin expression starting at /tmp/tmpj1k8za_u.jl:8\n"
  stdout: ''
  timestamp: 1659748222
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for c in string:\n\
    \        if c == substring:\n            count += 1\n            \n    return\
    \ count\n    \nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"abc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\
    bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bca\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcc\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bca\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"bcc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bcc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\
    bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bca\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcc\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bca\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"bcc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bcc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\
    bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bca\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcc\")\n</cell\nusing\
    \ Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\"\
    , \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxv51uzx4.jl:8\nin expression starting at /tmp/tmpxv51uzx4.jl:8\n"
  stdout: ''
  timestamp: 1659748223
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for char in string\n\
    \        if char == substring\n            count += 1\n        end\n    end\n\
    \    \n    return count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabcbb\", \"abc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\"\
    , \"bb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"\
    bbb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bbc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bbc\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bbc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bbc\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bbc\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabcbb\", \"bbc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabcbb\", \"bbc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\"\
    , \"bbc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"\
    bbc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bbc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bbc\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bbc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bbc\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bbc\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabcbb\", \"bbc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabcbb\", \"bbc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\"\
    , \"bbc\")\n</cell\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9p45tmj8.jl:15\nin expression starting at\
    \ /tmp/tmp9p45tmj8.jl:15\n"
  stdout: ''
  timestamp: 1659748223
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    if string == \"\" then return 0\n    if substring\
    \ == \"\" then return 0\n    if substring == string then return 1\n    \n    substring\
    \ = lowercase(substring)\n    string = lowercase(string)\n    \n    substring\
    \ = substring(substring)\n    \n    count = 0\n    \n    for c in string:\n  \
    \      if c == substring then\n            count = count + 1\n        end\n  \
    \  end\n    \n    return count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"abc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bcd\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\
    abcd\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcde\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcdc\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcd\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"bcde\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bcdc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bcd\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\
    bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcde\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcdc\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcd\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bcde\")\n</cell\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpiyex86lz.jl:4\nin expression starting at /tmp/tmpiyex86lz.jl:4\n"
  stdout: ''
  timestamp: 1659748223
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for c in string\n\
    \        if c == substring\n            count += 1\n        end\n    end\n   \
    \ \n    return count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabcbb\", \"ab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\"\
    , \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"\
    bb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"a\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bc\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bb\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"a\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bc\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabcbb\", \"bb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabcbb\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\"\
    , \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"\
    bb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"a\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bc\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bb\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"a\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bc\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabcbb\", \"bb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabcbb\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\"\
    , \"bc\")\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\n\
    candidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpug_2dty_.jl:15\nin expression starting at\
    \ /tmp/tmpug_2dty_.jl:15\n"
  stdout: ''
  timestamp: 1659748223
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for c in string:\n\
    \        if c == substring[0]:\n            count += 1\n            if count ==\
    \ len(substring):\n                return count\n        elif c == substring[1]:\n\
    \            count += 1\n            if count == len(substring):\n           \
    \     return count\n        elif c == substring[2]:\n            count += 1\n\
    \            if count == len(substring):\n                return count\n     \
    \   elif c == substring[3]:\n            count += 1\n            if count == len(substring):\n\
    \                return count\n        elif c == substring[4]:\n            count\
    \ += 1\n            if count == len(substring):\n                return count\n\
    \        elif c == substring[5]:\n            count += 1\n            if count\
    \ == len(substring):\n                return count\n        elif c == substring[6]:\n\
    \            count += 1\n            if count == len(substring):\n           \
    \     return count\n        elif c == substring[7]:\n            count += 1\n\
    \            if count == len(substring):\n                return count\n     \
    \   elif c == substring[8]:\n            count += 1\n            if count == len(substring):\n\
    \                return count\n        elif c == substring[9]:\n            count\
    \ += 1\n            if count == len(substring):\n                return count\n\
    \        elif c == substring[10]:\n            count += 1\n            if count\
    \ == len(substring):\n                return count\n        elif c == substring[11]:\n\
    \            count += 1\n            if count == len(substring):\n           \
    \     return count\n        elif c == substring[12]:\n            count += 1\n\
    \            if count == len(substring):\n                return count\n     \
    \   elif c == substring[13]:\n            count += 1\n            if count ==\
    \ len(substring):\n                return count\n        elif c == substring[14]:\n\
    \            count += 1\n            if count == len(substring):\n           \
    \     return count\n        elif c == substring[15]:\n            count += 1\n\
    \            if count == len(substring):\n                return count\n     \
    \   elif c == substring[16]:\n            count += 1\n            if count ==\
    \ len(substring):\n                return count\n        elif c == substring[17]:\n\
    \            count += 1\n            if count == len(substring):\n           \
    \     return count\n        elif c == substring[18]:\n            count += 1\n\
    \            if count == len(substring):\n                return count\n     \
    \   elif c == substring[19]:\n            count += 1\n            if count ==\
    \ len(substring):\n                return count\n        elif c == substring[20]:\n\
    \            count += 1\n            if count == len(substring):\n           \
    \     return count\n        elif c == substring[21]:\n            count += 1\n\
    \            if count == len(substring):\n                return count\n     \
    \   elif c == substring[22]:\n            count += 1\n            if count ==\
    \ len(substring):\n                return count\n        elif c == substring[23]:\n\
    \            count += 1\n            if count == len(substring):\n           \
    \     return count\n        elif c == substring[24]:\n            count += 1\n\
    \            if count == len(substring):\n                return count\n     \
    \   elif c == substring[25]:\n            count += 1\n            if count ==\
    \ len(substring):\n                return count\n        elif c == substring[26]:\n\
    \            count += 1\n            if count == len(substring):\n           \
    \     return count\n        elif c == \nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzc2gp7jw.jl:8\nin expression starting at /tmp/tmpzc2gp7jw.jl:8\n"
  stdout: ''
  timestamp: 1659748223
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for char in string\n\
    \        if char == substring[1]\n            count += 1\n        elseif char\
    \ == substring[2]\n            count += 1\n        elseif char == substring[3]\n\
    \            count += 1\n        elseif char == substring[4]\n            count\
    \ += 1\n        elseif char == substring[5]\n            count += 1\n        elseif\
    \ char == substring[6]\n            count += 1\n        elseif char == substring[7]\n\
    \            count += 1\n        elseif char == substring[8]\n            count\
    \ += 1\n        elseif char == substring[9]\n            count += 1\n        elseif\
    \ char == substring[10]\n            count += 1\n        elseif char == substring[11]\n\
    \            count += 1\n        elseif char == substring[12]\n            count\
    \ += 1\n        elseif char == substring[13]\n            count += 1\n       \
    \ elseif char == substring[14]\n            count += 1\n        elseif char ==\
    \ substring[15]\n            count += 1\n        elseif char == substring[16]\n\
    \            count += 1\n        elseif char == substring[17]\n            count\
    \ += 1\n        elseif char == substring[18]\n            count += 1\n       \
    \ elseif char == substring[19]\n            count += 1\n        elseif char ==\
    \ substring[20]\n            count += 1\n        elseif char == substring[21]\n\
    \            count += 1\n        elseif char == substring[22]\n            count\
    \ += 1\n        elseif char == substring[23]\n            count += 1\n       \
    \ elseif char == substring[24]\n            count += 1\n        elseif char ==\
    \ substring[25]\n            count += 1\n        elseif char == substring[26]\n\
    \            count += 1\n        elseif char == substring[27]\n            count\
    \ += 1\n        elseif char == substring[28]\n            count += 1\n       \
    \ elseif char == substring[29]\n            count += 1\n        elseif char ==\
    \ substring[30]\n            count += 1\n        elseif char == substring[31]\n\
    \            count += 1\n        elseif char == substring[32]\n            count\
    \ += 1\n        elseif char == substring[33]\n            count += 1\n       \
    \ elseif char == substring[34]\n            count += 1\n        elseif char ==\
    \ substring[35]\n            count += 1\n        elseif char == substring[36]\n\
    \            count += 1\n        elseif char == substring[37]\n            count\
    \ += 1\n        elseif char == substring[38]\n            count += 1\n       \
    \ elseif char == substring[39]\n            count += 1\n        elseif char ==\
    \ substring[40]\n            count += 1\n        elseif char == substring[41]\n\
    \            count += 1\n        elseif char == substring[42]\n            count\
    \ += 1\n        elseif char == substring[43]\n            count += 1\n       \
    \ elseif char == substring[44]\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwzv4d5wk.jl:1\nin expression starting at /tmp/tmpwzv4d5wk.jl:1\n"
  stdout: ''
  timestamp: 1659748223
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for char in string\n\
    \        if char == substring\n            count += 1\n        end\n    end\n\
    \    \n    return count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"abc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\
    abcde\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcde\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcd\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcd\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcd\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"bcd\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bcd\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bcd\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\
    bcd\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcd\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcd\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcd\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcd\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"bcd\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bcd\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bcd\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\
    bcd\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcd\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcd\")\n\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmth5gtz8.jl:15\nin expression starting at\
    \ /tmp/tmpmth5gtz8.jl:15\n"
  stdout: ''
  timestamp: 1659748223
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for c in string:\n\
    \        if c == substring:\n            count += 1\n        \n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj1k8za_u.jl:8\nin expression starting at /tmp/tmpj1k8za_u.jl:8\n"
  stdout: ''
  timestamp: 1659748222
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string:\n        if\
    \ c == substring:\n            count += 1\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzk7r6msy.jl:6\nin expression starting at /tmp/tmpzk7r6msy.jl:6\n"
  stdout: ''
  timestamp: 1659748220
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    if string == \"\" then return 0\n    if substring\
    \ == \"\" then return 0\n    \n    local count = 0\n    local pos = 0\n    \n\
    \    while pos < string.len()\n        do\n            if string.sub(string, pos,\
    \ pos) == substring then\n                count = count + 1\n            end\n\
    \            pos = pos + 1\n        end\n    end\n    \n    return count\nend\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bca\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"c\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bc\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3doakl1g.jl:4\nin expression starting at /tmp/tmp3doakl1g.jl:4\n"
  stdout: ''
  timestamp: 1659748223
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for c in string:\n\
    \        if c == substring[0]:\n            count += 1\n            if count ==\
    \ len(substring):\n                return count\n        elif c == substring[1]:\n\
    \            count += 1\n            if count == len(substring):\n           \
    \     return count\n        elif c == substring[2]:\n            count += 1\n\
    \            if count == len(substring):\n                return count\n     \
    \   elif c == substring[3]:\n            count += 1\n            if count == len(substring):\n\
    \                return count\n        elif c == substring[4]:\n            count\
    \ += 1\n            if count == len(substring):\n                return count\n\
    \        elif c == substring[5]:\n            count += 1\n            if count\
    \ == len(substring):\n                return count\n        elif c == substring[6]:\n\
    \            count += 1\n            if count == len(substring):\n           \
    \     return count\n        elif c == substring[7]:\n            count += 1\n\
    \            if count == len(substring):\n                return count\n     \
    \   elif c == substring[8]:\n            count += 1\n            if count == len(substring):\n\
    \                return count\n        elif c == substring[9]:\n            count\
    \ += 1\n            if count == len(substring):\n                return count\n\
    \        elif c == substring[10]:\n            count += 1\n            if count\
    \ == len(substring):\n                return count\n        elif c == substring[11]:\n\
    \            count += 1\n            if count == len(substring):\n           \
    \     return count\n        elif c == substring[12]:\n            count += 1\n\
    \            if count == len(substring):\n                return count\n     \
    \   elif c == substring[13]:\n            count += 1\n            if count ==\
    \ len(substring):\n                return count\n        elif c == substring[14]:\n\
    \            count += 1\n            if count == len(substring):\n           \
    \     return count\n        elif c == substring[15]:\n            count += 1\n\
    \            if count == len(substring):\n                return count\n     \
    \   elif c == substring[16]:\n            count += 1\n            if count ==\
    \ len(substring):\n                return count\n        elif c == substring[17]:\n\
    \            count += 1\n            if count == len(substring):\n           \
    \     return count\n        elif c == substring[18]:\n            count += 1\n\
    \            if count == len(substring):\n                return count\n     \
    \   elif c == substring[19]:\n            count += 1\n            if count ==\
    \ len(substring):\n                return count\n        elif c == substring[20]:\n\
    \            count += 1\n            if count == len(substring):\n           \
    \     return count\n        elif c == substring[21]:\n            count += 1\n\
    \            if count == len(substring):\n                return count\n     \
    \   elif c == substring[22]:\n            count += 1\n            if count ==\
    \ len(substring):\n                return count\n        elif c == substring[23]:\n\
    \            count += 1\n            if count == len(substring):\n           \
    \     return count\n        elif c == substring[24]:\n            count += 1\n\
    \            if count == len(substring):\n                return count\n     \
    \   elif c == substring[25]:\n            count += 1\n            if count ==\
    \ len(substring):\n                return count\n        elif c == substring[26]:\n\
    \            count += 1\n            if count == len(substring):\n           \
    \     return count\n        elif c == \nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzc2gp7jw.jl:8\nin expression starting at /tmp/tmpzc2gp7jw.jl:8\n"
  stdout: ''
  timestamp: 1659748223
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string:\n        if\
    \ c == substring:\n            count += 1\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzk7r6msy.jl:6\nin expression starting at /tmp/tmpzk7r6msy.jl:6\n"
  stdout: ''
  timestamp: 1659748220
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for c in string:\n\
    \        if c == substring:\n            count += 1\n        \n    return count\n\
    \    \nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\", \"aba\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abba\", \"abba\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abba\", \"abbb\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abba\", \"abbbb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abba\", \"abbbba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\"\
    , \"abbbbac\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\", \"\
    abbbbac\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\", \"abbbbac\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\", \"abbbbac\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\", \"abbbbac\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abba\", \"abbbbac\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abba\", \"abbbbac\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abba\", \"abbbbac\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abba\", \"abbbbac\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\"\
    , \"abbbbac\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\", \"\
    abbbbac\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\", \"abbbbac\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\", \"abbbbac\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\", \"abbbbac\")\n</cell>\n\
    <code language=julia-1.5>\nho\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph4jpnegn.jl:8\nin expression starting at /tmp/tmph4jpnegn.jl:8\n"
  stdout: ''
  timestamp: 1659748224
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string\n        if c\
    \ == substring\n            count += 1\n        end\n    end\n    return count\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abba\", \"bb\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abba\", \"bbb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abba\", \"abba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\"\
    , \"abbb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\", \"abbbb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\", \"abbbba\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\", \"abbbbba\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abba\", \"abbbbbac\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abba\", \"abbbbbaca\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abba\", \"abbbbbacab\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abba\", \"abbbbbacabc\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abba\", \"abbbbbacabcc\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abba\", \"abbbbbacabccc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abba\", \"abbbbbacabccca\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abba\", \"abbbbbacabcccab\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abba\", \"abbbbbacabcccabc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abba\", \"abbbbbacabcccabcc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abba\", \"abbbbbacabcccabccc\")\n\
    </cell>\n<code language=juli\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp91y9pka4.jl:12\nin expression starting at\
    \ /tmp/tmp91y9pka4.jl:12\n"
  stdout: ''
  timestamp: 1659748224
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    if string == \"\" then return 0\n    if substring\
    \ == \"\" then return 1\n    if string[0] == substring[0] then return how_many_times(string[1:],\
    \ substring[1:])\n    else return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0_lk2ud_.jl:4\nin expression starting at /tmp/tmp0_lk2ud_.jl:4\n"
  stdout: ''
  timestamp: 1659748224
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    \n    for char in string\n  \
    \      if char == substring\n            count += 1\n        end\n    end\n  \
    \  \n    return count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of times the substring \"ab\" appears in the string.\
    \ \nHint: Use a for loop and a counter variable.\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpti75359q.jl:14\nin expression starting at\
    \ /tmp/tmpti75359q.jl:14\n"
  stdout: ''
  timestamp: 1659748224
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    \n    for c in string\n     \
    \   if substring == c\n            count += 1\n        end\n    end\n    \n  \
    \  return count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"abc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\
    bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abcde\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcde\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"cde\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"de\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"dea\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"deab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"deabc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"deabca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\",\
    \ \"deabcde\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"deabcdea\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"deabcdeab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"deabcdeabc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"deabcdeabcd\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"deabcdeabcde\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"deabcdeabcdea\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"deabcdeabcdeab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"deabcdeabcdeabc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"deabcdeabcdeabcd\")\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_oxa_ktx.jl:14\nin expression starting at\
    \ /tmp/tmp_oxa_ktx.jl:14\n"
  stdout: ''
  timestamp: 1659748224
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string:\n        if\
    \ c == substring[0]:\n            count += 1\n            if count == len(substring):\n\
    \                return count\n        elif c == substring[1]:\n            count\
    \ += 1\n            if count == len(substring):\n                return count\n\
    \        elif c == substring[2]:\n            count += 1\n            if count\
    \ == len(substring):\n                return count\n        elif c == substring[3]:\n\
    \            count += 1\n            if count == len(substring):\n           \
    \     return count\n        elif c == substring[4]:\n            count += 1\n\
    \            if count == len(substring):\n                return count\n     \
    \   elif c == substring[5]:\n            count += 1\n            if count == len(substring):\n\
    \                return count\n        elif c == substring[6]:\n            count\
    \ += 1\n            if count == len(substring):\n                return count\n\
    \        elif c == substring[7]:\n            count += 1\n            if count\
    \ == len(substring):\n                return count\n        elif c == substring[8]:\n\
    \            count += 1\n            if count == len(substring):\n           \
    \     return count\n        elif c == substring[9]:\n            count += 1\n\
    \            if count == len(substring):\n                return count\n     \
    \   elif c == substring[10]:\n            count += 1\n            if count ==\
    \ len(substring):\n                return count\n        elif c == substring[11]:\n\
    \            count += 1\n            if count == len(substring):\n           \
    \     return count\n        elif c == substring[12]:\n            count += 1\n\
    \            if count == len(substring):\n                return count\n     \
    \   elif c == substring[13]:\n            count += 1\n            if count ==\
    \ len(substring):\n                return count\n        elif c == substring[14]:\n\
    \            count += 1\n            if count == len(substring):\n           \
    \     return count\n        elif c == substring[15]:\n            count += 1\n\
    \            if count == len(substring):\n                return count\n     \
    \   elif c == substring[16]:\n            count += 1\n            if count ==\
    \ len(substring):\n                return count\n        elif c == substring[17]:\n\
    \            count += 1\n            if count == len(substring):\n           \
    \     return count\n        elif c == substring[18]:\n            count += 1\n\
    \            if count == len(substring):\n                return count\n     \
    \   elif c == substring[19]:\n            count += 1\n            if count ==\
    \ len(substring):\n                return count\n        elif c == substring[20]:\n\
    \            count += 1\n            if count == len(substring):\n           \
    \     return count\n        elif c == substring[21]:\n            count += 1\n\
    \            if count == len(substring):\n                return count\n     \
    \   elif c == substring[22]:\n            count += 1\n            if count ==\
    \ len(substring):\n                return count\n        elif c == substring[23]:\n\
    \            count += 1\n            if count == len(substring):\n           \
    \     return count\n        elif c == substring[24]:\n            count += 1\n\
    \            if count == len(substring):\n                return count\n     \
    \   elif c == substring[25]:\n            count += 1\n            if count ==\
    \ len(substring):\n                return count\n        elif c == substring[26]:\n\
    \            count += 1\n            if count == len(substring):\n           \
    \     return count\n        elif c == substring[27]:\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprm0vwctp.jl:6\nin expression starting at /tmp/tmprm0vwctp.jl:6\n"
  stdout: ''
  timestamp: 1659748224
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for char in string\n\
    \        if char == substring\n            count += 1\n        end\n    end\n\
    \    \n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpcd4wa69v.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpcd4wa69v.jl:21\n  Expression: candidate(\"\
    xyxyxyx\", \"x\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcd4wa69v.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcd4wa69v.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpcd4wa69v.jl:22\n  Expression: candidate(\"cacacacac\", \"\
    cac\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcd4wa69v.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcd4wa69v.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpcd4wa69v.jl:23\n  Expression: candidate(\"john doe\", \"john\"\
    ) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcd4wa69v.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcd4wa69v.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659748221
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string:\n        if\
    \ c == substring:\n            count += 1\n    return count\nend\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"abc\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"abcde\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bcde\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\
    cde\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"de\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abc\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\"\
    , \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp4nefsbx.jl:6\nin expression starting at /tmp/tmpp4nefsbx.jl:6\n"
  stdout: ''
  timestamp: 1659748224
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string:\n        if\
    \ c == substring:\n            count += 1\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzk7r6msy.jl:6\nin expression starting at /tmp/tmpzk7r6msy.jl:6\n"
  stdout: ''
  timestamp: 1659748220
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for c in string:\n\
    \        if c == substring:\n            count += 1\n        \n    return count\n\
    \    \nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\
    abc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bca\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bca\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"abca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"abcabc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"abcabcabc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"abcabcabcabc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"abcabcabcabcabc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"abcabcabcabcabcabc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"abcabcabcabcabcabcabc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"abcabcabcabcabcabcabcabc\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"abcabcabcabcabcabcabcabcabc\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"abcabcabcabcabcabcabcabcabcabc\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"abcabcabcabcabcabcabcabcabcabcabc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abcabcabcabcabcabcabcabcabcabcabc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abcabcabcabcabcabcabcabcabcabcabcabc\"\
    )\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp32oq207b.jl:8\nin expression starting at /tmp/tmp32oq207b.jl:8\n"
  stdout: ''
  timestamp: 1659748224
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string\n        if c\
    \ == substring\n            count += 1\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvveosmo3.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmpvveosmo3.jl:18\n  Expression: candidate(\"\
    xyxyxyx\", \"x\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvveosmo3.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvveosmo3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpvveosmo3.jl:19\n  Expression: candidate(\"cacacacac\", \"\
    cac\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvveosmo3.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvveosmo3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpvveosmo3.jl:20\n  Expression: candidate(\"john doe\", \"john\"\
    ) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvveosmo3.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvveosmo3.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659748221
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for char in string\n\
    \        if char == substring[1]\n            count += 1\n        end\n    end\n\
    \    \n    return count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"abc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\
    bcb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bca\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcb\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcc\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bcb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bcc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\
    bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bca\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcb\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"bcc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bcb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\
    bcc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bca\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcb\")\nusing\
    \ Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\"\
    , \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp280okyl0.jl:15\nin expression starting at\
    \ /tmp/tmp280okyl0.jl:15\n"
  stdout: ''
  timestamp: 1659748224
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string:\n        if\
    \ c == substring:\n            count += 1\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzk7r6msy.jl:6\nin expression starting at /tmp/tmpzk7r6msy.jl:6\n"
  stdout: ''
  timestamp: 1659748220
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    if string == \"\" || substring == \"\"\n   \
    \     return 0\n    \n    count = 0\n    \n    for c in string\n        if c ==\
    \ substring\n            count += 1\n        end\n    end\n    \n    return count\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abc\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bca\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"c\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"ab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"abc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\
    abca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abcabc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abcabcabc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abcabcabcabc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abcabcabcabcabc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abcabcabcabcabcabc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abcabcabcabcabcabcabc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abcabcabcabcabcabcabcabc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abcabcabcabcabcabcabcabcabc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abcabcabcabcabcabcabcabcabcabc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abcabcabcabcabcabcabcabcabcabcabc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2so85o5y.jl:17\nin expression starting at\
    \ /tmp/tmp2so85o5y.jl:17\n"
  stdout: ''
  timestamp: 1659748224
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for c in string:\n\
    \        if c == substring[0]:\n            count += 1\n            if count ==\
    \ substring.length\n                return count\n            \n        elif c\
    \ == substring[1]:\n            count += 1\n            if count == substring.length\n\
    \                return count\n            \n        elif c == substring[2]:\n\
    \            count += 1\n            if count == substring.length\n          \
    \      return count\n            \n        elif c == substring[3]:\n         \
    \   count += 1\n            if count == substring.length\n                return\
    \ count\n            \n        elif c == substring[4]:\n            count += 1\n\
    \            if count == substring.length\n                return count\n    \
    \        \n        elif c == substring[5]:\n            count += 1\n         \
    \   if count == substring.length\n                return count\n            \n\
    \        elif c == substring[6]:\n            count += 1\n            if count\
    \ == substring.length\n                return count\n            \n        elif\
    \ c == substring[7]:\n            count += 1\n            if count == substring.length\n\
    \                return count\n            \n        elif c == substring[8]:\n\
    \            count += 1\n            if count == substring.length\n          \
    \      return count\n            \n        elif c == substring[9]:\n         \
    \   count += 1\n            if count == substring.length\n                return\
    \ count\n            \n        elif c == substring[10]:\n            count +=\
    \ 1\n            if count == substring.length\n                return count\n\
    \            \n        elif c == substring[11]:\n            count += 1\n    \
    \        if count == substring.length\n                return count\n        \
    \    \n        elif c == substring[12]:\n            count += 1\n            if\
    \ count == substring.length\n                return count\n            \n    \
    \    elif c == substring[13]:\n            count += 1\n            if count ==\
    \ substring.length\n                return count\n            \n        elif c\
    \ == substring[14]:\n            count += 1\n            if count == substring.length\n\
    \                return count\n            \n        elif c == substring[15]:\n\
    \            count += 1\n            if count == substring.length\n          \
    \      return count\n            \n        elif c == substring[16]:\n        \
    \    count += 1\n            if count == substring.length\n                return\
    \ count\n            \n        elif c == substring[17]:\n            count +=\
    \ 1\n            if count == substring.length\n                return count\n\
    \            \n        elif c == substring[18]:\n            count += 1\n    \
    \        if count == substring.length\n                return count\n        \
    \    \n        elif c == substring[19]:\n            count += 1\n            if\
    \ count == substring.length\n                return count\n            \n    \
    \    elif c == substring[20]:\n            count += 1\n            if count ==\
    \ substring.length\n                return count\n            \n        elif c\
    \ == substring[21]:\n            count += 1\n            if count == substring.length\n\
    \                return count\n            \n        elif c == substring[22]:\n\
    \            count += 1\n            if count == substring.length\n          \
    \      return count\n            \n        elif c == substring[23]:\n        \
    \    count += 1\n            if count == substring.length\n                return\
    \ count\n            \n        elif c == substring[24]:\n            count +=\
    \ 1\n            if count == substring.length\n                return count\n\
    \            \n        elif c == substring[25]:\n            count += 1\n    \
    \        if count == substring.length\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2icgsncr.jl:8\nin expression starting at /tmp/tmp2icgsncr.jl:8\n"
  stdout: ''
  timestamp: 1659748220
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string:\n        if\
    \ c == substring:\n            count += 1\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzk7r6msy.jl:6\nin expression starting at /tmp/tmpzk7r6msy.jl:6\n"
  stdout: ''
  timestamp: 1659748220
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for c in string:\n\
    \        if c == substring[0]:\n            count += 1\n            if count >\
    \ substring[1]:\n                break\n        else:\n            count = 0\n\
    \    \n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe5n17lbi.jl:8\nin expression starting at /tmp/tmpe5n17lbi.jl:8\n"
  stdout: ''
  timestamp: 1659748224
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    \n    for c in string:\n    \
    \    if c == substring[0]:\n            count += 1\n            \n           \
    \ if substring[1:] == string[count+1:]:\n                return count\n      \
    \      \n            count += how_many_times(string[count+1:], substring[1:])\n\
    \            \n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpezzfo34w.jl:7\nin expression starting at /tmp/tmpezzfo34w.jl:7\n"
  stdout: ''
  timestamp: 1659748224
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    if string == \"\" || substring == \"\"\n   \
    \     return 0\n    \n    count = 0\n    \n    for c in string\n        if c ==\
    \ substring[0]\n            count += 1\n        elseif c == substring[1]\n   \
    \         count += 1\n        elseif c == substring[2]\n            count += 1\n\
    \        elseif c == substring[3]\n            count += 1\n        elseif c ==\
    \ substring[4]\n            count += 1\n        elseif c == substring[5]\n   \
    \         count += 1\n        elseif c == substring[6]\n            count += 1\n\
    \        elseif c == substring[7]\n            count += 1\n        elseif c ==\
    \ substring[8]\n            count += 1\n        elseif c == substring[9]\n   \
    \         count += 1\n        elseif c == substring[10]\n            count +=\
    \ 1\n        elseif c == substring[11]\n            count += 1\n        elseif\
    \ c == substring[12]\n            count += 1\n        elseif c == substring[13]\n\
    \            count += 1\n        elseif c == substring[14]\n            count\
    \ += 1\n        elseif c == substring[15]\n            count += 1\n        elseif\
    \ c == substring[16]\n            count += 1\n        elseif c == substring[17]\n\
    \            count += 1\n        elseif c == substring[18]\n            count\
    \ += 1\n        elseif c == substring[19]\n            count += 1\n        elseif\
    \ c == substring[20]\n            count += 1\n        elseif c == substring[21]\n\
    \            count += 1\n        elseif c == substring[22]\n            count\
    \ += 1\n        elseif c == substring[23]\n            count += 1\n        elseif\
    \ c == substring[24]\n            count += 1\n        elseif c == substring[25]\n\
    \            count += 1\n        elseif c == substring[26]\n            count\
    \ += 1\n        elseif c == substring[27]\n            count += 1\n        elseif\
    \ c == substring[28]\n            count += 1\n        elseif c == substring[29]\n\
    \            count += 1\n        elseif c == substring[30]\n            count\
    \ += 1\n        elseif c == substring[31]\n            count += 1\n        elseif\
    \ c == substring[32]\n            count += 1\n        elseif c == substring[33]\n\
    \            count += 1\n        elseif c == substring[34]\n            count\
    \ += 1\n        elseif c == substring[35]\n            count += 1\n        elseif\
    \ c == substring[36]\n            count += 1\n        elseif c == substring[37]\n\
    \            count += 1\n        elseif c == substring[38]\n            count\
    \ += 1\n        elseif c == substring[39]\n            count += 1\n        elseif\
    \ c == substring[40]\n            count += 1\n        elseif c == substring[41]\n\
    \            count += 1\n        elseif c == substring[42]\n            count\
    \ += 1\n        elseif c == substring[43]\n            count += 1\n        elseif\
    \ c == substring[44]\n            count += 1\n        elseif c == substring[45]\n\
    \            count += 1\n        elseif c == substring[46]\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwaoaim11.jl:1\nin expression starting at /tmp/tmpwaoaim11.jl:1\n"
  stdout: ''
  timestamp: 1659748224
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for char in string\n\
    \        if char == substring\n            count += 1\n        end\n    end\n\
    \    \n    return count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"abc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\
    abcde\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcde\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"cde\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"de\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"e\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bcde\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"cde\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\
    de\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"e\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcde\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"cde\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"de\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"e\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcde\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"cde\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"de\")\n</cell>\n<code\
    \ language=julia-1.5>\n\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiferqhud.jl:15\nin expression starting at\
    \ /tmp/tmpiferqhud.jl:15\n"
  stdout: ''
  timestamp: 1659748224
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string:\n        if\
    \ c == substring:\n            count += 1\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzk7r6msy.jl:6\nin expression starting at /tmp/tmpzk7r6msy.jl:6\n"
  stdout: ''
  timestamp: 1659748220
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for char in string\n\
    \        if char == substring\n            count += 1\n        end\n    end\n\
    \    \n    return count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabcbb\", \"abc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\"\
    , \"bcc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"\
    bb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"a\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bbc\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabcbb\", \"bb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabcbb\", \"bb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\"\
    , \"bb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"\
    bb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bb\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bb\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bb\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bb\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabcbb\", \"bb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabcbb\", \"bb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\"\
    , \"bb\")\n</cell\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg7b_y4p3.jl:15\nin expression starting at\
    \ /tmp/tmpg7b_y4p3.jl:15\n"
  stdout: ''
  timestamp: 1659748224
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string\n        if c\
    \ == substring\n            count += 1\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvveosmo3.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmpvveosmo3.jl:18\n  Expression: candidate(\"\
    xyxyxyx\", \"x\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvveosmo3.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvveosmo3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpvveosmo3.jl:19\n  Expression: candidate(\"cacacacac\", \"\
    cac\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvveosmo3.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvveosmo3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpvveosmo3.jl:20\n  Expression: candidate(\"john doe\", \"john\"\
    ) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvveosmo3.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvveosmo3.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659748221
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string:\n        if\
    \ c == substring:\n            count += 1\n    return count\nend\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"abc\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\
    bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code\
    \ language=juli\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe8ih4cgr.jl:6\nin expression starting at /tmp/tmpe8ih4cgr.jl:6\n"
  stdout: ''
  timestamp: 1659748225
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for char in string\n\
    \        if char == substring[1]\n            count += 1\n        elseif char\
    \ == substring[2]\n            count += 1\n        elseif char == substring[3]\n\
    \            count += 1\n        elseif char == substring[4]\n            count\
    \ += 1\n        elseif char == substring[5]\n            count += 1\n        elseif\
    \ char == substring[6]\n            count += 1\n        elseif char == substring[7]\n\
    \            count += 1\n        elseif char == substring[8]\n            count\
    \ += 1\n        elseif char == substring[9]\n            count += 1\n        elseif\
    \ char == substring[10]\n            count += 1\n        elseif char == substring[11]\n\
    \            count += 1\n        elseif char == substring[12]\n            count\
    \ += 1\n        elseif char == substring[13]\n            count += 1\n       \
    \ elseif char == substring[14]\n            count += 1\n        elseif char ==\
    \ substring[15]\n            count += 1\n        elseif char == substring[16]\n\
    \            count += 1\n        elseif char == substring[17]\n            count\
    \ += 1\n        elseif char == substring[18]\n            count += 1\n       \
    \ elseif char == substring[19]\n            count += 1\n        elseif char ==\
    \ substring[20]\n            count += 1\n        elseif char == substring[21]\n\
    \            count += 1\n        elseif char == substring[22]\n            count\
    \ += 1\n        elseif char == substring[23]\n            count += 1\n       \
    \ elseif char == substring[24]\n            count += 1\n        elseif char ==\
    \ substring[25]\n            count += 1\n        elseif char == substring[26]\n\
    \            count += 1\n        elseif char == substring[27]\n            count\
    \ += 1\n        elseif char == substring[28]\n            count += 1\n       \
    \ elseif char == substring[29]\n            count += 1\n        elseif char ==\
    \ substring[30]\n            count += 1\n        elseif char == substring[31]\n\
    \            count += 1\n        elseif char == substring[32]\n            count\
    \ += 1\n        elseif char == substring[33]\n            count += 1\n       \
    \ elseif char == substring[34]\n            count += 1\n        elseif char ==\
    \ substring[35]\n            count += 1\n        elseif char == substring[36]\n\
    \            count += 1\n        elseif char == substring[37]\n            count\
    \ += 1\n        elseif char == substring[38]\n            count += 1\n       \
    \ elseif char == substring[39]\n            count += 1\n        elseif char ==\
    \ substring[40]\n            count += 1\n        elseif char == substring[41]\n\
    \            count += 1\n        elseif char == substring[42]\n            count\
    \ += 1\n        elseif char == substring[43]\n            count += 1\n       \
    \ elseif char == substring[44]\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwzv4d5wk.jl:1\nin expression starting at /tmp/tmpwzv4d5wk.jl:1\n"
  stdout: ''
  timestamp: 1659748223
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string:\n        if\
    \ substring == c:\n            count += 1\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc95vxyn6.jl:6\nin expression starting at /tmp/tmpc95vxyn6.jl:6\n"
  stdout: ''
  timestamp: 1659748225
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string:\n        if\
    \ c == substring:\n            count += 1\n    return count\nend\n</cell>\n<code\
    \ language=julia-1.3>\nhow_many_times(\"hello\", \"hell\")\n</cell>\n<code language=julia-1.3>\n\
    how_many_times(\"hello\", \"he\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"\
    hello\", \"hey\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"hello\"\
    , \"helllo\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"hello\", \"\
    helllo\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"hello\", \"helllo\"\
    )\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"hello\", \"helllo\")\n\
    </cell>\n<code language=julia-1.3>\nhow_many_times(\"hello\", \"helllo\")\n</cell>\n\
    <code language=julia-1.3>\nhow_many_times(\"hello\", \"helllo\")\n</cell>\n<code\
    \ language=julia-1.3>\nhow_many_times(\"hello\", \"helllo\")\n</cell>\n<code language=julia-1.3>\n\
    how_many_times(\"hello\", \"helllo\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"\
    hello\", \"helllo\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"hello\"\
    , \"helllo\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"hello\", \"\
    helllo\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"hello\", \"helllo\"\
    )\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"hello\", \"helllo\")\n\
    </cell>\n<code language=julia-1.3>\nhow_many_times(\"hello\", \"helllo\")\n</cell>\n\
    <code language=julia-1.3>\nhow_many_times(\"hello\", \"helllo\")\n</cell>\n<code\
    \ language=julia-1.3>\nhow_many_times(\"hello\", \"helllo\")\n</cell>\n<code language=julia-1.3>\n\
    how_many_times(\"hello\", \"helllo\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"\
    hello\", \"helllo\")\n</cell>\n<code language=julia-1.3>\nhow_many_\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp27pswhi5.jl:6\nin expression starting at /tmp/tmp27pswhi5.jl:6\n"
  stdout: ''
  timestamp: 1659748225
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string\n        if c\
    \ == substring\n            count += 1\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvveosmo3.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmpvveosmo3.jl:18\n  Expression: candidate(\"\
    xyxyxyx\", \"x\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvveosmo3.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvveosmo3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpvveosmo3.jl:19\n  Expression: candidate(\"cacacacac\", \"\
    cac\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvveosmo3.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvveosmo3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpvveosmo3.jl:20\n  Expression: candidate(\"john doe\", \"john\"\
    ) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvveosmo3.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvveosmo3.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659748221
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    if string == \"\" || substring == \"\"\n   \
    \     return 0 \n    end\n    \n    count = 0\n    \n    for c in string\n   \
    \     if c == substring[1]\n            count += 1\n        elseif c == substring[2]\n\
    \            count += 1\n        elseif c == substring[3]\n            count +=\
    \ 1\n        elseif c == substring[4]\n            count += 1\n        elseif\
    \ c == substring[5]\n            count += 1\n        elseif c == substring[6]\n\
    \            count += 1\n        elseif c == substring[7]\n            count +=\
    \ 1\n        elseif c == substring[8]\n            count += 1\n        elseif\
    \ c == substring[9]\n            count += 1\n        elseif c == substring[10]\n\
    \            count += 1\n        elseif c == substring[11]\n            count\
    \ += 1\n        elseif c == substring[12]\n            count += 1\n        elseif\
    \ c == substring[13]\n            count += 1\n        elseif c == substring[14]\n\
    \            count += 1\n        elseif c == substring[15]\n            count\
    \ += 1\n        elseif c == substring[16]\n            count += 1\n        elseif\
    \ c == substring[17]\n            count += 1\n        elseif c == substring[18]\n\
    \            count += 1\n        elseif c == substring[19]\n            count\
    \ += 1\n        elseif c == substring[20]\n            count += 1\n        elseif\
    \ c == substring[21]\n            count += 1\n        elseif c == substring[22]\n\
    \            count += 1\n        elseif c == substring[23]\n            count\
    \ += 1\n        elseif c == substring[24]\n            count += 1\n        elseif\
    \ c == substring[25]\n            count += 1\n        elseif c == substring[26]\n\
    \            count += 1\n        elseif c == substring[27]\n            count\
    \ += 1\n        elseif c == substring[28]\n            count += 1\n        elseif\
    \ c == substring[29]\n            count += 1\n        elseif c == substring[30]\n\
    \            count += 1\n        elseif c == substring[31]\n            count\
    \ += 1\n        elseif c == substring[32]\n            count += 1\n        elseif\
    \ c == substring[33]\n            count += 1\n        elseif c == substring[34]\n\
    \            count += 1\n        elseif c == substring[35]\n            count\
    \ += 1\n        elseif c == substring[36]\n            count += 1\n        elseif\
    \ c == substring[37]\n            count += 1\n        elseif c == substring[38]\n\
    \            count += 1\n        elseif c == substring[39]\n            count\
    \ += 1\n        elseif c == substring[40]\n            count += 1\n        elseif\
    \ c == substring[41]\n            count += 1\n        elseif c == substring[42]\n\
    \            count += 1\n        elseif c == substring[43]\n            count\
    \ += 1\n        elseif c == substring[44]\n            count += 1\n        elseif\
    \ c == substring[45]\n            count += 1\n        elseif c == substring[46]\n\
    \            count += 1\n        elseif c == \nusing Test\n\n@testset begin\n\n\
    candidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe8088dvc.jl:1\nin expression starting at /tmp/tmpe8088dvc.jl:1\n"
  stdout: ''
  timestamp: 1659748225
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    if string == \"\" || substring == \"\"\n   \
    \     return 0\n    \n    substring = lowercase(substring)\n    string = lowercase(string)\n\
    \    \n    count = 0\n    \n    for char in string\n        if char == substring[1]\n\
    \            count += 1\n        end\n    end\n    \n    return count\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\"\
    , \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkyxgma0s.jl:3\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkyxgma0s.jl:1\n\
    in expression starting at /tmp/tmpkyxgma0s.jl:1\n"
  stdout: ''
  timestamp: 1659748225
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    if string == \"\" || substring == \"\"\n   \
    \     return 0\n    end\n    \n    count = 0\n    \n    for c in string\n    \
    \    if c == substring[1]\n            count += 1\n        elseif c == substring[2]\n\
    \            count += 1\n        elseif c == substring[3]\n            count +=\
    \ 1\n        elseif c == substring[4]\n            count += 1\n        elseif\
    \ c == substring[5]\n            count += 1\n        elseif c == substring[6]\n\
    \            count += 1\n        elseif c == substring[7]\n            count +=\
    \ 1\n        elseif c == substring[8]\n            count += 1\n        elseif\
    \ c == substring[9]\n            count += 1\n        elseif c == substring[10]\n\
    \            count += 1\n        elseif c == substring[11]\n            count\
    \ += 1\n        elseif c == substring[12]\n            count += 1\n        elseif\
    \ c == substring[13]\n            count += 1\n        elseif c == substring[14]\n\
    \            count += 1\n        elseif c == substring[15]\n            count\
    \ += 1\n        elseif c == substring[16]\n            count += 1\n        elseif\
    \ c == substring[17]\n            count += 1\n        elseif c == substring[18]\n\
    \            count += 1\n        elseif c == substring[19]\n            count\
    \ += 1\n        elseif c == substring[20]\n            count += 1\n        elseif\
    \ c == substring[21]\n            count += 1\n        elseif c == substring[22]\n\
    \            count += 1\n        elseif c == substring[23]\n            count\
    \ += 1\n        elseif c == substring[24]\n            count += 1\n        elseif\
    \ c == substring[25]\n            count += 1\n        elseif c == substring[26]\n\
    \            count += 1\n        elseif c == substring[27]\n            count\
    \ += 1\n        elseif c == substring[28]\n            count += 1\n        elseif\
    \ c == substring[29]\n            count += 1\n        elseif c == substring[30]\n\
    \            count += 1\n        elseif c == substring[31]\n            count\
    \ += 1\n        elseif c == substring[32]\n            count += 1\n        elseif\
    \ c == substring[33]\n            count += 1\n        elseif c == substring[34]\n\
    \            count += 1\n        elseif c == substring[35]\n            count\
    \ += 1\n        elseif c == substring[36]\n            count += 1\n        elseif\
    \ c == substring[37]\n            count += 1\n        elseif c == substring[38]\n\
    \            count += 1\n        elseif c == substring[39]\n            count\
    \ += 1\n        elseif c == substring[40]\n            count += 1\n        elseif\
    \ c == substring[41]\n            count += 1\n        elseif c == substring[42]\n\
    \            count += 1\n        elseif c == substring[43]\n            count\
    \ += 1\n        elseif c == substring[44]\n            count += 1\n        elseif\
    \ c == substring[45]\n            count += 1\n        elseif c == substring[46]\n\
    \            count += 1\n        elseif c == substring\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpedi6wj0o.jl:1\nin expression starting at /tmp/tmpedi6wj0o.jl:1\n"
  stdout: ''
  timestamp: 1659748225
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    if string == \"\" || substring == \"\"\n   \
    \     return 0\n    end\n    \n    substring = lowercase(substring)\n    string\
    \ = lowercase(string)\n    \n    count = 0\n    \n    for c in string\n      \
    \  if c == substring[1]\n            count += 1\n        elseif c == substring[2]\n\
    \            count += 1\n        elseif c == substring[3]\n            count +=\
    \ 1\n        elseif c == substring[4]\n            count += 1\n        elseif\
    \ c == substring[5]\n            count += 1\n        elseif c == substring[6]\n\
    \            count += 1\n        elseif c == substring[7]\n            count +=\
    \ 1\n        elseif c == substring[8]\n            count += 1\n        elseif\
    \ c == substring[9]\n            count += 1\n        elseif c == substring[10]\n\
    \            count += 1\n        elseif c == substring[11]\n            count\
    \ += 1\n        elseif c == substring[12]\n            count += 1\n        elseif\
    \ c == substring[13]\n            count += 1\n        elseif c == substring[14]\n\
    \            count += 1\n        elseif c == substring[15]\n            count\
    \ += 1\n        elseif c == substring[16]\n            count += 1\n        elseif\
    \ c == substring[17]\n            count += 1\n        elseif c == substring[18]\n\
    \            count += 1\n        elseif c == substring[19]\n            count\
    \ += 1\n        elseif c == substring[20]\n            count += 1\n        elseif\
    \ c == substring[21]\n            count += 1\n        elseif c == substring[22]\n\
    \            count += 1\n        elseif c == substring[23]\n            count\
    \ += 1\n        elseif c == substring[24]\n            count += 1\n        elseif\
    \ c == substring[25]\n            count += 1\n        elseif c == substring[26]\n\
    \            count += 1\n        elseif c == substring[27]\n            count\
    \ += 1\n        elseif c == substring[28]\n            count += 1\n        elseif\
    \ c == substring[29]\n            count += 1\n        elseif c == substring[30]\n\
    \            count += 1\n        elseif c == substring[31]\n            count\
    \ += 1\n        elseif c == substring[32]\n            count += 1\n        elseif\
    \ c == substring[33]\n            count += 1\n        elseif c == substring[34]\n\
    \            count += 1\n        elseif c == substring[35]\n            count\
    \ += 1\n        elseif c == substring[36]\n            count += 1\n        elseif\
    \ c == substring[37]\n            count += 1\n        elseif c == substring[38]\n\
    \            count += 1\n        elseif c == substring[39]\n            count\
    \ += 1\n        elseif c == substring[40]\n            count += 1\n        elseif\
    \ c == substring[41]\n            count += 1\n        elseif c == substring[42]\n\
    \            count += 1\n        elseif c == substring[43]\n            count\
    \ += 1\n        elseif c == substring[44]\n            count += 1\n        elseif\
    \ c == substring[45]\n            count += 1\nusing Test\n\n@testset begin\n\n\
    candidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7eqnw51e.jl:1\nin expression starting at /tmp/tmp7eqnw51e.jl:1\n"
  stdout: ''
  timestamp: 1659748225
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for c in string\n\
    \        if c == substring\n            count += 1\n        end\n    end\n   \
    \ \n    return count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\",\
    \ \"ba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\", \"bb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abba\", \"bbb\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abba\", \"abba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abba\", \"abbb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\"\
    , \"abbbb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\", \"\
    abbbba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\", \"abbbbac\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\", \"abbbbac\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\", \"abbbbac\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abba\", \"abbbbac\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abba\", \"abbbbac\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abba\", \"abbbbac\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abba\", \"abbbbac\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\"\
    , \"abbbbac\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\", \"\
    abbbbac\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\", \"abbbbac\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\", \"abbbbac\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"ab\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptfmvpwd6.jl:15\nin expression starting at\
    \ /tmp/tmptfmvpwd6.jl:15\n"
  stdout: ''
  timestamp: 1659748225
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    if string == \"\" || substring == \"\"\n   \
    \     return 0\n    \n    count = 0\n    \n    for c in string\n        if c ==\
    \ substring\n            count += 1\n        else\n            count = 0\n   \
    \ end\n    \n    return count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"abc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\
    bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bca\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj3cimodn.jl:18\nin expression starting at\
    \ /tmp/tmpj3cimodn.jl:18\n"
  stdout: ''
  timestamp: 1659748225
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    if string == \"\" || substring == \"\"\n   \
    \     return 0\n    else \n        string_length = string.length\n        substring_length\
    \ = substring.length\n        count = 0\n        for i in 0..string_length\n \
    \           if string[i] == substring[0]\n                count += 1\n       \
    \         for j in 1..substring_length\n                    if string[i + j] !=\
    \ substring[j]\n                        count += 1\n            else\n       \
    \         break\n        end\n        return count\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"abc\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bcb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bcc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\
    bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bca\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcb\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"bcc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bcb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\
    bcc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bca\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcb\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcc\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bca\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"bcb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bcc\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnwc3lm3r.jl:22\nin expression starting at\
    \ /tmp/tmpnwc3lm3r.jl:22\n"
  stdout: ''
  timestamp: 1659748225
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for c in string:\n\
    \        if c == substring[0]:\n            count += 1\n            if count ==\
    \ len(substring):\n                return count\n        elif c == substring[1]:\n\
    \            count += 1\n            if count == len(substring):\n           \
    \     return count\n        else:\n            count = 0\n    \n    return count\n\
    </cell>\n<code language=julia-1.1>\nhow_many_times(\"abcabc\", \"abc\")\n</cell>\n\
    <code language=julia-1.1>\nhow_many_times(\"abcabc\", \"bca\")\n</cell>\n<code\
    \ language=julia-1.1>\nhow_many_times(\"abcabc\", \"ab\")\n</cell>\n<code language=julia-1.1>\n\
    how_many_times(\"abcabc\", \"bc\")\n</cell>\n<code language=julia-1.1>\nhow_many_times(\"\
    abcabc\", \"c\")\n</cell>\n<code language=julia-1.1>\nhow_many_times(\"abcabc\"\
    , \"bc\")\n</cell>\n<code language=julia-1.1>\nhow_many_times(\"abcabc\", \"ab\"\
    )\n</cell>\n<code language=julia-1.1>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n\
    <code language=julia-1.1>\nhow_many_times(\"abcabc\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.1>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code language=julia-1.1>\n\
    how_many_times(\"abcabc\", \"ab\")\n</cell>\n<code language=julia-1.1>\nhow_many_times(\"\
    abcabc\", \"bc\")\n</cell>\n<code language=julia-1.1>\nhow_many_times(\"abcabc\"\
    , \"ab\")\n</cell>\n<code language=julia-1.1>\nhow_many_times(\"abcabc\", \"bc\"\
    )\n</cell>\n<code language=julia-1.1>\nhow_many_times(\"abcabc\", \"ab\")\n</cell>\n\
    <code language=julia-1.1>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code\
    \ language=julia-1.1>\nhow_many_times(\"abcabc\", \"ab\")\n</cell>\n<code language=julia-1.1>\n\
    how_many_times(\"abcabc\", \"bc\")\n</cell>\n<code language=julia-1.1>\nhow_many_times(\"\
    abcabc\", \"ab\")\n</cell>\n<code language=julia-1.1>\nhow_many_times(\"abcabc\"\
    , \"bc\")\n</cell>\n<code language=julia-1.1>\nhow_many_times(\"ab\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptf9y5ugk.jl:8\nin expression starting at /tmp/tmptf9y5ugk.jl:8\n"
  stdout: ''
  timestamp: 1659748225
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for char in string\n\
    \        if char == substring\n            count += 1\n        end\n    end\n\
    \    \n    return count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    hello\", \"llo\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"hello\"\
    , \"he\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"hello\", \"hey\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"hello\", \"hey\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"hello\", \"hey\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"hello\", \"hey\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"hello\", \"hey\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    hello\", \"hey\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"hello\"\
    , \"hey\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"hello\", \"hey\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"hello\", \"hey\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"hello\", \"hey\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"hello\", \"hey\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"hello\", \"hey\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    hello\", \"hey\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"hello\"\
    , \"hey\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"hello\", \"hey\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"hello\", \"hey\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"hello\", \"hey\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"hello\", \"hey\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"hello\", \"hey\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    hello\", \"hey\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"hello\"\
    , \"he\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyx8qzls_.jl:15\nin expression starting at\
    \ /tmp/tmpyx8qzls_.jl:15\n"
  stdout: ''
  timestamp: 1659748225
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    \n    for c in string:\n    \
    \    if c == substring[0]:\n            count += 1\n            if count > substring.length\n\
    \                return substring.length\n        \n        if c == substring[substring.length]\n\
    \            count += 1\n            if count > substring.length\n           \
    \     return substring.length\n            \n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpidvuou4r.jl:7\nin expression starting at /tmp/tmpidvuou4r.jl:7\n"
  stdout: ''
  timestamp: 1659748225
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    if string == \"\" || substring == \"\"\n   \
    \     return 0\n    end\n    \n    i = 0\n    j = string.length - 1\n    \n  \
    \  while i <= j\n        if string[i] == substring[0]\n            i += 1\n  \
    \      elseif string[j] == substring[1]\n            j -= 1\n        else\n  \
    \          if string[i] == substring[1]\n                i += 1\n            elseif\
    \ string[j] == substring[0]\n                j -= 1\n            else\n      \
    \          i += 1\n                j -= 1\n            end\n        end\n    end\n\
    \    return j\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\", \"ba\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\", \"bb\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abba\", \"aba\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abba\", \"abba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abba\", \"abbb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\"\
    , \"abbbb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\", \"\
    abbbba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\", \"abbbbba\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\", \"abbbbbac\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\", \"abbbbbac\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abba\", \"abbbbbacc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abba\", \"abbbbbaccc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abba\", \"abbbbbaccc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abba\", \"abbbbbaccc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abba\", \"abbbbbaccc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abba\", \"abbbbbaccc\")\n</cell>\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfmgm0yih.jl:29\nin expression starting at\
    \ /tmp/tmpfmgm0yih.jl:29\n"
  stdout: ''
  timestamp: 1659748225
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    if string == \"\" || substring == \"\"\n   \
    \     return 0\n    end\n    \n    count = 0\n    \n    for c in string\n    \
    \    if c == substring[1]\n            count += 1\n        elseif c == substring[2]\n\
    \            count += 1\n        elseif c == substring[3]\n            count +=\
    \ 1\n        elseif c == substring[4]\n            count += 1\n        elseif\
    \ c == substring[5]\n            count += 1\n        elseif c == substring[6]\n\
    \            count += 1\n        elseif c == substring[7]\n            count +=\
    \ 1\n        elseif c == substring[8]\n            count += 1\n        elseif\
    \ c == substring[9]\n            count += 1\n        elseif c == substring[10]\n\
    \            count += 1\n        elseif c == substring[11]\n            count\
    \ += 1\n        elseif c == substring[12]\n            count += 1\n        elseif\
    \ c == substring[13]\n            count += 1\n        elseif c == substring[14]\n\
    \            count += 1\n        elseif c == substring[15]\n            count\
    \ += 1\n        elseif c == substring[16]\n            count += 1\n        elseif\
    \ c == substring[17]\n            count += 1\n        elseif c == substring[18]\n\
    \            count += 1\n        elseif c == substring[19]\n            count\
    \ += 1\n        elseif c == substring[20]\n            count += 1\n        elseif\
    \ c == substring[21]\n            count += 1\n        elseif c == substring[22]\n\
    \            count += 1\n        elseif c == substring[23]\n            count\
    \ += 1\n        elseif c == substring[24]\n            count += 1\n        elseif\
    \ c == substring[25]\n            count += 1\n        elseif c == substring[26]\n\
    \            count += 1\n        elseif c == substring[27]\n            count\
    \ += 1\n        elseif c == substring[28]\n            count += 1\n        elseif\
    \ c == substring[29]\n            count += 1\n        elseif c == substring[30]\n\
    \            count += 1\n        elseif c == substring[31]\n            count\
    \ += 1\n        elseif c == substring[32]\n            count += 1\n        elseif\
    \ c == substring[33]\n            count += 1\n        elseif c == substring[34]\n\
    \            count += 1\n        elseif c == substring[35]\n            count\
    \ += 1\n        elseif c == substring[36]\n            count += 1\n        elseif\
    \ c == substring[37]\n            count += 1\n        elseif c == substring[38]\n\
    \            count += 1\n        elseif c == substring[39]\n            count\
    \ += 1\n        elseif c == substring[40]\n            count += 1\n        elseif\
    \ c == substring[41]\n            count += 1\n        elseif c == substring[42]\n\
    \            count += 1\n        elseif c == substring[43]\n            count\
    \ += 1\n        elseif c == substring[44]\n            count += 1\n        elseif\
    \ c == substring[45]\n            count += 1\n        elseif c == substring[46]\n\
    \            count += 1\n        elseif c == substring\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpedi6wj0o.jl:1\nin expression starting at /tmp/tmpedi6wj0o.jl:1\n"
  stdout: ''
  timestamp: 1659748225
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string\n        if c\
    \ == substring\n            count += 1\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvveosmo3.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmpvveosmo3.jl:18\n  Expression: candidate(\"\
    xyxyxyx\", \"x\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvveosmo3.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvveosmo3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpvveosmo3.jl:19\n  Expression: candidate(\"cacacacac\", \"\
    cac\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvveosmo3.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvveosmo3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpvveosmo3.jl:20\n  Expression: candidate(\"john doe\", \"john\"\
    ) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvveosmo3.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvveosmo3.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659748221
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    if string == \"\" || substring == \"\"\n   \
    \     return 0\n    \n    count = 0\n    \n    for c in string\n        if c ==\
    \ substring\n            count += 1\n        end\n    end\n    \n    return count\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abc\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bca\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"c\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"d\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bcde\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bcdef\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\
    bcdefg\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcdefgh\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcdefghij\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcdefghijk\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcdefghijkl\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcdefghijklm\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcdefghijklmn\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcdefghijklmno\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcdefghijklmnop\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcdefghijklmnopq\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcdefghijklmnopqr\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcdef\nusing\
    \ Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\"\
    , \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3gxhf4qi.jl:17\nin expression starting at\
    \ /tmp/tmp3gxhf4qi.jl:17\n"
  stdout: ''
  timestamp: 1659748225
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string\n        if substring\
    \ == c\n            count += 1\n        end\n    end\n    return count\nend\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bca\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"c\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsxv7lwou.jl:12\nin expression starting at\
    \ /tmp/tmpsxv7lwou.jl:12\n"
  stdout: ''
  timestamp: 1659748225
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    if string == \"\" || substring == \"\"\n   \
    \     return 0\n    end\n    \n    count = 0\n    \n    for char in string\n \
    \       if char == substring[1]\n            count += 1\n        end\n    end\n\
    \    \n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8tzpmrjx.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmp8tzpmrjx.jl:25\n  Expression: candidate(\"\
    cacacacac\", \"cac\") == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8tzpmrjx.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8tzpmrjx.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     1      4\n"
  timestamp: 1659748221
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string\n        if c\
    \ == substring\n            count += 1\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvveosmo3.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmpvveosmo3.jl:18\n  Expression: candidate(\"\
    xyxyxyx\", \"x\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvveosmo3.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvveosmo3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpvveosmo3.jl:19\n  Expression: candidate(\"cacacacac\", \"\
    cac\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvveosmo3.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvveosmo3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpvveosmo3.jl:20\n  Expression: candidate(\"john doe\", \"john\"\
    ) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvveosmo3.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvveosmo3.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659748221
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string:\n        if\
    \ c == substring:\n            count += 1\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzk7r6msy.jl:6\nin expression starting at /tmp/tmpzk7r6msy.jl:6\n"
  stdout: ''
  timestamp: 1659748220
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string\n        if c\
    \ == substring\n            count += 1\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvveosmo3.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmpvveosmo3.jl:18\n  Expression: candidate(\"\
    xyxyxyx\", \"x\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvveosmo3.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvveosmo3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpvveosmo3.jl:19\n  Expression: candidate(\"cacacacac\", \"\
    cac\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvveosmo3.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvveosmo3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpvveosmo3.jl:20\n  Expression: candidate(\"john doe\", \"john\"\
    ) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvveosmo3.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvveosmo3.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659748221
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    if string == \"\" then return 0\n    if substring\
    \ == \"\" then return 0\n    if substring in string then return 1\n    \n    count\
    \ = 0\n    \n    for c in string:\n        if c == substring[0] then\n       \
    \     count = count + 1\n            \n            if substring[1:] \u2209 string\
    \ then\n                count = count + 1\n            \n            if substring[1:]\
    \ == string then\n                count = count + 1\n            \n          \
    \  if substring[1:] == string[1:] then\n                count = count + 1\n  \
    \          \n            if substring[1:] == string[1:] then\n               \
    \ count = count + 1\n            \n            if substring[1:] == string[1:]\
    \ then\n                count = count + 1\n            \n            if substring[1:]\
    \ == string[1:] then\n                count = count + 1\n            \n      \
    \      if substring[1:] == string[1:] then\n                count = count + 1\n\
    \            \n            if substring[1:] == string[1:] then\n             \
    \   count = count + 1\n            \n            if substring[1:] == string[1:]\
    \ then\n                count = count + 1\n            \n            if substring[1:]\
    \ == string[1:] then\n                count = count + 1\n            \n      \
    \      if substring[1:] == string[1:] then\n                count = count + 1\n\
    \            \n            if substring[1:] == string[1:] then\n             \
    \   count = count + 1\n            \n            if substring[1:] == string[1:]\
    \ then\n                count = count + 1\n            \n            if substring[1:]\
    \ == string[1:] then\n                count = count + 1\n            \n      \
    \      if substring[1:] == string[1:] then\n                count = count + 1\n\
    \            \n            if substring[1:] == string[1:] then\n             \
    \   count = count + 1\n            \n            if substring[1:] == string[1:]\
    \ then\n                count = count + 1\n            \n            if substring[1:]\
    \ == string[1:] then\n                count = count + 1\n            \n      \
    \      if substring[1:] == string[1:] then\n                count = count + 1\n\
    \            \n            if substring[1:] == string[1:] then\n             \
    \   count = count + 1\n            \n            if substring[1:] == string[1:]\
    \ then\n                count = count + 1\n            \n            if substring[1:]\
    \ == string[1:] then\n                count = count + 1\n            \n      \
    \      if substring[1:] == string[1:] then\n                count = count + 1\n\
    \            \n            if substring[1:] == string[1:] then\n             \
    \   count = count + 1\n            \n            if substring[1:] == string[1:]\
    \ then\n                count = count + 1\n            \n            if substring[1:]\
    \ == string[1:] then\n                count = count + 1\n            \n      \
    \      if substring[1:] == string[1:] then\n                count = count + 1\n\
    \            \n            if substring[1:] == string[1:] then\n             \
    \   count = count + 1\n            \n            if substring[1:] == string[1:]\
    \ then\n                count = count + 1\n            \nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqn_i2kpj.jl:4\nin expression starting at /tmp/tmpqn_i2kpj.jl:4\n"
  stdout: ''
  timestamp: 1659748225
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    \n    for char in string\n  \
    \      if char == substring[1]\n            count += 1\n        elseif char ==\
    \ substring[2]\n            count += 1\n        elseif char == substring[3]\n\
    \            count += 1\n        elseif char == substring[4]\n            count\
    \ += 1\n        elseif char == substring[5]\n            count += 1\n        elseif\
    \ char == substring[6]\n            count += 1\n        elseif char == substring[7]\n\
    \            count += 1\n        elseif char == substring[8]\n            count\
    \ += 1\n        elseif char == substring[9]\n            count += 1\n        elseif\
    \ char == substring[10]\n            count += 1\n        elseif char == substring[11]\n\
    \            count += 1\n        elseif char == substring[12]\n            count\
    \ += 1\n        elseif char == substring[13]\n            count += 1\n       \
    \ elseif char == substring[14]\n            count += 1\n        elseif char ==\
    \ substring[15]\n            count += 1\n        elseif char == substring[16]\n\
    \            count += 1\n        elseif char == substring[17]\n            count\
    \ += 1\n        elseif char == substring[18]\n            count += 1\n       \
    \ elseif char == substring[19]\n            count += 1\n        elseif char ==\
    \ substring[20]\n            count += 1\n        elseif char == substring[21]\n\
    \            count += 1\n        elseif char == substring[22]\n            count\
    \ += 1\n        elseif char == substring[23]\n            count += 1\n       \
    \ elseif char == substring[24]\n            count += 1\n        elseif char ==\
    \ substring[25]\n            count += 1\n        elseif char == substring[26]\n\
    \            count += 1\n        elseif char == substring[27]\n            count\
    \ += 1\n        elseif char == substring[28]\n            count += 1\n       \
    \ elseif char == substring[29]\n            count += 1\n        elseif char ==\
    \ substring[30]\n            count += 1\n        elseif char == substring[31]\n\
    \            count += 1\n        elseif char == substring[32]\n            count\
    \ += 1\n        elseif char == substring[33]\n            count += 1\n       \
    \ elseif char == substring[34]\n            count += 1\n        elseif char ==\
    \ substring[35]\n            count += 1\n        elseif char == substring[36]\n\
    \            count += 1\n        elseif char == substring[37]\n            count\
    \ += 1\n        elseif char == substring[38]\n            count += 1\n       \
    \ elseif char == substring[39]\n            count += 1\n        elseif char ==\
    \ substring[40]\n            count += 1\n        elseif char == substring[41]\n\
    \            count += 1\n        elseif char == substring[42]\n            count\
    \ += 1\n        elseif char == substring[43]\n            count += 1\n       \
    \ elseif char == substring[44]\n            \nusing Test\n\n@testset begin\n\n\
    candidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwinpbuvn.jl:1\nin expression starting at /tmp/tmpwinpbuvn.jl:1\n"
  stdout: ''
  timestamp: 1659748225
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    if string == \"\" || substring == \"\"\n   \
    \     return 0\n    \n    count = 0\n    \n    for c in string\n        if c ==\
    \ substring[0]\n            count += 1\n            \n            if count > 1\n\
    \                return count\n            \n            count = 0\n        else\n\
    \            count = 0\n    end\n    \n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp0iuq98n_.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0iuq98n_.jl:1\n\
    in expression starting at /tmp/tmp0iuq98n_.jl:1\n"
  stdout: ''
  timestamp: 1659748225
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string\n        if c\
    \ == substring\n            count += 1\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvveosmo3.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmpvveosmo3.jl:18\n  Expression: candidate(\"\
    xyxyxyx\", \"x\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvveosmo3.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvveosmo3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpvveosmo3.jl:19\n  Expression: candidate(\"cacacacac\", \"\
    cac\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvveosmo3.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvveosmo3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpvveosmo3.jl:20\n  Expression: candidate(\"john doe\", \"john\"\
    ) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvveosmo3.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvveosmo3.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659748221
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string:\n        if\
    \ c == substring:\n            count += 1\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzk7r6msy.jl:6\nin expression starting at /tmp/tmpzk7r6msy.jl:6\n"
  stdout: ''
  timestamp: 1659748220
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for char in string\n\
    \        if char == substring[1]\n            count += 1\n        elseif char\
    \ == substring[2]\n            count += 1\n        elseif char == substring[3]\n\
    \            count += 1\n        elseif char == substring[4]\n            count\
    \ += 1\n        elseif char == substring[5]\n            count += 1\n        elseif\
    \ char == substring[6]\n            count += 1\n        elseif char == substring[7]\n\
    \            count += 1\n        elseif char == substring[8]\n            count\
    \ += 1\n        elseif char == substring[9]\n            count += 1\n        elseif\
    \ char == substring[10]\n            count += 1\n        elseif char == substring[11]\n\
    \            count += 1\n        elseif char == substring[12]\n            count\
    \ += 1\n        elseif char == substring[13]\n            count += 1\n       \
    \ elseif char == substring[14]\n            count += 1\n        elseif char ==\
    \ substring[15]\n            count += 1\n        elseif char == substring[16]\n\
    \            count += 1\n        elseif char == substring[17]\n            count\
    \ += 1\n        elseif char == substring[18]\n            count += 1\n       \
    \ elseif char == substring[19]\n            count += 1\n        elseif char ==\
    \ substring[20]\n            count += 1\n        elseif char == substring[21]\n\
    \            count += 1\n        elseif char == substring[22]\n            count\
    \ += 1\n        elseif char == substring[23]\n            count += 1\n       \
    \ elseif char == substring[24]\n            count += 1\n        elseif char ==\
    \ substring[25]\n            count += 1\n        elseif char == substring[26]\n\
    \            count += 1\n        elseif char == substring[27]\n            count\
    \ += 1\n        elseif char == substring[28]\n            count += 1\n       \
    \ elseif char == substring[29]\n            count += 1\n        elseif char ==\
    \ substring[30]\n            count += 1\n        elseif char == substring[31]\n\
    \            count += 1\n        elseif char == substring[32]\n            count\
    \ += 1\n        elseif char == substring[33]\n            count += 1\n       \
    \ elseif char == substring[34]\n            count += 1\n        elseif char ==\
    \ substring[35]\n            count += 1\n        elseif char == substring[36]\n\
    \            count += 1\n        elseif char == substring[37]\n            count\
    \ += 1\n        elseif char == substring[38]\n            count += 1\n       \
    \ elseif char == substring[39]\n            count += 1\n        elseif char ==\
    \ substring[40]\n            count += 1\n        elseif char == substring[41]\n\
    \            count += 1\n        elseif char == substring[42]\n            count\
    \ += 1\n        elseif char == substring[43]\n            count += 1\n       \
    \ elseif char == substring[44]\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwzv4d5wk.jl:1\nin expression starting at /tmp/tmpwzv4d5wk.jl:1\n"
  stdout: ''
  timestamp: 1659748223
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string:\n        if\
    \ c == substring:\n            count += 1\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzk7r6msy.jl:6\nin expression starting at /tmp/tmpzk7r6msy.jl:6\n"
  stdout: ''
  timestamp: 1659748220
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string\n        if c\
    \ == substring\n            count += 1\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvveosmo3.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmpvveosmo3.jl:18\n  Expression: candidate(\"\
    xyxyxyx\", \"x\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvveosmo3.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvveosmo3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpvveosmo3.jl:19\n  Expression: candidate(\"cacacacac\", \"\
    cac\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvveosmo3.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvveosmo3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpvveosmo3.jl:20\n  Expression: candidate(\"john doe\", \"john\"\
    ) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvveosmo3.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvveosmo3.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659748221
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for c in string:\n\
    \        if c == substring[0]:\n            count += 1\n            \n       \
    \     if substring[1:] == \"\"\n                count += 1\n            \n   \
    \         if substring[1:] == c\n                count += 1\n            \n  \
    \          if substring[1:] == substring[1:][substring[1:] == substring[1:][substring[1:]\
    \ != \"\"]]\n                count += 1\n            \n            if substring[1:]\
    \ == substring[1:][substring[1:] == substring[1:][substring[1:] == substring[1:][substring[1:]\
    \ != \"\"]]\n                count += 1\n            \n            if substring[1:]\
    \ == substring[1:][substring[1:] == substring[1:][substring[1:] == substring[1:][substring[1:]\
    \ != \"\"]]\n                count += 1\n            \n            if substring[1:]\
    \ == substring[1:][substring[1:] == substring[1:][substring[1:] == substring[1:][substring[1:]\
    \ != \"\"]]\n                count += 1\n            \n            if substring[1:]\
    \ == substring[1:][substring[1:] == substring[1:][substring[1:] == substring[1:][substring[1:]\
    \ != \"\"]]\n                count += 1\n            \n            if substring[1:]\
    \ == substring[1:][substring[1:] == substring[1:][substring[1:] == substring[1:][substring[1:]\
    \ != \"\"]]\n                count += 1\n            \n            if substring[1:]\
    \ == substring[1:][substring[1:] == substring[1:][substring[1:] == substring[1:][substring[1:]\
    \ != \"\"]]\n                count += 1\n            \n            if substring[1:]\
    \ == substring[1:][substring[1:] == substring[1:][substring[1:] == substring[1:][substring[1:]\
    \ != \"\"]]\n                count += 1\n            \n            if substring[1:]\
    \ == substring[1:][substring[1:] == substring[1:][substring[1:] == substring[1:][substring[1:]\
    \ != \"\"]]\n                count += 1\n            \n            if substring[1:]\
    \ == substring[1:][substring[1:] == substring[1:][substring[1:] == substring[1:][substring[1:]\
    \ != \"\"]]\n                count += 1\n            \n            if substring[1:]\
    \ == substring[1:][substring[1:] == substring[1:][substring[1:] == substring[1:][substring[1:]\
    \ != \"\"]]\n                count += 1\n            \n            if substring[1:]\
    \ == substring[1:][substring[1:] == substring[1:][substring[1:] == substring[1:][substring[1:]\
    \ != \"\"]]\n                count += 1\n            \n            if substring[1:]\
    \ == substring[1:][substring[1:] == substring[1:][substring[1:] == substring[1:][substring[1:]\
    \ != \"\"]]\n                count += 1\n            \n            if substring[1:]\
    \ == substring[1:][substring[1:] == substring[1:][substring[1:] == substring[1:][substring[1:]\
    \ != \"\"]]\n                count += 1\n            \n            if substring[1:]\
    \ == substring[1:][substring[1:] == substring[1:][substring[1:] == substring[1:][substring[1:]\
    \ != \"\"]]\n                count += 1\n            \n            if substring[1:]\
    \ == substring[1:][substring[1:] == substring[1:][substring[1:] == substring[1:][substring[1:]\
    \ != \"\"]]\n\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t\
    @test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\
    \t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\"\
    , \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1c5ffkak.jl:8\nin expression starting at /tmp/tmp1c5ffkak.jl:8\n"
  stdout: ''
  timestamp: 1659748225
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    if string == \"\" then return 0\n    if substring\
    \ == \"\" then return 0\n    \n    count = 0\n    \n    for c in string:\n   \
    \     if c == substring[0] then\n            count = count + 1\n        elseif\
    \ c == substring[1] then\n            count = count + 1\n        elseif c == substring[2]\
    \ then\n            count = count + 1\n        elseif c == substring[3] then\n\
    \            count = count + 1\n        elseif c == substring[4] then\n      \
    \      count = count + 1\n        elseif c == substring[5] then\n            count\
    \ = count + 1\n        elseif c == substring[6] then\n            count = count\
    \ + 1\n        elseif c == substring[7] then\n            count = count + 1\n\
    \        elseif c == substring[8] then\n            count = count + 1\n      \
    \  elseif c == substring[9] then\n            count = count + 1\n        elseif\
    \ c == substring[10] then\n            count = count + 1\n        elseif c ==\
    \ substring[11] then\n            count = count + 1\n        elseif c == substring[12]\
    \ then\n            count = count + 1\n        elseif c == substring[13] then\n\
    \            count = count + 1\n        elseif c == substring[14] then\n     \
    \       count = count + 1\n        elseif c == substring[15] then\n          \
    \  count = count + 1\n        elseif c == substring[16] then\n            count\
    \ = count + 1\n        elseif c == substring[17] then\n            count = count\
    \ + 1\n        elseif c == substring[18] then\n            count = count + 1\n\
    \        elseif c == substring[19] then\n            count = count + 1\n     \
    \   elseif c == substring[20] then\n            count = count + 1\n        elseif\
    \ c == substring[21] then\n            count = count + 1\n        elseif c ==\
    \ substring[22] then\n            count = count + 1\n        elseif c == substring[23]\
    \ then\n            count = count + 1\n        elseif c == substring[24] then\n\
    \            count = count + 1\n        elseif c == substring[25] then\n     \
    \       count = count + 1\n        elseif c == substring[26] then\n          \
    \  count = count + 1\n        elseif c == substring[27] then\n            count\
    \ = count + 1\n        elseif c == substring[28] then\n            count = count\
    \ + 1\n        elseif c == substring[29] then\n            count = count + 1\n\
    \        elseif c == substring[30] then\n            count = count + 1\n     \
    \   elseif c == substring[31] then\n            count = count + 1\n        elseif\
    \ c == substring[32] then\n            count = count + 1\n        elseif c ==\
    \ substring[33] then\n            count = count + 1\n        elseif c == substring[34]\
    \ then\n            count = count + 1\n        elseif c == substring[35] then\n\
    \            count = count + 1\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpu8ihhm7k.jl:4\nin expression starting at /tmp/tmpu8ihhm7k.jl:4\n"
  stdout: ''
  timestamp: 1659748225
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for char in string\n\
    \        if char == substring[1]\n            count += 1\n        end\n    end\n\
    \    \n    return count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"abc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"c\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"aba\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"abca\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"abcabc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"abcabcabc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"abcabcabcabc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"abcabcabcabcabc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"abcabcabcabcabcabc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"abcabcabcabcabcabcabc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"abcabcabcabcabcabcabcabc\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"abcabcabcabcabcabcabcabcabc\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"abcabcabcabcabcabcabcabcabcabc\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"abcabcabcabcabcabcabcabcabcabcabc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abcabcabcabcabcabcabcabcabcabcabcabc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcab\nusing Test\n\n\
    @testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\")\
    \ == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplcfslb28.jl:15\nin expression starting at\
    \ /tmp/tmplcfslb28.jl:15\n"
  stdout: ''
  timestamp: 1659748225
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    if string == \"\" || substring == \"\"\n   \
    \     return 0\n    end\n    \n    substring = lowercase(substring)\n    string\
    \ = lowercase(string)\n    \n    count = 0\n    \n    for c in string\n      \
    \  if c == substring[1]\n            count += 1\n        elseif c == substring[2]\n\
    \            count += 1\n        elseif c == substring[3]\n            count +=\
    \ 1\n        elseif c == substring[4]\n            count += 1\n        elseif\
    \ c == substring[5]\n            count += 1\n        elseif c == substring[6]\n\
    \            count += 1\n        elseif c == substring[7]\n            count +=\
    \ 1\n        elseif c == substring[8]\n            count += 1\n        elseif\
    \ c == substring[9]\n            count += 1\n        elseif c == substring[10]\n\
    \            count += 1\n        elseif c == substring[11]\n            count\
    \ += 1\n        elseif c == substring[12]\n            count += 1\n        elseif\
    \ c == substring[13]\n            count += 1\n        elseif c == substring[14]\n\
    \            count += 1\n        elseif c == substring[15]\n            count\
    \ += 1\n        elseif c == substring[16]\n            count += 1\n        elseif\
    \ c == substring[17]\n            count += 1\n        elseif c == substring[18]\n\
    \            count += 1\n        elseif c == substring[19]\n            count\
    \ += 1\n        elseif c == substring[20]\n            count += 1\n        elseif\
    \ c == substring[21]\n            count += 1\n        elseif c == substring[22]\n\
    \            count += 1\n        elseif c == substring[23]\n            count\
    \ += 1\n        elseif c == substring[24]\n            count += 1\n        elseif\
    \ c == substring[25]\n            count += 1\n        elseif c == substring[26]\n\
    \            count += 1\n        elseif c == substring[27]\n            count\
    \ += 1\n        elseif c == substring[28]\n            count += 1\n        elseif\
    \ c == substring[29]\n            count += 1\n        elseif c == substring[30]\n\
    \            count += 1\n        elseif c == substring[31]\n            count\
    \ += 1\n        elseif c == substring[32]\n            count += 1\n        elseif\
    \ c == substring[33]\n            count += 1\n        elseif c == substring[34]\n\
    \            count += 1\n        elseif c == substring[35]\n            count\
    \ += 1\n        elseif c == substring[36]\n            count += 1\n        elseif\
    \ c == substring[37]\n            count += 1\n        elseif c == substring[38]\n\
    \            count += 1\n        elseif c == substring[39]\n            count\
    \ += 1\n        elseif c == substring[40]\n            count += 1\n        elseif\
    \ c == substring[41]\n            count += 1\n        elseif c == substring[42]\n\
    \            count += 1\n        elseif c == substring[43]\n            count\
    \ += 1\n        elseif c == substring[44]\n            count += 1\n        elseif\
    \ c == substring[45]\n            count += 1\nusing Test\n\n@testset begin\n\n\
    candidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7eqnw51e.jl:1\nin expression starting at /tmp/tmp7eqnw51e.jl:1\n"
  stdout: ''
  timestamp: 1659748225
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string:\n        if\
    \ c == substring:\n            count += 1\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzk7r6msy.jl:6\nin expression starting at /tmp/tmpzk7r6msy.jl:6\n"
  stdout: ''
  timestamp: 1659748220
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for char in string\n\
    \        if char == substring\n            count += 1\n        end\n    end\n\
    \    \n    return count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"abc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\
    bcb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bca\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcb\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcc\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bcb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bcc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\
    bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bca\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcb\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"bcc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bcb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\
    bcc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bca\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcb\")\n\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmuydfs3r.jl:15\nin expression starting at\
    \ /tmp/tmpmuydfs3r.jl:15\n"
  stdout: ''
  timestamp: 1659748226
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    if string == \"\" then return 0 \n    if substring\
    \ == \"\" then return 0 \n    \n    string_length = string.length\n    substring_length\
    \ = substring.length\n    \n    i = 0\n    j = 0\n    \n    while i < string_length\
    \ and j < substring_length do\n        if string[i] == substring[j] then\n   \
    \         i += 1\n            j += 1\n        else\n            if j == substring_length\
    \ then\n                return i + 1\n            else\n                j += 1\n\
    \            end\n        end\n    end\n    \n    return 0\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\")\
    \ == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptt3v9cox.jl:4\nin expression starting at /tmp/tmptt3v9cox.jl:4\n"
  stdout: ''
  timestamp: 1659748226
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for char in string\n        if\
    \ char == substring\n            count += 1\n        end\n    end\n    return\
    \ count\nend\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t\
    @test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\
    \t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\"\
    , \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp95shadwu.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmp95shadwu.jl:18\n  Expression: candidate(\"\
    xyxyxyx\", \"x\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp95shadwu.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp95shadwu.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp95shadwu.jl:19\n  Expression: candidate(\"cacacacac\", \"\
    cac\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp95shadwu.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp95shadwu.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp95shadwu.jl:20\n  Expression: candidate(\"john doe\", \"john\"\
    ) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp95shadwu.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp95shadwu.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659748228
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    \n    for char in string\n  \
    \      if char == substring\n            count += 1\n        end\n    end\n  \
    \  \n    return count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"abc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\
    abcde\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcde\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcd\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcd\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcd\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"bcd\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bcd\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bcd\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\
    bcd\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcd\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcd\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcd\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcd\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"bcd\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bcd\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bcd\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\
    bcd\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcd\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcd\")\n</cell\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxllwoz00.jl:14\nin expression starting at\
    \ /tmp/tmpxllwoz00.jl:14\n"
  stdout: ''
  timestamp: 1659748226
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string\n        if c\
    \ == substring\n            count += 1\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvveosmo3.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmpvveosmo3.jl:18\n  Expression: candidate(\"\
    xyxyxyx\", \"x\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvveosmo3.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvveosmo3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpvveosmo3.jl:19\n  Expression: candidate(\"cacacacac\", \"\
    cac\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvveosmo3.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvveosmo3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpvveosmo3.jl:20\n  Expression: candidate(\"john doe\", \"john\"\
    ) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvveosmo3.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvveosmo3.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659748221
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for c in string:\n\
    \        if c == substring[0]:\n            count += 1\n        elif c == substring[1]:\n\
    \            count -= 1\n            \n    return count\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqjxjotau.jl:8\nin expression starting at /tmp/tmpqjxjotau.jl:8\n"
  stdout: ''
  timestamp: 1659748227
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for char in string\n\
    \        if char == substring[1]\n            count += 1\n        elseif char\
    \ == substring[2]\n            count += 1\n        elseif char == substring[3]\n\
    \            count += 1\n        elseif char == substring[4]\n            count\
    \ += 1\n        elseif char == substring[5]\n            count += 1\n        elseif\
    \ char == substring[6]\n            count += 1\n        elseif char == substring[7]\n\
    \            count += 1\n        elseif char == substring[8]\n            count\
    \ += 1\n        elseif char == substring[9]\n            count += 1\n        elseif\
    \ char == substring[10]\n            count += 1\n        elseif char == substring[11]\n\
    \            count += 1\n        elseif char == substring[12]\n            count\
    \ += 1\n        elseif char == substring[13]\n            count += 1\n       \
    \ elseif char == substring[14]\n            count += 1\n        elseif char ==\
    \ substring[15]\n            count += 1\n        elseif char == substring[16]\n\
    \            count += 1\n        elseif char == substring[17]\n            count\
    \ += 1\n        elseif char == substring[18]\n            count += 1\n       \
    \ elseif char == substring[19]\n            count += 1\n        elseif char ==\
    \ substring[20]\n            count += 1\n        elseif char == substring[21]\n\
    \            count += 1\n        elseif char == substring[22]\n            count\
    \ += 1\n        elseif char == substring[23]\n            count += 1\n       \
    \ elseif char == substring[24]\n            count += 1\n        elseif char ==\
    \ substring[25]\n            count += 1\n        elseif char == substring[26]\n\
    \            count += 1\n        elseif char == substring[27]\n            count\
    \ += 1\n        elseif char == substring[28]\n            count += 1\n       \
    \ elseif char == substring[29]\n            count += 1\n        elseif char ==\
    \ substring[30]\n            count += 1\n        elseif char == substring[31]\n\
    \            count += 1\n        elseif char == substring[32]\n            count\
    \ += 1\n        elseif char == substring[33]\n            count += 1\n       \
    \ elseif char == substring[34]\n            count += 1\n        elseif char ==\
    \ substring[35]\n            count += 1\n        elseif char == substring[36]\n\
    \            count += 1\n        elseif char == substring[37]\n            count\
    \ += 1\n        elseif char == substring[38]\n            count += 1\n       \
    \ elseif char == substring[39]\n            count += 1\n        elseif char ==\
    \ substring[40]\n            count += 1\n        elseif char == substring[41]\n\
    \            count += 1\n        elseif char == substring[42]\n            count\
    \ += 1\n        elseif char == substring[43]\n            count += 1\n       \
    \ elseif char == substring[44]\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwzv4d5wk.jl:1\nin expression starting at /tmp/tmpwzv4d5wk.jl:1\n"
  stdout: ''
  timestamp: 1659748223
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for char in string\n\
    \        if char == substring\n            count += 1\n        end\n    end\n\
    \    \n    return count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"The quick brown fox jumps over the\
    \ lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"The quick brown fox jumps over the\
    \ lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"The quick brown fox jumps over the\
    \ lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"The quick brown fox jumps over the\
    \ lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"The quick brown fox jumps over the\
    \ lazy dog\", \"fox\")\n</cell\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmxmlf3yz.jl:15\nin expression starting at\
    \ /tmp/tmpmxmlf3yz.jl:15\n"
  stdout: ''
  timestamp: 1659748226
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string:\n        if\
    \ c == substring:\n            count += 1\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzk7r6msy.jl:6\nin expression starting at /tmp/tmpzk7r6msy.jl:6\n"
  stdout: ''
  timestamp: 1659748220
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for char in string:\n\
    \        if char == substring[0]:\n            count += 1\n            if char\
    \ == substring[1]:\n                count += 1\n                if char == substring[2]:\n\
    \                    count += 1\n                    if char == substring[3]:\n\
    \                        count += 1\n                        if char == substring[4]:\n\
    \                            count += 1\n                            if char ==\
    \ substring[5]:\n                                count += 1\n                \
    \                if char == substring[6]:\n                                  \
    \  count += 1\n                                    if char == substring[7]:\n\
    \                                        count += 1\n                        \
    \                if char == substring[8]:\n                                  \
    \          count += 1\n                                            if char ==\
    \ substring[9]:\n                                                count += 1\n\
    \                                                if char == substring[10]:\n \
    \                                                   count += 1\n             \
    \                                       if char == substring[11]:\n          \
    \                                              count += 1\n                  \
    \                                      if char == substring[12]:\n           \
    \                                                 count += 1\n               \
    \                                             if char == substring[13]:\n    \
    \                                                            count += 1\n    \
    \                                                            if char == substring[14]:\n\
    \                                                                    count +=\
    \ 1\n                                                                    if char\
    \ == substring[15]:\n                                                        \
    \                count += 1\n                                                \
    \        if char == substring[16]:\n                                         \
    \                   count += 1\n                                             \
    \               if char == substring[17]:\n                                  \
    \                              count += 1\n                                  \
    \                              if char == substring[18]:\n                   \
    \                                                 count += 1\n               \
    \                                                     if char == substring[19]:\n\
    \                                                                        count\
    \ += 1\n                                                        if char == substring[20]:\n\
    \                                                            count += 1\n    \
    \                                                        if char == substring[21]:\n\
    \                                                                count += 1\n\
    \                                                                if char == substring[22]:\n\
    \                                                                    count +=\
    \ 1\n                                                                    if char\
    \ == substring[23]:\n                                                        \
    \                count += 1\n                                                \
    \        if char == substring[24]:\n                                         \
    \                   count += 1\n                                             \
    \               if char == substring[25]:\n                                  \
    \                              count += 1\n                                  \
    \                              if char == substring[26]:\n                   \
    \                                                 count += 1\n               \
    \                                                     if char == substring[27]:\n\
    \                                                                        count\
    \ += 1\n                                                        if char == substring[28]:\n\
    \                                                            count += 1\n    \
    \                                                        if char == substring[29]:\n\
    \                                                                count += 1\n\
    \                                                                if char == substring[30]:\n\
    \                                                                    count +=\
    \ 1\n                                                                    if char\
    \ == substring[31]:\n                                                        \
    \                count += 1\n                                                \
    \        if char == substring[32]:\n                                         \
    \                   count += 1\n                                             \
    \               if char == substring[33]:\n                                  \
    \                              count += 1\n                                  \
    \                              if char == substring[34]:\n                   \
    \                                                 count += 1\n               \
    \                                                     if char == substring[35]:\n\
    \                                                                        count\
    \ += 1\n                                                        if char == substring[36]:\n\
    \                                                            count += 1\n    \
    \                                                        if char == substring[37]:\n\
    \                                                                count += 1\n\
    \                                                                if char == substring[38]:\n\
    \                                                                    count +=\
    \ 1\n                                                                    if char\
    \ == substring[39]:\n                                                        \
    \                count += 1\n                                                \
    \        if char == substring[40]:\n                                         \
    \                   count += 1\n                                             \
    \               if char == substring[41]:\n\nusing Test\n\n@testset begin\n\n\
    candidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqjara8wu.jl:8\nin expression starting at /tmp/tmpqjara8wu.jl:8\n"
  stdout: ''
  timestamp: 1659748227
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    \n    for c in string:\n    \
    \    if c == substring:\n            count += 1\n        \n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw_jxfh9r.jl:7\nin expression starting at /tmp/tmpw_jxfh9r.jl:7\n"
  stdout: ''
  timestamp: 1659748227
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for c in string:\n\
    \        if c == substring[0]:\n            count += 1\n            \n       \
    \     if count == len(substring):\n                return count\n            \n\
    \            count = 0\n            \n        elif c == substring[1]:\n      \
    \      count += 1\n            \n            if count == len(substring):\n   \
    \             return count\n            \n            count = 0\n            \n\
    \        elif c == substring[2]:\n            count += 1\n            \n     \
    \       if count == len(substring):\n                return count\n          \
    \  \n            count = 0\n            \n        elif c == substring[3]:\n  \
    \          count += 1\n            \n            if count == len(substring):\n\
    \                return count\n            \n            count = 0\n         \
    \   \n        elif c == substring[4]:\n            count += 1\n            \n\
    \            if count == len(substring):\n                return count\n     \
    \       \n            count = 0\n            \n        elif c == substring[5]:\n\
    \            count += 1\n            \n            if count == len(substring):\n\
    \                return count\n            \n            count = 0\n         \
    \   \n        elif c == substring[6]:\n            count += 1\n            \n\
    \            if count == len(substring):\n                return count\n     \
    \       \n            count = 0\n            \n        elif c == substring[7]:\n\
    \            count += 1\n            \n            if count == len(substring):\n\
    \                return count\n            \n            count = 0\n         \
    \   \n        elif c == substring[8]:\n            count += 1\n            \n\
    \            if count == len(substring):\n                return count\n     \
    \       \n            count = 0\n            \n        elif c == substring[9]:\n\
    \            count += 1\n            \n            if count == len(substring):\n\
    \                return count\n            \n            count = 0\n         \
    \   \n        elif c == substring[10]:\n            count += 1\n            \n\
    \            if count == len(substring):\n                return count\n     \
    \       \n            count = 0\n            \n        elif c == substring[11]:\n\
    \            count += 1\n            \n            if count == len(substring):\n\
    \                return count\n            \n            count = 0\n         \
    \   \n        elif c == substring[12]:\n            count += 1\n            \n\
    \            if count == len(substring):\n                return count\n     \
    \       \n            count = 0\n            \n        elif c == substring[13]:\n\
    \            count += 1\n            \n            if count == len(substring):\n\
    \                return count\n            \n            count = 0\n         \
    \   \n        elif c == substring[14]:\n            count += 1\n            \n\
    \            if count == len(substring):\n                return count\n     \
    \       \n            count = 0\n            \n        elif c == substring[15]:\n\
    \            count += 1\n            \n            if count == len(substring):\n\
    \                return count\n            \n            count = 0\n         \
    \   \n        elif c == substring[16]:\n            count += 1\n            \n\
    \            if count == len(substring):\n                return count\n     \
    \       \n            count = 0\n            \n        elif c == substring[17]:\n\
    \            count += 1\n            \n            if count == len(substring):\n\
    \                return count\n            \n            count = 0\n         \
    \   \n        elif c == substring[18]:\n            count += 1\n            \n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpso_h59p0.jl:8\nin expression starting at /tmp/tmpso_h59p0.jl:8\n"
  stdout: ''
  timestamp: 1659748227
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for char in string\n\
    \        if char == substring\n            count += 1\n        end\n    end\n\
    \    \n    return count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"abc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\
    abcde\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcde\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"cde\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"de\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"c\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcab\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmme48j3o.jl:15\nin expression starting at\
    \ /tmp/tmpmme48j3o.jl:15\n"
  stdout: ''
  timestamp: 1659748227
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string\n        if c\
    \ == substring\n            count += 1\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvveosmo3.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmpvveosmo3.jl:18\n  Expression: candidate(\"\
    xyxyxyx\", \"x\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvveosmo3.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvveosmo3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpvveosmo3.jl:19\n  Expression: candidate(\"cacacacac\", \"\
    cac\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvveosmo3.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvveosmo3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpvveosmo3.jl:20\n  Expression: candidate(\"john doe\", \"john\"\
    ) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvveosmo3.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvveosmo3.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659748221
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string\n        if c\
    \ == substring\n            count += 1\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvveosmo3.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmpvveosmo3.jl:18\n  Expression: candidate(\"\
    xyxyxyx\", \"x\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvveosmo3.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvveosmo3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpvveosmo3.jl:19\n  Expression: candidate(\"cacacacac\", \"\
    cac\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvveosmo3.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvveosmo3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpvveosmo3.jl:20\n  Expression: candidate(\"john doe\", \"john\"\
    ) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvveosmo3.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvveosmo3.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659748221
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    \n    for c in string\n     \
    \   if c == substring\n            count += 1\n        end\n    end\n    \n  \
    \  return count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"abc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\
    bcd\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abcd\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcde\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcdea\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcdef\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcdefg\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcdefgh\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcdefghi\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcdefghij\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcdefghijk\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcdefghijkl\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcdefghijklm\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcdefghijklmn\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcdefghijklmno\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcdefghijklmnop\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcdefghijklmnopq\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcdefghijklmnopqr\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcdefghijklmnopqrs\"\
    )\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmaz3hd_u.jl:14\nin expression starting at\
    \ /tmp/tmpmaz3hd_u.jl:14\n"
  stdout: ''
  timestamp: 1659748227
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for char in string\n\
    \        if char == substring\n            count += 1\n        end\n    end\n\
    \    \n    return count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"abc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bcd\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\
    abcd\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcde\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcdc\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcdea\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcdeab\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcdeabc\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcdeabcd\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcdeabcde\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcdeabcdea\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcdeabcdeab\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcdeabcdeabc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcdeabcdeabcd\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcdeabcdeabcde\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcdeabcdeabcdea\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcdeabcdeabcdeab\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcdeabcdeabcdeabc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcdeabcdeabcdeabcd\"\
    )\n</cell>\n<code language=julia-1.5\nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeb2ts_e7.jl:15\nin expression starting at\
    \ /tmp/tmpeb2ts_e7.jl:15\n"
  stdout: ''
  timestamp: 1659748227
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string\n        if c\
    \ == substring\n            count += 1\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvveosmo3.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmpvveosmo3.jl:18\n  Expression: candidate(\"\
    xyxyxyx\", \"x\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvveosmo3.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvveosmo3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpvveosmo3.jl:19\n  Expression: candidate(\"cacacacac\", \"\
    cac\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvveosmo3.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvveosmo3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpvveosmo3.jl:20\n  Expression: candidate(\"john doe\", \"john\"\
    ) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvveosmo3.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvveosmo3.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659748221
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    if string == \"\" || substring == \"\"\n   \
    \     return 0\n    end\n    \n    count = 0\n    \n    for c in string\n    \
    \    if c == substring[1]\n            count += 1\n        elseif c == substring[2]\n\
    \            count += 1\n        elseif c == substring[3]\n            count +=\
    \ 1\n        elseif c == substring[4]\n            count += 1\n        elseif\
    \ c == substring[5]\n            count += 1\n        elseif c == substring[6]\n\
    \            count += 1\n        elseif c == substring[7]\n            count +=\
    \ 1\n        elseif c == substring[8]\n            count += 1\n        elseif\
    \ c == substring[9]\n            count += 1\n        elseif c == substring[10]\n\
    \            count += 1\n        elseif c == substring[11]\n            count\
    \ += 1\n        elseif c == substring[12]\n            count += 1\n        elseif\
    \ c == substring[13]\n            count += 1\n        elseif c == substring[14]\n\
    \            count += 1\n        elseif c == substring[15]\n            count\
    \ += 1\n        elseif c == substring[16]\n            count += 1\n        elseif\
    \ c == substring[17]\n            count += 1\n        elseif c == substring[18]\n\
    \            count += 1\n        elseif c == substring[19]\n            count\
    \ += 1\n        elseif c == substring[20]\n            count += 1\n        elseif\
    \ c == substring[21]\n            count += 1\n        elseif c == substring[22]\n\
    \            count += 1\n        elseif c == substring[23]\n            count\
    \ += 1\n        elseif c == substring[24]\n            count += 1\n        elseif\
    \ c == substring[25]\n            count += 1\n        elseif c == substring[26]\n\
    \            count += 1\n        elseif c == substring[27]\n            count\
    \ += 1\n        elseif c == substring[28]\n            count += 1\n        elseif\
    \ c == substring[29]\n            count += 1\n        elseif c == substring[30]\n\
    \            count += 1\n        elseif c == substring[31]\n            count\
    \ += 1\n        elseif c == substring[32]\n            count += 1\n        elseif\
    \ c == substring[33]\n            count += 1\n        elseif c == substring[34]\n\
    \            count += 1\n        elseif c == substring[35]\n            count\
    \ += 1\n        elseif c == substring[36]\n            count += 1\n        elseif\
    \ c == substring[37]\n            count += 1\n        elseif c == substring[38]\n\
    \            count += 1\n        elseif c == substring[39]\n            count\
    \ += 1\n        elseif c == substring[40]\n            count += 1\n        elseif\
    \ c == substring[41]\n            count += 1\n        elseif c == substring[42]\n\
    \            count += 1\n        elseif c == substring[43]\n            count\
    \ += 1\n        elseif c == substring[44]\n            count += 1\n        elseif\
    \ c == substring[45]\n            count += 1\n        elseif c == substring[46]\n\
    \            count += 1\n        elseif c == substring\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpedi6wj0o.jl:1\nin expression starting at /tmp/tmpedi6wj0o.jl:1\n"
  stdout: ''
  timestamp: 1659748225
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    if string == \"\" || substring == \"\"\n   \
    \     return 0\n    end\n    \n    count = 0\n    \n    for c in string\n    \
    \    if c == substring[1]\n            count += 1\n        end\n    end\n    \n\
    \    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpegoqgv6d.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmpegoqgv6d.jl:25\n  Expression: candidate(\"\
    cacacacac\", \"cac\") == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpegoqgv6d.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpegoqgv6d.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     1      4\n"
  timestamp: 1659748228
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string\n        if c\
    \ == substring\n            count += 1\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvveosmo3.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmpvveosmo3.jl:18\n  Expression: candidate(\"\
    xyxyxyx\", \"x\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvveosmo3.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvveosmo3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpvveosmo3.jl:19\n  Expression: candidate(\"cacacacac\", \"\
    cac\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvveosmo3.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvveosmo3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpvveosmo3.jl:20\n  Expression: candidate(\"john doe\", \"john\"\
    ) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvveosmo3.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvveosmo3.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659748221
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string:\n        if\
    \ c == substring:\n            count += 1\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzk7r6msy.jl:6\nin expression starting at /tmp/tmpzk7r6msy.jl:6\n"
  stdout: ''
  timestamp: 1659748220
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string:\n        if\
    \ c == substring:\n            count += 1\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzk7r6msy.jl:6\nin expression starting at /tmp/tmpzk7r6msy.jl:6\n"
  stdout: ''
  timestamp: 1659748220
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string\n        if c\
    \ == substring\n            count += 1\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvveosmo3.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmpvveosmo3.jl:18\n  Expression: candidate(\"\
    xyxyxyx\", \"x\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvveosmo3.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvveosmo3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpvveosmo3.jl:19\n  Expression: candidate(\"cacacacac\", \"\
    cac\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvveosmo3.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvveosmo3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpvveosmo3.jl:20\n  Expression: candidate(\"john doe\", \"john\"\
    ) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvveosmo3.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvveosmo3.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659748221
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string\n        if c\
    \ == substring\n            count += 1\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvveosmo3.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmpvveosmo3.jl:18\n  Expression: candidate(\"\
    xyxyxyx\", \"x\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvveosmo3.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvveosmo3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpvveosmo3.jl:19\n  Expression: candidate(\"cacacacac\", \"\
    cac\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvveosmo3.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvveosmo3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpvveosmo3.jl:20\n  Expression: candidate(\"john doe\", \"john\"\
    ) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvveosmo3.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvveosmo3.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659748221
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for char in string\n\
    \        if char == substring\n            count += 1\n        end\n    end\n\
    \    \n    return count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and a substring and returns the number of times the substring appears\
    \ in the string. \nWrite a function that takes a string and a substring and returns\
    \ the number of times the substring appears in the string ignoring case. \nWrite\
    \ a function that takes a string and a substring and returns the number of times\
    \ the substring appears in the string ignoring case.\nWrite a function that takes\
    \ a string and a substring and returns the number of times the substring appears\
    \ in the string ignoring case.\nWrite a function that takes a string and a substring\
    \ and returns the number of times the substring appears in the string ignoring\
    \ case.\nWrite a function that takes a string and a substring and returns the\
    \ number of times the substring appears in the string ignoring case.\nWrite a\
    \ function that takes a string and a substring and returns the number of times\
    \ the substring appears in the string ignoring case.\nWrite a function that takes\
    \ a string and a substring and returns the number of times the substring appears\
    \ in the string ignoring case.\nWrite a function that takes a string and a substring\
    \ and returns the number of times the substring appears in the string ignoring\
    \ case.\nWrite a function that takes a string and a substring and returns the\
    \ number of times the substring appears in the string ignoring case.\nWrite a\
    \ function that takes a string and a substring and returns the number of times\
    \ the substring appears in the string ignoring case.\nWrite a function that takes\
    \ a string and a substring and returns the number of times the substring appears\
    \ in the string ignoring case.\nWrite a function that takes a string and a substring\
    \ and returns the number of times the substring appears in the string ignoring\
    \ case.\nWrite a function that takes a string and a substring and returns the\
    \ number of times the substring appears in the string ignoring case.\nWrite a\
    \ function that takes a string and a substring and returns the number of times\
    \ the substring appears in the string ignoring case.\nWrite a function that takes\
    \ a string and a substring and returns the number of times the substring appears\
    \ in the string ignoring case.\nWrite a function that takes a string and a substring\
    \ and returns the number of times the substring appears in the string ignoring\
    \ case.\nWrite a function that takes a string and a substring and returns the\
    \ number of times the substring appears in the string ignoring case.\nWrite a\
    \ function that takes a string and a substring and returns the number of times\
    \ the substring appears in the string ignoring case.\nWrite a function that takes\
    \ a string and a substring and returns the number of times the substring appears\
    \ in the string ignoring case.\nWrite a function that takes a string and a substring\
    \ and returns the number of \nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsnkg8nwb.jl:15\nin expression starting at\
    \ /tmp/tmpsnkg8nwb.jl:15\n"
  stdout: ''
  timestamp: 1659748227
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for c in string\n\
    \        if c == substring\n            count += 1\n        end\n    end\n   \
    \ \n    return count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"abc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\
    bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bca\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bca\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\
    bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bca\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bca\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\
    bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bca\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n\
    <code language=julia-1.5>\nho\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx9cnj33p.jl:15\nin expression starting at\
    \ /tmp/tmpx9cnj33p.jl:15\n"
  stdout: ''
  timestamp: 1659748227
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string:\n        if\
    \ c == substring:\n            count += 1\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzk7r6msy.jl:6\nin expression starting at /tmp/tmpzk7r6msy.jl:6\n"
  stdout: ''
  timestamp: 1659748220
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    \n    for char in string\n  \
    \      if char == substring[1]\n            count += 1\n        elseif char ==\
    \ substring[2]\n            count += 1\n        elseif char == substring[3]\n\
    \            count += 1\n        elseif char == substring[4]\n            count\
    \ += 1\n        elseif char == substring[5]\n            count += 1\n        elseif\
    \ char == substring[6]\n            count += 1\n        elseif char == substring[7]\n\
    \            count += 1\n        elseif char == substring[8]\n            count\
    \ += 1\n        elseif char == substring[9]\n            count += 1\n        elseif\
    \ char == substring[10]\n            count += 1\n        elseif char == substring[11]\n\
    \            count += 1\n        elseif char == substring[12]\n            count\
    \ += 1\n        elseif char == substring[13]\n            count += 1\n       \
    \ elseif char == substring[14]\n            count += 1\n        elseif char ==\
    \ substring[15]\n            count += 1\n        elseif char == substring[16]\n\
    \            count += 1\n        elseif char == substring[17]\n            count\
    \ += 1\n        elseif char == substring[18]\n            count += 1\n       \
    \ elseif char == substring[19]\n            count += 1\n        elseif char ==\
    \ substring[20]\n            count += 1\n        elseif char == substring[21]\n\
    \            count += 1\n        elseif char == substring[22]\n            count\
    \ += 1\n        elseif char == substring[23]\n            count += 1\n       \
    \ elseif char == substring[24]\n            count += 1\n        elseif char ==\
    \ substring[25]\n            count += 1\n        elseif char == substring[26]\n\
    \            count += 1\n        elseif char == substring[27]\n            count\
    \ += 1\n        elseif char == substring[28]\n            count += 1\n       \
    \ elseif char == substring[29]\n            count += 1\n        elseif char ==\
    \ substring[30]\n            count += 1\n        elseif char == substring[31]\n\
    \            count += 1\n        elseif char == substring[32]\n            count\
    \ += 1\n        elseif char == substring[33]\n            count += 1\n       \
    \ elseif char == substring[34]\n            count += 1\n        elseif char ==\
    \ substring[35]\n            count += 1\n        elseif char == substring[36]\n\
    \            count += 1\n        elseif char == substring[37]\n            count\
    \ += 1\n        elseif char == substring[38]\n            count += 1\n       \
    \ elseif char == substring[39]\n            count += 1\n        elseif char ==\
    \ substring[40]\n            count += 1\n        elseif char == substring[41]\n\
    \            count += 1\n        elseif char == substring[42]\n            count\
    \ += 1\n        elseif char == substring[43]\n            count += 1\n       \
    \ elseif char == substring[44]\n            \nusing Test\n\n@testset begin\n\n\
    candidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwinpbuvn.jl:1\nin expression starting at /tmp/tmpwinpbuvn.jl:1\n"
  stdout: ''
  timestamp: 1659748225
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    if string == \"\" || substring == \"\"\n   \
    \     return 0\n    \n    substring = lowercase(substring)\n    string = lowercase(string)\n\
    \    \n    count = 0\n    \n    for c in string\n        if c == substring[1]\n\
    \            count += 1\n        elseif c == substring[2]\n            count +=\
    \ 1\n        elseif c == substring[3]\n            count += 1\n        elseif\
    \ c == substring[4]\n            count += 1\n        elseif c == substring[5]\n\
    \            count += 1\n        elseif c == substring[6]\n            count +=\
    \ 1\n        elseif c == substring[7]\n            count += 1\n        elseif\
    \ c == substring[8]\n            count += 1\n        elseif c == substring[9]\n\
    \            count += 1\n        elseif c == substring[10]\n            count\
    \ += 1\n        elseif c == substring[11]\n            count += 1\n        elseif\
    \ c == substring[12]\n            count += 1\n        elseif c == substring[13]\n\
    \            count += 1\n        elseif c == substring[14]\n            count\
    \ += 1\n        elseif c == substring[15]\n            count += 1\n        elseif\
    \ c == substring[16]\n            count += 1\n        elseif c == substring[17]\n\
    \            count += 1\n        elseif c == substring[18]\n            count\
    \ += 1\n        elseif c == substring[19]\n            count += 1\n        elseif\
    \ c == substring[20]\n            count += 1\n        elseif c == substring[21]\n\
    \            count += 1\n        elseif c == substring[22]\n            count\
    \ += 1\n        elseif c == substring[23]\n            count += 1\n        elseif\
    \ c == substring[24]\n            count += 1\n        elseif c == substring[25]\n\
    \            count += 1\n        elseif c == substring[26]\n            count\
    \ += 1\n        elseif c == substring[27]\n            count += 1\n        elseif\
    \ c == substring[28]\n            count += 1\n        elseif c == substring[29]\n\
    \            count += 1\n        elseif c == substring[30]\n            count\
    \ += 1\n        elseif c == substring[31]\n            count += 1\n        elseif\
    \ c == substring[32]\n            count += 1\n        elseif c == substring[33]\n\
    \            count += 1\n        elseif c == substring[34]\n            count\
    \ += 1\n        elseif c == substring[35]\n            count += 1\n        elseif\
    \ c == substring[36]\n            count += 1\n        elseif c == substring[37]\n\
    \            count += 1\n        elseif c == substring[38]\n            count\
    \ += 1\n        elseif c == substring[39]\n            count += 1\n        elseif\
    \ c == substring[40]\n            count += 1\n        elseif c == substring[41]\n\
    \            count += 1\n        elseif c == substring[42]\n            count\
    \ += 1\n        elseif c == substring[43]\n            count += 1\n        elseif\
    \ c == substring[44]\n            count += 1\n        elseif c == substring[45]\n\
    \            count += 1\n        else\nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpoza9xktw.jl:101\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoza9xktw.jl:1\n\
    in expression starting at /tmp/tmpoza9xktw.jl:1\n"
  stdout: ''
  timestamp: 1659748227
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string:\n        if\
    \ c == substring:\n            count += 1\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzk7r6msy.jl:6\nin expression starting at /tmp/tmpzk7r6msy.jl:6\n"
  stdout: ''
  timestamp: 1659748220
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for char in string\n\
    \        if char == substring\n            count += 1\n        end\n    end\n\
    \    \n    return count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    hello\", \"llo\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"hello\"\
    , \"ll\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"hello\", \"lll\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"hello\", \"llll\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"hello\", \"lllll\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"hello\", \"llllll\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"hello\", \"lllllll\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    hello\", \"llllllll\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    hello\", \"lllllllll\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    hello\", \"llllllllll\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    hello\", \"lllllllllll\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    hello\", \"llllllllllllll\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    hello\", \"lllllllllllllll\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    hello\", \"llllllllllllllll\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    hello\", \"lllllllllllllllll\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    hello\", \"llllllllllllllllllll\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    hello\", \"lllllllllllllllllllll\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    hello\", \"llllllllllllllllllll\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    hello\", \"llllllll\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg0ocun1t.jl:15\nin expression starting at\
    \ /tmp/tmpg0ocun1t.jl:15\n"
  stdout: ''
  timestamp: 1659748227
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for c in string:\n\
    \        if c == substring[0]:\n            count += 1\n            \n       \
    \     if count == len(substring):\n                return count\n            \n\
    \            count = 0\n            \n        elif c == substring[1]:\n      \
    \      count += 1\n            \n            if count == len(substring):\n   \
    \             return count\n            \n            count = 0\n            \n\
    \        elif c == substring[2]:\n            count += 1\n            \n     \
    \       if count == len(substring):\n                return count\n          \
    \  \n            count = 0\n            \n        elif c == substring[3]:\n  \
    \          count += 1\n            \n            if count == len(substring):\n\
    \                return count\n            \n            count = 0\n         \
    \   \n        elif c == substring[4]:\n            count += 1\n            \n\
    \            if count == len(substring):\n                return count\n     \
    \       \n            count = 0\n            \n        elif c == substring[5]:\n\
    \            count += 1\n            \n            if count == len(substring):\n\
    \                return count\n            \n            count = 0\n         \
    \   \n        elif c == substring[6]:\n            count += 1\n            \n\
    \            if count == len(substring):\n                return count\n     \
    \       \n            count = 0\n            \n        elif c == substring[7]:\n\
    \            count += 1\n            \n            if count == len(substring):\n\
    \                return count\n            \n            count = 0\n         \
    \   \n        elif c == substring[8]:\n            count += 1\n            \n\
    \            if count == len(substring):\n                return count\n     \
    \       \n            count = 0\n            \n        elif c == substring[9]:\n\
    \            count += 1\n            \n            if count == len(substring):\n\
    \                return count\n            \n            count = 0\n         \
    \   \n        elif c == substring[10]:\n            count += 1\n            \n\
    \            if count == len(substring):\n                return count\n     \
    \       \n            count = 0\n            \n        elif c == substring[11]:\n\
    \            count += 1\n            \n            if count == len(substring):\n\
    \                return count\n            \n            count = 0\n         \
    \   \n        elif c == substring[12]:\n            count += 1\n            \n\
    \            if count == len(substring):\n                return count\n     \
    \       \n            count = 0\n            \n        elif c == substring[13]:\n\
    \            count += 1\n            \n            if count == len(substring):\n\
    \                return count\n            \n            count = 0\n         \
    \   \n        elif c == substring[14]:\n            count += 1\n            \n\
    \            if count == len(substring):\n                return count\n     \
    \       \n            count = 0\n            \n        elif c == substring[15]:\n\
    \            count += 1\n            \n            if count == len(substring):\n\
    \                return count\n            \n            count = 0\n         \
    \   \n        elif c == substring[16]:\n            count += 1\n            \n\
    \            if count == len(substring):\n                return count\n     \
    \       \n            count = 0\n            \n        elif c == substring[17]:\n\
    \            count += 1\n            \n            if count == len(substring):\n\
    \                return count\n            \n            count = 0\n         \
    \   \n        elif c == substring[18]:\n            count += 1\n            \n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpso_h59p0.jl:8\nin expression starting at /tmp/tmpso_h59p0.jl:8\n"
  stdout: ''
  timestamp: 1659748227
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string:\n        if\
    \ c == substring:\n            count += 1\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzk7r6msy.jl:6\nin expression starting at /tmp/tmpzk7r6msy.jl:6\n"
  stdout: ''
  timestamp: 1659748220
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for char in string\n\
    \        if char == substring\n            count += 1\n        end\n    end\n\
    \    \n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpcd4wa69v.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpcd4wa69v.jl:21\n  Expression: candidate(\"\
    xyxyxyx\", \"x\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcd4wa69v.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcd4wa69v.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpcd4wa69v.jl:22\n  Expression: candidate(\"cacacacac\", \"\
    cac\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcd4wa69v.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcd4wa69v.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpcd4wa69v.jl:23\n  Expression: candidate(\"john doe\", \"john\"\
    ) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcd4wa69v.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcd4wa69v.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659748221
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    if string == \"\" || substring == \"\"\n   \
    \     return 0\n    end\n    \n    count = 0\n    \n    for c in string\n    \
    \    if c == substring[1]\n            count += 1\n        elseif c == substring[2]\n\
    \            count += 1\n        elseif c == substring[3]\n            count +=\
    \ 1\n        elseif c == substring[4]\n            count += 1\n        elseif\
    \ c == substring[5]\n            count += 1\n        elseif c == substring[6]\n\
    \            count += 1\n        elseif c == substring[7]\n            count +=\
    \ 1\n        elseif c == substring[8]\n            count += 1\n        elseif\
    \ c == substring[9]\n            count += 1\n        elseif c == substring[10]\n\
    \            count += 1\n        elseif c == substring[11]\n            count\
    \ += 1\n        elseif c == substring[12]\n            count += 1\n        elseif\
    \ c == substring[13]\n            count += 1\n        elseif c == substring[14]\n\
    \            count += 1\n        elseif c == substring[15]\n            count\
    \ += 1\n        elseif c == substring[16]\n            count += 1\n        elseif\
    \ c == substring[17]\n            count += 1\n        elseif c == substring[18]\n\
    \            count += 1\n        elseif c == substring[19]\n            count\
    \ += 1\n        elseif c == substring[20]\n            count += 1\n        elseif\
    \ c == substring[21]\n            count += 1\n        elseif c == substring[22]\n\
    \            count += 1\n        elseif c == substring[23]\n            count\
    \ += 1\n        elseif c == substring[24]\n            count += 1\n        elseif\
    \ c == substring[25]\n            count += 1\n        elseif c == substring[26]\n\
    \            count += 1\n        elseif c == substring[27]\n            count\
    \ += 1\n        elseif c == substring[28]\n            count += 1\n        elseif\
    \ c == substring[29]\n            count += 1\n        elseif c == substring[30]\n\
    \            count += 1\n        elseif c == substring[31]\n            count\
    \ += 1\n        elseif c == substring[32]\n            count += 1\n        elseif\
    \ c == substring[33]\n            count += 1\n        elseif c == substring[34]\n\
    \            count += 1\n        elseif c == substring[35]\n            count\
    \ += 1\n        elseif c == substring[36]\n            count += 1\n        elseif\
    \ c == substring[37]\n            count += 1\n        elseif c == substring[38]\n\
    \            count += 1\n        elseif c == substring[39]\n            count\
    \ += 1\n        elseif c == substring[40]\n            count += 1\n        elseif\
    \ c == substring[41]\n            count += 1\n        elseif c == substring[42]\n\
    \            count += 1\n        elseif c == substring[43]\n            count\
    \ += 1\n        elseif c == substring[44]\n            count += 1\n        elseif\
    \ c == substring[45]\n            count += 1\n        elseif c == substring[46]\n\
    \            count += 1\n        elseif c == substring\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpedi6wj0o.jl:1\nin expression starting at /tmp/tmpedi6wj0o.jl:1\n"
  stdout: ''
  timestamp: 1659748225
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for c in string:\n\
    \        if c == substring[0]:\n            count += 1\n            if count >\
    \ substring.length\n                return 0\n            \n        elif c ==\
    \ substring[1]:\n            count += 1\n            if count > substring.length\n\
    \                return 0\n            \n        elif c == substring[2]:\n   \
    \         count += 1\n            if count > substring.length\n              \
    \  return 0\n            \n        elif c == substring[3]:\n            count\
    \ += 1\n            if count > substring.length\n                return 0\n  \
    \          \n        elif c == substring[4]:\n            count += 1\n       \
    \     if count > substring.length\n                return 0\n            \n  \
    \      elif c == substring[5]:\n            count += 1\n            if count >\
    \ substring.length\n                return 0\n            \n        elif c ==\
    \ substring[6]:\n            count += 1\n            if count > substring.length\n\
    \                return 0\n            \n        elif c == substring[7]:\n   \
    \         count += 1\n            if count > substring.length\n              \
    \  return 0\n            \n        elif c == substring[8]:\n            count\
    \ += 1\n            if count > substring.length\n                return 0\n  \
    \          \n        elif c == substring[9]:\n            count += 1\n       \
    \     if count > substring.length\n                return 0\n            \n  \
    \      elif c == substring[10]:\n            count += 1\n            if count\
    \ > substring.length\n                return 0\n            \n        elif c ==\
    \ substring[11]:\n            count += 1\n            if count > substring.length\n\
    \                return 0\n            \n        elif c == substring[12]:\n  \
    \          count += 1\n            if count > substring.length\n             \
    \   return 0\n            \n        elif c == substring[13]:\n            count\
    \ += 1\n            if count > substring.length\n                return 0\n  \
    \          \n        elif c == substring[14]:\n            count += 1\n      \
    \      if count > substring.length\n                return 0\n            \n \
    \       elif c == substring[15]:\n            count += 1\n            if count\
    \ > substring.length\n                return 0\n            \n        elif c ==\
    \ substring[16]:\n            count += 1\n            if count > substring.length\n\
    \                return 0\n            \n        elif c == substring[17]:\n  \
    \          count += 1\n            if count > substring.length\n             \
    \   return 0\n            \n        elif c == substring[18]:\n            count\
    \ += 1\n            if count > substring.length\n                return 0\n  \
    \          \n        elif c == substring[19]:\n            count += 1\n      \
    \      if count > substring.length\n                return 0\n            \n \
    \       elif c == substring[20]:\n            count += 1\n            if count\
    \ > substring.length\n                return 0\n            \n        elif c ==\
    \ substring[21]:\n            count += 1\n            if count > substring.length\n\
    \                return 0\n            \n        elif c == substring[22]:\n  \
    \          count += 1\n            if count > substring.length\n             \
    \   return 0\n            \n        elif c == substring[23]:\n            count\
    \ += 1\n            if count > substring.length\n                return 0\n  \
    \          \n        elif c == substring[24]:\n            count += 1\n      \
    \      if \nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpns4cmel0.jl:8\nin expression starting at /tmp/tmpns4cmel0.jl:8\n"
  stdout: ''
  timestamp: 1659748227
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    \n    for c in string:\n    \
    \    if c == substring[0]:\n            count += 1\n            if count > substring[1]:\n\
    \                break\n        elif c == substring[1]:\n            count +=\
    \ 1\n            if count > substring[2]:\n                break\n        else:\n\
    \            count = 0\n    return count\nend\nusing Test\n\n@testset begin\n\n\
    candidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxhwxrm23.jl:7\nin expression starting at /tmp/tmpxhwxrm23.jl:7\n"
  stdout: ''
  timestamp: 1659748227
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string:\n        if\
    \ c == substring[0]:\n            count += 1\n            if count == len(substring):\n\
    \                return count\n        else:\n            count = 0\n    return\
    \ count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\
    abc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bca\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abcde\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abccba\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abccbc\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"abccbca\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"abccbcab\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"abccbcabc\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"abccbcabcde\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abccbcabcdef\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abccbcabcdefgh\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abccbcabcdefghij\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abccbcabcdefghijk\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abccbcabcdefghijklm\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abccbcabcdefghijklmn\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abccbcabcdefghijklmno\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abccbcabcdefghijklmnop\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoqm_lfow.jl:6\nin expression starting at /tmp/tmpoqm_lfow.jl:6\n"
  stdout: ''
  timestamp: 1659748227
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for char in string\n\
    \        if char == substring[1]\n            count += 1\n        end\n    end\n\
    \    \n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpupf_usy5.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpupf_usy5.jl:22\n  Expression: candidate(\"\
    cacacacac\", \"cac\") == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpupf_usy5.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpupf_usy5.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     1      4\n"
  timestamp: 1659748221
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for char in string\n\
    \        if char == substring\n            count += 1\n        end\n    end\n\
    \    \n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpcd4wa69v.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpcd4wa69v.jl:21\n  Expression: candidate(\"\
    xyxyxyx\", \"x\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcd4wa69v.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcd4wa69v.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpcd4wa69v.jl:22\n  Expression: candidate(\"cacacacac\", \"\
    cac\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcd4wa69v.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcd4wa69v.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpcd4wa69v.jl:23\n  Expression: candidate(\"john doe\", \"john\"\
    ) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcd4wa69v.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcd4wa69v.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659748221
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string:\n        if\
    \ c == substring:\n            count += 1\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzk7r6msy.jl:6\nin expression starting at /tmp/tmpzk7r6msy.jl:6\n"
  stdout: ''
  timestamp: 1659748220
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for c in string:\n\
    \        if c == substring[0]:\n            count += 1\n            if substring[1:]\
    \ == \"\"\n                count += 1\n            \n        elif substring[1:]\
    \ == \"\"\n            count += 1\n            \n        elif substring[1:] ==\
    \ c\n            count += 1\n            \n        else:\n            count +=\
    \ 1\n            \n    return count\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"abc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\
    bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code\
    \ language=julia-1.5\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk_06o6f0.jl:8\nin expression starting at /tmp/tmpk_06o6f0.jl:8\n"
  stdout: ''
  timestamp: 1659748227
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for c in string\n\
    \        if substring == c\n            count += 1\n        end\n    end\n   \
    \ \n    return count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    hello\", \"l\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"hello\"\
    , \"ll\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"hello\", \"lll\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"hello\", \"llll\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"hello\", \"lllll\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"hello\", \"llllll\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"hello\", \"lllllll\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    hello\", \"llllllll\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    hello\", \"lllllllll\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    hello\", \"llllllllll\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    hello\", \"lllllllllll\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    hello\", \"llllllllllllll\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    hello\", \"lllllllllllllll\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    hello\", \"llllllllllllllll\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    hello\", \"lllllllllllllllll\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    hello\", \"llllllllllllllllllll\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    hello\", \"lllllllllllllllllllll\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    hello\", \"llllllllllllllllllllll\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    hello\", \"llllll\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmilmbpt6.jl:15\nin expression starting at\
    \ /tmp/tmpmilmbpt6.jl:15\n"
  stdout: ''
  timestamp: 1659748227
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    \n    for char in string\n  \
    \      if char == substring\n            count += 1\n        end\n    end\n  \
    \  \n    return count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"abc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\
    bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bca\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bca\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bca\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bca\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\
    bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bca\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bca\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bca\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bca\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\
    bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bca\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bca\")\n</cell\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzapjpk2u.jl:14\nin expression starting at\
    \ /tmp/tmpzapjpk2u.jl:14\n"
  stdout: ''
  timestamp: 1659748227
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for c in string:\n\
    \        if c == substring[0]:\n            count += 1\n            if count >\
    \ substring.length\n                return substring.length\n            \n  \
    \      elif c == substring[1]:\n            count += 1\n            if count >\
    \ substring.length\n                return substring.length\n            \n  \
    \      elif c == substring[2]:\n            count += 1\n            if count >\
    \ substring.length\n                return substring.length\n            \n  \
    \      elif c == substring[3]:\n            count += 1\n            if count >\
    \ substring.length\n                return substring.length\n            \n  \
    \      elif c == substring[4]:\n            count += 1\n            if count >\
    \ substring.length\n                return substring.length\n            \n  \
    \      elif c == substring[5]:\n            count += 1\n            if count >\
    \ substring.length\n                return substring.length\n            \n  \
    \      elif c == substring[6]:\n            count += 1\n            if count >\
    \ substring.length\n                return substring.length\n            \n  \
    \      elif c == substring[7]:\n            count += 1\n            if count >\
    \ substring.length\n                return substring.length\n            \n  \
    \      elif c == substring[8]:\n            count += 1\n            if count >\
    \ substring.length\n                return substring.length\n            \n  \
    \      elif c == substring[9]:\n            count += 1\n            if count >\
    \ substring.length\n                return substring.length\n            \n  \
    \      elif c == substring[10]:\n            count += 1\n            if count\
    \ > substring.length\n                return substring.length\n            \n\
    \        elif c == substring[11]:\n            count += 1\n            if count\
    \ > substring.length\n                return substring.length\n            \n\
    \        elif c == substring[12]:\n            count += 1\n            if count\
    \ > substring.length\n                return substring.length\n            \n\
    \        elif c == substring[13]:\n            count += 1\n            if count\
    \ > substring.length\n                return substring.length\n            \n\
    \        elif c == substring[14]:\n            count += 1\n            if count\
    \ > substring.length\n                return substring.length\n            \n\
    \        elif c == substring[15]:\n            count += 1\n            if count\
    \ > substring.length\n                return substring.length\n            \n\
    \        elif c == substring[16]:\n            count += 1\n            if count\
    \ > substring.length\n                return substring.length\n            \n\
    \        elif c == substring[17]:\n            count += 1\n            if count\
    \ > substring.length\n                return substring.length\n            \n\
    \        elif c == substring[18]:\n            count += 1\n            if count\
    \ > substring.length\n                return substring.length\n            \n\
    \        elif c == substring[19]:\n            count += 1\n            if count\
    \ > substring.length\n                return substring.length\n            \n\
    \        elif c == substring[20]:\n            count += 1\n            if count\
    \ > substring.length\n                return substring.length\n            \n\
    \        elif c == substring[21]:\n            count += 1\n            if count\
    \ > substring.length\n                return substring.length\n            \n\
    \        elif c == substring[22]:\n            count += 1\n            if count\
    \ > substring.length\n                return substring.length\n            \n\
    \        elif c == substring[23]:\n            count += 1\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl1moszj6.jl:8\nin expression starting at /tmp/tmpl1moszj6.jl:8\n"
  stdout: ''
  timestamp: 1659748227
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for char in string\n\
    \        if char == substring[1]\n            count += 1\n        elseif char\
    \ == substring[2]\n            count += 1\n        elseif char == substring[3]\n\
    \            count += 1\n        elseif char == substring[4]\n            count\
    \ += 1\n        elseif char == substring[5]\n            count += 1\n        elseif\
    \ char == substring[6]\n            count += 1\n        elseif char == substring[7]\n\
    \            count += 1\n        elseif char == substring[8]\n            count\
    \ += 1\n        elseif char == substring[9]\n            count += 1\n        elseif\
    \ char == substring[10]\n            count += 1\n        elseif char == substring[11]\n\
    \            count += 1\n        elseif char == substring[12]\n            count\
    \ += 1\n        elseif char == substring[13]\n            count += 1\n       \
    \ elseif char == substring[14]\n            count += 1\n        elseif char ==\
    \ substring[15]\n            count += 1\n        elseif char == substring[16]\n\
    \            count += 1\n        elseif char == substring[17]\n            count\
    \ += 1\n        elseif char == substring[18]\n            count += 1\n       \
    \ elseif char == substring[19]\n            count += 1\n        elseif char ==\
    \ substring[20]\n            count += 1\n        elseif char == substring[21]\n\
    \            count += 1\n        elseif char == substring[22]\n            count\
    \ += 1\n        elseif char == substring[23]\n            count += 1\n       \
    \ elseif char == substring[24]\n            count += 1\n        elseif char ==\
    \ substring[25]\n            count += 1\n        elseif char == substring[26]\n\
    \            count += 1\n        elseif char == substring[27]\n            count\
    \ += 1\n        elseif char == substring[28]\n            count += 1\n       \
    \ elseif char == substring[29]\n            count += 1\n        elseif char ==\
    \ substring[30]\n            count += 1\n        elseif char == substring[31]\n\
    \            count += 1\n        elseif char == substring[32]\n            count\
    \ += 1\n        elseif char == substring[33]\n            count += 1\n       \
    \ elseif char == substring[34]\n            count += 1\n        elseif char ==\
    \ substring[35]\n            count += 1\n        elseif char == substring[36]\n\
    \            count += 1\n        elseif char == substring[37]\n            count\
    \ += 1\n        elseif char == substring[38]\n            count += 1\n       \
    \ elseif char == substring[39]\n            count += 1\n        elseif char ==\
    \ substring[40]\n            count += 1\n        elseif char == substring[41]\n\
    \            count += 1\n        elseif char == substring[42]\n            count\
    \ += 1\n        elseif char == substring[43]\n            count += 1\n       \
    \ elseif char == substring[44]\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwzv4d5wk.jl:1\nin expression starting at /tmp/tmpwzv4d5wk.jl:1\n"
  stdout: ''
  timestamp: 1659748223
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string\n        if substring\
    \ == c\n            count += 1\n        end\n    end\n    return count\nend\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcd\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"abcd\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"bcde\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bcdc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bcdea\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\
    bcdca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcdcb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcdc\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcdc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcdc\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcdc\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"bcdc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bcdc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bcdc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\
    bcdc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcdc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcdc\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcdc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcdc\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcdc\")\n</cell>\n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\"\
    , \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_u_o4a12.jl:12\nin expression starting at\
    \ /tmp/tmp_u_o4a12.jl:12\n"
  stdout: ''
  timestamp: 1659748228
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    if string == \"\" then return 0 \n    if substring\
    \ == \"\" then return 1 \n    if substring[0] == string[0] then return how_many_times(string[1:],\
    \ substring[1:])\n    else return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpez6yuakk.jl:4\nin expression starting at /tmp/tmpez6yuakk.jl:4\n"
  stdout: ''
  timestamp: 1659748228
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for c in string\n\
    \        if c == substring\n            count += 1\n        end\n    end\n   \
    \ \n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpch57419u.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpch57419u.jl:21\n  Expression: candidate(\"\
    xyxyxyx\", \"x\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpch57419u.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpch57419u.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpch57419u.jl:22\n  Expression: candidate(\"cacacacac\", \"\
    cac\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpch57419u.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpch57419u.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpch57419u.jl:23\n  Expression: candidate(\"john doe\", \"john\"\
    ) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpch57419u.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpch57419u.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659748229
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string:\n        if\
    \ c == substring[0]:\n            count += 1\n            if count > substring.length\n\
    \                return -1\n        elif c == substring[substring.length]\n  \
    \          count += 1\n            if count > substring.length\n             \
    \   return -1\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzirq4voa.jl:6\nin expression starting at /tmp/tmpzirq4voa.jl:6\n"
  stdout: ''
  timestamp: 1659748228
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    if string == \"\" || substring == \"\" \n  \
    \      return 0 \n    else \n        substring = lowercase(substring)\n      \
    \  string = lowercase(string)\n        string_length = length(substring)\n   \
    \     string_length = string_length - 1\n        string_length = string_length\
    \ + 1\n        string_length = string_length + 1\n        string_length = string_length\
    \ + 1\n        string_length = string_length + 1\n        string_length = string_length\
    \ + 1\n        string_length = string_length + 1\n        string_length = string_length\
    \ + 1\n        string_length = string_length + 1\n        string_length = string_length\
    \ + 1\n        string_length = string_length + 1\n        string_length = string_length\
    \ + 1\n        string_length = string_length + 1\n        string_length = string_length\
    \ + 1\n        string_length = string_length + 1\n        string_length = string_length\
    \ + 1\n        string_length = string_length + 1\n        string_length = string_length\
    \ + 1\n        string_length = string_length + 1\n        string_length = string_length\
    \ + 1\n        string_length = string_length + 1\n        string_length = string_length\
    \ + 1\n        string_length = string_length + 1\n        string_length = string_length\
    \ + 1\n        string_length = string_length + 1\n        string_length = string_length\
    \ + 1\n        string_length = string_length + 1\n        string_length = string_length\
    \ + 1\n        string_length = string_length + 1\n        string_length = string_length\
    \ + 1\n        string_length = string_length + 1\n        string_length = string_length\
    \ + 1\n        string_length = string_length + 1\n        string_length = string_length\
    \ + 1\n        string_length = string_length + 1\n        string_length = string_length\
    \ + 1\n        string_length = string_length + 1\n        string_length = string_length\
    \ + 1\n        string_length = string_length + 1\n        string_length = string_length\
    \ + 1\n        string_length = string_length + 1\n        string_length = string_length\
    \ + 1\n        string_length = string_length + 1\n        string_length = string_length\
    \ + 1\n        string_length = string_length + 1\n        string_length = string_length\
    \ + 1\n        string_length = string_length + 1\n        string_length = string_length\
    \ + 1\n        string_length = string_length + 1\n        string_length = string_length\
    \ + 1\n        string_length = string_length + 1\n        string_length = string_length\
    \ + 1\n        string_length = string_length + 1\n        string_length = string_length\
    \ + 1\n        string_length = string_length + 1\n        string_length = string_length\
    \ + 1\n        string_length = string_length + 1\n        string_length = string_length\
    \ + 1\n        string_length = string_length + 1\n        string_length = string_length\
    \ + 1\n        string_length = string_length + 1\n        string_length = string_length\
    \ + 1\n        string_length = string_length + 1\n        string_length = string_length\
    \ + 1\n        string_length = string_length + 1\n        string_length = string_length\
    \ + 1\n        string_length = string_length + 1\n        string_length = string_length\
    \ + 1\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmplts2vrcu.jl:4 requires\
    \ end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplts2vrcu.jl:1\nin expression\
    \ starting at /tmp/tmplts2vrcu.jl:1\n"
  stdout: ''
  timestamp: 1659748228
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string:\n        if\
    \ c == substring[0]:\n            count += 1\n            if substring[1:] ==\
    \ string[c:c+substring.length()]:\n                count += 1\n        elif substring[1:]\
    \ == string[c:c+substring.length()]:\n            count += 1\n    return count\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abc\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bca\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"c\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"ab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcab\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptcsjmje9.jl:6\nin expression starting at /tmp/tmptcsjmje9.jl:6\n"
  stdout: ''
  timestamp: 1659748228
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    if string == \"\" || substring == \"\"\n   \
    \     return 0\n    end\n    \n    count = 0\n    \n    for char in string\n \
    \       if char == substring[1]\n            count += 1\n        elseif char ==\
    \ substring[2]\n            count += 1\n        elseif char == substring[3]\n\
    \            count += 1\n        elseif char == substring[4]\n            count\
    \ += 1\n        elseif char == substring[5]\n            count += 1\n        elseif\
    \ char == substring[6]\n            count += 1\n        elseif char == substring[7]\n\
    \            count += 1\n        elseif char == substring[8]\n            count\
    \ += 1\n        elseif char == substring[9]\n            count += 1\n        elseif\
    \ char == substring[10]\n            count += 1\n        elseif char == substring[11]\n\
    \            count += 1\n        elseif char == substring[12]\n            count\
    \ += 1\n        elseif char == substring[13]\n            count += 1\n       \
    \ elseif char == substring[14]\n            count += 1\n        elseif char ==\
    \ substring[15]\n            count += 1\n        elseif char == substring[16]\n\
    \            count += 1\n        elseif char == substring[17]\n            count\
    \ += 1\n        elseif char == substring[18]\n            count += 1\n       \
    \ elseif char == substring[19]\n            count += 1\n        elseif char ==\
    \ substring[20]\n            count += 1\n        elseif char == substring[21]\n\
    \            count += 1\n        elseif char == substring[22]\n            count\
    \ += 1\n        elseif char == substring[23]\n            count += 1\n       \
    \ elseif char == substring[24]\n            count += 1\n        elseif char ==\
    \ substring[25]\n            count += 1\n        elseif char == substring[26]\n\
    \            count += 1\n        elseif char == substring[27]\n            count\
    \ += 1\n        elseif char == substring[28]\n            count += 1\n       \
    \ elseif char == substring[29]\n            count += 1\n        elseif char ==\
    \ substring[30]\n            count += 1\n        elseif char == substring[31]\n\
    \            count += 1\n        elseif char == substring[32]\n            count\
    \ += 1\n        elseif char == substring[33]\n            count += 1\n       \
    \ elseif char == substring[34]\n            count += 1\n        elseif char ==\
    \ substring[35]\n            count += 1\n        elseif char == substring[36]\n\
    \            count += 1\n        elseif char == substring[37]\n            count\
    \ += 1\n        elseif char == substring[38]\n            count += 1\n       \
    \ elseif char == substring[39]\n            count += 1\n        elseif char ==\
    \ substring[40]\n            count += 1\n        elseif char == substring[41]\n\
    \            count += 1\n        elseif char == substring[42]\n            count\
    \ += 1\n        elseif char == substring[\nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwwvetjcw.jl:1\nin expression starting at /tmp/tmpwwvetjcw.jl:1\n"
  stdout: ''
  timestamp: 1659748222
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for c in string:\n\
    \        if c == substring[0]:\n            count += 1\n            if count >\
    \ substring[1]:\n                break\n        elif c == substring[1]:\n    \
    \        count += 1\n            if count > substring[1]:\n                break\n\
    \            \n    return count\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\
    abcabc\", \"abc\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"abcabc\"\
    , \"bca\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"abcabc\", \"\
    abcde\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"abcabc\", \"abcde\"\
    )\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"abcabc\", \"abcde\")\n\
    </cell>\n<code language=julia-1.4>\nhow_many_times(\"abcabc\", \"abcde\")\n</cell>\n\
    <code language=julia-1.4>\nhow_many_times(\"abcabc\", \"abcde\")\n</cell>\n<code\
    \ language=julia-1.4>\nhow_many_times(\"abcabc\", \"abcde\")\n</cell>\n<code language=julia-1.4>\n\
    how_many_times(\"abcabc\", \"abcde\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\
    abcabc\", \"abcde\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"abcabc\"\
    , \"abcde\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"abcabc\", \"\
    abcde\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"abcabc\", \"abcde\"\
    )\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"abcabc\", \"abcde\")\n\
    </cell>\n<code language=julia-1.4>\nhow_many_times(\"abcabc\", \"abcde\")\n</cell>\n\
    <code language=julia-1.4>\nhow_many_times(\"abcabc\", \"abcde\")\n</cell>\n<code\
    \ language=julia-1.4>\nhow_many_times(\"abcabc\", \"abcde\")\n</cell>\n<code language=julia-1.4>\n\
    how_many_times(\"abcabc\", \"abcde\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\
    abcabc\", \"abcde\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"abcabc\"\
    , \"abcde\")\n</cell>\n<code language=\nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxj5zc3g7.jl:8\nin expression starting at /tmp/tmpxj5zc3g7.jl:8\n"
  stdout: ''
  timestamp: 1659748229
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for char in string:\n\
    \        if char == substring[0]:\n            count += 1\n            if char\
    \ == substring[1]:\n                count += 1\n                if char == substring[2]:\n\
    \                    count += 1\n                    if char == substring[3]:\n\
    \                        count += 1\n                        if char == substring[4]:\n\
    \                            count += 1\n                            if char ==\
    \ substring[5]:\n                                count += 1\n                \
    \                if char == substring[6]:\n                                  \
    \  count += 1\n                                    if char == substring[7]:\n\
    \                                        count += 1\n                        \
    \                if char == substring[8]:\n                                  \
    \          count += 1\n                                            if char ==\
    \ substring[9]:\n                                                count += 1\n\
    \                                                if char == substring[10]:\n \
    \                                                   count += 1\n             \
    \                                       if char == substring[11]:\n          \
    \                                              count += 1\n                  \
    \                                      if char == substring[12]:\n           \
    \                                                 count += 1\n               \
    \                                             if char == substring[13]:\n    \
    \                                                            count += 1\n    \
    \                                                            if char == substring[14]:\n\
    \                                                                    count +=\
    \ 1\n                                                                    if char\
    \ == substring[15]:\n                                                        \
    \                count += 1\n                                                \
    \        if char == substring[16]:\n                                         \
    \                   count += 1\n                                             \
    \               if char == substring[17]:\n                                  \
    \                              count += 1\n                                  \
    \                              if char == substring[18]:\n                   \
    \                                                 count += 1\n               \
    \                                                     if char == substring[19]:\n\
    \                                                                        count\
    \ += 1\n                                                        if char == substring[20]:\n\
    \                                                            count += 1\n    \
    \                                                        if char == substring[21]:\n\
    \                                                                count += 1\n\
    \                                                                if char == substring[22]:\n\
    \                                                                    count +=\
    \ 1\n                                                                    if char\
    \ == substring[23]:\n                                                        \
    \                count += 1\n                                                \
    \        if char == substring[24]:\n                                         \
    \                   count += 1\n                                             \
    \               if char == substring[25]:\n                                  \
    \                              count += 1\n                                  \
    \                              if char == substring[26]:\n                   \
    \                                                 count += 1\n               \
    \                                                     if char == substring[27]:\n\
    \                                                                        count\
    \ += 1\n                                                        if char == substring[28]:\n\
    \                                                            count += 1\n    \
    \                                                        if char == substring[29]:\n\
    \                                                                count += 1\n\
    \                                                                if char == substring[30]:\n\
    \                                                                    count +=\
    \ 1\n                                                                    if char\
    \ == substring[31]:\n                                                        \
    \                count += 1\n                                                \
    \        if char == substring[32]:\n                                         \
    \                   count += 1\n                                             \
    \               if char == substring[33]:\n                                  \
    \                              count += 1\n                                  \
    \                              if char == substring[34]:\n                   \
    \                                                 count += 1\n               \
    \                                                     if char == substring[35]:\n\
    \                                                                        count\
    \ += 1\n                                                        if char == substring[36]:\n\
    \                                                            count += 1\n    \
    \                                                        if char == substring[37]:\n\
    \                                                                count += 1\n\
    \                                                                if char == substring[38]:\n\
    \                                                                    count +=\
    \ 1\n                                                                    if char\
    \ == substring[39]:\n                                                        \
    \                count += 1\n                                                \
    \        if char == substring[40]:\n                                         \
    \                   count += 1\n                                             \
    \               if char == substring[41]:\n\nusing Test\n\n@testset begin\n\n\
    candidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqjara8wu.jl:8\nin expression starting at /tmp/tmpqjara8wu.jl:8\n"
  stdout: ''
  timestamp: 1659748227
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    if string == \"\" || substring == \"\"\n   \
    \     return 0\n    \n    string_array = string.split(\" \")\n    substring_array\
    \ = substring.split(\" \")\n    \n    count = 0\n    for s in string_array\n \
    \       for ss in substring_array\n            if s == ss\n                count\
    \ += 1\n            end\n        end\n    end\n    \n    return count\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"The quick brown fox jumps over the\
    \ lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"The quick brown fox jumps over the\
    \ lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"The quick brown fox jumps over the\
    \ lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"The quick brown fox jumps over the\
    \ lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"The quick brown fox jumps over the lazy dog\", \"fox\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"The quick brown fox jumps over the\
    \ lazy dog\", \"fox\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    The quick brown fox jumps over the lazy dog\", \"fox\")\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpco8g_pbd.jl:21\nin expression starting at\
    \ /tmp/tmpco8g_pbd.jl:21\n"
  stdout: ''
  timestamp: 1659748228
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    if string == \"\" \n        then return 0 \n\
    \        else if substring == \"\" \n            then return 1 \n            else\
    \ if substring(1,length(string)) == string \n                then return 1 \n\
    \                else return 0 \n        end\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    how_many_times(\"abcabcbb\", \"abc\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\
    abcabcbb\", \"bcc\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"abcabcbb\"\
    , \"bb\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"abcabcbb\", \"\
    a\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"abcabcbb\", \"bc\"\
    )\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"abcabcbb\", \"bbc\")\n\
    </cell>\n<code language=julia-1.4>\nhow_many_times(\"abcabcbb\", \"abbc\")\n</cell>\n\
    <code language=julia-1.4>\nhow_many_times(\"abcabcbb\", \"abbb\")\n</cell>\n<code\
    \ language=julia-1.4>\nhow_many_times(\"abcabcbb\", \"abbbc\")\n</cell>\n<code\
    \ language=julia-1.4>\nhow_many_times(\"abcabcbb\", \"abbbbc\")\n</cell>\n<code\
    \ language=julia-1.4>\nhow_many_times(\"abcabcbb\", \"abbbbcc\")\n</cell>\n<code\
    \ language=julia-1.4>\nhow_many_times(\"abcabcbb\", \"abbbbccc\")\n</cell>\n<code\
    \ language=julia-1.4>\nhow_many_times(\"abcabcbb\", \"abbbbcccbb\")\n</cell>\n\
    <code language=julia-1.4>\nhow_many_times(\"abcabcbb\", \"abbbbcccbbb\")\n</cell>\n\
    <code language=julia-1.4>\nhow_many_times(\"abcabcbb\", \"abbbbcccbbbc\")\n</cell>\n\
    <code language=julia-1.4>\nhow_many_times(\"abcabcbb\", \"abbbbcccbbbcc\")\n</cell>\n\
    <code language=julia-1.4>\nhow_many_times(\"abcabcbb\", \"abbbbcccbbbccc\")\n\
    </cell>\n<code language=julia-1.4>\nhow_many_times(\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpsu5llq75.jl:5\nin expression starting at /tmp/tmpsu5llq75.jl:5\n"
  stdout: ''
  timestamp: 1659748229
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string\n        if c\
    \ == substring\n            count += 1\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvveosmo3.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmpvveosmo3.jl:18\n  Expression: candidate(\"\
    xyxyxyx\", \"x\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvveosmo3.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvveosmo3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpvveosmo3.jl:19\n  Expression: candidate(\"cacacacac\", \"\
    cac\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvveosmo3.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvveosmo3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpvveosmo3.jl:20\n  Expression: candidate(\"john doe\", \"john\"\
    ) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvveosmo3.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvveosmo3.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659748221
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string:\n        if\
    \ c == substring[0]:\n            count += 1\n            if count > substring.length\n\
    \                return substring.length\n        elif c == substring[substring.length]\n\
    \            count += 1\n            if count > substring.length\n           \
    \     return substring.length\n        end\n    end\n    return count\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\"\
    , \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprvkuo0wb.jl:6\nin expression starting at /tmp/tmprvkuo0wb.jl:6\n"
  stdout: ''
  timestamp: 1659748228
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    if string == \"\" \n        then return 0\n\
    \    else if substring == \"\" \n        then return 1\n    else if string[0..(length(substring)-1)]\
    \ == substring\n        then return 1\n    else if string[0..(length(substring)-1)]\
    \ != substring\n        then return 0\n    else if string[0..(length(substring)-1)]\
    \ == substring[0..(length(substring)-1)]\n        then return how_many_times(string[1..end],\
    \ substring)\n    else if string[0..(length(substring)-1)] != substring[0..(length(substring)-1)]\n\
    \        then return how_many_times(string[1..end], substring)\n    else return\
    \ how_many_times(string[1..end], substring)\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabcbb\", \"bb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabcbb\", \"ab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\"\
    , \"abc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"\
    acb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"abbb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"abbbb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"abbbbc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"abbbbcc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"abbbbccc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"abbbbccca\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"abbbbcccba\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"abbbbcccbb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"abbbbcccbbb\"\
    )\n</cell>\n<code language=julia-1.5>\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_jhz6z8k.jl:5\nin expression starting at /tmp/tmp_jhz6z8k.jl:5\n"
  stdout: ''
  timestamp: 1659748228
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    if string == \"\" \n        then return 0 \n\
    \    else if substring == \"\"\n        then return 1\n    else if string==substring\n\
    \        then return 1\n    else if string.contains(substring)\n        then return\
    \ 1 + how_many_times(string.substring(string.indexOf(substring)+1),substring)\n\
    \    else return how_many_times(string.substring(string.indexOf(substring)+1),substring)\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\",\"abc\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\",\"bcd\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\",\"x\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\",\"xab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\",\"xabx\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    ,\"xabxab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\",\"\
    xabxabx\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\",\"xabxabxab\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\",\"xabxabxabx\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\",\"xabxabxabxab\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\",\"xabxabxabxabx\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\",\"xabxabxabxabxab\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\",\"xabxabxabxabxabx\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\",\"xabxabxabxabxabxab\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\",\"xabxabxabxabxabxabx\"\
    )\n</cell>\n\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t\
    @test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\
    \t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\"\
    , \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzygx11eb.jl:5\nin expression starting at /tmp/tmpzygx11eb.jl:5\n"
  stdout: ''
  timestamp: 1659748228
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    if string == \"\" || substring == \"\"\n   \
    \     return 0\n    \n    count = 1\n    \n    for c in string\n        if c ==\
    \ substring\n            count += 1\n        else\n            count = 0\n   \
    \         break\n    end\n    \n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg08j3gxw.jl:1\nin expression starting at /tmp/tmpg08j3gxw.jl:1\n"
  stdout: ''
  timestamp: 1659748228
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string\n        if c\
    \ == substring\n            count += 1\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvveosmo3.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmpvveosmo3.jl:18\n  Expression: candidate(\"\
    xyxyxyx\", \"x\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvveosmo3.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvveosmo3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpvveosmo3.jl:19\n  Expression: candidate(\"cacacacac\", \"\
    cac\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvveosmo3.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvveosmo3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpvveosmo3.jl:20\n  Expression: candidate(\"john doe\", \"john\"\
    ) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvveosmo3.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvveosmo3.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659748221
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string:\n        if\
    \ c == substring:\n            count += 1\n    return count\nend\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"abc\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"abcde\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bcde\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\
    bcd\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcd\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcd\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcd\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcd\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"bcd\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bcd\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bcd\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\
    bcd\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcd\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcd\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcd\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcd\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"bcd\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bcd\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bcd\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\
    bcd\")\n</cell>\n<code language=julia-1.5>\n\nusing Test\n\n@testset begin\n\n\
    candidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyysavdtu.jl:6\nin expression starting at /tmp/tmpyysavdtu.jl:6\n"
  stdout: ''
  timestamp: 1659748229
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string:\n        if\
    \ c == substring:\n            count += 1\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzk7r6msy.jl:6\nin expression starting at /tmp/tmpzk7r6msy.jl:6\n"
  stdout: ''
  timestamp: 1659748220
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    \n    for c in string\n     \
    \   if c == substring\n            count += 1\n        end\n    end\n    \n  \
    \  return count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"abc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\
    bcd\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"c\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"ab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"ab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"ab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bc\")\n</\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9iy8p9f6.jl:14\nin expression starting at\
    \ /tmp/tmp9iy8p9f6.jl:14\n"
  stdout: ''
  timestamp: 1659748229
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for c in string:\n\
    \        if c == substring[0]:\n            count += 1\n            if count >\
    \ substring[1]:\n                break\n        else:\n            count = 0\n\
    \    \n    return count\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"abc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\
    abcde\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abccba\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abccbc\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abccbca\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abccbcaa\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abccbcaaa\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abccbcaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abccbcaaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abccbcaaaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abccbcaaaaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abccbcaaaaaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abccbcaaaaaaaab\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abccbcaaaaaaaabb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abccbcaaaaaaaabbb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abccbcaaaaaaaabbbc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abccbcaaaaaaaabbbcc\"\
    )\n</cell>\n<code language=julia-\nusing Test\n\n@testset begin\n\ncandidate =\
    \ how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt_pptabf.jl:8\nin expression starting at /tmp/tmpt_pptabf.jl:8\n"
  stdout: ''
  timestamp: 1659748229
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for c in string\n\
    \        if substring == c\n            count += 1\n        end\n    end\n   \
    \ \n    return count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabcbb\", \"ab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\"\
    , \"bb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"\
    c\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bbc\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bbc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bbc\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bbc\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabcbb\", \"bbc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabcbb\", \"bbc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\"\
    , \"bbc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"\
    bbc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bbc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bbc\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bbc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bbc\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bbc\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabcbb\", \"bbc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabcbb\", \"bbc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\"\
    , \"bbc\")\n</cell\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6bkwrll4.jl:15\nin expression starting at\
    \ /tmp/tmp6bkwrll4.jl:15\n"
  stdout: ''
  timestamp: 1659748229
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for char in string\n\
    \        if char == substring\n            count += 1\n        end\n    end\n\
    \    \n    return count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabcbb\", \"abc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\"\
    , \"bcd\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"a\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"abbb\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"abbbb\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"abbbbc\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"abbbbcc\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"abbbbccc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"abbbbccca\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"abbbbcccab\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"abbbbcccabc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"abbbbcccabcc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"abbbbcccabccc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"abbbbcccabccca\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"abbbbcccabcccab\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"abbbbcccabcccabc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"abbbb\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp022svqlz.jl:15\nin expression starting at\
    \ /tmp/tmp022svqlz.jl:15\n"
  stdout: ''
  timestamp: 1659748229
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string:\n        if\
    \ substring == c:\n            count += 1\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc95vxyn6.jl:6\nin expression starting at /tmp/tmpc95vxyn6.jl:6\n"
  stdout: ''
  timestamp: 1659748225
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    if string == \"\" || substring == \"\"\n   \
    \     return 0\n    end\n    \n    count = 0\n    \n    for c in string\n    \
    \    if c == substring[1]\n            count += 1\n        elseif c == substring[2]\n\
    \            count += 1\n        elseif c == substring[3]\n            count +=\
    \ 1\n        elseif c == substring[4]\n            count += 1\n        elseif\
    \ c == substring[5]\n            count += 1\n        elseif c == substring[6]\n\
    \            count += 1\n        elseif c == substring[7]\n            count +=\
    \ 1\n        elseif c == substring[8]\n            count += 1\n        elseif\
    \ c == substring[9]\n            count += 1\n        elseif c == substring[10]\n\
    \            count += 1\n        elseif c == substring[11]\n            count\
    \ += 1\n        elseif c == substring[12]\n            count += 1\n        elseif\
    \ c == substring[13]\n            count += 1\n        elseif c == substring[14]\n\
    \            count += 1\n        elseif c == substring[15]\n            count\
    \ += 1\n        elseif c == substring[16]\n            count += 1\n        elseif\
    \ c == substring[17]\n            count += 1\n        elseif c == substring[18]\n\
    \            count += 1\n        elseif c == substring[19]\n            count\
    \ += 1\n        elseif c == substring[20]\n            count += 1\n        elseif\
    \ c == substring[21]\n            count += 1\n        elseif c == substring[22]\n\
    \            count += 1\n        elseif c == substring[23]\n            count\
    \ += 1\n        elseif c == substring[24]\n            count += 1\n        elseif\
    \ c == substring[25]\n            count += 1\n        elseif c == substring[26]\n\
    \            count += 1\n        elseif c == substring[27]\n            count\
    \ += 1\n        elseif c == substring[28]\n            count += 1\n        elseif\
    \ c == substring[29]\n            count += 1\n        elseif c == substring[30]\n\
    \            count += 1\n        elseif c == substring[31]\n            count\
    \ += 1\n        elseif c == substring[32]\n            count += 1\n        elseif\
    \ c == substring[33]\n            count += 1\n        elseif c == substring[34]\n\
    \            count += 1\n        elseif c == substring[35]\n            count\
    \ += 1\n        elseif c == substring[36]\n            count += 1\n        elseif\
    \ c == substring[37]\n            count += 1\n        elseif c == substring[38]\n\
    \            count += 1\n        elseif c == substring[39]\n            count\
    \ += 1\n        elseif c == substring[40]\n            count += 1\n        elseif\
    \ c == substring[41]\n            count += 1\n        elseif c == substring[42]\n\
    \            count += 1\n        elseif c == substring[43]\n            count\
    \ += 1\n        elseif c == substring[44]\n            count += 1\n        elseif\
    \ c == substring[45]\n            count += 1\n        elseif c == substring[46]\n\
    \            count += 1\n        elseif c == substring\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpedi6wj0o.jl:1\nin expression starting at /tmp/tmpedi6wj0o.jl:1\n"
  stdout: ''
  timestamp: 1659748225
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string:\n        if\
    \ c == substring:\n            count += 1\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzk7r6msy.jl:6\nin expression starting at /tmp/tmpzk7r6msy.jl:6\n"
  stdout: ''
  timestamp: 1659748220
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for char in string\n        if\
    \ char == substring\n            count += 1\n        end\n    end\n    return\
    \ count\nend\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t\
    @test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\
    \t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\"\
    , \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp95shadwu.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmp95shadwu.jl:18\n  Expression: candidate(\"\
    xyxyxyx\", \"x\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp95shadwu.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp95shadwu.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp95shadwu.jl:19\n  Expression: candidate(\"cacacacac\", \"\
    cac\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp95shadwu.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp95shadwu.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp95shadwu.jl:20\n  Expression: candidate(\"john doe\", \"john\"\
    ) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp95shadwu.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp95shadwu.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659748228
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    if string == \"\" || substring == \"\"\n   \
    \     return 0\n    \n    i = 0\n    j = string.length - 1\n    \n    while i\
    \ <= j\n        if string[i] == substring[0]\n            i += 1\n           \
    \ if i == string.length\n                return 1\n        elseif string[j] ==\
    \ substring[1]\n            j -= 1\n            if j == -1\n                return\
    \ 1\n        else\n            if string[i] < substring[0]\n                i\
    \ += 1\n            else\n                j -= 1\n        end\n    end\n    return\
    \ 0\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bca\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abcde\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcde\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"bcd\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bcda\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\
    bcd\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcd\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcd\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcd\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcd\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"bcd\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bcd\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bcd\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\
    bcd\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcd\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcd\")\n</cell>\n\
    <code language=julia-\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd_4u6t8h.jl:28\nin expression starting at\
    \ /tmp/tmpd_4u6t8h.jl:28\n"
  stdout: ''
  timestamp: 1659748229
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    if string == \"\" || substring == \"\"\n   \
    \     return 0\n    \n    string_length = len(string)\n    substring_length =\
    \ len(substring)\n    \n    i = 0\n    j = 0\n    \n    while i < string_length\
    \ && j < substring_length\n        if string[i] == substring[j]\n            i\
    \ += 1\n            j += 1\n        else\n            if j == substring_length\n\
    \                return i + 1\n            else\n                j += 1\n    \
    \    end\n    end\n    \n    return 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp26ofcwkt.jl:1\nin expression starting at /tmp/tmp26ofcwkt.jl:1\n"
  stdout: ''
  timestamp: 1659748229
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string\n        if c\
    \ == substring\n            count += 1\n        end\n    end\n    return count\n\
    end\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"abcabc\", \"abc\")\n\
    </cell>\n<code language=julia-1.4>\nhow_many_times(\"abcabc\", \"bca\")\n</cell>\n\
    <code language=julia-1.4>\nhow_many_times(\"abcabc\", \"bcc\")\n</cell>\n<code\
    \ language=julia-1.4>\nhow_many_times(\"abcabc\", \"bccc\")\n</cell>\n<code language=julia-1.4>\n\
    how_many_times(\"abcabc\", \"bcca\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\
    abcabc\", \"bccca\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"abcabc\"\
    , \"bccaa\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"abcabc\", \"\
    bccaab\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"abcabc\", \"bccaabb\"\
    )\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"abcabc\", \"bccaabbb\"\
    )\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"abcabc\", \"bccaabbbb\"\
    )\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"abcabc\", \"bccaabbbbc\"\
    )\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"abcabc\", \"bccaabbbbcc\"\
    )\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"abcabc\", \"bccaabbbbccc\"\
    )\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"abcabc\", \"bccaabbbbccca\"\
    )\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"abcabc\", \"bccaabbbbcccab\"\
    )\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"abcabc\", \"bccaabbbbcccabc\"\
    )\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"abcabc\", \"bccaabbbbcccabca\"\
    )\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"abcabc\", \"bccaabbbbcccabcab\"\
    )\n</cell>\n<code language=julia-1.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphnsr3myy.jl:12\nin expression starting at\
    \ /tmp/tmphnsr3myy.jl:12\n"
  stdout: ''
  timestamp: 1659748229
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string\n        if c\
    \ == substring\n            count += 1\n        end\n    end\n    return count\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"abc\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bca\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"c\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"ab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\"\
    )\n</cell>\n<code language=\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqsunyzqu.jl:12\nin expression starting at\
    \ /tmp/tmpqsunyzqu.jl:12\n"
  stdout: ''
  timestamp: 1659748229
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string:\n        if\
    \ c == substring:\n            count += 1\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzk7r6msy.jl:6\nin expression starting at /tmp/tmpzk7r6msy.jl:6\n"
  stdout: ''
  timestamp: 1659748220
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for c in string:\n\
    \        if c == substring[0]:\n            count += 1\n        elif c == substring[1]:\n\
    \            count += 1\n            \n    return count\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"abc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bcd\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"c\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcab\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8nky310e.jl:8\nin expression starting at /tmp/tmp8nky310e.jl:8\n"
  stdout: ''
  timestamp: 1659748229
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    \n    count = 0\n    \n    for char in string\n\
    \        if char == substring\n            count += 1\n        end\n    end\n\
    \    \n    return count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"abc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"bca\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"\
    abcde\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcde\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"cde\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"de\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"bcde\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"cde\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"de\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcde\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"cde\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabc\", \"de\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabc\", \"bcde\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabc\", \"cde\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\"\
    , \"de\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"bcde\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabc\", \"cde\")\n</cell>\n\
    <code language=julia-1.5\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5kvrzu5t.jl:15\nin expression starting at\
    \ /tmp/tmp5kvrzu5t.jl:15\n"
  stdout: ''
  timestamp: 1659748229
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n                \"\"\"\nfunction how_many_times(string::String,\
    \ substring::String)::Int64 \n    if string == \"\" || substring == \"\" \n  \
    \      then return 0\n    else if string[0] == substring[0]\n        then return\
    \ 1\n    else if string[string.length-1] == substring[substring.length-1]\n  \
    \      then return 1\n    else if string[string.length-1] == substring[0]\n  \
    \      then return 1\n    else if string[0] == substring[substring.length-1]\n\
    \        then return 1\n    else if string[string.length-1] == substring[0]\n\
    \        then return 1\n    else if string[0] == substring[0]\n        then return\
    \ 1\n    else if string[string.length-1] == substring[substring.length-1]\n  \
    \      then return 1\n    else if string[string.length-1] == substring[0]\n  \
    \      then return 1\n    else if string[0] == substring[substring.length-1]\n\
    \        then return 1\n    else if string[0] == substring[0]\n        then return\
    \ 1\n    else if string[string.length-1] == substring[substring.length-1]\n  \
    \      then return 1\n    else if string[string.length-1] == substring[0]\n  \
    \      then return 1\n    else if string[0] == substring[substring.length-1]\n\
    \        then return 1\n    else if string[0] == substring[0]\n        then return\
    \ 1\n    else if string[string.length-1] == substring[substring.length-1]\n  \
    \      then return 1\n    else if string[string.length-1] == substring[0]\n  \
    \      then return 1\n    else if string[0] == substring[substring.length-1]\n\
    \        then return 1\n    else if string[0] == substring[0]\n        then return\
    \ 1\n    else if string[string.length-1] == substring[substring.length-1]\n  \
    \      then return 1\n    else if string[string.length-1] == substring[0]\n  \
    \      then return 1\n    else if string[0] == substring[substring.length-1]\n\
    \        then return 1\n    else if string[0] == substring[0]\n        then return\
    \ 1\n    else if string[string.length-1] == substring[substring.length-1]\n  \
    \      then return 1\n    else if string[string.length-1] == substring[0]\n  \
    \      then return 1\n    else if string[0] == substring[substring.length-1]\n\
    \        then return 1\n    else if string[0] == substring[0]\n        then return\
    \ 1\n    else if string[string.length-1] == substring[substring.length-1]\n  \
    \      then return 1\n    else if string[string.length-1] == substring[0]\n  \
    \      then return 1\n    else if string[0] == substring[substring.length-1]\n\
    \        then return 1\n    else if string[0] == substring[0]\n        then return\
    \ 1\n    else if string[\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdfxmzagf.jl:5\nin expression starting at /tmp/tmpdfxmzagf.jl:5\n"
  stdout: ''
  timestamp: 1659748229
