language: jl
name: HumanEval_105_by_length
results:
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    if length(arr)\
    \ == 0 \n        return Vector{String}() \n    \n    if length(arr) == 1 \n  \
    \      return [\"One\"]\n    \n    arr = arr |> sort\n    arr = reverse(arr)\n\
    \    arr = arr |> map(x->\"One\" if x == 1 else \"Two\" if x == 2 \n        else\
    \ \"Three\" if x == 3 \n        else \"Four\" if x == 4 \n        else \"Five\"\
    \ if x == 5 \n        else \"Six\" if x == 6 \n        else \"Seven\" if x ==\
    \ 7 \n        else \"Eight\" if x == 8 \n        else \"Nine\", arr)\n    \n \
    \   return arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns the sum of the integers in the vector.\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmc7kce1x.jl:26\nin expression starting at\
    \ /tmp/tmpmc7kce1x.jl:26\n"
  stdout: ''
  timestamp: 1659749550
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" if x == 1 \n \
    \       else \"Two\" if x == 2 \n        else \"Three\" if x == 3 \n        else\
    \ \"Four\" if x == 4 \n        else \"Five\" if x == 5 \n        else \"Six\"\
    \ if x == 6 \n        else \"Seven\" if x == 7 \n        else \"Eight\" if x ==\
    \ 8 \n        else \"Nine\", arr)\n    \n    return arr\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns the same\
    \ vector but with the integers sorted from smallest to largest.\nusing Test\n\n\
    @testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp6hdyd1s.jl:22\nin expression starting at\
    \ /tmp/tmpp6hdyd1s.jl:22\n"
  stdout: ''
  timestamp: 1659749550
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return [] \n    else \n        arr = sort(arr) \n        arr\
    \ = reverse(arr) \n        arr = map(x -> \"One\"[x], arr) \n        return arr\
    \ \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns the sum of the integers. If the vector is empty, return\
    \ 0.\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_s116tfm.jl:26\nin expression starting at\
    \ /tmp/tmp_s116tfm.jl:26\n"
  stdout: ''
  timestamp: 1659749550
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if arr.length ==\
    \ 0 \n        return Vector{String}() \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = map(x -> \"One\" <= x && x <= \"Nine\"\
    \ ? x : \"\", arr) \n        return arr \n    end\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the string with each character\
    \ replaced by its corresponding name from \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpktucotsq.jl:26\nin expression starting at\
    \ /tmp/tmpktucotsq.jl:26\n"
  stdout: ''
  timestamp: 1659749550
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr2 = arr\n\
    \    arr2[1] = arr2[1] - 1\n    arr2[2] = arr2[2] - 1\n    arr2[3] = arr2[3] -\
    \ 1\n    arr2[4] = arr2[4] - 1\n    arr2[5] = arr2[5] - 1\n    arr2[6] = arr2[6]\
    \ - 1\n    arr2[7] = arr2[7] - 1\n    arr2[8] = arr2[8] - 1\n    \n    arr3 =\
    \ arr2\n    arr3[1] = arr3[1] + 1\n    arr3[2] = arr3[2] + 1\n    arr3[3] = arr3[3]\
    \ + 1\n    arr3[4] = arr3[4] + 1\n    arr3[5] = arr3[5] + 1\n    arr3[6] = arr3[6]\
    \ + 1\n    arr3[7] = arr3[7] + 1\n    arr3[8] = arr3[8] + 1\n    \n    arr4 =\
    \ arr3\n    arr4[1] = arr4[1] - 1\n    arr4[2] = arr4[2] - 1\n    arr4[3] = arr4[3]\
    \ - 1\n    arr4[4] = arr4[4] - 1\n    arr4[5] = arr4[5] - 1\n    arr4[6] = arr4[6]\
    \ - 1\n    arr4[7] = arr4[7] - 1\n    arr4[8] = arr4[8] - 1\n    \n    arr5 =\
    \ arr4\n    arr5[1] = arr5[1] + 1\n    arr5[2] = arr5[2] + 1\n    arr5[3] = arr5[3]\
    \ + 1\n    arr5[4] = arr5[4] + 1\n    arr5[5] = arr5[5] + 1\n    arr5[6] = arr5[6]\
    \ + 1\n    arr5[7] = arr5[7] + 1\n    arr5[8] = arr5[8] + 1\n    \n    arr6 =\
    \ arr5\n    arr6[1] = arr6[1] - 1\n    arr6[2] = arr6[2] - 1\n    arr6[3] = arr6[3]\
    \ - 1\n    arr6[4] = arr6[4] - 1\n    arr6[5] = arr6[5] - 1\n    arr6[6] = arr6[6]\
    \ - 1\n    arr6[7] = arr6[7] - 1\n    arr6[8] = arr6[8] - 1\n    \n    arr7 =\
    \ arr6\n    arr7[1] = arr7[1] + 1\n    arr7[2] = arr7[2] + 1\n    arr7[3] = arr7[3]\
    \ + 1\n    arr7[4] = arr7[4] + 1\n    arr7[5] = arr7[5\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpebyp6m40.jl:1\nin expression starting at /tmp/tmpebyp6m40.jl:1\n"
  stdout: ''
  timestamp: 1659749550
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n\
    \    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" <= x && x <= \"\
    Nine\" ? x : \"\", arr)\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns the sum of the integers in the vector.\
    \ \nFor example, \n    by_sum([1, 2, 3])\nshould return 6. \n    \n    Do not\
    \ use loops, just recursion.\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwyi9l2fl.jl:29\nin expression starting at\
    \ /tmp/tmpwyi9l2fl.jl:29\n"
  stdout: ''
  timestamp: 1659749550
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return Vector{String}() \n    else \n        arr = sort(arr)\
    \ \n        arr = reverse(arr) \n        arr = map(x -> \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", x)\n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns a vector of strings that represent each of the numbers in the vector\
    \ in descending order.\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpotx5oard.jl:25\nin expression starting at\
    \ /tmp/tmpotx5oard.jl:25\n"
  stdout: ''
  timestamp: 1659749550
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = arr\
    \ |> sort() |> reverse()\n    \n    arr = arr |> map(x->\"One\"..\"Nine\"[x])\
    \ |> Vector{String}\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes an array of integers and returns a new array where each element is\
    \ the sum of the array elements with the same index. For example:\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyvdflj4l.jl:24\nin expression starting at\
    \ /tmp/tmpyvdflj4l.jl:24\n"
  stdout: ''
  timestamp: 1659749550
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return [] \n    else \n        arr = arr |> sort() \n       \
    \ arr = reverse(arr) \n        arr = arr |> map((x) -> \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")[x] \n        return\
    \ arr \n    end\nend\n</code>\n<|/ a tags=julia,arrays |>\n<| a dscore=2 |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp3ohfvm4.jl:26\nin expression starting at\
    \ /tmp/tmpp3ohfvm4.jl:26\n"
  stdout: ''
  timestamp: 1659749550
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    if length(arr)\
    \ == 0\n        return Vector{String}()\n    end\n    \n    arr = arr .+ 1\n \
    \   \n    arr2 = reverse(arr)\n    \n    arr3 = arr2 .- arr\n    \n    arr4 =\
    \ arr3 .+ arr\n    \n    arr5 = arr4 .- arr\n    \n    arr6 = arr5 .+ arr\n  \
    \  \n    arr7 = arr6 .- arr\n    \n    arr8 = arr7 .+ arr\n    \n    arr9 = arr8\
    \ .- arr\n    \n    arr10 = arr9 .+ arr\n    \n    arr11 = arr10 .- arr\n    \n\
    \    arr12 = arr11 .+ arr\n    \n    arr13 = arr12 .- arr\n    \n    arr14 = arr13\
    \ .+ arr\n    \n    arr15 = arr14 .- arr\n    \n    arr16 = arr15 .+ arr\n   \
    \ \n    arr17 = arr16 .- arr\n    \n    arr18 = arr17 .+ arr\n    \n    arr19\
    \ = arr18 .- arr\n    \n    arr20 = arr19 .+ arr\n    \n    arr21 = arr20 .- arr\n\
    \    \n    arr22 = arr21 .+ arr\n    \n    arr23 = arr22 .- arr\n    \n    arr24\
    \ = arr23 .+ arr\n    \n    arr25 = arr24 .- arr\n    \n    arr26 = arr25 .+ arr\n\
    \    \n    arr27 = arr26 .- arr\n    \n    arr28 = arr27 .+ arr\n    \n    arr29\
    \ = arr28 .- arr\n    \n    arr30 = arr29 .+ arr\n    \n    arr31 = arr30 .- arr\n\
    \    \n    arr32 = arr31 .+ arr\n    \n    arr33 = arr32 .- arr\n    \n    arr34\
    \ = arr33 .+ arr\n    \n    arr35 = arr34 .- arr\n    \n    arr36 = arr35 .+ arr\n\
    \    \n    arr37 = arr36 .- arr\n    \n    arr38 = arr37 .+ arr\n    \n    arr39\
    \ = arr38 .- arr\n    \n    arr40 = arr39 .+ arr\n    \n    arr41 = arr40 .- arr\n\
    \    \n    arr42 = arr41 .+ arr\n    \n    arr43 = arr42 \nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdkqyvlc_.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdkqyvlc_.jl:1\n\
    in expression starting at /tmp/tmpdkqyvlc_.jl:1\n"
  stdout: ''
  timestamp: 1659749550
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return Vector{String}() \n    else \n        arr = arr |> sort()\
    \ |> reverse \n        arr = arr |> map((x) -> \"One\" <= x && x <= \"Nine\" ?\
    \ \"One\" : \n            \"Two\" <= x && x <= \"Nine\" ? \"Two\" : \n       \
    \     \"Three\" <= x && x <= \"Nine\" ? \"Three\" : \n            \"Four\" <=\
    \ x && x <= \"Nine\" ? \"Four\" : \n            \"Five\" <= x && x <= \"Nine\"\
    \ ? \"Five\" : \n            \"Six\" <= x && x <= \"Nine\" ? \"Six\" : \n    \
    \        \"Seven\" <= x && x <= \"Nine\" ? \"Seven\" : \n            \"Eight\"\
    \ <= x && x <= \"Nine\" ? \"Eight\" : \n            \"Nine\" <= x && x <= \"Nine\"\
    \ ? \"Nine\" : x) \n        arr \n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes an array of integers and returns the array sorted\
    \ in descending order.\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxtvj2xmw.jl:33\nin expression starting at\
    \ /tmp/tmpxtvj2xmw.jl:33\n"
  stdout: ''
  timestamp: 1659749550
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if arr.length ==\
    \ 0 \n        return Vector{String}() \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = map(x -> \"One\" <= x && x <= \"Nine\"\
    \ ? x : \"\", arr) \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise: Write a function\
    \ that takes a vector of integers and returns a vector of strings. \nThe strings\
    \ should be the names of the integers sorted from smallest to largest.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp259hcy1i.jl:26\nin expression starting at\
    \ /tmp/tmp259hcy1i.jl:26\n"
  stdout: ''
  timestamp: 1659749550
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if arr.length ==\
    \ 0 \n        return [] \n    else \n        arr = sort(arr) \n        arr = reverse(arr)\
    \ \n        arr = map(x -> \"One\" <= x && x <= \"Nine\" ? x : \"\", arr) \n \
    \       arr \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of strings and returns a vector of strings where each string\
    \ in the original vector is replaced by the first letter of the string. For example:\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp34fi2qpi.jl:26\nin expression starting at\
    \ /tmp/tmp34fi2qpi.jl:26\n"
  stdout: ''
  timestamp: 1659749550
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    if length(arr)\
    \ == 0 \n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n\
    \    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" <= x && x <= \"\
    Nine\" ? x : error(\"Invalid input\"), arr)\n    \n    return arr\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ a vector of strings that represent each of the numbers in the vector in descending\
    \ order.\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuan70xka.jl:30\nin expression starting at\
    \ /tmp/tmpuan70xka.jl:30\n"
  stdout: ''
  timestamp: 1659749550
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    if length(arr)\
    \ == 0 \n        return Vector{String}() \n    else \n        \n        arr =\
    \ sort(arr) \n        \n        arr = reverse(arr) \n        \n        arr = map(x\
    \ -> \"One\" <= x && x <= \"Nine\" ? x : \"\", arr)\n        \n        return\
    \ arr\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of integers and returns the sum of the integers squared. \nFor example,\
    \ \n>>> by_length(Vector{Int64}([2, 1, 1, 4, 5, 8, 2, 3]))\n[4, 16, 36, 64, 100]\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp22q9p4rq.jl:31\nin expression starting at\
    \ /tmp/tmp22q9p4rq.jl:31\n"
  stdout: ''
  timestamp: 1659749550
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if arr.length ==\
    \ 0 \n        return Vector{String}() \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = map(x -> \"One\" if x == 1 \n    \
    \        else \"Two\" if x == 2 \n            else \"Three\" if x == 3 \n    \
    \        else \"Four\" if x == 4 \n            else \"Five\" if x == 5 \n    \
    \        else \"Six\" if x == 6 \n            else \"Seven\" if x == 7 \n    \
    \        else \"Eight\" if x == 8 \n            else \"Nine\", arr) \n       \
    \ return arr \n    end\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nThis doesn't\
    \ work if the array is empty. `by_length([])` returns `[]`, not `Vector{String}()`.\n\
    <|/ c |>\n<| c |>\nI added a version that handles the empty array case.\n<|/ c\
    \ |>\n<| a dscore=2 |>\nI like using map for these kinds of problems:\n<code>\n\
    julia> using Statistics\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv652q16u.jl:22\nin expression starting at\
    \ /tmp/tmpv652q16u.jl:22\n"
  stdout: ''
  timestamp: 1659749550
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if arr.length ==\
    \ 0\n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n   \
    \ \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" <= x && x <= \"Nine\"\
    \ ? x : \"\", arr)\n    \n    return arr\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes an array of integers and returns the array sorted in descending\
    \ order. \nFor example, given [5, 2, 7, 1, 3, 9, 4], the function should return\
    \ [9, 7, 5, 3, 1, 2, 4].\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp28vkjhaj.jl:29\nin expression starting at\
    \ /tmp/tmp28vkjhaj.jl:29\n"
  stdout: ''
  timestamp: 1659749550
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    if length(arr)\
    \ == 0\n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n\
    \    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" <= x && x <= \"\
    Nine\" ? x : error(\"Invalid number\"), arr)\n    \n    return arr\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of integers and returns\
    \ the sum of the integers in the vector. \nFor example, \n>>> by_length(Vector{Int64}([2,\
    \ 1, 1, 4, 5, 8, 2, 3]))\n[5, 7, 8, 11, 13, 15, 17, 19]\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2gzfhywq.jl:30\nin expression starting at\
    \ /tmp/tmp2gzfhywq.jl:30\n"
  stdout: ''
  timestamp: 1659749550
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    \n    if isempty(arr)\n        return Vector{String}()\n    end\n    \n \
    \   arr = reverse(arr)\n    \n    digits = Vector{String}(\"\")\n    \n    for\
    \ n in arr\n        if n >= 1 && n <= 9\n            digits = push!(digits, names(n)[1])\n\
    \        end\n    end\n    \n    return digits\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes an array of integers and returns the array in reverse order.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk5rq4c3u.jl:36\nin expression starting at\
    \ /tmp/tmpk5rq4c3u.jl:36\n"
  stdout: ''
  timestamp: 1659749550
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return Vector{String}() \n    else \n        arr = arr |> sort()\
    \ \n        arr = reverse(arr) \n        arr = arr |> map(x->\"One\"..\"Nine\"\
    [x-1]) \n    end\nend\n</code>\n<|/ a |>\n<| a dscore=2 |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcuy_04cf.jl:25\nin expression starting at\
    \ /tmp/tmpcuy_04cf.jl:25\n"
  stdout: ''
  timestamp: 1659749550
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if arr.length ==\
    \ 0 \n        return Vector{String}() \n    else \n        arr = arr |> sort()\
    \ \n        arr = reverse(arr) \n        arr = arr |> map(x->\"One\"..\"Nine\"\
    [x-1]) \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes an array of integers and returns the array in reverse order. \nFor\
    \ example, \n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n[\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n>>> by_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])[::-1]\n[\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"]\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])[::-1]\n\
    [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"]\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])[::-1]\n[\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n>>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])[::-1]\n[\"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n>>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])[::-1]\n[\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n>>> by_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])[::-1]\n[\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"]\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])[::-1]\n[\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ]\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])[::-1]\n[\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n>>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])[::-1]\n[\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n>>> by_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])[::-1]\n[\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"]\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])[::-1]\n[\"One\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp81ahasm7.jl:26\nin expression starting at\
    \ /tmp/tmp81ahasm7.jl:26\n"
  stdout: ''
  timestamp: 1659749550
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr2 = arr\n\
    \    \n    if arr2 == []\n        return arr2\n    end\n    \n    arr3 = arr2\n\
    \    \n    arr4 = arr3\n    \n    arr5 = arr4\n    \n    arr6 = arr5\n    \n \
    \   arr7 = arr6\n    \n    arr8 = arr7\n    \n    arr9 = arr8\n    \n    arr10\
    \ = arr9\n    \n    arr11 = arr10\n    \n    arr12 = arr11\n    \n    arr13 =\
    \ arr12\n    \n    arr14 = arr13\n    \n    arr15 = arr14\n    \n    arr16 = arr15\n\
    \    \n    arr17 = arr16\n    \n    arr18 = arr17\n    \n    arr19 = arr18\n \
    \   \n    arr20 = arr19\n    \n    arr21 = arr20\n    \n    arr22 = arr21\n  \
    \  \n    arr23 = arr22\n    \n    arr24 = arr23\n    \n    arr25 = arr24\n   \
    \ \n    arr26 = arr25\n    \n    arr27 = arr26\n    \n    arr28 = arr27\n    \n\
    \    arr29 = arr28\n    \n    arr30 = arr29\n    \n    arr31 = arr30\n    \n \
    \   arr32 = arr31\n    \n    arr33 = arr32\n    \n    arr34 = arr33\n    \n  \
    \  arr35 = arr34\n    \n    arr36 = arr35\n    \n    arr37 = arr36\n    \n   \
    \ arr38 = arr37\n    \n    arr39 = arr38\n    \n    arr40 = arr39\n    \n    arr41\
    \ = arr40\n    \n    arr42 = arr41\n    \n    arr43 = arr42\n    \n    arr44 =\
    \ arr43\n    \n    arr45 = arr44\n    \n    arr46 = arr45\n    \n    arr47 = arr46\n\
    \    \n    arr48 = arr47\n    \n    arr49 = arr48\n    \n    arr50 = arr49\n \
    \   \n    arr51 = arr50\n    \n    arr52 = arr51\n    \n    arr53 = arr52\n  \
    \  \n    arr54 = arr53\n    \n    arr55 = arr54\n    \n    arr56 = arr55\n   \
    \ \n    arr57 = arr56\n    \n    arr58 = arr\nusing Test\n\n@testset begin\n\n\
    candidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk0ug5p6i.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk0ug5p6i.jl:1\n\
    in expression starting at /tmp/tmpk0ug5p6i.jl:1\n"
  stdout: ''
  timestamp: 1659749550
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return Vector{String}() \n    else \n        arr = arr |> sort()\
    \ \n        arr = arr |> reverse() \n        arr = arr |> map((x) -> \"One\",\
    \ \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    )[x] \n        return arr \n    end\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,arrays\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyq6n617w.jl:26\nin expression starting at\
    \ /tmp/tmpyq6n617w.jl:26\n"
  stdout: ''
  timestamp: 1659749550
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return Vector{String}() \n    else \n        arr = sort(arr)\
    \ \n        arr = reverse(arr) \n        arr = map(x -> \"One\"..\"Nine\"[x],\
    \ arr) \n        arr \n    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t\
    @test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppsw8qz76.jl:26\nin expression starting at\
    \ /tmp/tmppsw8qz76.jl:26\n"
  stdout: ''
  timestamp: 1659749551
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    if arr.length\
    \ == 0 \n        return Vector{String}()\n    end\n    \n    arr = arr |> sort()\
    \ |> reverse()\n    \n    arr = arr |> map(x->\"One\"..\"Nine\"[x]) |> Vector{String}\n\
    \    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n\
    by_length([1])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([1, -1 , 55])\n\
    by_length([2, -1, -1, 1, 4, 5, 8, 2, 3])\nby_length([2, -1, -1, 1, 4, 5, 8, 2,\
    \ 3])\nby_length([2, -1, -1, 1, 4, 5, 8, 2, 3])\nby_length([2, -1, -1, 1, 4, 5,\
    \ 8, 2, 3])\nby_length([2, -1, -1, 1, 4, 5, 8, 2, 3])\nby_length([2, -1, -1, 1,\
    \ 4, 5, 8, 2, 3])\nby_length([2, -1, -1, 1, 4, 5, 8, 2, 3])\nby_length([2, -1,\
    \ -1, 1, 4, 5, 8, 2, 3])\nby_length([2, -1, -1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ -1, -1, 1, 4, 5, 8, 2, 3])\nby_length([2, -1, -1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ -1, -1, 1, 4, 5, 8, 2, 3])\nby_length([2, -1, -1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ -1, -1, 1, 4, 5, 8, 2, 3])\nby_length([2, -1, -1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ -1, -1, 1, 4, 5, 8, 2, 3])\nby_length([2, -1, -1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ -1, -1, 1, 4, 5, 8, 2, 3])\nby_length([2, -1, -1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ -1, -1, 1, 4, 5, 8, 2, 3])\nby_length([2, -1, -1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ -1, -1, 1, 4, 5, 8, 2, 3])\nby_length([2, -1, -1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ -1, -1, 1, 4, 5, 8, 2, 3])\nby_length([2, -1, -1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ -1, -1, 1, 4, 5, 8, 2, 3])\nby_length([2, -1, -1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ -1, -1, 1, 4, 5, 8, 2, 3])\nby_length([2, -1, -1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ -1, -1, 1, 4, 5, 8, 2, 3])\nby_length([2, -1, -1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ -1, -1, 1, 4, 5, 8, 2, 3])\nby_length([2, -1, -1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ -1, -1, 1, 4, 5, 8, 2, 3])\nby_\nusing Test\n\n@testset begin\n\ncandidate =\
    \ by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdj91obdu.jl:28\nin expression starting at\
    \ /tmp/tmpdj91obdu.jl:28\n"
  stdout: ''
  timestamp: 1659749551
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = arr\
    \ |> sort() |> reverse()\n    \n    arr = arr |> map(x->\"One\"..\"Nine\"[x])\
    \ |> Vector{String}\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings that represent\
    \ each of the numbers in the vector in descending order. For example, if the input\
    \ vector is [4, 8, 2, 6, 1, 3], the output vector should be [\"8\", \"6\", \"\
    4\", \"3\", \"2\", \"1\"].\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2vpkew7x.jl:24\nin expression starting at\
    \ /tmp/tmp2vpkew7x.jl:24\n"
  stdout: ''
  timestamp: 1659749551
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\"..\"Nine\"[x],\
    \ arr)\n    \n    return arr\nend\n</cell>\n<code language=julia-1.3>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise\nWrite a function called by_length_2\
    \ that takes an array of integers and returns the same array but with the integers\
    \ between 1 and 9 replaced by their corresponding names from \"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpasa3tb9l.jl:26\nin expression starting at\
    \ /tmp/tmpasa3tb9l.jl:26\n"
  stdout: ''
  timestamp: 1659749551
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return [] \n    else \n        arr = sort(arr) \n        arr\
    \ = reverse(arr) \n        arr = map(x -> \"One\" <= x && x <= \"Nine\" ? x :\
    \ \"\", arr) \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([1])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa2i9a0dp.jl:26\nin expression starting at\
    \ /tmp/tmpa2i9a0dp.jl:26\n"
  stdout: ''
  timestamp: 1659749551
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n\
    \    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" <= x && x <= \"\
    Nine\" ? x : error(\"Invalid input\"), arr)\n    \n    return arr\nend\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns a vector\
    \ of strings that represent each of the integers \nbetween 1 and 9 inclusive,\
    \ with each string representing a number between \"One\" and \"Nine\".\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf2r33sl5.jl:29\nin expression starting at\
    \ /tmp/tmpf2r33sl5.jl:29\n"
  stdout: ''
  timestamp: 1659749551
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    if length(arr)\
    \ == 0 \n        return [] \n    else \n        \n        arr = sort(arr) \n \
    \       \n        arr = reverse(arr) \n        \n        arr = map(x -> \"One\"\
    [x], arr) \n        \n        arr = map(x -> \"Two\"[x], arr) \n        \n   \
    \     arr = map(x -> \"Three\"[x], arr) \n        \n        arr = map(x -> \"\
    Four\"[x], arr) \n        \n        arr = map(x -> \"Five\"[x], arr) \n      \
    \  \n        arr = map(x -> \"Six\"[x], arr) \n        \n        arr = map(x ->\
    \ \"Seven\"[x], arr) \n        \n        arr = map(x -> \"Eight\"[x], arr) \n\
    \        \n        arr = map(x -> \"Nine\"[x], arr) \n        \n        return\
    \ arr \n    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ vector of integers and returns the sum of the integers in the vector.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk2zlmxyz.jl:47\nin expression starting at\
    \ /tmp/tmpk2zlmxyz.jl:47\n"
  stdout: ''
  timestamp: 1659749551
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return [] \n    else \n        arr = sort(arr) \n        arr\
    \ = reverse(arr) \n        arr = map(x -> name(x), arr) \n        return arr \n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function that takes an array of\
    \ integers and returns the array sorted in descending order.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz4u9w0t1.jl:26\nin expression starting at\
    \ /tmp/tmpz4u9w0t1.jl:26\n"
  stdout: ''
  timestamp: 1659749551
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    if length(arr)\
    \ == 0 \n        return [] \n    \n    if length(arr) == 1 \n        return [\"\
    One\"]\n    \n    if length(arr) == 2 \n        return [\"One\", \"Two\"]\n  \
    \  \n    if length(arr) == 3 \n        return [\"One\", \"Two\", \"Three\"]\n\
    \    \n    if length(arr) == 4 \n        return [\"One\", \"Two\", \"Three\",\
    \ \"Four\"]\n    \n    if length(arr) == 5 \n        return [\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\"]\n    \n    if length(arr) == 6 \n        return\
    \ [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"]\n    \n    if length(arr)\
    \ == 7 \n        return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\"]\n    \n    if length(arr) == 8 \n        return [\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"]\n    \n    if\
    \ length(arr) == 9 \n        return [\"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    \nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes an array of integers and returns a new\
    \ array where each element in the new array is the sum of the integers in the\
    \ original array except for those that are divisible by 3. The function should\
    \ ignore any numbers that are not divisible by 3.\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0j_dmvhl.jl:49\nin expression starting at\
    \ /tmp/tmp0j_dmvhl.jl:49\n"
  stdout: ''
  timestamp: 1659749551
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    \n    arr = reverse(arr)\n    \n    arr = arr .- 9\n    \n    arr = arr .+\
    \ 1 \n    \n    arr = arr .- 9\n    \n    arr = arr .+ 1 \n    \n    arr = arr\
    \ .- 9\n    \n    arr = arr .+ 1 \n    \n    arr = arr .- 9\n    \n    arr = arr\
    \ .+ 1 \n    \n    arr = arr .- 9\n    \n    arr = arr .+ 1 \n    \n    arr =\
    \ arr .- 9\n    \n    arr = arr .+ 1 \n    \n    arr = arr .- 9\n    \n    arr\
    \ = arr .+ 1 \n    \n    arr = arr .- 9\n    \n    arr = arr .+ 1 \n    \n   \
    \ arr = arr .- 9\n    \n    arr = arr .+ 1 \n    \n    arr = arr .- 9\n    \n\
    \    arr = arr .+ 1 \n    \n    arr = arr .- 9\n    \n    arr = arr .+ 1 \n  \
    \  \n    arr = arr .- 9\n    \n    arr = arr .+ 1 \n    \n    arr = arr .- 9\n\
    \    \n    arr = arr .+ 1 \n    \n    arr = arr .- 9\n    \n    arr = arr .+ 1\
    \ \n    \n    arr = arr .- 9\n    \n    arr = arr .+ 1 \n    \n    arr = arr .-\
    \ 9\n    \n    arr = arr .+ 1 \n    \n    arr = arr .- 9\n    \n    arr = arr\
    \ .+ 1 \n    \n    arr = arr .- 9\n    \n    arr = arr .+ 1 \n    \n    arr =\
    \ arr .- 9\n    \n    arr = arr .+ 1 \n    \n    arr = arr .- 9\n    \n    arr\
    \ = arr .+ 1 \n    \n    arr = arr .- 9\n    \n    arr = arr .+ 1 \n    \n   \
    \ arr = arr .- 9\n    \n    arr = arr .+ 1 \n    \n    arr = arr .- 9\n    \n\
    \    arr = arr .+ 1 \n    \n    arr = arr .- 9\n    \n    arr = arr .+ 1 \n  \
    \  \n    arr = arr .- 9\n    \n    arr = arr .+ 1 \n    \n    arr = arr .- 9\n\
    \    \n    arr = arr .+ 1 \n    \n    arr = arr .- 9\n    \n    arr = arr .+ 1\
    \ \n    \n    arr = arr .- 9\n    \n    \nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmso6_xli.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmso6_xli.jl:1\n\
    in expression starting at /tmp/tmpmso6_xli.jl:1\n"
  stdout: ''
  timestamp: 1659749551
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    if length(arr)\
    \ == 0 \n        return Vector{String}() \n    else \n        \n        arr =\
    \ sort(arr) \n        \n        arr = reverse(arr) \n        \n        arr = map(x\
    \ -> \"One\" <= x && x <= \"Nine\" ? x : \"\", arr) \n        \n        return\
    \ arr \n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ an array of integers and returns the number of integers that are less than or\
    \ equal to 10.\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9mpamdnx.jl:31\nin expression starting at\
    \ /tmp/tmp9mpamdnx.jl:31\n"
  stdout: ''
  timestamp: 1659749551
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr = arr |> sort()\
    \ |> reverse()\n    arr = arr |> map(x->\"One\"..\"Nine\"[x-1]) |> Vector{String}\n\
    \    if arr.length == 0\n        return Vector{String}()\n    else\n        return\
    \ arr\n    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\nby_length([1])\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\nby_length([\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkrd0mq1g.jl:25\nin expression starting at\
    \ /tmp/tmpkrd0mq1g.jl:25\n"
  stdout: ''
  timestamp: 1659749551
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return [] \n    else \n        arr = sort(arr) \n        arr\
    \ = reverse(arr) \n        arr = map(x -> \"One\" if x == 1 \n            else\
    \ \"Two\" if x == 2 \n            else \"Three\" if x == 3 \n            else\
    \ \"Four\" if x == 4 \n            else \"Five\" if x == 5 \n            else\
    \ \"Six\" if x == 6 \n            else \"Seven\" if x == 7 \n            else\
    \ \"Eight\" if x == 8 \n            else \"Nine\", arr) \n        return arr \n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of\
    \ integers and returns the number of integers that are less than or equal to each\
    \ of the integers in the vector.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0x5o1xva.jl:22\nin expression starting at\
    \ /tmp/tmp0x5o1xva.jl:22\n"
  stdout: ''
  timestamp: 1659749551
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    if length(arr)\
    \ == 0 \n        return Vector{String}()\n    \n    arr = arr |> sort\n    \n\
    \    arr = reverse(arr)\n    \n    arr = arr |> map(x->\"One\"..\"Nine\"[x-1])\
    \ |> Vector{String}\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([])\n</cell>\n<code language=julia-1.5>\nby_length([1])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, \nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqik47t76.jl:29\nin expression starting at\
    \ /tmp/tmpqik47t76.jl:29\n"
  stdout: ''
  timestamp: 1659749551
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    if length(arr)\
    \ == 0 \n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n\
    \    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" <= x && x <= \"\
    Nine\" ? x : \"\", arr)\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of times a value appears in an array. For example:\n\
    >>> count_values([1, 3, 1, 2, 3, 1])\n{1: 2, 3: 3}\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpysksnew_.jl:30\nin expression starting at\
    \ /tmp/tmpysksnew_.jl:30\n"
  stdout: ''
  timestamp: 1659749551
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    if length(arr)\
    \ == 0 \n        return Vector{String}()\n    \n    if length(arr) == 1 \n   \
    \     return [\"One\"]\n    \n    arr = sort(arr)\n    \n    arr = reverse(arr)\n\
    \    \n    arr = map(x -> \"One\" <= x && x <= \"Nine\" ? x : \"\", arr)\n   \
    \ \n    return arr\nend\n</cell>\n<code language=julia-1.4>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of integers and returns a vector of strings that represent each of\
    \ the numbers in the vector in reverse order. For example, if the vector is [4,\
    \ 6, 3, 8, 2, 1], your function should return [\"8\", \"6\", \"4\", \"2\", \"\
    1\", \"3\"].\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwuf4byes.jl:32\nin expression starting at\
    \ /tmp/tmpwuf4byes.jl:32\n"
  stdout: ''
  timestamp: 1659749551
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    if length(arr)\
    \ == 0\n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n\
    \    \n    arr2 = reverse(arr)\n    \n    arr3 = Vector{String}(undef, 0)\n  \
    \  \n    for i in arr2\n        if i <= 9\n            arr3 .= push!(arr3, \"\
    One\")\n        elseif i <= 99\n            arr3 .= push!(arr3, \"Two\")\n   \
    \     elseif i <= 999\n            arr3 .= push!(arr3, \"Three\")\n        elseif\
    \ i <= 9999\n            arr3 .= push!(arr3, \"Four\")\n        elseif i <= 99999\n\
    \            arr3 .= push!(arr3, \"Five\")\n        elseif i <= 999999\n     \
    \       arr3 .= push!(arr3, \"Six\")\n        elseif i <= 9999999\n          \
    \  arr3 .= push!(arr3, \"Seven\")\n        elseif i <= 999999999\n           \
    \ arr3 .= push!(arr3, \"Eight\")\n        elseif i <= 99999999999\n          \
    \  arr3 .= push!(arr3, \"Nine\")\n        elseif i <= 1000000000\n           \
    \ arr3 .= push!(arr3, \"Ten\")\n        elseif i <= 1000000000000\n          \
    \  arr3 .= push!(arr3, \"Eleven\")\n        elseif i <= 1000000000000000\n   \
    \         arr3 .= push!(arr3, \"Twelve\")\n        elseif i <= 1000000000000000000\n\
    \            arr3 .= push!(arr3, \"Thirteen\")\n        elseif i <= 10000000000000000000\n\
    \            arr3 .= push!(arr3, \"Fourteen\")\n        elseif i <= 100000000000000000000\n\
    \            arr3 .= push!(arr3, \"Fifteen\")\n        elseif i <= 1000000000000000000000\n\
    \            arr3 .= push!(arr3, \"Sixteen\")\n        elseif i <= 10000000000000000000000\n\
    \            arr3 .= push!(arr3, \"Seventeen\")\n        elseif i <= 100000000000000000000000\n\
    \            arr3 .= push!(arr3, \"Eighteen\")\n        elseif i <= 1000000000000000000000000\n\
    \            arr3 .= push!(arr3, \"Nineteen\")\n        elseif i <= 10000000000000000000000000\n\
    \            arr3 .= push!(arr3, \"Twenty\")\n        elseif i <= 100000000000000000000000000\n\
    \            arr3 .= push!(arr3, \"Twenty one\")\n        elseif i <= 1000000000000000000000000000\n\
    \            arr3 .= push!(arr3, \"Twenty two\")\n        elseif i <= 10000000000000000000000000000\n\
    \            arr3 .= push!(arr3, \"Twenty three\")\n        elseif i <= 1000000000000000000000000000000\n\
    \            \nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf1zrjgwe.jl:1\nin expression starting at /tmp/tmpf1zrjgwe.jl:1\n"
  stdout: ''
  timestamp: 1659749551
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return [] \n    else \n        arr = sort(arr) \n        arr\
    \ = reverse(arr) \n        arr = map((x) -> \"One\" <= x && x <= \"Nine\" ? x\
    \ : \"\", arr) \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([])\n</cell>\n<code language=julia-1.5>\nby_length([1])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\n\nusing Test\n\n@testset begin\n\n\
    candidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjbf9cif2.jl:26\nin expression starting at\
    \ /tmp/tmpjbf9cif2.jl:26\n"
  stdout: ''
  timestamp: 1659749551
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if arr.length ==\
    \ 0\n        return Vector{String}()\n    \n    arr = arr |> sort() |> reverse()\n\
    \    \n    arr = arr |> map((x) -> \"One\" <= x && x <= \"Nine\" ? \"One\" : \n\
    \        \"Two\" <= x && x <= \"Nine\" ? \"Two\" : \n        \"Three\" <= x &&\
    \ x <= \"Nine\" ? \"Three\" : \n        \"Four\" <= x && x <= \"Nine\" ? \"Four\"\
    \ : \n        \"Five\" <= x && x <= \"Nine\" ? \"Five\" : \n        \"Six\" <=\
    \ x && x <= \"Nine\" ? \"Six\" : \n        \"Seven\" <= x && x <= \"Nine\" ? \"\
    Seven\" : \n        \"Eight\" <= x && x <= \"Nine\" ? \"Eight\" : \n        \"\
    Nine\" <= x && x <= \"Nine\" ? \"Nine\" : x)\n    \n    return arr\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpolyty1ej.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpolyty1ej.jl:1\n\
    in expression starting at /tmp/tmpolyty1ej.jl:1\n"
  stdout: ''
  timestamp: 1659749551
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    \n    if length(arr) == 0\n        return Vector{String}()\n    end\n   \
    \ \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" <= x && x <= \"Nine\"\
    \ ? x : \n        \"Two\" <= x && x <= \"Ten\" ? x :\n        \"Three\" <= x &&\
    \ x <= \"Eleven\" ? x :\n        \"Four\" <= x && x <= \"Twelve\" ? x :\n    \
    \    \"Five\" <= x && x <= \"Thirteen\" ? x :\n        \"Six\" <= x && x <= \"\
    Fourteen\" ? x :\n        \"Seven\" <= x && x <= \"Fifteen\" ? x :\n        \"\
    Eight\" <= x && x <= \"Sixteen\" ? x :\n        \"Nine\" <= x && x <= \"Nineteen\"\
    \ ? x :\n        x, arr)\n    \n    return arr\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpiqsxvcmq.jl:41

    '
  stdout: "test set: Error During Test at /tmp/tmpiqsxvcmq.jl:44\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching isless(::String, ::Int64)\n  Closest candidates are:\n    isless(::AbstractString,\
    \ !Matched::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:344\n\
    \    isless(!Matched::AbstractFloat, ::Real) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:186\n\
    \    isless(!Matched::Real, ::Real) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:430\n\
    \    ...\n  Stacktrace:\n    [1] <(x::String, y::Int64)\n      @ Base ./operators.jl:352\n\
    \    [2] <=(x::String, y::Int64)\n      @ Base ./operators.jl:401\n    [3] (::var\"\
    #1#2\")(x::Int64)\n      @ Main /tmp/tmpiqsxvcmq.jl:26\n    [4] iterate\n    \
    \  @ ./generator.jl:47 [inlined]\n    [5] _collect\n      @ ./array.jl:744 [inlined]\n\
    \    [6] collect_similar\n      @ ./array.jl:653 [inlined]\n    [7] map\n    \
    \  @ ./abstractarray.jl:2867 [inlined]\n    [8] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmpiqsxvcmq.jl:26\n    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpiqsxvcmq.jl:44 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpiqsxvcmq.jl:43\ntest set:\
    \ Error During Test at /tmp/tmpiqsxvcmq.jl:46\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: no method matching isless(::String,\
    \ ::Int64)\n  Closest candidates are:\n    isless(::AbstractString, !Matched::AbstractString)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:344\n    isless(!Matched::AbstractFloat,\
    \ ::Real) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:186\n \
    \   isless(!Matched::Real, ::Real) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:430\n\
    \    ...\n  Stacktrace:\n    [1] <(x::St"
  timestamp: 1659749554
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = map(x -> name(x), arr)\n    return arr\nend\n\
    </cell>\n<code language=julia-1.5>\nby_length([])\nby_length([1])\nby_length([2])\n\
    by_length([2, 1])\nby_length([2, 1, 1])\nby_length([2, 1, 2, 1])\nby_length([2,\
    \ 1, 2, 1, 1])\nby_length([2, 1, 2, 1, 1, 1])\nby_length([2, 1, 2, 1, 1, 2, 1])\n\
    by_length([2, 1, 2, 1, 1, 2, 1, 1])\nby_length([2, 1, 2, 1, 1, 2, 1, 2])\nby_length([2,\
    \ 1, 2, 1, 1, 2, 1, 2])\nby_length([2, 1, 2, 1, 1, 2, 1, 2])\nby_length([2, 1,\
    \ 2, 1, 1, 2, 1, 2])\nby_length([2, 1, 2, 1, 1, 2, 1, 2])\nby_length([2, 1, 2,\
    \ 1, 1, 2, 1, 2])\nby_length([2, 1, 2, 1, 1, 2, 1, 2])\nby_length([2, 1, 2, 1,\
    \ 1, 2, 1, 2])\nby_length([2, 1, 2, 1, 1, 2, 1, 2])\nby_length([2, 1, 2, 1, 1,\
    \ 2, 1, 2])\nby_length([2, 1, 2, 1, 1, 2, 1, 2])\nby_length([2, 1, 2, 1, 1, 2,\
    \ 1, 2])\nby_length([2, 1, 2, 1, 1, 2, 1, 2])\nby_length([2, 1, 2, 1, 1, 2, 1,\
    \ 2])\nby_length([2, 1, 2, 1, 1, 2, 1, 2])\nby_length([2, 1, 2, 1, 1, 2, 1, 2])\n\
    by_length([2, 1, 2, 1, 1, 2, 1, 2])\nby_length([2, 1, 2, 1, 1, 2, 1, 2])\nby_length([2,\
    \ 1, 2, 1, 1, 2, 1, 2])\nby_length([2, 1, 2, 1, 1, 2, 1, 2])\nby_length([2, 1,\
    \ 2, 1, 1, 2, 1, 2])\nby_length([2, 1, 2, 1, 1, 2, 1, 2])\nby_length([2, 1, 2,\
    \ 1, 1, 2, 1, 2])\nby_length([2, 1, 2, 1, 1, 2, 1, 2])\nby_length([2, 1, 2, 1,\
    \ 1, 2, 1, 2])\nby_length([2, 1, 2, 1, 1, 2, 1, 2])\nby_length([2, 1, 2, 1, 1,\
    \ 2, 1, 2])\nby_length([2, 1, 2, 1, 1, 2, 1, 2])\nby_length([2, 1, 2, 1, 1, 2,\
    \ 1, 2])\nby_length([2, 1, 2, 1, 1, 2, 1, 2])\nby_length([2, 1, 2, 1, 1, 2, 1,\
    \ 2])\nby_length([2, 1, 2, 1, 1, 2, 1, 2])\nby_length([2, 1, 2, 1, 1, 2, 1, 2])\n\
    by_length([2, 1, 2, 1, 1, 2, 1, 2])\nby_length([2, 1, 2, 1, 1, 2, 1, 2])\nby_length([2,\
    \ 1, 2, 1, 1, 2, 1, 2])\nby_length([2, 1, 2, 1, 1, 2, 1, 2])\nby_length([2, 1,\
    \ 2, 1, 1, 2, 1, 2])\nby_length([2, 1, 2, 1, 1, 2, 1, 2])\nby_length([2, 1, 2,\
    \ 1, 1, 2, 1, 2])\nby_length([2, 1, 2, 1, 1, 2, 1, 2])\nby_length([2, 1, 2, 1,\
    \ 1, 2, 1, 2])\nby_length([2, 1, 2, 1, 1, 2, 1, 2])\nby_length([2, 1, 2, 1, 1,\
    \ 2, 1, 2])\nby_length([2, 1, 2, 1, 1, 2, 1, 2])\nby_length([2, 1, 2, 1, 1, 2,\
    \ 1, \nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp63m37c3g.jl:22\nin expression starting at\
    \ /tmp/tmp63m37c3g.jl:22\n"
  stdout: ''
  timestamp: 1659749551
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    if length(arr)\
    \ == 0 \n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n\
    \    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\"..\"Nine\"[x],\
    \ arr)\n    \n    return arr\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns the sum of the integers in the vector.\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpto1f523a.jl:30\nin expression starting at\
    \ /tmp/tmpto1f523a.jl:30\n"
  stdout: ''
  timestamp: 1659749551
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return Vector{String}() \n    else \n        arr = sort(arr)\
    \ \n        arr = reverse(arr) \n        arr = map(x -> \"One\"..\"Nine\"[x],\
    \ arr) \n        arr \n    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ an array of integers and returns the array in reverse sorted order.\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpajtvt7pw.jl:26\nin expression starting at\
    \ /tmp/tmpajtvt7pw.jl:26\n"
  stdout: ''
  timestamp: 1659749551
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if arr.length ==\
    \ 0 \n        return Vector{String}() \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = replace(arr, arr |> collect{|x| x+1},\
    \ [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"]) \n        arr \n    end\nend\n</code>\n<|/ a tags=julia |>\n<| a\
    \ tags=julia |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph7sr5pul.jl:22\nin expression starting at\
    \ /tmp/tmph7sr5pul.jl:22\n"
  stdout: ''
  timestamp: 1659749553
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    \n    arr = reverse(arr)\n    \n    arr = replace(arr, 1, \"One\")\n    \n\
    \    arr = replace(arr, 2, \"Two\")\n    \n    arr = replace(arr, 3, \"Three\"\
    )\n    \n    arr = replace(arr, 4, \"Four\")\n    \n    arr = replace(arr, 5,\
    \ \"Five\")\n    \n    arr = replace(arr, 6, \"Six\")\n    \n    arr = replace(arr,\
    \ 7, \"Seven\")\n    \n    arr = replace(arr, 8, \"Eight\")\n    \n    arr = replace(arr,\
    \ 9, \"Nine\")\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns the sum of the integers squared.\
    \ \nFor example, \n    square_sum([1, 2, 3]) = 1 + 4 + 9 + 16 + 25 = 25\n    square_sum([4,\
    \ 9, 16]) = 1 + 4 + 9 + 16 + 25 = 25\n    square_sum([5, 6, 7]) = 1 + 5 + 6 +\
    \ 7 + 25 = 50\n    square_sum([9, 10, 11, 12]) = 1 + 9 + 10 + 11 + 12 + 25 = 125\n\
    \    square_sum([]) = 0\n    square_sum([-1]) = 0\n    square_sum([0, 1]) = 0\n\
    \    square_sum([0, -1]) = 0\n    square_sum([0, 0]) = 0\n    square_sum([0, 0])\
    \ = 0\n    square_sum([0, 0]) = 0\n    square_sum([0, 0]) = 0\n    square_sum([0,\
    \ 0]) = 0\n    square_sum([0, 0]) = 0\n    square_sum([0, 0]) = 0\n    square_sum([0,\
    \ 0]) = 0\n    square_sum([0, 0]) = 0\n    square_sum([0, 0]) = 0\n    square_sum([0,\
    \ 0]) = 0\n    square_sum([0, 0]) = 0\n    square_sum([0, 0]) = 0\n    square_sum([0,\
    \ 0]) = 0\n    square_sum([0, 0]) = 0\n    square_sum([0, 0]) = 0\n    square_sum([0,\
    \ 0]) = 0\n    square_sum([0, 0]) = 0\n    square_sum([0, 0]) = 0\n    square_sum([0,\
    \ 0]) = 0\n    square_sum([0, 0]) = 0\n    square_sum([0, 0]) = 0\n    square_sum([0,\
    \ 0]) = 0\n    square_sum([0, 0]) = 0\n    square_sum([0, 0]) = 0\n    square_sum([0,\
    \ 0]) = 0\n    square_sum([0, 0]) = 0\n    square_sum([0, 0]) = 0\n    square_sum([0,\
    \ 0]) = 0\n    \nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv9ecz75r.jl:42\nin expression starting at\
    \ /tmp/tmpv9ecz75r.jl:42\n"
  stdout: ''
  timestamp: 1659749553
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = arr\
    \ |> sort() |> reverse() |> map(x->\"One\"..\"Nine\"[x]) |> Vector{String}\n \
    \   \n    if length(arr) == 0\n        return Vector{String}()\n    end\n    \n\
    \    return arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ vector of integers and returns a vector of strings that represent each of the\
    \ numbers in the vector in descending order.\nusing Test\n\n@testset begin\n\n\
    candidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf0d0affw.jl:26\nin expression starting at\
    \ /tmp/tmpf0d0affw.jl:26\n"
  stdout: ''
  timestamp: 1659749553
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0\n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n\
    \    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\"[x], arr)\n   \
    \ \n    arr = map(x -> \"Two\"[x], arr)\n    \n    arr = map(x -> \"Three\"[x],\
    \ arr)\n    \n    arr = map(x -> \"Four\"[x], arr)\n    \n    arr = map(x -> \"\
    Five\"[x], arr)\n    \n    arr = map(x -> \"Six\"[x], arr)\n    \n    arr = map(x\
    \ -> \"Seven\"[x], arr)\n    \n    arr = map(x -> \"Eight\"[x], arr)\n    \n \
    \   arr = map(x -> \"Nine\"[x], arr)\n    \n    return arr\nend\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns the sum\
    \ of the integers that are between 1 and 9 inclusive.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4cbn84om.jl:45\nin expression starting at\
    \ /tmp/tmp4cbn84om.jl:45\n"
  stdout: ''
  timestamp: 1659749553
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    if length(arr)\
    \ == 0 \n        return Vector{String}() \n    else \n        \n        arr =\
    \ sort(arr) \n        \n        arr = reverse(arr) \n        \n        arr = map(x\
    \ -> \"One\" <= x && x <= \"Nine\" ? x : \"\", arr) \n        \n        return\
    \ arr \n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ an array of integers and returns the sum of the integers squared. For example:\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2dijorqt.jl:31\nin expression starting at\
    \ /tmp/tmp2dijorqt.jl:31\n"
  stdout: ''
  timestamp: 1659749553
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    if length(arr)\
    \ == 0 \n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n\
    \    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\"[x], arr)\n   \
    \ \n    arr = map(x -> \"Two\"[x], arr)\n    \n    arr = map(x -> \"Three\"[x],\
    \ arr)\n    \n    arr = map(x -> \"Four\"[x], arr)\n    \n    arr = map(x -> \"\
    Five\"[x], arr)\n    \n    arr = map(x -> \"Six\"[x], arr)\n    \n    arr = map(x\
    \ -> \"Seven\"[x], arr)\n    \n    arr = map(x -> \"Eight\"[x], arr)\n    \n \
    \   arr = map(x -> \"Nine\"[x], arr)\n    \n    return arr\nend\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns the sum\
    \ of the integers in the vector. \nFor example, \n    by_sum([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\nshould return \n    10\nThe function should ignore any strange numbers\
    \ in the vector. \nFor example, \n    by_sum([1, -1, 55])\nshould return \n  \
    \  55\nIf the vector is empty, return 0.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpass_9x3d.jl:46\nin expression starting at\
    \ /tmp/tmpass_9x3d.jl:46\n"
  stdout: ''
  timestamp: 1659749553
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return Vector{String}() \n    else \n        arr = sort(arr)\
    \ \n        arr = reverse(arr) \n        arr = map(x -> \"One\"[x], arr) \n  \
    \      arr = map(x -> \"Two\"[x], arr) \n        arr = map(x -> \"Three\"[x],\
    \ arr) \n        arr = map(x -> \"Four\"[x], arr) \n        arr = map(x -> \"\
    Five\"[x], arr) \n        arr = map(x -> \"Six\"[x], arr) \n        arr = map(x\
    \ -> \"Seven\"[x], arr) \n        arr = map(x -> \"Eight\"[x], arr) \n       \
    \ arr = map(x -> \"Nine\"[x], arr) \n        return arr\nend\n</code>\n<|/ a tags=julia\
    \ |>\n<| c |>\nThis doesn't work if the array is empty. `by_length([-1, 55])`\
    \ returns `[\"One\"]`.\n<|/ c |>\n<| c |>\nI fixed the bug, thanks for pointing\
    \ it out. Now it works as expected.\n<|/ c |>\n<| a dscore=2 |>\nI came up with\
    \ a solution using Julia's built-in function sort!:\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr9u1mvm0.jl:33\nin expression starting at\
    \ /tmp/tmpr9u1mvm0.jl:33\n"
  stdout: ''
  timestamp: 1659749553
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if arr.length ==\
    \ 0\n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n   \
    \ \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" <= x && x <= \"Nine\"\
    \ ? x : error(\"Invalid input\"), arr)\n    \n    return arr\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns the sum\
    \ of the integers in the vector.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjplnbbny.jl:29\nin expression starting at\
    \ /tmp/tmpjplnbbny.jl:29\n"
  stdout: ''
  timestamp: 1659749553
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return [] \n    else \n        arr = sort(arr) \n        arr\
    \ = reverse(arr) \n        arr = map(x -> \"One\"[x], arr) \n        arr = map(x\
    \ -> \"Two\"[x], arr) \n        arr = map(x -> \"Three\"[x], arr) \n        arr\
    \ = map(x -> \"Four\"[x], arr) \n        arr = map(x -> \"Five\"[x], arr) \n \
    \       arr = map(x -> \"Six\"[x], arr) \n        arr = map(x -> \"Seven\"[x],\
    \ arr) \n        arr = map(x -> \"Eight\"[x], arr) \n        arr = map(x -> \"\
    Nine\"[x], arr) \n        arr \n    end\nend\n</code>\n<|/ a tags=julia |>\n<|\
    \ a dscore=2 |>\nI wanted to add my two cents here as I wanted to solve this problem\
    \ in Julia without using any packages. \n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_06ww9t6.jl:34\nin expression starting at\
    \ /tmp/tmp_06ww9t6.jl:34\n"
  stdout: ''
  timestamp: 1659749553
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if arr.length ==\
    \ 0 \n        return Vector{String}() \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = replace(arr) \n        return arr\
    \ \n    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of strings and returns a vector of strings where each string in the original\
    \ vector is replaced by the first string in the original vector followed by the\
    \ second string in the original vector, etc. For example, if the original vector\
    \ is [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"\
    Eight\", \"Nine\"], then your function should return a vector that looks like\
    \ [\"OneTwo\", \"ThreeFour\", \"FiveSixSevenEightNine\"]\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm9j4202n.jl:26\nin expression starting at\
    \ /tmp/tmpm9j4202n.jl:26\n"
  stdout: ''
  timestamp: 1659749553
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return [] \n    else \n        arr = sort(arr) \n        arr\
    \ = reverse(arr) \n        arr = replace(arr, 1, \"One\") \n        arr = replace(arr,\
    \ 2, \"Two\") \n        arr = replace(arr, 3, \"Three\") \n        arr = replace(arr,\
    \ 4, \"Four\") \n        arr = replace(arr, 5, \"Five\") \n        arr = replace(arr,\
    \ 6, \"Six\") \n        arr = replace(arr, 7, \"Seven\") \n        arr = replace(arr,\
    \ 8, \"Eight\") \n        arr = replace(arr, 9, \"Nine\") \n        return arr\
    \ \n    end\nend\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns the sum of the integers squared. \nFor example, \n>>>\
    \ by_sum(Vector{Int64}([1,2,3]))\n[4, 9, 16]\nusing Test\n\n@testset begin\n\n\
    candidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg8sdt_pj.jl:34\nin expression starting at\
    \ /tmp/tmpg8sdt_pj.jl:34\n"
  stdout: ''
  timestamp: 1659749553
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if arr.length ==\
    \ 0 \n        return Vector{String}() \n    else \n        arr = arr |> sort()\
    \ \n        arr = reverse(arr) \n        arr = arr |> map(x->\"One\"..\"Nine\"\
    [x-1]) \n        return arr \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes an array of integers and returns the number of integers\
    \ that are between 1 and 9 inclusive.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmvrc7_nx.jl:26\nin expression starting at\
    \ /tmp/tmpmvrc7_nx.jl:26\n"
  stdout: ''
  timestamp: 1659749553
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return [] \n    else \n        arr = sort(arr) \n        arr\
    \ = reverse(arr) \n        arr = map(x -> \"One\" if x == 1 \n            else\
    \ if x == 2 \n                \"Two\" \n            else if x == 3 \n        \
    \        \"Three\" \n            else if x == 4 \n                \"Four\" \n\
    \            else if x == 5 \n                \"Five\" \n            else if x\
    \ == 6 \n                \"Six\" \n            else if x == 7 \n             \
    \   \"Seven\" \n            else if x == 8 \n                \"Eight\" \n    \
    \        else if x == 9 \n                \"Nine\" \n            else \n     \
    \           \"\" \n            , arr) \n        return arr \n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of integers and returns\
    \ a vector of strings that represent each of the numbers from 1 to 9 inclusive.\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp__x7hgkz.jl:22\nin expression starting at\
    \ /tmp/tmp__x7hgkz.jl:22\n"
  stdout: ''
  timestamp: 1659749553
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    if length(arr)\
    \ == 0 \n        return Vector{String}() \n    else \n        \n        arr =\
    \ sort(arr)\n        \n        arr = reverse(arr)\n        \n        arr = map(x\
    \ -> \"One\" if x == 1 \n                else \"Two\" if x == 2 \n           \
    \     else \"Three\" if x == 3 \n                else \"Four\" if x == 4 \n  \
    \              else \"Five\" if x == 5 \n                else \"Six\" if x ==\
    \ 6 \n                else \"Seven\" if x == 7 \n                else \"Eight\"\
    \ if x == 8 \n                else \"Nine\", arr)\n        \n        return arr\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of\
    \ integers and returns the sum of the integers squared. \nFor example, \n    by_length(Vector{Int64}([4,\
    \ 9, 16, 25])) should return 42.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp38ttiemd.jl:26\nin expression starting at\
    \ /tmp/tmp38ttiemd.jl:26\n"
  stdout: ''
  timestamp: 1659749553
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    if length(arr)\
    \ == 0 \n        return Vector{String}() \n    \n    arr = sort(arr)\n    \n \
    \   arr = reverse(arr)\n    \n    arr = map(x -> \"One\" <= x && x <= \"Nine\"\
    \ ? x : \"\", arr)\n    \n    return arr\nend\nusing Test\n\n@testset begin\n\n\
    candidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpermdqbw1.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpermdqbw1.jl:1\n\
    in expression starting at /tmp/tmpermdqbw1.jl:1\n"
  stdout: ''
  timestamp: 1659749553
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return Vector{String}() \n    else \n        arr = sort(arr)\
    \ \n        arr = reverse(arr) \n        arr = map(x -> \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", x)\n        return\
    \ arr\n    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes an array\
    \ of integers and returns the array in reverse order. \nFor example, \n>>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpasjmlupt.jl:26\nin expression starting at\
    \ /tmp/tmpasjmlupt.jl:26\n"
  stdout: ''
  timestamp: 1659749553
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return [] \n    else \n        arr = sort(arr) \n        arr\
    \ = reverse(arr) \n        arr = map(x -> name(x), arr) \n        return arr \n\
    \    end\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,sorting,arrays |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpak6a4br_.jl:26\nin expression starting at\
    \ /tmp/tmpak6a4br_.jl:26\n"
  stdout: ''
  timestamp: 1659749553
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if arr.length ==\
    \ 0\n        return Vector{String}()\n    \n    arr = sort(arr)\n    \n    arr\
    \ = reverse(arr)\n    \n    arr = map(x -> \"One\" <= x && x <= \"Nine\" ? x :\
    \ \"\", arr)\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings that represent\
    \ each of the numbers in the vector in descending order.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpge5zyis9.jl:28\nin expression starting at\
    \ /tmp/tmpge5zyis9.jl:28\n"
  stdout: ''
  timestamp: 1659749553
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" if x == 1 \n       \
    \ else \"Two\" if x == 2\n        else \"Three\" if x == 3\n        else \"Four\"\
    \ if x == 4\n        else \"Five\" if x == 5\n        else \"Six\" if x == 6\n\
    \        else \"Seven\" if x == 7\n        else \"Eight\" if x == 8\n        else\
    \ \"Nine\", arr)\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of integers that are less than or equal to 100. \nFor\
    \ example, if the input is [100, 99, 98, 97, 95, 94, 93, 92, 91, 90, 89, 88, 87,\
    \ 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68,\
    \ 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49,\
    \ 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30,\
    \ 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11,\
    \ 10, 9, 8, 7, 6, 5, 4, 3, 2, 1], the output should be [4, 3, 1]. \nThe function\
    \ should return an empty array if the input array is empty.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8bvnj9uh.jl:21\nin expression starting at\
    \ /tmp/tmp8bvnj9uh.jl:21\n"
  stdout: ''
  timestamp: 1659749553
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0\n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n\
    \    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" <= x && x <= \"\
    Nine\" ? x : error(\"Invalid number\"), arr)\n    \n    return arr\nend\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\n\
    Exercise\nWrite a function that takes a vector of integers and returns a vector\
    \ of strings that represent each of the numbers between 1 and 9 inclusive in descending\
    \ order.\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaeeo3gy8.jl:29\nin expression starting at\
    \ /tmp/tmpaeeo3gy8.jl:29\n"
  stdout: ''
  timestamp: 1659749553
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = arr\
    \ .+ 1\n    arr = arr .- 9\n    arr = arr .+ 9\n    arr = arr .- 9\n    arr =\
    \ arr .+ 9\n    arr = arr .- 9\n    arr = arr .+ 9\n    arr = arr .- 9\n    arr\
    \ = arr .+ 9\n    arr = arr .- 9\n    arr = arr .+ 9\n    arr = arr .- 9\n   \
    \ arr = arr .+ 9\n    arr = arr .- 9\n    arr = arr .+ 9\n    arr = arr .- 9\n\
    \    arr = arr .+ 9\n    arr = arr .- 9\n    arr = arr .+ 9\n    arr = arr .-\
    \ 9\n    arr = arr .+ 9\n    arr = arr .- 9\n    arr = arr .+ 9\n    arr = arr\
    \ .- 9\n    arr = arr .+ 9\n    arr = arr .- 9\n    arr = arr .+ 9\n    arr =\
    \ arr .- 9\n    arr = arr .+ 9\n    arr = arr .- 9\n    arr = arr .+ 9\n    arr\
    \ = arr .- 9\n    arr = arr .+ 9\n    arr = arr .- 9\n    arr = arr .+ 9\n   \
    \ arr = arr .- 9\n    arr = arr .+ 9\n    arr = arr .- 9\n    arr = arr .+ 9\n\
    \    arr = arr .- 9\n    arr = arr .+ 9\n    arr = arr .- 9\n    arr = arr .+\
    \ 9\n    arr = arr .- 9\n    arr = arr .+ 9\n    arr = arr .- 9\n    arr = arr\
    \ .+ 9\n    arr = arr .- 9\n    arr = arr .+ 9\n    arr = arr .- 9\n    arr =\
    \ arr .+ 9\n    arr = arr .- 9\n    arr = arr .+ 9\n    arr = arr .- 9\n    arr\
    \ = arr .+ 9\n    arr = arr .- 9\n    arr = arr .+ 9\n    arr = arr .- 9\n   \
    \ arr = arr .+ 9\n    arr = arr .- 9\n    arr = arr .+ 9\n    arr = arr .- 9\n\
    \    arr = arr .+ 9\n    arr = arr .- 9\n    arr = arr .+ 9\n    arr = arr .-\
    \ 9\n    arr = arr .+ 9\n    arr = arr .- 9\n    arr = arr .+ 9\n    arr = arr\
    \ .- 9\n    arr = arr .+ 9\n    arr = arr .- 9\n    arr = arr .+ 9\n\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq2hscbn1.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq2hscbn1.jl:1\n\
    in expression starting at /tmp/tmpq2hscbn1.jl:1\n"
  stdout: ''
  timestamp: 1659749553
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if arr.length ==\
    \ 0 \n        return Vector{String}() \n    else \n        arr = arr |> sort()\
    \ \n        arr = reverse(arr) \n        arr = arr |> map(x->\"One\"..\"Nine\"\
    [x-1]) \n        return arr \n    end\nend\n</code>\n<|/ a tags=julia,arrays |>\n\
    <| a dscore=2 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyc3ev_w9.jl:26\nin expression starting at\
    \ /tmp/tmpyc3ev_w9.jl:26\n"
  stdout: ''
  timestamp: 1659749553
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    if arr.length\
    \ == 0\n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n\
    \    \n    arr = reverse(arr)\n    \n    arr = replace(arr, 1, \"One\")\n    arr\
    \ = replace(arr, 2, \"Two\")\n    arr = replace(arr, 3, \"Three\")\n    arr =\
    \ replace(arr, 4, \"Four\")\n    arr = replace(arr, 5, \"Five\")\n    arr = replace(arr,\
    \ 6, \"Six\")\n    arr = replace(arr, 7, \"Seven\")\n    arr = replace(arr, 8,\
    \ \"Eight\")\n    arr = replace(arr, 9, \"Nine\")\n    \n    return arr\nend\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ the sum of the integers squared. \nFor example, \n    by_sum(Vector{Int64}([2,\
    \ 1, 1, 4, 5, 8, 2, 3]))\nshould return \n    Vector{Int64}([4, 16, 36, 64, 100])\n\
    Hint: use map! and sum!\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdmwxuk8y.jl:38\nin expression starting at\
    \ /tmp/tmpdmwxuk8y.jl:38\n"
  stdout: ''
  timestamp: 1659749554
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    if length(arr)\
    \ == 0\n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n\
    \    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\"[x], arr)\n   \
    \ \n    arr = map(x -> \"Two\"[x], arr)\n    \n    arr = map(x -> \"Three\"[x],\
    \ arr)\n    \n    arr = map(x -> \"Four\"[x], arr)\n    \n    arr = map(x -> \"\
    Five\"[x], arr)\n    \n    arr = map(x -> \"Six\"[x], arr)\n    \n    arr = map(x\
    \ -> \"Seven\"[x], arr)\n    \n    arr = map(x -> \"Eight\"[x], arr)\n    \n \
    \   arr = map(x -> \"Nine\"[x], arr)\n    \n    return arr\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes an array of integers and returns the array\
    \ in reverse order but with each number replaced by the corresponding name from\
    \ \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\".\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxru_0gox.jl:46\nin expression starting at\
    \ /tmp/tmpxru_0gox.jl:46\n"
  stdout: ''
  timestamp: 1659749555
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if arr.length ==\
    \ 0\n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n   \
    \ arr = reverse(arr)\n    \n    arr = map(x -> \"One\"..\"Nine\"[x], arr)\n  \
    \  \n    return arr\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of integers and returns the sum of the integers. If the vector is empty,\
    \ return 0.\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk7fjuc4m.jl:28\nin expression starting at\
    \ /tmp/tmpk7fjuc4m.jl:28\n"
  stdout: ''
  timestamp: 1659749554
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    if arr.length\
    \ == 0\n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n\
    \    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" <= x && x <= \"\
    Nine\" ? x : \"\", arr)\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings that represent\
    \ each of the numbers in the vector in descending order.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi7nh1hys.jl:30\nin expression starting at\
    \ /tmp/tmpi7nh1hys.jl:30\n"
  stdout: ''
  timestamp: 1659749555
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr2 = arr\n\
    \    \n    if arr2 == []\n        return arr2\n    end\n    \n    arr3 = arr2\n\
    \    \n    if arr3 == []\n        return arr3\n    end\n    \n    arr4 = arr3\n\
    \    \n    if arr4 == []\n        return arr4\n    end\n    \n    arr5 = arr4\n\
    \    \n    if arr5 == []\n        return arr5\n    end\n    \n    arr6 = arr5\n\
    \    \n    if arr6 == []\n        return arr6\n    end\n    \n    arr7 = arr6\n\
    \    \n    if arr7 == []\n        return arr7\n    end\n    \n    arr8 = arr7\n\
    \    \n    if arr8 == []\n        return arr8\n    end\n    \n    arr9 = arr8\n\
    \    \n    if arr9 == []\n        return arr9\n    end\n    \n    arr10 = arr9\n\
    \    \n    if arr10 == []\n        return arr10\n    end\n    \n    arr11 = arr10\n\
    \    \n    if arr11 == []\n        return arr11\n    end\n    \n    arr12 = arr11\n\
    \    \n    if arr12 == []\n        return arr12\n    end\n    \n    arr13 = arr12\n\
    \    \n    if arr13 == []\n        return arr13\n    end\n    \n    arr14 = arr13\n\
    \    \n    if arr14 == []\n        return arr14\n    end\n    \n    arr15 = arr14\n\
    \    \n    if arr15 == []\n        return arr15\n    end\n    \n    arr16 = arr15\n\
    \    \n    if arr16 == []\n        return arr16\n    end\n    \n    arr17 = arr16\n\
    \    \n    if arr17 == []\n        return arr17\n    end\n    \n    arr18 = arr17\n\
    \    \n    if arr18 == []\n        return arr18\n    end\n    \n    arr19 = arr18\n\
    \    \n    if arr19 == []\n        return arr19\n    end\n    \n    arr20 = arr19\n\
    \    \n    if arr20 == []\n        return arr20\n    end\n    \n    arr21 = arr20\n\
    \    \n    if arr21 == []\n        return arr21\n    end\n    \n    arr22 = arr21\n\
    \    \n    if arr22 == []\n        return arr22\n    end\n    \n    arr23 = arr22\n\
    \    \n    if arr23 == []\n        return arr23\n    end\n    \n    arr24 = arr23\n\
    \    \n    if arr24 == []\n        return arr24\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm03e44c8.jl:1\nin expression starting at /tmp/tmpm03e44c8.jl:1\n"
  stdout: ''
  timestamp: 1659749554
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return [] \n    \n    arr = sort(arr) \n    \n    arr = reverse(arr)\
    \ \n    \n    arr = map(x -> \"One\"..\"Nine\"[x], arr) \n    \n    return arr\
    \ \nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkk60123s.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkk60123s.jl:1\n\
    in expression starting at /tmp/tmpkk60123s.jl:1\n"
  stdout: ''
  timestamp: 1659749555
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return Vector{String}() \n    else \n        arr = sort(arr)\
    \ \n        arr = reverse(arr) \n        arr = map(x -> \"One\" if x == 1 \n \
    \               else if x == 2 \n                    then \"Two\" \n         \
    \           else if x == 3 \n                        then \"Three\" \n       \
    \                 else if x == 4 \n                            then \"Four\" \n\
    \                            else if x == 5 \n                               \
    \ then \"Five\" \n                                else if x == 6 \n          \
    \                          then \"Six\" \n                                   \
    \ else if x == 7 \n                                        then \"Seven\" \n \
    \                                       else if x == 8 \n                    \
    \                        then \"Eight\" \n                                   \
    \         else \"Nine\" \n                        end,arr) \n        return arr\
    \ \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns a vector of strings that represent the numbers in reverse\
    \ order. For example, if the input vector is [4, 2, 5, 1, 3, 7], the output vector\
    \ should be [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\", \"Nine\"\
    ]. Make sure to handle empty vectors and vectors with strange numbers (like \"\
    One\").\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiz9h32cs.jl:22\nin expression starting at\
    \ /tmp/tmpiz9h32cs.jl:22\n"
  stdout: ''
  timestamp: 1659749555
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    \n    if length(arr) == 0\n        return Vector{String}()\n    end\n   \
    \ \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" <= x && x <= \"Nine\"\
    \ ? x : error(\"Invalid number\"), arr)\n    \n    return arr\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an array of integers and returns\
    \ the array sorted in descending order by the absolute value of the integers.\
    \ For example:\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2cb2sc1s.jl:30\nin expression starting at\
    \ /tmp/tmp2cb2sc1s.jl:30\n"
  stdout: ''
  timestamp: 1659749555
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    if length(arr)\
    \ == 0\n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n\
    \    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" <= x && x <= \"\
    Nine\" ? x : \"\", arr)\n    \n    return arr\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers and returns the sum of the\
    \ integers in the vector.\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoenak1cp.jl:30\nin expression starting at\
    \ /tmp/tmpoenak1cp.jl:30\n"
  stdout: ''
  timestamp: 1659749555
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return [] \n    else \n        arr = sort(arr) \n        arr\
    \ = reverse(arr) \n        arr = map(x -> \"One\" <= x && x <= \"Nine\" ? x :\
    \ \"\", arr) \n        arr \n    end\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an array of integers and returns the number of integers\
    \ that are between 1 and 9 inclusive.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjhxb21rp.jl:26\nin expression starting at\
    \ /tmp/tmpjhxb21rp.jl:26\n"
  stdout: ''
  timestamp: 1659749555
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if arr.length ==\
    \ 0\n        return Vector{String}()\n    \n    arr = arr |> sort() |> reverse()\
    \ |> map(x->\"One\"..\"Nine\"[x]) |> Vector{String}\n    \n    return arr\nend\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpix8hec0u.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpix8hec0u.jl:1\n\
    in expression starting at /tmp/tmpix8hec0u.jl:1\n"
  stdout: ''
  timestamp: 1659749555
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return Vector{String}() \n    else \n        arr = sort(arr)\
    \ \n        arr = reverse(arr) \n        arr = map(x -> \"One\" if x == 1 \n \
    \           else if x == 2 \n                \"Two\" \n            else if x ==\
    \ 3 \n                \"Three\" \n            else if x == 4 \n              \
    \  \"Four\" \n            else if x == 5 \n                \"Five\" \n       \
    \     else if x == 6 \n                \"Six\" \n            else if x == 7 \n\
    \                \"Seven\" \n            else if x == 8 \n                \"Eight\"\
    \ \n            else if x == 9 \n                \"Nine\" \n            else \n\
    \                \"\" \n            , arr) \n        return arr \n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ the number of integers that are between 1 and 9 inclusive.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyst_05r9.jl:22\nin expression starting at\
    \ /tmp/tmpyst_05r9.jl:22\n"
  stdout: ''
  timestamp: 1659749555
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    \n    if length(arr) == 0\n        return Vector{String}()\n    end\n   \
    \ \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" <= x && x <= \"Nine\"\
    \ ? x : error(\"Invalid input\"), arr)\n    \n    return arr\nend\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns the same\
    \ vector but with the integers reversed.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsb4mzwrw.jl:30\nin expression starting at\
    \ /tmp/tmpsb4mzwrw.jl:30\n"
  stdout: ''
  timestamp: 1659749555
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if arr.length ==\
    \ 0 \n        return [] \n    else \n        arr = sort(arr) \n        arr = reverse(arr)\
    \ \n        arr = replace(arr, arr .== 1, One) \n        arr = replace(arr, arr\
    \ .== 2, Two) \n        arr = replace(arr, arr .== 3, Three) \n        arr = replace(arr,\
    \ arr .== 4, Four) \n        arr = replace(arr, arr .== 5, Five) \n        arr\
    \ = replace(arr, arr .== 6, Six) \n        arr = replace(arr, arr .== 7, Seven)\
    \ \n        arr = replace(arr, arr .== 8, Eight) \n        arr = replace(arr,\
    \ arr .== 9, Nine) \n        return arr \n    end\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a string and returns the number of words in the\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7oswbt56.jl:34\nin expression starting at\
    \ /tmp/tmp7oswbt56.jl:34\n"
  stdout: ''
  timestamp: 1659749555
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    if length(arr)\
    \ == 0\n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n\
    \    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" <= x && x <= \"\
    Nine\" ? x : \"\", arr)\n    \n    return arr\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers and returns a vector of\
    \ strings that represent each of the numbers between 1 and 9 inclusive.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6_e544ga.jl:30\nin expression starting at\
    \ /tmp/tmp6_e544ga.jl:30\n"
  stdout: ''
  timestamp: 1659749555
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    if arr.length\
    \ == 0\n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n\
    \    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\"[x], arr)\n   \
    \ \n    arr = map(x -> \"Two\"[x], arr)\n    \n    arr = map(x -> \"Three\"[x],\
    \ arr)\n    \n    arr = map(x -> \"Four\"[x], arr)\n    \n    arr = map(x -> \"\
    Five\"[x], arr)\n    \n    arr = map(x -> \"Six\"[x], arr)\n    \n    arr = map(x\
    \ -> \"Seven\"[x], arr)\n    \n    arr = map(x -> \"Eight\"[x], arr)\n    \n \
    \   arr = map(x -> \"Nine\"[x], arr)\n    \n    return arr\nend\n</cell>\n<code\
    \ language=julia-1.4>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns the number\
    \ of integers that are less than or equal to each of the integers in the vector.\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz0rowa28.jl:46\nin expression starting at\
    \ /tmp/tmpz0rowa28.jl:46\n"
  stdout: ''
  timestamp: 1659749555
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return [] \n    else \n        arr = sort(arr) \n        arr\
    \ = reverse(arr) \n        arr = map(x -> \"One\"[x], arr) \n        return arr\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns the sum of the integers in the vector.\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptwd6pzhk.jl:26\nin expression starting at\
    \ /tmp/tmptwd6pzhk.jl:26\n"
  stdout: ''
  timestamp: 1659749555
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return [] \n    else \n        arr = sort(arr) \n        arr\
    \ = reverse(arr) \n        arr = map(x -> \"One\"..\"Nine\"[x], arr) \n      \
    \  return arr \n    end\nend\n</code>\n<|/ a tags=julia,arrays |>\n<| a dscore=2\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe2ljpkee.jl:26\nin expression starting at\
    \ /tmp/tmpe2ljpkee.jl:26\n"
  stdout: ''
  timestamp: 1659749555
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    \n    if arr.length == 0\n        return Vector{String}()\n    end\n    \n\
    \    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" <= x && x <= \"Nine\"\
    \ ? x : \"\", arr)\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([])\n</cell>\n<code language=julia-1.5>\nby_length([1])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz7ugp13_.jl:30\nin expression starting at\
    \ /tmp/tmpz7ugp13_.jl:30\n"
  stdout: ''
  timestamp: 1659749555
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if arr.length ==\
    \ 0 \n        return [] \n    else \n        arr = sort(arr) \n        arr = reverse(arr)\
    \ \n        arr = map(x -> \"One\" <= x && x <= \"Nine\" ? x : \"\", arr) \n \
    \       return arr \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings that represent\
    \ each of the numbers in the vector in descending order.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk4znavqi.jl:26\nin expression starting at\
    \ /tmp/tmpk4znavqi.jl:26\n"
  stdout: ''
  timestamp: 1659749555
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return [] \n    else \n        arr = sort(arr) \n        arr\
    \ = reverse(arr) \n        arr = replace(arr, 1, \"One\") \n        arr = replace(arr,\
    \ 2, \"Two\") \n        arr = replace(arr, 3, \"Three\") \n        arr = replace(arr,\
    \ 4, \"Four\") \n        arr = replace(arr, 5, \"Five\") \n        arr = replace(arr,\
    \ 6, \"Six\") \n        arr = replace(arr, 7, \"Seven\") \n        arr = replace(arr,\
    \ 8, \"Eight\") \n        arr = replace(arr, 9, \"Nine\") \n        return arr\
    \ \n    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns the sum of the squares of the integers. For example:\n\
    >>> square_sum([4, 9, 16, 25])\n[25, 49, 64, 81]\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5bas0mqc.jl:34\nin expression starting at\
    \ /tmp/tmp5bas0mqc.jl:34\n"
  stdout: ''
  timestamp: 1659749555
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return [] \n    else \n        arr = sort(arr) \n        arr\
    \ = reverse(arr) \n        arr = map(x -> \"One\"..\"Nine\"[x], arr) \n      \
    \  return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an array of integers and returns\
    \ the array in reverse order. \nFor example, \n    by_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\nshould return\n    [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\nHint: use reverse.\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfa_wyw14.jl:26\nin expression starting at\
    \ /tmp/tmpfa_wyw14.jl:26\n"
  stdout: ''
  timestamp: 1659749555
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if arr.length ==\
    \ 0 \n        return [] \n    else \n        arr = sort(arr) \n        arr = reverse(arr)\
    \ \n        arr = map(x -> \"One\" if x == 1 \n                else if x == 2\
    \ \n                    then \"Two\" \n                    else if x == 3 \n \
    \                       then \"Three\" \n                        else if x ==\
    \ 4 \n                            then \"Four\" \n                           \
    \ else if x == 5 \n                                then \"Five\" \n          \
    \                      else if x == 6 \n                                    then\
    \ \"Six\" \n                                    else if x == 7 \n            \
    \                            then \"Seven\" \n                               \
    \         else if x == 8 \n                                            then \"\
    Eight\" \n                                            else \"Nine\" \n       \
    \                     end,arr) \n        arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings that represent\
    \ each of the numbers in that vector in descending order.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg1j3glfe.jl:22\nin expression starting at\
    \ /tmp/tmpg1j3glfe.jl:22\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return Vector{String}() \n    else \n        arr = arr |> sort()\
    \ \n        arr = reverse(arr) \n        arr = arr |> map(x->\"One\"..\"Nine\"\
    [x-1]) \n        return arr \n    end\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of integers and returns a vector of strings.\
    \ Each string in the vector should contain the integer as a string and the integer\
    \ as a number. For example, the input [4, 6, 8, 10, 12] should return the vector\
    \ [\"4\", \"6\", \"8\", \"10\", \"12\"]. Make sure to handle empty vectors correctly.\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphh14e0bn.jl:26\nin expression starting at\
    \ /tmp/tmphh14e0bn.jl:26\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if arr.length ==\
    \ 0\n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n   \
    \ arr = reverse(arr)\n    \n    arr = map(x -> \"One\"..\"Nine\"[x], arr)\n  \
    \  \n    return arr\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ an array of integers and returns the array sorted in descending order.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9c1kxfd4.jl:28\nin expression starting at\
    \ /tmp/tmp9c1kxfd4.jl:28\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return [] \n    else \n        arr = sort(arr) \n        arr\
    \ = reverse(arr) \n        arr = replace(arr, 1, \"One\") \n        arr = replace(arr,\
    \ 2, \"Two\") \n        arr = replace(arr, 3, \"Three\") \n        arr = replace(arr,\
    \ 4, \"Four\") \n        arr = replace(arr, 5, \"Five\") \n        arr = replace(arr,\
    \ 6, \"Six\") \n        arr = replace(arr, 7, \"Seven\") \n        arr = replace(arr,\
    \ 8, \"Eight\") \n        arr = replace(arr, 9, \"Nine\") \n        return arr\
    \ \n    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns the sum of the integers in the vector. \nFor example,\
    \ \n    by_sum([1, 2, 3, 4, 5]) should return 15. \n    by_sum([-1, -2, 3, -4,\
    \ -5]) should return -3.\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp51hkji1l.jl:34\nin expression starting at\
    \ /tmp/tmp51hkji1l.jl:34\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = arr\
    \ |> sort() |> reverse() |> map(x->\"One\"..\"Nine\"[x]) |> Vector{String}\n \
    \   \n    if isempty(arr)\n        return arr\n    end\n    \n    if arr[1] <\
    \ 1 || arr[1] > 9\n        return arr\n    end\n    \n    if arr[2] < 1 || arr[2]\
    \ > 9\n        return arr\n    end\n    \n    if arr[3] < 1 || arr[3] > 9\n  \
    \      return arr\n    end\n    \n    if arr[4] < 1 || arr[4] > 9\n        return\
    \ arr\n    end\n    \n    if arr[5] < 1 || arr[5] > 9\n        return arr\n  \
    \  end\n    \n    if arr[6] < 1 || arr[6] > 9\n        return arr\n    end\n \
    \   \n    if arr[7] < 1 || arr[7] > 9\n        return arr\n    end\n    \n   \
    \ if arr[8] < 1 || arr[8] > 9\n        return arr\n    end\n    \n    if arr[9]\
    \ < 1 || arr[9] > 9\n        return arr\n    end\n    \n    return arr\nend\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr954wphq.jl:62\nin expression starting at\
    \ /tmp/tmpr954wphq.jl:62\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = arr\
    \ |> sort() |> reverse()\n    \n    arr = arr |> map(x->\"One\"..\"Nine\"[x])\
    \ |> collect{x->x}\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([])\nby_length([-1, 55])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmm7b3rqs.jl:24\nin expression starting at\
    \ /tmp/tmpmm7b3rqs.jl:24\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if arr.length ==\
    \ 0 \n        return Vector{String}() \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = map(x -> \"One\" if x == 1 \n    \
    \        else if x == 2 \n                \"Two\" \n            else if x == 3\
    \ \n                \"Three\" \n            else if x == 4 \n                \"\
    Four\" \n            else if x == 5 \n                \"Five\" \n            else\
    \ if x == 6 \n                \"Six\" \n            else if x == 7 \n        \
    \        \"Seven\" \n            else if x == 8 \n                \"Eight\" \n\
    \            else if x == 9 \n                \"Nine\" \n            else \n \
    \               \"\" \n            , arr) \n        return arr \n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes an array of integers\
    \ and returns the array sorted in descending order by the length of the array.\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_gonxd09.jl:22\nin expression starting at\
    \ /tmp/tmp_gonxd09.jl:22\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return Vector{String}() \n    else \n        arr = sort(arr)\
    \ \n        arr = reverse(arr) \n        arr = replace(arr, (x -> \"One\"..\"\
    Nine\")[x % 10], 1:9)\n        return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of times a given value appears in an array. For example,\n\
    \    count_of([1, 1, 1, 2, 2, 3]) should return 3.\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_p30j1ze.jl:26\nin expression starting at\
    \ /tmp/tmp_p30j1ze.jl:26\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    \n    if arr == []\n        return Vector{String}()\n    end\n    \n    arr\
    \ = reverse(arr)\n    \n    digits = Vector{String}()\n    \n    for i in arr\n\
    \        if i <= 9\n            push!(digits, \"One\")\n        elseif i <= 99\n\
    \            push!(digits, \"Two\")\n        elseif i <= 999\n            push!(digits,\
    \ \"Three\")\n        elseif i <= 9999\n            push!(digits, \"Four\")\n\
    \        elseif i <= 99999\n            push!(digits, \"Five\")\n        elseif\
    \ i <= 999999\n            push!(digits, \"Six\")\n        elseif i <= 9999999\n\
    \            push!(digits, \"Seven\")\n        elseif i <= 999999999\n       \
    \     push!(digits, \"Eight\")\n        elseif i <= 99999999999\n            push!(digits,\
    \ \"Nine\")\n        else\n            push!(digits, \"?\")\n        end\n   \
    \ end\n    \n    return digits\nend\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of integers and returns the same vector but with each element replaced\
    \ by the corresponding name from the following list:\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgu654bnk.jl:54\nin expression starting at\
    \ /tmp/tmpgu654bnk.jl:54\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    if length(arr)\
    \ == 0\n        return Vector{String}()\n    end\n    \n    arr = arr |> sort()\
    \ |> reverse()\n    \n    arr = arr |> map(x->\"One\"..\"Nine\"[x]) |> Vector{String}\n\
    \    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of integers and returns a vector of strings that represent each of\
    \ the numbers in the vector in descending order.\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpue7bbb9r.jl:28\nin expression starting at\
    \ /tmp/tmpue7bbb9r.jl:28\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return [] \n    else \n        arr = sort(arr) \n        arr\
    \ = reverse(arr) \n        arr = map(x -> \"One\" if x == 1 \n            else\
    \ if x == 2 \n                \"Two\" \n            else if x == 3 \n        \
    \        \"Three\" \n            else if x == 4 \n                \"Four\" \n\
    \            else if x == 5 \n                \"Five\" \n            else if x\
    \ == 6 \n                \"Six\" \n            else if x == 7 \n             \
    \   \"Seven\" \n            else if x == 8 \n                \"Eight\" \n    \
    \        else if x == 9 \n                \"Nine\" \n            else \n     \
    \           \"\" \n            , arr) \n        return arr \n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of integers and returns\
    \ the sum of the integers squared. \nFor example, \n    by_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3]) \nshould return \n    by_length([4, 16, 36, 64, 100])\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxumghahu.jl:22\nin expression starting at\
    \ /tmp/tmpxumghahu.jl:22\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if arr.length ==\
    \ 0 \n        return Vector{String}() \n    else \n        arr = arr |> sort()\
    \ \n        arr = reverse(arr) \n        arr = arr |> map(x->\"One\"..\"Nine\"\
    [x-1]) \n        return arr \n    end\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an array of integers and returns the array in reverse\
    \ order with each element replaced by its corresponding name from \"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe60ggagd.jl:26\nin expression starting at\
    \ /tmp/tmpe60ggagd.jl:26\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return [] \n    else \n        arr = sort(arr) \n        arr\
    \ = reverse(arr) \n        arr = map(x -> \"One\"..\"Nine\"[x], arr) \n      \
    \  return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n\
    </cell>\n<code language=julia-1.5>\nby_length([1])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, \nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp81vou29a.jl:26\nin expression starting at\
    \ /tmp/tmp81vou29a.jl:26\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return [] \n    else \n        arr = sort(arr) \n        arr\
    \ = reverse(arr) \n        arr = replace(arr, 1, \"One\") \n        arr = replace(arr,\
    \ 2, \"Two\") \n        arr = replace(arr, 3, \"Three\") \n        arr = replace(arr,\
    \ 4, \"Four\") \n        arr = replace(arr, 5, \"Five\") \n        arr = replace(arr,\
    \ 6, \"Six\") \n        arr = replace(arr, 7, \"Seven\") \n        arr = replace(arr,\
    \ 8, \"Eight\") \n        arr = replace(arr, 9, \"Nine\") \n        return arr\
    \ \n    end\nend\n</cell>\n<code language=julia-1.4>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns the sum of the integers in the vector. \nFor example,\
    \ \n    sum([1, 2, 3])\nshould return 6.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpahwu35sr.jl:34\nin expression starting at\
    \ /tmp/tmpahwu35sr.jl:34\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0\n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n\
    \    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\"..\"Nine\"[x],\
    \ arr)\n    \n    return arr\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings that represent\
    \ each of the numbers from 1 to 9 inclusive, with the numbers separated by commas.\
    \ For example:\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp44bmfm9j.jl:29\nin expression starting at\
    \ /tmp/tmp44bmfm9j.jl:29\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if arr.length ==\
    \ 0 \n        return Vector{String}() \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = map(x->\"One\"..\"Nine\"[x], arr)\
    \ \n        arr \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns the sum of the integers squared.\
    \ \nFor example, \n>>> by_length(Vector{Int64}([2, 1, 1, 4, 5, 8, 2, 3])) \n[4,\
    \ 16, 36, 64, 100]\n>>> by_length(Vector{Int64}([2, 1, 1, 4, 5, 8, 2, 3])) \n\
    [4, 16, 36, 64, 100]\n>>> by_length(Vector{Int64}([2, 1, 1, 4, 5, 8, 2, 3])) \n\
    [4, 16, 36, 64, 100]\n>>> by_length(Vector{Int64}([2, 1, 1, 4, 5, 8, 2, 3])) \n\
    [4, 16, 36, 64, 100]\n>>> by_length(Vector{Int64}([2, 1, 1, 4, 5, 8, 2, 3])) \n\
    [4, 16, 36, 64, 100]\n>>> by_length(Vector{Int64}([2, 1, 1, 4, 5, 8, 2, 3])) \n\
    [4, 16, 36, 64, 100]\n>>> by_length(Vector{Int64}([2, 1, 1, 4, 5, 8, 2, 3])) \n\
    [4, 16, 36, 64, 100]\n>>> by_length(Vector{Int64}([2, 1, 1, 4, 5, 8, 2, 3])) \n\
    [4, 16, 36, 64, 100]\n>>> by_length(Vector{Int64}([2, 1, 1, 4, 5, 8, 2, 3])) \n\
    [4, 16, 36, 64, 100]\n>>> by_length(Vector{Int64}([2, 1, 1, 4, 5, 8, 2, 3])) \n\
    [4, 16, 36, 64, 100]\n>>> by_length(Vector{Int64}([2, 1, 1, 4, 5, 8, 2, 3])) \n\
    [4, 16, 36, 64, 100]\n>>> by_length(Vector{Int64}([2, 1, 1, 4, 5, 8, 2, 3])) \n\
    [4, 16, 36, 64, 100]\n>>> by_length(Vector{Int64}([2, 1, 1, 4, 5, 8, 2, 3])) \n\
    [4, 16, 36, 64, 100]\n>>> by_length(Vector{Int64}([2, 1, 1, 4, 5, 8, 2, 3])) \n\
    [4, 16, 36, 64, 100]\n>>> by_length(Vector{Int64}([2, 1, 1, 4, 5, 8, 2, 3])) \n\
    [4, 16, 36, 64, 100]\n>>> by_length(Vector{Int64}([2, 1, 1, 4, 5, 8, 2, 3])) \n\
    [4, 16, 36, 64, 100]\n>>> by_length(Vector{Int64}([2, 1, 1, 4, 5, 8, 2, 3])) \n\
    [4, 16, 36, 64, 100]\n>>> by_length(Vector{\nusing Test\n\n@testset begin\n\n\
    candidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp30awrkv0.jl:26\nin expression starting at\
    \ /tmp/tmp30awrkv0.jl:26\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return Vector{String}() \n    else \n        arr = sort(arr)\
    \ \n        arr = reverse(arr) \n        arr = map(x -> \"One\"..\"Nine\"[x],\
    \ arr) \n        return arr \n    end\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    This doesn't work for negative numbers. `by_length(Vector{Int64}([-1, -10, -20,\
    \ -30, -100, -200, -300, -400, -500, -600, -700]))` returns `[\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]`\n<|/\
    \ c |>\n<| a dscore=2 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate =\
    \ by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpprbh0suw.jl:26\nin expression starting at\
    \ /tmp/tmpprbh0suw.jl:26\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    if arr.length\
    \ == 0 \n        return [] \n    \n    arr = arr |> sort() |> reverse() |> map((x)\
    \ -> \"One\" |> get(x)) |> Vector{String}\n    \n    for x in arr \n        if\
    \ x < 1 || x > 9 \n            continue \n        \n        arr[x] = get(x)\n\
    \    end\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of integers and returns the sum of the integers squared. For example:\n\
    >>> by_length([])\n0\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n25\n>>> by_length([-1,\
    \ 1, -5, -4, -9, -4, -6, -7, -8])\n-25\n>>> by_length([-1, 1, -5, -4, -9, -4,\
    \ -6, -7, -8, 0])\n0\n>>> by_length([-1, 1, -5, -4, -9, -4, -6, -7, -8, 0])\n\
    0\n>>> by_length([-1, 1, -5, -4, -9, -4, -6, -7, -8, 0])\n0\n>>> by_length([-1,\
    \ 1, -5, -4, -9, -4, -6, -7, -8, 0])\n0\n>>> by_length([-1, 1, -5, -4, -9, -4,\
    \ -6, -7, -8, 0])\n0\n>>> by_length([-1, 1, -5, -4, -9, -4, -6, -7, -8, 0])\n\
    0\n>>> by_length([-1, 1, -5, -4, -9, -4, -6, -7, -8, 0])\n0\n>>> by_length([-1,\
    \ 1, -5, -4, -9, -4, -6, -7, -8, 0])\n0\n>>> by_length([-1, 1, -5, -4, -9, -4,\
    \ -6, -7, -8, 0])\n0\n>>> by_length([-1, 1, -5, -4, -9, -4, -6, -7, -8, 0])\n\
    0\n>>> by_length([-1, 1, -5, -4, -9, -4, -6, -7, -8, 0])\n0\n>>> by_length([-1,\
    \ 1, -5, -4, -9, -4, -6, -7, -8, 0])\n0\n>>> by_length([-1, 1, -5, -4, -9, -4,\
    \ -6, -7, -8, 0])\n0\n>>> by_length([-1, 1, -5, -4, -9, -4, -6, -7, -8, 0])\n\
    0\n>>> by_length([-\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t\
    @test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbyabhzc6.jl:32\nin expression starting at\
    \ /tmp/tmpbyabhzc6.jl:32\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    if length(arr)\
    \ == 0 \n        return Vector{String}() \n    else \n        \n        arr =\
    \ sort(arr) \n        \n        arr = reverse(arr) \n        \n        arr = map(x\
    \ -> \"One\" if x == 1 \n                    else \"Two\" if x == 2 \n       \
    \             else \"Three\" if x == 3 \n                    else \"Four\" if\
    \ x == 4 \n                    else \"Five\" if x == 5 \n                    else\
    \ \"Six\" if x == 6 \n                    else \"Seven\" if x == 7 \n        \
    \            else \"Eight\" if x == 8 \n                    else \"Nine\", arr)\
    \ \n        \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, \nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq6bzgbri.jl:26\nin expression starting at\
    \ /tmp/tmpq6bzgbri.jl:26\n"
  stdout: ''
  timestamp: 1659749557
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    \n    if length(arr) == 0\n        return Vector{String}()\n    end\n   \
    \ \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\"[x], arr)\n    \n\
    \    return arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([1, -1 , 55])\n\
    </cell>\n<text>\nExercise\nWrite a function that returns the number of times a\
    \ given number appears in an array. For example, given [1, 1, 2, 3, 4, 4, 5],\
    \ the function should return 3 because there are 3 1's in the array.\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw225mgkr.jl:30\nin expression starting at\
    \ /tmp/tmpw225mgkr.jl:30\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if arr.length ==\
    \ 0 \n        return Vector{String}() \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = map(x -> \"One\"[x], arr) \n     \
    \   arr = map(x -> \"Two\"[x], arr) \n        arr = map(x -> \"Three\"[x], arr)\
    \ \n        arr = map(x -> \"Four\"[x], arr) \n        arr = map(x -> \"Five\"\
    [x], arr) \n        arr = map(x -> \"Six\"[x], arr) \n        arr = map(x -> \"\
    Seven\"[x], arr) \n        arr = map(x -> \"Eight\"[x], arr) \n        arr = map(x\
    \ -> \"Nine\"[x], arr) \n        return arr\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes an array of integers and returns the array in reverse order. For\
    \ example:\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n[\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmk_4pay8.jl:34\nin expression starting at\
    \ /tmp/tmpmk_4pay8.jl:34\n"
  stdout: ''
  timestamp: 1659749557
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return [] \n    \n    arr = sort(arr) \n    \n    arr = reverse(arr)\
    \ \n    \n    arr = map(x -> \"One\"[x], arr) \n    \n    arr = map(x -> \"Two\"\
    [x], arr) \n    \n    arr = map(x -> \"Three\"[x], arr) \n    \n    arr = map(x\
    \ -> \"Four\"[x], arr) \n    \n    arr = map(x -> \"Five\"[x], arr) \n    \n \
    \   arr = map(x -> \"Six\"[x], arr) \n    \n    arr = map(x -> \"Seven\"[x], arr)\
    \ \n    \n    arr = map(x -> \"Eight\"[x], arr) \n    \n    arr = map(x -> \"\
    Nine\"[x], arr) \n    \n    arr\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes an array of integers and returns the array sorted in ascending order\
    \ by the sum of each number. For example:\n>>> by_sum([])\n[]\n>>> by_sum([1,\
    \ 3, 2])\n[3, 2]\n>>> by_sum([2, 6, 4, 1, 3, 5])\n[6, 4, 3, 5]\n>>> by_sum([1,\
    \ 3, 2])\n[3, 2]\n>>> by_sum([2, 6, 4, 1, 3, 5])\n[6, 4, 3, 5]\n>>> by_sum([1,\
    \ 3, 2])\n[3, 2]\n>>> by_sum([2, 6, 4, 1, 3, 5])\n[6, 4, 3, 5]\n>>> by_sum([1,\
    \ 3, 2])\n[3, 2]\n>>> by_sum([2, 6, 4, 1, 3, 5])\n[6, 4, 3, 5]\n>>> by_sum([1,\
    \ 3, 2])\n[3, 2]\n>>> by_sum([2, 6, 4, 1, 3, 5])\n[6, 4, 3, 5]\n>>> by_sum([1,\
    \ 3, 2])\n[3, 2]\n>>> by_sum([2, 6, 4, 1, 3, 5])\n[6, 4, 3, 5]\n>>> by_sum([1,\
    \ 3, 2])\n[3, 2]\n>>> by_sum([2, 6, 4, 1, 3, 5])\n[6, 4, 3, 5]\n>>> by_sum([1,\
    \ 3, 2])\n[3, 2]\n>>> by_sum([2, 6, 4, 1, 3, 5])\n[6, 4, 3, 5]\n>>> by_sum([1,\
    \ 3, 2])\n[3, 2]\n>>> by_sum([2, 6, 4, 1, 3, 5])\n[6, 4, 3, 5]\n>>> by_sum([1,\
    \ 3, 2])\n[3, 2]\n>>> by_sum([2, 6, 4, 1, 3, 5])\n[6, 4, 3, 5]\n>>> by_sum([1,\
    \ 3, 2])\n[3, 2]\n>>> by_sum([2, 6, 4, 1, 3, 5])\n[6, 4, 3, 5]\n>>> by_sum([1,\
    \ \nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdl3do5hd.jl:44\nin expression starting at\
    \ /tmp/tmpdl3do5hd.jl:44\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return Vector{String}() \n    else \n        arr = sort(arr)\
    \ \n        arr = reverse(arr) \n        arr = map(x -> \"One\" <= x && x <= \"\
    Nine\" ? x : \"\", arr) \n        arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings that represent\
    \ each of the numbers in the vector in descending order.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy9l918ma.jl:26\nin expression starting at\
    \ /tmp/tmpy9l918ma.jl:26\n"
  stdout: ''
  timestamp: 1659749556
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    if length(arr)\
    \ == 0 \n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n\
    \    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\"[x], arr)\n   \
    \ \n    arr = map(x -> \"Two\"[x], arr)\n    \n    arr = map(x -> \"Three\"[x],\
    \ arr)\n    \n    arr = map(x -> \"Four\"[x], arr)\n    \n    arr = map(x -> \"\
    Five\"[x], arr)\n    \n    arr = map(x -> \"Six\"[x], arr)\n    \n    arr = map(x\
    \ -> \"Seven\"[x], arr)\n    \n    arr = map(x -> \"Eight\"[x], arr)\n    \n \
    \   arr = map(x -> \"Nine\"[x], arr)\n    \n    return arr\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns the sum\
    \ of the integers in the vector.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd_g8lvsm.jl:46\nin expression starting at\
    \ /tmp/tmpd_g8lvsm.jl:46\n"
  stdout: ''
  timestamp: 1659749557
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = arr\
    \ |> sort() |> reverse()\n    \n    arr = arr |> map((x) -> \"One\" <= x && x\
    \ <= \"Nine\" ? \"One\" : \n        \"Two\" <= x && x <= \"Nine\" ? \"Two\" :\
    \ \n        \"Three\" <= x && x <= \"Nine\" ? \"Three\" : \n        \"Four\" <=\
    \ x && x <= \"Nine\" ? \"Four\" : \n        \"Five\" <= x && x <= \"Nine\" ? \"\
    Five\" : \n        \"Six\" <= x && x <= \"Nine\" ? \"Six\" : \n        \"Seven\"\
    \ <= x && x <= \"Nine\" ? \"Seven\" : \n        \"Eight\" <= x && x <= \"Nine\"\
    \ ? \"Eight\" : \n        \"Nine\" <= x && x <= \"Nine\" ? \"Nine\" : \n     \
    \   x)\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise: Write a function that takes\
    \ an array of integers and returns a new array with the integers reversed.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf780_thg.jl:33\nin expression starting at\
    \ /tmp/tmpf780_thg.jl:33\n"
  stdout: ''
  timestamp: 1659749558
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return [] \n    else \n        arr = arr |> sort() \n       \
    \ arr = reverse(arr) \n        arr = map(x -> \"One\" |> get(x) || \"Two\" |>\
    \ get(x) || \"Three\" |> get(x) || \"Four\" |> get(x) || \"Five\" |> get(x) ||\
    \ \"Six\" |> get(x) || \"Seven\" |> get(x) || \"Eight\" |> get(x) || \"Nine\"\
    \ |> get(x), arr) \n        arr \n    end\nend\n</code>\n<|/ a tags=julia |>\n\
    <| c |>\nThis does not provide an answer to the question. To critique or request\
    \ clarification from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/27770344)\n\
    <|/ c |>\n<| c |>\nI believe this does answer the question. He asked how to sort\
    \ an array by length and then replace each digit by its corresponding name from\
    \ \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\".\n<|/ c |>\n<| c |>\nThis does not provide an answer to the question.\
    \ To critique or request clarification from an author, leave a comment below their\
    \ post. - [From Review](/review/low-quality-posts/27770344)\n<|/ c |>\n<| c |>\n\
    I believe this does answer the question. He asked how to sort an array by length\
    \ and then replace each digit by its corresponding name from \"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n<|/\
    \ c |>\n<| c |>\nThis does not provide an answer to the question. To critique\
    \ or request clarification from an author, leave a comment below their post. -\
    \ [From Review](/review/low-quality-posts/27770344)\n<|/ c |>\n<| a tags=julia\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa6hkl8bb.jl:26\nin expression starting at\
    \ /tmp/tmpa6hkl8bb.jl:26\n"
  stdout: ''
  timestamp: 1659749558
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return [] \n    else \n        arr = arr |> sort() \n       \
    \ arr = reverse(arr) \n        arr = arr |> map((x) -> \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")[x] \n        return\
    \ arr \n    end\nend\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7r4hc3wh.jl:26\nin expression starting at\
    \ /tmp/tmp7r4hc3wh.jl:26\n"
  stdout: ''
  timestamp: 1659749558
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = map(x -> \"One\"..\"Nine\"[x], arr)\n    return\
    \ arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpo16ceb8g.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpo16ceb8g.jl:27\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  BoundsError: attempt\
    \ to access 4-codeunit String at index [8]\n  Stacktrace:\n    [1] checkbounds\n\
    \      @ ./strings/basic.jl:216 [inlined]\n    [2] codeunit\n      @ ./strings/string.jl:102\
    \ [inlined]\n    [3] getindex\n      @ ./strings/string.jl:223 [inlined]\n   \
    \ [4] (::var\"#1#2\")(x::Int64)\n      @ Main /tmp/tmpo16ceb8g.jl:19\n    [5]\
    \ iterate\n      @ ./generator.jl:47 [inlined]\n    [6] _collect(c::Vector{Int64},\
    \ itr::Base.Generator{Vector{Int64}, var\"#1#2\"}, #unused#::Base.EltypeUnknown,\
    \ isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n    [7] collect_similar\n\
    \      @ ./array.jl:653 [inlined]\n    [8] map\n      @ ./abstractarray.jl:2867\
    \ [inlined]\n    [9] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmpo16ceb8g.jl:19\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [11] macro expansion\n      @ /tmp/tmpo16ceb8g.jl:27 [inlined]\n\
    \   [12] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [13] top-level scope\n      @ /tmp/tmpo16ceb8g.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpo16ceb8g.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  BoundsError: attempt to access 4-codeunit\
    \ String at index [55]\n  Stacktrace:\n    [1] checkbounds\n      @ ./strings/basic.jl:216\
    \ [inlined]\n    [2] codeunit\n      @ ./strings/string.jl:102 [inlined]\n   \
    \ [3] getindex\n      @ ./strings/string.jl:223 [inlined]\n    [4] (::var\"#1#2\"\
    )(x::Int64)\n      @ Main /tmp/tmpo16ceb8g.jl:19\n    [5] iterate\n      @ ./generator.jl:47\
    \ [inlined]\n    [6] _collect(c::Vector{Int64}, itr::Base.Generator{Vector{Int64},\
    \ var\"#1#2\"}, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n      @\
    \ Base ./array.jl:744\n    [7] collect_similar\n      @ ./array.jl:653 [inlined]\n\
    \    [8] map\n      @ ./abstractarray.jl:2867 [inlined]\n  "
  timestamp: 1659749560
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    if length(arr)\
    \ == 0 \n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n\
    \    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" <= x && x <= \"\
    Nine\" ? x : \"\", arr)\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings that represent\
    \ each of the numbers in the vector in reverse order.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbm647dgx.jl:30\nin expression starting at\
    \ /tmp/tmpbm647dgx.jl:30\n"
  stdout: ''
  timestamp: 1659749558
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    if length(arr)\
    \ == 0 \n        return [] \n    else \n        arr = arr |> sort() |> reverse()\
    \ \n        arr = arr |> map((x) -> \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")[arr]\n        return arr\n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of\
    \ integers and returns the sum of the integers that are between 1 and 9 inclusive.\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp56gdyo0o.jl:26\nin expression starting at\
    \ /tmp/tmp56gdyo0o.jl:26\n"
  stdout: ''
  timestamp: 1659749558
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = map(x -> name(x), arr)\n    return arr\nend\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpeqq2tnq2.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpeqq2tnq2.jl:27\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: name\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#2\")(x::Int64)\n      @ Main\
    \ /tmp/tmpeqq2tnq2.jl:19\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n\
    \    [3] _collect(c::Vector{Int64}, itr::Base.Generator{Vector{Int64}, var\"#1#2\"\
    }, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n\
    \    [4] collect_similar\n      @ ./array.jl:653 [inlined]\n    [5] map\n    \
    \  @ ./abstractarray.jl:2867 [inlined]\n    [6] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmpeqq2tnq2.jl:19\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpeqq2tnq2.jl:27 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpeqq2tnq2.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpeqq2tnq2.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: name not defined\n  Stacktrace:\n\
    \    [1] (::var\"#1#2\")(x::Int64)\n      @ Main /tmp/tmpeqq2tnq2.jl:19\n    [2]\
    \ iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _collect(c::Vector{Int64},\
    \ itr::Base.Generator{Vector{Int64}, var\"#1#2\"}, #unused#::Base.EltypeUnknown,\
    \ isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n    [4] collect_similar\n\
    \      @ ./array.jl:653 [inlined]\n    [5] map\n      @ ./abstractarray.jl:2867\
    \ [inlined]\n    [6] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmpeqq2tnq2.jl:19\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpeqq2tnq2.jl:29 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpeqq2tnq2.jl"
  timestamp: 1659749560
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr1 = arr\n\
    \    arr2 = arr\n    \n    if arr1 == []\n        return arr2\n    end\n    \n\
    \    arr1 = arr1[2:end]\n    arr2 = arr2[2:end]\n    \n    arr1 = arr1[arr1 .!=\
    \ 1]\n    arr2 = arr2[arr2 .!= 1]\n    \n    arr1 = arr1[arr1 .!= -1]\n    arr2\
    \ = arr2[arr2 .!= -1]\n    \n    arr1 = arr1[arr1 .!= 0]\n    arr2 = arr2[arr2\
    \ .!= 0]\n    \n    arr1 = arr1[arr1 .!= 9]\n    arr2 = arr2[arr2 .!= 9]\n   \
    \ \n    arr1 = arr1[arr1 .!= 8]\n    arr2 = arr2[arr2 .!= 8]\n    \n    arr1 =\
    \ arr1[arr1 .!= 7]\n    arr2 = arr2[arr2 .!= 7]\n    \n    arr1 = arr1[arr1 .!=\
    \ 6]\n    arr2 = arr2[arr2 .!= 6]\n    \n    arr1 = arr1[arr1 .!= 5]\n    arr2\
    \ = arr2[arr2 .!= 5]\n    \n    arr1 = arr1[arr1 .!= 4]\n    arr2 = arr2[arr2\
    \ .!= 4]\n    \n    arr1 = arr1[arr1 .!= 3]\n    arr2 = arr2[arr2 .!= 3]\n   \
    \ \n    arr1 = arr1[arr1 .!= 2]\n    arr2 = arr2[arr2 .!= 2]\n    \n    arr1 =\
    \ arr1[arr1 .!= 1]\n    arr2 = arr2[arr2 .!= 1]\n    \n    arr1 = arr1[arr1 .!=\
    \ 0]\n    arr2 = arr2[arr2 .!= 0]\n    \n    arr1 = arr1[arr1 .!= 9]\n    arr2\
    \ = arr2[arr2 .!= 9]\n    \n    arr1 = arr1[arr1 .!= 8]\n    arr2 = arr2[arr2\
    \ .!= 8]\n    \n    arr1 = arr1[arr1 .!= 7]\n    arr2 = arr2[arr2 .!= 7]\n   \
    \ \n    arr1 = arr1[arr1 .!= 6]\n    arr2 = arr2[arr2 .!= 6]\n    \n    arr1 =\
    \ arr1[arr1 .!= 5]\n    arr2 = arr2[arr2 .!= 5]\n    \n    arr1 = arr1[arr1 .!=\
    \ 4]\n    arr2 = arr2[arr2 .!= 4]\n    \n    arr1 = arr1[arr1 .!= 3]\n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplw89ek8n.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplw89ek8n.jl:1\n\
    in expression starting at /tmp/tmplw89ek8n.jl:1\n"
  stdout: ''
  timestamp: 1659749558
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = arr\
    \ |> sort() |> reverse()\n    \n    arr = arr |> map(x->\"One\"..\"Nine\"[x-1])\
    \ |> Vector{String}\n    \n    return arr\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpm_joeqca.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpm_joeqca.jl:29\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching sort()\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpm_joeqca.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm_joeqca.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpm_joeqca.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpm_joeqca.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: no method\
    \ matching sort()\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpm_joeqca.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm_joeqca.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n   "
  timestamp: 1659749560
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    if length(arr)\
    \ == 0\n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n\
    \    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" <= x && x <= \"\
    Nine\" ? x : \"\", arr)\n    \n    return arr\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the number of characters\
    \ in the string.\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx6sjvriw.jl:30\nin expression starting at\
    \ /tmp/tmpx6sjvriw.jl:30\n"
  stdout: ''
  timestamp: 1659749558
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return Vector{String}() \n    else \n        arr = sort(arr)\
    \ \n        arr = reverse(arr) \n        arr = map(x -> \"One\" <= x && x <= \"\
    Nine\" ? x : \"\", arr) \n        arr \n    end\nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=1 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsliug74m.jl:26\nin expression starting at\
    \ /tmp/tmpsliug74m.jl:26\n"
  stdout: ''
  timestamp: 1659749558
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    if length(arr)\
    \ == 0 \n        return Vector{String}() \n    else \n        arr = sort(arr)\
    \ \n        arr = reverse(arr) \n        arr = map(x -> \"One\"..\"Nine\"[x],\
    \ arr) \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([1])\n</cell>\n<code language=julia-1.5>\nby_length([])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes an array of integers and returns the array\
    \ in reverse order. For example:\nusing Test\n\n@testset begin\n\ncandidate =\
    \ by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmwi4a9mg.jl:27\nin expression starting at\
    \ /tmp/tmpmwi4a9mg.jl:27\n"
  stdout: ''
  timestamp: 1659749558
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    \n    if length(arr) == 0\n        return Vector{String}()\n    end\n   \
    \ \n    arr = reverse(arr)\n    \n    arr = replace(arr,\n        arr |> x ->\
    \ \"One\"\n        arr |> x -> \"Two\"\n        arr |> x -> \"Three\"\n      \
    \  arr |> x -> \"Four\"\n        arr |> x -> \"Five\"\n        arr |> x -> \"\
    Six\"\n        arr |> x -> \"Seven\"\n        arr |> x -> \"Eight\"\n        arr\
    \ |> x -> \"Nine\"\n    )\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns the sum of the integers that are\
    \ between 1 and 9 inclusive.\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpofah1c1_.jl:28\nin expression starting at\
    \ /tmp/tmpofah1c1_.jl:28\n"
  stdout: ''
  timestamp: 1659749558
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return [] \n    else \n        arr = sort(arr) \n        arr\
    \ = reverse(arr) \n        arr = map(x -> \"One\" <= x && x <= \"Nine\" ? x :\
    \ \"\", arr) \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes an array of integers and returns the array sorted in descending order\
    \ by the sum of each integer. For example:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8b9rmy9b.jl:26\nin expression starting at\
    \ /tmp/tmp8b9rmy9b.jl:26\n"
  stdout: ''
  timestamp: 1659749558
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if arr.length ==\
    \ 0 \n        return [] \n    else \n        arr = sort(arr) \n        arr = reverse(arr)\
    \ \n        arr = map(x -> \"One\"[x], arr) \n        return arr \n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns a vector of strings that represent each of the numbers in the vector\
    \ in descending order.\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphplmpvfk.jl:26\nin expression starting at\
    \ /tmp/tmphplmpvfk.jl:26\n"
  stdout: ''
  timestamp: 1659749558
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\"..\"Nine\"[x],\
    \ arr)\n    \n    return arr\nend\n</cell>\n<code language=julia-1.4>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise: Write a function that takes\
    \ a vector of integers and returns a vector of strings that represent the numbers\
    \ from 1 to 9 inclusive, sorted in descending order.\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp84ho2ouj.jl:26\nin expression starting at\
    \ /tmp/tmp84ho2ouj.jl:26\n"
  stdout: ''
  timestamp: 1659749558
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = arr\
    \ |> sort() |> reverse()\n    \n    arr = arr |> map(x->\"One\"..\"Nine\"[x])\
    \ |> Vector{String}\n    \n    return arr\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp8zqx4tjq.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmp8zqx4tjq.jl:29\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching sort()\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp8zqx4tjq.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8zqx4tjq.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8zqx4tjq.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp8zqx4tjq.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: no method\
    \ matching sort()\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp8zqx4tjq.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8zqx4tjq.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n   "
  timestamp: 1659749561
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return Vector{String}() \n    else \n        arr = sort(arr)\
    \ \n        arr = reverse(arr) \n        arr = map(x -> \"One\"..\"Nine\"[x],\
    \ arr) \n        return arr \n    end\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of integers and returns the sum of the integers\
    \ in the vector.\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplqu_36me.jl:26\nin expression starting at\
    \ /tmp/tmplqu_36me.jl:26\n"
  stdout: ''
  timestamp: 1659749558
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    if length(arr)\
    \ == 0 \n        return [] \n    \n    if length(arr) == 1 \n        return [\"\
    One\"]\n    \n    arr = sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr\
    \ = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n\
    \    \n    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr =\
    \ arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n\
    \    \n    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr =\
    \ arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n\
    \    \n    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr =\
    \ arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n\
    \    \n    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr =\
    \ arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n\
    \    \n    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr =\
    \ arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n\
    \    \n    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr =\
    \ arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n\
    \    \n    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr =\
    \ arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n\
    \    \n    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr =\
    \ arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n\
    \    \n    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr =\
    \ arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = \nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2w19rj9d.jl:1\nin expression starting at /tmp/tmp2w19rj9d.jl:1\n"
  stdout: ''
  timestamp: 1659749558
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if arr.length ==\
    \ 0 \n        return Vector{String}() \n    else \n        arr = arr |> sort()\
    \ |> reverse() \n        arr = arr |> map((x) -> \"One\", \"Two\", \"Three\",\
    \ \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")[x] \n        return\
    \ arr\n    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes an array\
    \ of integers and returns a new array where each element in the new array is the\
    \ sum of the elements in the original array except for the element that corresponds\
    \ to the index in the original array. For example, if arr = [1, 2, 3, 4, 5] and\
    \ index = 2, then the new array should be [3, 4, 5].\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmporns0v3u.jl:25\nin expression starting at\
    \ /tmp/tmporns0v3u.jl:25\n"
  stdout: ''
  timestamp: 1659749558
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr1 = arr\n\
    \    arr2 = arr\n    \n    arr1 = arr1[arr1 .!= 0]\n    arr2 = arr2[arr2 .!= 0]\n\
    \    \n    arr1 = arr1[arr1 .<= 9]\n    arr2 = arr2[arr2 .<= 9]\n    \n    arr1\
    \ = arr1[arr1 .>= 1]\n    arr2 = arr2[arr2 .>= 1]\n    \n    arr1 = arr1[arr1\
    \ .<= 9]\n    arr2 = arr2[arr2 .<= 9]\n    \n    arr1 = arr1[arr1 .>= 1]\n   \
    \ arr2 = arr2[arr2 .>= 1]\n    \n    arr1 = arr1[arr1 .<= 9]\n    arr2 = arr2[arr2\
    \ .<= 9]\n    \n    arr1 = arr1[arr1 .>= 1]\n    arr2 = arr2[arr2 .>= 1]\n   \
    \ \n    arr1 = arr1[arr1 .<= 9]\n    arr2 = arr2[arr2 .<= 9]\n    \n    arr1 =\
    \ arr1[arr1 .>= 1]\n    arr2 = arr2[arr2 .>= 1]\n    \n    arr1 = arr1[arr1 .<=\
    \ 9]\n    arr2 = arr2[arr2 .<= 9]\n    \n    arr1 = arr1[arr1 .>= 1]\n    arr2\
    \ = arr2[arr2 .>= 1]\n    \n    arr1 = arr1[arr1 .<= 9]\n    arr2 = arr2[arr2\
    \ .<= 9]\n    \n    arr1 = arr1[arr1 .>= 1]\n    arr2 = arr2[arr2 .>= 1]\n   \
    \ \n    arr1 = arr1[arr1 .<= 9]\n    arr2 = arr2[arr2 .<= 9]\n    \n    arr1 =\
    \ arr1[arr1 .>= 1]\n    arr2 = arr2[arr2 .>= 1]\n    \n    arr1 = arr1[arr1 .<=\
    \ 9]\n    arr2 = arr2[arr2 .<= 9]\n    \n    arr1 = arr1[arr1 .>= 1]\n    arr2\
    \ = arr2[arr2 .>= 1]\n    \n    arr1 = arr1[arr1 .<= 9]\n    arr2 = arr2[arr2\
    \ .<= 9]\n    \n    arr1 = arr1[arr1 .>= 1]\n    arr2 = arr2[arr2 .>= 1]\n   \
    \ \n    arr1 = arr1[arr1 .<= 9]\n    arr2 = arr2[arr2 .<= 9]\n    \n    arr1 =\
    \ arr1[arr1 .>= 1]\n    arr2 = arr2[arr2 \nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwhoy1iwh.jl:1\nin expression starting at /tmp/tmpwhoy1iwh.jl:1\n"
  stdout: ''
  timestamp: 1659749558
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return [] \n    else \n        arr = sort(arr) \n        arr\
    \ = reverse(arr) \n        arr = map(x -> \"One\" <= x && x <= \"Nine\" ? x :\
    \ \"\", arr) \n        return arr \n    end\nend\n</cell>\n<text>\nExercise 4\n\
    Write a function that takes a vector of integers and returns a vector of strings\
    \ that represent each of the numbers in the vector in descending order.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdubqq8ak.jl:26\nin expression starting at\
    \ /tmp/tmpdubqq8ak.jl:26\n"
  stdout: ''
  timestamp: 1659749558
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    if length(arr)\
    \ == 0\n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n\
    \    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\"..\"Nine\"[x],\
    \ arr)\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of integers and returns the sum of the integers in the vector. \nFor\
    \ example, \n>>> sum([1, 2, 3, 4])\n10\nWrite a function that takes a vector of\
    \ integers and returns the product of the integers in the vector. \nFor example,\
    \ \n>>> product([1, 2, 3, 4])\n24\nWrite a function that takes a vector of integers\
    \ and returns the median of the integers in the vector. \nFor example, \n>>> median([1,\
    \ 2, 3, 4])\n2\nWrite a function that takes a vector of integers and returns the\
    \ mode of the integers in the vector. \nFor example, \n>>> mode([1, 2, 3, 4])\n\
    1\nWrite a function that takes a vector of integers and returns the sum of the\
    \ squares of the integers in the vector. \nFor example, \n>>> sumsq([1, 2, 3,\
    \ 4])\n25\nWrite a function that takes a vector of integers and returns the sum\
    \ of the absolute values of the integers in the vector. \nFor example, \n>>> sumabs([1,\
    \ 2, 3, 4])\n5\nWrite a function that takes a vector of integers and returns the\
    \ sum of the absolute values of the integers in the vector. \nFor example, \n\
    >>> sumabs([1, 2, 3, 4])\n5\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector. \nFor example,\
    \ \n>>> sumsq([1, 2, 3, 4])\n25\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector. \nFor example,\
    \ \n>>> sumsq([1, 2, 3, 4])\n25\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector. \nFor example,\
    \ \n>>> sumsq([1, 2, 3, 4])\n25\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector. \nFor example,\
    \ \n>>> sumsq([1, 2, 3, 4])\n25\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector. \nFor example,\
    \ \n>>> sumsq([1, 2, 3, 4])\n25\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector. \nFor example,\
    \ \n>>> sumsq([1, 2, 3, 4])\n25\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector. \nFor example,\
    \ \n>>> sumsq([1, 2, 3, 4])\n25\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector. \nFor example,\
    \ \n>>> sumsq([1, 2, 3, 4])\n25\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector. \nFor example,\
    \ \nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp8ixtak8.jl:30\nin expression starting at\
    \ /tmp/tmpp8ixtak8.jl:30\n"
  stdout: ''
  timestamp: 1659749559
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return Vector{String}() \n    else \n        arr = sort(arr)\
    \ \n        arr = reverse(arr) \n        arr = map(x -> \"One\" if x == 1 \n \
    \               else if x == 2 \n                    then \"Two\" \n         \
    \           else if x == 3 \n                        then \"Three\" \n       \
    \                 else if x == 4 \n                            then \"Four\" \n\
    \                            else if x == 5 \n                               \
    \ then \"Five\" \n                                else if x == 6 \n          \
    \                          then \"Six\" \n                                   \
    \ else if x == 7 \n                                        then \"Seven\" \n \
    \                                       else if x == 8 \n                    \
    \                        then \"Eight\" \n                                   \
    \         else \"Nine\" \n                    else x \n                end, arr)\
    \ \n        return arr \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns the sum of the integers in the vector.\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvggr2pw5.jl:22\nin expression starting at\
    \ /tmp/tmpvggr2pw5.jl:22\n"
  stdout: ''
  timestamp: 1659749560
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    \n    if arr.length == 0\n        return Vector{String}()\n    end\n    \n\
    \    arr = reverse(arr)\n    \n    digits = Vector{Int64}()\n    \n    for i in\
    \ arr\n        push!(digits, i)\n    end\n    \n    digits = digits[2:end]\n \
    \   \n    names = Vector{String}()\n    \n    for i in digits\n        push!(names,\
    \ names[i])\n    end\n    \n    return names\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([])\n</cell>\n<code language=julia-1.5>\nby_length([1])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-\nusing Test\n\n@testset begin\n\n\
    candidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe88ezhtr.jl:42\nin expression starting at\
    \ /tmp/tmpe88ezhtr.jl:42\n"
  stdout: ''
  timestamp: 1659749560
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return [] \n    else \n        arr = sort(arr) \n        arr\
    \ = reverse(arr) \n        arr = map(x -> \"One\"[x], arr) \n        arr = map(x\
    \ -> \"Two\"[x], arr) \n        arr = map(x -> \"Three\"[x], arr) \n        arr\
    \ = map(x -> \"Four\"[x], arr) \n        arr = map(x -> \"Five\"[x], arr) \n \
    \       arr = map(x -> \"Six\"[x], arr) \n        arr = map(x -> \"Seven\"[x],\
    \ arr) \n        arr = map(x -> \"Eight\"[x], arr) \n        arr = map(x -> \"\
    Nine\"[x], arr) \n        arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes an array of integers and returns the array in reverse order.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjae4hjas.jl:34\nin expression starting at\
    \ /tmp/tmpjae4hjas.jl:34\n"
  stdout: ''
  timestamp: 1659749560
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if arr.length ==\
    \ 0 \n        return Vector{String}() \n    else \n        arr = arr |> sort()\
    \ \n        arr = reverse(arr) \n        arr = arr |> map(x->\"One\"..\"Nine\"\
    [x-1]) \n        return arr \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector of integers and returns the sum of the integers\
    \ squared. \nFor example, \n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n[4, 16, 25,\
    \ 36, 49, 64, 81, 100]\n>>> by_length([2, -1, 0, 4, 5, 8, 2, 3])\n[4, 16, 25,\
    \ 36, 49, 64, 81, 100]\n>>> by_length([2, -1, 0, 4, 5, 8, 2, 3])\n[4, 16, 25,\
    \ 36, 49, 64, 81, 100]\n>>> by_length([2, -1, 0, 4, 5, 8, 2, 3])\n[4, 16, 25,\
    \ 36, 49, 64, 81, 100]\n>>> by_length([2, -1, 0, 4, 5, 8, 2, 3])\n[4, 16, 25,\
    \ 36, 49, 64, 81, 100]\n>>> by_length([2, -1, 0, 4, 5, 8, 2, 3])\n[4, 16, 25,\
    \ 36, 49, 64, 81, 100]\n>>> by_length([2, -1, 0, 4, 5, 8, 2, 3])\n[4, 16, 25,\
    \ 36, 49, 64, 81, 100]\n>>> by_length([2, -1, 0, 4, 5, 8, 2, 3])\n[4, 16, 25,\
    \ 36, 49, 64, 81, 100]\n>>> by_length([2, -1, 0, 4, 5, 8, 2, 3])\n[4, 16, 25,\
    \ 36, 49, 64, 81, 100]\n>>> by_length([2, -1, 0, 4, 5, 8, 2, 3])\n[4, 16, 25,\
    \ 36, 49, 64, 81, 100]\n>>> by_length([2, -1, 0, 4, 5, 8, 2, 3])\n[4, 16, 25,\
    \ 36, 49, 64, 81, 100]\n>>> by_length([2, -1, 0, 4, 5, 8, 2, 3])\n[4, 16, 25,\
    \ 36, 49, 64, 81, 100]\n>>> by_length([2, -1, 0, 4, 5, 8, 2, 3])\n[4, 16, 25,\
    \ 36, 49, 64, 81, 100]\n>>> by_length([2, -1, 0, 4, 5, 8, 2, 3])\n[4, 16, 25,\
    \ 36, 49, 64, 81, 100]\n>>> by_length([2, -1, 0, 4, 5, 8, 2, 3])\n[4, 16, 25,\
    \ 36, 49, 64, 81, 100]\n>>> by_length([2, -1, 0, 4, 5, 8, 2, 3])\n[4, 16, 25,\
    \ 36, 49, 64, 81, 100]\n>>> by_length([2, -1, 0, 4, 5, 8, 2, 3])\n[4, 16, 25,\
    \ 36, 49, 64, 81, 100]\n>>> by_length([2, -1, 0, 4, 5, 8, 2, 3])\n[4, 16, 25,\
    \ 36, \nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmc123sez.jl:26\nin expression starting at\
    \ /tmp/tmpmc123sez.jl:26\n"
  stdout: ''
  timestamp: 1659749560
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return [] \n    else \n        arr = sort(arr) \n        arr\
    \ = reverse(arr) \n        arr = map(x -> \"One\" <= x && x <= \"Nine\" ? x :\
    \ \"\", arr) \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns the sum of the integers in the vector.\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt7k71oii.jl:26\nin expression starting at\
    \ /tmp/tmpt7k71oii.jl:26\n"
  stdout: ''
  timestamp: 1659749560
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0\n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n\
    \    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\"..\"Nine\"[x],\
    \ arr)\n    \n    return arr\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp9g7_jsf4.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmp9g7_jsf4.jl:34\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  BoundsError: attempt\
    \ to access 4-codeunit String at index [8]\n  Stacktrace:\n    [1] checkbounds\n\
    \      @ ./strings/basic.jl:216 [inlined]\n    [2] codeunit\n      @ ./strings/string.jl:102\
    \ [inlined]\n    [3] getindex\n      @ ./strings/string.jl:223 [inlined]\n   \
    \ [4] (::var\"#1#2\")(x::Int64)\n      @ Main /tmp/tmp9g7_jsf4.jl:25\n    [5]\
    \ iterate\n      @ ./generator.jl:47 [inlined]\n    [6] _collect(c::Vector{Int64},\
    \ itr::Base.Generator{Vector{Int64}, var\"#1#2\"}, #unused#::Base.EltypeUnknown,\
    \ isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n    [7] collect_similar\n\
    \      @ ./array.jl:653 [inlined]\n    [8] map\n      @ ./abstractarray.jl:2867\
    \ [inlined]\n    [9] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmp9g7_jsf4.jl:25\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [11] macro expansion\n      @ /tmp/tmp9g7_jsf4.jl:34 [inlined]\n\
    \   [12] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [13] top-level scope\n      @ /tmp/tmp9g7_jsf4.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp9g7_jsf4.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  BoundsError: attempt to access 4-codeunit\
    \ String at index [55]\n  Stacktrace:\n    [1] checkbounds\n      @ ./strings/basic.jl:216\
    \ [inlined]\n    [2] codeunit\n      @ ./strings/string.jl:102 [inlined]\n   \
    \ [3] getindex\n      @ ./strings/string.jl:223 [inlined]\n    [4] (::var\"#1#2\"\
    )(x::Int64)\n      @ Main /tmp/tmp9g7_jsf4.jl:25\n    [5] iterate\n      @ ./generator.jl:47\
    \ [inlined]\n    [6] _collect(c::Vector{Int64}, itr::Base.Generator{Vector{Int64},\
    \ var\"#1#2\"}, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n      @\
    \ Base ./array.jl:744\n    [7] collect_similar\n      @ ./array.jl:653 [inlined]\n\
    \    [8] map\n      @ ./abstractarray.jl:2867 [inlined]\n  "
  timestamp: 1659749562
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    if length(arr)\
    \ == 0 \n        return Vector{String}() \n    else \n        arr = sort(arr)\
    \ \n        arr = reverse(arr) \n        arr = map(x -> \"One\" if x == 1 \n \
    \               else if x == 2 \n                    then \"Two\" \n         \
    \           else if x == 3 \n                        then \"Three\" \n       \
    \                 else if x == 4 \n                            then \"Four\" \n\
    \                            else if x == 5 \n                               \
    \ then \"Five\" \n                                else if x == 6 \n          \
    \                          then \"Six\" \n                                   \
    \ else if x == 7 \n                                        then \"Seven\" \n \
    \                                       else if x == 8 \n                    \
    \                        then \"Eight\" \n                                   \
    \         else \"Nine\", x) \n        return arr \n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns a vector\
    \ of strings that represent each of the numbers from 1 to 9 inclusive.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3xx_7dki.jl:23\nin expression starting at\
    \ /tmp/tmp3xx_7dki.jl:23\n"
  stdout: ''
  timestamp: 1659749560
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = arr\
    \ |> sort() |> reverse() |> map((x) -> \"One\", \"Two\", \"Three\", \"Four\",\
    \ \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")[x] \n    \n    if length(arr)\
    \ == 0\n        return Vector{String}()\n    end\n    \n    return arr\nend\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an array of integers and returns\
    \ the sum of the integers that are between 1 and 9 inclusive.\nusing Test\n\n\
    @testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwuoc08n0.jl:26\nin expression starting at\
    \ /tmp/tmpwuoc08n0.jl:26\n"
  stdout: ''
  timestamp: 1659749560
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return [] \n    else \n        arr = sort(arr) \n        arr\
    \ = reverse(arr) \n        arr = map(x -> \"One\" if x == 1 \n            else\
    \ \"Two\" if x == 2 \n            else \"Three\" if x == 3 \n            else\
    \ \"Four\" if x == 4 \n            else \"Five\" if x == 5 \n            else\
    \ \"Six\" if x == 6 \n            else \"Seven\" if x == 7 \n            else\
    \ \"Eight\" if x == 8 \n            else \"Nine\", arr) \n        return arr \n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of times a value appears in an array. For example:\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpixpuezb4.jl:22\nin expression starting at\
    \ /tmp/tmpixpuezb4.jl:22\n"
  stdout: ''
  timestamp: 1659749560
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if arr.length ==\
    \ 0\n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n   \
    \ \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\"[x], arr)\n    \n\
    \    arr = map(x -> \"Two\"[x], arr)\n    \n    arr = map(x -> \"Three\"[x], arr)\n\
    \    \n    arr = map(x -> \"Four\"[x], arr)\n    \n    arr = map(x -> \"Five\"\
    [x], arr)\n    \n    arr = map(x -> \"Six\"[x], arr)\n    \n    arr = map(x ->\
    \ \"Seven\"[x], arr)\n    \n    arr = map(x -> \"Eight\"[x], arr)\n    \n    arr\
    \ = map(x -> \"Nine\"[x], arr)\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings that represent\
    \ each of the numbers from 1 to 9 inclusive.\nusing Test\n\n@testset begin\n\n\
    candidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiwcedt76.jl:45\nin expression starting at\
    \ /tmp/tmpiwcedt76.jl:45\n"
  stdout: ''
  timestamp: 1659749560
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return Vector{String}() \n    else \n        arr = sort(arr)\
    \ \n        arr = reverse(arr) \n        arr = map(x -> \"One\"[x], arr) \n  \
    \      arr = map(x -> \"Two\"[x], arr) \n        arr = map(x -> \"Three\"[x],\
    \ arr) \n        arr = map(x -> \"Four\"[x], arr) \n        arr = map(x -> \"\
    Five\"[x], arr) \n        arr = map(x -> \"Six\"[x], arr) \n        arr = map(x\
    \ -> \"Seven\"[x], arr) \n        arr = map(x -> \"Eight\"[x], arr) \n       \
    \ arr = map(x -> \"Nine\"[x], arr) \n        arr \n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes an array of integers and returns the array\
    \ in reverse order.\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t\
    @test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg_l18xax.jl:34\nin expression starting at\
    \ /tmp/tmpg_l18xax.jl:34\n"
  stdout: ''
  timestamp: 1659749560
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = arr\
    \ |> sort() |> reverse() |> map(x->\"One\"..\"Nine\"[x]) |> Vector{String}\n \
    \   \n    if isempty(arr)\n        return Vector{String}()\n    end\n    \n  \
    \  return arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function that takes an array\
    \ of integers and returns the array sorted in descending order.\nusing Test\n\n\
    @testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_5r_9kx2.jl:26\nin expression starting at\
    \ /tmp/tmp_5r_9kx2.jl:26\n"
  stdout: ''
  timestamp: 1659749560
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if arr.length ==\
    \ 0 \n        return Vector{String}() \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = map(x -> \"One\" <= x && x <= \"Nine\"\
    \ ? x : \"\", arr) \n        return arr \n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of integers and returns a vector of\
    \ strings that represent each of the numbers in the vector in descending order.\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp89snbl00.jl:26\nin expression starting at\
    \ /tmp/tmp89snbl00.jl:26\n"
  stdout: ''
  timestamp: 1659749560
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return [] \n    else \n        arr = sort(arr) \n        arr\
    \ = reverse(arr) \n        arr = map(x -> \"One\"[x], arr) \n        arr = map(x\
    \ -> \"Two\"[x], arr) \n        arr = map(x -> \"Three\"[x], arr) \n        arr\
    \ = map(x -> \"Four\"[x], arr) \n        arr = map(x -> \"Five\"[x], arr) \n \
    \       arr = map(x -> \"Six\"[x], arr) \n        arr = map(x -> \"Seven\"[x],\
    \ arr) \n        arr = map(x -> \"Eight\"[x], arr) \n        arr = map(x -> \"\
    Nine\"[x], arr) \n        return arr \n    end\nend\n</code>\n<|/ a tags=julia,sorting,arrays\
    \ |>\n<| a tags=julia,sorting,arrays |>\nI like your solution, however I wanted\
    \ to add another solution that is more compact and probably faster.\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplqw2i22e.jl:34\nin expression starting at\
    \ /tmp/tmplqw2i22e.jl:34\n"
  stdout: ''
  timestamp: 1659749560
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if arr.length ==\
    \ 0 \n        return [] \n    else \n        arr = sort(arr) \n        arr = reverse(arr)\
    \ \n        arr = replace(arr) \n        return arr \n    end\nend\n</cell>\n\
    <code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns a vector\
    \ of strings that represent each of the numbers from 1 to 9 inclusive.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz2__3gyx.jl:26\nin expression starting at\
    \ /tmp/tmpz2__3gyx.jl:26\n"
  stdout: ''
  timestamp: 1659749560
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = arr\
    \ |> sort() |> reverse() |> map(x->\"One\"..\"Nine\"[x]) |> Vector{String}\n \
    \   \n    if length(arr) == 0 \n        return Vector{String}()\n    end\n   \
    \ \n    return arr\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of integers and returns a vector of strings that represent each of\
    \ the numbers in the vector in descending order. For example, if the vector is\
    \ [5, 3, 8, 2, 1] then the function should return [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\nusing Test\n\n\
    @testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe1nbj419.jl:26\nin expression starting at\
    \ /tmp/tmpe1nbj419.jl:26\n"
  stdout: ''
  timestamp: 1659749560
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if arr.length ==\
    \ 0\n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n   \
    \ \n    arr2 = reverse(arr)\n    \n    arr3 = Vector{String}()\n    for i in arr2\n\
    \        if i <= 9\n            arr3 += [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][i]\n        else\n      \
    \      arr3 += [\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"\
    Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"][i]\n      \
    \  end\n    end\n    \n    return arr3\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns the number of vowels in that string.\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdn8dstst.jl:36\nin expression starting at\
    \ /tmp/tmpdn8dstst.jl:36\n"
  stdout: ''
  timestamp: 1659749560
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if arr.length ==\
    \ 0 \n        return Vector{String}() \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = replace(arr) \n        return arr\
    \ \n    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of times a given element appears in an array. For example, for the array [1,\
    \ 1, 1, 2, 2, 3], the function should return 3 because there are 3 1's in the\
    \ array.\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph23y65pn.jl:26\nin expression starting at\
    \ /tmp/tmph23y65pn.jl:26\n"
  stdout: ''
  timestamp: 1659749560
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr2 = copy(arr)\n\
    \    arr2[arr2 < 1] = []\n    arr2[arr2 > 9] = []\n    \n    arr3 = copy(arr)\n\
    \    arr3[arr3 < 1] = []\n    arr3[arr3 > 9] = []\n    \n    arr4 = copy(arr)\n\
    \    arr4[arr4 < 1] = []\n    arr4[arr4 > 9] = []\n    \n    arr5 = copy(arr)\n\
    \    arr5[arr5 < 1] = []\n    arr5[arr5 > 9] = []\n    \n    arr6 = copy(arr)\n\
    \    arr6[arr6 < 1] = []\n    arr6[arr6 > 9] = []\n    \n    arr7 = copy(arr)\n\
    \    arr7[arr7 < 1] = []\n    arr7[arr7 > 9] = []\n    \n    arr8 = copy(arr)\n\
    \    arr8[arr8 < 1] = []\n    arr8[arr8 > 9] = []\n    \n    arr9 = copy(arr)\n\
    \    arr9[arr9 < 1] = []\n    arr9[arr9 > 9] = []\n    \n    arr10 = copy(arr)\n\
    \    arr10[arr10 < 1] = []\n    arr10[arr10 > 9] = []\n    \n    arr11 = copy(arr)\n\
    \    arr11[arr11 < 1] = []\n    arr11[arr11 > 9] = []\n    \n    arr12 = copy(arr)\n\
    \    arr12[arr12 < 1] = []\n    arr12[arr12 > 9] = []\n    \n    arr13 = copy(arr)\n\
    \    arr13[arr13 < 1] = []\n    arr13[arr13 > 9] = []\n    \n    arr14 = copy(arr)\n\
    \    arr14[arr14 < 1] = []\n    arr14[arr14 > 9] = []\n    \n    arr15 = copy(arr)\n\
    \    arr15[arr15 < 1] = []\n    arr15[arr15 > 9] = []\n    \n    arr16 = copy(arr)\n\
    \    arr16[arr16 < 1] = []\n    arr16[arr16 > 9] = []\n    \n    arr17 = copy(arr)\n\
    \    arr17[arr17 < 1] = []\n    arr17[arr17 > 9] = []\n    \n    arr18 = copy(arr)\n\
    \    arr18[arr18 < 1] = []\n    arr18[arr18 > 9] = []\n    \n    arr19 = copy(arr)\n\
    \    arr19[arr19 < 1] = []\n    arr19[arr19 > 9] = []\n    \n    arr20\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpiyj3yhum.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpiyj3yhum.jl:1\n\
    in expression starting at /tmp/tmpiyj3yhum.jl:1\n"
  stdout: ''
  timestamp: 1659749561
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if arr.length ==\
    \ 0 \n        return Vector{String}() \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = map(x -> \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", x)\n        return\
    \ arr\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of integers and returns the sum of the integers in the vector. \nFor\
    \ example, \n>>> by_length(Vector{Int64}([2, 1, 1, 4, 5, 8, 2, 3])) \n[6, 10,\
    \ 10, 10, 10, 10, 10, 10]\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpem5li9n1.jl:26\nin expression starting at\
    \ /tmp/tmpem5li9n1.jl:26\n"
  stdout: ''
  timestamp: 1659749561
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return Vector{String}()\n    else \n        arr = sort(arr)\n\
    \        arr = reverse(arr)\n        arr = map(x -> \"One\" <= x && x <= \"Nine\"\
    \ ? x : \"\", arr)\n        return arr\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes an array of integers and returns the number of integers that are\
    \ between 1 and 9 inclusive.\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb9j6ncjf.jl:26\nin expression starting at\
    \ /tmp/tmpb9j6ncjf.jl:26\n"
  stdout: ''
  timestamp: 1659749561
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if arr.length ==\
    \ 0\n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n   \
    \ \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" <= x && x <= \"Nine\"\
    \ ? x : error(\"Invalid input\"), arr)\n    \n    return arr\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpkdesbzt5.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmpkdesbzt5.jl:34\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  type Array has no field\
    \ length\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpkdesbzt5.jl:17\n   [3]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpkdesbzt5.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpkdesbzt5.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpkdesbzt5.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  type Array has no field\
    \ length\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpkdesbzt5.jl:17\n   [3]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpkdesbzt5.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpkdesbzt5.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpkdesbzt5.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  type Array has no field length\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpkdesbzt5.jl:17\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpkdesbzt5.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpkdesbzt5.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpkdesbzt5.jl:37\n "
  timestamp: 1659749563
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" if x == 1 \n \
    \       else \"Two\" if x == 2\n        else \"Three\" if x == 3\n        else\
    \ \"Four\" if x == 4\n        else \"Five\" if x == 5\n        else \"Six\" if\
    \ x == 6\n        else \"Seven\" if x == 7\n        else \"Eight\" if x == 8\n\
    \        else \"Nine\", arr)\n    \n    return arr\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnjuu6ur7.jl:22\nin expression starting at\
    \ /tmp/tmpnjuu6ur7.jl:22\n"
  stdout: ''
  timestamp: 1659749561
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if arr.length ==\
    \ 0\n        return Vector{String}()\n    \n    arr = sort(arr)\n    \n    arr\
    \ = reverse(arr)\n    \n    arr = map(x -> \"One\"..\"Nine\"[x], arr)\n    \n\
    \    return arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpanfl11r8.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpanfl11r8.jl:1\n\
    in expression starting at /tmp/tmpanfl11r8.jl:1\n"
  stdout: ''
  timestamp: 1659749561
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return Vector{String}() \n    else \n        arr = sort(arr)\
    \ \n        arr = reverse(arr) \n        arr = map(x -> \"One\" if x == 1 \n \
    \                   else \"Two\" if x == 2 \n                    else \"Three\"\
    \ if x == 3 \n                    else \"Four\" if x == 4 \n                 \
    \   else \"Five\" if x == 5 \n                    else \"Six\" if x == 6 \n  \
    \                  else \"Seven\" if x == 7 \n                    else \"Eight\"\
    \ if x == 8 \n                    else \"Nine\", arr) \n        return arr \n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns a vector of strings that represent each of the numbers\
    \ in that vector in descending order.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp76imaz5t.jl:22\nin expression starting at\
    \ /tmp/tmp76imaz5t.jl:22\n"
  stdout: ''
  timestamp: 1659749561
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0\n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n\
    \    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" <= x && x <= \"\
    Nine\" ? x : \"\", arr)\n    \n    return arr\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers and returns a vector of\
    \ strings that represent each number between 1 and 9 inclusive, with the number\
    \ represented as a string in \"One\", \"Two\", \"Three\", \"Four\", \"Five\",\
    \ \"Six\", \"Seven\", \"Eight\", \"Nine\".\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp34_0ncex.jl:29\nin expression starting at\
    \ /tmp/tmp34_0ncex.jl:29\n"
  stdout: ''
  timestamp: 1659749561
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if arr.length ==\
    \ 0 \n        return [] \n    else \n        arr = arr |> sort() \n        arr\
    \ = reverse(arr) \n        arr = arr |> map((&string(\"One\") + &string(\"Two\"\
    ) + &string(\"Three\") + &string(\"Four\") + &string(\"Five\") + &string(\"Six\"\
    ) + &string(\"Seven\") + &string(\"Eight\") + &string(\"Nine\"))) \n        arr\
    \ \n    end\nend\n</code>\n<|/ a tags=julia |>\n<| a dscore=2 |>\nI wrote a package\
    \ called \"Numbers\" that does this for you:\n<code>\nusing Numbers\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid syntax &(string(\"One\")) around /tmp/tmpbcxr2jzx.jl:22\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpbcxr2jzx.jl:1\nin expression starting\
    \ at /tmp/tmpbcxr2jzx.jl:1\n"
  stdout: ''
  timestamp: 1659749561
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    if length(arr)\
    \ == 0 \n        return Vector{String}()\n    end\n    \n    arr1 = sort(arr)\n\
    \    \n    arr2 = reverse(arr1)\n    \n    arr3 = arr2 .- arr1\n    \n    arr4\
    \ = arr3 .- arr2\n    \n    arr5 = arr4 .- arr3\n    \n    arr6 = arr5 .- arr4\n\
    \    \n    arr7 = arr6 .- arr5\n    \n    arr8 = arr7 .- arr6\n    \n    arr9\
    \ = arr8 .- arr7\n    \n    arr10 = arr9 .- arr8\n    \n    arr11 = arr10 .- arr9\n\
    \    \n    arr12 = arr11 .- arr10\n    \n    arr13 = arr12 .- arr11\n    \n  \
    \  arr14 = arr13 .- arr12\n    \n    arr15 = arr14 .- arr13\n    \n    arr16 =\
    \ arr15 .- arr14\n    \n    arr17 = arr16 .- arr15\n    \n    arr18 = arr17 .-\
    \ arr16\n    \n    arr19 = arr18 .- arr17\n    \n    arr20 = arr19 .- arr18\n\
    \    \n    arr21 = arr20 .- arr19\n    \n    arr22 = arr21 .- arr20\n    \n  \
    \  arr23 = arr22 .- arr21\n    \n    arr24 = arr23 .- arr22\n    \n    arr25 =\
    \ arr24 .- arr23\n    \n    arr26 = arr25 .- arr24\n    \n    arr27 = arr26 .-\
    \ arr25\n    \n    arr28 = arr27 .- arr26\n    \n    arr29 = arr28 .- arr27\n\
    \    \n    arr30 = arr29 .- arr28\n    \n    arr31 = arr30 .- arr29\n    \n  \
    \  arr32 = arr31 .- arr30\n    \n    arr33 = arr32 .- arr31\n    \n    arr34 =\
    \ arr33 .- arr32\n    \n    arr35 = arr34 .- arr33\n    \n    arr36 = arr35 .-\
    \ arr34\n    \n    arr37 = arr36 .- arr35\n    \n    arr38 = arr37 .- arr36\n\
    \    \n    arr39 = arr38 .- arr37\n    \n    arr40 = arr\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpx_ohdsdf.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpx_ohdsdf.jl:1\n\
    in expression starting at /tmp/tmpx_ohdsdf.jl:1\n"
  stdout: ''
  timestamp: 1659749561
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return Vector{String}() \n    else \n        arr = sort(arr)\
    \ \n        arr = reverse(arr) \n        arr = replace(arr, (x -> \"One\"..\"\
    Nine\")[arr], 1:9) \n        arr = replace(arr, (x -> \"Two\"..\"Nine\")[arr],\
    \ 2:9) \n        arr = replace(arr, (x -> \"Three\"..\"Nine\")[arr], 3:9) \n \
    \       arr = replace(arr, (x -> \"Four\"..\"Nine\")[arr], 4:9) \n        arr\
    \ = replace(arr, (x -> \"Five\"..\"Nine\")[arr], 5:9) \n        arr = replace(arr,\
    \ (x -> \"Six\"..\"Nine\")[arr], 6:9) \n        arr = replace(arr, (x -> \"Seven\"\
    ..\"Nine\")[arr], 7:9) \n        arr = replace(arr, (x -> \"Eight\"..\"Nine\"\
    )[arr], 8:9) \n        arr = replace(arr, (x -> \"Nine\"..\"Nine\")[arr], 9:9)\
    \ \n        return arr \n    end\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw23jonre.jl:34\nin expression starting at\
    \ /tmp/tmpw23jonre.jl:34\n"
  stdout: ''
  timestamp: 1659749561
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    \n    if arr.length == 0 \n        return [] \n    \n    arr = reverse(arr)\n\
    \    \n    arr = map(x -> \"One\"..\"Nine\"[x], arr)\n    \n    return arr\nend\n\
    </cell>\n<code language=julia-1.5>\nby_length([])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp99s35f2_.jl:29\nin expression starting at\
    \ /tmp/tmp99s35f2_.jl:29\n"
  stdout: ''
  timestamp: 1659749561
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    if arr.length\
    \ == 0 \n        return Vector{String}() \n    \n    if arr.length == 1 \n   \
    \     return [\"One\"]\n    \n    if arr.length == 2 \n        return [\"Two\"\
    ]\n    \n    if arr.length == 3 \n        return [\"Three\"]\n    \n    if arr.length\
    \ == 4 \n        return [\"Four\"]\n    \n    if arr.length == 5 \n        return\
    \ [\"Five\"]\n    \n    if arr.length == 6 \n        return [\"Six\"]\n    \n\
    \    if arr.length == 7 \n        return [\"Seven\"]\n    \n    if arr.length\
    \ == 8 \n        return [\"Eight\"]\n    \n    if arr.length == 9 \n        return\
    \ [\"Nine\"]\n    \n    if arr.length == 10 \n        return [\"Ten\"]\n    \n\
    \    if arr.length == 11 \n        return [\"Eleven\"]\n    \n    if arr.length\
    \ == 12 \n        return [\"Twelve\"]\n    \n    if arr.length == 13 \n      \
    \  return [\"Thirteen\"]\n    \n    if arr.length == 14 \n        return [\"Fourteen\"\
    ]\n    \n    if arr.length == 15 \n        return [\"Fifteen\"]\n    \n    if\
    \ arr.length == 16 \n        return [\"Sixteen\"]\n    \n    if arr.length ==\
    \ 17 \n        return [\"Seventeen\"]\n    \n    if arr.length == 18 \n      \
    \  return [\"Eighteen\"]\n    \n    if arr.length == 19 \n        return [\"Nineteen\"\
    ]\n    \n    if arr.length == 20 \n        return [\"Twenty\"]\n    \n    if arr.length\
    \ == 21 \n        return [\"Twenty-one\"]\n    \n    if arr.length == 22 \n  \
    \      return [\"Twenty-two\"]\n    \n    if arr.length == 23 \n        return\
    \ [\"Twenty-three\"]\n    \n    if arr.length == 24 \n        return [\"Twenty-four\"\
    ]\n    \n    if arr.length == 25 \n        return [\"Twenty-five\"]\n    \n  \
    \  if arr.length == 26 \n        return [\"Twenty-six\"]\n    \n    if arr.length\
    \ == 27 \n        return [\"Twenty-seven\"]\n    \n    if arr.length == 28 \n\
    \        return [\"Twenty-eight\"]\n    \n    if arr.length == 29 \n        return\
    \ [\"Twenty-nine\"]\n    \n    if arr.length == 30 \n        return [\"Thirty\"\
    ]\n    \n    if arr.length == 31 \n        return [\"Thirty-one\"]\n    \n   \
    \ if arr.length == 32 \n        return [\"Thirty-two\"]\n    \n    if arr.length\
    \ == 33 \n        return [\"Thirty-three\"]\n    \n    if arr.length == 34 \n\
    \        return [\"Thirty-\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvt8mgy38.jl:127\nin expression starting at\
    \ /tmp/tmpvt8mgy38.jl:127\n"
  stdout: ''
  timestamp: 1659749562
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return Vector{String}() \n    else \n        arr = sort(arr)\
    \ \n        arr = reverse(arr) \n        arr = map(x->replace(x, \"One\", \"Eight\"\
    ), arr) \n        arr = map(x->replace(x, \"Two\", \"Nine\"), arr) \n        arr\
    \ = map(x->replace(x, \"Three\", \"Seven\"), arr) \n        arr = map(x->replace(x,\
    \ \"Four\", \"Six\"), arr) \n        arr = map(x->replace(x, \"Five\", \"Five\"\
    ), arr) \n        arr = map(x->replace(x, \"Six\", \"Six\"), arr) \n        arr\
    \ = map(x->replace(x, \"Seven\", \"Seven\"), arr) \n        arr = map(x->replace(x,\
    \ \"Eight\", \"Eight\"), arr) \n        arr = map(x->replace(x, \"Nine\", \"Nine\"\
    ), arr) \n        return arr \n    end\nend\n</code>\n<|/ a tags=julia |>\n<|\
    \ a dscore=1 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplfgmbtdl.jl:34\nin expression starting at\
    \ /tmp/tmplfgmbtdl.jl:34\n"
  stdout: ''
  timestamp: 1659749561
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    if length(arr)\
    \ == 0\n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n\
    \    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\"..\"Nine\"[x],\
    \ arr)\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of integers and returns the sum of the integers in the vector. \nFor\
    \ example, \n    sum([1, 2, 3, 4]) = 1 + 2 + 3 + 4 = 10\nWrite a function that\
    \ takes a vector of integers and returns the product of the integers in the vector.\
    \ \nFor example, \n    product([1, 2, 3, 4]) = 1 * 2 * 3 * 4 = 24\nWrite a function\
    \ that takes a vector of integers and returns the average of the integers in the\
    \ vector. \nFor example, \n    average([1, 2, 3, 4]) = (1 + 2 + 3 + 4) / 4 = 2.5\n\
    Write a function that takes a vector of integers and returns the median of the\
    \ integers in the vector. \nFor example, \n    median([1, 2, 3, 4]) = (1 + 2 +\
    \ 3 + 4) / 2 = 2.5\nWrite a function that takes a vector of integers and returns\
    \ the mode of the integers in the vector. \nFor example, \n    mode([1, 2, 3,\
    \ 4]) = (1 + 2 + 3 + 4) / 4 = 2\nWrite a function that takes a vector of integers\
    \ and returns the variance of the integers in the vector. \nFor example, \n  \
    \  variance([1, 2, 3, 4]) = (1 + 2 + 3 + 4) / 4 = (1 + 2) / 2 = 1.5\nWrite a function\
    \ that takes a vector of integers and returns the standard deviation of the integers\
    \ in the vector. \nFor example, \n    standard_deviation([1, 2, 3, 4]) = (1 +\
    \ 2 + 3 + 4) / 4 = (1 + 2) / 2 = 1.5\nWrite a function that takes a vector of\
    \ integers and returns the minimum of the integers in the vector. \nFor example,\
    \ \n    minimum([1, 2, 3, 4]) = 1\nWrite a function that takes a vector of integers\
    \ and returns the maximum of the integers in the vector. \nFor example, \n   \
    \ maximum([1, 2, 3, 4]) = 4\nWrite a function that takes a vector of integers\
    \ and returns the number of integers in the vector that are less than the integer\
    \ in the argument. \nFor example, \n    count_less_than([1, 2, 3, 4], 3) = 2\n\
    Write a function that takes a vector of integers and returns the number of integers\
    \ in the vector that are less than or equal to the integer in the argument. \n\
    For example, \n    count_less_than_or_equal([1, 2, 3, 4], 3) = 2\nWrite a function\
    \ that takes a vector of integers and returns the number of integers in the vector\
    \ that are greater than the integer in the argument. \nFor example, \n    count_greater_than([1,\
    \ 2, 3, 4], 3) = 1\nWrite a function that takes a vector of integers and returns\
    \ the number of integers in the vector that are greater than or equal to the integer\
    \ in the argument. \nFor example, \n    count_greater_than_or_equal([1, 2, 3,\
    \ 4], 3) = 1\nWrite a function that takes a vector of integers and returns the\
    \ number of integers in the vector that are evenly \nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplnwnymdq.jl:30\nin expression starting at\
    \ /tmp/tmplnwnymdq.jl:30\n"
  stdout: ''
  timestamp: 1659749562
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    if length(arr)\
    \ == 0 \n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n\
    \    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" <= x && x <= \"\
    Nine\" ? x : error(\"Invalid input\"), arr)\n    \n    return arr\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of integers and returns\
    \ the sum of the integers in the vector.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqyhpgwo8.jl:30\nin expression starting at\
    \ /tmp/tmpqyhpgwo8.jl:30\n"
  stdout: ''
  timestamp: 1659749562
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if arr.length ==\
    \ 0 \n        return [] \n    else \n        arr = sort(arr) \n        arr = reverse(arr)\
    \ \n        arr = arr |> Vector{String}() \n        arr |> map(x->\"One\"..\"\
    Nine\"[x-1]) \n    end\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=sorting,arrays,julia\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq7no1s_m.jl:26\nin expression starting at\
    \ /tmp/tmpq7no1s_m.jl:26\n"
  stdout: ''
  timestamp: 1659749561
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0\n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n\
    \    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" <= x && x <= \"\
    Nine\" ? x : error(\"Invalid number\"), arr)\n    \n    return arr\nend\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([1, -1 , 55])\n</cell>\n<text>\nExercise 3\n\
    Write a function called by_length that takes an array of integers and returns\
    \ a new array that contains the same integers but in reverse order. For example,\
    \ if the input array is [2, 1, 4, 3, 8, 5, 6, 7], the output should be [7, 6,\
    \ 8, 5, 4, 3, 2, 1].\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbto_5dah.jl:29\nin expression starting at\
    \ /tmp/tmpbto_5dah.jl:29\n"
  stdout: ''
  timestamp: 1659749561
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return [] \n    else \n        arr = sort(arr) \n        arr\
    \ = reverse(arr) \n        arr = map(x -> \"One\"[x], arr) \n        return arr\
    \ \n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns the sum of the integers squared. \nFor example, \n>>>\
    \ by_length([])\n[]\n>>> by_length([1,2,3])\n[4, 9, 16]\n>>> by_length([-1,2,-3,4])\n\
    [4, 9, 16]\n>>> by_length([-3,-4,-5,-6,-7,-8,-9,-10])\n[4, 9, 16]\n>>> by_length([-3,-4,-5,-6,-7,-8,-9,-10])\n\
    [4, 9, 16]\n>>> by_length([-3,-4,-5,-6,-7,-8,-9,-10])\n[4, 9, 16]\n>>> by_length([-3,-4,-5,-6,-7,-8,-9,-10])\n\
    [4, 9, 16]\n>>> by_length([-3,-4,-5,-6,-7,-8,-9,-10])\n[4, 9, 16]\n>>> by_length([-3,-4,-5,-6,-7,-8,-9,-10])\n\
    [4, 9, 16]\n>>> by_length([-3,-4,-5,-6,-7,-8,-9,-10])\n[4, 9, 16]\n>>> by_length([-3,-4,-5,-6,-7,-8,-9,-10])\n\
    [4, 9, 16]\n>>> by_length([-3,-4,-5,-6,-7,-8,-9,-10])\n[4, 9, 16]\n>>> by_length([-3,-4,-5,-6,-7,-8,-9,-10])\n\
    [4, 9, 16]\n>>> by_length([-3,-4,-5,-6,-7,-8,-9,-10])\n[4, 9, 16]\n>>> by_length([-3,-4,-5,-6,-7,-8,-9,-10])\n\
    [4, 9, 16]\n>>> by_length([-3,-4,-5,-6,-7,-8,-9,-10])\n[4, 9, 16]\n>>> by_length([-3,-4,-5,-6,-7,-8,-9,-10])\n\
    [4, 9, 16]\n>>> by_length([-3,-4,-5,-6,-7,-8,-9,-10])\n[4, 9, 16]\n>>> by_length([-3,-4,-5,-6,-\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfyz9l1ox.jl:26\nin expression starting at\
    \ /tmp/tmpfyz9l1ox.jl:26\n"
  stdout: ''
  timestamp: 1659749562
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = map(x -> \"One\"..\"Nine\"[x], arr)\n    return\
    \ arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns the sum of the integers in the vector. \nFor example, \n    sum([1,\
    \ 2, 3])\nshould return 6. \n    \n    Write a function that takes a vector of\
    \ integers and returns the product of the integers in the vector. \nFor example,\
    \ \n    product([1, 2, 3])\nshould return 6. \n    \n    Write a function that\
    \ takes a vector of integers and returns the average of the integers in the vector.\
    \ \nFor example, \n    average([1, 2, 3])\nshould return 3. \n    \n    Write\
    \ a function that takes a vector of integers and returns the median of the integers\
    \ in the vector. \nFor example, \n    median([1, 2, 3])\nshould return 1.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf289lbds.jl:22\nin expression starting at\
    \ /tmp/tmpf289lbds.jl:22\n"
  stdout: ''
  timestamp: 1659749562
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    \n    if length(arr) == 0\n        return Vector{String}()\n    end\n   \
    \ \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\"[x], arr)\n    \n\
    \    arr = map(x -> \"Two\"[x], arr)\n    \n    arr = map(x -> \"Three\"[x], arr)\n\
    \    \n    arr = map(x -> \"Four\"[x], arr)\n    \n    arr = map(x -> \"Five\"\
    [x], arr)\n    \n    arr = map(x -> \"Six\"[x], arr)\n    \n    arr = map(x ->\
    \ \"Seven\"[x], arr)\n    \n    arr = map(x -> \"Eight\"[x], arr)\n    \n    arr\
    \ = map(x -> \"Nine\"[x], arr)\n    \n    return arr\nend\n</cell>\n<code language=julia-1.4>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes an array of integers and returns the number of integers that are\
    \ less than or equal to 10. For example:\n>>> count_less_than_ten([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n3\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t\
    @test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp37zz8lgf.jl:46\nin expression starting at\
    \ /tmp/tmp37zz8lgf.jl:46\n"
  stdout: ''
  timestamp: 1659749562
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    if length(arr)\
    \ == 0 \n        return Vector{String}() \n    \n    arr = sort(arr)\n    \n \
    \   arr = reverse(arr)\n    \n    arr = map((x) -> name(x), arr)\n    \n    return\
    \ arr\nend\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.0>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8gzcm3xu.jl:29\nin expression starting at\
    \ /tmp/tmp8gzcm3xu.jl:29\n"
  stdout: ''
  timestamp: 1659749563
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if arr.length ==\
    \ 0 \n        return Vector{String}() \n    else \n        arr = arr |> sort()\
    \ |> reverse() \n        arr = arr |> map(x->\"One\"..\"Nine\"[x-1]) \n      \
    \  return arr \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of integers and returns the sum of the integers in the vector.\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcwol_2sh.jl:25\nin expression starting at\
    \ /tmp/tmpcwol_2sh.jl:25\n"
  stdout: ''
  timestamp: 1659749562
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return Vector{String}() \n    else \n        arr = sort(arr)\
    \ \n        arr = reverse(arr) \n        arr = map(x -> \"One\"[x], arr) \n  \
    \      arr = map(x -> \"Two\"[x], arr) \n        arr = map(x -> \"Three\"[x],\
    \ arr) \n        arr = map(x -> \"Four\"[x], arr) \n        arr = map(x -> \"\
    Five\"[x], arr) \n        arr = map(x -> \"Six\"[x], arr) \n        arr = map(x\
    \ -> \"Seven\"[x], arr) \n        arr = map(x -> \"Eight\"[x], arr) \n       \
    \ arr = map(x -> \"Nine\"[x], arr) \n        arr \n    end\nend\n</cell>\n<code\
    \ language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that takes a vector of integers and returns the sum\
    \ of the integers squared. \nFor example, \n>>> by_sum(Vector{Int64}([4, 9, 16,\
    \ 25])) \n[16, 49, 256]\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqx_dajm2.jl:34\nin expression starting at\
    \ /tmp/tmpqx_dajm2.jl:34\n"
  stdout: ''
  timestamp: 1659749563
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    if length(arr)\
    \ == 0 \n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n\
    \    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" <= x && x <= \"\
    Nine\" ? x : \"\", arr)\n    \n    return arr\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of integers and returns a vector of\
    \ strings that represent each of the numbers in the vector in descending order.\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1q67nrg5.jl:30\nin expression starting at\
    \ /tmp/tmp1q67nrg5.jl:30\n"
  stdout: ''
  timestamp: 1659749563
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if arr.length ==\
    \ 0 \n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n  \
    \  \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" <= x && x <= \"\
    Nine\" ? x : \"\", arr)\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes an array of integers and returns the array sorted in reverse order\
    \ and with each element replaced by its corresponding name from \"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy08npyrf.jl:29\nin expression starting at\
    \ /tmp/tmpy08npyrf.jl:29\n"
  stdout: ''
  timestamp: 1659749563
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = arr\
    \ |> sort() |> reverse() |> collect{|x| \n        if x >= 1 && x <= 9\n      \
    \      to_string(x + 1)\n        else\n            \"\"\n        end\n    }\n\
    \    \n    if length(arr) == 0\n        []\n    else\n        arr\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes an array of integers and returns\
    \ the array in reverse order but with the integers replaced by their corresponding\
    \ names from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwsj5snj2.jl:18\nin expression starting at\
    \ /tmp/tmpwsj5snj2.jl:18\n"
  stdout: ''
  timestamp: 1659749563
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return [] \n    else \n        arr = sort(arr) \n        arr\
    \ = reverse(arr) \n        arr = map(x -> \"One\" <= x && x <= \"Nine\" ? x :\
    \ \"\", arr) \n        return arr \n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a vector of integers and returns a vector of strings\
    \ that represent each of the numbers between 1 and 9 inclusive.\nusing Test\n\n\
    @testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp04nb3itq.jl:26\nin expression starting at\
    \ /tmp/tmp04nb3itq.jl:26\n"
  stdout: ''
  timestamp: 1659749563
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return Vector{String}() \n    else \n        arr = sort(arr)\
    \ \n        arr = reverse(arr) \n        arr = map(x -> \"One\" <= x && x <= \"\
    Nine\" ? x : \"\", reshape(arr, length(arr)))\n        return arr\n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes an array of integers\
    \ and returns the array in reverse sorted order.\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppovwuca9.jl:26\nin expression starting at\
    \ /tmp/tmppovwuca9.jl:26\n"
  stdout: ''
  timestamp: 1659749563
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return Vector{String}() \n    else \n        arr = sort(arr)\
    \ \n        arr = reverse(arr) \n        arr = map(x -> \"One\" <= x && x <= \"\
    Nine\" ? x : \"\", arr) \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([])\n</cell>\n<code language=julia-1.5>\nby_length([1])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptq3ym4q6.jl:26\nin expression starting at\
    \ /tmp/tmptq3ym4q6.jl:26\n"
  stdout: ''
  timestamp: 1659749563
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = arr\
    \ |> sort() |> reverse() |> map(x->\"One\"..\"Nine\"[x]) |> Vector{String}\n \
    \   \n    if isempty(arr)\n        return Vector{String}()\n    end\n    \n  \
    \  return arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t\
    @test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpkhfvs0so.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmpkhfvs0so.jl:31\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching sort()\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpkhfvs0so.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkhfvs0so.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkhfvs0so.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpkhfvs0so.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: no method\
    \ matching sort()\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpkhfvs0so.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkhfvs0so.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n   "
  timestamp: 1659749565
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return Vector{String}() \n    else \n        arr = sort(arr)\
    \ \n        arr = reverse(arr) \n        arr = replace(arr, \"1\", \"One\") \n\
    \        arr = replace(arr, \"2\", \"Two\") \n        arr = replace(arr, \"3\"\
    , \"Three\") \n        arr = replace(arr, \"4\", \"Four\") \n        arr = replace(arr,\
    \ \"5\", \"Five\") \n        arr = replace(arr, \"6\", \"Six\") \n        arr\
    \ = replace(arr, \"7\", \"Seven\") \n        arr = replace(arr, \"8\", \"Eight\"\
    ) \n        arr = replace(arr, \"9\", \"Nine\") \n        return arr \n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the same vector but with each element multiplied by 2.\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph4yppjv4.jl:34\nin expression starting at\
    \ /tmp/tmph4yppjv4.jl:34\n"
  stdout: ''
  timestamp: 1659749563
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" if x == 1 \n       \
    \ else \"Two\" if x == 2 \n        else \"Three\" if x == 3 \n        else \"\
    Four\" if x == 4 \n        else \"Five\" if x == 5 \n        else \"Six\" if x\
    \ == 6 \n        else \"Seven\" if x == 7 \n        else \"Eight\" if x == 8 \n\
    \        else \"Nine\", arr)\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes an array of integers and returns the array in reverse order but with\
    \ each number replaced by its corresponding name from \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\nusing Test\n\n\
    @testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaoz0k_io.jl:21\nin expression starting at\
    \ /tmp/tmpaoz0k_io.jl:21\n"
  stdout: ''
  timestamp: 1659749563
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return [] \n    else \n        arr = sort(arr) \n        arr\
    \ = reverse(arr) \n        arr = map(x -> \"One\" if x == 1 \n            else\
    \ if x == 2 \n                \"Two\" \n            else if x == 3 \n        \
    \        \"Three\" \n            else if x == 4 \n                \"Four\" \n\
    \            else if x == 5 \n                \"Five\" \n            else if x\
    \ == 6 \n                \"Six\" \n            else if x == 7 \n             \
    \   \"Seven\" \n            else if x == 8 \n                \"Eight\" \n    \
    \        else if x == 9 \n                \"Nine\" \n            else \n     \
    \           \"\" \n            , arr) \n        return arr \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes an array of integers and returns a new\
    \ array where each element in the new array is the sum of the integers in the\
    \ original array except for the first and last elements. For example, if the input\
    \ array is [1,2,3,4,5], the output should be [2,4,6,8,10].\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp63yb42ca.jl:22\nin expression starting at\
    \ /tmp/tmp63yb42ca.jl:22\n"
  stdout: ''
  timestamp: 1659749563
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if arr.length ==\
    \ 0 \n        return [] \n    else \n        arr = sort(arr) \n        arr = reverse(arr)\
    \ \n        arr = map(x -> \"One\"[x], arr) \n        return arr \n    end\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes an array of integers\
    \ and returns the number of integers that are less than or equal to 10.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe6t_m2nm.jl:26\nin expression starting at\
    \ /tmp/tmpe6t_m2nm.jl:26\n"
  stdout: ''
  timestamp: 1659749563
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return [] \n    else \n        arr = sort(arr) \n        arr\
    \ = reverse(arr) \n        arr = map(x -> \"One\"..\"Nine\"[x], arr) \n      \
    \  return arr \n    end\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,arrays,sorting\
    \ |>\nThe easiest way is to use sort!:\n<code>\njulia> sort!([2,1,4,5,8,2,3])\n\
    7-element Array{Int64,1}:\n 2\n 1\n 4\n 5\n 8\n 2\n 3\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=1 |>\nThe easiest way is to use sort!:\n<code>\njulia> sort!([2,1,4,5,8,2,3])\n\
    7-element Array{Int64,1}:\n 2\n 1\n 4\n 5\n 8\n 2\n 3\n</code>\n<|/ a tags=julia,arrays,sorting\
    \ |>\n<| a tags=julia,arrays,sorting |>\n<code>\njulia> function by_length(arr::Vector{Int64})::Vector{String}\n\
    \           if length(arr) == 0 \n               return [] \n           else \n\
    \               arr = sort(arr) \n               arr = reverse(arr) \n       \
    \        arr = map(x -> \"One\"..\"Nine\"[x], arr) \n               return arr\
    \ \n           end\n       end\nby_length (generic function with 1 method)\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp7g155sn.jl:26\nin expression starting at\
    \ /tmp/tmpp7g155sn.jl:26\n"
  stdout: ''
  timestamp: 1659749563
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if arr.length ==\
    \ 0 \n        return Vector{String}() \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = map(x -> name(x), arr) \n        return\
    \ arr \n    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes\
    \ an array of integers and returns the array sorted in descending order by the\
    \ sum of its elements.\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxfsn_2o1.jl:26\nin expression starting at\
    \ /tmp/tmpxfsn_2o1.jl:26\n"
  stdout: ''
  timestamp: 1659749563
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return [] \n    else \n        arr = sort(arr) \n        arr\
    \ = reverse(arr) \n        arr = map((x -> \"One\"..\"Nine\")[x - 1], arr) \n\
    \        return arr \n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings that represent\
    \ each of the numbers between 1 and 9 inclusive in descending order.\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2ip91kns.jl:26\nin expression starting at\
    \ /tmp/tmp2ip91kns.jl:26\n"
  stdout: ''
  timestamp: 1659749563
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0\n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n\
    \    \n    arr2 = reverse(arr)\n    \n    arr3 = Vector{String}(undef, 0)\n  \
    \  \n    for ele in arr2\n        if ele < 1 || ele > 9\n            continue\n\
    \        end\n        arr3 .= arr[ele - 1]\n    end\n    \n    return arr3\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns a vector of strings that represent each of the numbers between 1\
    \ and 9 inclusive.\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t\
    @test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpevd4rlxg.jl:36\nin expression starting at\
    \ /tmp/tmpevd4rlxg.jl:36\n"
  stdout: ''
  timestamp: 1659749563
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if arr.length ==\
    \ 0 \n        return Vector{String}() \n    else \n        arr = sort(arr) \n\
    \        arr = reverse(arr) \n        arr = replace(arr) \n        return arr\
    \ \n    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([1])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, \nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp06_zyl4p.jl:26\nin expression starting at\
    \ /tmp/tmp06_zyl4p.jl:26\n"
  stdout: ''
  timestamp: 1659749563
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0\n        return Vector{String}()\n    end\n    \n    arr = sort(arr)\n\
    \    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"One\"..\"Nine\"[x],\
    \ arr)\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of integers and returns a vector of strings that represent each of\
    \ the numbers between 1 and 9 inclusive in descending order.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpde4tis7e.jl:29\nin expression starting at\
    \ /tmp/tmpde4tis7e.jl:29\n"
  stdout: ''
  timestamp: 1659749563
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    \n    if length(arr)\
    \ == 0 \n        return Vector{String}()\n    end\n    \n    arr2 = sort(arr)\n\
    \    \n    arr3 = reverse(arr2)\n    \n    arr4 = arr3 .- arr2\n    \n    arr5\
    \ = arr4 .- arr2\n    \n    arr6 = arr5 .- arr2\n    \n    arr7 = arr6 .- arr2\n\
    \    \n    arr8 = arr7 .- arr2\n    \n    arr9 = arr8 .- arr2\n    \n    arr10\
    \ = arr9 .- arr2\n    \n    arr11 = arr10 .- arr2\n    \n    arr12 = arr11 .-\
    \ arr2\n    \n    arr13 = arr12 .- arr2\n    \n    arr14 = arr13 .- arr2\n   \
    \ \n    arr15 = arr14 .- arr2\n    \n    arr16 = arr15 .- arr2\n    \n    arr17\
    \ = arr16 .- arr2\n    \n    arr18 = arr17 .- arr2\n    \n    arr19 = arr18 .-\
    \ arr2\n    \n    arr20 = arr19 .- arr2\n    \n    arr21 = arr20 .- arr2\n   \
    \ \n    arr22 = arr21 .- arr2\n    \n    arr23 = arr22 .- arr2\n    \n    arr24\
    \ = arr23 .- arr2\n    \n    arr25 = arr24 .- arr2\n    \n    arr26 = arr25 .-\
    \ arr2\n    \n    arr27 = arr26 .- arr2\n    \n    arr28 = arr27 .- arr2\n   \
    \ \n    arr29 = arr28 .- arr2\n    \n    arr30 = arr29 .- arr2\n    \n    arr31\
    \ = arr30 .- arr2\n    \n    arr32 = arr31 .- arr2\n    \n    arr33 = arr32 .-\
    \ arr2\n    \n    arr34 = arr33 .- arr2\n    \n    arr35 = arr34 .- arr2\n   \
    \ \n    arr36 = arr35 .- arr2\n    \n    arr37 = arr36 .- arr2\n    \n    arr38\
    \ = arr37 .- arr2\n    \n    arr39 = arr38 .- arr2\n    \n    arr40 = arr39 .-\
    \ arr2\n    \n    arr41 = \nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqltmb8we.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqltmb8we.jl:1\n\
    in expression starting at /tmp/tmpqltmb8we.jl:1\n"
  stdout: ''
  timestamp: 1659749563
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return Vector{String}() \n    else \n        arr = sort(arr)\
    \ \n        arr = reverse(arr) \n        arr = map(x -> \"One\" if x == 1 \n \
    \           else \"Two\" if x == 2 \n            else \"Three\" if x == 3 \n \
    \           else \"Four\" if x == 4 \n            else \"Five\" if x == 5 \n \
    \           else \"Six\" if x == 6 \n            else \"Seven\" if x == 7 \n \
    \           else \"Eight\" if x == 8 \n            else \"Nine\", arr) \n    \
    \    return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of integers and returns a vector of strings where each string is the\
    \ name of the integer that is between 1 and 9 inclusive.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpslon_9h3.jl:22\nin expression starting at\
    \ /tmp/tmpslon_9h3.jl:22\n"
  stdout: ''
  timestamp: 1659749563
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if arr.length ==\
    \ 0 \n        return Vector{String}() \n    else \n        arr = arr |> sort()\
    \ \n        arr = reverse(arr) \n        arr = arr |> map(x->\"One\"..\"Nine\"\
    [x-1]) \n        arr \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns the sum of the integers in the vector.\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppgigfrqo.jl:26\nin expression starting at\
    \ /tmp/tmppgigfrqo.jl:26\n"
  stdout: ''
  timestamp: 1659749564
- exit_code: 1
  program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n    >>>\
    \ by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n    [\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is\
    \ empty, return an empty array:\n        \n      If the array has any strange\
    \ number ignore it:\n    >>> by_length([1, -1 , 55]) \n    ['One']\n    \"\"\"\
    \nfunction by_length(arr::Vector{Int64})::Vector{String} \n    if length(arr)\
    \ == 0 \n        return Vector{String}() \n    else \n        arr = sort(arr)\
    \ \n        arr = reverse(arr) \n        arr = map(x -> \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", x) \n        return\
    \ arr \n    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([1])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1ppfwqlj.jl:26\nin expression starting at\
    \ /tmp/tmp1ppfwqlj.jl:26\n"
  stdout: ''
  timestamp: 1659749564
