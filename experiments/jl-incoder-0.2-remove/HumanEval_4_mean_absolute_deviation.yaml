name: HumanEval_4_mean_absolute_deviation
language: jl
prompt: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
  \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
  \ absolute difference between each\n    element and a centerpoint (mean in this\
  \ case):\n    MAD = average | x - x_mean |\n        \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
  \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
  \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
completions: ["    \n    mad =  0.0\n    \n    for n in numbers\n        mad += abs(n\
    \ - mean(n))\n    end\n    \n    return mad / length(numbers)\nend\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5])\n</cell>\n<code\
    \ language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,",
  "    \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n  \
    \  end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation(numbers)\n</cell>\n<code language=julia-1.5>", "    \n\
    \    mad =  0.0\n    for n in numbers\n        mad += abs(n - mean(n))\n    end\n\
    \    mad /= length(numbers)\n    return mad\nend", "    \n    mad =  0.0\n   \
    \ for n in numbers\n        mad += abs(n - mean(n))\n    end\n    mad /= length(numbers)\n\
    \    return mad\nend\n</cell>\n<code language=julia-1.3>\n# Test the function\n\
    @time mean_absolute_deviation(numbers)\n</cell>\n<text>\nThe function above is\
    \ very fast! It only loops through the numbers once, calculating the mean and\
    \ calculating the MAD at the same time. Let's see how we can use it in our code.",
  "    \n    numbers = sort(numbers)\n    \n    center = mean(numbers)\n    \n   \
    \ deviations = numbers - center\n    \n    mad = mean(abs(deviations))\n    \n\
    \    return mad\nend", "    \n    sum = 0.0\n    for x in numbers\n        sum\
    \ += abs(x - mean(x))\n    end\n    return sum / length(numbers)\nend", "    \n\
    \    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,6",
  "    \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n  \
    \  end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time mean_absolute_deviation(numbers)\n</cell>\n<text>\nExercise: Write a function\
    \ that calculates the mean absolute deviation for a list of numbers, given an\
    \ input window size.", "    \n    sum = 0.0\n    for n in numbers\n        sum\
    \ += abs(n - mean(n))\n    end\n    return sum / length(numbers)\nend", "    \n\
    \    mad =  0.0\n    for n in numbers\n        mad += abs(n - mean(n))\n    end\n\
    \    mad /= length(numbers)\n    return mad\nend", "    \n    mad =  0.0\n   \
    \ for n in numbers\n        mad += abs(n - mean(n))\n    end\n    mad /= length(numbers)\n\
    \    return mad\nend\n</cell>\n<code language=julia-1.5>\n# Test the function\n\
    numbers = [1, 2, 3, 4, 5]\nmean_absolute_deviation(numbers)\n</cell>\n<text>\n\
    Exercise\nWrite a function that calculates the mean absolute deviation for a list\
    \ of numbers and a centerpoint.\nTest the function on a few examples and compare\
    \ it to the built-in function.", "    \n    mad =  0.0\n    for n in numbers\n\
    \        mad += abs(n - mean(n))\n    end\n    return mad / length(numbers)\n\
    end", "    \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n\
    \    end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time mean_absolute_deviation(numbers)\n</cell>\n<text>\nExercise: Write a function\
    \ that calculates the mean absolute deviation for a list of numbers. Test it on\
    \ a list of numbers that you generated earlier.", "    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    sum = 0.0\n    for n in numbers\n\
    \        sum += abs(n - mean(n))\n    end\n    return sum / length(numbers)\n\
    end", "    \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n\
    \    end\n    return sum / length(numbers)\nend", "    \n    sum_of_squared_deviations\
    \ = 0.0\n    for n in numbers\n        sum_of_squared_deviations += ((n - mean(numbers))\
    \ * (n - mean(numbers)))\n    end\n    \n    return sqrt(sum_of_squared_deviations\
    \ / length(numbers))\nend", "    \n    sum = 0.0\n    for n in numbers\n     \
    \   sum += abs(n - mean(n))\n    end\n    return sum / length(numbers)\nend\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54",
  "    \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n  \
    \  end\n    return sum / length(numbers)\nend", "    \n    mad =  0.0\n    for\
    \ n in numbers\n        mad += abs(n - mean(n))\n    end\n    mad /= length(numbers)\n\
    \    return mad\nend\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation(numbers)\n\
    </cell>\n<text>\nMean Absolute Deviation with StatsModels", "    \n    sum = 0.0\n\
    \    for n in numbers\n        sum += abs(n - mean(n))\n    end\n    return sum\
    \ / length(numbers)\nend", "    \n    sum = 0.0\n    for n in numbers\n      \
    \  sum += abs(n - mean(n))\n    end\n    return sum / length(numbers)\nend\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation(numbers)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that calculates the mean absolute deviation for a\
    \ list of numbers, \n    but ignores any values which are less than the mean of\
    \ the list.\n    \n    For example, if the mean is 3, the function should ignore\
    \ any values which are less than 3.\n    \"\"\"", "    \n    mad := 0.0\n    for\
    \ n in numbers\n        mad += abs(n - mean(n))\n    end\n    mad /= length(numbers)\n\
    \    return mad\nend\n</cell>\n<text>\nMean Absolute Deviation - Part 2\nThe second\
    \ part of the Mean Absolute Deviation function calculates the mean of the dataset\
    \ and calculates the MAD around that mean.", "    \n    mad =  0.0\n    \n   \
    \ for n in numbers\n        mad += abs(n - mean(n))\n    end\n    \n    return\
    \ mad / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,4])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,4])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,4])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,4])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,4])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,4])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,4])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,4])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,4])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,4])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,4])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,4])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,4])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,4])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,4])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,4])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,4])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,4])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,4])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,4])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,4])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,4])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,4])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,4])",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    mad =  0.0\n\
    \    for n in numbers\n        mad += abs(n - mean(n))\n    end\n    mad /= length(numbers)\n\
    \    return mad\nend", "    \n    mad =  0.0\n    for n in numbers\n        mad\
    \ += abs(n - mean(n))\n    end\n    mad /= length(numbers)\n    return mad\nend",
  "    \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n  \
    \  end\n    return sum / length(numbers)\nend", "    \n    sum_of_squares = 0.0\n\
    \    for n in numbers\n        sum_of_squares += (n - mean(n))^2\n    end\n  \
    \  \n    return sqrt(sum_of_squares/length(numbers))\nend", "    \n    sum = 0.0\n\
    \    for x in numbers\n        sum += abs(x - mean(x))\n    end\n    return sum\
    \ / length(numbers)\nend", "    \n    numbers_mean = mean(numbers)\n    \n   \
    \ abs_deviations = map(abs, numbers - numbers_mean)\n    \n    return mean(abs_deviations)\n\
    end", "    \n    numbers_mean = mean(numbers)\n    \n    abs_deviations = map(abs,\
    \ numbers - numbers_mean)\n    \n    return mean(abs_deviations)\nend\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3])", "    \n    sum =\
    \ 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n    end\n    return\
    \ sum / length(numbers)\nend", "    \n    sum = 0.0\n    for i in numbers\n  \
    \      sum += abs(i - mean)\n    end\n    return sum / length(numbers)\nend\n\
    </cell>\n<text>\nNow let's test our function", "    \n    sum_of_squared_deviations\
    \ = 0.0\n    for x in numbers\n        sum_of_squared_deviations += (x-mean(x))^2\n\
    \    end\n    \n    return sum_of_squared_deviations / length(numbers)\nend\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5])\n</cell>\n\
    <text>\nThe function above calculates the mean absolute deviation of a given list\
    \ of numbers. \nThe mean absolute deviation is defined as the average of the absolute\
    \ difference between each element and a centerpoint (mean in this case):\nMAD\
    \ = average | x - x_mean |\nwhere x is the given number, x_mean is the mean of\
    \ the given list of numbers.", "    \n    sum = 0.0\n    for i in numbers\n  \
    \      sum += abs(i - mean(i))\n    end\n    return sum / length(numbers)\nend",
  "    \n    mad =  0.0\n    for n in numbers\n        mad += abs(n - mean(n))\n \
    \   end\n    return mad / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation(numbers)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that calculates the mean absolute deviation for a set of numbers. \nThe function\
    \ should take in an array of numbers and return the mean absolute deviation \n\
    (MADE) for the set of numbers.\nThe MADE should be calculated using the formula\
    \ above. \nThe function should return the MADE.", "    \n    mad =  0.0\n    \n\
    \    for n in numbers\n        mad += abs(n - mean(n))\n    end\n    \n    return\
    \ mad / length(numbers)\nend", "    \n    mad := 0.0\n    for n in numbers\n \
    \       mad += abs(n - mean(n))\n    end\n    mad /= length(numbers)\n    return\
    \ mad\nend", "    \n    numbers_mean = mean(numbers)\n    \n    deviations = numbers\
    \ - numbers_mean\n    \n    abs_deviations = abs(deviations)\n    \n    mad =\
    \ mean(abs_deviations)\n    \n    return mad\nend", "    \n    mad =  0.0\n  \
    \  \n    for n in numbers\n        mad += abs(n - mean(n))\n    end\n    \n  \
    \  return mad / length(numbers)\nend", "    \n    mad := 0.0\n    for n in numbers\n\
    \        mad += abs(n - mean(n))\n    end\n    mad /= length(numbers)\n    return\
    \ mad\nend", "    \n    sum = 0.0\n    for x in numbers\n        sum += abs(x\
    \ - mean(x))\n    end\n    return sum / length(numbers)\nend", "    \n    sum\
    \ = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n    end\n    return\
    \ sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n# Test the function\n\
    mean_absolute_deviation([1,2,3,4,5])\n</cell>\n<text>\nMean Absolute Deviation\
    \ Function", "    \n    mad =  0.0\n    for n in numbers\n        mad += abs(n\
    \ - mean(n))\n    end\n    mad /= length(numbers)\n    return mad\nend", "   \
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>", "    \n\
    \    mad =  0.0\n    for n in numbers\n        mad += abs(n - mean(n))\n    end\n\
    \    mad /= length(numbers)\n    return mad\nend", "    \n    mad =  0.0\n   \
    \ \n    for n in numbers\n        mad += abs(n - mean(n))\n    end\n    \n   \
    \ return mad / length(numbers)\nend", "    \n    sum = 0.0\n    for i in numbers\n\
    \        sum += abs(i - mean)\n    end\n    return sum / length(numbers)\nend\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <text>\nThe mean absolute deviation function above is very similar to the mean\
    \ function we saw earlier. Let's see how it compares to the mean function we saw\
    \ earlier:", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n \
    \   end\n    return sum / length(numbers)\nend", "    \n    mad =  0.0\n    for\
    \ n in numbers\n        mad += abs(n - mean(n))\n    end\n    mad /= length(numbers)\n\
    \    return mad\nend", "    mad =  0.0\n    for n in numbers\n        mad += abs(n\
    \ - mean(n))\n    end\n    return mad / length(numbers)\nend", "    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    sum_of_squared_deviations\
    \ = 0.0\n    for number in numbers\n        sum_of_squared_deviations += ((number\
    \ - mean(numbers)).^2)\n    end\n    \n    return sqrt(sum_of_squared_deviations\
    \ / length(numbers))\nend", "    \n    numbers_mean = mean(numbers)\n    numbers_diff\
    \ = numbers - numbers_mean\n    \n    mad = mean(numbers_diff)\n    \n    return\
    \ mad \nend", "    \n    sum = 0.0\n    for n in numbers\n        sum += abs(n\
    \ - mean(n))\n    end\n    return sum / length(numbers)\nend", "    \n    sum\
    \ = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n    end\n    return\
    \ sum / length(numbers)\nend", "    \n    mad =  0.0\n    for n in numbers\n \
    \       mad += abs(n - mean(n))\n    end\n    mad /= length(numbers)\n    return\
    \ mad\nend", "    \n    sum = 0.0\n    for n in numbers\n        sum += abs(n\
    \ - mean(n))\n    end\n    return sum / length(numbers)\nend", "    \n    mad\
    \ =  0.0\n    for x in numbers\n        mad += abs(x - mean(x))\n    end\n   \
    \ mad /= length(numbers)\n    return mad\nend", "    \n    mad =  0.0\n    for\
    \ n in numbers\n        mad += abs(n - mean(n))\n    end\n    mad /= length(numbers)\n\
    \    return mad\nend", "    \n    mad =  0.0\n    for n in numbers\n        mad\
    \ += abs(n - mean(n))\n    end\n    mad /= length(numbers)\n    return mad\nend\n\
    </cell>\n<code language=julia-1.5>\n# Test the function\n@time mean_absolute_deviation(numbers)\n\
    </cell>\n<text>\nThe function above is very fast, but we can do better. Let's\
    \ vectorize our function and use broadcasting to speed it up!", "    \n    sum\
    \ = 0.0\n    for i in numbers\n        sum += abs(i - mean)\n    end\n    return\
    \ sum / length(numbers)\nend", "    \n    sum = 0.0\n    for n in numbers\n  \
    \      sum += abs(n - mean(n))\n    end\n    return sum / length(numbers)\nend\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54",
  "    \n    numbers = numbers[numbers != 0]\n    \n    sum_of_squared_deviations\
    \ = 0.0\n    for number in numbers\n        sum_of_squared_deviations += ((number\
    \ - mean(numbers)) * (number - mean(numbers)))\n    end\n    \n    return sqrt(sum_of_squared_deviations)\n\
    end", "    \n    mad =  0.0\n    for x in numbers\n        mad += abs(x - mean(x))\n\
    \    end\n    mad /= length(numbers)\n    return mad\nend", "    \n    mad = \
    \ 0.0\n    \n    for n in numbers\n        mad += abs(n - mean(n))\n    end\n\
    \    \n    return mad / length(numbers)\nend", "    \n    mad =  0.0\n    for\
    \ x in numbers\n        mad += abs(x - mean(x))\n    end\n    return mad / length(numbers)\n\
    end\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation(numbers)\n</cell>\n\
    <text>\nMean Absolute Deviation with StatsModels", "    \n    sum = 0.0\n    for\
    \ n in numbers\n        sum += abs(n - mean(n))\n    end\n    return sum / length(numbers)\n\
    end\n</cell>\n<code language=julia-1.5>\n# Test the function\n@time mean_absolute_deviation(numbers)\n\
    </cell>\n<text>\nExercise\nWrite a function that calculates the mean absolute\
    \ deviation for a set of numbers. Test it on a list of numbers from 1 to 100.\
    \ How does it compare to the previous function?", "    \n    sum = 0.0\n    for\
    \ n in numbers\n        sum += abs(n - mean(n))\n    end\n    return sum / length(numbers)\n\
    end\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6])\n\
    </cell>\n<text>\nThe mean absolute deviation function above is very simple, but\
    \ we can make it more efficient by using the Julia built-in function mean. Let's\
    \ compare the two functions above to see how they compare:", "    \n    sum =\
    \ 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n    end\n    return\
    \ sum / length(numbers)\nend", "    \n    sum_of_squares = 0.0\n    \n    for\
    \ number in numbers\n        sum_of_squares += (number - mean(number))^2\n   \
    \ end\n    \n    return sqrt(sum_of_squares/length(numbers))\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<text>\nMean Absolute Deviation with Stats", "    \n    sum = 0.0\n \
    \   for x in numbers\n        sum += abs(x - mean(x))\n    end\n    return sum\
    \ / length(numbers)\nend", "    \n    mad =  0.0\n    for n in numbers\n     \
    \   mad += abs(n - mean(n))\n    end\n    return mad / length(numbers)\nend\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>",
  "    \n    mad =  0.0\n    for n in numbers\n        mad += abs(n - mean(n))\n \
    \   end\n    mad /= length(numbers)\n    return mad\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test the function \nmean_absolute_deviation([1,2,3,4,5,6,7,8,9])\n</cell>\n\
    <text>\nMean Absolute Deviation Function\nThe function above calculates the mean\
    \ absolute deviation for a list of numbers. \nWe will now implement a function\
    \ that calculates the mean absolute deviation for a list of numbers. \nThe function\
    \ should take in an array of numbers and return the mean absolute deviation \n\
    for each number in the array.", "    \n    mad =  0.0\n    for x in numbers\n\
    \        mad += abs(x - mean(x))\n    end\n    return mad / length(numbers)\n\
    end", "    \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n\
    \    end\n    return sum / length(numbers)\nend", "    \n    mad =  0.0\n    \n\
    \    for n in numbers\n        mad += abs(n - mean(n))\n    end\n    \n    return\
    \ mad / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9])\n\
    </cell>\n<text>\nMean Absolute Deviation with Weights\nThe mean absolute deviation\
    \ function above is sensitive to outliers. To fix this, we can add a weighting\
    \ factor to our mean absolute deviation function.", "    \n    mad =  0.0\n  \
    \  for n in numbers\n        mad += abs(n - mean(n))\n    end\n    mad /= length(numbers)\n\
    \    return mad\nend", "    \n    mad =  0.0\n    for n in numbers\n        mad\
    \ += abs(n - mean(n))\n    end\n    return mad / length(numbers)\nend", "    \n\
    \    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(numbers))\n\
    \    end\n    return sum / length(numbers)\nend", "    \n    sum = 0.0\n    for\
    \ n in numbers\n        sum += abs(n - mean(n))\n    end\n    return sum / length(numbers)\n\
    end\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,",
  "    \n    mad =  0.0\n    \n    for n in numbers\n        mad += abs(n - mean(n))\n\
    \    end\n    \n    return mad / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3])", "    \n    mad =  0.0\n    for n in numbers\n\
    \        mad += abs(n - mean(n))\n    end\n    mad /= length(numbers)\n    return\
    \ mad\nend\n</cell>\n<code language=julia-1.5>\n# Test the function \nnumbers\
    \ = [1,2,3,4,5,6,7,8,9,10]\nmean_absolute_deviation(numbers)\n</cell>\n<text>\n\
    Mean Absolute Deviation with StatsModels\nStatsModels is a Python library for\
    \ statistical modeling and analysis. It is built on top of NumPy, and is designed\
    \ to mimic MATLAB's statistical toolboxes for data analysis and modeling.", " \
    \   \n    numbers = sort(numbers)\n    \n    center = mean(numbers)\n    \n  \
    \  sum = 0.0\n    for i in numbers\n        sum += abs(i - center)\n    end\n\
    \    \n    return sum / length(numbers)\nend", "    \n    numbers_mean = mean(numbers)\n\
    \    \n    mad =  sum(abs2(numbers - numbers_mean))/length(numbers)\n    \n  \
    \  return mad\nend\n</cell>\n<code language=julia-1.5>\n# Test the function\n\
    numbers = [1, 2, 3, 4, 5]\nmean_absolute_deviation(numbers)\n</cell>\n<text>\n\
    Mean Absolute Deviation Function", "    \n    mad =  0.0\n    \n    for n in numbers\n\
    \        mad += abs(n - mean(n))\n    end\n    \n    return mad / length(numbers)\n\
    end", "    \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n\
    \    end\n    return sum / length(numbers)\nend", "    \n    sum = 0.0\n    for\
    \ x in numbers\n        sum += abs(x - mean(x))\n    end\n    return sum / length(numbers)\n\
    end", "    \n    mad =  0.0\n    \n    for n in numbers\n        mad += abs(n\
    \ - mean(n))\n    end\n    \n    return mad / length(numbers)\nend", "    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    mad =  0.0\n  \
    \  for n in numbers\n        mad += abs(n - mean(n))\n    end\n    mad /= length(numbers)\n\
    \    return mad\nend", "    \n    sum = 0.0\n    for n in numbers\n        sum\
    \ += abs(n - mean(n))\n    end\n    return sum / length(numbers)\nend\n</cell>\n\
    <code language=julia-1.5>\n@time mean_absolute_deviation(numbers)\n</cell>\n<text>\n\
    Mean Absolute Deviation with StatsModels", "    \n    sum = 0.0\n    for n in\
    \ numbers\n        sum += abs(n - mean(n))\n    end\n    return sum / length(numbers)\n\
    end\n</cell>\n<code language=julia-1.5>\n# Test our function\n@assert mean_absolute_deviation([1,2,3])\
    \ == mean(abs2, [1,2])\n</cell>\n<text>\nMean Absolute Deviation Error", "   \
    \ \n    mad =  0.0\n    for x in numbers\n        mad += abs(x - mean(x))\n  \
    \  end\n    return mad / length(numbers)\nend", "    \n    sum_of_squared_deviations\
    \ = 0.0\n    for number in numbers\n        sum_of_squared_deviations += ((number\
    \ - mean(numbers)) * (number - mean(numbers)))\n    end\n    return sqrt(sum_of_squared_deviations/length(numbers))\n\
    end\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n", "    \n    mad =  0.0\n    for n in numbers\n        mad += abs(n\
    \ - mean(n))\n    end\n    mad /= length(numbers)\n    return mad\nend", "   \
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation(numbers)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that calculates the mean absolute deviation for a list of numbers. \nFor each\
    \ number, calculate the mean absolute deviation from the mean of the list. \n\
    The function should return a vector of mean absolute deviations.", "    \n   \
    \ mad =  0.0\n    for n in numbers\n        mad += abs(n - mean(n))\n    end\n\
    \    return mad / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nMean Absolute Deviation with Weights\nThe mean absolute deviation\
    \ function above is great for calculating a weighted mean of some numbers. However,\
    \ it can be very sensitive to outliers. For example, if we have some data that\
    \ looks like this:", "    \n    sum = 0.0\n    for n in numbers\n        sum +=\
    \ abs(n - mean(n))\n    end\n    return sum / length(numbers)\nend\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5",
  "    \n    mad := 0.0\n    \n    for n in numbers\n        mad += abs(n - mean(n))\n\
    \    end\n    \n    return mad / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3,4,5,6])\n</cell>\n<text>\nThe mean absolute deviation\
    \ function above is very similar to the mean function we saw earlier. Let's compare\
    \ the two functions side-by-side.", "    \n    sum = 0.0\n    for n in numbers\n\
    \        sum += abs(n - mean(n))\n    end\n    return sum / length(numbers)\n\
    end\n</cell>\n<code language=julia-1.4>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-1.4>\nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.4>\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-1.4>\nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.4>\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-1.4>\nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.4>\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-1.4>\nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.4>\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-1.4>\nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.4>\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-1.4>\nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.4>\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-1.", "    \n    sum = 0.0\n    for n in numbers\n       \
    \ sum += abs(n - mean(n))\n    end\n    return sum / length(numbers)\nend\n</cell>\n\
    <code language=julia-1.5>\n# Test the function \nmean_absolute_deviation([1,2,3,4,5,6])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that calculates the mean absolute\
    \ deviation for a list of numbers. \nThe function should take as input a list\
    \ of numbers and return a single number.\nThe function should calculate the mean\
    \ absolute deviation for each number in the list.\nThe function should return\
    \ the mean absolute deviation for the entire list.\nThe function should calculate\
    \ the mean absolute deviation for each number in the list \nand return the mean\
    \ absolute deviation for the entire list.\nThe function should calculate the mean\
    \ absolute deviation for each number in the list \nand return the mean absolute\
    \ deviation for the entire list.\nThe function should calculate the mean absolute\
    \ deviation for each number in the list \nand return the mean absolute deviation\
    \ for the entire list.\nThe function should calculate the mean absolute deviation\
    \ for each number in the list \nand return the mean absolute deviation for the\
    \ entire list.\nThe function should calculate the mean absolute deviation for\
    \ each number in the list \nand return the mean absolute deviation for the entire\
    \ list.\nThe function should calculate the mean absolute deviation for each number\
    \ in the list \nand return the mean absolute deviation for the entire list.\n\
    The function should calculate the mean absolute deviation for each number in the\
    \ list \nand return the mean absolute deviation for the entire list.\nThe function\
    \ should calculate the mean absolute deviation for each number in the list \n\
    and return the mean absolute deviation for the entire list.\nThe function should\
    \ calculate the mean absolute deviation for each number in the list \nand return\
    \ the mean absolute deviation for the entire list.\nThe function should calculate\
    \ the mean absolute deviation for each number in the list \nand return the mean\
    \ absolute deviation for the entire list.\nThe function should calculate the mean\
    \ absolute deviation for each number in the list \nand return the mean absolute\
    \ deviation for the entire list.\nThe function should calculate the mean absolute\
    \ deviation for each number in the list \nand return the mean absolute deviation\
    \ for the entire list.\nThe function should calculate the mean absolute deviation\
    \ for each number in the list \nand return the mean absolute deviation for the\
    \ entire list.\nThe function should calculate the mean absolute deviation for\
    \ each number in the list \nand return the mean absolute deviation for the entire\
    \ list.\nThe function should calculate the mean absolute deviation for each number\
    \ in the list \nand return the mean absolute deviation for the entire list.\n\
    The function should calculate the mean absolute deviation for each number in the\
    \ list \nand return the mean absolute deviation for the entire list.\nThe function\
    \ should calculate the mean absolute deviation for each number in the list \n\
    and return the mean absolute deviation for the entire list.\nThe function should\
    \ calculate the ", "    \n    mad := 0.0\n    for x in numbers\n        mad +=\
    \ abs(x - mean(x))\n    end\n    mad /= length(numbers)\n    return mad\nend",
  "    \n    mad =  0.0\n    for x in numbers\n        mad += abs(x - mean(x))\n \
    \   end\n    mad /= length(numbers)\n    return mad\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation(numbers)\n</cell>\n<text>\nThe function above calculates\
    \ the mean absolute deviation of a given set of numbers. \nIt takes as input a\
    \ vector of numbers and returns the mean absolute deviation of this vector.\n\
    The mean absolute deviation is the average absolute difference between each element\
    \ and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\nwhere\
    \ x is the current element and x_mean is the mean of the vector.", "    \n   \
    \ mad =  0.0\n    for n in numbers\n        mad += abs(n - mean(n))\n    end\n\
    \    mad /= length(numbers)\n    return mad\nend", "    \n    mad =  0.0\n   \
    \ for n in numbers\n        mad += abs(n - mean(n))\n    end\n    mad /= length(numbers)\n\
    \    return mad\nend", "    \n    mad =  0.0\n    for n in numbers\n        mad\
    \ += abs(n - mean(n))\n    end\n    return mad / length(numbers)\nend", "    \n\
    \    mad =  0.0\n    \n    for n in numbers\n        mad += abs(n - mean(n))\n\
    \    end\n    \n    return mad / length(numbers)\nend", "    \n    mad =  0.0\n\
    \    \n    for n in numbers\n        mad += abs(n - mean(n))\n    end\n    \n\
    \    return mad / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nMean Absolute Deviation with StatsModels", "    \n    numbers\
    \ = sort(numbers)\n    \n    center = mean(numbers)\n    \n    sum = 0.0\n   \
    \ for i in numbers\n        sum += abs(i - center)\n    end\n    \n    return\
    \ sum / length(numbers)\nend", "    \n    sum = 0.0\n    for i in numbers\n  \
    \      sum += abs(i - mean)\n    end\n    return sum / length(numbers)\nend",
  "    \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n  \
    \  end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation(numbers)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that calculates the median absolute deviation of a given list of numbers.\n\
    Median Absolute Deviation is the median absolute difference between each element\
    \ and a centerpoint (median in this case):\nMAD = average | x - x_mean |\n   \
    \ \"\"\"", "    \n    mad =  0.0\n    for n in numbers\n        mad += abs(n -\
    \ mean(n))\n    end\n    mad /= length(numbers)\n    return mad\nend", "    \n\
    \    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.3>\nmean_absolute_deviation(numbers)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that calculates the mean absolute\
    \ deviation for a list of numbers. \nThe function should take as input a list\
    \ of numbers and output the mean absolute deviation \n(MADE) for the input list.\
    \ \nThe MADE should be calculated using the formula above. \nThe function should\
    \ return MADE.", "    \n    sum = 0.0\n    for n in numbers\n        sum += abs(n\
    \ - mean(numbers))\n    end\n    return sum / length(numbers)\nend\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5",
  "    \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n  \
    \  end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test the function \nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    # Test the function \nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    # Test the function \nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    # Test the function \nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    # Test the function \nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    # Test the function \nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    # Test the function \nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    # Test the function \nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    # Test the function \nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    # Test the function \nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    # Test the function \nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    # Test the function \nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    # Test the function \nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    # Test the function \nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    # Test the function \nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    # Test the function \nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    # Test the function \nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    # Test the function \nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    # Test the function \nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    # Test the function \nmean_absolute_deviation([1,2,3])\n</cell>", "    \n    mad\
    \ =  0.0\n    for n in numbers\n        mad += abs(n - mean(n))\n    end\n   \
    \ mad /= length(numbers)\n    return mad\nend", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    mad =  0.0\n    for n in numbers\n    \
    \    mad += abs(n - mean(n))\n    end\n    mad /= length(numbers)\n    return\
    \ mad\nend\n</cell>\n<code language=julia-1.5>\n@time mean_absolute_deviation(numbers)\n\
    </cell>\n<text>\nMean Absolute Deviation with StatsModels", "    \n    sum = 0.0\n\
    \    for n in numbers\n        sum += abs(n - mean(n))\n    end\n    return sum\
    \ / length(numbers)\nend", "    \n    mad =  0.0\n    \n    for n in numbers\n\
    \        mad += abs(n - mean(n))\n    end\n    \n    return mad / length(numbers)\n\
    end", "    \n    mad =  0.0\n    for n in numbers\n        mad += abs(n - mean(n))\n\
    \    end\n    return mad / length(numbers)\nend\n</cell>\n<code language=julia-1.4>\n\
    mean_absolute_deviation([1,2,3,4,5])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that calculates the mean absolute deviation of a given list of numbers. \nThe\
    \ function should take as input a list of numbers and output the mean absolute\
    \ deviation\nof the numbers in the list. \nThe function should also output the\
    \ standard deviation of the numbers in the list. \nThe standard deviation is the\
    \ square root of the variance.\nHint: use the function mean_absolute_deviation()\
    \ that you wrote earlier.", "    \n    sum = 0.0\n    for n in numbers\n     \
    \   sum += abs(n - mean(n))\n    end\n    return sum / length(numbers)\nend\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5])\n</cell>\n<code\
    \ language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6])\n</cell>\n<code\
    \ language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <text>\nMean Absolute Deviation with StatsModels", "    \n    mad =  0.0\n   \
    \ for x in numbers\n        mad += abs(x - mean(x))\n    end\n    mad /= length(numbers)\n\
    \    return mad\nend", "    \n    sum = 0.0\n    for i in numbers\n        sum\
    \ += abs(i - mean)\n    end\n    return sum / length(numbers)\nend", "    \n \
    \   sum = 0.0\n    for i in numbers\n        sum += abs(i - mean(i))\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44",
  "    \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n  \
    \  end\n    return sum / length(numbers)\nend", "    \n    mad =  0.0\n    for\
    \ n in numbers\n        mad += abs(n - mean(n))\n    end\n    mad /= length(numbers)\n\
    \    return mad\nend\n</cell>\n<code language=julia-1.5>\n# Test the function\
    \ \nmean_absolute_deviation([1,2,3])\n</cell>\n<text>\nMean Absolute Deviation\
    \ with StatsModels", "    \n    mad =  0.0\n    for n in numbers\n        mad\
    \ += abs(n - mean(n))\n    end\n    mad /= length(numbers)\n    return mad\nend",
  "    \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(numbers))\n\
    \    end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation(numbers)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that calculates the mean absolute deviation for a list of numbers. \nThe function\
    \ should take as input a list of numbers and output the mean absolute deviation\
    \ for each number.\nThe function should return a list of numbers, where each number\
    \ is the mean absolute deviation for a list of numbers.\nThe function should return\
    \ a list of numbers, where each number is the mean absolute deviation for a list\
    \ of numbers.", "    \n    mad =  0.0\n    for n in numbers\n        mad += abs(n\
    \ - mean(n))\n    end\n    mad /= length(numbers)\n    return mad\nend", "   \
    \ \n    sum_of_squared_deviations = 0.0\n    for number in numbers\n        sum_of_squared_deviations\
    \ += ((number - mean(numbers)).^2)\n    end\n    return sqrt(sum_of_squared_deviations\
    \ / length(numbers))\nend", "    \n    mad =  0.0\n    for x in numbers\n    \
    \    mad += abs(x - mean(x))\n    end\n    mad /= length(numbers)\n    return\
    \ mad\nend", "    \n    mad =  0.0\n    for n in numbers\n        mad += abs(n\
    \ - mean(n))\n    end\n    return mad / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time mean_absolute_deviation(numbers)\n</cell>\n<text>\nExercise: Write a function\
    \ that calculates the mean absolute deviation for a set of numbers. Use a for\
    \ loop to iterate over the numbers and calculate the mean absolute deviation.\
    \ Print the result to the screen.", "    \n    numbers = sort(numbers)\n    \n\
    \    center = mean(numbers)\n    \n    deviations = numbers - center\n    \n \
    \   abs_deviations = abs(deviations)\n    \n    mad = mean(abs_deviations)\n \
    \   \n    return mad\nend\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nMean Absolute Deviation with weights", "    \n    mad =  0.0\n\
    \    for n in numbers\n        mad += abs(n - mean(n))\n    end\n    mad /= length(numbers)\n\
    \    return mad\nend\n</cell>\n<code language=julia-1.5>\n# Test the function\n\
    numbers = [1, 2, 3, 4, 5]\nmean_absolute_deviation(numbers)\n</cell>\n<text>\n\
    Mean Absolute Deviation with Weights\nThe mean absolute deviation function above\
    \ is sensitive to the weights. For example, if we have two numbers that are very\
    \ close to each other, the mean absolute deviation will be very large.", "   \
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(numbers))\n\
    \    end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5", "    \n\
    \    mad =  0.0\n    for n in numbers\n        mad += abs(n - mean(n))\n    end\n\
    \    mad /= length(numbers)\n    return mad\nend", "    \n    numbers_mean = mean(numbers)\n\
    \    \n    abs_deviations = map(abs, numbers - numbers_mean)\n    \n    return\
    \ mean(abs_deviations)\nend\n</cell>\n<code language=julia-1.3>\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n<text>\nMean Absolute Deviation with weights\nThe mean absolute deviation\
    \ function above is great for calculating mean absolute deviation\n(MAD) when\
    \ all you want to do is compare two numbers. However, sometimes you want\nto compare\
    \ two numbers and weight the difference by the distance between them.\nFor example,\
    \ suppose you wanted to compare the mean of two numbers and weight the difference\n\
    by the distance between them. One way to do this would be to calculate the MAD\
    \ for\neach pair of numbers and then average the MAD values together. Let's see\
    \ how this would look\nin Julia:", "    \n    sum = 0.0\n    for n in numbers\n\
    \        sum += abs(n - mean(n))\n    end\n    return sum / length(numbers)\n\
    end", "    \n    mad =  0.0\n    for n in numbers\n        mad += abs(n - mean(n))\n\
    \    end\n    mad /= length(numbers)\n    return mad\nend", "    mad =  0.0\n\
    \    for n in numbers\n        mad += abs(n - mean(n))\n    end\n    return mad\
    \ / length(numbers)\nend", "    \n    mad =  0.0\n    for n in numbers\n     \
    \   mad += abs(n - mean(n))\n    end\n    mad /= length(numbers)\n    return mad\n\
    end\n</cell>\n<code language=julia-1.5>\n# Test the function\n@time mean_absolute_deviation([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nThe function above is very fast, but we can make it even faster\
    \ by vectorizing the operation. Let's do that now:", "    \n    sum = 0.0\n  \
    \  for n in numbers\n        sum += abs(n - mean(n))\n    end\n    return sum\
    \ / length(numbers)\nend", "    \n    sum = 0.0\n    for n in numbers\n      \
    \  sum += abs(n - mean(n))\n    end\n    return sum / length(numbers)\nend", " \
    \   \n    mad =  0.0\n    for n in numbers\n        mad += abs(n - mean(n))\n\
    \    end\n    mad /= length(numbers)\n    return mad\nend", "    \n    sum = 0.0\n\
    \    for n in numbers\n        sum += abs(n - mean(n))\n    end\n    return sum\
    \ / length(numbers)\nend", "    \n    sum = 0.0\n    for x in numbers\n      \
    \  sum += abs(x - mean(x))\n    end\n    return sum / length(numbers)\nend", " \
    \   \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n \
    \   end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time mean_absolute_deviation(numbers)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that calculates the mean absolute deviation for a set of numbers, \ngiven an\
    \ input window size.", "    \n    numbers = numbers[numbers != 0]\n    \n    numbers_mean\
    \ = mean(numbers)\n    \n    numbers_diff = numbers - numbers_mean\n    \n   \
    \ numbers_mad = mean(numbers_diff)\n    \n    return numbers_mad\nend", "    \n\
    \    mad =  0.0\n    for n in numbers\n        mad += abs(n - mean(n))\n    end\n\
    \    return mad / length(numbers)\nend", "    \n    mad =  0.0\n    for n in numbers\n\
    \        mad += abs(n - mean(n))\n    end\n    mad /= length(numbers)\n    return\
    \ mad\nend", "    \n    sum = 0.0\n    for n in numbers\n        sum += abs(n\
    \ - mean(n))\n    end\n    return sum / length(numbers)\nend", "    \n    mad\
    \ =  0.0\n    for n in numbers\n        mad += abs(n - mean(n))\n    end\n   \
    \ return mad / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5])\n\
    </cell>\n<text>\nMean Absolute Deviation with StatsModels", "    \n    sum = 0.0\n\
    \    for n in numbers\n        sum += abs(n - mean(n))\n    end\n    return sum\
    \ / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n# Test the function\
    \ \nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    # Test the function \nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\n# Test the function \nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n# Test the function \nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n# Test the function \nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n# Test the function \nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n# Test the function \nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n# Test the function \nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n# Test the function \nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n# Test the function \nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n# Test the function \nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n# Test the function \nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n# Test the function \nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n# Test the function \nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n# Test the function \nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n# Test the function \nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>", "    \n    numbers = sort(numbers)\n    \n    center = mean(numbers)\n\
    \    \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - center)\n \
    \   end\n    \n    return sum / length(numbers)\nend", "    \n    sum = 0.0\n\
    \    for x in numbers\n        sum += abs(x - mean(x))\n    end\n    return sum\
    \ / length(numbers)\nend", "    \n    sum = 0.0\n    for n in numbers\n      \
    \  sum += abs(n - mean(n))\n    end\n    return sum / length(numbers)\nend", " \
    \   \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n \
    \   end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3,4,5])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,",
  "    \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n  \
    \  end\n    return sum / length(numbers)\nend", "    \n    numbers_mean = mean(numbers)\n\
    \    \n    deviations = numbers - numbers_mean\n    \n    mad = mean(deviations)\n\
    \    \n    return mad\nend", "    \n    sum = 0.0\n    for x in numbers\n    \
    \    sum += abs(x - mean(x))\n    end\n    return sum / length(numbers)\nend\n\
    </cell>\n<code language=julia-1.4>\nmean_absolute_deviation(numbers)\n</cell>\n\
    <text>\nMean Absolute Deviation - Part 2\nThe second part of the Mean Absolute\
    \ Deviation calculation is the variance of the dataset. \nThe variance is the\
    \ average of the squared deviations from the mean:\n    Variance = average | x\
    \ - x_mean |^2\n    \n    Variance is calculated using the same function as Mean\
    \ Absolute Deviation:\n    Variance = average | x - x_mean |^2\n    \n    Variance\
    \ is calculated using the same function as Mean Absolute Deviation:\n    Variance\
    \ = average | x - x_mean |^2\n    \n    Variance is calculated using the same\
    \ function as Mean Absolute Deviation:\n    Variance = average | x - x_mean |^2\n\
    \    \n    Variance is calculated using the same function as Mean Absolute Deviation:\n\
    \    Variance = average | x - x_mean |^2\n    \n    Variance is calculated using\
    \ the same function as Mean Absolute Deviation:\n    Variance = average | x -\
    \ x_mean |^2\n    \n    Variance is calculated using the same function as Mean\
    \ Absolute Deviation:\n    Variance = average | x - x_mean |^2\n    \n    Variance\
    \ is calculated using the same function as Mean Absolute Deviation:\n    Variance\
    \ = average | x - x_mean |^2\n    \n    Variance is calculated using the same\
    \ function as Mean Absolute Deviation:\n    Variance = average | x - x_mean |^2\n\
    \    \n    Variance is calculated using the same function as Mean Absolute Deviation:\n\
    \    Variance = average | x - x_mean |^2\n    \n    Variance is calculated using\
    \ the same function as Mean Absolute Deviation:\n    Variance = average | x -\
    \ x_mean |^2\n    \n    Variance is calculated using the same function as Mean\
    \ Absolute Deviation:\n    Variance = average | x - x_mean |^2\n    \n    Variance\
    \ is calculated using the same function as Mean Absolute Deviation:\n    Variance\
    \ = average | x - x_mean |^2\n    \n    Variance is calculated using the same\
    \ function as Mean Absolute Deviation:\n    Variance = average | x - x_mean |^2\n\
    \    \n    Variance is calculated using the same function as Mean Absolute Deviation:\n",
  "    \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(numbers))\n\
    \    end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    # Let's test it out\nmean_absolute_deviation([1,2,3])\n</cell>\n<text>\nNow let's\
    \ use our new function with our dataset!", "    \n    mad =  0.0\n    for n in\
    \ numbers\n        mad += abs(n - mean(n))\n    end\n    mad /= length(numbers)\n\
    \    return mad\nend", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n  \
    \  end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation(numbers)\n</cell>\n<text>\nThe above function can be called\
    \ directly on any vector or matrix of numbers:", "    \n    sum = 0.0\n    for\
    \ i in numbers\n        sum += abs(i - mean)\n    end\n    return sum / length(numbers)\n\
    end", "    \n    mad =  0.0\n    \n    for n in numbers\n        mad += abs(n\
    \ - mean(n))\n    end\n    \n    return mad / length(numbers)\nend\n</cell>\n\
    <code language=julia-1.5>\n# Test the function \nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nMean Absolute Deviation with weights", "    \n    mad =  0.0\n\
    \    for n in numbers\n        mad += abs(n - mean(n))\n    end\n    mad /= length(numbers)\n\
    \    return mad\nend\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that calculates the mean of a given\
    \ list of numbers:\nmean(numbers::Vector{Float64})\nThis function should return\
    \ the mean of the given numbers as a Float64.\nHint: use the function mean() from\
    \ the Statistics package.", "    \n    numbers_mean = mean(numbers)\n    \n  \
    \  abs_deviations = map(abs, numbers - numbers_mean)\n    \n    return mean(abs_deviations)\n\
    end", "    \n    mad =  0.0\n    for x in numbers\n        mad += abs(x - mean(x))\n\
    \    end\n    mad /= length(numbers)\n    return mad\nend", "    \n    mad = \
    \ 0.0\n    for n in numbers\n        mad += abs(n - mean(n))\n    end\n    mad\
    \ /= length(numbers)\n    return mad\nend", "    \n    mad =  0.0\n    for n in\
    \ numbers\n        mad += abs(n - mean(n))\n    end\n    return mad / length(numbers)\n\
    end", "    \n    numbers_mean = mean(numbers)\n    \n    abs_deviations = map(abs,\
    \ numbers - numbers_mean)\n    \n    return mean(abs_deviations)\nend", "    \n\
    \    mad =  0.0\n    for x in numbers\n        mad += abs(x - mean(x))\n    end\n\
    \    return mad / length(numbers)\nend", "    \n    sum = 0.0\n    for n in numbers\n\
    \        sum += abs(n - mean(n))\n    end\n    return sum / length(numbers)\n\
    end", "    \n    mad =  0.0\n    for x in numbers\n        mad += abs(x - mean(x))\n\
    \    end\n    mad /= length(numbers)\n    return mad\nend", "    \n    mad = \
    \ 0.0\n    \n    for n in numbers\n        mad += abs(n - mean(n))\n    end\n\
    \    \n    return mad / length(numbers)\nend", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    made_mean = mean(numbers)\n    made_mean_deviation\
    \ = made_mean - mean(numbers)\n    return made_mean_deviation\nend", "    \n \
    \   sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(numbers))\n \
    \   end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that calculates the mean absolute deviation of a given list of numbers. \n \
    \   \n    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    \"\"\"", "    \n    mad =  0.0\n    for n in numbers\n        mad +=\
    \ abs(n - mean(n))\n    end\n    return mad / length(numbers)\nend", "    \n \
    \   mad =  0.0\n    \n    for n in numbers\n        mad += abs(n - mean(n))\n\
    \    end\n    \n    return mad / length(numbers)\nend", "    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    sum = 0.0\n    for x in numbers\n\
    \        sum += abs(x - mean(x))\n    end\n    return sum / length(numbers)\n\
    end", "    \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n\
    \    end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation(numbers)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that calculates the median of a given list of numbers.\nThe median is the value\
    \ that divides the data set into two equal halves.\nThe median is then the middle\
    \ number of the two halves.\nThe median is then the middle number of the two halves.\n\
    The median is then the middle number of the two halves.\nThe median is then the\
    \ middle number of the two halves.\nThe median is then the middle number of the\
    \ two halves.\nThe median is then the middle number of the two halves.\nThe median\
    \ is then the middle number of the two halves.\nThe median is then the middle\
    \ number of the two halves.\nThe median is then the middle number of the two halves.\n\
    The median is then the middle number of the two halves.\nThe median is then the\
    \ middle number of the two halves.\nThe median is then the middle number of the\
    \ two halves.\nThe median is then the middle number of the two halves.\nThe median\
    \ is then the middle number of the two halves.\nThe median is then the middle\
    \ number of the two halves.\nThe median is then the middle number of the two halves.\n\
    The median is then the middle number of the two halves.\nThe median is then the\
    \ middle number of the two halves.\nThe median is then the middle number of the\
    \ two halves.\nThe median is then the middle number of the two halves.\nThe median\
    \ is then the middle number of the two halves.\nThe median is then the middle\
    \ number of the two halves.\nThe median is then the middle number of the two halves.\n\
    The median is then the middle number of the two halves.\nThe median is then the\
    \ middle number of the two halves.\nThe median is then the middle number of the\
    \ two halves.\nThe median is then the middle number of the two halves.\nThe median\
    \ is then the middle number of the two halves.\nThe median is then the middle\
    \ number of the two halves.\nThe median is then the middle number of the two halves.\n\
    The median is then the middle number of the two halves.\nThe median is then the\
    \ middle number of the two halves.\nThe median is then the middle number of the\
    \ two halves.\nThe median is then the middle number of the two halves.\nThe median\
    \ is then the middle number of the two halves.\nThe median is then the middle\
    \ number of the two ", "    \n    sum = 0.0\n    for n in numbers\n        sum\
    \ += abs(n - mean(n))\n    end\n    return sum / length(numbers)\nend\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6])\n</cell>\n<code\
    \ language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236",
  "    \n    mad =  0.0\n    for n in numbers\n        mad += abs(n - mean(n))\n \
    \   end\n    mad /= length(numbers)\n    return mad\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10,11])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10,11,12])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10,11,12,13])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n", "    \n    sum = 0.0\n    for n in numbers\n        sum += abs(n -\
    \ mean(n))\n    end\n    return sum / length(numbers)\nend", "    \n    sum =\
    \ 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n    end\n    return\
    \ sum / length(numbers)\nend", "    \n    mad =  0.0\n    for n in numbers\n \
    \       mad += abs(n - mean(n))\n    end\n    mad /= length(numbers)\n    return\
    \ mad\nend", "    \n    mad =  0.0\n    for n in numbers\n        mad += abs(n\
    \ - mean(n))\n    end\n    mad /= length(numbers)\n    return mad\nend\n</cell>\n\
    <text>\nNow let's calculate the MAD using the function we defined above:", " \
    \   \n    mad =  0.0\n    for n in numbers\n        mad += abs(n - mean(n))\n\
    \    end\n    return mad / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1,2,3])\n</cell>", "    \n    mad =  0.0\n    for n in\
    \ numbers\n        mad += abs(n - mean(n))\n    end\n    mad /= length(numbers)\n\
    \    return mad\nend\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nMean Absolute Deviation Error", "    \n    sum = 0.0\n    for\
    \ i in numbers\n        sum += abs(i - mean(i))\n    end\n    return sum / length(numbers)\n\
    end", "    \n    mad =  0.0\n    for x in numbers\n        mad += abs(x - mean(x))\n\
    \    end\n    mad /= length(numbers)\n    return mad\nend", "    \n    sum = 0.0\n\
    \    for n in numbers\n        sum += abs(n - mean(n))\n    end\n    return sum\
    \ / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,",
  "    \n    mad =  0.0\n    for n in numbers\n        mad += abs(n - mean(n))\n \
    \   end\n    mad /= length(numbers)\n    return mad\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
