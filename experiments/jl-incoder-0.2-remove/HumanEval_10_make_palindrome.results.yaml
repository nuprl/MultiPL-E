language: jl
name: HumanEval_10_make_palindrome
results:
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp88k9gtcq.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp88k9gtcq.jl:1\n\
    in expression starting at /tmp/tmp88k9gtcq.jl:1\n"
  stdout: ''
  timestamp: 1659805855
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    longest = find_longest_palindrome(string)\n\
    \    \n    prefix_reversed = string[longest.length..-1]\n    \n    prefix_reversed\
    \ = prefix_reversed.reverse()\n    \n    prefix_reversed = prefix_reversed.reverse()\n\
    \    \n    prefix_reversed = prefix_reversed.reverse()\n    \n    prefix_reversed\
    \ = prefix_reversed.reverse()\n    \n    prefix_reversed = prefix_reversed.reverse()\n\
    \    \n    prefix_reversed = prefix_reversed.reverse()\n    \n    prefix_reversed\
    \ = prefix_reversed.reverse()\n    \n    prefix_reversed = prefix_reversed.reverse()\n\
    \    \n    prefix_reversed = prefix_reversed.reverse()\n    \n    prefix_reversed\
    \ = prefix_reversed.reverse()\n    \n    prefix_reversed = prefix_reversed.reverse()\n\
    \    \n    prefix_reversed = prefix_reversed.reverse()\n    \n    prefix_reversed\
    \ = prefix_reversed.reverse()\n    \n    prefix_reversed = prefix_reversed.reverse()\n\
    \    \n    prefix_reversed = prefix_reversed.reverse()\n    \n    prefix_reversed\
    \ = prefix_reversed.reverse()\n    \n    prefix_reversed = prefix_reversed.reverse()\n\
    \    \n    prefix_reversed = prefix_reversed.reverse()\n    \n    prefix_reversed\
    \ = prefix_reversed.reverse()\n    \n    prefix_reversed = prefix_reversed.reverse()\n\
    \    \n    prefix_reversed = prefix_reversed.reverse()\n    \n    prefix_reversed\
    \ = prefix_reversed.reverse()\n    \n    prefix_reversed = prefix_reversed.reverse()\n\
    \    \n    prefix_reversed = prefix_reversed.reverse()\n    \n    prefix_reversed\
    \ = prefix_reversed.reverse()\n    \n    prefix_reversed = prefix_reversed.reverse()\n\
    \    \n    prefix_reversed = prefix_reversed.reverse()\n    \n    prefix_reversed\
    \ = prefix_reversed.reverse()\n    \n    prefix_reversed = prefix_reversed.reverse()\n\
    \    \n    prefix_reversed = prefix_reversed.reverse()\n    \n    prefix_reversed\
    \ = prefix_reversed.reverse()\n    \n    prefix_reversed = prefix_reversed.reverse()\n\
    \    \n    prefix_reversed = prefix_reversed.reverse()\n    \n    prefix_reversed\
    \ = prefix_reversed.reverse()\n    \n    prefix_reversed = prefix_reversed.reverse()\n\
    \    \n    prefix_reversed = prefix_reversed.reverse()\n    \n    prefix_reversed\
    \ = prefix_reversed.reverse()\n    \n    prefix_reversed = prefix_reversed.reverse()\n\
    \    \n    prefix_reversed = prefix_reversed.reverse()\n    \n    prefix_reversed\
    \ = prefix_reversed.reverse()\n    \n    prefix_\nusing Test\n\n@testset begin\n\
    \ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"..-\" near column 45\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplfnrm98v.jl:10\nin expression starting at\
    \ /tmp/tmplfnrm98v.jl:10\n"
  stdout: ''
  timestamp: 1659805856
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    max_length_postfix_length\
    \ = 0\n    max_length_prefix_length = 0\n    \n    for c in string\n        if\
    \ isPalindrome(c)\n            max_length = length(c)\n            max_length_postfix_length\
    \ = length(longestPalindromePostfix(c))\n            max_length_prefix_length\
    \ = length(longestPalindromePrefix(c))\n        end\n    end\n    \n    max_length_postfix\
    \ = max_length_postfix_length + max_length\n    max_length_prefix = max_length_prefix_length\
    \ + max_length\n    \n    max_length_postfix_string = \"\"\n    for c in string\n\
    \        if isPalindrome(c)\n            max_length_postfix_string = c + longestPalindromePostfix(c)\n\
    \        end\n    end\n    \n    max_length_prefix_string = \"\"\n    for c in\
    \ string\n        if isPalindrome(c)\n            max_length_prefix_string = c\
    \ + longestPalindromePrefix(c)\n        end\n    end\n    \n    max_length_string\
    \ = max_length_postfix_string + max_length_prefix_string\n    \n    return max_length_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpno86kxqx.jl:43

    '
  stdout: "test set: Error During Test at /tmp/tmpno86kxqx.jl:46\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  MethodError: no method matching +(::String,\
    \ ::String)\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpno86kxqx.jl:37\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpno86kxqx.jl:46 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpno86kxqx.jl:45\ntest set:\
    \ Error During Test at /tmp/tmpno86kxqx.jl:47\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: isPalindrome not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpno86kxqx.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpno86kxqx.jl:47 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpno86kxqx.jl:45\ntest set:\
    \ Error During Test at /tmp/tmpno86kxqx.jl:48\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: isPalindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpno86kxqx.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpno86kxqx.jl:48 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpno86kxqx.jl:45\ntest set:\
    \ Error During Test at /tmp/tmpno86kxqx.jl:49\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: isPalindrome not defined\n \
    \ St"
  timestamp: 1659805858
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    longest_postfix_palindrome\
    \ = find_longest_postfix_palindrome(string)\n    \n    prefix_palindrome = string[longest_postfix_palindrome..end]\n\
    \    \n    prefix_palindrome = reverse(prefix_palindrome)\n    \n    prefix_palindrome\
    \ = prefix_palindrome + longest_postfix_palindrome\n    \n    return prefix_palindrome\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpn73plfv8.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpn73plfv8.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_longest_postfix_palindrome\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpn73plfv8.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn73plfv8.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn73plfv8.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpn73plfv8.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_postfix_palindrome\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpn73plfv8.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn73plfv8.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn73plfv8.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpn73plfv8.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_postfix_palindrome\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpn73plfv8.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn73plfv8.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn73plfv8.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpn73plfv8.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_postfix_palindrome\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpn73plfv8.jl"
  timestamp: 1659805857
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    \n \
    \   for c in string:\n        if c != string[max_length]:\n            max_length\
    \ += 1\n    \n    max_length += 1\n    \n    max_length = max_length - 1\n   \
    \ \n    max_length = max_length - 1\n    \n    max_length = max_length - 1\n \
    \   \n    max_length = max_length - 1\n    \n    max_length = max_length - 1\n\
    \    \n    max_length = max_length - 1\n    \n    max_length = max_length - 1\n\
    \    \n    max_length = max_length - 1\n    \n    max_length = max_length - 1\n\
    \    \n    max_length = max_length - 1\n    \n    max_length = max_length - 1\n\
    \    \n    max_length = max_length - 1\n    \n    max_length = max_length - 1\n\
    \    \n    max_length = max_length - 1\n    \n    max_length = max_length - 1\n\
    \    \n    max_length = max_length - 1\n    \n    max_length = max_length - 1\n\
    \    \n    max_length = max_length - 1\n    \n    max_length = max_length - 1\n\
    \    \n    max_length = max_length - 1\n    \n    max_length = max_length - 1\n\
    \    \n    max_length = max_length - 1\n    \n    max_length = max_length - 1\n\
    \    \n    max_length = max_length - 1\n    \n    max_length = max_length - 1\n\
    \    \n    max_length = max_length - 1\n    \n    max_length = max_length - 1\n\
    \    \n    max_length = max_length - 1\n    \n    max_length = max_length - 1\n\
    \    \n    max_length = max_length - 1\n    \n    max_length = max_length - 1\n\
    \    \n    max_length = max_length - 1\n    \n    max_length = max_length - 1\n\
    \    \n    max_length = max_length - 1\n    \n    max_length = max_length - 1\n\
    \    \n    max_length = max_length - 1\n    \n    max_length = max_length - 1\n\
    \    \n    max_length = max_length - 1\n    \n    max_length = max_length - 1\n\
    \    \n    max_length = max_length - 1\n    \n    max_length = max_length - 1\n\
    \    \n    max_length = max_length - 1\n    \n    max_length = max_length - 1\n\
    \    \n    max_length = max_length - 1\n    \n    max_length = max_length - 1\n\
    \    \n    max_length = max_length - 1\n    \n    max_length = max_length - 1\n\
    \    \n    max_length = max_length - 1\n    \n    max_length = max_length - 1\n\
    \    \n    max_length = max_length - 1\n    \n    max_length = max_length - 1\n\
    \    \n    max_length = max_length - 1\n    \n    max_length = max_length - 1\n\
    \    \n    max_length = max_length - 1\n    \n    max_length = max_length - 1\n\
    \    \n    max_length = max_length - 1\n    \n    max_length = max_length - 1\n\
    \    \n    max_length = max_length - 1\n    \n    max_length = max_length - 1\n\
    \    \n    max_length = max_length - 1\n    \n\nusing Test\n\n@testset begin\n\
    \ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp51bac1n6.jl:11\nin expression starting at\
    \ /tmp/tmp51bac1n6.jl:11\n"
  stdout: ''
  timestamp: 1659805855
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp88k9gtcq.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp88k9gtcq.jl:1\n\
    in expression starting at /tmp/tmp88k9gtcq.jl:1\n"
  stdout: ''
  timestamp: 1659805855
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp88k9gtcq.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp88k9gtcq.jl:1\n\
    in expression starting at /tmp/tmp88k9gtcq.jl:1\n"
  stdout: ''
  timestamp: 1659805855
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    max_length_postfix_length\
    \ = 0\n    \n    for c in string\n        if c != string[max_length]\n       \
    \     max_length_postfix_length = max_length_postfix_length + 1\n            max_length\
    \ = max_length + 1\n        end\n    end\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + 1\n    max_length = max_length + 1\n    \n   \
    \ max_length_postfix_length = max_length_postfix_length + 1\n    max_length =\
    \ max_length + 1\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + 1\n    max_length = max_length + 1\n    \n    max_length_postfix_length =\
    \ max_length_postfix_length + 1\n    max_length = max_length + 1\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + 1\n    max_length = max_length + 1\n    \n   \
    \ max_length_postfix_length = max_length_postfix_length + 1\n    max_length =\
    \ max_length + 1\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + 1\n    max_length = max_length + 1\n    \n    max_length_postfix_length =\
    \ max_length_postfix_length + 1\n    max_length = max_length + 1\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + 1\n    max_length = max_length + 1\n    \n   \
    \ max_length_postfix_length = max_length_postfix_length + 1\n    max_length =\
    \ max_length + 1\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + 1\n    max_length = max_length + 1\n    \n    max_length_postfix_length =\
    \ max_length_postfix_length + 1\n    max_length = max_length + 1\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + 1\n    max_length = max_length + 1\n    \n   \
    \ max_length_postfix_length = max_length_postfix_length + 1\n    max_length =\
    \ max_length + 1\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + 1\n    max_length = max_length + 1\n    \n    max_length_postfix_length =\
    \ max_length_postfix_length + 1\n    max_length = max_length + 1\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + 1\n    max_length = max_length + 1\n    \n   \
    \ max_length_postfix_length = max_length_postfix_length + 1\n    max_length =\
    \ max_length + 1\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + 1\n    max_length = max_length + 1\n    \n    max_length_postfix_length =\
    \ max_length_postfix_length + 1\n    max_length = max_length + 1\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + 1\n    max_length = max_length + 1\n    \n   \
    \ max_length_postfix_length = max_length_postfix_length + 1\n    max_length =\
    \ max_length + 1\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpo6vjemwg.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpo6vjemwg.jl:1\n\
    in expression starting at /tmp/tmpo6vjemwg.jl:1\n"
  stdout: ''
  timestamp: 1659805855
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp88k9gtcq.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp88k9gtcq.jl:1\n\
    in expression starting at /tmp/tmp88k9gtcq.jl:1\n"
  stdout: ''
  timestamp: 1659805855
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    max_length_postfix_length\
    \ = 0\n    \n    for char in string:\n        if char == char[::-1]:\n       \
    \     max_length = max_length + 1\n            max_length_postfix_length = max_length_postfix_length\
    \ + 1\n        else:\n            max_length = max_length - 1\n            max_length_postfix_length\
    \ = max_length_postfix_length - 1\n            \n    if max_length_postfix_length\
    \ == 0:\n        return string\n    else:\n        return string[:max_length_postfix_length]\
    \ + \"$\" + string[max_length_postfix_length:]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1b7ypuku.jl:12\nin expression starting at\
    \ /tmp/tmp1b7ypuku.jl:12\n"
  stdout: ''
  timestamp: 1659805855
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = length(string.sub(1,length(string.sub(1,length(string.sub(1,length(string.sub(1,string)))))-1))\n\
    \    \n    prefix_length = length(string.sub(1,length(string.sub(1,length(string.sub(1,length(string.sub(1,string)))))-1)))\n\
    \    \n    prefix_reverse = reverse(string.sub(1,prefix_length))\n    \n    prefix_reverse\
    \ = prefix_reverse + string.sub(1,prefix_length)\n    \n    prefix_reverse = prefix_reverse\
    \ + string.sub(1,prefix_length)\n    \n    prefix_reverse = prefix_reverse + string.sub(1,prefix_length)\n\
    \    \n    prefix_reverse = prefix_reverse + string.sub(1,prefix_length)\n   \
    \ \n    prefix_reverse = prefix_reverse + string.sub(1,prefix_length)\n    \n\
    \    prefix_reverse = prefix_reverse + string.sub(1,prefix_length)\n    \n   \
    \ prefix_reverse = prefix_reverse + string.sub(1,prefix_length)\n    \n    prefix_reverse\
    \ = prefix_reverse + string.sub(1,prefix_length)\n    \n    prefix_reverse = prefix_reverse\
    \ + string.sub(1,prefix_length)\n    \n    prefix_reverse = prefix_reverse + string.sub(1,prefix_length)\n\
    \    \n    prefix_reverse = prefix_reverse + string.sub(1,prefix_length)\n   \
    \ \n    prefix_reverse = prefix_reverse + string.sub(1,prefix_length)\n    \n\
    \    prefix_reverse = prefix_reverse + string.sub(1,prefix_length)\n    \n   \
    \ prefix_reverse = prefix_reverse + string.sub(1,prefix_length)\n    \n    prefix_reverse\
    \ = prefix_reverse + string.sub(1,prefix_length)\n    \n    prefix_reverse = prefix_reverse\
    \ + string.sub(1,prefix_length)\n    \n    prefix_reverse = prefix_reverse + string.sub(1,prefix_length)\n\
    \    \n    prefix_reverse = prefix_reverse + string.sub(1,prefix_length)\n   \
    \ \n    prefix_reverse = prefix_reverse + string.sub(1,prefix_length)\n    \n\
    \    prefix_reverse = prefix_reverse + string.sub(1,prefix_length)\n    \n   \
    \ prefix_reverse = prefix_reverse + string.sub(1,prefix_length)\n    \n    prefix_reverse\
    \ = prefix_reverse + string.sub(1,prefix_length)\n    \n    prefix_reverse = prefix_reverse\
    \ + string.sub(1,prefix_length)\n    \n    prefix_reverse = prefix_reverse + string.sub(1,prefix_length)\n\
    \    \n    prefix_reverse = prefix_reverse + string.sub(1,prefix_length)\n   \
    \ \n    prefix_reverse = prefix_reverse + string.sub(1,prefix_length)\n    \n\
    \    prefix_reverse = prefix_reverse + string.sub(1,prefix_length)\n    \n   \
    \ prefix_reverse = prefix_reverse + string.sub(1,prefix_length)\n    \n    prefix_reverse\
    \ = prefix_reverse + string.sub(1,prefix_length)\n    \n    prefix_reverse = prefix_reverse\
    \ + string.\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps_3ua1wx.jl:10\nin expression starting at\
    \ /tmp/tmps_3ua1wx.jl:10\n"
  stdout: ''
  timestamp: 1659805856
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp88k9gtcq.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp88k9gtcq.jl:1\n\
    in expression starting at /tmp/tmp88k9gtcq.jl:1\n"
  stdout: ''
  timestamp: 1659805855
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    longest_postfix_length =\
    \ find_longest_postfix_length(string)\n    \n    prefix_length = longest_postfix_length\n\
    \    \n    prefix_string = string[prefix_length..-1]\n    \n    prefix_reversed_string\
    \ = reverse(prefix_string)\n    \n    prefix_reversed_string[prefix_length..-1]\
    \ = prefix_string\n    \n    prefix_reversed_string = reverse(prefix_reversed_string)\n\
    \    \n    prefix_reversed_string[prefix_length..-1] = prefix_string\n    \n \
    \   prefix_reversed_string = reverse(prefix_reversed_string)\n    \n    prefix_reversed_string[prefix_length..-1]\
    \ = prefix_string\n    \n    prefix_reversed_string = reverse(prefix_reversed_string)\n\
    \    \n    prefix_reversed_string[prefix_length..-1] = prefix_string\n    \n \
    \   prefix_reversed_string = reverse(prefix_reversed_string)\n    \n    prefix_reversed_string[prefix_length..-1]\
    \ = prefix_string\n    \n    prefix_reversed_string = reverse(prefix_reversed_string)\n\
    \    \n    prefix_reversed_string[prefix_length..-1] = prefix_string\n    \n \
    \   prefix_reversed_string = reverse(prefix_reversed_string)\n    \n    prefix_reversed_string[prefix_length..-1]\
    \ = prefix_string\n    \n    prefix_reversed_string = reverse(prefix_reversed_string)\n\
    \    \n    prefix_reversed_string[prefix_length..-1] = prefix_string\n    \n \
    \   prefix_reversed_string = reverse(prefix_reversed_string)\n    \n    prefix_reversed_string[prefix_length..-1]\
    \ = prefix_string\n    \n    prefix_reversed_string = reverse(prefix_reversed_string)\n\
    \    \n    prefix_reversed_string[prefix_length..-1] = prefix_string\n    \n \
    \   prefix_reversed_string = reverse(prefix_reversed_string)\n    \n    prefix_reversed_string[prefix_length..-1]\
    \ = prefix_string\n    \n    prefix_reversed_string = reverse(prefix_reversed_string)\n\
    \    \n    prefix_reversed_string[prefix_length..-1] = prefix_string\n    \n \
    \   prefix_reversed_string = reverse(prefix_reversed_string)\n    \n    prefix_reversed_string[prefix_length..-1]\
    \ = prefix_string\n    \n    prefix_reversed_string = reverse(prefix_reversed_string)\n\
    \    \n    prefix_reversed_string[prefix_length..-1] = prefix_string\n    \n \
    \   prefix_reversed_string = reverse(prefix_reversed_string)\n    \n    prefix_reversed_string[prefix_length..-1]\
    \ = prefix_string\n    \n    prefix_reversed_string = reverse(prefix_reversed_string)\n\
    \    \n    prefix_reversed_string[prefix_length..-1] = prefix_string\n    \n \
    \   prefix_reversed_string = reverse(prefix_reverse\nusing Test\n\n@testset begin\n\
    \ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"..-\" near column 42\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptz2ndusw.jl:12\nin expression starting at\
    \ /tmp/tmptz2ndusw.jl:12\n"
  stdout: ''
  timestamp: 1659805855
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    \n \
    \   for c in string:\n        if c != string[max_length]:\n            max_length\
    \ += 1\n    \n    max_length -= 1\n    \n    prefix_string = string[max_length:max_length+1]\n\
    \    \n    prefix_string = reverse(prefix_string)\n    \n    prefix_string +=\
    \ string[max_length]\n    \n    return prefix_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t\
    @test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvbp633j6.jl:11\nin expression starting at\
    \ /tmp/tmpvbp633j6.jl:11\n"
  stdout: ''
  timestamp: 1659805855
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    longest_postfix_length =\
    \ longest_palindrome_postfix(string)\n    \n    prefix_length = longest_postfix_length\
    \ - 1\n    \n    prefix = string[prefix_length..-1]\n    \n    suffix = string[1..prefix_length]\n\
    \    \n    prefix_reversed = reverse(prefix)\n    \n    suffix_reversed = reverse(suffix)\n\
    \    \n    return prefix_reversed + suffix_reversed\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t\
    @test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"..-\" near column 35\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfhxm2a1h.jl:12\nin expression starting at\
    \ /tmp/tmpfhxm2a1h.jl:12\n"
  stdout: ''
  timestamp: 1659805856
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    longest_postfix_length::Int\
    \ = find_longest_postfix_length(string)\n    \n    longest_postfix_string::String\
    \ = string[longest_postfix_length..]\n    \n    longest_postfix_reverse::String\
    \ = reverse(longest_postfix_string)\n    \n    longest_postfix_string::String\
    \ = longest_postfix_string + longest_postfix_reverse\n    \n    return longest_postfix_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"]\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9gc1q4zx.jl:10\nin expression starting at /tmp/tmp9gc1q4zx.jl:10\n"
  stdout: ''
  timestamp: 1659805855
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp88k9gtcq.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp88k9gtcq.jl:1\n\
    in expression starting at /tmp/tmp88k9gtcq.jl:1\n"
  stdout: ''
  timestamp: 1659805855
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    max_length = 0\n    max_length_postfix_length\
    \ = 0\n    max_length_prefix_length = 0\n    max_length_prefix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_length_length = 0\n    max_length_prefix_postfix_length_length_length\
    \ = 0\n    max_length_prefix_postfix_length_length_length_length = 0\n    max_length_prefix_postfix_length_length_length_length_length\
    \ = 0\n    max_length_prefix_postfix_length_length_length_length_length_length\
    \ = 0\n    max_length_prefix_postfix_length_length_length_length_length_length_length\
    \ = 0\n    max_length_prefix_postfix_length_length_length_length_length_length_length\
    \ = 0\n    max_length_prefix_postfix_length_length_length_length_length_length_length_length\
    \ = 0\n    max_length_prefix_postfix_length_length_length_length_length_length_length_length_length\
    \ = 0\n    max_length_prefix_postfix_length_length_length_length_length_length_length_length_length\
    \ = 0\n    max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n    max_length_prefix_postfix_length_length_length_length_length_length_length_length_length\
    \ = 0\n    max_length_prefix_postfix_length_length_length_length_length_length_length_length_length\
    \ = 0\n    max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n    max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n    max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n    max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n    max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n    max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n    max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n    max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n    max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n    max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n    max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n    max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n    max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n    max_length_prefix_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n    max_length_prefix_postfix_length_length_length_length_length_length_\n\
    using Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8h5841hm.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8h5841hm.jl:1\n\
    in expression starting at /tmp/tmp8h5841hm.jl:1\n"
  stdout: ''
  timestamp: 1659805855
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    longest_postfix_length =\
    \ longest_postfix_length(string)\n    \n    prefix_length = longest_postfix_length\
    \ - 1\n    \n    prefix_string = string[prefix_length..-1]\n    \n    prefix_reversed_string\
    \ = reverse(prefix_string)\n    \n    prefix_reversed_string_palindrome = prefix_reversed_string[prefix_length..-1]\n\
    \    \n    prefix_reversed_string_palindrome = prefix_reversed_string_palindrome\
    \ + prefix_string\n    \n    prefix_reversed_string_palindrome = prefix_reversed_string_palindrome\
    \ + string[prefix_length..-1]\n    \n    return prefix_reversed_string_palindrome\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"..-\" near column 42\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnsneur9j.jl:12\nin expression starting at\
    \ /tmp/tmpnsneur9j.jl:12\n"
  stdout: ''
  timestamp: 1659805856
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    longest_postfix_length =\
    \ longest_palindrome_postfix(string)\n    \n    prefix_length = longest_postfix_length\
    \ - 1\n    \n    prefix_string = string[prefix_length..-1]\n    \n    prefix_reversed_string\
    \ = reverse(prefix_string)\n    \n    prefix_reversed_string[prefix_length..-1]\
    \ = prefix_string\n    \n    prefix_reversed_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t\
    @test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"..-\" near column 42\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmz365oct.jl:12\nin expression starting at\
    \ /tmp/tmpmz365oct.jl:12\n"
  stdout: ''
  timestamp: 1659805855
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    max_length_postfix_length\
    \ = 0\n    \n    for c in string\n        if isPalindrome(c)\n            max_length\
    \ = length(c)\n            max_length_postfix_length = length(longestPostfix(c))\n\
    \        end\n    end\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + max_length\n    \n    string_reversed = reverse(string)\n    \n    string_reversed\
    \ = string_reversed[max_length_postfix_length..max_length_postfix_length+max_length]\n\
    \    \n    string_reversed = string_reversed.reverse()\n    \n    string_reversed\
    \ = string_reversed.reverse()\n    \n    string_reversed = string_reversed.reverse()\n\
    \    \n    string_reversed = string_reversed.reverse()\n    \n    string_reversed\
    \ = string_reversed.reverse()\n    \n    string_reversed = string_reversed.reverse()\n\
    \    \n    string_reversed = string_reversed.reverse()\n    \n    string_reversed\
    \ = string_reversed.reverse()\n    \n    string_reversed = string_reversed.reverse()\n\
    \    \n    string_reversed = string_reversed.reverse()\n    \n    string_reversed\
    \ = string_reversed.reverse()\n    \n    string_reversed = string_reversed.reverse()\n\
    \    \n    string_reversed = string_reversed.reverse()\n    \n    string_reversed\
    \ = string_reversed.reverse()\n    \n    string_reversed = string_reversed.reverse()\n\
    \    \n    string_reversed = string_reversed.reverse()\n    \n    string_reversed\
    \ = string_reversed.reverse()\n    \n    string_reversed = string_reversed.reverse()\n\
    \    \n    string_reversed = string_reversed.reverse()\n    \n    string_reversed\
    \ = string_reversed.reverse()\n    \n    string_reversed = string_reversed.reverse()\n\
    \    \n    string_reversed = string_reversed.reverse()\n    \n    string_reversed\
    \ = string_reversed.reverse()\n    \n    string_reversed = string_reversed.reverse()\n\
    \    \n    string_reversed = string_reversed.reverse()\n    \n    string_reversed\
    \ = string_reversed.reverse()\n    \n    string_reversed = string_reversed.reverse()\n\
    \    \n    string_reversed = string_reversed.reverse()\n    \n    string_reversed\
    \ = string_reversed.reverse()\n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgr6op7ob.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgr6op7ob.jl:1\n\
    in expression starting at /tmp/tmpgr6op7ob.jl:1\n"
  stdout: ''
  timestamp: 1659805855
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    max_length_postfix\
    \ = \"\"\n    max_length_prefix = \"\"\n    \n    for char in string\n       \
    \ if char == char.reverse \n            max_length = max_length + 1\n        \
    \    max_length_postfix = char + char.reverse \n        else\n            max_length\
    \ = max_length + 1\n            max_length_prefix = char + char.reverse \n   \
    \     end\n    end\n    \n    max_length_postfix = max_length_postfix.reverse\n\
    \    max_length_prefix = max_length_prefix.reverse\n    \n    max_length_postfix\
    \ = max_length_postfix.reverse\n    max_length_prefix = max_length_prefix.reverse\n\
    \    \n    max_length_postfix = max_length_postfix.reverse\n    max_length_prefix\
    \ = max_length_prefix.reverse\n    \n    max_length_postfix = max_length_postfix.reverse\n\
    \    max_length_prefix = max_length_prefix.reverse\n    \n    max_length_postfix\
    \ = max_length_postfix.reverse\n    max_length_prefix = max_length_prefix.reverse\n\
    \    \n    max_length_postfix = max_length_postfix.reverse\n    max_length_prefix\
    \ = max_length_prefix.reverse\n    \n    max_length_postfix = max_length_postfix.reverse\n\
    \    max_length_prefix = max_length_prefix.reverse\n    \n    max_length_postfix\
    \ = max_length_postfix.reverse\n    max_length_prefix = max_length_prefix.reverse\n\
    \    \n    max_length_postfix = max_length_postfix.reverse\n    max_length_prefix\
    \ = max_length_prefix.reverse\n    \n    max_length_postfix = max_length_postfix.reverse\n\
    \    max_length_prefix = max_length_prefix.reverse\n    \n    max_length_postfix\
    \ = max_length_postfix.reverse\n    max_length_prefix = max_length_prefix.reverse\n\
    \    \n    max_length_postfix = max_length_postfix.reverse\n    max_length_prefix\
    \ = max_length_prefix.reverse\n    \n    max_length_postfix = max_length_postfix.reverse\n\
    \    max_length_prefix = max_length_prefix.reverse\n    \n    max_length_postfix\
    \ = max_length_postfix.reverse\n    max_length_prefix = max_length_prefix.reverse\n\
    \    \n    max_length_postfix = max_length_postfix.reverse\n    max_length_prefix\
    \ = max_length_prefix.reverse\n    \n    max_length_postfix = max_length_postfix.reverse\n\
    \    max_length_prefix = max_length_prefix.reverse\n    \n    max_length_postfix\
    \ = max_length_postfix.reverse\n    max_length_prefix = max_length_prefix.reverse\n\
    \    \n    max_length_postfix = max_length_postfix.reverse\n    max_length_prefix\
    \ = max_length_prefix.reverse\n    \n    max_length_postfi\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t\
    @test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn57_5823.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn57_5823.jl:1\n\
    in expression starting at /tmp/tmpn57_5823.jl:1\n"
  stdout: ''
  timestamp: 1659805855
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = find_max_length(string)\n\
    \    \n    prefix_length = max_length - find_prefix_length(string)\n    \n   \
    \ prefix_string = string[prefix_length..max_length]\n    \n    suffix_string =\
    \ string[max_length..max_length]\n    \n    prefix_reversed_string = reverse(prefix_string)\n\
    \    \n    suffix_reversed_string = reverse(suffix_string)\n    \n    prefix_reversed_string\
    \ += prefix_reversed_string\n    \n    suffix_reversed_string += suffix_reversed_string\n\
    \    \n    return prefix_reversed_string + suffix_reversed_string\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpzga4pm46.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmpzga4pm46.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_max_length not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpzga4pm46.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzga4pm46.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzga4pm46.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpzga4pm46.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_max_length not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpzga4pm46.jl:8\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzga4pm46.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzga4pm46.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpzga4pm46.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_max_length not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpzga4pm46.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzga4pm46.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzga4pm46.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpzga4pm46.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_max_length not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpzga4pm46.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/ju"
  timestamp: 1659805857
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp88k9gtcq.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp88k9gtcq.jl:1\n\
    in expression starting at /tmp/tmp88k9gtcq.jl:1\n"
  stdout: ''
  timestamp: 1659805855
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    longest_postfix_len = find_longest_postfix_len(string)\n\
    \    \n    prefix_str = string[longest_postfix_len..end]\n    \n    reversed_prefix_str\
    \ = reverse(prefix_str)\n    \n    prefix_str = prefix_str ++ reversed_prefix_str\n\
    \    \n    return prefix_str\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpdv_m2_oj.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpdv_m2_oj.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_longest_postfix_len\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpdv_m2_oj.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdv_m2_oj.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdv_m2_oj.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpdv_m2_oj.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_postfix_len not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpdv_m2_oj.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdv_m2_oj.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdv_m2_oj.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpdv_m2_oj.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_postfix_len not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpdv_m2_oj.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdv_m2_oj.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdv_m2_oj.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpdv_m2_oj.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_postfix_len not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpdv_m2_oj.jl:8\n   [2] macro expansion\n  "
  timestamp: 1659805857
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    max_length_postfix\
    \ = \"\"\n    max_length_prefix_postfix = \"\"\n    \n    for c in string\n  \
    \      if isPalindrome(c)\n            max_length = length(c)\n            max_length_postfix\
    \ = reverse(c)\n            max_length_prefix_postfix = reverse(string[1:max_length])\n\
    \        end\n    end\n    \n    return max_length_prefix_postfix + max_length_postfix\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpjrj2qe85.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpjrj2qe85.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  MethodError: no method matching +(::String,\
    \ ::String)\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpjrj2qe85.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjrj2qe85.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjrj2qe85.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpjrj2qe85.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: isPalindrome not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpjrj2qe85.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjrj2qe85.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjrj2qe85.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpjrj2qe85.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: isPalindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpjrj2qe85.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjrj2qe85.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjrj2qe85.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpjrj2qe85.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: isPalindrome not defined\n \
    \ St"
  timestamp: 1659805858
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    max_length = 0\n    max_length_postfix_length\
    \ = 0\n    max_length_prefix_length = 0\n    max_length_prefix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_length = 0\n    max_length_prefix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_length = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_post\n\
    using Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpv6xwjqm4.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpv6xwjqm4.jl:1\n\
    in expression starting at /tmp/tmpv6xwjqm4.jl:1\n"
  stdout: ''
  timestamp: 1659805856
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = length(string.chars)\n\
    \    \n    if max_length == 0\n        return string\n    \n    prefix_length\
    \ = max_length - 1\n    \n    prefix_string = string.chars[prefix_length..-1]\n\
    \    \n    suffix_string = string.chars[0..prefix_length]\n    \n    suffix_reversed\
    \ = reverse(suffix_string)\n    \n    prefix_reversed = reverse(prefix_string)\n\
    \    \n    prefix_reversed = prefix_reversed.chars[0..prefix_length]\n    \n \
    \   prefix_reversed = prefix_reversed.reverse()\n    \n    prefix_reversed = prefix_reversed.chars[0..prefix_length]\n\
    \    \n    prefix_reversed = prefix_reversed.reverse()\n    \n    prefix_reversed\
    \ = prefix_reversed.chars[0..prefix_length]\n    \n    prefix_reversed = prefix_reversed.reverse()\n\
    \    \n    prefix_reversed = prefix_reversed.chars[0..prefix_length]\n    \n \
    \   prefix_reversed = prefix_reversed.reverse()\n    \n    prefix_reversed = prefix_reversed.chars[0..prefix_length]\n\
    \    \n    prefix_reversed = prefix_reversed.reverse()\n    \n    prefix_reversed\
    \ = prefix_reversed.chars[0..prefix_length]\n    \n    prefix_reversed = prefix_reversed.reverse()\n\
    \    \n    prefix_reversed = prefix_reversed.chars[0..prefix_length]\n    \n \
    \   prefix_reversed = prefix_reversed.reverse()\n    \n    prefix_reversed = prefix_reversed.chars[0..prefix_length]\n\
    \    \n    prefix_reversed = prefix_reversed.reverse()\n    \n    prefix_reversed\
    \ = prefix_reversed.chars[0..prefix_length]\n    \n    prefix_reversed = prefix_reversed.reverse()\n\
    \    \n    prefix_reversed = prefix_reversed.chars[0..prefix_length]\n    \n \
    \   prefix_reversed = prefix_reversed.reverse()\n    \n    prefix_reversed = prefix_reversed.chars[0..prefix_length]\n\
    \    \n    prefix_reversed = prefix_reversed.reverse()\n    \n    prefix_reversed\
    \ = prefix_reversed.chars[0..prefix_length]\n    \n    prefix_reversed = prefix_reversed.reverse()\n\
    \    \n    prefix_reversed = prefix_reversed.chars[0..prefix_length]\n    \n \
    \   prefix_reversed = prefix_reversed.reverse()\n    \n    prefix_reversed = prefix_reversed.chars[0..prefix_length]\n\
    \    \n    prefix_reversed = prefix_reversed.reverse()\n    \n    prefix_reversed\
    \ = prefix_reversed.chars[0..prefix_length]\n    \n    prefix_reversed = prefix_reversed.reverse()\n\
    \nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"..-\" near column 48\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwblnzb2a.jl:15\nin expression starting at\
    \ /tmp/tmpwblnzb2a.jl:15\n"
  stdout: ''
  timestamp: 1659805856
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    \n \
    \   for c in string\n        if c != string[max_length]\n            max_length\
    \ += 1\n        end\n    end\n    \n    max_length += 1\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length * 2 + 1\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length * 2 + 1\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length * 2 + 1\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length * 2 + 1\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length * 2 + 1\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length * 2 + 1\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length * 2 + 1\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length * 2 + 1\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length * 2 + 1\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length * 2 + 1\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length * 2 + 1\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length * 2 + 1\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length * 2 + 1\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length * 2 + 1\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length * 2 + 1\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length * 2 + 1\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length * 2 + 1\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length * 2 + 1\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length * 2 + 1\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length * 2 + 1\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length * 2 + 1\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length * 2 + 1\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length * 2 + 1\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length * 2 + 1\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length * 2 + 1\n    \n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbyu7b5bk.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbyu7b5bk.jl:1\n\
    in expression starting at /tmp/tmpbyu7b5bk.jl:1\n"
  stdout: ''
  timestamp: 1659805856
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    longest = find_longest_palindrome(string)\n\
    \    \n    prefix_reversed = string[longest.length..-1]\n    \n    prefix_reversed\
    \ = prefix_reversed.reverse()\n    \n    return prefix_reversed + string[longest.length..-1]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"..-\" near column 45\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5f1tgfxd.jl:10\nin expression starting at\
    \ /tmp/tmp5f1tgfxd.jl:10\n"
  stdout: ''
  timestamp: 1659805857
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp88k9gtcq.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp88k9gtcq.jl:1\n\
    in expression starting at /tmp/tmp88k9gtcq.jl:1\n"
  stdout: ''
  timestamp: 1659805855
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    max_length = 0\n    max_length_postfix_length\
    \ = 0\n    max_length_prefix_length = 0\n    max_length_prefix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_length = 0\n    max_length_prefix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_length = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_post\n\
    using Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqnifiksb.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqnifiksb.jl:1\n\
    in expression starting at /tmp/tmpqnifiksb.jl:1\n"
  stdout: ''
  timestamp: 1659805857
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp88k9gtcq.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp88k9gtcq.jl:1\n\
    in expression starting at /tmp/tmp88k9gtcq.jl:1\n"
  stdout: ''
  timestamp: 1659805855
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp88k9gtcq.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp88k9gtcq.jl:1\n\
    in expression starting at /tmp/tmp88k9gtcq.jl:1\n"
  stdout: ''
  timestamp: 1659805855
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp88k9gtcq.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp88k9gtcq.jl:1\n\
    in expression starting at /tmp/tmp88k9gtcq.jl:1\n"
  stdout: ''
  timestamp: 1659805855
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    longest_postfix_length =\
    \ find_longest_postfix_length(string, 0)\n    \n    prefix_length = longest_postfix_length\n\
    \    \n    prefix_string = string[prefix_length..-1]\n    \n    suffix_string\
    \ = string[0..prefix_length]\n    \n    prefix_reversed_string = reverse(prefix_string)\n\
    \    \n    suffix_reversed_string = reverse(suffix_string)\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"..-\" near column 42\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5hyc2jib.jl:12\nin expression starting at\
    \ /tmp/tmp5hyc2jib.jl:12\n"
  stdout: ''
  timestamp: 1659805857
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    longest_postfix_length =\
    \ longest_postfix_length(string)\n    \n    prefix_length = longest_postfix_length\
    \ + 1\n    \n    prefix_string = string[prefix_length..-1]\n    \n    prefix_reversed_string\
    \ = reverse(prefix_string)\n    \n    prefix_reversed_string[prefix_length..-1]\
    \ = prefix_string\n    \n    prefix_reversed_string\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    longest_postfix_length(string::String)\nusing Test\n\n@testset begin\n\
    \ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"..-\" near column 42\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqeista17.jl:12\nin expression starting at\
    \ /tmp/tmpqeista17.jl:12\n"
  stdout: ''
  timestamp: 1659805857
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp88k9gtcq.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp88k9gtcq.jl:1\n\
    in expression starting at /tmp/tmp88k9gtcq.jl:1\n"
  stdout: ''
  timestamp: 1659805855
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    max_length = 0\n    max_length_prefix\
    \ = 0\n    max_length_suffix = 0\n    max_length_prefix_suffix = 0\n    max_length_prefix_suffix_length\
    \ = 0\n    max_length_prefix_suffix_length_counter = 0\n    max_length_prefix_suffix_length_counter2\
    \ = 0\n    max_length_prefix_suffix_length_counter3 = 0\n    max_length_prefix_suffix_length_counter4\
    \ = 0\n    max_length_prefix_suffix_length_counter5 = 0\n    max_length_prefix_suffix_length_counter6\
    \ = 0\n    max_length_prefix_suffix_length_counter7 = 0\n    max_length_prefix_suffix_length_counter8\
    \ = 0\n    max_length_prefix_suffix_length_counter9 = 0\n    max_length_prefix_suffix_length_counter10\
    \ = 0\n    max_length_prefix_suffix_length_counter11 = 0\n    max_length_prefix_suffix_length_counter12\
    \ = 0\n    max_length_prefix_suffix_length_counter13 = 0\n    max_length_prefix_suffix_length_counter14\
    \ = 0\n    max_length_prefix_suffix_length_counter15 = 0\n    max_length_prefix_suffix_length_counter16\
    \ = 0\n    max_length_prefix_suffix_length_counter17 = 0\n    max_length_prefix_suffix_length_counter18\
    \ = 0\n    max_length_prefix_suffix_length_counter19 = 0\n    max_length_prefix_suffix_length_counter20\
    \ = 0\n    max_length_prefix_suffix_length_counter21 = 0\n    max_length_prefix_suffix_length_counter22\
    \ = 0\n    max_length_prefix_suffix_length_counter23 = 0\n    max_length_prefix_suffix_length_counter24\
    \ = 0\n    max_length_prefix_suffix_length_counter25 = 0\n    max_length_prefix_suffix_length_counter26\
    \ = 0\n    max_length_prefix_suffix_length_counter27 = 0\n    max_length_prefix_suffix_length_counter28\
    \ = 0\n    max_length_prefix_suffix_length_counter29 = 0\n    max_length_prefix_suffix_length_counter30\
    \ = 0\n    max_length_prefix_suffix_length_counter31 = 0\n    max_length_prefix_suffix_length_counter32\
    \ = 0\n    max_length_prefix_suffix_length_counter33 = 0\n    max_length_prefix_suffix_length_counter34\
    \ = 0\n    max_length_prefix_suffix_length_counter35 = 0\n    max_length_prefix_suffix_length_counter36\
    \ = 0\n    max_length_prefix_suffix_length_counter37 = 0\n    max_length_prefix_suffix_length_counter38\
    \ = 0\n    max_length_prefix_suffix_length_counter39 = 0\n    max_length_prefix_suffix_length_counter40\
    \ = 0\n    max_length_prefix_suffix_length_counter41 = 0\n    max_length_prefix_suffix_length_counter42\
    \ = 0\n    max_length_prefix_suffix_length_counter43 = 0\n    max_length_prefix_suffix_length_counter44\n\
    using Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp2fohcg5.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp2fohcg5.jl:1\n\
    in expression starting at /tmp/tmpp2fohcg5.jl:1\n"
  stdout: ''
  timestamp: 1659805857
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    longest_postfix_palindrome\
    \ = longest_postfix_palindrome(string)\n    \n    prefix_palindrome = string[longest_postfix_palindrome..end]\n\
    \    \n    prefix_palindrome = reverse(prefix_palindrome)\n    \n    prefix_palindrome\
    \ = prefix_palindrome + longest_postfix_palindrome\n    \n    return prefix_palindrome\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpqmkjnxnr.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpqmkjnxnr.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: longest_postfix_palindrome\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpqmkjnxnr.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqmkjnxnr.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqmkjnxnr.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpqmkjnxnr.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: longest_postfix_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpqmkjnxnr.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqmkjnxnr.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqmkjnxnr.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpqmkjnxnr.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_postfix_palindrome\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpqmkjnxnr.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqmkjnxnr.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqmkjnxnr.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpqmkjnxnr.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_postfix_palindrome not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpqmkjnxnr.jl:8\n   [2] macro expa"
  timestamp: 1659805859
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    prefix_length = string.findFirst(\"\
    \ \") \n    \n    prefix_string = string[prefix_length..-1]\n    \n    suffix_length\
    \ = string.findFirst(\" \", prefix_length) \n    \n    suffix_string = string[prefix_length..suffix_length]\n\
    \    \n    prefix_reversed_string = reverse(prefix_string)\n    \n    suffix_reversed_string\
    \ = reverse(suffix_string)\n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"..-\" near column 42\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmhzbzizn.jl:10\nin expression starting at\
    \ /tmp/tmpmhzbzizn.jl:10\n"
  stdout: ''
  timestamp: 1659805857
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    longest_postfix_string =\
    \ longest_palindrome(string)\n    \n    if longest_postfix_string == \"\"\n  \
    \      return string\n    \n    longest_postfix_string = longest_postfix_string[::-1]\n\
    \    \n    prefix_string = string[longest_postfix_string.end-1:end]\n    \n  \
    \  return prefix_string + longest_postfix_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t\
    @test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\" or separator in arguments to \"\
    [ ]\"; got \"::-1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0z0arrbs.jl:13\n\
    in expression starting at /tmp/tmp0z0arrbs.jl:13\n"
  stdout: ''
  timestamp: 1659805857
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    max_length_postfix_length\
    \ = 0\n    max_length_prefix_length = 0\n    \n    for i = 1:length(string)\n\
    \        \n        if string[i] == string[length(string) - i]\n            max_length\
    \ = length(string)\n            max_length_postfix_length = i\n            max_length_prefix_length\
    \ = length(string) - i\n            break\n        end\n    end\n    \n    max_length_postfix\
    \ = string[max_length_postfix_length..end]\n    max_length_prefix = string[1:max_length_prefix_length]\n\
    \    \n    return max_length_postfix + reverse(max_length_prefix)\nend\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindro\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t\
    @test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb75h2cav.jl:27\nin expression starting at\
    \ /tmp/tmpb75h2cav.jl:27\n"
  stdout: ''
  timestamp: 1659805857
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    prefix_length::Int = length(prefix(string))\n\
    \    \n    suffix_length::Int = length(suffix(string))\n    \n    max_length::Int\
    \ = prefix_length + suffix_length\n    \n    max_length = max_length - 1 \n  \
    \  \n    max_length = max_length if max_length > 0 else 1\n    \n    max_length\
    \ = max_length if max_length < max_length else max_length\n    \n    max_length\
    \ = max_length if max_length > 0 else 1\n    \n    max_length = max_length if\
    \ max_length < max_length else max_length\n    \n    max_length = max_length if\
    \ max_length > 0 else 1\n    \n    max_length = max_length if max_length < max_length\
    \ else max_length\n    \n    max_length = max_length if max_length > 0 else 1\n\
    \    \n    max_length = max_length if max_length < max_length else max_length\n\
    \    \n    max_length = max_length if max_length > 0 else 1\n    \n    max_length\
    \ = max_length if max_length < max_length else max_length\n    \n    max_length\
    \ = max_length if max_length > 0 else 1\n    \n    max_length = max_length if\
    \ max_length < max_length else max_length\n    \n    max_length = max_length if\
    \ max_length > 0 else 1\n    \n    max_length = max_length if max_length < max_length\
    \ else max_length\n    \n    max_length = max_length if max_length > 0 else 1\n\
    \    \n    max_length = max_length if max_length < max_length else max_length\n\
    \    \n    max_length = max_length if max_length > 0 else 1\n    \n    max_length\
    \ = max_length if max_length < max_length else max_length\n    \n    max_length\
    \ = max_length if max_length > 0 else 1\n    \n    max_length = max_length if\
    \ max_length < max_length else max_length\n    \n    max_length = max_length if\
    \ max_length > 0 else 1\n    \n    max_length = max_length if max_length < max_length\
    \ else max_length\n    \n    max_length = max_length if max_length > 0 else 1\n\
    \    \n    max_length = max_length if max_length < max_length else max_length\n\
    \    \n    max_length = max_length if max_length > 0 else 1\n    \n    max_length\
    \ = max_length if max_length < max_length else max_length\n    \n    max_length\
    \ = max_length if max_length > 0 else 1\n    \n    max_length = max_length if\
    \ max_length < max_length else max_length\n    \n    max_length = max_length if\
    \ max_length > 0 else 1\n    \n    max_length = max_length if max_length < max_length\
    \ else max_length\n    \n    max_length = max_length if max_length > 0 else 1\n\
    \    \n    max_length = max_length if max_length < max_length else max_length\n\
    \    \n    max_length = max_length if max_length > 0 else 1\n    \n    max_length\
    \ = max_length if max_length < max_length else max_length\n    \n    max_length\
    \ = max_length if max_length > 0 else 1\n    \n    max_length = max_length if\
    \ max_length < max_length else max_length\n    \n    max_length = max_length if\
    \ max_length > 0 else 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpf9kj8fd1.jl:6 expected\
    \ \"end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf9kj8fd1.jl:16\n\
    in expression starting at /tmp/tmpf9kj8fd1.jl:16\n"
  stdout: ''
  timestamp: 1659805857
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    longest_postfix_palindrome\
    \ = longest_postfix_palindrome(string)\n    \n    if longest_postfix_palindrome\
    \ == \"\"\n        return string\n    \n    prefix_palindrome = string[longest_postfix_palindrome..end]\n\
    \    \n    prefix_palindrome_reversed = reverse(prefix_palindrome)\n    \n   \
    \ prefix_palindrome_with_postfix = prefix_palindrome + prefix_palindrome_reversed\n\
    \    \n    return prefix_palindrome_with_postfix\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t\
    @test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7wz4bcod.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7wz4bcod.jl:1\n\
    in expression starting at /tmp/tmp7wz4bcod.jl:1\n"
  stdout: ''
  timestamp: 1659805857
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp88k9gtcq.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp88k9gtcq.jl:1\n\
    in expression starting at /tmp/tmp88k9gtcq.jl:1\n"
  stdout: ''
  timestamp: 1659805855
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    max_length = length(string)\n\
    \    max_length = max_length - max_length % 2\n    max_length = max_length + max_length\
    \ / 2\n    max_length = max_length + max_length / 2\n    max_length = max_length\
    \ + max_length / 2\n    max_length = max_length + max_length / 2\n    max_length\
    \ = max_length + max_length / 2\n    max_length = max_length + max_length / 2\n\
    \    max_length = max_length + max_length / 2\n    max_length = max_length + max_length\
    \ / 2\n    max_length = max_length + max_length / 2\n    max_length = max_length\
    \ + max_length / 2\n    max_length = max_length + max_length / 2\n    max_length\
    \ = max_length + max_length / 2\n    max_length = max_length + max_length / 2\n\
    \    max_length = max_length + max_length / 2\n    max_length = max_length + max_length\
    \ / 2\n    max_length = max_length + max_length / 2\n    max_length = max_length\
    \ + max_length / 2\n    max_length = max_length + max_length / 2\n    max_length\
    \ = max_length + max_length / 2\n    max_length = max_length + max_length / 2\n\
    \    max_length = max_length + max_length / 2\n    max_length = max_length + max_length\
    \ / 2\n    max_length = max_length + max_length / 2\n    max_length = max_length\
    \ + max_length / 2\n    max_length = max_length + max_length / 2\n    max_length\
    \ = max_length + max_length / 2\n    max_length = max_length + max_length / 2\n\
    \    max_length = max_length + max_length / 2\n    max_length = max_length + max_length\
    \ / 2\n    max_length = max_length + max_length / 2\n    max_length = max_length\
    \ + max_length / 2\n    max_length = max_length + max_length / 2\n    max_length\
    \ = max_length + max_length / 2\n    max_length = max_length + max_length / 2\n\
    \    max_length = max_length + max_length / 2\n    max_length = max_length + max_length\
    \ / 2\n    max_length = max_length + max_length / 2\n    max_length = max_length\
    \ + max_length / 2\n    max_length = max_length + max_length / 2\n    max_length\
    \ = max_length + max_length / 2\n    max_length = max_length + max_length / 2\n\
    \    max_length = max_length + max_length / 2\n    max_length = max_length + max_length\
    \ / 2\n    max_length = max_length + max_length / 2\n    max_length = max_length\
    \ + max_length / 2\n    max_length = max_length + max_length / 2\n    max_length\
    \ = max_length + max_length / 2\n    max_length = max_length + max_length / 2\n\
    \    max_length = max_length + max_length / 2\n    max_length = max_length + max_length\
    \ / 2\n    max_length = max_length + max_length / 2\n    max_length = max_length\
    \ + max_length / 2\n    max_length = max_length + max_length / 2\n    max_length\
    \ = max_length + max_length / 2\n    max_length = max_length + max_length / 2\n\
    \    max_length\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5wfk9t1t.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5wfk9t1t.jl:1\n\
    in expression starting at /tmp/tmp5wfk9t1t.jl:1\n"
  stdout: ''
  timestamp: 1659805857
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp88k9gtcq.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp88k9gtcq.jl:1\n\
    in expression starting at /tmp/tmp88k9gtcq.jl:1\n"
  stdout: ''
  timestamp: 1659805855
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    max_length_postfix_length\
    \ = 0\n    \n    for c in string\n        max_length = max_length if max_length\
    \ < length(c) else length(c)\n        max_length_postfix_length = max_length_postfix_length\
    \ if max_length_postfix_length < length(reverse(c)) else length(reverse(c))\n\
    \    end\n    \n    max_length_postfix_length = max_length_postfix_length if max_length_postfix_length\
    \ > 0 else 1\n    \n    max_length = max_length if max_length > 0 else 1\n   \
    \ \n    max_length_postfix_length = max_length_postfix_length if max_length_postfix_length\
    \ > 0 else 1\n    \n    max_length = max_length if max_length > 0 else 1\n   \
    \ \n    max_length_postfix_length = max_length_postfix_length if max_length_postfix_length\
    \ > 0 else 1\n    \n    max_length = max_length if max_length > 0 else 1\n   \
    \ \n    max_length_postfix_length = max_length_postfix_length if max_length_postfix_length\
    \ > 0 else 1\n    \n    max_length = max_length if max_length > 0 else 1\n   \
    \ \n    max_length_postfix_length = max_length_postfix_length if max_length_postfix_length\
    \ > 0 else 1\n    \n    max_length = max_length if max_length > 0 else 1\n   \
    \ \n    max_length_postfix_length = max_length_postfix_length if max_length_postfix_length\
    \ > 0 else 1\n    \n    max_length = max_length if max_length > 0 else 1\n   \
    \ \n    max_length_postfix_length = max_length_postfix_length if max_length_postfix_length\
    \ > 0 else 1\n    \n    max_length = max_length if max_length > 0 else 1\n   \
    \ \n    max_length_postfix_length = max_length_postfix_length if max_length_postfix_length\
    \ > 0 else 1\n    \n    max_length = max_length if max_length > 0 else 1\n   \
    \ \n    max_length_postfix_length = max_length_postfix_length if max_length_postfix_length\
    \ > 0 else 1\n    \n    max_length = max_length if max_length > 0 else 1\n   \
    \ \n    max_length_postfix_length = max_length_postfix_length if max_length_postfix_length\
    \ > 0 else 1\n    \n    max_length = max_length if max_length > 0 else 1\n   \
    \ \n    max_length_postfix_length = max_length_postfix_length if max_length_postfix_length\
    \ > 0 else 1\n    \n    max_length = max_length if max_length > 0 else 1\n   \
    \ \n    max_length_postfix_length = max_length_postfix_length if max_length_postfix_length\
    \ > 0 else 1\n    \n    max_length = max_length if max_length > 0 else 1\n   \
    \ \n    max_length_postfix_length = max_length_postfix_length if max_length_postfix_length\
    \ > 0 else 1\n    \n    max_length = max_length if max_length > 0 else 1\n   \
    \ \n    max_length_\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp0lilb234.jl:11 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0lilb234.jl:12\n\
    in expression starting at /tmp/tmp0lilb234.jl:12\n"
  stdout: ''
  timestamp: 1659805857
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    max_length_postfix_length\
    \ = 0\n    \n    for c in string\n        if c != string[max_length]\n       \
    \     max_length_postfix_length = max_length_postfix_length + 1\n            max_length\
    \ = max_length + 1\n        end\n    end\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + 1\n    \n    max_length_postfix_string = \"\"\n\
    \    \n    for i = max_length_postfix_length\n        max_length_postfix_string\
    \ = max_length_postfix_string + string[max_length_postfix_length-i-1]\n    end\n\
    \    \n    max_length_postfix_string = reverse(max_length_postfix_string)\n  \
    \  \n    max_length_postfix_string = max_length_postfix_string + string[max_length_postfix_length]\n\
    \    \n    return max_length_postfix_string\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpbt9rppa0.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmpbt9rppa0.jl:37\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  BoundsError: attempt to access empty\
    \ String at index [-1]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102 [inlined]\n   [3]\
    \ getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4] make_palindrome(string::String)\n\
    \     @ Main /tmp/tmpbt9rppa0.jl:23\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpbt9rppa0.jl:37 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpbt9rppa0.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpbt9rppa0.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  BoundsError: attempt to access 1-codeunit String\
    \ at index [0]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102 [inlined]\n   [3]\
    \ getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4] make_palindrome(string::String)\n\
    \     @ Main /tmp/tmpbt9rppa0.jl:12\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpbt9rppa0.jl:38 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpbt9rppa0.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpbt9rppa0.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  BoundsError: attempt to access 3-codeunit\
    \ String at index [0]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102 [inlined]\n   [3]\
    \ getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4] make_palindrome(string::String)\n\
    \     @ Main /tmp/tmpbt9rppa0.jl:12\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/std"
  timestamp: 1659805859
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    max_length_suffix\
    \ = 0\n    \n    for c in string:\n        if c == 'a' or c == 'b' or c == 'c'\
    \ or c == 'd' or c == 'e' or c == 'f' or c == 'g' or c == 'h' or c == 'i' or c\
    \ == 'j' or c == 'k' or c == 'l' or c == 'm' or c == 'n' or c == 'o' or c == 'p'\
    \ or c == 'q' or c == 'r' or c == 's' or c == 't' or c == 'u' or c == 'v' or c\
    \ == 'w' or c == 'x' or c == 'y' or c == 'z':\n            continue\n        \n\
    \        max_length = max_length + 1\n        \n        if max_length > max_length_suffix:\n\
    \            max_length_suffix = max_length\n            \n    max_length_suffix\
    \ = max_length_suffix + 1\n    \n    max_length_postfix = max_length - max_length_suffix\n\
    \    \n    max_length_postfix_reverse = max_length_postfix - 1\n    \n    max_length_postfix_reverse\
    \ = max_length_postfix_reverse + 1\n    \n    max_length_postfix_reverse = max_length_postfix_reverse\
    \ + 1\n    \n    max_length_postfix_reverse = max_length_postfix_reverse + 1\n\
    \    \n    max_length_postfix_reverse = max_length_postfix_reverse + 1\n    \n\
    \    max_length_postfix_reverse = max_length_postfix_reverse + 1\n    \n    max_length_postfix_reverse\
    \ = max_length_postfix_reverse + 1\n    \n    max_length_postfix_reverse = max_length_postfix_reverse\
    \ + 1\n    \n    max_length_postfix_reverse = max_length_postfix_reverse + 1\n\
    \    \n    max_length_postfix_reverse = max_length_postfix_reverse + 1\n    \n\
    \    max_length_postfix_reverse = max_length_postfix_reverse + 1\n    \n    max_length_postfix_reverse\
    \ = max_length_postfix_reverse + 1\n    \n    max_length_postfix_reverse = max_length_postfix_reverse\
    \ + 1\n    \n    max_length_postfix_reverse = max_length_postfix_reverse + 1\n\
    \    \n    max_length_postfix_reverse = max_length_postfix_reverse + 1\n    \n\
    \    max_length_postfix_reverse = max_length_postfix_reverse + 1\n    \n    max_length_postfix_reverse\
    \ = max_length_postfix_reverse + 1\n    \n    max_length_postfix_reverse = max_length_postfix_reverse\
    \ + 1\n    \n    max_length_postfix_reverse = max_length_postfix_reverse + 1\n\
    \    \n    max_length_postfix_reverse = max_length_postfix_reverse + 1\n    \n\
    \    max_length_postfix_reverse = max_length_postfix_reverse + 1\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp048h9r3a.jl:12\nin expression starting at\
    \ /tmp/tmp048h9r3a.jl:12\n"
  stdout: ''
  timestamp: 1659805857
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp88k9gtcq.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp88k9gtcq.jl:1\n\
    in expression starting at /tmp/tmp88k9gtcq.jl:1\n"
  stdout: ''
  timestamp: 1659805855
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    max_length_postfix_length\
    \ = 0\n    \n    for c in string:\n        if c == '_':\n            max_length_postfix_length\
    \ = max_length_postfix_length + 1\n        else:\n            max_length_postfix_length\
    \ = max_length_postfix_length + 1\n            \n        if max_length_postfix_length\
    \ > max_length:\n            max_length = max_length_postfix_length\n        \
    \    \n    max_length_postfix_length = max_length_postfix_length + 1\n    \n \
    \   max_length = max_length + 1\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + 1\n    \n    max_length = max_length + 1\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + 1\n    \n    max_length = max_length + 1\n   \
    \ \n    max_length_postfix_length = max_length_postfix_length + 1\n    \n    max_length\
    \ = max_length + 1\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + 1\n    \n    max_length = max_length + 1\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + 1\n    \n    max_length = max_length + 1\n   \
    \ \n    max_length_postfix_length = max_length_postfix_length + 1\n    \n    max_length\
    \ = max_length + 1\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + 1\n    \n    max_length = max_length + 1\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + 1\n    \n    max_length = max_length + 1\n   \
    \ \n    max_length_postfix_length = max_length_postfix_length + 1\n    \n    max_length\
    \ = max_length + 1\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + 1\n    \n    max_length = max_length + 1\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + 1\n    \n    max_length = max_length + 1\n   \
    \ \n    max_length_postfix_length = max_length_postfix_length + 1\n    \n    max_length\
    \ = max_length + 1\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + 1\n    \n    max_length = max_length + 1\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + 1\n    \n    max_length = max_length + 1\n   \
    \ \n    max_length_postfix_length = max_length_postfix_length + 1\n    \n    max_length\
    \ = max_length + 1\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + 1\n    \n    max_length = max_length + 1\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + 1\n    \n    max_length = max_length + 1\n   \
    \ \n    max_length_postfix_length = max_length_postfix_length + 1\n    \n    max_length\
    \ = max_length + 1\n    \nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkyqotcvh.jl:12\nin expression starting at\
    \ /tmp/tmpkyqotcvh.jl:12\n"
  stdout: ''
  timestamp: 1659805857
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    max_length_postfix\
    \ = \"\"\n    max_length_prefix = \"\"\n    \n    for c in string\n        if\
    \ isPalindrome(c)\n            max_length = length(c)\n            max_length_postfix\
    \ = reverse(c)\n            max_length_prefix = reverse(string[1:max_length])\n\
    \            \n            \n    return max_length_prefix + max_length_postfix\
    \ + string[max_length+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpi9snpwiu.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi9snpwiu.jl:1\n\
    in expression starting at /tmp/tmpi9snpwiu.jl:1\n"
  stdout: ''
  timestamp: 1659805857
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    max_length_postfix_length\
    \ = 0\n    \n    for char in string\n        \n        if char == char\n     \
    \       max_length = max_length + 1\n            max_length_postfix_length = max_length_postfix_length\
    \ + 1\n        else\n            max_length = max_length + 1\n            max_length_postfix_length\
    \ = max_length_postfix_length + 1\n        end\n    end\n    \n    max_length\
    \ = max_length + 1\n    max_length_postfix_length = max_length_postfix_length\
    \ + 1\n    \n    max_length_postfix_length = max_length_postfix_length + max_length\n\
    \    \n    max_length_postfix_length = max_length_postfix_length + max_length\n\
    \    \n    max_length_postfix_length = max_length_postfix_length + max_length\n\
    \    \n    max_length_postfix_length = max_length_postfix_length + max_length\n\
    \    \n    max_length_postfix_length = max_length_postfix_length + max_length\n\
    \    \n    max_length_postfix_length = max_length_postfix_length + max_length\n\
    \    \n    max_length_postfix_length = max_length_postfix_length + max_length\n\
    \    \n    max_length_postfix_length = max_length_postfix_length + max_length\n\
    \    \n    max_length_postfix_length = max_length_postfix_length + max_length\n\
    \    \n    max_length_postfix_length = max_length_postfix_length + max_length\n\
    \    \n    max_length_postfix_length = max_length_postfix_length + max_length\n\
    \    \n    max_length_postfix_length = max_length_postfix_length + max_length\n\
    \    \n    max_length_postfix_length = max_length_postfix_length + max_length\n\
    \    \n    max_length_postfix_length = max_length_postfix_length + max_length\n\
    \    \n    max_length_postfix_length = max_length_postfix_length + max_length\n\
    \    \n    max_length_postfix_length = max_length_postfix_length + max_length\n\
    \    \n    max_length_postfix_length = max_length_postfix_length + max_length\n\
    \    \n    max_length_postfix_length = max_length_postfix_length + max_length\n\
    \    \n    max_length_postfix_length = max_length_postfix_length + max_length\n\
    \    \n    max_length_postfix_length = max_length_postfix_length + max_length\n\
    \    \n    max_length_postfix_length = max_length_postfix_length + max_length\n\
    \    \n    max_length_postfix_length = max_length_postfix_length + max_length\n\
    \    \n    max_length_postfix_length = max_length_postfix_length + max_length\n\
    \    \n    max_length_postfix_length = max_length_postfix_length + max_length\n\
    \    \n    max_length_postfix_length = max_length_postfix_length + max_length\n\
    \    \n    max_length_postfix_length = max_length_postfix_length + max_length\n\
    \    \n    max_length\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnea48zeq.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnea48zeq.jl:1\n\
    in expression starting at /tmp/tmpnea48zeq.jl:1\n"
  stdout: ''
  timestamp: 1659805857
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp88k9gtcq.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp88k9gtcq.jl:1\n\
    in expression starting at /tmp/tmp88k9gtcq.jl:1\n"
  stdout: ''
  timestamp: 1659805855
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp88k9gtcq.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp88k9gtcq.jl:1\n\
    in expression starting at /tmp/tmp88k9gtcq.jl:1\n"
  stdout: ''
  timestamp: 1659805855
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    \n \
    \   for c in string\n        max_length = maximum(max_length, length(c))\n   \
    \ end\n    \n    max_length = maximum(max_length, length(string(string)))\n  \
    \  \n    max_length = maximum(max_length, length(string(string(string))))\n  \
    \  \n    max_length = maximum(max_length, length(string(string(string(string)))))\n\
    \    \n    max_length = maximum(max_length, length(string(string(string(string(string))))))\
    \ \n    \n    max_length = maximum(max_length, length(string(string(string(string(string(string))))))\
    \ \n    \n    max_length = maximum(max_length, length(string(string(string(string(string(string(string))))))\
    \ ) \n    \n    max_length = maximum(max_length, length(string(string(string(string(string(string(string(string(string))))))\
    \ ) ) \n    \n    max_length = maximum(max_length, length(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(\n\
    using Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnm859n9h.jl:24\nin expression starting at\
    \ /tmp/tmpnm859n9h.jl:24\n"
  stdout: ''
  timestamp: 1659805859
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    \n \
    \   for c in string:\n        if c not in \"abcdefghijklmnopqrstuvwxyz\":\n  \
    \          max_length = max_length + 1\n            \n    if max_length == 0:\n\
    \        return string\n    \n    max_length = max_length - 1\n    \n    prefix_string\
    \ = \"\"\n    \n    for c in string:\n        if c not in \"abcdefghijklmnopqrstuvwxyz\"\
    :\n            prefix_string = prefix_string + c\n    \n    prefix_string = prefix_string\
    \ + string[max_length]\n    \n    prefix_string = prefix_string[::-1]\n    \n\
    \    suffix_string = \"\"\n    \n    for c in string:\n        if c not in \"\
    abcdefghijklmnopqrstuvwxyz\":\n            suffix_string = suffix_string + c\n\
    \    \n    suffix_string = suffix_string + string[max_length]\n    \n    suffix_string\
    \ = suffix_string[::-1]\n    \n    prefix_string = prefix_string[::-1]\n    \n\
    \    return prefix_string + suffix_string\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbc9l982g.jl:11\nin expression starting at\
    \ /tmp/tmpbc9l982g.jl:11\n"
  stdout: ''
  timestamp: 1659805859
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    \n \
    \   for c in string\n        max_length = max_length if max_length < length(c)\
    \ else length(c)\n    end\n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length if max_length < length(string) else length(string)\n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length if max_length < length(string) else length(string)\n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length if max_length < length(string) else length(string)\n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length if max_length < length(string) else length(string)\n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length if max_length < length(string) else length(string)\n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length if max_length < length(string) else length(string)\n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length if max_length < length(string) else length(string)\n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length if max_length < length(string) else length(string)\n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length if max_length < length(string) else length(string)\n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length if max_length < length(string) else length(string)\n    \n    max_length\
    \ = max_length + 1 \n    \nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpciko4xzx.jl:10 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpciko4xzx.jl:11\n\
    in expression starting at /tmp/tmpciko4xzx.jl:11\n"
  stdout: ''
  timestamp: 1659805859
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    max_length_postfix_length\
    \ = 0\n    \n    for c in string\n        if c != string[max_length]\n       \
    \     max_length = max_length + 1\n            max_length_postfix_length = max_length_postfix_length\
    \ + 1\n        end\n    end\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ - 1\n    \n    max_length_postfix_string = \"\"\n    \n    for i = max_length_postfix_length\n\
    \        max_length_postfix_string = max_length_postfix_string + string[max_length_postfix_length]\n\
    \    end\n    \n    max_length_postfix_string = reverse(max_length_postfix_string)\n\
    \    \n    max_length_postfix_string = max_length_postfix_string + string[max_length]\n\
    \    \n    return max_length_postfix_string\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp18twy3fp.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmp18twy3fp.jl:37\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  BoundsError: attempt to access empty\
    \ String at index [-1]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102 [inlined]\n   [3]\
    \ getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4] make_palindrome(string::String)\n\
    \     @ Main /tmp/tmp18twy3fp.jl:23\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp18twy3fp.jl:37 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp18twy3fp.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp18twy3fp.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  BoundsError: attempt to access 1-codeunit String\
    \ at index [0]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102 [inlined]\n   [3]\
    \ getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4] make_palindrome(string::String)\n\
    \     @ Main /tmp/tmp18twy3fp.jl:12\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp18twy3fp.jl:38 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp18twy3fp.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp18twy3fp.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  BoundsError: attempt to access 3-codeunit\
    \ String at index [0]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102 [inlined]\n   [3]\
    \ getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4] make_palindrome(string::String)\n\
    \     @ Main /tmp/tmp18twy3fp.jl:12\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/std"
  timestamp: 1659805861
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    \n \
    \   for c in string\n        max_length = length(c) > max_length ? length(c) :\
    \ max_length\n    end\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2 == 0 ? max_length + 1 : max_length\n    \n    max_length =\
    \ max_length / 2\n    \n    max_length = max_length % 2 == 0 ? max_length + 1\
    \ : max_length\n    \n    max_length = max_length / 2\n    \n    max_length =\
    \ max_length % 2 == 0 ? max_length + 1 : max_length\n    \n    max_length = max_length\
    \ / 2\n    \n    max_length = max_length % 2 == 0 ? max_length + 1 : max_length\n\
    \    \n    max_length = max_length / 2\n    \n    max_length = max_length % 2\
    \ == 0 ? max_length + 1 : max_length\n    \n    max_length = max_length / 2\n\
    \    \n    max_length = max_length % 2 == 0 ? max_length + 1 : max_length\n  \
    \  \n    max_length = max_length / 2\n    \n    max_length = max_length % 2 ==\
    \ 0 ? max_length + 1 : max_length\n    \n    max_length = max_length / 2\n   \
    \ \n    max_length = max_length % 2 == 0 ? max_length + 1 : max_length\n    \n\
    \    max_length = max_length / 2\n    \n    max_length = max_length % 2 == 0 ?\
    \ max_length + 1 : max_length\n    \n    max_length = max_length / 2\n    \n \
    \   max_length = max_length % 2 == 0 ? max_length + 1 : max_length\n    \n   \
    \ max_length = max_length / 2\n    \n    max_length = max_length % 2 == 0 ? max_length\
    \ + 1 : max_length\n    \n    max_length = max_length / 2\n    \n    max_length\
    \ = max_length % 2 == 0 ? max_length + 1 : max_length\n    \n    max_length =\
    \ max_length / 2\n    \n    max_length = max_length % 2 == 0 ? max_length + 1\
    \ : max_length\n    \n    max_length = max_length / 2\n    \n    max_length =\
    \ max_length % 2 == 0 ? max_length + 1 : max_length\n    \n    max_length = max_length\
    \ / 2\n    \n    max_length = max_length % 2 == 0 ? max_length + 1 : max_length\n\
    \    \n    max_length = max_length / 2\n    \n    max_length = max_length % 2\
    \ == 0 ? max_length + 1 : max_length\n    \n    max_length = max_length / 2\n\
    \    \n    max_length = max_length % 2 == 0 ? max_length + 1 : max_length\n  \
    \  \n    max_length = max_length / 2\n    \n    max_length = max_length % 2 ==\
    \ 0 ? max_length + 1 : max_length\n    \n    max_length = max_length / 2\n   \
    \ \n    max_length = max_length % 2 == 0 ? max_length + 1 : max_length\n    \n\
    \    max_length = max_length / 2\n    \n    max_length = max_length % 2 == 0 ?\
    \ max_length + 1 : max_length\n    \n    max_length = max_length / 2\n    \n \
    \   max_length = max_length % 2 == 0 ? max_length + 1 : max_length\n    \n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcy69_r6x.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcy69_r6x.jl:1\n\
    in expression starting at /tmp/tmpcy69_r6x.jl:1\n"
  stdout: ''
  timestamp: 1659805859
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    longestPalindrome = \"\"\
    \n    \n    for char in string:\n        \n        longestPalindrome += char\n\
    \        \n        if char == char.reverse and longestPalindrome != \"\":\n  \
    \          \n            longestPalindrome += char.reverse\n            \n   \
    \ return longestPalindrome\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm_0d4vqq.jl:11\nin expression starting at\
    \ /tmp/tmpm_0d4vqq.jl:11\n"
  stdout: ''
  timestamp: 1659805859
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    max_length_postfix_length\
    \ = 0\n    max_length_prefix_length = 0\n    \n    for c in string:\n        if\
    \ c == '_':\n            max_length_postfix_length = max_length_postfix_length\
    \ + 1\n        elif c == '^':\n            max_length_prefix_length = max_length_prefix_length\
    \ + 1\n        else:\n            max_length = max_length + 1\n    \n    if max_length_postfix_length\
    \ == max_length:\n        return string\n    \n    if max_length_prefix_length\
    \ == max_length:\n        return string\n    \n    max_length_postfix_length =\
    \ max_length_postfix_length + 1\n    max_length_prefix_length = max_length_prefix_length\
    \ + 1\n    \n    max_length = max_length + 1\n    \n    prefix_postfix = string[0:max_length_prefix_length]\n\
    \    postfix_prefix = string[max_length_prefix_length:]\n    \n    reversed_prefix_postfix\
    \ = reverse(prefix_postfix)\n    \n    prefix_postfix = prefix_postfix + reversed_prefix_postfix\n\
    \    \n    return prefix_postfix + postfix_prefix\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t\
    @test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphl9rhdb3.jl:13\nin expression starting at\
    \ /tmp/tmphl9rhdb3.jl:13\n"
  stdout: ''
  timestamp: 1659805859
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    \n \
    \   for c in string:\n        if max_length < length(c):\n            max_length\
    \ = length(c)\n    \n    max_length = max_length + 1 \n    \n    prefix_string\
    \ = \"\"\n    \n    for c in string:\n        if length(c) == max_length:\n  \
    \          prefix_string = prefix_string + c\n        else:\n            prefix_string\
    \ = prefix_string + c\n            \n    prefix_string = prefix_string + string[max_length]\n\
    \    \n    prefix_string = prefix_string[::-1]\n    \n    return prefix_string\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkqnjktba.jl:11\nin expression starting at\
    \ /tmp/tmpkqnjktba.jl:11\n"
  stdout: ''
  timestamp: 1659805859
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    max_length_postfix_length\
    \ = 0\n    \n    for c in string:\n        if c == '.':\n            max_length_postfix_length\
    \ = max_length_postfix_length + 1\n        else:\n            max_length_postfix_length\
    \ = max_length_postfix_length + 1\n            \n        if max_length_postfix_length\
    \ >= max_length:\n            max_length = max_length_postfix_length\n       \
    \     \n    max_length_postfix_length = max_length_postfix_length + 1\n    \n\
    \    max_length_prefix_length = 0\n    \n    for c in string:\n        if c ==\
    \ '.':\n            max_length_prefix_length = max_length_prefix_length + 1\n\
    \        else:\n            max_length_prefix_length = max_length_prefix_length\
    \ + 1\n            \n        if max_length_prefix_length >= max_length:\n    \
    \        max_length = max_length_prefix_length\n            \n    max_length =\
    \ max_length + 1\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + 1\n    \n    max_length_postfix_length = max_length_postfix_length + 1\n \
    \   \n    max_length = max_length + 1\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + 1\n    \n    max_length = max_length + 1\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + 1\n    \n    max_length = max_length + 1\n   \
    \ \n    max_length_postfix_length = max_length_postfix_length + 1\n    \n    max_length\
    \ = max_length + 1\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + 1\n    \n    max_length = max_length + 1\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + 1\n    \n    max_length = max_length + 1\n   \
    \ \n    max_length_postfix_length = max_length_postfix_length + 1\n    \n    max_length\
    \ = max_length + 1\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + 1\n    \n    max_length = max_length + 1\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + 1\n    \n    max_length = max_length + 1\n   \
    \ \n    max_length_postfix_length = max_length_postfix_length + 1\n    \n    max_length\
    \ = max_length + 1\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + 1\n    \n    max_length = max_length + 1\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + 1\n    \n    max_length = max_length + 1\n   \
    \ \n    max_length_postfix_length = max_length_postfix_length + 1\n    \n    max_length\
    \ = max_length + 1\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + 1\n    \n    max_length = max_length + 1\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + 1\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp38d9784d.jl:12\nin expression starting at\
    \ /tmp/tmp38d9784d.jl:12\n"
  stdout: ''
  timestamp: 1659805859
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    longest_postfix_string =\
    \ longest_palindrome(string)\n    \n    longest_postfix_string = longest_postfix_string[longest_postfix_string.len()+1:end]\n\
    \    \n    longest_postfix_string = reverse(longest_postfix_string)\n    \n  \
    \  longest_postfix_string += string\n    \n    return longest_postfix_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpcqkeg7h0.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpcqkeg7h0.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: longest_palindrome not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpcqkeg7h0.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcqkeg7h0.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcqkeg7h0.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpcqkeg7h0.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpcqkeg7h0.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcqkeg7h0.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcqkeg7h0.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpcqkeg7h0.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpcqkeg7h0.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcqkeg7h0.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcqkeg7h0.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpcqkeg7h0.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpcqkeg7h0.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyg"
  timestamp: 1659805861
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    longest_postfix_palindrome\
    \ = longest_postfix_palindrome(string)\n    \n    if longest_postfix_palindrome\
    \ == \"\"\n        return string\n    end\n    \n    prefix_to_append = longest_postfix_palindrome[1..end]\n\
    \    \n    append!(string, prefix_to_append)\n    \n    append!(string, reverse(longest_postfix_palindrome[end..end-1]))\n\
    \    \n    return string\nend\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\nusing Test\n\n\
    @testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\"\
    )\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpam_cwy4h.jl:22\nin expression starting at\
    \ /tmp/tmpam_cwy4h.jl:22\n"
  stdout: ''
  timestamp: 1659805859
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    longest_postfix_length =\
    \ longest_palindrome_postfix(string)\n    \n    prefix_length = longest_postfix_length\
    \ - 1\n    \n    prefix_string = string[prefix_length..-1]\n    \n    prefix_reversed_string\
    \ = reverse(prefix_string)\n    \n    prefix_reversed_string[prefix_length..-1]\
    \ = prefix_string\n    \n    prefix_reversed_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t\
    @test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"..-\" near column 42\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmz365oct.jl:12\nin expression starting at\
    \ /tmp/tmpmz365oct.jl:12\n"
  stdout: ''
  timestamp: 1659805855
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    longest_postfix_palindrome\
    \ = find_longest_postfix_palindrome(string)\n    \n    prefix_palindrome = string[longest_postfix_palindrome..end]\n\
    \    \n    prefix_palindrome = reverse(prefix_palindrome)\n    \n    prefix_palindrome\
    \ = prefix_palindrome + longest_postfix_palindrome\n    \n    return prefix_palindrome\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpn73plfv8.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpn73plfv8.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_longest_postfix_palindrome\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpn73plfv8.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn73plfv8.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn73plfv8.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpn73plfv8.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_postfix_palindrome\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpn73plfv8.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn73plfv8.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn73plfv8.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpn73plfv8.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_postfix_palindrome\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpn73plfv8.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn73plfv8.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn73plfv8.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpn73plfv8.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_postfix_palindrome\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpn73plfv8.jl"
  timestamp: 1659805857
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    longest_postfix_of_string\
    \ = longest_postfix_of_string(string)\n    \n    prefix_of_longest_postfix = prefix_of_longest_postfix_of_string(longest_postfix_of_string)\n\
    \    \n    prefix_of_longest_postfix = prefix_of_longest_postfix.reverse\n   \
    \ \n    prefix_of_longest_postfix = prefix_of_longest_postfix.reverse\n    \n\
    \    prefix_of_longest_postfix = prefix_of_longest_postfix.reverse\n    \n   \
    \ prefix_of_longest_postfix = prefix_of_longest_postfix.reverse\n    \n    prefix_of_longest_postfix\
    \ = prefix_of_longest_postfix.reverse\n    \n    prefix_of_longest_postfix = prefix_of_longest_postfix.reverse\n\
    \    \n    prefix_of_longest_postfix = prefix_of_longest_postfix.reverse\n   \
    \ \n    prefix_of_longest_postfix = prefix_of_longest_postfix.reverse\n    \n\
    \    prefix_of_longest_postfix = prefix_of_longest_postfix.reverse\n    \n   \
    \ prefix_of_longest_postfix = prefix_of_longest_postfix.reverse\n    \n    prefix_of_longest_postfix\
    \ = prefix_of_longest_postfix.reverse\n    \n    prefix_of_longest_postfix = prefix_of_longest_postfix.reverse\n\
    \    \n    prefix_of_longest_postfix = prefix_of_longest_postfix.reverse\n   \
    \ \n    prefix_of_longest_postfix = prefix_of_longest_postfix.reverse\n    \n\
    \    prefix_of_longest_postfix = prefix_of_longest_postfix.reverse\n    \n   \
    \ prefix_of_longest_postfix = prefix_of_longest_postfix.reverse\n    \n    prefix_of_longest_postfix\
    \ = prefix_of_longest_postfix.reverse\n    \n    prefix_of_longest_postfix = prefix_of_longest_postfix.reverse\n\
    \    \n    prefix_of_longest_postfix = prefix_of_longest_postfix.reverse\n   \
    \ \n    prefix_of_longest_postfix = prefix_of_longest_postfix.reverse\n    \n\
    \    prefix_of_longest_postfix = prefix_of_longest_postfix.reverse\n    \n   \
    \ prefix_of_longest_postfix = prefix_of_longest_postfix.reverse\n    \n    prefix_of_longest_postfix\
    \ = prefix_of_longest_postfix.reverse\n    \n    prefix_of_longest_postfix = prefix_of_longest_postfix.reverse\n\
    \    \n    prefix_of_longest_postfix = prefix_of_longest_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t\
    @test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpz7c0xip6.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpz7c0xip6.jl:1\n\
    in expression starting at /tmp/tmpz7c0xip6.jl:1\n"
  stdout: ''
  timestamp: 1659805859
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = length(string)\n\
    \    \n    if max_length == 0 \n        return string\n    \n    prefix_length\
    \ = max_length - 1\n    \n    prefix_string = string[1:prefix_length]\n    \n\
    \    suffix_string = string[prefix_length..-1]\n    \n    suffix_reverse = reverse(suffix_string)\n\
    \    \n    prefix_reverse = reverse(prefix_string)\n    \n    \n    \n    return\
    \ prefix_string + suffix_reverse + prefix_reverse\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t\
    @test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"..-\" near column 42\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpassgayy5.jl:17\nin expression starting at\
    \ /tmp/tmpassgayy5.jl:17\n"
  stdout: ''
  timestamp: 1659805859
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp88k9gtcq.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp88k9gtcq.jl:1\n\
    in expression starting at /tmp/tmp88k9gtcq.jl:1\n"
  stdout: ''
  timestamp: 1659805855
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    longest_postfix_palindrome\
    \ = find_longest_postfix_palindrome(string)\n    \n    longest_postfix_palindrome\
    \ = longest_postfix_palindrome + string[longest_postfix_palindrome.length..-1]\n\
    \    \n    return longest_postfix_palindrome\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"..-\" near column 104\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcz3jlsu0.jl:10\nin expression starting at\
    \ /tmp/tmpcz3jlsu0.jl:10\n"
  stdout: ''
  timestamp: 1659805859
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    \n \
    \   for c in string\n        max_length = max_length if max_length < length(c)\
    \ else length(c)\n    end\n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = \nusing Test\n\n@testset begin\n\
    \ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpshlhmdaw.jl:10 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpshlhmdaw.jl:11\n\
    in expression starting at /tmp/tmpshlhmdaw.jl:11\n"
  stdout: ''
  timestamp: 1659805859
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    max_length_postfix_length\
    \ = 0\n    \n    for c in string:\n        if c == '_':\n            max_length_postfix_length\
    \ = max_length_postfix_length + 1\n        else:\n            max_length_postfix_length\
    \ = max_length_postfix_length + 1\n            \n        if max_length_postfix_length\
    \ > max_length:\n            max_length = max_length_postfix_length\n        \
    \    \n    max_length = max_length + 1\n    \n    max_length_postfix_length =\
    \ 0\n    \n    for c in string:\n        if c == '_':\n            max_length_postfix_length\
    \ = max_length_postfix_length + 1\n        else:\n            max_length_postfix_length\
    \ = max_length_postfix_length + 1\n            \n        if max_length_postfix_length\
    \ == max_length:\n            max_length_postfix_length = max_length_postfix_length\
    \ + 1\n            \n    max_length_postfix_length = max_length_postfix_length\
    \ + 1\n    \n    max_length_postfix_length = max_length_postfix_length + 1\n \
    \   \n    max_length_postfix_length = max_length_postfix_length + 1\n    \n  \
    \  max_length_postfix_length = max_length_postfix_length + 1\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + 1\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + 1\n    \n    max_length_postfix_length = max_length_postfix_length + 1\n \
    \   \n    max_length_postfix_length = max_length_postfix_length + 1\n    \n  \
    \  max_length_postfix_length = max_length_postfix_length + 1\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + 1\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + 1\n    \n    max_length_postfix_length = max_length_postfix_length + 1\n \
    \   \n    max_length_postfix_length = max_length_postfix_length + 1\n    \n  \
    \  max_length_postfix_length = max_length_postfix_length + 1\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + 1\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + 1\n    \n    max_length_postfix_length = max_length_postfix_length + 1\n \
    \   \n    max_length_postfix_length = max_length_postfix_length + 1\n    \n  \
    \  max_length_postfix_length = max_length_postfix_length + 1\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + 1\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + 1\n    \n    max_length_postfix_length = max_length_postfix_length + 1\n \
    \   \n    max_length_postfix_length = max_length_postfix_length + 1\n    \n  \
    \  max_length_postfix_length = max_length_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8koo361b.jl:12\nin expression starting at\
    \ /tmp/tmp8koo361b.jl:12\n"
  stdout: ''
  timestamp: 1659805859
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    longestPalindrome = \"\"\
    \n    \n    for char in string\n        \n        if isPalindrome(char)\n    \
    \        \n            longestPalindrome += char\n            \n            reversedChar\
    \ = reverse(char)\n            \n            longestPalindrome += reversedChar\n\
    \            \n        end\n    end\n    \n    return longestPalindrome\nend\n\
    using Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpar_debdw.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmpar_debdw.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: isPalindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpar_debdw.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpar_debdw.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpar_debdw.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpar_debdw.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: isPalindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpar_debdw.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpar_debdw.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpar_debdw.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpar_debdw.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: isPalindrome not defined\n \
    \ Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpar_debdw.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpar_debdw.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpar_debdw.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpar_debdw.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: isPalindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpar_debdw.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/sh"
  timestamp: 1659805861
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    max_length_postfix_length\
    \ = 0\n    \n    for c in string\n        if c != string[max_length]\n       \
    \     max_length_postfix_length += 1\n            max_length = max_length_postfix_length\n\
    \        else\n            max_length_postfix_length = 0\n        end\n    end\n\
    \    \n    max_length_postfix_length\n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\
    \ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpffi589pj.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpffi589pj.jl:1\n\
    in expression starting at /tmp/tmpffi589pj.jl:1\n"
  stdout: ''
  timestamp: 1659805859
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    \n \
    \   for c in string\n        max_length = maximum(max_length, length(c))\n   \
    \ end\n    \n    max_length = maximum(max_length, length(string(string)))\n  \
    \  \n    max_length = maximum(max_length, length(string(string, reverse(string))))\n\
    \    \n    return string(string, reverse(string))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t\
    @test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\"\
    )\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpfadxkktt.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmpfadxkktt.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  MethodError: objects of type String\
    \ are not callable\n  Stacktrace:\n   [1] make_palindrome(string::String)\n  \
    \   @ Main /tmp/tmpfadxkktt.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfadxkktt.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfadxkktt.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpfadxkktt.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  MethodError: objects of type Int64 are not callable\n\
    \  Maybe you forgot to use an operator such as *, ^, %, / etc. ?\n  Stacktrace:\n\
    \   [1] mapreduce_first(f::Int64, op::Function, x::Int64)\n     @ Base ./reduce.jl:394\n\
    \   [2] mapreduce(f::Int64, op::Function, a::Int64)\n     @ Base ./reduce.jl:421\n\
    \   [3] maximum(f::Int64, a::Int64; kw::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(),\
    \ Tuple{}}})\n     @ Base ./reduce.jl:678\n   [4] maximum(f::Int64, a::Int64)\n\
    \     @ Base ./reduce.jl:678\n   [5] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpfadxkktt.jl:11\n   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpfadxkktt.jl:26 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpfadxkktt.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpfadxkktt.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  MethodError: objects of type Int64 are not\
    \ callable\n  Maybe you forgot to use an operator such as *, ^, %, / etc. ?\n\
    \  Stacktrace:\n   [1] mapreduce_first(f::Int64, op::Function, x::Int64)\n   \
    \  @ Base ./reduce.jl:394\n   [2] mapreduce(f::Int64, op::Function, a::Int64)\n\
    \     @ Base ./reduce.jl:421\n   [3] maximum(f::Int64, a::Int64; kw"
  timestamp: 1659805862
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    \n \
    \   for c in string:\n        if c not in \"abcdefghijklmnopqrstuvwxyz\":\n  \
    \          continue\n        max_length = max_length if max_length < len(string)\
    \ else len(string)\n        \n    max_length = max_length if max_length < len(string)\
    \ else len(string)\n    \n    max_length = max_length if max_length < len(string)\
    \ else len(string)\n    \n    max_length = max_length if max_length < len(string)\
    \ else len(string)\n    \n    max_length = max_length if max_length < len(string)\
    \ else len(string)\n    \n    max_length = max_length if max_length < len(string)\
    \ else len(string)\n    \n    max_length = max_length if max_length < len(string)\
    \ else len(string)\n    \n    max_length = max_length if max_length < len(string)\
    \ else len(string)\n    \n    max_length = max_length if max_length < len(string)\
    \ else len(string)\n    \n    max_length = max_length if max_length < len(string)\
    \ else len(string)\n    \n    max_length = max_length if max_length < len(string)\
    \ else len(string)\n    \n    max_length = max_length if max_length < len(string)\
    \ else len(string)\n    \n    max_length = max_length if max_length < len(string)\
    \ else len(string)\n    \n    max_length = max_length if max_length < len(string)\
    \ else len(string)\n    \n    max_length = max_length if max_length < len(string)\
    \ else len(string)\n    \n    max_length = max_length if max_length < len(string)\
    \ else len(string)\n    \n    max_length = max_length if max_length < len(string)\
    \ else len(string)\n    \n    max_length = max_length if max_length < len(string)\
    \ else len(string)\n    \n    max_length = max_length if max_length < len(string)\
    \ else len(string)\n    \n    max_length = max_length if max_length < len(string)\
    \ else len(string)\n    \n    max_length = max_length if max_length < len(string)\
    \ else len(string)\n    \n    max_length = max_length if max_length < len(string)\
    \ else len(string)\n    \n    max_length = max_length if max_length < len(string)\
    \ else len(string)\n    \n    max_length = max_length if max_length < len(string)\
    \ else len(string)\n    \n    max_length = max_length if max_length < len(string)\
    \ else len(string)\n    \n    max_length = max_length if max_length < len(string)\
    \ else len(string)\n    \n    max_length = max_length if max_length < len(string)\
    \ else len(string)\n    \n    max_length = max_length if max_length < len(string)\
    \ else len(string)\n    \n    max_length = max_length if max_length < len(string)\
    \ else len(string)\n    \n    max_length = max_length if max_length < len(string)\
    \ else len(string)\n    \n    max_length = max_length if max_length < len(string)\
    \ else len(string)\n    \n    max_length = max_length if max_length < len(string)\
    \ else len(string)\n    \n    \nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9mprwy5k.jl:11\nin expression starting at\
    \ /tmp/tmp9mprwy5k.jl:11\n"
  stdout: ''
  timestamp: 1659805860
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    prefix_length = string.length\n\
    \    \n    if prefix_length == 0 \n        return string\n    \n    prefix_postfix\
    \ = string[prefix_length-1]\n    \n    suffix_length = prefix_length - 1\n   \
    \ \n    suffix_postfix = string[suffix_length]\n    \n    prefix_postfix = reverse(prefix_postfix)\n\
    \    \n    suffix_postfix = reverse(suffix_postfix)\n    \n    string = prefix_postfix\
    \ + suffix_postfix\n    \n    return string\nend\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    \nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfp780iyt.jl:27\nin expression starting at\
    \ /tmp/tmpfp780iyt.jl:27\n"
  stdout: ''
  timestamp: 1659805860
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    prefix_length::Int = string.size\
    \ - 1\n    \n    prefix_string::String = string[prefix_length]\n    \n    suffix_string::String\
    \ = string[prefix_length..-1]\n    \n    suffix_reverse::String = reverse(suffix_string)\n\
    \    \n    string::String = prefix_string + suffix_reverse\n    \n    return string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"..-\" near column 50\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb7hevv68.jl:12\nin expression starting at\
    \ /tmp/tmpb7hevv68.jl:12\n"
  stdout: ''
  timestamp: 1659805861
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    longest_postfix_palindrome\
    \ = find_longest_postfix_palindrome(string)\n    \n    prefix_string = string[longest_postfix_palindrome..end]\n\
    \    \n    prefix_reversed_string = reverse(prefix_string)\n    \n    prefix_reversed_string\
    \ += longest_postfix_palindrome\n    \n    return prefix_reversed_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpbbgeil0_.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpbbgeil0_.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_longest_postfix_palindrome\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpbbgeil0_.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbbgeil0_.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbbgeil0_.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpbbgeil0_.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_postfix_palindrome\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpbbgeil0_.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbbgeil0_.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbbgeil0_.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpbbgeil0_.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_postfix_palindrome\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpbbgeil0_.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbbgeil0_.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbbgeil0_.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpbbgeil0_.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_postfix_palindrome\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpbbgeil0_.jl"
  timestamp: 1659805863
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    max_length_postfix_length\
    \ = 0\n    max_length_prefix_length = 0\n    \n    for i = 1:length(string)\n\
    \        \n        postfix_length = length(string) - i\n        prefix_length\
    \ = i\n        \n        if postfix_length > max_length_postfix_length\n     \
    \       max_length_postfix_length = postfix_length\n        end\n        \n  \
    \      if prefix_length > max_length_prefix_length\n            max_length_prefix_length\
    \ = prefix_length\n        end\n    end\n    \n    max_length = max_length_postfix_length\
    \ + max_length_prefix_length\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + max_length_prefix_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length_postfix_length\n    \n    max_length = max_length_postfix_length\
    \ + max_length_prefix_length\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + max_length_prefix_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length_postfix_length\n    \n    max_length = max_length_postfix_length\
    \ + max_length_prefix_length\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + max_length_prefix_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length_postfix_length\n    \n    max_length = max_length_postfix_length\
    \ + max_length_prefix_length\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + max_length_prefix_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length_postfix_length\n    \n    max_length = max_length_postfix_length\
    \ + max_length_prefix_length\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + max_length_prefix_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length_postfix_length\n    \n    max_length = max_length_postfix_length\
    \ + max_length_prefix_length\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + max_length_prefix_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length_postfix_length\n    \n    max_length = max_length_postfix_length\
    \ + max_length_prefix_length\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + max_length_prefix_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length_postfix_length\n    \n    max_length = max_length_postfix_length\
    \ + max_length_prefix_length\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + max_length_prefix_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length_\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5w0y7zgf.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5w0y7zgf.jl:1\n\
    in expression starting at /tmp/tmp5w0y7zgf.jl:1\n"
  stdout: ''
  timestamp: 1659805861
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp88k9gtcq.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp88k9gtcq.jl:1\n\
    in expression starting at /tmp/tmp88k9gtcq.jl:1\n"
  stdout: ''
  timestamp: 1659805855
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp88k9gtcq.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp88k9gtcq.jl:1\n\
    in expression starting at /tmp/tmp88k9gtcq.jl:1\n"
  stdout: ''
  timestamp: 1659805855
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    longest_palindrome = string\n\
    \    \n    for i = length(longest_palindrome)-1:-1:1\n        \n        longest_palindrome\
    \ = longest_palindrome[1:i] + longest_palindrome[i+1:length(longest_palindrome)]\
    \ + longest_palindrome[i]\n        \n    end\n    \n    return longest_palindrome\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp40t3jygx.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmp40t3jygx.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"xyz\") == \"xyzyx\"\n  MethodError: no method matching\
    \ +(::String, ::String)\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \  Stacktrace:\n   [1] +(::String, ::String, ::Char)\n     @ Base ./operators.jl:655\n\
    \   [2] make_palindrome(string::String)\n     @ Main /tmp/tmp40t3jygx.jl:12\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp40t3jygx.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp40t3jygx.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp40t3jygx.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  MethodError: no method matching +(::String,\
    \ ::String)\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n  Stacktrace:\n\
    \   [1] +(::String, ::String, ::Char)\n     @ Base ./operators.jl:655\n   [2]\
    \ make_palindrome(string::String)\n     @ Main /tmp/tmp40t3jygx.jl:12\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp40t3jygx.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp40t3jygx.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp40t3jygx.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  MethodError: no method matching +(::String,\
    \ ::String)\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n  Stacktrace:\n\
    \   [1] +(::String, ::String, ::Char)\n     @ Base ./operators.jl:655\n   [2]\
    \ make_palindrome(string::String)\n   "
  timestamp: 1659805864
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    longest_postfix_string =\
    \ longest_postfix_string_helper(string)\n    \n    longest_postfix_string = longest_postfix_string[longest_postfix_string.len()+1:end]\n\
    \    \n    longest_postfix_string = longest_postfix_string.reverse()\n    \n \
    \   longest_postfix_string = longest_postfix_string + longest_postfix_string_helper(string)\n\
    \    \n    return longest_postfix_string\nend\nusing Test\n\n@testset begin\n\n\
    candidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmplu45d_9h.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmplu45d_9h.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: longest_postfix_string_helper\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmplu45d_9h.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplu45d_9h.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplu45d_9h.jl:22\ntest set:\
    \ Error During Test at /tmp/tmplu45d_9h.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: longest_postfix_string_helper not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmplu45d_9h.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplu45d_9h.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplu45d_9h.jl:22\ntest set:\
    \ Error During Test at /tmp/tmplu45d_9h.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_postfix_string_helper\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmplu45d_9h.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplu45d_9h.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplu45d_9h.jl:22\ntest set:\
    \ Error During Test at /tmp/tmplu45d_9h.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_postfix_string_helper\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmplu45d_9h.jl:8\n   [2"
  timestamp: 1659805863
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    max_length_postfix_length\
    \ = 0\n    max_length_prefix_length = 0\n    \n    for c in string:\n        if\
    \ c != string[max_length]:\n            max_length += 1\n            max_length_postfix_length\
    \ = max_length_postfix_length + 1 if string[max_length] == string[max_length_postfix_length]\
    \ else 0\n            max_length_prefix_length = max_length_prefix_length + 1\
    \ if string[max_length] == string[max_length_prefix_length] else 0\n        else:\n\
    \            max_length_postfix_length += 1\n            max_length_prefix_length\
    \ += 1\n            \n    max_length_postfix_length = max_length_postfix_length\
    \ + 1 if string[max_length] == string[max_length_postfix_length] else 0\n    max_length_prefix_length\
    \ = max_length_prefix_length + 1 if string[max_length] == string[max_length_prefix_length]\
    \ else 0\n    \n    max_length_postfix_length -= 1\n    max_length_prefix_length\
    \ -= 1\n    \n    max_length_prefix_length += max_length_postfix_length\n    \n\
    \    max_length_prefix_length = max_length_prefix_length + 1 if string[max_length]\
    \ == string[max_length_prefix_length] else 0\n    \n    max_length_prefix_length\
    \ -= 1\n    \n    max_length_prefix_length += max_length_postfix_length\n    \n\
    \    max_length_prefix_length = max_length_prefix_length + 1 if string[max_length]\
    \ == string[max_length_prefix_length] else 0\n    \n    max_length_prefix_length\
    \ -= 1\n    \n    max_length_prefix_length += max_length_postfix_length\n    \n\
    \    max_length_prefix_length = max_length_prefix_length + 1 if string[max_length]\
    \ == string[max_length_prefix_length] else 0\n    \n    max_length_prefix_length\
    \ -= 1\n    \n    max_length_prefix_length += max_length_postfix_length\n    \n\
    \    max_length_prefix_length = max_length_prefix_length + 1 if string[max_length]\
    \ == string[max_length_prefix_length] else 0\n    \n    max_length_prefix_length\
    \ -= 1\n    \n    max_length_prefix_length += max_length_postfix_length\n    \n\
    \    max_length_prefix_length = max_length_prefix_length + 1 if string[max_length]\
    \ == string[max_length_prefix_length] else 0\n    \n    max_length_prefix_length\
    \ -= 1\n    \n    max_length_prefix_length += max_length_postfix_length\n    \n\
    \    max_length_prefix_length = max_length_prefix_length + 1 if string[max_length]\
    \ == string[max_length_prefix_length] else 0\n    \n    max_length_prefix_length\
    \ -= 1\n    \n    max_length_prefix_length += max_length_postfix_length\n    \n\
    \    max_length_prefix_length = max_length_prefix_length + 1 if string[max_length]\
    \ == \nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl3ns6b7o.jl:13\nin expression starting at\
    \ /tmp/tmpl3ns6b7o.jl:13\n"
  stdout: ''
  timestamp: 1659805861
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    longest_postfix_palindrome\
    \ = longest_postfix_palindrome(string)\n    \n    longest_postfix_palindrome +=\
    \ string[longest_postfix_palindrome.length..-1]\n    \n    return longest_postfix_palindrome\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"..-\" near column 76\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxb31sroc.jl:10\nin expression starting at\
    \ /tmp/tmpxb31sroc.jl:10\n"
  stdout: ''
  timestamp: 1659805861
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp88k9gtcq.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp88k9gtcq.jl:1\n\
    in expression starting at /tmp/tmp88k9gtcq.jl:1\n"
  stdout: ''
  timestamp: 1659805855
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    max_length = 0\n    max_length_postfix_length\
    \ = 0\n    max_length_prefix_length = 0\n    max_length_prefix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_length = 0\n    max_length_prefix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_length = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_post\n\
    using Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqnifiksb.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqnifiksb.jl:1\n\
    in expression starting at /tmp/tmpqnifiksb.jl:1\n"
  stdout: ''
  timestamp: 1659805857
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    max_length_postfix_length\
    \ = 0\n    max_length_prefix_length = 0\n    \n    for c in string:\n        if\
    \ c == 'A'\n            max_length = max_length + 1\n            max_length_postfix_length\
    \ = max_length_postfix_length + 1\n            max_length_prefix_length = max_length_prefix_length\
    \ + 1\n        elseif c == 'B'\n            max_length = max_length + 1\n    \
    \        max_length_postfix_length = max_length_postfix_length + 1\n         \
    \   max_length_prefix_length = max_length_prefix_length + 1\n        elseif c\
    \ == 'C'\n            max_length = max_length + 1\n            max_length_postfix_length\
    \ = max_length_postfix_length + 1\n            max_length_prefix_length = max_length_prefix_length\
    \ + 1\n        elseif c == 'D'\n            max_length = max_length + 1\n    \
    \        max_length_postfix_length = max_length_postfix_length + 1\n         \
    \   max_length_prefix_length = max_length_prefix_length + 1\n        elseif c\
    \ == 'E'\n            max_length = max_length + 1\n            max_length_postfix_length\
    \ = max_length_postfix_length + 1\n            max_length_prefix_length = max_length_prefix_length\
    \ + 1\n        elseif c == 'F'\n            max_length = max_length + 1\n    \
    \        max_length_postfix_length = max_length_postfix_length + 1\n         \
    \   max_length_prefix_length = max_length_prefix_length + 1\n        elseif c\
    \ == 'G'\n            max_length = max_length + 1\n            max_length_postfix_length\
    \ = max_length_postfix_length + 1\n            max_length_prefix_length = max_length_prefix_length\
    \ + 1\n        elseif c == 'H'\n            max_length = max_length + 1\n    \
    \        max_length_postfix_length = max_length_postfix_length + 1\n         \
    \   max_length_prefix_length = max_length_prefix_length + 1\n        elseif c\
    \ == 'I'\n            max_length = max_length + 1\n            max_length_postfix_length\
    \ = max_length_postfix_length + 1\n            max_length_prefix_length = max_length_prefix_length\
    \ + 1\n        elseif c == 'J'\n            max_length = max_length + 1\n    \
    \        max_length_postfix_length = max_length_postfix_length + 1\n         \
    \   max_length_prefix_length = max_length_prefix_length + 1\n        elseif c\
    \ == 'K'\n            max_length = max_length + 1\n            max_length_postfix_length\
    \ = max_length_postfix_length + 1\n            max_length_prefix_length = max_length_prefix_length\
    \ + 1\n        elseif c == 'L'\n            max_length = max_length + 1\n    \
    \        max_length_postfix_length = max_length_postfix_length + 1\n         \
    \   max_length_prefix_length = max_length_prefix_length + 1\n        elseif c\
    \ == 'M'\n            max_length = max_length + 1\n            max_length_postfix_length\
    \ = max_length_postfix_length + 1\n            max_length_prefix_length = max_length_prefix_length\
    \ + 1\n        elseif c == 'N'\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoje1ztml.jl:13\nin expression starting at\
    \ /tmp/tmpoje1ztml.jl:13\n"
  stdout: ''
  timestamp: 1659805861
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    max_length = 0\n    max_length_postfix\
    \ = \"\"\n    max_length_prefix = \"\"\n    for c in string:\n        if c !=\
    \ string[max_length]:\n            max_length += 1\n            max_length_postfix\
    \ += c\n            max_length_prefix += string[max_length]\n        else:\n \
    \           max_length_postfix += c\n            max_length_prefix += c\n    return\
    \ max_length_prefix + string[max_length:max_length+max_length_postfix]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjcrglifm.jl:11\nin expression starting at\
    \ /tmp/tmpjcrglifm.jl:11\n"
  stdout: ''
  timestamp: 1659805861
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp88k9gtcq.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp88k9gtcq.jl:1\n\
    in expression starting at /tmp/tmp88k9gtcq.jl:1\n"
  stdout: ''
  timestamp: 1659805855
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = length(string)\n\
    \    \n    if max_length < 2\n        return string\n    end\n    \n    prefix_length\
    \ = 0\n    \n    for i = max_length downto 1 do\n        prefix_length = prefix_length\
    \ + length(string(i, 1))\n    end\n    \n    prefix_length = prefix_length + length(string(max_length,\
    \ 1))\n    \n    prefix_string = string(max_length - prefix_length, 1)\n    \n\
    \    prefix_reverse = reverse(prefix_string)\n    \n    prefix_reverse = prefix_reverse\
    \ + string(prefix_length, 1)\n    \n    prefix_reverse = prefix_reverse + string(max_length,\
    \ 1)\n    \n    prefix_reverse = prefix_reverse + string(max_length - prefix_length,\
    \ 1)\n    \n    prefix_reverse = prefix_reverse + string(max_length - prefix_length\
    \ + 1, 1)\n    \n    prefix_reverse = prefix_reverse + string(max_length - prefix_length\
    \ + 2, 1)\n    \n    prefix_reverse = prefix_reverse + string(max_length - prefix_length\
    \ + 3, 1)\n    \n    prefix_reverse = prefix_reverse + string(max_length - prefix_length\
    \ + 4, 1)\n    \n    prefix_reverse = prefix_reverse + string(max_length - prefix_length\
    \ + 5, 1)\n    \n    prefix_reverse = prefix_reverse + string(max_length - prefix_length\
    \ + 6, 1)\n    \n    prefix_reverse = prefix_reverse + string(max_length - prefix_length\
    \ + 7, 1)\n    \n    prefix_reverse = prefix_reverse + string(max_length - prefix_length\
    \ + 8, 1)\n    \n    prefix_reverse = prefix_reverse + string(max_length - prefix_length\
    \ + 9, 1)\n    \n    prefix_reverse = prefix_reverse + string(max_length - prefix_length\
    \ + 10, 1)\n    \n    prefix_reverse = prefix_reverse + string(max_length - prefix_length\
    \ + 11, 1)\n    \n    prefix_reverse = prefix_reverse + string(max_length - prefix_length\
    \ + 12, 1)\n    \n    prefix_reverse = prefix_reverse + string(max_length - prefix_length\
    \ + 13, 1)\n    \n    prefix_reverse = prefix_reverse + string(max_length - prefix_length\
    \ + 14, 1)\n    \n    prefix_reverse = prefix_reverse + string(max_length - prefix_length\
    \ + 15, 1)\n    \n    prefix_reverse = prefix_reverse + string(max_length - prefix_length\
    \ + 16, 1)\n    \n    prefix_reverse = prefix_reverse + string(max_length - prefix_length\
    \ + 17, 1)\n    \n    prefix_reverse = prefix_reverse + string(max_length - prefix_length\
    \ + 18, 1)\n    \n    prefix_reverse = prefix_reverse + string(max_length - prefix_length\
    \ + 19, 1)\n    \n    prefix_reverse = prefix_reverse + string(max_length - prefix_length\
    \ + 20, 1)\n    \n    prefix_reverse = prefix_reverse + string(max_length - prefix_length\
    \ + 21, 1)\n    \n    prefix_\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp0y9pgrr5.jl:16 expected \"\
    end\", got \"1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0y9pgrr5.jl:16\n\
    in expression starting at /tmp/tmp0y9pgrr5.jl:16\n"
  stdout: ''
  timestamp: 1659805861
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    max_length_postfix_length\
    \ = 0\n    max_length_prefix_length = 0\n    \n    max_length_postfix = \"\"\n\
    \    max_length_postfix_postfix = \"\"\n    \n    max_length_prefix = \"\"\n \
    \   max_length_prefix_prefix = \"\"\n    \n    max_length_postfix_length = 0\n\
    \    max_length_prefix_length = 0\n    \n    max_length_postfix_postfix = \"\"\
    \n    max_length_prefix_postfix = \"\"\n    \n    max_length_prefix_prefix = \"\
    \"\n    max_length_postfix_prefix_prefix = \"\"\n    \n    max_length_postfix_length\
    \ = 0\n    max_length_prefix_length = 0\n    \n    max_length_postfix_postfix\
    \ = \"\"\n    max_length_prefix_postfix = \"\"\n    \n    max_length_prefix_prefix\
    \ = \"\"\n    max_length_postfix_prefix_prefix = \"\"\n    \n    max_length_postfix_length\
    \ = 0\n    max_length_prefix_length = 0\n    \n    max_length_postfix_postfix\
    \ = \"\"\n    max_length_prefix_postfix = \"\"\n    \n    max_length_prefix_prefix\
    \ = \"\"\n    max_length_postfix_prefix_prefix = \"\"\n    \n    max_length_postfix_length\
    \ = 0\n    max_length_prefix_length = 0\n    \n    max_length_postfix_postfix\
    \ = \"\"\n    max_length_prefix_postfix = \"\"\n    \n    max_length_prefix_prefix\
    \ = \"\"\n    max_length_postfix_prefix_prefix = \"\"\n    \n    max_length_postfix_length\
    \ = 0\n    max_length_prefix_length = 0\n    \n    max_length_postfix_postfix\
    \ = \"\"\n    max_length_prefix_postfix = \"\"\n    \n    max_length_prefix_prefix\
    \ = \"\"\n    max_length_postfix_prefix_prefix = \"\"\n    \n    max_length_postfix_length\
    \ = 0\n    max_length_prefix_length = 0\n    \n    max_length_postfix_postfix\
    \ = \"\"\n    max_length_prefix_postfix = \"\"\n    \n    max_length_prefix_prefix\
    \ = \"\"\n    max_length_postfix_prefix_prefix = \"\"\n    \n    max_length_postfix_length\
    \ = 0\n    max_length_prefix_length = 0\n    \n    max_length_postfix_postfix\
    \ = \"\"\n    max_length_prefix_postfix = \"\"\n    \n    max_length_prefix_prefix\
    \ = \"\"\n    max_length_postfix_prefix_prefix = \"\"\n    \n    max_length_postfix_length\
    \ = 0\n    max_length_prefix_length = 0\n    \n    max_length_postfix_postfix\
    \ = \"\"\n    max_length_prefix_postfix = \"\"\n    \n    max_length_prefix_prefix\
    \ = \"\"\n    max_length_postfix_prefix_prefix = \"\"\n    \n    max_length_postfix_length\n\
    using Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp6l0aqt0.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp6l0aqt0.jl:1\n\
    in expression starting at /tmp/tmpp6l0aqt0.jl:1\n"
  stdout: ''
  timestamp: 1659805861
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    longest_postfix_palindrome\
    \ = find_longest_postfix_palindrome(string)\n    \n    prefix_palindrome = string[longest_postfix_palindrome..end]\n\
    \    \n    return prefix_palindrome + reverse(prefix_palindrome)\nend\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t\
    @test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_9tq_04_.jl:14\nin expression starting at\
    \ /tmp/tmp_9tq_04_.jl:14\n"
  stdout: ''
  timestamp: 1659805861
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    \n \
    \   for c in string\n        if c != string[max_length]\n            max_length\
    \ += 1\n        end\n    end\n    \n    max_length += 1\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmcgfyqgs.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmcgfyqgs.jl:1\n\
    in expression starting at /tmp/tmpmcgfyqgs.jl:1\n"
  stdout: ''
  timestamp: 1659805861
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    \n \
    \   for c in string:\n        if max_length < length(c):\n            max_length\
    \ = length(c)\n    \n    max_length += 1\n    \n    max_length = max_length -\
    \ 1\n    \n    max_length = max_length + 1\n    \n    max_length = max_length\
    \ - 1\n    \n    max_length = max_length + 1\n    \n    max_length = max_length\
    \ - 1\n    \n    max_length = max_length + 1\n    \n    max_length = max_length\
    \ - 1\n    \n    max_length = max_length + 1\n    \n    max_length = max_length\
    \ - 1\n    \n    max_length = max_length + 1\n    \n    max_length = max_length\
    \ - 1\n    \n    max_length = max_length + 1\n    \n    max_length = max_length\
    \ - 1\n    \n    max_length = max_length + 1\n    \n    max_length = max_length\
    \ - 1\n    \n    max_length = max_length + 1\n    \n    max_length = max_length\
    \ - 1\n    \n    max_length = max_length + 1\n    \n    max_length = max_length\
    \ - 1\n    \n    max_length = max_length + 1\n    \n    max_length = max_length\
    \ - 1\n    \n    max_length = max_length + 1\n    \n    max_length = max_length\
    \ - 1\n    \n    max_length = max_length + 1\n    \n    max_length = max_length\
    \ - 1\n    \n    max_length = max_length + 1\n    \n    max_length = max_length\
    \ - 1\n    \n    max_length = max_length + 1\n    \n    max_length = max_length\
    \ - 1\n    \n    max_length = max_length + 1\n    \n    max_length = max_length\
    \ - 1\n    \n    max_length = max_length + 1\n    \n    max_length = max_length\
    \ - 1\n    \n    max_length = max_length + 1\n    \n    max_length = max_length\
    \ - 1\n    \n    max_length = max_length + 1\n    \n    max_length = max_length\
    \ - 1\n    \n    max_length = max_length + 1\n    \n    max_length = max_length\
    \ - 1\n    \n    max_length = max_length + 1\n    \n    max_length = max_length\
    \ - 1\n    \n    max_length = max_length + 1\n    \n    max_length = max_length\
    \ - 1\n    \n    max_length = max_length + 1\n    \n    max_length = max_length\
    \ - 1\n    \n    max_length = max_length + 1\n    \n    max_length = max_length\
    \ - 1\n    \n    max_length = max_length + 1\n    \n    max_length = max_length\
    \ - 1\n    \n    max_length = max_length + 1\n    \n    max_length = max_length\
    \ - 1\n    \n    max_length = max_length + 1\n    \n    max_length = max_length\
    \ - 1\n    \n    max_length = max_length + 1\n    \n    max_length = max_length\
    \ - 1\n    \n    max_length = max_length + 1\n    \n    max_length = max_length\
    \ - 1\n    \n    max_length = max_length + 1\n    \n    max_length = max_length\
    \ - 1\n    \n    max_length = max_length + 1\n    \nusing Test\n\n@testset begin\n\
    \ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpycawvmz6.jl:11\nin expression starting at\
    \ /tmp/tmpycawvmz6.jl:11\n"
  stdout: ''
  timestamp: 1659805861
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp88k9gtcq.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp88k9gtcq.jl:1\n\
    in expression starting at /tmp/tmp88k9gtcq.jl:1\n"
  stdout: ''
  timestamp: 1659805855
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    prefix_len = length(string.prefix(string))\n\
    \    suffix_len = length(string.suffix(string))\n    \n    if prefix_len > suffix_len\
    \ \n        return string\n    \n    prefix_postfix = string.prefix(string)\n\
    \    suffix_postfix = string.suffix(string)\n    \n    prefix_reverse = reverse(prefix_postfix)\n\
    \    suffix_reverse = reverse(suffix_postfix)\n    \n    prefix_postfix = prefix_postfix.append(prefix_reverse)\n\
    \    suffix_postfix = suffix_postfix.append(suffix_reverse)\n    \n    return\
    \ prefix_postfix.append(suffix_postfix)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpebck92nf.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpebck92nf.jl:1\n\
    in expression starting at /tmp/tmpebck92nf.jl:1\n"
  stdout: ''
  timestamp: 1659805861
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    longest_postfix_length =\
    \ find_longest_postfix_length(string, 0)\n    \n    if longest_postfix_length\
    \ == 0 \n        return string\n    \n    prefix_length = longest_postfix_length\
    \ - 1\n    \n    prefix_string = string[prefix_length..-1]\n    \n    reversed_prefix_string\
    \ = reverse(prefix_string)\n    \n    prefix_string = prefix_string + reversed_prefix_string\n\
    \    \n    return prefix_string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"..-\" near column 42\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpor5cfyhg.jl:15\nin expression starting at\
    \ /tmp/tmpor5cfyhg.jl:15\n"
  stdout: ''
  timestamp: 1659805861
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    max_length = 0\n    max_length_postfix_length\
    \ = 0\n    max_length_prefix_length = 0\n    max_length_prefix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_length = 0\n    max_length_prefix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_length = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n    max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_post\n\
    using Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmb3x1ej2.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmb3x1ej2.jl:1\n\
    in expression starting at /tmp/tmpmb3x1ej2.jl:1\n"
  stdout: ''
  timestamp: 1659805861
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp88k9gtcq.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp88k9gtcq.jl:1\n\
    in expression starting at /tmp/tmp88k9gtcq.jl:1\n"
  stdout: ''
  timestamp: 1659805855
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = length(string)\n\
    \    \n    prefix_length = 0\n    \n    for i = max_length downto 1 do\n     \
    \   \n        prefix_length = prefix_length + length(string(i, string[i]))\n \
    \       \n    end\n    \n    prefix_length = prefix_length + length(string(max_length,\
    \ string[max_length]))\n    \n    prefix_string = string(max_length, string[max_length])\n\
    \    \n    suffix_length = 0\n    \n    for i = prefix_length downto 1 do\n  \
    \      \n        suffix_length = suffix_length + length(string(i, string[i]))\n\
    \        \n    end\n    \n    suffix_length = suffix_length + length(string(prefix_length,\
    \ string[prefix_length]))\n    \n    suffix_string = string(prefix_length, string[prefix_length])\n\
    \    \n    return string(prefix_string, string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(string(\n\
    using Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpdsksctn5.jl:12 expected \"\
    end\", got \"1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdsksctn5.jl:12\n\
    in expression starting at /tmp/tmpdsksctn5.jl:12\n"
  stdout: ''
  timestamp: 1659805862
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    max_length_postfix\
    \ = \"\"\n    \n    for c in string\n        if isPalindrome(c)\n            max_length\
    \ = length(c)\n            max_length_postfix = reverse(c)\n        end\n    end\n\
    \    \n    return string + max_length_postfix + max_length\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake\nusing Test\n\
    \n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\
    \")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo2q3lt2o.jl:20\nin expression starting at\
    \ /tmp/tmpo2q3lt2o.jl:20\n"
  stdout: ''
  timestamp: 1659805862
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    \n \
    \   for c in string:\n        if c != string[max_length]:\n            max_length\
    \ += 1\n    \n    max_length += 1\n    \n    max_length = max_length - 1\n   \
    \ \n    max_length = max_length - 1\n    \n    max_length = max_length - 1\n \
    \   \n    max_length = max_length - 1\n    \n    max_length = max_length - 1\n\
    \    \n    max_length = max_length - 1\n    \n    max_length = max_length - 1\n\
    \    \n    max_length = max_length - 1\n    \n    max_length = max_length - 1\n\
    \    \n    max_length = max_length - 1\n    \n    max_length = max_length - 1\n\
    \    \n    max_length = max_length - 1\n    \n    max_length = max_length - 1\n\
    \    \n    max_length = max_length - 1\n    \n    max_length = max_length - 1\n\
    \    \n    max_length = max_length - 1\n    \n    max_length = max_length - 1\n\
    \    \n    max_length = max_length - 1\n    \n    max_length = max_length - 1\n\
    \    \n    max_length = max_length - 1\n    \n    max_length = max_length - 1\n\
    \    \n    max_length = max_length - 1\n    \n    max_length = max_length - 1\n\
    \    \n    max_length = max_length - 1\n    \n    max_length = max_length - 1\n\
    \    \n    max_length = max_length - 1\n    \n    max_length = max_length - 1\n\
    \    \n    max_length = max_length - 1\n    \n    max_length = max_length - 1\n\
    \    \n    max_length = max_length - 1\n    \n    max_length = max_length - 1\n\
    \    \n    max_length = max_length - 1\n    \n    max_length = max_length - 1\n\
    \    \n    max_length = max_length - 1\n    \n    max_length = max_length - 1\n\
    \    \n    max_length = max_length - 1\n    \n    max_length = max_length - 1\n\
    \    \n    max_length = max_length - 1\n    \n    max_length = max_length - 1\n\
    \    \n    max_length = max_length - 1\n    \n    max_length = max_length - 1\n\
    \    \n    max_length = max_length - 1\n    \n    max_length = max_length - 1\n\
    \    \n    max_length = max_length - 1\n    \n    max_length = max_length - 1\n\
    \    \n    max_length = max_length - 1\n    \n    max_length = max_length - 1\n\
    \    \n    max_length = max_length - 1\n    \n    max_length = max_length - 1\n\
    \    \n    max_length = max_length - 1\n    \n    max_length = max_length - 1\n\
    \    \n    max_length = max_length - 1\n    \n    max_length = max_length - 1\n\
    \    \n    max_length = max_length - 1\n    \n    max_length = max_length - 1\n\
    \    \n    max_length = max_length - 1\n    \n    max_length = max_length - 1\n\
    \    \n    max_length = max_length - 1\n    \n    max_length = max_length - 1\n\
    \    \n    max_length = max_length - 1\n    \n\nusing Test\n\n@testset begin\n\
    \ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp51bac1n6.jl:11\nin expression starting at\
    \ /tmp/tmp51bac1n6.jl:11\n"
  stdout: ''
  timestamp: 1659805855
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    \n \
    \   for c in string:\n        if c not in \"abcdefghijklmnopqrstuvwxyz\":\n  \
    \          continue\n        \n        max_length = max(max_length, length(c))\n\
    \        \n    max_length = max_length + 2\n    \n    max_length = max_length\
    \ + length(string)\n    \n    max_length = max_length + length(string)\n    \n\
    \    max_length = max_length + length(string)\n    \n    max_length = max_length\
    \ + length(string)\n    \n    max_length = max_length + length(string)\n    \n\
    \    max_length = max_length + length(string)\n    \n    max_length = max_length\
    \ + length(string)\n    \n    max_length = max_length + length(string)\n    \n\
    \    max_length = max_length + length(string)\n    \n    max_length = max_length\
    \ + length(string)\n    \n    max_length = max_length + length(string)\n    \n\
    \    max_length = max_length + length(string)\n    \n    max_length = max_length\
    \ + length(string)\n    \n    max_length = max_length + length(string)\n    \n\
    \    max_length = max_length + length(string)\n    \n    max_length = max_length\
    \ + length(string)\n    \n    max_length = max_length + length(string)\n    \n\
    \    max_length = max_length + length(string)\n    \n    max_length = max_length\
    \ + length(string)\n    \n    max_length = max_length + length(string)\n    \n\
    \    max_length = max_length + length(string)\n    \n    max_length = max_length\
    \ + length(string)\n    \n    max_length = max_length + length(string)\n    \n\
    \    max_length = max_length + length(string)\n    \n    max_length = max_length\
    \ + length(string)\n    \n    max_length = max_length + length(string)\n    \n\
    \    max_length = max_length + length(string)\n    \n    max_length = max_length\
    \ + length(string)\n    \n    max_length = max_length + length(string)\n    \n\
    \    max_length = max_length + length(string)\n    \n    max_length = max_length\
    \ + length(string)\n    \n    max_length = max_length + length(string)\n    \n\
    \    max_length = max_length + length(string)\n    \n    max_length = max_length\
    \ + length(string)\n    \n    max_length = max_length + length(string)\n    \n\
    \    max_length = max_length + length(string)\n    \n    max_length = max_length\
    \ + length(string)\n    \n    max_length = max_length + length(string)\n    \n\
    \    max_length = max_length + length(string)\n    \n    max_length = max_length\
    \ + length(string)\n    \n    max_length = max_length + length(string)\n    \n\
    \    max_length = max_length + length(string)\nusing Test\n\n@testset begin\n\n\
    candidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2ualul0x.jl:11\nin expression starting at\
    \ /tmp/tmp2ualul0x.jl:11\n"
  stdout: ''
  timestamp: 1659805862
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    \n \
    \   for c in string\n        max_length = max_length if max_length < length(c)\
    \ else length(c)\n    end\n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length if max_length < length(string) else length(string)\n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length if max_length < length(string) else length(string)\n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length if max_length < length(string) else length(string)\n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length if max_length < length(string) else length(string)\n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length if max_length < length(string) else length(string)\n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length if max_length < length(string) else length(string)\n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length if max_length < length(string) else length(string)\n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length if max_length < length(string) else length(string)\n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length if max_length < length(string) else length(string)\n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length if max_length < length(string)\
    \ else length(string)\n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length if max_length < length(string) else length(string)\n    \n    max_length\
    \ = max_length + 1 \n    \nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpciko4xzx.jl:10 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpciko4xzx.jl:11\n\
    in expression starting at /tmp/tmpciko4xzx.jl:11\n"
  stdout: ''
  timestamp: 1659805859
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    longest_postfix_len = find_longest_postfix_len(string)\n\
    \    \n    prefix_len = longest_postfix_len - find_longest_postfix_len(reverse(string.substring(0,longest_postfix_len)))\n\
    \    \n    return string.substring(prefix_len,longest_postfix_len) + reverse(string.substring(prefix_len,longest_postfix_len))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmprrz7znm3.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmprrz7znm3.jl:19\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_longest_postfix_len\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmprrz7znm3.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprrz7znm3.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprrz7znm3.jl:18\ntest set:\
    \ Error During Test at /tmp/tmprrz7znm3.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_postfix_len not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmprrz7znm3.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprrz7znm3.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprrz7znm3.jl:18\ntest set:\
    \ Error During Test at /tmp/tmprrz7znm3.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_postfix_len not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmprrz7znm3.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprrz7znm3.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprrz7znm3.jl:18\ntest set:\
    \ Error During Test at /tmp/tmprrz7znm3.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_postfix_len not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmprrz7znm3.jl:8\n   [2] macro expansion\n  "
  timestamp: 1659805864
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = length(string.chars)\n\
    \    \n    if max_length == 0 \n        return string\n    \n    prefix_length\
    \ = max_length - 1\n    \n    prefix_string = string.chars[prefix_length..-1]\n\
    \    \n    suffix_string = string.chars[0..prefix_length]\n    \n    suffix_reversed\
    \ = reverse(suffix_string)\n    \n    prefix_reversed = reverse(prefix_string)\n\
    \    \n    return prefix_string + suffix_reversed + suffix_string\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"..-\" near column 48\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyb8_ojqh.jl:15\nin expression starting at\
    \ /tmp/tmpyb8_ojqh.jl:15\n"
  stdout: ''
  timestamp: 1659805862
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp88k9gtcq.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp88k9gtcq.jl:1\n\
    in expression starting at /tmp/tmp88k9gtcq.jl:1\n"
  stdout: ''
  timestamp: 1659805855
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    \n \
    \   for c in string:\n        if max_length < length(c):\n            max_length\
    \ = length(c)\n    \n    max_length = max_length + 2\n    \n    max_length = max_length\
    \ + 2\n    \n    max_length = max_length + 2\n    \n    max_length = max_length\
    \ + 2\n    \n    max_length = max_length + 2\n    \n    max_length = max_length\
    \ + 2\n    \n    max_length = max_length + 2\n    \n    max_length = max_length\
    \ + 2\n    \n    max_length = max_length + 2\n    \n    max_length = max_length\
    \ + 2\n    \n    max_length = max_length + 2\n    \n    max_length = max_length\
    \ + 2\n    \n    max_length = max_length + 2\n    \n    max_length = max_length\
    \ + 2\n    \n    max_length = max_length + 2\n    \n    max_length = max_length\
    \ + 2\n    \n    max_length = max_length + 2\n    \n    max_length = max_length\
    \ + 2\n    \n    max_length = max_length + 2\n    \n    max_length = max_length\
    \ + 2\n    \n    max_length = max_length + 2\n    \n    max_length = max_length\
    \ + 2\n    \n    max_length = max_length + 2\n    \n    max_length = max_length\
    \ + 2\n    \n    max_length = max_length + 2\n    \n    max_length = max_length\
    \ + 2\n    \n    max_length = max_length + 2\n    \n    max_length = max_length\
    \ + 2\n    \n    max_length = max_length + 2\n    \n    max_length = max_length\
    \ + 2\n    \n    max_length = max_length + 2\n    \n    max_length = max_length\
    \ + 2\n    \n    max_length = max_length + 2\n    \n    max_length = max_length\
    \ + 2\n    \n    max_length = max_length + 2\n    \n    max_length = max_length\
    \ + 2\n    \n    max_length = max_length + 2\n    \n    max_length = max_length\
    \ + 2\n    \n    max_length = max_length + 2\n    \n    max_length = max_length\
    \ + 2\n    \n    max_length = max_length + 2\n    \n    max_length = max_length\
    \ + 2\n    \n    max_length = max_length + 2\n    \n    max_length = max_length\
    \ + 2\n    \n    max_length = max_length + 2\n    \n    max_length = max_length\
    \ + 2\n    \n    max_length = max_length + 2\n    \n    max_length = max_length\
    \ + 2\n    \n    max_length = max_length + 2\n    \n    max_length = max_length\
    \ + 2\n    \n    max_length = max_length + 2\n    \n    max_length = max_length\
    \ + 2\n    \n    max_length = max_length + 2\n    \n    max_length = max_length\
    \ + 2\n    \nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiap86qz1.jl:11\nin expression starting at\
    \ /tmp/tmpiap86qz1.jl:11\n"
  stdout: ''
  timestamp: 1659805862
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    max_length_postfix\
    \ = \"\"\n    \n    for c in string:\n        if max_length < length(c):\n   \
    \         max_length = length(c)\n            max_length_postfix = c\n       \
    \ \n    max_length = max_length + 1\n    \n    max_length_postfix = reverse(max_length_postfix)\n\
    \    \n    return string + max_length_postfix\nend\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp98cl4s_z.jl:12\nin expression starting at\
    \ /tmp/tmp98cl4s_z.jl:12\n"
  stdout: ''
  timestamp: 1659805862
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp88k9gtcq.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp88k9gtcq.jl:1\n\
    in expression starting at /tmp/tmp88k9gtcq.jl:1\n"
  stdout: ''
  timestamp: 1659805855
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    max_length_postfix_length\
    \ = 0\n    max_length_prefix_length = 0\n    \n    for c in string\n        if\
    \ isPalindrome(c)\n            max_length = length(c)\n            max_length_postfix_length\
    \ = length(reverse(c))\n            max_length_prefix_length = length(prefix(c))\n\
    \        end\n    end\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + max_length\n    max_length_prefix_length = max_length_prefix_length + max_length\n\
    \    \n    max_length_postfix_length = max_length_postfix_length + max_length\n\
    \    max_length_prefix_length = max_length_prefix_length + max_length\n    \n\
    \    max_length_postfix_length = max_length_postfix_length + max_length\n    max_length_prefix_length\
    \ = max_length_prefix_length + max_length\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + max_length\n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + max_length\n    max_length_prefix_length = max_length_prefix_length + max_length\n\
    \    \n    max_length_postfix_length = max_length_postfix_length + max_length\n\
    \    max_length_prefix_length = max_length_prefix_length + max_length\n    \n\
    \    max_length_postfix_length = max_length_postfix_length + max_length\n    max_length_prefix_length\
    \ = max_length_prefix_length + max_length\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + max_length\n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + max_length\n    max_length_prefix_length = max_length_prefix_length + max_length\n\
    \    \n    max_length_postfix_length = max_length_postfix_length + max_length\n\
    \    max_length_prefix_length = max_length_prefix_length + max_length\n    \n\
    \    max_length_postfix_length = max_length_postfix_length + max_length\n    max_length_prefix_length\
    \ = max_length_prefix_length + max_length\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + max_length\n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + max_length\n    max_length_prefix_length = max_length_prefix_length + max_length\n\
    \    \n    max_length_postfix_length = max_length_postfix_length + max_length\n\
    \    max_length_prefix_length = max_length_prefix_length + max_length\n    \n\
    \    max_length_postfix_length = max_length_postfix_length + max_length\n    max_length_prefix_length\
    \ = max_length_prefix_length + max_length\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + max_length\n    max_length_prefix_length = max_length_prefix_length\n\
    using Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpte29i9v8.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpte29i9v8.jl:1\n\
    in expression starting at /tmp/tmpte29i9v8.jl:1\n"
  stdout: ''
  timestamp: 1659805862
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = length(string.chars)\n\
    \    \n    if max_length == 1\n        return string\n    end\n    \n    prefix_length\
    \ = max_length\n    \n    prefix_chars = string.chars[prefix_length..-1]\n   \
    \ \n    prefix_reverse = reverse(prefix_chars)\n    \n    prefix_palindrome =\
    \ prefix_reverse + string(prefix_length, prefix_reverse)\n    \n    suffix_chars\
    \ = string.chars[0..prefix_length-1]\n    \n    suffix_reverse = reverse(suffix_chars)\n\
    \    \n    suffix_palindrome = string(prefix_length, prefix_reverse) + suffix_reverse\n\
    \    \n    return prefix_palindrome + suffix_palindrome\nend\n</cell>\n<code language=julia-1.4>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.4>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.4>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.4>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.4>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.4>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.4>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.4>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.4>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.4>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.4>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.4>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.4>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.4>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.4>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.4>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.4>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.4>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.4>\nmake_palin\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t\
    @test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"..-\" near column 47\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo1m7fsi9.jl:16\nin expression starting at\
    \ /tmp/tmpo1m7fsi9.jl:16\n"
  stdout: ''
  timestamp: 1659805863
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    \n \
    \   for c in string\n        if c != string[max_length]\n            max_length\
    \ += 1\n        end\n    end\n    \n    max_length += 1\n    \n    prefix_string\
    \ = \"\"\n    \n    for i = max_length - 1\n        prefix_string += string[i]\n\
    \    end\n    \n    prefix_string = reverse(prefix_string)\n    \n    suffix_string\
    \ = \"\"\n    \n    for i = max_length\n        suffix_string += string[i]\n \
    \   end\n    \n    suffix_string = reverse(suffix_string)\n    \n    return prefix_string\
    \ + suffix_string\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpp0ti0jxe.jl:38

    '
  stdout: "test set: Error During Test at /tmp/tmpp0ti0jxe.jl:41\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  BoundsError: attempt to access empty\
    \ String at index [0]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102 [inlined]\n   [3]\
    \ getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4] make_palindrome(string::String)\n\
    \     @ Main /tmp/tmpp0ti0jxe.jl:21\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpp0ti0jxe.jl:41 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpp0ti0jxe.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpp0ti0jxe.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  BoundsError: attempt to access 1-codeunit String\
    \ at index [0]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102 [inlined]\n   [3]\
    \ getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4] make_palindrome(string::String)\n\
    \     @ Main /tmp/tmpp0ti0jxe.jl:11\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpp0ti0jxe.jl:42 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpp0ti0jxe.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpp0ti0jxe.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  BoundsError: attempt to access 3-codeunit\
    \ String at index [0]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102 [inlined]\n   [3]\
    \ getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4] make_palindrome(string::String)\n\
    \     @ Main /tmp/tmpp0ti0jxe.jl:11\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdl"
  timestamp: 1659805864
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    max_length = 0\n    max_length_postfix\
    \ = \"\"\n    max_length_prefix_reverse = \"\"\n    max_length_prefix_reverse_index\
    \ = 0\n    max_length_prefix_reverse_index2 = 0\n    max_length_prefix_reverse_index3\
    \ = 0\n    max_length_prefix_reverse_index4 = 0\n    max_length_prefix_reverse_index5\
    \ = 0\n    max_length_prefix_reverse_index6 = 0\n    max_length_prefix_reverse_index7\
    \ = 0\n    max_length_prefix_reverse_index8 = 0\n    max_length_prefix_reverse_index9\
    \ = 0\n    max_length_prefix_reverse_index10 = 0\n    max_length_prefix_reverse_index11\
    \ = 0\n    max_length_prefix_reverse_index12 = 0\n    max_length_prefix_reverse_index13\
    \ = 0\n    max_length_prefix_reverse_index14 = 0\n    max_length_prefix_reverse_index15\
    \ = 0\n    max_length_prefix_reverse_index16 = 0\n    max_length_prefix_reverse_index17\
    \ = 0\n    max_length_prefix_reverse_index18 = 0\n    max_length_prefix_reverse_index19\
    \ = 0\n    max_length_prefix_reverse_index20 = 0\n    max_length_prefix_reverse_index21\
    \ = 0\n    max_length_prefix_reverse_index22 = 0\n    max_length_prefix_reverse_index23\
    \ = 0\n    max_length_prefix_reverse_index24 = 0\n    max_length_prefix_reverse_index25\
    \ = 0\n    max_length_prefix_reverse_index26 = 0\n    max_length_prefix_reverse_index27\
    \ = 0\n    max_length_prefix_reverse_index28 = 0\n    max_length_prefix_reverse_index29\
    \ = 0\n    max_length_prefix_reverse_index30 = 0\n    max_length_prefix_reverse_index31\
    \ = 0\n    max_length_prefix_reverse_index32 = 0\n    max_length_prefix_reverse_index33\
    \ = 0\n    max_length_prefix_reverse_index34 = 0\n    max_length_prefix_reverse_index35\
    \ = 0\n    max_length_prefix_reverse_index36 = 0\n    max_length_prefix_reverse_index37\
    \ = 0\n    max_length_prefix_reverse_index38 = 0\n    max_length_prefix_reverse_index39\
    \ = 0\n    max_length_prefix_reverse_index40 = 0\n    max_length_prefix_reverse_index41\
    \ = 0\n    max_length_prefix_reverse_index42 = 0\n    max_length_prefix_reverse_index43\
    \ = 0\n    max_length_prefix_reverse_index44 = 0\n    max_length_prefix_reverse_index45\
    \ = 0\n    max_length_prefix_reverse_index46 = 0\n    max_length_prefix_reverse_index47\
    \ = 0\n    max_length_prefix_reverse_index48 = 0\n    max_length_prefix_reverse_index49\
    \ = 0\n    max_length_prefix_reverse_index50 = 0\n    max_length_prefix_reverse_index51\
    \ = 0\n    max_length_prefix_reverse_index52 = 0\n    max_length_prefix_reverse_index53\
    \ = 0\n    max_length_prefix_reverse_index54 = 0\n    max_length_prefix_reverse_index55\
    \ = 0\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqt505c9a.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqt505c9a.jl:1\n\
    in expression starting at /tmp/tmpqt505c9a.jl:1\n"
  stdout: ''
  timestamp: 1659805863
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    \n \
    \   for s in string.split(\" \"):\n        max_length = max(max_length, length(s))\n\
    \    \n    max_length = max_length + 2\n    \n    prefix_length = 0\n    \n  \
    \  for s in string.split(\" \"):\n        prefix_length = prefix_length + length(s)\n\
    \    \n    prefix_length = prefix_length - 1\n    \n    prefix_length = 0\n  \
    \  \n    for s in string.split(\" \"):\n        prefix_length = prefix_length\
    \ + length(s)\n    \n    prefix_length = prefix_length - 1\n    \n    prefix_length\
    \ = 0\n    \n    for s in string.split(\" \"):\n        prefix_length = prefix_length\
    \ + length(s)\n    \n    prefix_length = prefix_length - 1\n    \n    prefix_length\
    \ = 0\n    \n    for s in string.split(\" \"):\n        prefix_length = prefix_length\
    \ + length(s)\n    \n    prefix_length = prefix_length - 1\n    \n    prefix_length\
    \ = 0\n    \n    for s in string.split(\" \"):\n        prefix_length = prefix_length\
    \ + length(s)\n    \n    prefix_length = prefix_length - 1\n    \n    prefix_length\
    \ = 0\n    \n    for s in string.split(\" \"):\n        prefix_length = prefix_length\
    \ + length(s)\n    \n    prefix_length = prefix_length - 1\n    \n    prefix_length\
    \ = 0\n    \n    for s in string.split(\" \"):\n        prefix_length = prefix_length\
    \ + length(s)\n    \n    prefix_length = prefix_length - 1\n    \n    prefix_length\
    \ = 0\n    \n    for s in string.split(\" \"):\n        prefix_length = prefix_length\
    \ + length(s)\n    \n    prefix_length = prefix_length - 1\n    \n    prefix_length\
    \ = 0\n    \n    for s in string.split(\" \"):\n        prefix_length = prefix_length\
    \ + length(s)\n    \n    prefix_length = prefix_length - 1\n    \n    prefix_length\
    \ = 0\n    \n    for s in string.split(\" \"):\n        prefix_length = prefix_length\
    \ + length(s)\n    \n    prefix_length = prefix_length - 1\n    \n    prefix_length\
    \ = 0\n    \n    for s in string.split(\" \"):\n        prefix_length = prefix_length\
    \ + length(s)\n    \n    prefix_length = prefix_length - 1\n    \n    prefix_length\
    \ = 0\n    \n    for s in string.split(\" \"):\n        prefix_length = prefix_length\
    \ + length(s)\n    \n    prefix_length = prefix_length - 1\n    \n    prefix_length\
    \ = 0\n    \n    for s in string.split(\" \"):\n        prefix_length = prefix_length\
    \ + length(s)\n    \n    prefix_length = prefix_length - 1\n    \n    prefix_length\
    \ = 0\n    \n    for s in string.split(\" \"):\n        prefix_length = prefix_length\
    \ + length(s)\n    \n    prefix_length = prefix_length - 1\n    \n    prefix_\n\
    using Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnfg2mieh.jl:11\nin expression starting at\
    \ /tmp/tmpnfg2mieh.jl:11\n"
  stdout: ''
  timestamp: 1659805863
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    \n \
    \   for c in string:\n        if max_length < length(c):\n            max_length\
    \ = length(c)\n            \n    max_length = max_length + 1 \n    \n    string\
    \ = \"\"\n    \n    for c in string:\n        if length(c) == max_length:\n  \
    \          string += reverse(c)\n            \n    return string\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\
    \")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdd_js5fp.jl:11\nin expression starting at\
    \ /tmp/tmpdd_js5fp.jl:11\n"
  stdout: ''
  timestamp: 1659805863
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    \n \
    \   for c in string:\n        if c == '.':\n            max_length += 1\n    \
    \    else:\n            max_length = max(max_length, len(string) - max_length)\n\
    \    \n    max_length = min(max_length, len(string))\n    \n    string_reversed\
    \ = string[max_length:] + string[:max_length]\n    \n    return string_reversed\n\
    \    \nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuybdg4sj.jl:11\nin expression starting at\
    \ /tmp/tmpuybdg4sj.jl:11\n"
  stdout: ''
  timestamp: 1659805863
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    max_length_postfix\
    \ = \"\"\n    \n    for c in string\n        max_length = max_length if max_length\
    \ < length(c) else length(c)\n        max_length_postfix = max_length_postfix\
    \ if max_length_postfix < length(reverse(c)) else length(reverse(c))\n    end\n\
    \    \n    max_length = max_length if max_length > 0 else 1\n    max_length_postfix\
    \ = max_length_postfix if max_length_postfix > 0 else 1\n    \n    max_length\
    \ = max_length + max_length_postfix\n    \n    max_length = max_length if max_length\
    \ < max_length else max_length\n    \n    max_length = max_length if max_length\
    \ > 0 else 1\n    \n    max_length_postfix = max_length_postfix if max_length_postfix\
    \ > 0 else 1\n    \n    max_length = max_length + max_length_postfix\n    \n \
    \   max_length = max_length if max_length < max_length else max_length\n    \n\
    \    max_length = max_length if max_length > 0 else 1\n    \n    max_length_postfix\
    \ = max_length_postfix if max_length_postfix > 0 else 1\n    \n    max_length\
    \ = max_length + max_length_postfix\n    \n    max_length = max_length if max_length\
    \ < max_length else max_length\n    \n    max_length = max_length if max_length\
    \ > 0 else 1\n    \n    max_length_postfix = max_length_postfix if max_length_postfix\
    \ > 0 else 1\n    \n    max_length = max_length + max_length_postfix\n    \n \
    \   max_length = max_length if max_length < max_length else max_length\n    \n\
    \    max_length = max_length if max_length > 0 else 1\n    \n    max_length_postfix\
    \ = max_length_postfix if max_length_postfix > 0 else 1\n    \n    max_length\
    \ = max_length + max_length_postfix\n    \n    max_length = max_length if max_length\
    \ < max_length else max_length\n    \n    max_length = max_length if max_length\
    \ > 0 else 1\n    \n    max_length_postfix = max_length_postfix if max_length_postfix\
    \ > 0 else 1\n    \n    max_length = max_length + max_length_postfix\n    \n \
    \   max_length = max_length if max_length < max_length else max_length\n    \n\
    \    max_length = max_length if max_length > 0 else 1\n    \n    max_length_postfix\
    \ = max_length_postfix if max_length_postfix > 0 else 1\n    \n    max_length\
    \ = max_length + max_length_postfix\n    \n    max_length = max_length if max_length\
    \ < max_length else max_length\n    \n    max_length = max_length if max_length\
    \ > 0 else 1\n    \n    max_length_postfix = max_length_postfix if max_length_postfix\
    \ > 0 else 1\n    \n    max_length = max_length + max_length_postfix\n    \n \
    \   max_length = max_length if max_length\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp4m39lrz_.jl:11 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4m39lrz_.jl:12\n\
    in expression starting at /tmp/tmp4m39lrz_.jl:12\n"
  stdout: ''
  timestamp: 1659805863
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    longest_postfix_length =\
    \ longest_palindrome_postfix(string)\n    \n    prefix_length = longest_postfix_length\
    \ - 1\n    \n    prefix_string = string[prefix_length..-1]\n    \n    prefix_reversed_string\
    \ = reverse(prefix_string)\n    \n    prefix_reversed_string[prefix_length..-1]\
    \ = prefix_string\n    \n    prefix_reversed_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t\
    @test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"..-\" near column 42\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmz365oct.jl:12\nin expression starting at\
    \ /tmp/tmpmz365oct.jl:12\n"
  stdout: ''
  timestamp: 1659805855
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp88k9gtcq.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp88k9gtcq.jl:1\n\
    in expression starting at /tmp/tmp88k9gtcq.jl:1\n"
  stdout: ''
  timestamp: 1659805855
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    longest_postfix_length =\
    \ longest_palindrome(string)\n    \n    prefix_length = longest_postfix_length\
    \ - 1\n    \n    prefix_string = string[prefix_length..-1]\n    \n    suffix_string\
    \ = string[1..prefix_length]\n    \n    suffix_reversed_string = reverse(suffix_string)\n\
    \    \n    suffix_reversed_string += prefix_string\n    \n    return suffix_reversed_string\n\
    end\n</cell>\n<code language=julia-1.5>\n@time make_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\n@time make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    @time make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n@time make_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\n@time make_palindrome(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\n@time make_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\n@time make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    @time make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n@time make_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\n@time make_palindrome(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\n@time make_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\n@time make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    @time make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n@time make_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\n@time make_palindrome(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\n@time make_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\n@time make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    @time make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n@time make_palindrome(\"\
    abba\")\n</cell>\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"..-\" near column 42\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp19evg1yk.jl:12\nin expression starting at\
    \ /tmp/tmp19evg1yk.jl:12\n"
  stdout: ''
  timestamp: 1659805863
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    max_length_postfix_length\
    \ = 0\n    max_length_prefix_length = 0\n    \n    for c in string\n        \n\
    \        if isPalindrome(c)\n            \n            max_length = length(c)\n\
    \            max_length_postfix_length = length(reverse(c))\n            max_length_prefix_length\
    \ = length(prefix(c))\n            \n        end\n    end\n    \n    max_length_postfix_length\
    \ == max_length ? return string : error(\"The supplied string is not a palindrome.\"\
    )\n    \n    max_length_prefix_length == max_length ? return string : error(\"\
    The supplied string is not a palindrome.\")\n    \n    max_length_postfix_length\
    \ < max_length_prefix_length ? return string : error(\"The supplied string is\
    \ not a palindrome.\")\n    \n    max_length_postfix_length < max_length ? return\
    \ string : error(\"The supplied string is not a palindrome.\")\n    \n    max_length_postfix_length\
    \ < max_length_prefix_length + 1 ? return string : error(\"The supplied string\
    \ is not a palindrome.\")\n    \n    max_length_prefix_length + 1 == max_length\
    \ ? return string : error(\"The supplied string is not a palindrome.\")\n    \n\
    \    max_length_prefix_length + 1 == max_length_postfix_length ? return string\
    \ : error(\"The supplied string is not a palindrome.\")\n    \n    max_length_prefix_length\
    \ + 1 == max_length_postfix_length + 1 ? return string : error(\"The supplied\
    \ string is not a palindrome.\")\n    \n    max_length_prefix_length + 1 == max_length_postfix_length\
    \ + 2 ? return string : error(\"The supplied string is not a palindrome.\")\n\
    \    \n    max_length_prefix_length + 1 == max_length_postfix_length + 3 ? return\
    \ string : error(\"The supplied string is not a palindrome.\")\n    \n    max_length_prefix_length\
    \ + 1 == max_length_postfix_length + 4 ? return string : error(\"The supplied\
    \ string is not a palindrome.\")\n    \n    max_length_prefix_length + 1 == max_length_postfix_length\
    \ + 5 ? return string : error(\"The supplied string is not a palindrome.\")\n\
    \    \n    max_length_prefix_length + 1 == max_length_postfix_length + 6 ? return\
    \ string : error(\"The supplied string is not a palindrome.\")\n    \n    max_length_prefix_length\
    \ + 1 == max_length_postfix_length + 7 ? return string : error(\"The supplied\
    \ string is not a palindrome.\")\n    \n    max_length_prefix_length + 1 == max_length_postfix_length\
    \ + 8 ? return string : error(\"The supplied string is not a palindrome.\")\n\
    \    \n    max_length_prefix_length\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: colon expected in \"?\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp170zslmy.jl:24\nin expression starting at\
    \ /tmp/tmp170zslmy.jl:24\n"
  stdout: ''
  timestamp: 1659805863
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    longest_postfix_len = longest_palindrome_postfix(string)\n\
    \    \n    prefix_len = longest_postfix_len - longest_palindrome_prefix(string)\n\
    \    \n    prefix_reversed = string[prefix_len..-1]\n    \n    return prefix_reversed\
    \ + string[..prefix_len] + longest_palindrome_suffix(string)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\
    \")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"..-\" near column 41\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3zksh7fb.jl:12\nin expression starting at\
    \ /tmp/tmp3zksh7fb.jl:12\n"
  stdout: ''
  timestamp: 1659805863
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp88k9gtcq.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp88k9gtcq.jl:1\n\
    in expression starting at /tmp/tmp88k9gtcq.jl:1\n"
  stdout: ''
  timestamp: 1659805855
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    max_length_suffix\
    \ = 0\n    \n    for c in string:\n        if c == 'A'\n            max_length\
    \ = max_length + 1\n            max_length_suffix = max_length_suffix + 1\n  \
    \      elseif c == 'Z'\n            max_length = max_length + 1\n            max_length_suffix\
    \ = max_length_suffix + 1\n        elseif c == 'a'\n            max_length = max_length\
    \ + 1\n            max_length_suffix = max_length_suffix + 1\n        elseif c\
    \ == 'z'\n            max_length = max_length + 1\n            max_length_suffix\
    \ = max_length_suffix + 1\n        elseif c == '0'\n            max_length = max_length\
    \ + 1\n            max_length_suffix = max_length_suffix + 1\n        elseif c\
    \ == '9'\n            max_length = max_length + 1\n            max_length_suffix\
    \ = max_length_suffix + 1\n        elseif c == '_'\n            max_length = max_length\
    \ + 1\n            max_length_suffix = max_length_suffix + 1\n        elseif c\
    \ == '.'\n            max_length = max_length + 1\n            max_length_suffix\
    \ = max_length_suffix + 1\n        elseif c == '-'\n            max_length = max_length\
    \ + 1\n            max_length_suffix = max_length_suffix + 1\n        elseif c\
    \ == '/'\n            max_length = max_length + 1\n            max_length_suffix\
    \ = max_length_suffix + 1\n        elseif c == '*'\n            max_length = max_length\
    \ + 1\n            max_length_suffix = max_length_suffix + 1\n        elseif c\
    \ == '+'\n            max_length = max_length + 1\n            max_length_suffix\
    \ = max_length_suffix + 1\n        elseif c == '('\n            max_length = max_length\
    \ + 1\n            max_length_suffix = max_length_suffix + 1\n        elseif c\
    \ == ')'\n            max_length = max_length + 1\n            max_length_suffix\
    \ = max_length_suffix + 1\n        elseif c == '#'\n            max_length = max_length\
    \ + 1\n            max_length_suffix = max_length_suffix + 1\n        elseif c\
    \ == '%'\n            max_length = max_length + 1\n            max_length_suffix\
    \ = max_length_suffix + 1\n        elseif c == '&'\n            max_length = max_length\
    \ + 1\n            max_length_suffix = max_length_suffix + 1\n        elseif c\
    \ == '$'\n            max_length = max_length + 1\n            max_length_suffix\
    \ = max_length_suffix + 1\n        elseif c == '\"'\n            max_length =\
    \ max_length + 1\n            max_length_suffix = max_length_suffix + 1\n    \
    \    elseif c == '%'\n            max_length = max_length + 1\n            max_length_suffix\
    \ = max_length_suffix + 1\n        elseif c == '!'\n            max_length = max_length\
    \ + 1\n            max_length_suffix = max_length_suffix + 1\n        elseif c\
    \ == '?'\n            max_length = max_length + 1\n            max_length_suffix\
    \ = max_length_suffix + 1\n        elseif c\nusing Test\n\n@testset begin\n\n\
    candidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp71l9ax0j.jl:12\nin expression starting at\
    \ /tmp/tmp71l9ax0j.jl:12\n"
  stdout: ''
  timestamp: 1659805863
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    longest_postfix_length =\
    \ longest_palindrome_postfix(string)\n    \n    prefix_length = longest_postfix_length\
    \ - 1\n    \n    prefix_string = string[prefix_length..-1]\n    \n    prefix_reversed_string\
    \ = reverse(prefix_string)\n    \n    prefix_reversed_string[prefix_length..-1]\
    \ = string[prefix_length..-1]\n    \n    prefix_reversed_string\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\
    \")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"..-\" near column 42\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwae9a473.jl:12\nin expression starting at\
    \ /tmp/tmpwae9a473.jl:12\n"
  stdout: ''
  timestamp: 1659805864
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    max_length = 0\n    max_length_postfix\
    \ = \"\"\n    max_length_prefix = \"\"\n    for c in string\n        if c != string[max_length]\n\
    \            max_length_postfix = string[max_length]\n            max_length_prefix\
    \ = string[max_length_postfix]\n            max_length = max_length + 1\n    \
    \    end\n    end\n    max_length_postfix = string[max_length]\n    max_length_prefix\
    \ = string[max_length_postfix]\n    max_length = max_length + 1\n    max_length_postfix\
    \ = string[max_length]\n    max_length_prefix = string[max_length_postfix]\n \
    \   max_length = max_length + 1\n    max_length_postfix = string[max_length]\n\
    \    max_length_prefix = string[max_length_postfix]\n    max_length = max_length\
    \ + 1\n    max_length_postfix = string[max_length]\n    max_length_prefix = string[max_length_postfix]\n\
    \    max_length = max_length + 1\n    max_length_postfix = string[max_length]\n\
    \    max_length_prefix = string[max_length_postfix]\n    max_length = max_length\
    \ + 1\n    max_length_postfix = string[max_length]\n    max_length_prefix = string[max_length_postfix]\n\
    \    max_length = max_length + 1\n    max_length_postfix = string[max_length]\n\
    \    max_length_prefix = string[max_length_postfix]\n    max_length = max_length\
    \ + 1\n    max_length_postfix = string[max_length]\n    max_length_prefix = string[max_length_postfix]\n\
    \    max_length = max_length + 1\n    max_length_postfix = string[max_length]\n\
    \    max_length_prefix = string[max_length_postfix]\n    max_length = max_length\
    \ + 1\n    max_length_postfix = string[max_length]\n    max_length_prefix = string[max_length_postfix]\n\
    \    max_length = max_length + 1\n    max_length_postfix = string[max_length]\n\
    \    max_length_prefix = string[max_length_postfix]\n    max_length = max_length\
    \ + 1\n    max_length_postfix = string[max_length]\n    max_length_prefix = string[max_length_postfix]\n\
    \    max_length = max_length + 1\n    max_length_postfix = string[max_length]\n\
    \    max_length_prefix = string[max_length_postfix]\n    max_length = max_length\
    \ + 1\n    max_length_postfix = string[max_length]\n    max_length_prefix = string[max_length_postfix]\n\
    \    max_length = max_length + 1\n    max_length_postfix = string[max_length]\n\
    \    max_length_prefix = string[max_length_postfix]\n    max_length = max_length\
    \ + 1\n    max_length_postfix = string[max_length]\n    max_length_prefix = string[max_length_postfix]\n\
    \    max_length = max_length + 1\n    max_length\nusing Test\n\n@testset begin\n\
    \ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwkzeto6r.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwkzeto6r.jl:1\n\
    in expression starting at /tmp/tmpwkzeto6r.jl:1\n"
  stdout: ''
  timestamp: 1659805864
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    longest_palindrome = find_longest_palindrome(string)\n\
    \    \n    if longest_palindrome == \"\"\n        return string\n    \n    prefix_to_append\
    \ = longest_palindrome\n    \n    prefix_to_append = reverse(prefix_to_append)\n\
    \    \n    prefix_to_append = prefix_to_append + longest_palindrome\n    \n  \
    \  return prefix_to_append\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_f2_dqd3.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_f2_dqd3.jl:1\n\
    in expression starting at /tmp/tmp_f2_dqd3.jl:1\n"
  stdout: ''
  timestamp: 1659805864
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = length(string.split(\"\
    \ \"))\n    \n    prefix_length = 0\n    \n    for word in string.split(\" \"\
    )\n        if length(word) > prefix_length\n            prefix_length = length(word)\n\
    \        end\n    end\n    \n    prefix_length = prefix_length + max_length\n\
    \    \n    prefix_string = string.split(\" \")[prefix_length]\n    \n    suffix_length\
    \ = length(string.split(\" \")[prefix_length + 1])\n    \n    suffix_string =\
    \ string.split(\" \")[prefix_length + 1]\n    \n    suffix_reverse = reverse(suffix_string)\n\
    \    \n    suffix_reverse = suffix_reverse + suffix_string\n    \n    prefix_reverse\
    \ = reverse(prefix_string)\n    \n    prefix_reverse = prefix_reverse + prefix_string\n\
    \    \n    prefix_reverse = prefix_reverse + suffix_reverse\n    \n    return\
    \ prefix_reverse\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpgeh4hpnw.jl:40

    '
  stdout: "test set: Error During Test at /tmp/tmpgeh4hpnw.jl:43\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  type String has no field split\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] make_palindrome(string::String)\n\
    \     @ Main /tmp/tmpgeh4hpnw.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgeh4hpnw.jl:43 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgeh4hpnw.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpgeh4hpnw.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  type String has no field split\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] make_palindrome(string::String)\n\
    \     @ Main /tmp/tmpgeh4hpnw.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgeh4hpnw.jl:44 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgeh4hpnw.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpgeh4hpnw.jl:45\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  type String has no field split\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] make_palindrome(string::String)\n\
    \     @ Main /tmp/tmpgeh4hpnw.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgeh4hpnw.jl:45 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgeh4hpnw.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpgeh4hpnw.jl:46\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  type String has no field split\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl"
  timestamp: 1659805866
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    \n \
    \   for c in string:\n        if c not in \"abcdefghijklmnopqrstuvwxyz\":\n  \
    \          max_length = max_length + 1\n    \n    if max_length == 0:\n      \
    \  return \"\"\n    \n    max_length = max_length - 1\n    \n    prefix_length\
    \ = max_length\n    \n    prefix_string = \"\"\n    \n    for c in string:\n \
    \       if c not in \"abcdefghijklmnopqrstuvwxyz\":\n            prefix_string\
    \ = prefix_string + c\n    \n    prefix_string = prefix_string + string[max_length]\n\
    \    \n    prefix_string = prefix_string[::-1]\n    \n    suffix_string = \"\"\
    \n    \n    for c in prefix_string:\n        if c not in \"abcdefghijklmnopqrstuvwxyz\"\
    :\n            suffix_string = suffix_string + c\n    \n    suffix_string = suffix_string\
    \ + string[max_length]\n    \n    suffix_string = suffix_string[::-1]\n    \n\
    \    prefix_string = prefix_string[::-1]\n    \n    prefix_string = prefix_string[:prefix_length]\n\
    \    \n    suffix_string = suffix_string[:suffix_length]\n    \n    prefix_string\
    \ = prefix_string + suffix_string\n    \n    return prefix_string\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7i7mnfme.jl:11\nin expression starting at\
    \ /tmp/tmp7i7mnfme.jl:11\n"
  stdout: ''
  timestamp: 1659805864
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    longest_postfix_length =\
    \ find_longest_postfix_length(string)\n    \n    prefix_length = longest_postfix_length\
    \ - 1\n    \n    prefix_string = string[prefix_length..-1]\n    \n    prefix_reversed_string\
    \ = reverse(prefix_string)\n    \n    prefix_reversed_string[prefix_length..-1]\
    \ = prefix_string\n    \n    return prefix_reversed_string\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\"\
    )\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"..-\" near column 42\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcasbzkxe.jl:12\nin expression starting at\
    \ /tmp/tmpcasbzkxe.jl:12\n"
  stdout: ''
  timestamp: 1659805864
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    longest_postfix_palindrome\
    \ = longest_palindrome(string)\n    \n    prefix_palindrome = string[longest_postfix_palindrome..end]\n\
    \    \n    return prefix_palindrome + reverse(longest_postfix_palindrome)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpb_4ga3g7.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpb_4ga3g7.jl:19\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: longest_palindrome not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpb_4ga3g7.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb_4ga3g7.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb_4ga3g7.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpb_4ga3g7.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpb_4ga3g7.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb_4ga3g7.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb_4ga3g7.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpb_4ga3g7.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpb_4ga3g7.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb_4ga3g7.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb_4ga3g7.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpb_4ga3g7.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpb_4ga3g7.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyg"
  timestamp: 1659805866
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    longest_postfix_length =\
    \ find_longest_postfix_length(string, 0)\n    \n    if longest_postfix_length\
    \ == 0 \n        return string\n    \n    prefix_length = longest_postfix_length\
    \ - 1\n    \n    prefix_string = string[prefix_length..-1]\n    \n    reversed_prefix_string\
    \ = reverse(prefix_string)\n    \n    return string[0..prefix_length] + reversed_prefix_string\
    \ + string[prefix_length..-1]\nend\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"..-\" near column 42\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnx734232.jl:15\nin expression starting at\
    \ /tmp/tmpnx734232.jl:15\n"
  stdout: ''
  timestamp: 1659805864
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    longest_postfix_length =\
    \ longest_postfix_length(string)\n    \n    prefix_length = longest_postfix_length\
    \ - 1\n    \n    prefix_string = string[prefix_length..-1]\n    \n    prefix_reversed_string\
    \ = reverse(prefix_string)\n    \n    prefix_reversed_string_palindrome = prefix_reversed_string\
    \ + string[1..prefix_length]\n    \n    return prefix_reversed_string_palindrome\n\
    end\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of characters in the string that are palindromes.\nusing Test\n\n@testset begin\n\
    \ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"..-\" near column 42\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzdbu0z2q.jl:12\nin expression starting at\
    \ /tmp/tmpzdbu0z2q.jl:12\n"
  stdout: ''
  timestamp: 1659805864
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp88k9gtcq.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp88k9gtcq.jl:1\n\
    in expression starting at /tmp/tmp88k9gtcq.jl:1\n"
  stdout: ''
  timestamp: 1659805855
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp88k9gtcq.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp88k9gtcq.jl:1\n\
    in expression starting at /tmp/tmp88k9gtcq.jl:1\n"
  stdout: ''
  timestamp: 1659805855
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    \n \
    \   for c in string:\n        if c not in \"abcdefghijklmnopqrstuvwxyz\":\n  \
    \          continue\n        max_length = max(max_length, length(string.substring(1,\
    \ max_length)))\n        \n    max_length = min(max_length, length(string.substring(1,\
    \ max_length)))\n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = \nusing Test\n\n@testset begin\n\n\
    candidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoi877i6g.jl:11\nin expression starting at\
    \ /tmp/tmpoi877i6g.jl:11\n"
  stdout: ''
  timestamp: 1659805864
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp88k9gtcq.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp88k9gtcq.jl:1\n\
    in expression starting at /tmp/tmp88k9gtcq.jl:1\n"
  stdout: ''
  timestamp: 1659805855
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    \n \
    \   for c in string\n        if c != string[max_length]\n            max_length\
    \ += 1\n        end\n    end\n    \n    max_length += 1\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmcgfyqgs.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmcgfyqgs.jl:1\n\
    in expression starting at /tmp/tmpmcgfyqgs.jl:1\n"
  stdout: ''
  timestamp: 1659805861
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    longest_postfix_length =\
    \ longest_palindrome_postfix(string)\n    \n    prefix_length = longest_postfix_length\
    \ - 1\n    \n    prefix_string = string[prefix_length..-1]\n    \n    prefix_reversed_string\
    \ = reverse(prefix_string)\n    \n    prefix_reversed_string += string[prefix_length..-1]\n\
    \    \n    return prefix_reversed_string\nend\nusing Test\n\n@testset begin\n\n\
    candidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"..-\" near column 42\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9smuvo_s.jl:12\nin expression starting at\
    \ /tmp/tmp9smuvo_s.jl:12\n"
  stdout: ''
  timestamp: 1659805864
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    max_length_postfix_length\
    \ = 0\n    max_length_prefix_length = 0\n    \n    for c in string\n        if\
    \ c != string[max_length]\n            max_length += 1\n            max_length_postfix_length\
    \ += length(c)\n            max_length_prefix_length += length(string[max_length])\n\
    \        end\n    end\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ / 2\n    max_length_prefix_length = max_length_prefix_length / 2\n    \n   \
    \ max_length_prefix_length += max_length_postfix_length\n    \n    max_length_prefix_length\
    \ = max_length_prefix_length / 2\n    \n    max_length_prefix_length += max_length_postfix_length\n\
    \    \n    max_length_prefix_length = max_length_prefix_length / 2\n    \n   \
    \ max_length_prefix_length += max_length_postfix_length\n    \n    max_length_prefix_length\
    \ = max_length_prefix_length / 2\n    \n    max_length_prefix_length += max_length_postfix_length\n\
    \    \n    max_length_prefix_length = max_length_prefix_length / 2\n    \n   \
    \ max_length_prefix_length += max_length_postfix_length\n    \n    max_length_prefix_length\
    \ = max_length_prefix_length / 2\n    \n    max_length_prefix_length += max_length_postfix_length\n\
    \    \n    max_length_prefix_length = max_length_prefix_length / 2\n    \n   \
    \ max_length_prefix_length += max_length_postfix_length\n    \n    max_length_prefix_length\
    \ = max_length_prefix_length / 2\n    \n    max_length_prefix_length += max_length_postfix_length\n\
    \    \n    max_length_prefix_length = max_length_prefix_length / 2\n    \n   \
    \ max_length_prefix_length += max_length_postfix_length\n    \n    max_length_prefix_length\
    \ = max_length_prefix_length / 2\n    \n    max_length_prefix_length += max_length_postfix_length\n\
    \    \n    max_length_prefix_length = max_length_prefix_length / 2\n    \n   \
    \ max_length_prefix_length += max_length_postfix_length\n    \n    max_length_prefix_length\
    \ = max_length_prefix_length / 2\n    \n    max_length_prefix_length += max_length_postfix_length\n\
    \    \n    max_length_prefix_length = max_length_prefix_length / 2\n    \n   \
    \ max_length_prefix_length += max_length_postfix_length\n    \n    max_length_prefix_length\
    \ = max_length_prefix_length / 2\n    \n    max_length_prefix_length += max_length_postfix_length\n\
    \    \n    max_length_prefix_length = max_length_prefix_length / 2\n    \n   \
    \ max_length_prefix_length += max_length_postfix_length\n    \n    max_length_prefix_length\
    \ = max_length_prefix_length / 2\nusing Test\n\n@testset begin\n\ncandidate =\
    \ make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwisbztna.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwisbztna.jl:1\n\
    in expression starting at /tmp/tmpwisbztna.jl:1\n"
  stdout: ''
  timestamp: 1659805864
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    max_length_postfix_length\
    \ = 0\n    max_length_prefix_length = 0\n    \n    for c in string\n        \n\
    \        if isPalindrome(c)\n            \n            max_length = length(c)\n\
    \            max_length_postfix_length = length(reverse(c))\n            max_length_prefix_length\
    \ = length(prefix(c))\n            \n        end\n    end\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + max_length\n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + max_length\n    \n    max_length_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpg88ftap5.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpg88ftap5.jl:1\n\
    in expression starting at /tmp/tmpg88ftap5.jl:1\n"
  stdout: ''
  timestamp: 1659805864
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp88k9gtcq.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp88k9gtcq.jl:1\n\
    in expression starting at /tmp/tmp88k9gtcq.jl:1\n"
  stdout: ''
  timestamp: 1659805855
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    \n \
    \   for c in string\n        max_length = max_length if max_length < length(c)\
    \ else length(c)\n    end\n    \n    max_length = max_length + 1 \n    \n    max_length\
    \ = max_length if max_length < length string else length string\n    \n    max_length\
    \ = max_length + 1 \n    \n    max_length = max_length if max_length < length\
    \ string else length string\n    \n    max_length = max_length + 1 \n    \n  \
    \  max_length = max_length if max_length < length string else length string\n\
    \    \n    max_length = max_length + 1 \n    \n    max_length = max_length if\
    \ max_length < length string else length string\n    \n    max_length = max_length\
    \ + 1 \n    \n    max_length = max_length if max_length < length string else length\
    \ string\n    \n    max_length = max_length + 1 \n    \n    max_length = max_length\
    \ if max_length < length string else length string\n    \n    max_length = max_length\
    \ + 1 \n    \n    max_length = max_length if max_length < length string else length\
    \ string\n    \n    max_length = max_length + 1 \n    \n    max_length = max_length\
    \ if max_length < length string else length string\n    \n    max_length = max_length\
    \ + 1 \n    \n    max_length = max_length if max_length < length string else length\
    \ string\n    \n    max_length = max_length + 1 \n    \n    max_length = max_length\
    \ if max_length < length string else length string\n    \n    max_length = max_length\
    \ + 1 \n    \n    max_length = max_length if max_length < length string else length\
    \ string\n    \n    max_length = max_length + 1 \n    \n    max_length = max_length\
    \ if max_length < length string else length string\n    \n    max_length = max_length\
    \ + 1 \n    \n    max_length = max_length if max_length < length string else length\
    \ string\n    \n    max_length = max_length + 1 \n    \n    max_length = max_length\
    \ if max_length < length string else length string\n    \n    max_length = max_length\
    \ + 1 \n    \n    max_length = max_length if max_length < length string else length\
    \ string\n    \n    max_length = max_length + 1 \n    \n    max_length = max_length\
    \ if max_length < length string else length string\n    \n    max_length = max_length\
    \ + 1 \n    \n    max_length = max_length if max_length < length string else length\
    \ string\n    \n    max_length = max_length + 1 \n    \n    max_length = max_length\
    \ if max_length < length string else length string\n    \n    max_length = max_length\
    \ + 1 \n    \n    max_length = max_length if max_length < length string else length\
    \ string\n    \n    max_length = max_length + 1 \n    \n    max_length = max_length\
    \ if max_length < length string else length string\n    \n    max_length = \n\
    using Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpy8chuko8.jl:10 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy8chuko8.jl:11\n\
    in expression starting at /tmp/tmpy8chuko8.jl:11\n"
  stdout: ''
  timestamp: 1659805864
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    max_length_postfix_length\
    \ = 0\n    \n    for c in string\n        \n        if isPalindrome(c)\n     \
    \       \n            max_length = length(c)\n            max_length_postfix_length\
    \ = length(postfix_string(c))\n            \n            if max_length > max_length_postfix_length\n\
    \                max_length = max_length_postfix_length\n            \n      \
    \      postfix_string(c) = reverse(c)\n            \n        end\n    end\n  \
    \  \n    return string(postfix_string(c) for c in string)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7si5l9fz.jl:28\nin expression starting at\
    \ /tmp/tmp7si5l9fz.jl:28\n"
  stdout: ''
  timestamp: 1659805864
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    \n \
    \   for c in string:\n        if c not in \"abcdefghijklmnopqrstuvwxyz\":\n  \
    \          max_length = max_length + 1\n    \n    max_length = max_length + 1\n\
    \    \n    max_length = max_length + 1\n    \n    max_length = max_length + 1\n\
    \    \n    max_length = max_length + 1\n    \n    max_length = max_length + 1\n\
    \    \n    max_length = max_length + 1\n    \n    max_length = max_length + 1\n\
    \    \n    max_length = max_length + 1\n    \n    max_length = max_length + 1\n\
    \    \n    max_length = max_length + 1\n    \n    max_length = max_length + 1\n\
    \    \n    max_length = max_length + 1\n    \n    max_length = max_length + 1\n\
    \    \n    max_length = max_length + 1\n    \n    max_length = max_length + 1\n\
    \    \n    max_length = max_length + 1\n    \n    max_length = max_length + 1\n\
    \    \n    max_length = max_length + 1\n    \n    max_length = max_length + 1\n\
    \    \n    max_length = max_length + 1\n    \n    max_length = max_length + 1\n\
    \    \n    max_length = max_length + 1\n    \n    max_length = max_length + 1\n\
    \    \n    max_length = max_length + 1\n    \n    max_length = max_length + 1\n\
    \    \n    max_length = max_length + 1\n    \n    max_length = max_length + 1\n\
    \    \n    max_length = max_length + 1\n    \n    max_length = max_length + 1\n\
    \    \n    max_length = max_length + 1\n    \n    max_length = max_length + 1\n\
    \    \n    max_length = max_length + 1\n    \n    max_length = max_length + 1\n\
    \    \n    max_length = max_length + 1\n    \n    max_length = max_length + 1\n\
    \    \n    max_length = max_length + 1\n    \n    max_length = max_length + 1\n\
    \    \n    max_length = max_length + 1\n    \n    max_length = max_length + 1\n\
    \    \n    max_length = max_length + 1\n    \n    max_length = max_length + 1\n\
    \    \n    max_length = max_length + 1\n    \n    max_length = max_length + 1\n\
    \    \n    max_length = max_length + 1\n    \n    max_length = max_length + 1\n\
    \    \n    max_length = max_length + 1\n    \n    max_length = max_length + 1\n\
    \    \n    max_length = max_length + 1\n    \n    max_length = max_length + 1\n\
    \    \n    max_length = max_length + 1\n    \n    max_length = max_length + 1\n\
    \    \n    max_length = max_length + 1\n    \n    max_length = max_length + 1\n\
    \    \n    max_length = max_length + 1\n    \n    max_length = max_length + 1\n\
    \    \n    max_length = max_length + 1\n    \n    max_length = max_length + 1\n\
    \    \n    max_length = max_length + 1\n    \n    max_length = max_length + 1\n\
    \    \n    max_length = \nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp89jyq9x2.jl:11\nin expression starting at\
    \ /tmp/tmp89jyq9x2.jl:11\n"
  stdout: ''
  timestamp: 1659805865
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    \n \
    \   for c in string:\n        if c not in \"abcdefghijklmnopqrstuvwxyz\":\n  \
    \          continue\n        \n        max_length = max(max_length, len(c))\n\
    \        \n    max_length += 1\n    \n    max_length = max_length // 2\n    \n\
    \    max_length = max_length * 2\n    \n    max_length = max_length + 2\n    \n\
    \    max_length = max_length // 2\n    \n    max_length = max_length * 2\n   \
    \ \n    max_length = max_length + 2\n    \n    max_length = max_length // 2\n\
    \    \n    max_length = max_length * 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length // 2\n    \n    max_length = max_length * 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length // 2\n\
    \    \n    max_length = max_length * 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length // 2\n    \n    max_length = max_length * 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length // 2\n\
    \    \n    max_length = max_length * 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length // 2\n    \n    max_length = max_length * 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length // 2\n\
    \    \n    max_length = max_length * 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length // 2\n    \n    max_length = max_length * 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length // 2\n\
    \    \n    max_length = max_length * 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length // 2\n    \n    max_length = max_length * 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length // 2\n\
    \    \n    max_length = max_length * 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length // 2\n    \n    max_length = max_length * 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length // 2\n\
    \    \n    max_length = max_length * 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length // 2\n    \n    max_length = max_length * 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length // 2\n\
    \    \n    max_length = max_length * 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = \nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7cw9wbde.jl:11\nin expression starting at\
    \ /tmp/tmp7cw9wbde.jl:11\n"
  stdout: ''
  timestamp: 1659805865
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp88k9gtcq.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp88k9gtcq.jl:1\n\
    in expression starting at /tmp/tmp88k9gtcq.jl:1\n"
  stdout: ''
  timestamp: 1659805855
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    max_length_postfix_length\
    \ = 0\n    \n    for c in string:\n        if c == \"A\" or c == \"a\":\n    \
    \        max_length = max_length + 1\n            max_length_postfix_length =\
    \ max_length_postfix_length + 1\n        elif c == \"B\" or c == \"b\":\n    \
    \        max_length = max_length + 1\n            max_length_postfix_length =\
    \ max_length_postfix_length + 1\n        elif c == \"C\" or c == \"c\":\n    \
    \        max_length = max_length + 1\n            max_length_postfix_length =\
    \ max_length_postfix_length + 1\n        elif c == \"D\" or c == \"d\":\n    \
    \        max_length = max_length + 1\n            max_length_postfix_length =\
    \ max_length_postfix_length + 1\n        elif c == \"E\" or c == \"e\":\n    \
    \        max_length = max_length + 1\n            max_length_postfix_length =\
    \ max_length_postfix_length + 1\n        elif c == \"F\" or c == \"f\":\n    \
    \        max_length = max_length + 1\n            max_length_postfix_length =\
    \ max_length_postfix_length + 1\n        elif c == \"G\" or c == \"g\":\n    \
    \        max_length = max_length + 1\n            max_length_postfix_length =\
    \ max_length_postfix_length + 1\n        elif c == \"H\" or c == \"h\":\n    \
    \        max_length = max_length + 1\n            max_length_postfix_length =\
    \ max_length_postfix_length + 1\n        elif c == \"I\" or c == \"i\":\n    \
    \        max_length = max_length + 1\n            max_length_postfix_length =\
    \ max_length_postfix_length + 1\n        elif c == \"J\" or c == \"j\":\n    \
    \        max_length = max_length + 1\n            max_length_postfix_length =\
    \ max_length_postfix_length + 1\n        elif c == \"K\" or c == \"k\":\n    \
    \        max_length = max_length + 1\n            max_length_postfix_length =\
    \ max_length_postfix_length + 1\n        elif c == \"L\" or c == \"l\":\n    \
    \        max_length = max_length + 1\n            max_length_postfix_length =\
    \ max_length_postfix_length + 1\n        elif c == \"M\" or c == \"m\":\n    \
    \        max_length = max_length + 1\n            max_length_postfix_length =\
    \ max_length_postfix_length + 1\n        elif c == \"N\" or c == \"n\":\n    \
    \        max_length = max_length + 1\n            max_length_postfix_length =\
    \ max_length_postfix_length + 1\n        elif c == \"O\" or c == \"o\":\n    \
    \        max_length = max_length + 1\n            max_length_postfix_length =\
    \ max_length_postfix_length + 1\n        elif c == \"P\" or c == \"p\":\n    \
    \        max_length = max_length + 1\n            max_length_postfix_length =\
    \ max_length_postfix_length + 1\n        elif c == \"Q\" or c == \"q\":\n    \
    \        max_length = max_length + 1\n            max_length_postfix_length =\
    \ max_length_postfix_length + 1\n        elif \nusing Test\n\n@testset begin\n\
    \ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg5wrrxh1.jl:12\nin expression starting at\
    \ /tmp/tmpg5wrrxh1.jl:12\n"
  stdout: ''
  timestamp: 1659805865
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    longest_postfix_palindrome\
    \ = longest_palindrome(string)\n    \n    prefix_palindrome = string[longest_postfix_palindrome..end]\n\
    \    \n    prefix_palindrome_reversed = reverse(prefix_palindrome)\n    \n   \
    \ prefix_palindrome_with_postfix = prefix_palindrome + prefix_palindrome_reversed\n\
    \    \n    return prefix_palindrome_with_postfix\nend\n</cell>\n<code language=julia-1.4>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.4>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.4>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.4>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.4>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.4>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.4>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.4>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.4>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.4>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.4>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.4>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.4>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.4>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.4>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.4>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.4>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.4>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.4>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.4>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.4>\n\
    \nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm71dn8f0.jl:18\nin expression starting at\
    \ /tmp/tmpm71dn8f0.jl:18\n"
  stdout: ''
  timestamp: 1659805865
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    \n \
    \   for c in string\n        max_length = maximum(max_length, length(c))\n   \
    \ end\n    \n    max_length = maximum(max_length, length(string.chars))\n    \n\
    \    max_length = maximum(max_length, length(string.chars.reverse))\n    \n  \
    \  max_length = maximum(max_length, length(string.chars.reverse.chars))\n    \n\
    \    max_length = maximum(max_length, length(string.chars.reverse.chars.reverse))\n\
    \    \n    max_length = maximum(max_length, length(string.chars.reverse.chars.reverse.chars))\n\
    \    \n    max_length = maximum(max_length, length(string.chars.reverse.chars.reverse.chars.reverse))\n\
    \    \n    max_length = maximum(max_length, length(string.chars.reverse.chars.reverse.chars.reverse.chars))\n\
    \    \n    max_length = maximum(max_length, length(string.chars.reverse.chars.reverse.chars.reverse.chars.reverse))\n\
    \    \n    max_length = maximum(max_length, length(string.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars))\n\
    \    \n    max_length = maximum(max_length, length(string.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse))\n\
    \    \n    max_length = maximum(max_length, length(string.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars))\n\
    \    \n    max_length = maximum(max_length, length(string.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars))\n\
    \    \n    max_length = maximum(max_length, length(string.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse))\n\
    \    \n    max_length = maximum(max_length, length(string.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars))\n\
    \    \n    max_length = maximum(max_length, length(string.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars))\n\
    \    \n    max_length = maximum(max_length, length(string.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse))\n\
    \    \n    max_length = maximum(max_length, length(string.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars))\n\
    \    \n    max_length = maximum(max_length, length(string.chars.reverse\nusing\
    \ Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd6r6x41j.jl:49\nin expression starting at\
    \ /tmp/tmpd6r6x41j.jl:49\n"
  stdout: ''
  timestamp: 1659805865
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp88k9gtcq.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp88k9gtcq.jl:1\n\
    in expression starting at /tmp/tmp88k9gtcq.jl:1\n"
  stdout: ''
  timestamp: 1659805855
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    longest_postfix_palindrome\
    \ = find_longest_postfix_palindrome(string)\n    \n    longest_postfix_palindrome\
    \ = longest_postfix_palindrome + string[longest_postfix_palindrome.length..-1]\n\
    \    \n    return longest_postfix_palindrome\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"..-\" near column 104\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcz3jlsu0.jl:10\nin expression starting at\
    \ /tmp/tmpcz3jlsu0.jl:10\n"
  stdout: ''
  timestamp: 1659805859
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    longest_postfix_length::Int\
    \ = find_longest_postfix_length(string, 0)\n    \n    longest_postfix_length ==\
    \ 0 ? string : string ++ reverse_of_string_prefix(string, longest_postfix_length-1)\n\
    end\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    make_palindrome(\"abba\")\n</cell>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpehpdot1c.jl:12\nin expression starting at\
    \ /tmp/tmpehpdot1c.jl:12\n"
  stdout: ''
  timestamp: 1659805865
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    longest_postfix_length =\
    \ longest_palindrome_postfix_length(string(string))\n    \n    prefix_length =\
    \ longest_postfix_length - 1\n    \n    prefix_string = string(prefix_length..-1)\n\
    \    \n    prefix_reversed_string = reverse(prefix_string)\n    \n    prefix_reversed_string\
    \ += string(longest_postfix_length..-1)\n    \n    return prefix_reversed_string\n\
    end\n</cell>\n<code language=julia-1.5>\n@time make_palindrome(\"abba\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of characters in the string that are palindromes.\nusing Test\n\n@testset begin\n\
    \ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"..-\" near column 42\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnv__tgds.jl:12\nin expression starting at\
    \ /tmp/tmpnv__tgds.jl:12\n"
  stdout: ''
  timestamp: 1659805866
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    max_length = length(string)\n\
    \    prefix_length = 0\n    prefix_string = \"\"\n    suffix_length = 0\n    suffix_string\
    \ = \"\"\n    \n    while prefix_length < max_length\n        prefix_string =\
    \ string[prefix_length..-1]\n        suffix_string = string[..-suffix_length]\n\
    \        if prefix_string == suffix_string\n            return prefix_string +\
    \ string[prefix_length..-suffix_length]\n        end\n        prefix_length =\
    \ prefix_length + 1\n    end\n    return \"\"\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"..-\" near column 46\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl4ill0ea.jl:14\nin expression starting at\
    \ /tmp/tmpl4ill0ea.jl:14\n"
  stdout: ''
  timestamp: 1659805866
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp88k9gtcq.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp88k9gtcq.jl:1\n\
    in expression starting at /tmp/tmp88k9gtcq.jl:1\n"
  stdout: ''
  timestamp: 1659805855
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    \n \
    \   for c in string:\n        if c != string[max_length]:\n            max_length\
    \ += 1\n    \n    max_length = max_length - 1\n    \n    prefix_string = \"\"\n\
    \    \n    for c in string:\n        if c != string[max_length]:\n           \
    \ prefix_string += c\n    \n    prefix_string = prefix_string[::-1]\n    \n  \
    \  prefix_string = \"\"\n    \n    for c in prefix_string:\n        if c != prefix_string[max_length]:\n\
    \            prefix_string += c\n    \n    return prefix_string + string[max_length]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpglruu1u4.jl:11\nin expression starting at\
    \ /tmp/tmpglruu1u4.jl:11\n"
  stdout: ''
  timestamp: 1659805866
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    longest_postfix_length =\
    \ find_longest_postfix_length(string)\n    \n    prefix_length = longest_postfix_length\n\
    \    \n    prefix_string = string[1:prefix_length]\n    \n    suffix_string =\
    \ string[prefix_length:]\n    \n    suffix_reversed_string = reverse(suffix_string)\n\
    \    \n    suffix_reversed_string += prefix_string\n    \n    return suffix_reversed_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"prefix_length:\" range\
    \ expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqvb6ino2.jl:14\n\
    in expression starting at /tmp/tmpqvb6ino2.jl:14\n"
  stdout: ''
  timestamp: 1659805866
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    longest_postfix_of_string\
    \ = longest_postfix_of_string(string)\n    \n    if longest_postfix_of_string\
    \ == \"\"\n        return string\n    \n    longest_postfix_of_string = longest_postfix_of_string.reverse()\n\
    \    \n    prefix_of_longest_postfix_of_string = longest_postfix_of_string.slice(0,longest_postfix_of_string.index(longest_postfix_of_string))\n\
    \    \n    prefix_of_longest_postfix_of_string = prefix_of_longest_postfix_of_string.reverse()\n\
    \    \n    prefix_of_longest_postfix_of_string += longest_postfix_of_string\n\
    \    \n    return prefix_of_longest_postfix_of_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t\
    @test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe4h0z2yv.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe4h0z2yv.jl:1\n\
    in expression starting at /tmp/tmpe4h0z2yv.jl:1\n"
  stdout: ''
  timestamp: 1659805866
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    longest_postfix_length =\
    \ longest_postfix_length(string)\n    \n    prefix_length = longest_postfix_length\
    \ - 1\n    \n    prefix_string = string[prefix_length..-1]\n    \n    prefix_reversed_string\
    \ = reverse(prefix_string)\n    \n    prefix_reversed_string += string[prefix_length..-1]\n\
    \    \n    return prefix_reversed_string\nend\nusing Test\n\n@testset begin\n\n\
    candidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"..-\" near column 42\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8tv9j525.jl:12\nin expression starting at\
    \ /tmp/tmp8tv9j525.jl:12\n"
  stdout: ''
  timestamp: 1659805866
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    longestPalindrome = \"\"\
    \n    \n    for c in string:\n        if isPalindrome(c):\n            longestPalindrome\
    \ += c\n            \n    longestPalindrome += string[string.index(c):]\n    \n\
    \    return longestPalindrome\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp20yjy9ql.jl:11\nin expression starting at\
    \ /tmp/tmp20yjy9ql.jl:11\n"
  stdout: ''
  timestamp: 1659805866
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    longestPalindrome = \"\"\
    \n    \n    for c in string\n        if isPalindrome(c)\n            longestPalindrome\
    \ += c\n        end\n    end\n    \n    longestPalindrome += reverse(string.substring(longestPalindrome.size))\n\
    \    \n    return longestPalindrome\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpecb8b6z4.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmpecb8b6z4.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  type String has no field substring\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] make_palindrome(string::String)\n\
    \     @ Main /tmp/tmpecb8b6z4.jl:16\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpecb8b6z4.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpecb8b6z4.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpecb8b6z4.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: isPalindrome not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpecb8b6z4.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpecb8b6z4.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpecb8b6z4.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpecb8b6z4.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: isPalindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpecb8b6z4.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpecb8b6z4.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpecb8b6z4.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpecb8b6z4.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: isPalindrome not defined\n \
    \ Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpecb8b6z4.jl:11\n\
    \   [2] macro expansion\n  "
  timestamp: 1659805868
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    max_length_postfix\
    \ = \"\"\n    max_length_prefix = \"\"\n    \n    for c in string:\n        if\
    \ max_length < length(c):\n            max_length = length(c)\n            max_length_postfix\
    \ = postfix_length(c)\n            max_length_prefix = prefix_length(c)\n    \
    \    \n        if max_length == length(c):\n            if c != reverse(postfix_length(c)):\n\
    \                return \"\"\n    \n    return string[max_length_prefix:max_length_postfix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1xzee5ou.jl:13\nin expression starting at\
    \ /tmp/tmp1xzee5ou.jl:13\n"
  stdout: ''
  timestamp: 1659805866
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    longestPalindrome = \"\"\
    \n    \n    for c in string\n        if isPalindrome(c)\n            longestPalindrome\
    \ = longestPalindrome + c\n        end\n    end\n    \n    longestPalindrome =\
    \ longestPalindrome + reverse(string[longestPalindrome.length..end])\n    \n \
    \   return longestPalindrome\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp4zrf2k04.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmp4zrf2k04.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  type String has no field length\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] make_palindrome(string::String)\n\
    \     @ Main /tmp/tmp4zrf2k04.jl:16\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4zrf2k04.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4zrf2k04.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp4zrf2k04.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: isPalindrome not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp4zrf2k04.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4zrf2k04.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4zrf2k04.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp4zrf2k04.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: isPalindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp4zrf2k04.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4zrf2k04.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4zrf2k04.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp4zrf2k04.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: isPalindrome not defined\n \
    \ Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp4zrf2k04.jl:11\n\
    \   [2] macro expansion\n     "
  timestamp: 1659805868
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = length(string.chars)\n\
    \    \n    if max_length == 1\n        return string\n    \n    max_length = max_length\
    \ - 1\n    \n    prefix_length = max_length\n    \n    prefix_string = string[prefix_length..-1]\n\
    \    \n    prefix_reverse = reverse(prefix_string)\n    \n    suffix_length =\
    \ prefix_length\n    \n    suffix_string = string[suffix_length..-1]\n    \n \
    \   suffix_reverse = reverse(suffix_string)\n    \n    prefix_reverse = prefix_reverse\
    \ + prefix_string\n    \n    suffix_reverse = suffix_reverse + suffix_string\n\
    \    \n    prefix_reverse = prefix_reverse.reverse\n    \n    suffix_reverse =\
    \ suffix_reverse.reverse\n    \n    prefix_reverse = prefix_reverse + prefix_string\n\
    \    \n    suffix_reverse = suffix_reverse + suffix_string\n    \n    prefix_reverse\
    \ = prefix_reverse.reverse\n    \n    suffix_reverse = suffix_reverse.reverse\n\
    \    \n    prefix_reverse = prefix_reverse + prefix_string\n    \n    suffix_reverse\
    \ = suffix_reverse + suffix_string\n    \n    prefix_reverse = prefix_reverse.reverse\n\
    \    \n    suffix_reverse = suffix_reverse.reverse\n    \n    prefix_reverse =\
    \ prefix_reverse + prefix_string\n    \n    suffix_reverse = suffix_reverse +\
    \ suffix_string\n    \n    prefix_reverse = prefix_reverse.reverse\n    \n   \
    \ suffix_reverse = suffix_reverse.reverse\n    \n    prefix_reverse = prefix_reverse\
    \ + prefix_string\n    \n    suffix_reverse = suffix_reverse + suffix_string\n\
    \    \n    prefix_reverse = prefix_reverse.reverse\n    \n    suffix_reverse =\
    \ suffix_reverse.reverse\n    \n    prefix_reverse = prefix_reverse + prefix_string\n\
    \    \n    suffix_reverse = suffix_reverse + suffix_string\n    \n    prefix_reverse\
    \ = prefix_reverse.reverse\n    \n    suffix_reverse = suffix_reverse.reverse\n\
    \    \n    prefix_reverse = prefix_reverse + prefix_string\n    \n    suffix_reverse\
    \ = suffix_reverse + suffix_string\n    \n    prefix_reverse = prefix_reverse.reverse\n\
    \    \n    suffix_reverse = suffix_reverse.reverse\n    \n    prefix_reverse =\
    \ prefix_reverse + prefix_string\n    \n    suffix_reverse = suffix_reverse +\
    \ suffix_string\n    \n    prefix_reverse = prefix_reverse.reverse\n    \n   \
    \ suffix_reverse = suffix_reverse.reverse\n    \n    prefix_reverse = prefix_reverse\
    \ + prefix_string\n    \n    suffix_reverse = suffix_reverse + suffix_string\n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"..-\" near column 42\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnvnhxp3r.jl:17\nin expression starting at\
    \ /tmp/tmpnvnhxp3r.jl:17\n"
  stdout: ''
  timestamp: 1659805866
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp88k9gtcq.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp88k9gtcq.jl:1\n\
    in expression starting at /tmp/tmp88k9gtcq.jl:1\n"
  stdout: ''
  timestamp: 1659805855
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    longest_postfix_length =\
    \ find_longest_postfix_length(string)\n    \n    prefix_length = longest_postfix_length\
    \ - 1\n    \n    prefix_string = string[1:prefix_length]\n    \n    suffix_string\
    \ = string[prefix_length:]\n    \n    prefix_reversed_string = reverse(prefix_string)\n\
    \    \n    suffix_reversed_string = reverse(suffix_string)\n    \n    combined_string\
    \ = prefix_reversed_string + suffix_reversed_string\n    \n    return combined_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"prefix_length:\" range\
    \ expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_h73b4l1.jl:14\n\
    in expression starting at /tmp/tmp_h73b4l1.jl:14\n"
  stdout: ''
  timestamp: 1659805866
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    longest_postfix_length =\
    \ longest_postfix_length(string.chars)\n    \n    prefix_length = longest_postfix_length\
    \ - 1\n    \n    prefix_string = string.chars[prefix_length..-1]\n    \n    prefix_reversed_string\
    \ = reverse(prefix_string)\n    \n    prefix_reversed_string += string.chars[prefix_length..-1]\n\
    \    \n    prefix_reversed_string = prefix_reversed_string[prefix_length..-1]\n\
    \    \n    prefix_reversed_string = prefix_reversed_string.reverse()\n    \n \
    \   prefix_reversed_string += string.chars[prefix_length..-1]\n    \n    prefix_reversed_string\
    \ = prefix_reversed_string[prefix_length..-1]\n    \n    prefix_reversed_string\
    \ = prefix_reversed_string.reverse()\n    \n    prefix_reversed_string += string.chars[prefix_length..-1]\n\
    \    \n    prefix_reversed_string = prefix_reversed_string[prefix_length..-1]\n\
    \    \n    prefix_reversed_string = prefix_reversed_string.reverse()\n    \n \
    \   prefix_reversed_string += string.chars[prefix_length..-1]\n    \n    prefix_reversed_string\
    \ = prefix_reversed_string[prefix_length..-1]\n    \n    prefix_reversed_string\
    \ = prefix_reversed_string.reverse()\n    \n    prefix_reversed_string += string.chars[prefix_length..-1]\n\
    \    \n    prefix_reversed_string = prefix_reversed_string[prefix_length..-1]\n\
    \    \n    prefix_reversed_string = prefix_reversed_string.reverse()\n    \n \
    \   prefix_reversed_string += string.chars[prefix_length..-1]\n    \n    prefix_reversed_string\
    \ = prefix_reversed_string[prefix_length..-1]\n    \n    prefix_reversed_string\
    \ = prefix_reversed_string.reverse()\n    \n    prefix_reversed_string += string.chars[prefix_length..-1]\n\
    \    \n    prefix_reversed_string = prefix_reversed_string[prefix_length..-1]\n\
    \    \n    prefix_reversed_string = prefix_reversed_string.reverse()\n    \n \
    \   prefix_reversed_string += string.chars[prefix_length..-1]\n    \n    prefix_reversed_string\
    \ = prefix_reversed_string[prefix_length..-1]\n    \n    prefix_reversed_string\
    \ = prefix_reversed_string.reverse()\n    \n    prefix_reversed_string += string.chars[prefix_length..-1]\n\
    \    \n    prefix_reversed_string = prefix_reversed_string[prefix_length..-1]\n\
    \    \n    prefix_reversed_string = prefix_reversed_string.reverse()\n    \n \
    \   prefix_reversed_string += string.chars[prefix_length..-1]\n    \n    prefix_reversed_string\
    \ = prefix_reversed_string[prefix_length..-1]\n    \n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t\
    @test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"..-\" near column 48\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeeoad_i0.jl:12\nin expression starting at\
    \ /tmp/tmpeeoad_i0.jl:12\n"
  stdout: ''
  timestamp: 1659805866
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    max_length_postfix\
    \ = \"\"\n    max_length_prefix_reverse = \"\"\n    \n    for c in string:\n \
    \       if isPalindrome(c):\n            max_length = max_length + 1\n       \
    \     max_length_postfix = max_length_postfix + c\n            max_length_prefix_reverse\
    \ = max_length_prefix_reverse + reverse(c)\n    \n    return max_length_postfix\
    \ + reverse(string[max_length_prefix_reverse:end]) + string[max_length_prefix_reverse:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnonoob30.jl:13\nin expression starting at\
    \ /tmp/tmpnonoob30.jl:13\n"
  stdout: ''
  timestamp: 1659805866
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    longest_postfix_length =\
    \ longest_postfix_length(string)\n    \n    prefix_length = longest_postfix_length\
    \ - 1\n    \n    prefix_string = string[prefix_length..-1]\n    \n    suffix_string\
    \ = string[1..prefix_length]\n    \n    prefix_reversed_string = reverse(prefix_string)\n\
    \    \n    suffix_reversed_string = reverse(suffix_string)\n    \n    combined_string\
    \ = prefix_reversed_string + suffix_reversed_string\n    \n    return combined_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"..-\" near column 42\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_u1n707d.jl:12\nin expression starting at\
    \ /tmp/tmp_u1n707d.jl:12\n"
  stdout: ''
  timestamp: 1659805866
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    longestPalindrome = \"\"\
    \n    \n    for char in string\n        if char == reverse(char)\n           \
    \ longestPalindrome += char\n        end\n    end\n    \n    longestPalindrome\
    \ += reverse(longestPalindrome)\n    \n    return longestPalindrome\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpx1tnc7p0.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmpx1tnc7p0.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  MethodError: no method matching +(::String,\
    \ ::String)\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpx1tnc7p0.jl:16\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx1tnc7p0.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx1tnc7p0.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpx1tnc7p0.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  MethodError: no method matching reverse(::Char)\n\
    \  Closest candidates are:\n    reverse(!Matched::Tuple) at ~/.conda/envs/polyglot/share/julia/base/tuple.jl:485\n\
    \    reverse(!Matched::Pair{A, B}) where {A, B} at ~/.conda/envs/polyglot/share/julia/base/pair.jl:48\n\
    \    reverse(!Matched::Union{SubString{String}, String}) at ~/.conda/envs/polyglot/share/julia/base/strings/substring.jl:166\n\
    \    ...\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpx1tnc7p0.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx1tnc7p0.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx1tnc7p0.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpx1tnc7p0.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  MethodError: no method matching reverse(::Char)\n\
    \  Closest candidates are:\n    reverse(!Matched::Tuple) at ~/.conda/envs/polyglot/share/julia/base/tuple.jl:485\n\
    \    reverse(!Matched::Pair{A, B}) where {A, B} at ~/.conda/envs/polyglot/share/julia/base/pair.jl:48\n\
    \    reverse("
  timestamp: 1659805869
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    max_length_postfix\
    \ = \"\"\n    max_length_prefix_postfix = \"\"\n    \n    for c in string\n  \
    \      if isalnum(c)\n            max_length = max_length + 1\n            max_length_postfix\
    \ = max_length_postfix + c\n        else\n            if max_length > 0\n    \
    \            max_length_prefix_postfix = max_length_prefix_postfix + c\n     \
    \       else\n                max_length_prefix_postfix = c\n            end\n\
    \        end\n    end\n    \n    max_length_prefix_postfix = reverse(max_length_prefix_postfix)\n\
    \    \n    return max_length_prefix_postfix + max_length_postfix\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\
    \")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpslguw6by.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmpslguw6by.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  MethodError: no method matching +(::String,\
    \ ::String)\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpslguw6by.jl:27\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpslguw6by.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpslguw6by.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpslguw6by.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: isalnum not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpslguw6by.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpslguw6by.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpslguw6by.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpslguw6by.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: isalnum not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpslguw6by.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpslguw6by.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpslguw6by.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpslguw6by.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: isalnum not defined\n  Stacktrace:\n\
    \   [1"
  timestamp: 1659805869
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    max_length_postfix_length\
    \ = 0\n    max_length_prefix_length = 0\n    \n    max_length_postfix = \"\"\n\
    \    max_length_postfix_postfix = \"\"\n    max_length_postfix_prefix_length =\
    \ 0\n    \n    max_length_prefix = \"\"\n    max_length_prefix_postfix = \"\"\n\
    \    max_length_prefix_prefix_length = 0\n    \n    max_length_postfix_postfix\
    \ = \"\"\n    max_length_postfix_prefix_postfix = \"\"\n    max_length_postfix_prefix_prefix_length\
    \ = 0\n    \n    max_length_prefix_postfix = \"\"\n    max_length_prefix_prefix_postfix\
    \ = \"\"\n    max_length_prefix_prefix_prefix_length = 0\n    \n    max_length_postfix_prefix_postfix\
    \ = \"\"\n    max_length_postfix_prefix_prefix_postfix = \"\"\n    max_length_postfix_prefix_prefix_prefix_length\
    \ = 0\n    \n    max_length_prefix_prefix_postfix = \"\"\n    max_length_prefix_prefix_prefix_postfix\
    \ = \"\"\n    max_length_prefix_prefix_prefix_prefix_length = 0\n    \n    max_length_postfix_prefix_prefix_postfix\
    \ = \"\"\n    max_length_postfix_prefix_prefix_prefix_postfix = \"\"\n    max_length_postfix_prefix_prefix_prefix_prefix_length\
    \ = 0\n    \n    max_length_prefix_prefix_prefix_postfix = \"\"\n    max_length_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n    max_length_prefix_prefix_prefix_prefix_prefix_length = 0\n    \n\
    \    max_length_postfix_prefix_prefix_prefix_postfix = \"\"\n    max_length_postfix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n    max_length_postfix_prefix_prefix_prefix_prefix_prefix_length = 0\n\
    \    \n    max_length_prefix_prefix_prefix_prefix_postfix = \"\"\n    max_length_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n    max_length_prefix_prefix_prefix_prefix_prefix_prefix_length = 0\n\
    \    \n    max_length_postfix_prefix_prefix_prefix_prefix_postfix = \"\"\n   \
    \ max_length_postfix_prefix_prefix_prefix_prefix_prefix_postfix = \"\"\n    max_length_postfix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_length\
    \ = 0\n    \n    max_length_prefix_prefix_prefix_prefix_prefix_postfix = \"\"\n\
    \    max_length_prefix_prefix_prefix_prefix_prefix_prefix_postfix = \"\"\n   \
    \ max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_length =\
    \ 0\n    \n    max_length_postfix_prefix_prefix_prefix_prefix_prefix_postfix =\
    \ \"\"\n    max_length_postfix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n    max_length_postfix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_length\
    \ = 0\n    \n    max_length_prefix_prefix_prefix_prefix_prefix_prefix_\nusing\
    \ Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5ib83c7s.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5ib83c7s.jl:1\n\
    in expression starting at /tmp/tmp5ib83c7s.jl:1\n"
  stdout: ''
  timestamp: 1659805867
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    \n \
    \   for c in string:\n        if c not in \"abcdefghijklmnopqrstuvwxyz\":\n  \
    \          max_length = max_length + 1\n            \n    if max_length == 0:\n\
    \        return \"\"\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length = max_length + 1\n    \n    max_length\
    \ = max_length - 1\n    \n    max_length\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp883qohc3.jl:11\nin expression starting at\
    \ /tmp/tmp883qohc3.jl:11\n"
  stdout: ''
  timestamp: 1659805866
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    \n \
    \   for s in string.split(\" \"):\n        max_length = max(max_length, s.length)\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length + 2\n\
    \    \n    max_length = max_length + 2\n    \n    max_length = max_length + 2\n\
    \    \n    \nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf3cw_8_w.jl:11\nin expression starting at\
    \ /tmp/tmpf3cw_8_w.jl:11\n"
  stdout: ''
  timestamp: 1659805867
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp88k9gtcq.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp88k9gtcq.jl:1\n\
    in expression starting at /tmp/tmp88k9gtcq.jl:1\n"
  stdout: ''
  timestamp: 1659805855
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    longest_postfix_length =\
    \ longest_palindrome_postfix(string)\n    \n    prefix_length = longest_postfix_length\
    \ - 1\n    \n    prefix_string = string[prefix_length..-1]\n    \n    prefix_reversed_string\
    \ = reverse(prefix_string)\n    \n    prefix_reversed_string[prefix_length..-1]\
    \ = string[prefix_length..-1]\n    \n    prefix_reversed_string\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\
    \")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"..-\" near column 42\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwae9a473.jl:12\nin expression starting at\
    \ /tmp/tmpwae9a473.jl:12\n"
  stdout: ''
  timestamp: 1659805864
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    longest_postfix_string =\
    \ longest_palindrome_postfix(string)\n    \n    longest_postfix_string_reversed\
    \ = reverse(longest_postfix_string)\n    \n    longest_postfix_string_reversed_with_prefix\
    \ = longest_postfix_string_reversed + longest_postfix_string\n    \n    return\
    \ longest_postfix_string_reversed_with_prefix\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpgf0y91p7.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpgf0y91p7.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: longest_palindrome_postfix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpgf0y91p7.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgf0y91p7.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgf0y91p7.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpgf0y91p7.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindrome_postfix not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpgf0y91p7.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgf0y91p7.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgf0y91p7.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpgf0y91p7.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindrome_postfix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpgf0y91p7.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgf0y91p7.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgf0y91p7.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpgf0y91p7.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindrome_postfix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpgf0y91p7.jl:8\n   [2] macro expa"
  timestamp: 1659805868
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    longest_postfix_palindrome\
    \ = find_longest_postfix_palindrome(string)\n    \n    longest_postfix_palindrome\
    \ = longest_postfix_palindrome + string[longest_postfix_palindrome.length..-1]\n\
    \    \n    return longest_postfix_palindrome\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"..-\" near column 104\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcz3jlsu0.jl:10\nin expression starting at\
    \ /tmp/tmpcz3jlsu0.jl:10\n"
  stdout: ''
  timestamp: 1659805859
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = length(string)\n\
    \    \n    if max_length <= 1\n        return string\n    end\n    \n    prefix_length\
    \ = 1\n    \n    while prefix_length <= max_length\n        \n        prefix_length\
    \ = prefix_length * 2\n        \n        if prefix_length > max_length\n     \
    \       prefix_length = max_length\n        end\n        \n        prefix_length\
    \ = prefix_length + 1\n        \n        postfix_length = max_length - prefix_length\n\
    \        \n        postfix = string[prefix_length..postfix_length]\n        \n\
    \        if reverse(postfix) == string\n            return string\n        end\n\
    \    end\n    \n    return \"\"\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxc6ckfzr.jl:37\nin expression starting at\
    \ /tmp/tmpxc6ckfzr.jl:37\n"
  stdout: ''
  timestamp: 1659805867
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    max_length_postfix\
    \ = \"\"\n    max_length_prefix = \"\"\n    \n    for c in string:\n        if\
    \ c != string[max_length]:\n            max_length += 1\n            max_length_postfix\
    \ += c\n            max_length_prefix += string[max_length]\n        else:\n \
    \           max_length_postfix += c\n            max_length_prefix += c\n    \
    \        \n    return max_length_prefix + string[max_length_postfix.length..-1]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_95yccrl.jl:13\nin expression starting at\
    \ /tmp/tmp_95yccrl.jl:13\n"
  stdout: ''
  timestamp: 1659805867
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp88k9gtcq.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp88k9gtcq.jl:1\n\
    in expression starting at /tmp/tmp88k9gtcq.jl:1\n"
  stdout: ''
  timestamp: 1659805855
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp88k9gtcq.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp88k9gtcq.jl:1\n\
    in expression starting at /tmp/tmp88k9gtcq.jl:1\n"
  stdout: ''
  timestamp: 1659805855
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    max_length_postfix\
    \ = \"\"\n    max_length_prefix_postfix = \"\"\n    \n    for c in string\n  \
    \      if isPalindrome(c)\n            max_length = length(c)\n            max_length_postfix\
    \ = postfix_of_palindrome(c)\n            max_length_prefix_postfix = prefix_of_palindrome(max_length_postfix)\n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \nusing Test\n\n@testset begin\n\
    \ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj1e_xy1f.jl:1\nin expression starting at /tmp/tmpj1e_xy1f.jl:1\n"
  stdout: ''
  timestamp: 1659805867
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    max_length_postfix_length\
    \ = 0\n    max_length_prefix_length = 0\n    \n    for c in string:\n        if\
    \ c == \"a\" or c == \"b\" or c == \"c\" or c == \"d\" or c == \"e\" or c == \"\
    f\" or c == \"g\" or c == \"h\" or c == \"i\" or c == \"j\" or c == \"k\" or c\
    \ == \"l\" or c == \"m\" or c == \"n\" or c == \"o\" or c == \"p\" or c == \"\
    q\" or c == \"r\" or c == \"s\" or c == \"t\" or c == \"u\" or c == \"v\" or c\
    \ == \"w\" or c == \"x\" or c == \"y\" or c == \"z\":\n            max_length\
    \ = max_length + 1\n            max_length_postfix_length = max_length_postfix_length\
    \ + 1\n            max_length_prefix_length = max_length_prefix_length + 1\n \
    \       else:\n            max_length = max_length - 1\n            max_length_postfix_length\
    \ = max_length_postfix_length - 1\n            max_length_prefix_length = max_length_prefix_length\
    \ - 1\n    \n    max_length_postfix_length = max_length_postfix_length + 1\n \
    \   max_length_prefix_length = max_length_prefix_length + 1\n    \n    max_length_prefix_length\
    \ = max_length_prefix_length + 1\n    \n    max_length = max_length + 1\n    \n\
    \    max_length_postfix_length = max_length_postfix_length + 1\n    max_length_prefix_length\
    \ = max_length_prefix_length + 1\n    \n    max_length_prefix_length = max_length_prefix_length\
    \ + 1\n    \n    max_length = max_length + 1\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + 1\n    max_length_prefix_length = max_length_prefix_length\
    \ + 1\n    \n    max_length_prefix_length = max_length_prefix_length + 1\n   \
    \ \n    max_length = max_length + 1\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + 1\n    max_length_prefix_length = max_length_prefix_length + 1\n    \n   \
    \ max_length_prefix_length = max_length_prefix_length + 1\n    \n    max_length\
    \ = max_length + 1\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + 1\n    max_length_prefix_length = max_length_prefix_length + 1\n    \n   \
    \ max_length_prefix_length = max_length_prefix_length + 1\n    \n    max_length\
    \ = max_length + 1\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + 1\n    max_length_prefix_length = max_length_prefix_length + 1\n    \n   \
    \ max_length_prefix_length = max_length_prefix_length + 1\n    \n    max_length\
    \ = max_length + 1\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + 1\n    max_length_prefix_length = max_length_prefix_length + 1\n    \n   \
    \ max_length_prefix_length = max_length_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnyft8wbv.jl:13\nin expression starting at\
    \ /tmp/tmpnyft8wbv.jl:13\n"
  stdout: ''
  timestamp: 1659805868
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    longest_postfix_length =\
    \ longest_postfix_length(string, 0)\n    \n    if longest_postfix_length == 0\n\
    \        return string\n    \n    prefix_length = longest_postfix_length - 1\n\
    \    \n    prefix = string[prefix_length..-1]\n    \n    suffix = string[0..prefix_length]\n\
    \    \n    prefix_reverse = reverse(prefix)\n    suffix_reverse = reverse(suffix)\n\
    \    \n    prefix_reverse = prefix_reverse + suffix_reverse\n    \n    return\
    \ prefix + prefix_reverse\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"..-\" near column 35\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkx4t7aqs.jl:15\nin expression starting at\
    \ /tmp/tmpkx4t7aqs.jl:15\n"
  stdout: ''
  timestamp: 1659805868
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp88k9gtcq.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp88k9gtcq.jl:1\n\
    in expression starting at /tmp/tmp88k9gtcq.jl:1\n"
  stdout: ''
  timestamp: 1659805855
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    \n \
    \   for c in string:\n        if max_length < length(c):\n            max_length\
    \ = length(c)\n    \n    max_length = max_length + 2\n    \n    string = \"\"\n\
    \    \n    for c in string:\n        string = string + c\n    \n    string = string\
    \ + string[max_length:end]\n    \n    return string\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbhlrxojo.jl:11\nin expression starting at\
    \ /tmp/tmpbhlrxojo.jl:11\n"
  stdout: ''
  timestamp: 1659805868
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    max_length_postfix_length\
    \ = 0\n    \n    for i = 1:length(string)\n        \n        postfix_string =\
    \ string[max_length:end]\n        \n        if postfix_string == reverse(postfix_string)\n\
    \            max_length_postfix_length = max_length\n        else\n          \
    \  max_length_postfix_length = max_length_postfix_length + 1\n        end\n  \
    \      \n        if max_length_postfix_length == length(postfix_string)\n    \
    \        max_length = max_length + 1\n        end\n    end\n    \n    return string[max_length:end]\n\
    end\n</cell>\n<code language=julia-1.4>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.4>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.4>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.4>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.4>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.4>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.4>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.4>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.4>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.4>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.4>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.4>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.4>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.4>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.4>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.4>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=julia-1.4>\nmake_palindrome(\"abba\")\n</cell>\n\
    <code language=julia-1.4>\nmake_palindrome(\"abba\")\n</cell>\n<code language=julia-1.4>\n\
    make_palindrome(\"abba\")\n</cell>\n<code language=julia-1.4>\nmake_palindrome(\"\
    abba\")\n</cell>\n<code language=juli\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptep3trjp.jl:28\nin expression starting at\
    \ /tmp/tmptep3trjp.jl:28\n"
  stdout: ''
  timestamp: 1659805868
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    \n \
    \   for c in string\n        if c != string[max_length]\n            max_length\
    \ += 1\n        end\n    end\n    \n    max_length += 1\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \n    max_length = max_length + 2\n    \n    max_length\
    \ = max_length % 2\n    \nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmcgfyqgs.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmcgfyqgs.jl:1\n\
    in expression starting at /tmp/tmpmcgfyqgs.jl:1\n"
  stdout: ''
  timestamp: 1659805861
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    longest_postfix_length =\
    \ find_longest_postfix_length(string, 0)\n    \n    if longest_postfix_length\
    \ == 0\n        return string\n    end\n    \n    prefix_length = longest_postfix_length\
    \ - 1\n    \n    prefix_string = string[prefix_length..end]\n    \n    reversed_prefix_string\
    \ = reverse(prefix_string)\n    \n    prefix_string += reversed_prefix_string\n\
    \    \n    return prefix_string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp6am7wik2.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmp6am7wik2.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_longest_postfix_length\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp6am7wik2.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6am7wik2.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6am7wik2.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp6am7wik2.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_postfix_length not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp6am7wik2.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6am7wik2.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6am7wik2.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp6am7wik2.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_postfix_length\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp6am7wik2.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6am7wik2.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6am7wik2.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp6am7wik2.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_postfix_length\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp6am7wik2.jl:8\n   [2] macro "
  timestamp: 1659805869
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    max_length = 0\n    max_length_postfix\
    \ = \"\"\n    \n    for c in string:\n        if c not in \"abcdefghijklmnopqrstuvwxyz\"\
    :\n            max_length = max_length + 1\n            max_length_postfix = c\
    \ + max_length_postfix\n    \n    max_length_postfix = reverse(max_length_postfix)\n\
    \    \n    return max_length_postfix + string\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp190r8n9l.jl:12\nin expression starting at\
    \ /tmp/tmp190r8n9l.jl:12\n"
  stdout: ''
  timestamp: 1659805868
- exit_code: 1
  program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \"\"\"\nfunction\
    \ make_palindrome(string::String)::String \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp88k9gtcq.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp88k9gtcq.jl:1\n\
    in expression starting at /tmp/tmp88k9gtcq.jl:1\n"
  stdout: ''
  timestamp: 1659805855
