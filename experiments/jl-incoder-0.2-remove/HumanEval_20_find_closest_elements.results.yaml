language: jl
name: HumanEval_20_find_closest_elements
results:
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a list of numbers and\
    \ returns the sum of the squares of the numbers in the list.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmi8s8vq1.jl:19\nin expression starting at\
    \ /tmp/tmpmi8s8vq1.jl:19\n"
  stdout: ''
  timestamp: 1659748858
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdbculwzk.jl:4\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdbculwzk.jl:1\n\
    in expression starting at /tmp/tmpdbculwzk.jl:1\n"
  stdout: ''
  timestamp: 1659748858
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = numbers[1]\n    closest_numbers_2 = numbers[2]\n\
    \    \n    if numbers[1] < numbers[2]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[2]\n    else\n        closest_numbers = numbers[2]\n\
    \        closest_numbers_2 = numbers[1]\n    end\n    \n    return closest_numbers,\
    \ closest_numbers_2\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp19p_dpvy.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp19p_dpvy.jl:24\n  Expression: candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n   Evaluated: (1.0, 2.0) == (3.9, 4.0)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp19p_dpvy.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp19p_dpvy.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp19p_dpvy.jl:25\n  Expression: candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0]) == (5.0, 5.9)\n   Evaluated: (1.0, 2.0) == (5.0, 5.9)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp19p_dpvy.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp19p_dpvy.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp19p_dpvy.jl:26\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (1.0, 2.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp19p_dpvy.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp19p_dpvy.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp19p_dpvy.jl:27\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (1.0, 2.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp19p_dpvy.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp19p_dpvy.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp19p_dpvy.jl:28\n  Expression: candida"
  timestamp: 1659748859
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.1,\
    \ 2.2, 3.3, 4.4, 5.5])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ in a list of numbers and returns the average of all the numbers in the list.\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5uf15tho.jl:19\nin expression starting at\
    \ /tmp/tmp5uf15tho.jl:19\n"
  stdout: ''
  timestamp: 1659748858
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdbculwzk.jl:4\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdbculwzk.jl:1\n\
    in expression starting at /tmp/tmpdbculwzk.jl:1\n"
  stdout: ''
  timestamp: 1659748858
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = numbers[1]\n    closest_numbers_2 = numbers[2]\n\
    \    \n    \n    for number in numbers[3:end]\n        \n        if number < closest_numbers\n\
    \            closest_numbers = number\n        elseif number > closest_numbers\n\
    \            closest_numbers_2 = number\n        end\n    end\n    \n    return\
    \ closest_numbers, closest_numbers_2\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph_gcclea.jl:21\nin expression starting at\
    \ /tmp/tmph_gcclea.jl:21\n"
  stdout: ''
  timestamp: 1659748858
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.1,\
    \ 2.2, 3.3, 4.4, 5.5])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ in a list of numbers and returns the average of all the numbers in the list.\
    \ \nHint: use the function you wrote in exercise 1.\nusing Test\n\n@testset begin\n\
    \ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj0vquv2l.jl:19\nin expression starting at\
    \ /tmp/tmpj0vquv2l.jl:19\n"
  stdout: ''
  timestamp: 1659748858
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdbculwzk.jl:4\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdbculwzk.jl:1\n\
    in expression starting at /tmp/tmpdbculwzk.jl:1\n"
  stdout: ''
  timestamp: 1659748858
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyp99mtfw.jl:19\nin expression starting at\
    \ /tmp/tmpyp99mtfw.jl:19\n"
  stdout: ''
  timestamp: 1659748858
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,\
    \ 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,\
    \ 2, 3, 4.1, 5])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,\
    \ 2, 3, 4.1, 5.1])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,\
    \ 2, 3, 4.1, 5.2])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,\
    \ 2, 3, 4.1, 5.3, 5.4, 5.5])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,\
    \ 2, 3, 4.1, 5.3, 5.4, 5.5, 5.6])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,\
    \ 2, 3, 4.1, 5.3, 5.4, 5.5, 5.6, 5.7, 5.8, 5.9, 6])\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1, 2, 3, 4.1, 5.3, 5.4, 5.5, 5.6, 5.7, 5.8, 5.9, 6, 6.1,\
    \ 6.2, 6.3, 6.4, 6.5, 6.6, 6.7, 6.8, 6.9, 7, 7.1, 7.2, 7.3, 7.4, 7.5, 7.6, 7.7,\
    \ 7.8, 7.9, 8, 8.1, 8.2, 8.3, 8.4, 8.5, 8.6, 8.7, 8.8, 8.9, 9, 9.1, 9.2, 9.3,\
    \ 9.4, 9.5, 9.6, 9.7, 9.8, 9.9, 10])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,\
    \ 2, 3, 4.1, 5.3, 5.4, 5.5, 5.6, 5.7, 5.8, 5.9, 6, 6.1, 6.2, 6.3, 6.4, 6.5, 6.6,\
    \ 6.7, 6.8, 6.9, 7, 7.1, 7.2, 7.3, 7.4, 7.5, 7.6, 7.7, 7.8, 7.9, 8, 8.1, 8.2,\
    \ 8.3, 8.4, 8.5, 8.6, 8.7, 8.8, 8.9, 9, 9.1, 9.2, 9.3, 9.4, 9.5, 9.6, 9.7, 9.8,\
    \ 9.9, 10, 10.1, 10.2, 10.3, 10.4, 10.5, 10.6, 10.7, 10.8, 10.9, 11, 11.1, 11.2,\
    \ 11.3, 11.4, 11.5, 11.6, 11.7, 11.8, 11.9, 12, 12.1, 12.2, 12.3, 12.4, 12.5,\
    \ 12.6, 12.7, 12.8, 12.9, 13, \nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcwz6_826.jl:19\nin expression starting at\
    \ /tmp/tmpcwz6_826.jl:19\n"
  stdout: ''
  timestamp: 1659748858
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = numbers[1]\n    \n    for number in numbers[2:end]\n\
    \        \n        if number < closest_numbers\n            closest_numbers =\
    \ number\n        else\n            break\n        end\n    end\n    \n    return\
    \ closest_numbers, numbers[1]\nend\n</cell>\n<code language=julia-1.5>\n# Test\
    \ the function\nnumbers = [1.2, 2.3, 3.4, 4.5]\nfind_closest_elements(numbers)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the first element of\
    \ a vector that is larger than a specified value.\nusing Test\n\n@testset begin\n\
    \ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp16jkg2a5.jl:19\nin expression starting at\
    \ /tmp/tmp16jkg2a5.jl:19\n"
  stdout: ''
  timestamp: 1659748858
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n\
    <code language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n\
    <code language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n\
    <code language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n\
    <code language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n\
    </cell\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t\
    @test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaccy8jz9.jl:19\nin expression starting at\
    \ /tmp/tmpaccy8jz9.jl:19\n"
  stdout: ''
  timestamp: 1659748858
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_elements = Vector{Float64}(undef, 2)\n    \n  \
    \  closest_elements[1] = numbers[1]\n    closest_elements[2] = numbers[2]\n  \
    \  \n    for i = 2:length(numbers)\n        \n        if numbers[i] > closest_elements[1]\n\
    \            closest_elements[1] = numbers[i]\n        elseif numbers[i] < closest_elements[2]\n\
    \            closest_elements[2] = numbers[i]\n        end\n    end\n    \n  \
    \  return closest_elements\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps14sjalx.jl:22\nin expression starting at\
    \ /tmp/tmps14sjalx.jl:22\n"
  stdout: ''
  timestamp: 1659748858
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdbculwzk.jl:4\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdbculwzk.jl:1\n\
    in expression starting at /tmp/tmpdbculwzk.jl:1\n"
  stdout: ''
  timestamp: 1659748858
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdbculwzk.jl:4\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdbculwzk.jl:1\n\
    in expression starting at /tmp/tmpdbculwzk.jl:1\n"
  stdout: ''
  timestamp: 1659748858
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.1,\
    \ 2.2, 3.3, 4.4, 5.5, 6.6])\n</cell>\n<text>\nExercise: Write a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \n    \n    For example, if the vector is [1,2,3,4,5,6] then\
    \ the function should return 25.\n    \n    Use a for loop to do this.\n    \n\
    \    Use a while loop to do this.\n    \n    Use a do loop to do this.\n    \n\
    \    Use a while loop to do this.\n    \n    Use a while loop to do this.\n  \
    \  \n    Use a while loop to do this.\n    \n    Use a while loop to do this.\n\
    \    \n    Use a while loop to do this.\n    \n    Use a while loop to do this.\n\
    \    \n    Use a while loop to do this.\n    \n    Use a while loop to do this.\n\
    \    \n    Use a while loop to do this.\n    \n    Use a while loop to do this.\n\
    \    \n    Use a while loop to do this.\n    \n    Use a while loop to do this.\n\
    \    \n    Use a while loop to do this.\n    \n    Use a while loop to do this.\n\
    \    \n    Use a while loop to do this.\n    \n    Use a while loop to do this.\n\
    \    \n    Use a while loop to do this.\n    \n    Use a while loop to do this.\n\
    \    \n    Use a while loop to do this.\n    \n    Use a while loop to do this.\n\
    \    \n    Use a while loop to do this.\n    \n    Use a while loop to do this.\n\
    \    \n    Use a while loop to do this.\n    \n    Use a while loop to do this.\n\
    \    \n    Use a while loop to do this.\n    \n    Use a while loop to do this.\n\
    \    \n    Use a while loop to do this.\n    \n    Use a while loop to do this.\n\
    \    \n    Use a while loop to do this.\n    \n    Use a while loop to do this.\n\
    \    \n    Use a while \nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw0cmgcrn.jl:19\nin expression starting at\
    \ /tmp/tmpw0cmgcrn.jl:19\n"
  stdout: ''
  timestamp: 1659748858
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_elements = Vector{Float64}(undef, 0)\n    closest_elements_distance\
    \ = Float64(0)\n    \n    for number in numbers\n        \n        distance =\
    \ abs(number - numbers[1])\n        \n        if distance < closest_elements_distance\n\
    \            closest_elements_distance = distance\n            closest_elements\
    \ = number\n        end\n    end\n    \n    return closest_elements, closest_elements_distance\n\
    end\n</cell>\n<code language=julia-1.5>\nnumbers = [1.2, 3.4, 5.6, 7.8, 9.0]\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements(numbers)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes in a list of numbers and returns\
    \ the mean of the numbers in the list.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp83g4rbve.jl:21\nin expression starting at\
    \ /tmp/tmp83g4rbve.jl:21\n"
  stdout: ''
  timestamp: 1659748858
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in a list of numbers\
    \ and returns the number of elements in the list that are less than the mean of\
    \ the list.\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbthik8f6.jl:19\nin expression starting at\
    \ /tmp/tmpbthik8f6.jl:19\n"
  stdout: ''
  timestamp: 1659748858
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[2]\n\
    \    \n    for number in numbers[3:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise\nWrite a function that takes in a list of numbers and\
    \ returns the sum of the squares of the numbers in the list.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzrmk_bdx.jl:19\nin expression starting at\
    \ /tmp/tmpzrmk_bdx.jl:19\n"
  stdout: ''
  timestamp: 1659748858
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.1,\
    \ 2.1, 3.1, 4.1])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.1,\
    \ 2.1, 3.1, 4.1, 5.1])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.1,\
    \ 2.1, 3.1, 4.1, 5.1, 6.1])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.1,\
    \ 2.1, 3.1, 4.1, 5.1, 6.1, 7.1])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.1,\
    \ 2.1, 3.1, 4.1, 5.1, 6.1, 7.1, 8.1])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.1,\
    \ 2.1, 3.1, 4.1, 5.1, 6.1, 7.1, 8.1, 9.1])\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1.1, 2.1, 3.1, 4.1, 5.1, 6.1, 7.1, 8.1, 9.1, 10.1])\n</cell>\n\
    <code language=julia-1.5>\nfind_closest_elements([1.1, 2.1, 3.1, 4.1, 5.1, 6.1,\
    \ 7.1, 8.1, 9.1, 10.1, 11.1])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.1,\
    \ 2.1, 3.1, 4.1, 5.1, 6.1, 7.1, 8.1, 9.1, 10.1, 11.1, 12.1])\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1.1, 2.1, 3.1, 4.1, 5.1, 6.1, 7.1, 8.1, 9.1, 10.1, 11.1,\
    \ 12.1, 13.1])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.1,\
    \ 2.1, 3.1, 4.1, 5.1, 6.1, 7.1, 8.1, 9.1, 10.1, 11.1, 12.1, 13.1, 14.1])\n</cell>\n\
    <code language=julia-1.5>\nfind_closest_elements([1.1, 2.1, 3.1, 4.1, 5.1, 6.1,\
    \ 7.1, 8.1, 9.1, 10.1, 11.1, 12.1, 13.1, 14.1, 15.1])\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1.1, 2.1, 3.1, 4.1, 5.1, 6.1, 7.1, 8.1, 9.1, 10.1, 11.\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppji40igi.jl:19\nin expression starting at\
    \ /tmp/tmppji40igi.jl:19\n"
  stdout: ''
  timestamp: 1659748858
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = numbers[1]\n    closest_numbers_2 = numbers[2]\n\
    \    \n    if numbers[1] < numbers[2]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[2]\n    else\n        closest_numbers = numbers[2]\n\
    \        closest_numbers_2 = numbers[1]\n    end\n    \n    return closest_numbers,\
    \ closest_numbers_2\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3k3w_y4s.jl:19\nin expression starting at\
    \ /tmp/tmp3k3w_y4s.jl:19\n"
  stdout: ''
  timestamp: 1659748858
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a list of numbers and\
    \ returns the mean of the numbers in the list. \nHint: use mean.\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2yecl36u.jl:19\nin expression starting at\
    \ /tmp/tmp2yecl36u.jl:19\n"
  stdout: ''
  timestamp: 1659748858
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise: Write a function that takes in a list of numbers and\
    \ returns the number of numbers in the list that are less than the average of\
    \ the list.\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpib3ouizq.jl:19\nin expression starting at\
    \ /tmp/tmpib3ouizq.jl:19\n"
  stdout: ''
  timestamp: 1659748858
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers in the list.\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0r4symm_.jl:19\nin expression starting at\
    \ /tmp/tmp0r4symm_.jl:19\n"
  stdout: ''
  timestamp: 1659748858
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = numbers[numbers .< numbers[1]]\n    closest_numbers[1]\
    \ = numbers[1]\n    closest_numbers[2] = numbers[2]\n    return closest_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\n# Test it out\nnumbers = [1.1, 2.1, 3.1,\
    \ 4.1, 5.1, 6.1, 7.1, 8.1, 9.1, 10.1, 11.1, 12.1, 13.1, 14.1, 15.1, 16.1, 17.1,\
    \ 18.1, 19.1, 20.1, 21.1, 22.1, 23.1, 24.1, 25.1, 26.1, 27.1, 28.1, 29.1, 30.1,\
    \ 31.1, 32.1, 33.1, 34.1, 35.1, 36.1, 37.1, 38.1, 39.1, 40.1, 41.1, 42.1, 43.1,\
    \ 44.1, 45.1, 46.1, 47.1, 48.1, 49.1, 50.1, 51.1, 52.1, 53.1, 54.1, 55.1, 56.1,\
    \ 57.1, 58.1, 59.1, 60.1, 61.1, 62.1, 63.1, 64.1, 65.1, 66.1, 67.1, 68.1, 69.1,\
    \ 70.1, 71.1, 72.1, 73.1, 74.1, 75.1, 76.1, 77.1, 78.1, 79.1, 80.1, 81.1, 82.1,\
    \ 83.1, 84.1, 85.1, 86.1, 87.1, 88.1, 89.1, 90.1, 91.1, 92.1, 93.1, 94.1, 95.1,\
    \ 96.1, 97.1, 98.1, 99.1, 100.1, 101.1, 102.1, 103.1, 104.1, 105.1, 106.1, 107.1,\
    \ 108.1, 109.1, 110.1, 111.1, 112.1, 113.1, 114.1, 115.1, 116.1, 117.1, 118.1,\
    \ 119.1, 120.1, 121.1, 122.1, 123.1, 124.1, 125.1, 126.1, 127.1, 128.1, 129.1,\
    \ 130.1, 131.1, 132.1, 133.1, 134.1, 135.1, 136.1, 137.1, 138.1, 139.1, 140.1,\
    \ 141.1, 142.1, 143.1, 144.1, 145.1, 146.1, 147.1, 148.1, 149.1, 150.1, 151.1,\
    \ 152.1, 153.1, 154.1, 155.1, 156.1, 157.1, 158.1, 159.1, 160.1, 161.1, 162.1,\
    \ 163.1, 164.1, 165.1, 166.1, 167.1, 168.1, 169.1, 170.1, 171.1, 172.1, 173.\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp99giul38.jl:11\nin expression starting at\
    \ /tmp/tmp99giul38.jl:11\n"
  stdout: ''
  timestamp: 1659748858
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of elements\
    \ in a vector that are less than a given number. For example, if the input is\
    \ [1,2,3,4,5,6,7,8,9,10] and the number given is 3, the function should return\
    \ 5.\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps26g3sb6.jl:19\nin expression starting at\
    \ /tmp/tmps26g3sb6.jl:19\n"
  stdout: ''
  timestamp: 1659748858
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = numbers[1]\n    closest_numbers_2 = numbers[2]\n\
    \    \n    if numbers[1] < numbers[2]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[2]\n    else\n        closest_numbers = numbers[2]\n\
    \        closest_numbers_2 = numbers[1]\n    end\n    \n    return closest_numbers,\
    \ closest_numbers_2\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3k3w_y4s.jl:19\nin expression starting at\
    \ /tmp/tmp3k3w_y4s.jl:19\n"
  stdout: ''
  timestamp: 1659748858
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes two numbers and returns\
    \ the sum of the squares of the two numbers.\nusing Test\n\n@testset begin\n\n\
    candidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbzrmiruy.jl:19\nin expression starting at\
    \ /tmp/tmpbzrmiruy.jl:19\n"
  stdout: ''
  timestamp: 1659748858
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdbculwzk.jl:4\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdbculwzk.jl:1\n\
    in expression starting at /tmp/tmpdbculwzk.jl:1\n"
  stdout: ''
  timestamp: 1659748858
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n\
    <code language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n\
    <code language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n\
    <code language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n\
    <code language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n\
    </\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo9v8ov_9.jl:19\nin expression starting at\
    \ /tmp/tmpo9v8ov_9.jl:19\n"
  stdout: ''
  timestamp: 1659748860
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = numbers[1]\n    \n    for number in numbers[2:end]\n\
    \        \n        if number < closest_numbers\n            closest_numbers =\
    \ number\n        else\n            break\n        end\n    end\n    \n    return\
    \ closest_numbers, numbers[1]\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpklty120c.jl:19\nin expression starting at\
    \ /tmp/tmpklty120c.jl:19\n"
  stdout: ''
  timestamp: 1659748860
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_elements = Vector{Float64}(undef, 0)\n    \n  \
    \  closest_elements[1] = numbers[1]\n    closest_elements[2] = numbers[2]\n  \
    \  \n    for index in 3:length(numbers)\n        \n        diff = numbers[index]\
    \ - closest_elements[1]\n        \n        if diff < closest_elements[2]\n   \
    \         closest_elements[1] = numbers[index]\n        elseif diff > closest_elements[2]\n\
    \            closest_elements[2] = numbers[index]\n        end\n    end\n    \n\
    \    return closest_elements\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpeqeds91m.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpeqeds91m.jl:29\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n  BoundsError:\
    \ attempt to access 0-element Vector{Float64} at index [1]\n  Stacktrace:\n  \
    \ [1] setindex!\n     @ ./array.jl:903 [inlined]\n   [2] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpeqeds91m.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpeqeds91m.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpeqeds91m.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpeqeds91m.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n  BoundsError: attempt to\
    \ access 0-element Vector{Float64} at index [1]\n  Stacktrace:\n   [1] setindex!\n\
    \     @ ./array.jl:903 [inlined]\n   [2] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpeqeds91m.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpeqeds91m.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpeqeds91m.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpeqeds91m.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n  BoundsError: attempt\
    \ to access 0-element Vector{Float64} at index [1]\n  Stacktrace:\n   [1] setindex!\n\
    \     @ ./array.jl:903 [inlined]\n   [2] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpeqeds91m.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpeqeds91m.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v"
  timestamp: 1659748862
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[2]\n\
    \    \n    smallest_index = 1\n    largest_index = 2\n    \n    while smallest_index\
    \ < length(numbers)\n        if numbers[smallest_index] < smallest_number\n  \
    \          smallest_number = numbers[smallest_index]\n            smallest_index\
    \ = smallest_index + 1\n        elseif numbers[largest_index] > largest_number\n\
    \            largest_number = numbers[largest_index]\n            largest_index\
    \ = largest_index + 1\n        else\n            smallest_index = smallest_index\
    \ + 1\n            largest_index = largest_index + 1\n        end\n    end\n \
    \   \n    return (smallest_number, largest_number)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpwr27ptkp.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmpwr27ptkp.jl:32\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n  BoundsError:\
    \ attempt to access 6-element Vector{Float64} at index [7]\n  Stacktrace:\n  \
    \ [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpwr27ptkp.jl:16\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpwr27ptkp.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpwr27ptkp.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpwr27ptkp.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n  BoundsError: attempt to\
    \ access 5-element Vector{Float64} at index [6]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpwr27ptkp.jl:16\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpwr27ptkp.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpwr27ptkp.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpwr27ptkp.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n  BoundsError: attempt\
    \ to access 6-element Vector{Float64} at index [7]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpwr27ptkp.jl:16\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpwr27ptkp.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v"
  timestamp: 1659748862
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of numbers and\
    \ returns the sum of the squares of the numbers in the vector. \nThe function\
    \ should return nothing but should print a message to the screen if the vector\
    \ is empty or has only one element.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi1xegdd1.jl:19\nin expression starting at\
    \ /tmp/tmpi1xegdd1.jl:19\n"
  stdout: ''
  timestamp: 1659748860
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdbculwzk.jl:4\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdbculwzk.jl:1\n\
    in expression starting at /tmp/tmpdbculwzk.jl:1\n"
  stdout: ''
  timestamp: 1659748858
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.2,\
    \ 2.3, 3.4, 4.5])\n</cell>\n<text>\nExercise 3\nWrite a function that takes in\
    \ a vector of numbers and returns the sum of the squares of the numbers in the\
    \ vector. \nThe function should only take in vectors of numbers and return a single\
    \ number.\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqzfvbxof.jl:19\nin expression starting at\
    \ /tmp/tmpqzfvbxof.jl:19\n"
  stdout: ''
  timestamp: 1659748860
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[2]\n\
    \    \n    for i in 2:length(numbers)\n        if numbers[i] < smallest_number\n\
    \            smallest_number = numbers[i]\n        elseif numbers[i] > largest_number\n\
    \            largest_number = numbers[i]\n        end\n    end\n    \n    return\
    \ (smallest_number, largest_number)\nend\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1,2,3,4,5,6])\n</cell>\n<text>\nExercise\nWrite a function\
    \ that takes in a list of numbers and returns the average of all the numbers in\
    \ the list. \nWrite a function that takes in a list of numbers and returns the\
    \ median of all the numbers in the list. \nWrite a function that takes in a list\
    \ of numbers and returns the mode of all the numbers in the list. \nWrite a function\
    \ that takes in a list of numbers and returns the variance of all the numbers\
    \ in the list. \nWrite a function that takes in a list of numbers and returns\
    \ the standard deviation of all the numbers in the list. \nWrite a function that\
    \ takes in a list of numbers and returns the sum of all the numbers in the list.\
    \ \nWrite a function that takes in a list of numbers and returns the minimum of\
    \ all the numbers in the list. \nWrite a function that takes in a list of numbers\
    \ and returns the maximum of all the numbers in the list. \nWrite a function that\
    \ takes in a list of numbers and returns the number of numbers in the list that\
    \ are less than the number in the list. \nWrite a function that takes in a list\
    \ of numbers and returns the number of numbers in the list that are greater than\
    \ the number in the list. \nWrite a function that takes in a list of numbers and\
    \ returns the number of numbers in the list that are equal to the number in the\
    \ list. \nWrite a function that takes in a list of numbers and returns the number\
    \ of numbers in the list that are less than or equal to the number in the list.\
    \ \nWrite a function that takes in a list of numbers and returns the number of\
    \ numbers in the list that are greater than or equal to the number in the list.\
    \ \nWrite a function that takes in a list of numbers and returns the number of\
    \ numbers in the list that are evenly divisible by the number in the list. \n\
    Write a function that takes in a list of numbers and returns the number of numbers\
    \ in the list that are odd. \nWrite a function that takes in a list of numbers\
    \ and returns the number of numbers in the list that are divisible by 2 or 3.\
    \ \nWrite a function that takes in a list of numbers and returns the number of\
    \ numbers in the list that are divisible by 5 or 7. \nWrite a function that takes\
    \ in a list of numbers and returns the number of numbers in the list that are\
    \ divisible by both 2 and 5. \nWrite a function that takes in a list of numbers\
    \ and returns the number of numbers in the list that are divisible by both 2 and\
    \ 7. \nWrite a function that takes in a list of numbers and returns the number\
    \ of numbers in the list that are divisible by both 3 and 5. \nWrite a function\
    \ that takes in a list of numbers and returns the number of numbers in the list\
    \ that are divisible by both 3 and 7. \nWrite a function that \nusing Test\n\n\
    @testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa9bgakm8.jl:19\nin expression starting at\
    \ /tmp/tmpa9bgakm8.jl:19\n"
  stdout: ''
  timestamp: 1659748860
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdbculwzk.jl:4\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdbculwzk.jl:1\n\
    in expression starting at /tmp/tmpdbculwzk.jl:1\n"
  stdout: ''
  timestamp: 1659748858
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = numbers[numbers .< numbers[1]]\n    \n\
    \    closest_numbers[1] = numbers[1]\n    \n    closest_numbers[2] = numbers[2]\n\
    \    \n    return closest_numbers\nend\n</cell>\n<code language=julia-1.4>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpme66d23p.jl:14\nin expression starting at\
    \ /tmp/tmpme66d23p.jl:14\n"
  stdout: ''
  timestamp: 1659748860
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = numbers[numbers .< numbers[end]]\n  \
    \  closest_numbers = numbers[numbers .> numbers[end]]\n    \n    closest_numbers\
    \ = sort(closest_numbers)\n    \n    return closest_numbers[1], closest_numbers[2]\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaxzs9b9u.jl:13\nin expression starting at\
    \ /tmp/tmpaxzs9b9u.jl:13\n"
  stdout: ''
  timestamp: 1659748860
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdbculwzk.jl:4\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdbculwzk.jl:1\n\
    in expression starting at /tmp/tmpdbculwzk.jl:1\n"
  stdout: ''
  timestamp: 1659748858
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = numbers[numbers .< numbers[1]]\n    \n\
    \    if length(closest_numbers) == 0\n        return (numbers[1], numbers[1])\n\
    \    end\n    \n    closest_numbers = numbers[numbers .> numbers[1]]\n    \n \
    \   if length(closest_numbers) == 0\n        return (numbers[1], numbers[1])\n\
    \    end\n    \n    return (numbers[1], numbers[2])\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpybyspdg1.jl:20\nin expression starting at\
    \ /tmp/tmpybyspdg1.jl:20\n"
  stdout: ''
  timestamp: 1659748860
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = numbers[numbers .< numbers[end]]\n  \
    \  closest_numbers = numbers[numbers .> numbers[end]]\n    \n    closest_numbers\
    \ = sort(closest_numbers)\n    \n    return closest_numbers[1], closest_numbers[2]\n\
    end\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.1, 2.2, 3.3,\
    \ 4.4, 5.5])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.1,\
    \ 2.2, 3.3, 4.4, 5.5, 6.6])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.1,\
    \ 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9])\n</cell>\n<text>\nExercise\nWrite a\
    \ function called find_closest_elements that, given a list of numbers, returns\
    \ the two numbers that are closest to each other and in order (smaller number,\
    \ larger number).\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgct4z6up.jl:13\nin expression starting at\
    \ /tmp/tmpgct4z6up.jl:13\n"
  stdout: ''
  timestamp: 1659748860
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,\
    \ 2, 3, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that takes two numbers\
    \ as inputs and returns the sum of the squares of the two numbers.\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl8qohysr.jl:19\nin expression starting at\
    \ /tmp/tmpl8qohysr.jl:19\n"
  stdout: ''
  timestamp: 1659748860
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    smallest_index = 1\n    largest_index = end\n    \n    while smallest_index\
    \ <= largest_index\n        \n        smaller_number = numbers[smallest_index]\n\
    \        larger_number = numbers[largest_index]\n        \n        if smaller_number\
    \ < larger_number\n            smallest_index += 1\n        elseif smaller_number\
    \ > larger_number\n            largest_index -= 1\n        else\n            return\
    \ (smallest_number, larger_number)\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.1,\
    \ 2.2, 3.3, 4.4, 5.5])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.1,\
    \ 2.2, 3.3, 4.4, 5.5, 6.6])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.1,\
    \ 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9])\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9, 10.0])\n</cell>\n\
    <code language=julia-1.5>\nfind_closest_elements([1.1, 2.2, 3.3, 4.4, 5.5, 6.6,\
    \ 7.7, 8.8, 9.9, 10.0, 11.1])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.1,\
    \ 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9, 10.0, 11.1, 12.2, 13.3, 14.4, 15.5,\
    \ 16.6, 17.7, 18.8, 19.9, 20.0])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.1,\
    \ 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9, 10.0, 11.1, 12.2, 13.3, 14.4, 15.5,\
    \ 16.6, 17.7, 18.8, 19.9, 20.0, 21.1])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.1,\
    \ 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9, 10.0, 11.1, 12.2, 13.3, 14.4, 15.5,\
    \ 16.6, 17.7, 18.8, 19.9, 20.0, 21.1, 22.2])\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9, 10.0, 11.1,\
    \ 12.2, 13.3, 14.4, 15.5, 16.6, 17.7, 18.8, 19.9, 20.0, 21.1, 22.2, 23.3])\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpou_8m0bm.jl:10\nin expression starting at /tmp/tmpou_8m0bm.jl:10\n"
  stdout: ''
  timestamp: 1659748860
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[2]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.4>\nfind_closest_elements([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.4>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n\
    <code language=julia-1.4>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.4>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n<code language=julia-1.4>\n\
    find_closest_elements([1,3,5,7,9])\n</cell>\n<code language=julia-1.4>\nfind_closest_elements([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.4>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n\
    <code language=julia-1.4>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.4>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n<code language=julia-1.4>\n\
    find_closest_elements([1,3,5,7,9])\n</cell>\n<code language=julia-1.4>\nfind_closest_elements([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.4>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n\
    <code language=julia-1.4>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.4>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n<code language=julia-1.4>\n\
    find_closest_elements([1,3,5,7,9])\n</cell>\n<code language=julia-1.4>\nfind_closest_elements([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.4>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n\
    <code language=julia-1.4>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.4>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n<code language=julia-1.4>\n\
    find_closest_elements([1,3,5,7,9])\n</cell>\n<code language=julia-1.4>\nfind_closest_elements([1,3,5,7,9])\n\
    </cell\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t\
    @test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp7bccifd.jl:19\nin expression starting at\
    \ /tmp/tmpp7bccifd.jl:19\n"
  stdout: ''
  timestamp: 1659748860
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdbculwzk.jl:4\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdbculwzk.jl:1\n\
    in expression starting at /tmp/tmpdbculwzk.jl:1\n"
  stdout: ''
  timestamp: 1659748858
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[2]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcb3v0_va.jl:19\nin expression starting at\
    \ /tmp/tmpcb3v0_va.jl:19\n"
  stdout: ''
  timestamp: 1659748860
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = numbers[1]\n    closest_numbers_2 = numbers[2]\n\
    \    \n    if numbers[1] < numbers[2]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[2]\n    else\n        closest_numbers = numbers[2]\n\
    \        closest_numbers_2 = numbers[1]\n    end\n    \n    return (closest_numbers,\
    \ closest_numbers_2)\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjzcn9eio.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpjzcn9eio.jl:24\n  Expression: candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n   Evaluated: (1.0, 2.0) == (3.9, 4.0)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjzcn9eio.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjzcn9eio.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpjzcn9eio.jl:25\n  Expression: candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0]) == (5.0, 5.9)\n   Evaluated: (1.0, 2.0) == (5.0, 5.9)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjzcn9eio.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjzcn9eio.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpjzcn9eio.jl:26\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (1.0, 2.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjzcn9eio.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjzcn9eio.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpjzcn9eio.jl:27\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (1.0, 2.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjzcn9eio.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjzcn9eio.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpjzcn9eio.jl:28\n  Expression: candida"
  timestamp: 1659748861
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise\nWrite a function that takes two numbers and returns\
    \ the sum of the squares of the two numbers. Test it on $x$ and $y$ and $z$. Test\
    \ it on $x$ and $y$ and $z$ and $w$. Test it on $x$ and $y$ and $z$ and $w$ and\
    \ $x$ and $y$ and $z$ and $w$. Test it on $x$ and $y$ and $z$ and $w$ and $x$\
    \ and $y$ and $z$ and $w$ and $x$ and $y$ and $z$ and $w$ and $x$ and $y$ and\
    \ $z$ and $w$ and $x$ and $y$ and $z$ and $w$ and $x$ and $y$ and $z$ and $w$\
    \ and $x$ and $y$ and $z$ and $w$ and $x$ and $y$ and $z$ and $w$ and $x$ and\
    \ $y$ and $z$ and $w$ and $x$ and $y$ and $z$ and $w$ and $x$ and $y$ and $z$\
    \ and $w$ and $x$ and $y$ and $z$ and $w$ and $x$ and $y$ and $z$ and $w$ and\
    \ $x$ and $y$ and $z$ and $w$ and $x$ and $y$ and $z$ and $w$ and $x$ and $y$\
    \ and $z$ and $w$ and $x$ and $y$ and $z$ and $w$ and $x$ and $y$ and $z$ and\
    \ $w$ and $x$ and $y$ and $z$ and $w$ and $x$ and $y$ and $z$ and $w$ and $x$\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp314rjivl.jl:19\nin expression starting at\
    \ /tmp/tmp314rjivl.jl:19\n"
  stdout: ''
  timestamp: 1659748860
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[2]\n\
    \    \n    for number in numbers[3:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.1,\
    \ 2.1, 3.1, 4.1])\n</cell>\n<text>\nExercise\nWrite a function that takes in a\
    \ list of numbers and returns the numbers that are closest to each other (smaller\
    \ number, larger number).\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpygqt58jt.jl:19\nin expression starting at\
    \ /tmp/tmpygqt58jt.jl:19\n"
  stdout: ''
  timestamp: 1659748860
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = numbers[numbers .< numbers[end]]\n  \
    \  closest_numbers = closest_numbers[closest_numbers .> numbers[end]]\n    closest_numbers\
    \ = closest_numbers[closest_numbers .< numbers[end]]\n    \n    return closest_numbers[1],\
    \ closest_numbers[2]\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnbccd0wj.jl:12\nin expression starting at\
    \ /tmp/tmpnbccd0wj.jl:12\n"
  stdout: ''
  timestamp: 1659748860
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = Vector{Float64}(undef, 0)\n    closest_numbers_distance\
    \ = Float64(0)\n    \n    for number in numbers\n        \n        distance =\
    \ abs(number - numbers[1])\n        \n        if closest_numbers_distance > distance\n\
    \            closest_numbers_distance = distance\n            closest_numbers\
    \ = [numbers[1], number]\n        else\n            closest_numbers = [number,\
    \ numbers[1]]\n        end\n    end\n    \n    return closest_numbers\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8xj9gkcs.jl:23\nin expression starting at\
    \ /tmp/tmp8xj9gkcs.jl:23\n"
  stdout: ''
  timestamp: 1659748860
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = Vector{Float64}(undef, 2)\n    \n   \
    \ closest_numbers[1] = numbers[1]\n    closest_numbers[2] = numbers[2]\n    \n\
    \    for number in numbers[2:end]\n        \n        diff = closest_numbers[1]\
    \ - number\n        \n        if diff < closest_numbers[1]\n            closest_numbers[1]\
    \ = diff\n        elseif diff > closest_numbers[2]\n            closest_numbers[2]\
    \ = diff\n        end\n    end\n    \n    return closest_numbers\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp92f15jdj.jl:24\nin expression starting at\
    \ /tmp/tmp92f15jdj.jl:24\n"
  stdout: ''
  timestamp: 1659748860
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = numbers[1]\n    closest_numbers_2 = numbers[2]\n\
    \    \n    if numbers[1] < numbers[2]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[2]\n    end\n    \n    if numbers[1] > numbers[2]\n\
    \        closest_numbers = numbers[1]\n        closest_numbers_2 = numbers[2]\n\
    \    end\n    \n    if numbers[1] == numbers[2]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[2]\n    end\n    \n    if numbers[1] < numbers[2]\n\
    \        closest_numbers = numbers[1]\n        closest_numbers_2 = numbers[2]\n\
    \    end\n    \n    if numbers[1] > numbers[2]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[2]\n    end\n    \n    if numbers[1] == numbers[2]\n\
    \        closest_numbers = numbers[1]\n        closest_numbers_2 = numbers[2]\n\
    \    end\n    \n    if numbers[1] < numbers[2]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[2]\n    end\n    \n    if numbers[1] > numbers[2]\n\
    \        closest_numbers = numbers[1]\n        closest_numbers_2 = numbers[2]\n\
    \    end\n    \n    if numbers[1] == numbers[2]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[2]\n    end\n    \n    if numbers[1] < numbers[2]\n\
    \        closest_numbers = numbers[1]\n        closest_numbers_2 = numbers[2]\n\
    \    end\n    \n    if numbers[1] > numbers[2]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[2]\n    end\n    \n    if numbers[1] == numbers[2]\n\
    \        closest_numbers = numbers[1]\n        closest_numbers_2 = numbers[2]\n\
    \    end\n    \n    if numbers[1] < numbers[2]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[2]\n    end\n    \n    if numbers[1] > numbers[2]\n\
    \        closest_numbers = numbers[1]\n        closest_numbers_2 = numbers[2]\n\
    \    end\n    \n    if numbers[1] == numbers[2]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[2]\n    end\n    \n    if numbers[1] < numbers[2]\n\
    \        closest_numbers = numbers[1]\n        closest_numbers_2 = numbers[2]\n\
    \    end\n    \n    if numbers[1] > numbers[2]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[2]\n    end\n    \n    if numbers[1] == numbers[2]\n\
    \        closest_numbers = numbers[1]\n        closest_numbers_2 = numbers[2]\n\
    \    end\n    \n    if numbers[1] < numbers[2]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[2]\n    end\n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvrskgr6a.jl:4\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvrskgr6a.jl:1\n\
    in expression starting at /tmp/tmpvrskgr6a.jl:1\n"
  stdout: ''
  timestamp: 1659748860
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = Vector{Float64}(undef, 0)\n    closest_numbers_distance\
    \ = Float64(0)\n    \n    closest_numbers[1] = numbers[1]\n    closest_numbers_distance\
    \ = numbers[1]\n    \n    for number in numbers[2:end]\n        \n        distance\
    \ = abs(closest_numbers_distance - number)\n        \n        if distance < closest_numbers_distance\n\
    \            closest_numbers_distance = distance\n            closest_numbers\
    \ = closest_numbers\n        else\n            closest_numbers_distance = closest_numbers_distance\n\
    \            closest_numbers[1] = number\n        end\n    end\n    \n    return\
    \ closest_numbers\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8_mfiv1c.jl:27\nin expression starting at\
    \ /tmp/tmp8_mfiv1c.jl:27\n"
  stdout: ''
  timestamp: 1659748861
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,5,3,7,9])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in a list of numbers\
    \ and returns the number of times the number 3 appears in the list. \nHint: Use\
    \ a for loop and a counter.\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_4bg2k5i.jl:19\nin expression starting at\
    \ /tmp/tmp_4bg2k5i.jl:19\n"
  stdout: ''
  timestamp: 1659748861
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,5,2,4,6,3])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers in the list.\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqtjev8n1.jl:19\nin expression starting at\
    \ /tmp/tmpqtjev8n1.jl:19\n"
  stdout: ''
  timestamp: 1659748861
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[2]\n\
    \    \n    for number in numbers[3:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpynqegya4.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpynqegya4.jl:24\n  Expression: candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n   Evaluated: (1.0, 5.0) == (3.9, 4.0)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpynqegya4.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpynqegya4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpynqegya4.jl:25\n  Expression: candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0]) == (5.0, 5.9)\n   Evaluated: (1.0, 5.9) == (5.0, 5.9)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpynqegya4.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpynqegya4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpynqegya4.jl:26\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (1.0, 5.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpynqegya4.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpynqegya4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpynqegya4.jl:27\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (1.0, 5.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpynqegya4.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpynqegya4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpynqegya4.jl:28\n  Expression: candida"
  timestamp: 1659748862
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for i in 2:length(numbers)\n        if numbers[i] < smallest_number\n\
    \            smallest_number = numbers[i]\n        elseif numbers[i] > largest_number\n\
    \            largest_number = numbers[i]\n        end\n    end\n    \n    return\
    \ (smallest_number, largest_number)\nend\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1,3,5,7,9])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp92khdc9a.jl:19\nin expression starting at\
    \ /tmp/tmp92khdc9a.jl:19\n"
  stdout: ''
  timestamp: 1659748861
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of numbers and\
    \ returns the sum of the squares of the numbers in the vector. \nHint: use map()\
    \ to apply the function elementwise.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6_ep0wmn.jl:19\nin expression starting at\
    \ /tmp/tmp6_ep0wmn.jl:19\n"
  stdout: ''
  timestamp: 1659748861
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyp99mtfw.jl:19\nin expression starting at\
    \ /tmp/tmpyp99mtfw.jl:19\n"
  stdout: ''
  timestamp: 1659748858
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = Vector{Float64}(undef, 2)\n    \n   \
    \ closest_numbers[1] = numbers[1]\n    closest_numbers[2] = numbers[2]\n    \n\
    \    for number in numbers[2:end]\n        \n        if number < closest_numbers[1]\n\
    \            closest_numbers[1] = number\n        elseif number > closest_numbers[2]\n\
    \            closest_numbers[2] = number\n        end\n    end\n    \n    return\
    \ closest_numbers\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg5uot1vl.jl:22\nin expression starting at\
    \ /tmp/tmpg5uot1vl.jl:22\n"
  stdout: ''
  timestamp: 1659748861
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = numbers[numbers .< numbers[1]]\n    \n\
    \    closest_numbers[1] = numbers[1]\n    \n    closest_numbers[2] = numbers[2]\n\
    \    \n    return closest_numbers\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpqbaoxwvw.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpqbaoxwvw.jl:19\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n  BoundsError:\
    \ attempt to access 0-element Vector{Float64} at index [1]\n  Stacktrace:\n  \
    \ [1] setindex!\n     @ ./array.jl:903 [inlined]\n   [2] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpqbaoxwvw.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpqbaoxwvw.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpqbaoxwvw.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpqbaoxwvw.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n  BoundsError: attempt to\
    \ access 0-element Vector{Float64} at index [1]\n  Stacktrace:\n   [1] setindex!\n\
    \     @ ./array.jl:903 [inlined]\n   [2] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpqbaoxwvw.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpqbaoxwvw.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpqbaoxwvw.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpqbaoxwvw.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n  BoundsError: attempt\
    \ to access 0-element Vector{Float64} at index [1]\n  Stacktrace:\n   [1] setindex!\n\
    \     @ ./array.jl:903 [inlined]\n   [2] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpqbaoxwvw.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpqbaoxwvw.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v"
  timestamp: 1659748863
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = numbers[1]\n    closest_numbers = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < closest_numbers\n\
    \            closest_numbers = number\n        elseif number > closest_numbers\n\
    \            closest_numbers = number\n        end\n    end\n    \n    return\
    \ closest_numbers, closest_numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes in a list of numbers and returns the mean of the numbers.\
    \ If the list is empty return NaN.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplrig7n43.jl:19\nin expression starting at\
    \ /tmp/tmplrig7n43.jl:19\n"
  stdout: ''
  timestamp: 1659748861
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdbculwzk.jl:4\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdbculwzk.jl:1\n\
    in expression starting at /tmp/tmpdbculwzk.jl:1\n"
  stdout: ''
  timestamp: 1659748858
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = numbers[1]\n    closest_numbers_index\
    \ = 2\n    \n    for number in numbers[2:end]\n        if abs(number - closest_numbers)\
    \ < abs(closest_numbers - number)\n            closest_numbers = number\n    \
    \        closest_numbers_index = closest_numbers_index + 1\n        end\n    end\n\
    \    \n    return (numbers[1], numbers[closest_numbers_index])\nend\n</cell>\n\
    <code language=julia-1.5>\nfind_closest_elements([1.2, 2.3, 3.4, 4.5])\n</cell>\n\
    <text>\nExercise: Write a function that takes a list of numbers and returns the\
    \ index of the number that is closest to each of the numbers in the list.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbamndx31.jl:18\nin expression starting at\
    \ /tmp/tmpbamndx31.jl:18\n"
  stdout: ''
  timestamp: 1659748862
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = numbers[numbers .< numbers[end]]\n  \
    \  \n    return closest_numbers[1], closest_numbers[2]\nend\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1,3,5,7,9])\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that takes in a list of numbers and returns the sum of the squares of the numbers\
    \ in that list. \nHint: Use map() to apply the function elementwise.\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv2k4xg6l.jl:10\nin expression starting at\
    \ /tmp/tmpv2k4xg6l.jl:10\n"
  stdout: ''
  timestamp: 1659748861
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.1,\
    \ 2.2, 3.3, 4.4, 5.5])\n</cell>\n<text>\nExercise\nWrite a function called find_closest_elements\
    \ that, given a list of numbers, returns the two numbers that are closest to each\
    \ other in order (smaller number, larger number).\nusing Test\n\n@testset begin\n\
    \ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr6m01y26.jl:19\nin expression starting at\
    \ /tmp/tmpr6m01y26.jl:19\n"
  stdout: ''
  timestamp: 1659748862
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.2,\
    \ 2.3, 3.4, 4.5])\n</cell>\n<text>\nExercise 2\nWrite a function that takes in\
    \ a list of numbers and returns the mean of the numbers in the list.\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi0u2zcse.jl:19\nin expression starting at\
    \ /tmp/tmpi0u2zcse.jl:19\n"
  stdout: ''
  timestamp: 1659748862
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = numbers[1]\n    \n    for number in numbers[2:end]\n\
    \        \n        if number < closest_numbers\n            closest_numbers =\
    \ number\n        else\n            break\n        end\n    end\n    \n    return\
    \ closest_numbers, closest_numbers\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpazowi87v.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpazowi87v.jl:24\n  Expression: candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n   Evaluated: (1.0, 1.0) == (3.9, 4.0)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpazowi87v.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpazowi87v.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpazowi87v.jl:25\n  Expression: candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0]) == (5.0, 5.9)\n   Evaluated: (1.0, 1.0) == (5.0, 5.9)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpazowi87v.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpazowi87v.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpazowi87v.jl:26\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (1.0, 1.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpazowi87v.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpazowi87v.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpazowi87v.jl:27\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (1.0, 1.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpazowi87v.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpazowi87v.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpazowi87v.jl:28\n  Expression: candida"
  timestamp: 1659748863
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = numbers[1]\n    closest_numbers_2 = numbers[2]\n\
    \    \n    for number in numbers[2:end]\n        if number < closest_numbers_2\n\
    \            closest_numbers_2 = number\n        elseif number > closest_numbers_2\n\
    \            closest_numbers = number\n        end\n    end\n    \n    return\
    \ closest_numbers, closest_numbers_2\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsjzlqwnv.jl:19\nin expression starting at\
    \ /tmp/tmpsjzlqwnv.jl:19\n"
  stdout: ''
  timestamp: 1659748862
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = numbers[numbers .< numbers[1]]\n    closest_numbers[1]\
    \ = numbers[1]\n    closest_numbers[2] = numbers[2]\n    \n    return closest_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp6_of0jxb.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmp6_of0jxb.jl:17\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n  BoundsError:\
    \ attempt to access 0-element Vector{Float64} at index [1]\n  Stacktrace:\n  \
    \ [1] setindex!\n     @ ./array.jl:903 [inlined]\n   [2] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmp6_of0jxb.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp6_of0jxb.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp6_of0jxb.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp6_of0jxb.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n  BoundsError: attempt to\
    \ access 0-element Vector{Float64} at index [1]\n  Stacktrace:\n   [1] setindex!\n\
    \     @ ./array.jl:903 [inlined]\n   [2] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmp6_of0jxb.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp6_of0jxb.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp6_of0jxb.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp6_of0jxb.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n  BoundsError: attempt\
    \ to access 0-element Vector{Float64} at index [1]\n  Stacktrace:\n   [1] setindex!\n\
    \     @ ./array.jl:903 [inlined]\n   [2] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmp6_of0jxb.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp6_of0jxb.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v"
  timestamp: 1659748864
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[2]\n\
    \    \n    smallest_number = numbers[1]\n    largest_number = numbers[2]\n   \
    \ \n    smallest_number = numbers[1]\n    largest_number = numbers[2]\n    \n\
    \    smallest_number = numbers[1]\n    largest_number = numbers[2]\n    \n   \
    \ smallest_number = numbers[1]\n    largest_number = numbers[2]\n    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[2]\n    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[2]\n    \n    smallest_number = numbers[1]\n   \
    \ largest_number = numbers[2]\n    \n    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[2]\n    \n    smallest_number = numbers[1]\n    largest_number = numbers[2]\n\
    \    \n    smallest_number = numbers[1]\n    largest_number = numbers[2]\n   \
    \ \n    smallest_number = numbers[1]\n    largest_number = numbers[2]\n    \n\
    \    smallest_number = numbers[1]\n    largest_number = numbers[2]\n    \n   \
    \ smallest_number = numbers[1]\n    largest_number = numbers[2]\n    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[2]\n    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[2]\n    \n    smallest_number = numbers[1]\n   \
    \ largest_number = numbers[2]\n    \n    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[2]\n    \n    smallest_number = numbers[1]\n    largest_number = numbers[2]\n\
    \    \n    smallest_number = numbers[1]\n    largest_number = numbers[2]\n   \
    \ \n    smallest_number = numbers[1]\n    largest_number = numbers[2]\n    \n\
    \    smallest_number = numbers[1]\n    largest_number = numbers[2]\n    \n   \
    \ smallest_number = numbers[1]\n    largest_number = numbers[2]\n    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[2]\n    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[2]\n    \n    smallest_number = numbers[1]\n   \
    \ largest_number = numbers[2]\n    \n    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[2]\n    \n    smallest_number = numbers[1]\n    largest_number = numbers[2]\n\
    \    \n    smallest_number = numbers[1]\n    largest_number = numbers[2]\n   \
    \ \n    smallest_number = numbers[1]\n    largest_number = numbers[2]\n    \n\
    \    smallest_number = numbers[1]\n    largest_number = numbers[2]\n    \n   \
    \ smallest_number = numbers[1]\n    largest_number = numbers[2]\n\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoavsroym.jl:4\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoavsroym.jl:1\n\
    in expression starting at /tmp/tmpoavsroym.jl:1\n"
  stdout: ''
  timestamp: 1659748862
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[2]\n\
    \    \n    for number in numbers[3:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpynqegya4.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpynqegya4.jl:24\n  Expression: candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n   Evaluated: (1.0, 5.0) == (3.9, 4.0)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpynqegya4.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpynqegya4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpynqegya4.jl:25\n  Expression: candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0]) == (5.0, 5.9)\n   Evaluated: (1.0, 5.9) == (5.0, 5.9)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpynqegya4.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpynqegya4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpynqegya4.jl:26\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (1.0, 5.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpynqegya4.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpynqegya4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpynqegya4.jl:27\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (1.0, 5.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpynqegya4.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpynqegya4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpynqegya4.jl:28\n  Expression: candida"
  timestamp: 1659748862
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1v32sdci.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp1v32sdci.jl:24\n  Expression: candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n   Evaluated: (1.0, 5.0) == (3.9, 4.0)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1v32sdci.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1v32sdci.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1v32sdci.jl:25\n  Expression: candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0]) == (5.0, 5.9)\n   Evaluated: (1.0, 5.9) == (5.0, 5.9)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1v32sdci.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1v32sdci.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1v32sdci.jl:26\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (1.0, 5.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1v32sdci.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1v32sdci.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1v32sdci.jl:27\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (1.0, 5.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1v32sdci.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1v32sdci.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1v32sdci.jl:28\n  Expression: candida"
  timestamp: 1659748863
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.1,\
    \ 2.2, 3.3, 4.4, 5.5])\n</cell>\n<text>\nExercise\nWrite a function that takes\
    \ in a list of numbers and returns the two numbers that are closest to each other.\
    \ Test it by calling it on the list [2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9,\
    \ 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.1, 4.2, 4.3, 4.4, 4.5,\
    \ 4.6, 4.7, 4.8, 4.9, 5.0, 5.1, 5.2, 5.3, 5.4, 5.5, 5.6, 5.7, 5.8, 5.9, 6.0, 6.1,\
    \ 6.2, 6.3, 6.4, 6.5, 6.6, 6.7, 6.8, 6.9, 7.0, 7.1, 7.2, 7.3, 7.4, 7.5, 7.6, 7.7,\
    \ 7.8, 7.9, 8.0, 8.1, 8.2, 8.3, 8.4, 8.5, 8.6, 8.7, 8.8, 8.9, 9.0, 9.1, 9.2, 9.3,\
    \ 9.4, 9.5, 9.6, 9.7, 9.8, 9.9, 10.0, 10.1, 10.2, 10.3, 10.4, 10.5, 10.6, 10.7,\
    \ 10.8, 10.9, 11.0, 11.1, 11.2, 11.3, 11.4, 11.5, 11.6, 11.7, 11.8, 11.9, 12.0,\
    \ 12.1, 12.2, 12.3, 12.4, 12.5, 12.6, 12.7, 12.8, 12.9, 13.0, 13.1, 13.2, 13.3,\
    \ 13.4, 13.5, 13.6, 13.7, 13.8, 13.9, 14.0, 14.1, 14.2, 14.3, 14.4, 14.5, 14.6,\
    \ 14.7, 14.8, 14.9, 15.0, 15.1, 15.2, 15.3, 15.4, 15.5, 15.6, 15.7, 15.8, 15.9,\
    \ 16.0, 16.1, 16.2, 16.3, 16.4, 16.5, 16.6, 16.7, 16.8, 16.9, 17.0, 17.1, 17.2,\
    \ 17.3, 17.4, 17.5, 17.6, 17.7, 17.8, 17.9, 18.0, 18.1, 18.2, 18.3, 18.4, 18.5,\
    \ 18.6, 18.7, 18.8, 18.9, 19.0, 19.1, 19.2, 19.3, 19.4, 19.5, 19.6, 19.7, 19.8,\
    \ 19.9, 20.0, 20.1, 20.2, 20.3, 20.4, 20.5, 20.6, 20.7, 20.8, 20.9, 21.0, 22.0,\
    \ 22.1, 22.\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8rgabenk.jl:19\nin expression starting at\
    \ /tmp/tmp8rgabenk.jl:19\n"
  stdout: ''
  timestamp: 1659748862
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1v32sdci.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp1v32sdci.jl:24\n  Expression: candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n   Evaluated: (1.0, 5.0) == (3.9, 4.0)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1v32sdci.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1v32sdci.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1v32sdci.jl:25\n  Expression: candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0]) == (5.0, 5.9)\n   Evaluated: (1.0, 5.9) == (5.0, 5.9)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1v32sdci.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1v32sdci.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1v32sdci.jl:26\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (1.0, 5.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1v32sdci.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1v32sdci.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1v32sdci.jl:27\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (1.0, 5.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1v32sdci.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1v32sdci.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1v32sdci.jl:28\n  Expression: candida"
  timestamp: 1659748863
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_elements = numbers[1]\n    \n    for element in\
    \ numbers[2:end]\n        if element < closest_elements\n            closest_elements\
    \ = element\n        else\n            break\n        end\n    end\n    \n   \
    \ return closest_elements, closest_elements\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyi28g27f.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmpyi28g27f.jl:23\n  Expression: candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n   Evaluated: (1.0, 1.0) == (3.9, 4.0)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyi28g27f.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyi28g27f.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpyi28g27f.jl:24\n  Expression: candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0]) == (5.0, 5.9)\n   Evaluated: (1.0, 1.0) == (5.0, 5.9)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyi28g27f.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyi28g27f.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpyi28g27f.jl:25\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (1.0, 1.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyi28g27f.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyi28g27f.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpyi28g27f.jl:26\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (1.0, 1.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyi28g27f.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyi28g27f.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpyi28g27f.jl:27\n  Expression: candida"
  timestamp: 1659748863
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of numbers and\
    \ returns the sum of the squares of the numbers in that vector. \nThe function\
    \ should work for vectors of any length.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf8wn035b.jl:19\nin expression starting at\
    \ /tmp/tmpf8wn035b.jl:19\n"
  stdout: ''
  timestamp: 1659748863
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6])\n\
    </cell>\n<text>\nExercise\nWrite a function that takes a vector of numbers and\
    \ returns the sum of the squares of the numbers in that vector. Test it on some\
    \ vectors.\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfwgqt2v_.jl:19\nin expression starting at\
    \ /tmp/tmpfwgqt2v_.jl:19\n"
  stdout: ''
  timestamp: 1659748863
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6])\n\
    </cell>\n<text>\nExercise: Write a function that takes in a list of numbers and\
    \ returns the sum of the squares of the numbers in the list. Make sure to handle\
    \ empty lists gracefully.\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdozbz07i.jl:19\nin expression starting at\
    \ /tmp/tmpdozbz07i.jl:19\n"
  stdout: ''
  timestamp: 1659748863
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest = numbers[1]\n    largest = numbers[1]\n    \n\
    \    for n in numbers[2:end]\n        if n < smallest\n            smallest =\
    \ n\n        elseif n > largest\n            largest = n\n        end\n    end\n\
    \    \n    return (smallest, largest)\nend\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1, 2, 3, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the first element of a vector that is greater than a given value.\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp_4jqktb.jl:19\nin expression starting at\
    \ /tmp/tmpp_4jqktb.jl:19\n"
  stdout: ''
  timestamp: 1659748863
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_elements = Vector{Float64}(undef, 2)\n    \n  \
    \  closest_elements[1] = numbers[1]\n    closest_elements[2] = numbers[2]\n  \
    \  \n    for n in numbers[2:end]\n        \n        diff = closest_elements[1]\
    \ - n\n        if diff < closest_elements[1]\n            closest_elements[1]\
    \ = n\n        elseif diff > closest_elements[2]\n            closest_elements[2]\
    \ = n\n        end\n    end\n    \n    return closest_elements\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd9i7mqet.jl:23\nin expression starting at\
    \ /tmp/tmpd9i7mqet.jl:23\n"
  stdout: ''
  timestamp: 1659748863
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[2]\n\
    \    \n    for number in numbers[3:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpynqegya4.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpynqegya4.jl:24\n  Expression: candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n   Evaluated: (1.0, 5.0) == (3.9, 4.0)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpynqegya4.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpynqegya4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpynqegya4.jl:25\n  Expression: candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0]) == (5.0, 5.9)\n   Evaluated: (1.0, 5.9) == (5.0, 5.9)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpynqegya4.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpynqegya4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpynqegya4.jl:26\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (1.0, 5.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpynqegya4.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpynqegya4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpynqegya4.jl:27\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (1.0, 5.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpynqegya4.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpynqegya4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpynqegya4.jl:28\n  Expression: candida"
  timestamp: 1659748862
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers in the list. \nThe function\
    \ should only take in numbers that are greater than 0.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkwzcoolr.jl:19\nin expression starting at\
    \ /tmp/tmpkwzcoolr.jl:19\n"
  stdout: ''
  timestamp: 1659748863
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdbculwzk.jl:4\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdbculwzk.jl:1\n\
    in expression starting at /tmp/tmpdbculwzk.jl:1\n"
  stdout: ''
  timestamp: 1659748858
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[2]\n\
    \    \n    smallest_index = find_index(numbers, smallest_number)\n    largest_index\
    \ = find_index(numbers, largest_number)\n    \n    return (numbers[smallest_index],\
    \ numbers[largest_index])\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmprmcb1p6f.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmprmcb1p6f.jl:19\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n  UndefVarError:\
    \ find_index not defined\n  Stacktrace:\n   [1] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmprmcb1p6f.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprmcb1p6f.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprmcb1p6f.jl:18\ntest set:\
    \ Error During Test at /tmp/tmprmcb1p6f.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n  UndefVarError: find_index\
    \ not defined\n  Stacktrace:\n   [1] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmprmcb1p6f.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprmcb1p6f.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprmcb1p6f.jl:18\ntest set:\
    \ Error During Test at /tmp/tmprmcb1p6f.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n  UndefVarError: find_index\
    \ not defined\n  Stacktrace:\n   [1] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmprmcb1p6f.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprmcb1p6f.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprmcb1p6f.jl:18\ntest set:\
    \ Error During Test at /tmp/tmprmcb1p6f.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n  Undef"
  timestamp: 1659748865
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = numbers[1]\n    \n    for number in numbers[2:end]\n\
    \        if number < closest_numbers\n            closest_numbers = number\n \
    \       else\n            break\n        end\n    end\n    \n    return closest_numbers,\
    \ closest_numbers\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnutm4f8b.jl:18\nin expression starting at\
    \ /tmp/tmpnutm4f8b.jl:18\n"
  stdout: ''
  timestamp: 1659748863
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a list of numbers\
    \ and return the sum of the squares of the numbers in the list. \nThe function\
    \ should take a list of numbers of any length.\nThe function should return a single\
    \ number.\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyhyp2u0_.jl:19\nin expression starting at\
    \ /tmp/tmpyhyp2u0_.jl:19\n"
  stdout: ''
  timestamp: 1659748863
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_number = numbers[1]\n    closest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < closest_number\n\
    \            closest_number = number\n        elseif number > closest_number\n\
    \            closest_number = number\n        end\n    end\n    \n    return closest_number,\
    \ closest_number\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz3th4m1p.jl:19\nin expression starting at\
    \ /tmp/tmpz3th4m1p.jl:19\n"
  stdout: ''
  timestamp: 1659748863
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest = numbers[1]\n    largest = numbers[1]\n    for\
    \ number in numbers[2:end]\n        if number < smallest\n            smallest\
    \ = number\n        elseif number > largest\n            largest = number\n  \
    \      end\n    end\n    return (smallest, largest)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmphrijmsfh.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmphrijmsfh.jl:22\n  Expression: candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n   Evaluated: (1.0, 5.0) == (3.9, 4.0)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphrijmsfh.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphrijmsfh.jl:21\ntest set: Test\
    \ Failed at /tmp/tmphrijmsfh.jl:23\n  Expression: candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0]) == (5.0, 5.9)\n   Evaluated: (1.0, 5.9) == (5.0, 5.9)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphrijmsfh.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphrijmsfh.jl:21\ntest set: Test\
    \ Failed at /tmp/tmphrijmsfh.jl:24\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (1.0, 5.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphrijmsfh.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphrijmsfh.jl:21\ntest set: Test\
    \ Failed at /tmp/tmphrijmsfh.jl:25\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (1.0, 5.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphrijmsfh.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphrijmsfh.jl:21\ntest set: Test\
    \ Failed at /tmp/tmphrijmsfh.jl:26\n  Expression: candida"
  timestamp: 1659748864
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_elements = numbers[1]\n    closest_elements_index\
    \ = 2\n    \n    for index in 2:length(numbers)\n        if numbers[index] < closest_elements\n\
    \            closest_elements = numbers[index]\n            closest_elements_index\
    \ = index\n        else\n            break\n        end\n    end\n    \n    return\
    \ closest_elements, closest_elements_index\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpka7np6sj.jl:20\nin expression starting at\
    \ /tmp/tmpka7np6sj.jl:20\n"
  stdout: ''
  timestamp: 1659748863
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = numbers[numbers .< numbers[1]]\n    closest_numbers\
    \ = closest_numbers[closest_numbers .> numbers[end]]\n    \n    return closest_numbers[1],\
    \ closest_numbers[end]\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx0p3h5tl.jl:11\nin expression starting at\
    \ /tmp/tmpx0p3h5tl.jl:11\n"
  stdout: ''
  timestamp: 1659748863
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn40gx7mq.jl:19\nin expression starting at\
    \ /tmp/tmpn40gx7mq.jl:19\n"
  stdout: ''
  timestamp: 1659748863
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.2,\
    \ 2.3, 3.4, 4.5])\n</cell>\n<text>\nExercise\nWrite a function that takes in a\
    \ vector of numbers and returns the index of the two numbers that are closest\
    \ to each other. Test your function with some test cases.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3tttc011.jl:19\nin expression starting at\
    \ /tmp/tmp3tttc011.jl:19\n"
  stdout: ''
  timestamp: 1659748863
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest = numbers[1]\n    largest = numbers[1]\n    \n\
    \    for number in numbers[2:end]\n        if number < smallest\n            smallest\
    \ = number\n        elseif number > largest\n            largest = number\n  \
    \      end\n    end\n    \n    return (smallest, largest)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes in a vector of numbers and returns the sum of\
    \ the squares of the numbers in the vector.\nusing Test\n\n@testset begin\n\n\
    candidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ea1dwr2.jl:19\nin expression starting at\
    \ /tmp/tmp9ea1dwr2.jl:19\n"
  stdout: ''
  timestamp: 1659748863
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6])\n\
    </cell>\n<text>\nExercise\nWrite a function that takes in a list of numbers and\
    \ returns the average of all the numbers in the list. \nWrite a function that\
    \ takes in a list of numbers and returns the average of all the numbers in the\
    \ list that are greater than the average of the numbers in the list. \nWrite a\
    \ function that takes in a list of numbers and returns the average of all the\
    \ numbers in the list that are less than the average of the numbers in the list.\
    \ \nWrite a function that takes in a list of numbers and returns the average of\
    \ all the numbers in the list that are greater than the average of the numbers\
    \ in the list that are less than the average of the numbers in the list. \nWrite\
    \ a function that takes in a list of numbers and returns the average of all the\
    \ numbers in the list that are greater than the average of the numbers in the\
    \ list that are less than the average of the numbers in the list that are greater\
    \ than the average of the numbers in the list. \nusing Test\n\n@testset begin\n\
    \ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxsy9ni7p.jl:19\nin expression starting at\
    \ /tmp/tmpxsy9ni7p.jl:19\n"
  stdout: ''
  timestamp: 1659748863
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = Vector{Float64}(undef, 2)\n    closest_numbers[1]\
    \ = numbers[1]\n    closest_numbers[2] = numbers[2]\n    \n    for n in numbers[2:end]\n\
    \        if abs(closest_numbers[1] - n) < abs(closest_numbers[2] - n)\n      \
    \      closest_numbers[1] = n\n        else\n            closest_numbers[2] =\
    \ n\n        end\n    end\n    \n    return closest_numbers\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphrzuzdca.jl:20\nin expression starting at\
    \ /tmp/tmphrzuzdca.jl:20\n"
  stdout: ''
  timestamp: 1659748864
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[2]\n\
    \    \n    for number in numbers[3:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise\nWrite a function that takes in a list of numbers and\
    \ returns the average of the two numbers that are closest to each other.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzflghtfa.jl:19\nin expression starting at\
    \ /tmp/tmpzflghtfa.jl:19\n"
  stdout: ''
  timestamp: 1659748864
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdbculwzk.jl:4\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdbculwzk.jl:1\n\
    in expression starting at /tmp/tmpdbculwzk.jl:1\n"
  stdout: ''
  timestamp: 1659748858
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = numbers[1]\n    closest_numbers_index\
    \ = numbers[1]\n    \n    for number in numbers[2:end]\n        \n        if number\
    \ < closest_numbers\n            closest_numbers = number\n            closest_numbers_index\
    \ = number\n        end\n    end\n    \n    return closest_numbers, closest_numbers_index\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpua5cc8_r.jl:19\nin expression starting at\
    \ /tmp/tmpua5cc8_r.jl:19\n"
  stdout: ''
  timestamp: 1659748864
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_elements = numbers[1]\n    closest_elements_index\
    \ = 2\n    \n    for index in 3:length(numbers)\n        if numbers[index] < closest_elements[closest_elements_index]\n\
    \            closest_elements_index = index\n            closest_elements = numbers[index]\n\
    \        end\n    end\n    \n    return closest_elements, closest_elements_index\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpygp1wr_p.jl:18\nin expression starting at\
    \ /tmp/tmpygp1wr_p.jl:18\n"
  stdout: ''
  timestamp: 1659748865
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[2]\n\
    \    \n    smallest_index = 2\n    largest_index = 1\n    \n    while smallest_index\
    \ < length(numbers)\n        if numbers[smallest_index] < smallest_number\n  \
    \          smallest_number = numbers[smallest_index]\n            smallest_index\
    \ = smallest_index + 1\n        elseif numbers[smallest_index] > smallest_number\n\
    \            largest_number = numbers[smallest_index]\n            largest_index\
    \ = smallest_index + 1\n        else\n            break\n        end\n    end\n\
    \    \n    return (smallest_number, largest_number)\nend\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1,4,5,7,9,11])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,4,5,7,9,11])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,4,5,7,9,11])\n</cell>\n\
    <code language=julia-1.5>\nfind_closest_elements([1,4,5,7,9,11])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_closest_elements([1,4,5,7,9,11])\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1,4,5,7,9,11])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,4,5,7,9,11])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,4,5,7,9,11])\n</cell>\n\
    <code language=julia-1.5>\nfind_closest_elements([1,4,5,7,9,11])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_closest_elements([1,4,5,7,9,11])\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1,4,5,7,9,11])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,4,5,7,9,11])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,4,5,7,9,11])\n</cell>\n\
    <code language=julia-1.5>\nfind_closest_elements([1,4,5,7,9,11])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_closest_elements([1,4,5,7,9,11])\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1,4,5,7,9,11])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,4,5,7,9,11])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,4,5,\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6l3sjf7i.jl:26\nin expression starting at\
    \ /tmp/tmp6l3sjf7i.jl:26\n"
  stdout: ''
  timestamp: 1659748864
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[2]\n\
    \    \n    for i in 2:length(numbers)\n        if numbers[i] < smallest_number\n\
    \            smallest_number = numbers[i]\n        end\n        if numbers[i]\
    \ > largest_number\n            largest_number = numbers[i]\n        end\n   \
    \ end\n    \n    return (smallest_number, largest_number)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp40wbvyl6.jl:20\nin expression starting at\
    \ /tmp/tmp40wbvyl6.jl:20\n"
  stdout: ''
  timestamp: 1659748865
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdbculwzk.jl:4\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdbculwzk.jl:1\n\
    in expression starting at /tmp/tmpdbculwzk.jl:1\n"
  stdout: ''
  timestamp: 1659748858
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = numbers[1]\n    closest_numbers_2 = numbers[2]\n\
    \    \n    closest_numbers_diff = abs(closest_numbers - closest_numbers_2)\n \
    \   \n    if closest_numbers_diff < closest_numbers[1]\n        closest_numbers\
    \ = closest_numbers_2\n    end\n    \n    if closest_numbers_diff < closest_numbers[2]\n\
    \        closest_numbers = closest_numbers_2\n    end\n    \n    return closest_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp27ivignj.jl:21\nin expression starting at\
    \ /tmp/tmp27ivignj.jl:21\n"
  stdout: ''
  timestamp: 1659748865
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = Vector{Float64}(undef, 0)\n    closest_numbers_distance\
    \ = Float64(0)\n    \n    for number in numbers\n        \n        distance =\
    \ abs(number - numbers[1])\n        \n        if distance < closest_numbers_distance\n\
    \            closest_numbers_distance = distance\n            closest_numbers\
    \ = [numbers[1], number]\n        elseif distance == closest_numbers_distance\n\
    \            closest_numbers = [number, numbers[1]]\n        end\n    end\n  \
    \  \n    return closest_numbers\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgg7ad6bb.jl:23\nin expression starting at\
    \ /tmp/tmpgg7ad6bb.jl:23\n"
  stdout: ''
  timestamp: 1659748865
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest = numbers[1]\n    largest = numbers[1]\n    \n\
    \    for n in numbers[2:end]\n        if n < smallest\n            smallest =\
    \ n\n        elseif n > largest\n            largest = n\n        end\n    end\n\
    \    \n    return (smallest, largest)\nend\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of numbers and returns the sum of the squares\
    \ of the numbers in that vector. Test it on some vectors.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqjzqz_ry.jl:19\nin expression starting at\
    \ /tmp/tmpqjzqz_ry.jl:19\n"
  stdout: ''
  timestamp: 1659748865
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdbculwzk.jl:4\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdbculwzk.jl:1\n\
    in expression starting at /tmp/tmpdbculwzk.jl:1\n"
  stdout: ''
  timestamp: 1659748858
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwivkkqii.jl:19\nin expression starting at\
    \ /tmp/tmpwivkkqii.jl:19\n"
  stdout: ''
  timestamp: 1659748865
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in a list of numbers\
    \ and returns the average of all the numbers in the list.\nHint: Use a for loop\
    \ to iterate through the list.\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkp3hxzwz.jl:19\nin expression starting at\
    \ /tmp/tmpkp3hxzwz.jl:19\n"
  stdout: ''
  timestamp: 1659748865
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9])\n\
    </cell>\n<text>\nExercise\nWrite a function that takes a vector of numbers and\
    \ returns the sum of the squares of the numbers in that vector. \nWrite a function\
    \ that takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in \nusing Test\n\n@testset begin\n\n\
    candidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph2x9r7zl.jl:19\nin expression starting at\
    \ /tmp/tmph2x9r7zl.jl:19\n"
  stdout: ''
  timestamp: 1659748865
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn40gx7mq.jl:19\nin expression starting at\
    \ /tmp/tmpn40gx7mq.jl:19\n"
  stdout: ''
  timestamp: 1659748863
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1v32sdci.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp1v32sdci.jl:24\n  Expression: candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n   Evaluated: (1.0, 5.0) == (3.9, 4.0)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1v32sdci.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1v32sdci.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1v32sdci.jl:25\n  Expression: candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0]) == (5.0, 5.9)\n   Evaluated: (1.0, 5.9) == (5.0, 5.9)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1v32sdci.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1v32sdci.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1v32sdci.jl:26\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (1.0, 5.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1v32sdci.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1v32sdci.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1v32sdci.jl:27\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (1.0, 5.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1v32sdci.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1v32sdci.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1v32sdci.jl:28\n  Expression: candida"
  timestamp: 1659748863
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for i in 2:length(numbers)\n        if numbers[i] < smallest_number\n\
    \            smallest_number = numbers[i]\n        end\n        if numbers[i]\
    \ > largest_number\n            largest_number = numbers[i]\n        end\n   \
    \ end\n    \n    return (smallest_number, largest_number)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbg3mkekf.jl:20\nin expression starting at\
    \ /tmp/tmpbg3mkekf.jl:20\n"
  stdout: ''
  timestamp: 1659748865
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = numbers[1]\n    closest_numbers_2 = numbers[2]\n\
    \    \n    for number in numbers[2:end]\n        if number < closest_numbers_2\n\
    \            closest_numbers_2 = number\n        elseif number > closest_numbers_2\n\
    \            closest_numbers = number\n        end\n    end\n    \n    return\
    \ closest_numbers, closest_numbers_2\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0dklh1bw.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp0dklh1bw.jl:24\n  Expression: candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n   Evaluated: (2.2, 2.0) == (3.9, 4.0)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0dklh1bw.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0dklh1bw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp0dklh1bw.jl:25\n  Expression: candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0]) == (5.0, 5.9)\n   Evaluated: (5.0, 2.0) == (5.0, 5.9)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0dklh1bw.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0dklh1bw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp0dklh1bw.jl:26\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (2.2, 2.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0dklh1bw.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0dklh1bw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp0dklh1bw.jl:27\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (5.0, 2.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0dklh1bw.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0dklh1bw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp0dklh1bw.jl:28\n  Expression: candida"
  timestamp: 1659748866
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers in the list.\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6n_6u7ua.jl:19\nin expression starting at\
    \ /tmp/tmp6n_6u7ua.jl:19\n"
  stdout: ''
  timestamp: 1659748865
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = numbers[2:end]\n    closest_numbers[1]\
    \ = numbers[1]\n    closest_numbers[2] = numbers[2]\n    \n    return closest_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp7kmj4wcm.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmp7kmj4wcm.jl:17\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n  MethodError:\
    \ Cannot `convert` an object of type Vector{Float64} to an object of type Tuple{Float64,\
    \ Float64}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:336\n\
    \    convert(::Type{T}, !Matched::Tuple{Vararg{Any, N}}) where {N, T<:Tuple} at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:337\n    convert(::Type{T},\
    \ !Matched::CartesianIndex) where T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/multidimensional.jl:137\n\
    \    ...\n  Stacktrace:\n   [1] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmp7kmj4wcm.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7kmj4wcm.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7kmj4wcm.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp7kmj4wcm.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n  MethodError: Cannot `convert`\
    \ an object of type Vector{Float64} to an object of type Tuple{Float64, Float64}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Tuple\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:336\n    convert(::Type{T},\
    \ !Matched::Tuple{Vararg{Any, N}}) where {N, T<:Tuple} at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:337\n\
    \    convert(::Type{T}, !Matched::CartesianIndex) where T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/multidimensional.jl:137\n\
    \    ...\n  Stacktrace:\n   [1] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmp7kmj4wcm.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro ex"
  timestamp: 1659748868
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_number = numbers[1]\n    closest_distance = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        distance = abs(closest_number\
    \ - number)\n        if distance < closest_distance\n            closest_number\
    \ = number\n            closest_distance = distance\n        end\n    end\n  \
    \  \n    return (closest_number, closest_distance)\nend\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,\
    \ 2, 3, 5])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1, 2,\
    \ 3, 5])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1, 2, 3,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1, 2, 3, 5])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1, 2, 3, 5])\n</cell>\n\
    <code language=julia-1.5>\nfind_closest_elements([1, 2, 3, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_closest_elements([1, 2, 3, 5])\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1, 2, 3, 5])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,\
    \ 2, 3, 5])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1, 2,\
    \ 3, 5])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1, 2, 3,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1, 2, 3, 5])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1, 2, 3, 5])\n</cell>\n\
    <code language=julia-1.5>\nfind_closest_elements([1, 2, 3, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_closest_elements([1, 2, 3, 5])\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1, 2, 3, 5])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,\
    \ 2, 3, 5])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1, 2,\
    \ 3, 5])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1, 2, 3,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1, 2, 3, 5])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1, 2, 3, 5])\n</cell>\n\
    <code language=julia-1.5>\nfind_closest_elements([1, 2, 3, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_closest_elements([1, 2, 3, 5])\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1, 2, 3, 5])\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd1ilq3pw.jl:19\nin expression starting at\
    \ /tmp/tmpd1ilq3pw.jl:19\n"
  stdout: ''
  timestamp: 1659748865
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = numbers[1]\n    closest_numbers_2 = numbers[2]\n\
    \    \n    \n    for number in numbers[3:end]\n        \n        if number < closest_numbers_2\n\
    \            closest_numbers_2 = number\n        elseif number > closest_numbers_2\n\
    \            closest_numbers = number\n        end\n    end\n    \n    return\
    \ closest_numbers, closest_numbers_2\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmps9aw69l5.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmps9aw69l5.jl:26\n  Expression: candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n   Evaluated: (2.2, 2.0) == (3.9, 4.0)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps9aw69l5.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps9aw69l5.jl:25\ntest set: Test\
    \ Failed at /tmp/tmps9aw69l5.jl:27\n  Expression: candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0]) == (5.0, 5.9)\n   Evaluated: (5.0, 2.0) == (5.0, 5.9)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps9aw69l5.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps9aw69l5.jl:25\ntest set: Test\
    \ Failed at /tmp/tmps9aw69l5.jl:28\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (2.2, 2.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps9aw69l5.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps9aw69l5.jl:25\ntest set: Test\
    \ Failed at /tmp/tmps9aw69l5.jl:29\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (5.0, 2.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps9aw69l5.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps9aw69l5.jl:25\ntest set: Test\
    \ Failed at /tmp/tmps9aw69l5.jl:30\n  Expression: candida"
  timestamp: 1659748866
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[2]\n\
    \    \n    for number in numbers[3:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,4,5,6,7,8,9])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in a vector of numbers\
    \ and returns the sum of the squares of the numbers in the vector.\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa0jm59du.jl:19\nin expression starting at\
    \ /tmp/tmpa0jm59du.jl:19\n"
  stdout: ''
  timestamp: 1659748865
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[2]\n\
    \    \n    for number in numbers[3:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a list of numbers and\
    \ returns the sum of the squares of the numbers in that list.\nusing Test\n\n\
    @testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp68v2mw68.jl:19\nin expression starting at\
    \ /tmp/tmp68v2mw68.jl:19\n"
  stdout: ''
  timestamp: 1659748865
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = numbers[numbers .< numbers[1]]\n    \n\
    \    closest_numbers[1] = numbers[1]\n    \n    closest_numbers[2] = numbers[2]\n\
    \    \n    return closest_numbers\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg5u5t3vc.jl:14\nin expression starting at\
    \ /tmp/tmpg5u5t3vc.jl:14\n"
  stdout: ''
  timestamp: 1659748866
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdbculwzk.jl:4\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdbculwzk.jl:1\n\
    in expression starting at /tmp/tmpdbculwzk.jl:1\n"
  stdout: ''
  timestamp: 1659748858
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = numbers[1]\n    closest_numbers_index\
    \ = 2\n    \n    for index in 2:length(numbers)\n        if numbers[index] < closest_numbers[closest_numbers_index]\n\
    \            closest_numbers_index = index\n            closest_numbers = numbers[index]\n\
    \        end\n    end\n    \n    return closest_numbers, closest_numbers_index\n\
    end\n</cell>\n<code language=julia-1.5>\nnumbers = [1.1, 2.1, 3.1, 4.1, 5.1, 6.1,\
    \ 7.1, 8.1, 9.1, 10.1, 11.1, 12.1, 13.1, 14.1, 15.1, 16.1, 17.1, 18.1, 19.1, 20.1,\
    \ 21.1, 22.1, 23.1, 24.1, 25.1, 26.1, 27.1, 28.1, 29.1, 30.1, 31.1, 32.1, 33.1,\
    \ 34.1, 35.1, 36.1, 37.1, 38.1, 39.1, 40.1, 41.1, 42.1, 43.1, 44.1, 45.1, 46.1,\
    \ 47.1, 48.1, 49.1, 50.1, 51.1, 52.1, 53.1, 54.1, 55.1, 56.1, 57.1, 58.1, 59.1,\
    \ 60.1, 61.1, 62.1, 63.1, 64.1, 65.1, 66.1, 67.1, 68.1, 69.1, 70.1, 71.1, 72.1,\
    \ 73.1, 74.1, 75.1, 76.1, 77.1, 78.1, 79.1, 80.1, 81.1, 82.1, 83.1, 84.1, 85.1,\
    \ 86.1, 87.1, 88.1, 89.1, 90.1, 91.1, 92.1, 93.1, 94.1, 95.1, 96.1, 97.1, 98.1,\
    \ 99.1, 100.1, 101.1, 102.1, 103.1, 104.1, 105.1, 106.1, 107.1, 108.1, 109.1,\
    \ 110.1, 111.1, 112.1, 113.1, 114.1, 115.1, 116.1, 117.1, 118.1, 119.1, 120.1,\
    \ 121.1, 122.1, 123.1, 124.1, 125.1, 126.1, 127.1, 128.1, 129.1, 130.1, 131.1,\
    \ 132.1, 133.1, 134.1, 135.1, 136.1, 137.1, 138.1, 139.1, 140.1, 141.1, 142.1,\
    \ 143.1, 144.1, 145.1, 146.1, 147.1, 148.1, 149.1, 150.1, 151.1, 152.1, 153.1,\
    \ 154.1, 155.1, 156.1, 157.1, 158.1, 159.1, 160.1, 161.1, 162.1, 163.1, 16\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpifsl5lmi.jl:18\nin expression starting at\
    \ /tmp/tmpifsl5lmi.jl:18\n"
  stdout: ''
  timestamp: 1659748866
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = numbers[1]\n    \n    for number in numbers[2:end]\n\
    \        if number < closest_numbers\n            closest_numbers = number\n \
    \       else\n            break\n        end\n    end\n    \n    return closest_numbers,\
    \ numbers[1]\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdudle1p9.jl:18\nin expression starting at\
    \ /tmp/tmpdudle1p9.jl:18\n"
  stdout: ''
  timestamp: 1659748866
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = numbers[numbers .< numbers[end]]\n  \
    \  closest_numbers = closest_numbers[closest_numbers .> numbers[end]]\n    \n\
    \    closest_numbers = sort(closest_numbers)\n    \n    return closest_numbers[1],\
    \ closest_numbers[2]\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8qa6zh7s.jl:13\nin expression starting at\
    \ /tmp/tmp8qa6zh7s.jl:13\n"
  stdout: ''
  timestamp: 1659748866
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[2]\n\
    \    \n    for number in numbers[3:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,4,5,7,9])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of elements\
    \ in a vector that are greater than a given number. For example, if the vector\
    \ is [1,2,3,4,5,6,7,8,9] and the number is 3, the function should return 5.\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc95qp20r.jl:19\nin expression starting at\
    \ /tmp/tmpc95qp20r.jl:19\n"
  stdout: ''
  timestamp: 1659748866
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdbculwzk.jl:4\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdbculwzk.jl:1\n\
    in expression starting at /tmp/tmpdbculwzk.jl:1\n"
  stdout: ''
  timestamp: 1659748858
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg0z8acst.jl:19\nin expression starting at\
    \ /tmp/tmpg0z8acst.jl:19\n"
  stdout: ''
  timestamp: 1659748866
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,4,6,8,10])\n\
    </cell>\n<text>\nExercise\nWrite a function that takes in a list of numbers and\
    \ returns the sum of the squares of the numbers in the list.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuw5ca1pg.jl:19\nin expression starting at\
    \ /tmp/tmpuw5ca1pg.jl:19\n"
  stdout: ''
  timestamp: 1659748866
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = numbers[1]\n    closest_numbers_2 = numbers[2]\n\
    \    \n    if numbers[1] < numbers[2]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[2]\n    else\n        closest_numbers = numbers[2]\n\
    \        closest_numbers_2 = numbers[1]\n    end\n    \n    return (closest_numbers,\
    \ closest_numbers_2)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4xafkoew.jl:19\nin expression starting at\
    \ /tmp/tmp4xafkoew.jl:19\n"
  stdout: ''
  timestamp: 1659748866
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdbculwzk.jl:4\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdbculwzk.jl:1\n\
    in expression starting at /tmp/tmpdbculwzk.jl:1\n"
  stdout: ''
  timestamp: 1659748858
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.3>\nfind_closest_elements([1,\
    \ 2, 3, 4, 5])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers in the vector.\
    \ \nUse this function to find the sum of the squares of the numbers in the vector\
    \ $[1,2,3,4,5]$. \nUse this function to find the sum of the squares of the numbers\
    \ in the vector $[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]$. \nUse\
    \ this function to find the sum of the squares of the numbers in the vector $[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]$.\
    \ \nUse this function to find the sum of the squares of the numbers in the vector\
    \ $[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]$.\
    \ \nUse this function to find the sum of the squares of the numbers in the vector\
    \ $[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,8\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp66q8jnt8.jl:19\nin expression starting at\
    \ /tmp/tmp66q8jnt8.jl:19\n"
  stdout: ''
  timestamp: 1659748866
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[2]\n\
    \    \n    for number in numbers[3:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.4>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of numbers and\
    \ returns the sum of the squares of the numbers in the vector.\nusing Test\n\n\
    @testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkvoj_6qn.jl:19\nin expression starting at\
    \ /tmp/tmpkvoj_6qn.jl:19\n"
  stdout: ''
  timestamp: 1659748866
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdbculwzk.jl:4\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdbculwzk.jl:1\n\
    in expression starting at /tmp/tmpdbculwzk.jl:1\n"
  stdout: ''
  timestamp: 1659748858
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in a vector of numbers\
    \ and returns the sum of the squares of the numbers in that vector. \nHint: use\
    \ the sum function.\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp79x1n_rl.jl:19\nin expression starting at\
    \ /tmp/tmp79x1n_rl.jl:19\n"
  stdout: ''
  timestamp: 1659748866
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[2]\n\
    \    \n    for number in numbers[3:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise\nWrite a function that takes in a list of numbers and\
    \ returns the index of the two numbers that are closest to each other.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp30x6jrc5.jl:19\nin expression starting at\
    \ /tmp/tmp30x6jrc5.jl:19\n"
  stdout: ''
  timestamp: 1659748866
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a list of numbers and\
    \ returns the number of elements in the list that are greater than the mean of\
    \ the list.\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw70cd838.jl:19\nin expression starting at\
    \ /tmp/tmpw70cd838.jl:19\n"
  stdout: ''
  timestamp: 1659748866
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[2]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise: Write a function that takes a list of numbers and returns\
    \ the average of those numbers. If the list is empty return 0.\nusing Test\n\n\
    @testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd_zzu02w.jl:19\nin expression starting at\
    \ /tmp/tmpd_zzu02w.jl:19\n"
  stdout: ''
  timestamp: 1659748867
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdbculwzk.jl:4\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdbculwzk.jl:1\n\
    in expression starting at /tmp/tmpdbculwzk.jl:1\n"
  stdout: ''
  timestamp: 1659748858
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[2]\n\
    \    \n    for number in numbers[3:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmppycfn2.jl:19\nin expression starting at\
    \ /tmp/tmpmppycfn2.jl:19\n"
  stdout: ''
  timestamp: 1659748867
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdbculwzk.jl:4\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdbculwzk.jl:1\n\
    in expression starting at /tmp/tmpdbculwzk.jl:1\n"
  stdout: ''
  timestamp: 1659748858
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.1,\
    \ 2.2, 3.3, 4.4, 5.5])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in the\
    \ vector.\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5ulhdll_.jl:19\nin expression starting at\
    \ /tmp/tmp5ulhdll_.jl:19\n"
  stdout: ''
  timestamp: 1659748867
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = numbers[numbers .< numbers[end]]\n  \
    \  closest_numbers = closest_numbers[closest_numbers .> numbers[end]]\n    \n\
    \    closest_numbers = sort(closest_numbers)\n    \n    return closest_numbers[1],\
    \ closest_numbers[2]\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8qa6zh7s.jl:13\nin expression starting at\
    \ /tmp/tmp8qa6zh7s.jl:13\n"
  stdout: ''
  timestamp: 1659748866
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[2]\n\
    \    \n    for number in numbers[3:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,5,7,9,11])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of numbers and\
    \ returns the sum of the squares of the numbers in that vector. \nThe function\
    \ should take an input vector of numbers and return an output vector of numbers.\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2p2n5l44.jl:19\nin expression starting at\
    \ /tmp/tmp2p2n5l44.jl:19\n"
  stdout: ''
  timestamp: 1659748867
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[2]\n\
    \    \n    for number in numbers[3:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmppycfn2.jl:19\nin expression starting at\
    \ /tmp/tmpmppycfn2.jl:19\n"
  stdout: ''
  timestamp: 1659748867
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    smallest_index = 1\n    largest_index = end\n    \n    while smallest_index\
    \ < end && largest_index > 1\n        if numbers[smallest_index] < numbers[largest_index]\n\
    \            largest_number = numbers[largest_index]\n            largest_index\
    \ = largest_index - 1\n        else\n            smallest_number = numbers[smallest_index]\n\
    \            smallest_index = smallest_index + 1\n        end\n    end\n    \n\
    \    return smallest_number, largest_number\nend\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of numbers and returns the sum of the squares\
    \ of the numbers in that vector. Test it on some vectors.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdyg9wfrl.jl:10\nin expression starting at /tmp/tmpdyg9wfrl.jl:10\n"
  stdout: ''
  timestamp: 1659748867
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7zxf5mp9.jl:19\nin expression starting at\
    \ /tmp/tmp7zxf5mp9.jl:19\n"
  stdout: ''
  timestamp: 1659748867
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.1,\
    \ 2.2, 3.3, 4.4, 5.5])\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ in a vector of numbers and returns the sum of the squares of the numbers in\
    \ the vector. \nHint: use the function you wrote in exercise 2\nusing Test\n\n\
    @testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt6okcsjo.jl:19\nin expression starting at\
    \ /tmp/tmpt6okcsjo.jl:19\n"
  stdout: ''
  timestamp: 1659748867
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = numbers[1]\n    closest_numbers_2 = numbers[2]\n\
    \    \n    if numbers[1] < numbers[2]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[2]\n    end\n    \n    if numbers[1] > numbers[2]\n\
    \        closest_numbers = numbers[1]\n        closest_numbers_2 = numbers[2]\n\
    \    end\n    \n    if numbers[1] == numbers[2]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[1]\n    end\n    \n    if numbers[1] < numbers[1]\n\
    \        closest_numbers = numbers[1]\n        closest_numbers_2 = numbers[1]\n\
    \    end\n    \n    if numbers[1] > numbers[1]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[1]\n    end\n    \n    if numbers[1] == numbers[1]\n\
    \        closest_numbers = numbers[1]\n        closest_numbers_2 = numbers[1]\n\
    \    end\n    \n    if numbers[1] < numbers[1]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[1]\n    end\n    \n    if numbers[1] > numbers[1]\n\
    \        closest_numbers = numbers[1]\n        closest_numbers_2 = numbers[1]\n\
    \    end\n    \n    if numbers[1] == numbers[1]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[1]\n    end\n    \n    if numbers[1] < numbers[1]\n\
    \        closest_numbers = numbers[1]\n        closest_numbers_2 = numbers[1]\n\
    \    end\n    \n    if numbers[1] > numbers[1]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[1]\n    end\n    \n    if numbers[1] == numbers[1]\n\
    \        closest_numbers = numbers[1]\n        closest_numbers_2 = numbers[1]\n\
    \    end\n    \n    if numbers[1] < numbers[1]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[1]\n    end\n    \n    if numbers[1] > numbers[1]\n\
    \        closest_numbers = numbers[1]\n        closest_numbers_2 = numbers[1]\n\
    \    end\n    \n    if numbers[1] == numbers[1]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[1]\n    end\n    \n    if numbers[1] < numbers[1]\n\
    \        closest_numbers = numbers[1]\n        closest_numbers_2 = numbers[1]\n\
    \    end\n    \n    if numbers[1] > numbers[1]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[1]\n    end\n    \n    if numbers[1] == numbers[1]\n\
    \        closest_numbers = numbers[1]\n        closest_numbers_2 = numbers[1]\n\
    \    end\n    \n    if numbers[1] < numbers[1]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[1]\n    end\n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyqj255ms.jl:4\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyqj255ms.jl:1\n\
    in expression starting at /tmp/tmpyqj255ms.jl:1\n"
  stdout: ''
  timestamp: 1659748867
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[2]\n\
    \    \n    for i in 1:length(numbers)\n        if numbers[i] < smallest_number\n\
    \            smallest_number = numbers[i]\n        end\n        if numbers[i]\
    \ > largest_number\n            largest_number = numbers[i]\n        end\n   \
    \ end\n    \n    return (smallest_number, largest_number)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n# Test our function\nfind_closest_elements([1.1, 2.2, 3.3,\
    \ 4.4, 5.5])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a list\
    \ of numbers and returns the number of elements in the list that are greater than\
    \ or equal to each other.\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptomzpvw7.jl:20\nin expression starting at\
    \ /tmp/tmptomzpvw7.jl:20\n"
  stdout: ''
  timestamp: 1659748868
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest = numbers[1]\n    largest = numbers[1]\n    \n\
    \    for n in numbers[2:end]\n        if n < smallest\n            smallest =\
    \ n\n        elseif n > largest\n            largest = n\n        end\n    end\n\
    \    \n    return (smallest, largest)\nend\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1.1, 2.2, 3.3, 4.4, 5.5])\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes in a list of numbers and returns the average of all\
    \ the numbers in the list. \nHint: use the function you wrote in the previous\
    \ exercise.\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplr6m_1a_.jl:19\nin expression starting at\
    \ /tmp/tmplr6m_1a_.jl:19\n"
  stdout: ''
  timestamp: 1659748868
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest = numbers[1]\n    largest = numbers[1]\n    \n\
    \    for n in numbers[2:end]\n        if n < smallest\n            smallest =\
    \ n\n        elseif n > largest\n            largest = n\n        end\n    end\n\
    \    \n    return (smallest, largest)\nend\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1.1, 2.2, 3.3, 4.4, 5.5])\n</cell>\n<text>\nExercise\n\
    Write a function called find_closest_elements that, given a list of numbers (of\
    \ length at least two) select and return two that are the closest to each other\
    \ and return them in order (smaller number, larger number).\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8mc9jesy.jl:19\nin expression starting at\
    \ /tmp/tmp8mc9jesy.jl:19\n"
  stdout: ''
  timestamp: 1659748868
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = numbers[numbers .< numbers[end]]\n  \
    \  closest_numbers = closest_numbers[closest_numbers .> numbers[end]]\n    closest_numbers\
    \ = closest_numbers[closest_numbers .< numbers[end]]\n    \n    closest_numbers\
    \ = numbers[numbers .> numbers[end]]\n    closest_numbers = closest_numbers[closest_numbers\
    \ .> numbers[end]]\n    closest_numbers = closest_numbers[closest_numbers .< numbers[end]]\n\
    \    \n    closest_numbers = numbers[numbers .< numbers[end]]\n    closest_numbers\
    \ = closest_numbers[closest_numbers .> numbers[end]]\n    closest_numbers = closest_numbers[closest_numbers\
    \ .< numbers[end]]\n    \n    closest_numbers = numbers[numbers .> numbers[end]]\n\
    \    closest_numbers = closest_numbers[closest_numbers .> numbers[end]]\n    closest_numbers\
    \ = closest_numbers[closest_numbers .< numbers[end]]\n    \n    closest_numbers\
    \ = numbers[numbers .< numbers[end]]\n    closest_numbers = closest_numbers[closest_numbers\
    \ .> numbers[end]]\n    closest_numbers = closest_numbers[closest_numbers .< numbers[end]]\n\
    \    \n    closest_numbers = numbers[numbers .> numbers[end]]\n    closest_numbers\
    \ = closest_numbers[closest_numbers .> numbers[end]]\n    closest_numbers = closest_numbers[closest_numbers\
    \ .< numbers[end]]\n    \n    closest_numbers = numbers[numbers .< numbers[end]]\n\
    \    closest_numbers = closest_numbers[closest_numbers .> numbers[end]]\n    closest_numbers\
    \ = closest_numbers[closest_numbers .< numbers[end]]\n    \n    closest_numbers\
    \ = numbers[numbers .> numbers[end]]\n    closest_numbers = closest_numbers[closest_numbers\
    \ .> numbers[end]]\n    closest_numbers = closest_numbers[closest_numbers .< numbers[end]]\n\
    \    \n    closest_numbers = numbers[numbers .< numbers[end]]\n    closest_numbers\
    \ = closest_numbers[closest_numbers .> numbers[end]]\n    closest_numbers = closest_numbers[closest_numbers\
    \ .< numbers[end]]\n    \n    closest_numbers = numbers[numbers .> numbers[end]]\n\
    \    closest_numbers = closest_numbers[closest_numbers .> numbers[end]]\n    closest_numbers\
    \ = closest_numbers[closest_numbers .< numbers[end]]\n    \n    closest_numbers\
    \ = numbers[numbers .< numbers[end]]\n    closest_numbers = closest_numbers[closest_numbers\
    \ .> numbers[end]]\n\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfntumevv.jl:4\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfntumevv.jl:1\n\
    in expression starting at /tmp/tmpfntumevv.jl:1\n"
  stdout: ''
  timestamp: 1659748868
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1, 2, 3,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1, 2, 3, 5])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1, 2, 3, 5])\n</cell>\n\
    <code language=julia-1.5>\nfind_closest_elements([1, 2, 3, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_closest_elements([1, 2, 3, 5])\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1, 2, 3, 5])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,\
    \ 2, 3, 5])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1, 2,\
    \ 3, 5])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1, 2, 3,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1, 2, 3, 5])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1, 2, 3, 5])\n</cell>\n\
    <code language=julia-1.5>\nfind_closest_elements([1, 2, 3, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_closest_elements([1, 2, 3, 5])\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1, 2, 3, 5])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,\
    \ 2, 3, 5])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1, 2,\
    \ 3, 5])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1, 2, 3,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1, 2, 3, 5])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1, 2, 3, 5])\n</cell>\n\
    <code language=julia-1.5>\nfind_closest_elements([1, 2, 3, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_closest_elements([1, 2, 3, 5])\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1, 2, 3, 5])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,\
    \ 2, 3, 5])\n</cell>\n<code language=julia-1.5>\nfind_closest_\nusing Test\n\n\
    @testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7df9w2od.jl:19\nin expression starting at\
    \ /tmp/tmp7df9w2od.jl:19\n"
  stdout: ''
  timestamp: 1659748868
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdbculwzk.jl:4\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdbculwzk.jl:1\n\
    in expression starting at /tmp/tmpdbculwzk.jl:1\n"
  stdout: ''
  timestamp: 1659748858
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[2]\n\
    \    \n    for number in numbers[3:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers in the list. \nHint: Use map()\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7mf9itrx.jl:19\nin expression starting at\
    \ /tmp/tmp7mf9itrx.jl:19\n"
  stdout: ''
  timestamp: 1659748868
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.1,\
    \ 2.2, 3.3, 4.4, 5.5])\n</cell>\n<text>\nExercise 3\nWrite a function that will\
    \ find the closest element in a vector to a supplied number. \n    \n    For example,\
    \ if the vector is [2.1, 3.2, 4.3, 5.4, 6.5] and the supplied number is 2.5, \n\
    \    then the function should return 4.3\n    \n    Your function should take\
    \ one argument, an array of numbers. \n    \n    Your function should return a\
    \ Float64\n    \n    Your function should return nothing but should print a message\
    \ to the screen to let you know if it worked correctly\n    \n    Your function\
    \ should use find_closest_elements to find the closest element in the vector to\
    \ the supplied number\n    \n    Your function should return nothing but should\
    \ print a message to the screen to let you know if it worked correctly\n    \n\
    \    Your function should return nothing but should print a message to the screen\
    \ to let you know if it worked correctly\n    \n    Your function should return\
    \ nothing but should print a message to the screen to let you know if it worked\
    \ correctly\n    \n    Your function should return nothing but should print a\
    \ message to the screen to let you know if it worked correctly\n    \n    Your\
    \ function should return nothing but should print a message to the screen to let\
    \ you know if it worked correctly\n    \n    Your function should return nothing\
    \ but should print a message to the screen to let you know if it worked correctly\n\
    \    \n    Your function should return nothing but should print a message to the\
    \ screen to let you know if it worked correctly\n    \n    Your function should\
    \ return nothing but should print a message to the screen to let you know if it\
    \ worked correctly\n    \n    Your function should return nothing but should print\
    \ a message to the screen to let you know if it worked correctly\n    \n    Your\
    \ function should return nothing but should print a message to the screen to let\
    \ you know if it worked correctly\n    \n    Your function should return nothing\
    \ but should print a message to the screen to let you know if it worked correctly\n\
    \    \n    Your function should return nothing but should print a message to the\
    \ screen to let you know if it worked correctly\n    \n    Your function should\
    \ return nothing but should print a message to the screen to let you \nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpai2flhdl.jl:19\nin expression starting at\
    \ /tmp/tmpai2flhdl.jl:19\n"
  stdout: ''
  timestamp: 1659748868
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[2]\n\
    \    \n    for number in numbers[3:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers in that list.\nHint: You can\
    \ use the sum function.\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp961gy8p2.jl:19\nin expression starting at\
    \ /tmp/tmp961gy8p2.jl:19\n"
  stdout: ''
  timestamp: 1659748868
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.2,\
    \ 2.3, 3.4, 4.5])\n</cell>\n<text>\nExercise 2\nWrite a function that takes in\
    \ a list of numbers and returns the number of elements that are greater than the\
    \ average of the list.\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgo82w6cu.jl:19\nin expression starting at\
    \ /tmp/tmpgo82w6cu.jl:19\n"
  stdout: ''
  timestamp: 1659748868
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    smallest_index = find(numbers .< smallest_number)\n    largest_index\
    \ = find(numbers .> largest_number)\n    \n    smallest_number = numbers[smallest_index]\n\
    \    largest_number = numbers[largest_index]\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.1,\
    \ 2.1, 3.1, 4.1])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ vector of numbers and returns the sum of the squares of the numbers in the vector.\
    \ \n    \n    For example, if the vector is [1,2,3] the function should return\
    \ 9\n    \n    Your function should work for vectors of any length.\n    \n  \
    \  Your function should work for vectors of any type. \n    \n    Your function\
    \ should work for vectors of any length.\n    \n    Your function should work\
    \ for vectors of any type.\n    \n    Your function should work for vectors of\
    \ any length.\n    \n    Your function should work for vectors of any type.\n\
    \    \n    Your function should work for vectors of any length.\n    \n    Your\
    \ function should work for vectors of any type.\n    \n    Your function should\
    \ work for vectors of any length.\n    \n    Your function should work for vectors\
    \ of any type.\n    \n    Your function should work for vectors of any length.\n\
    \    \n    Your function should work for vectors of any type.\n    \n    Your\
    \ function should work for vectors of any length.\n    \n    Your function should\
    \ work for vectors of any type.\n    \n    Your function should work for vectors\
    \ of any length.\n    \n    Your function should work for vectors of any type.\n\
    \    \n    Your function should work for vectors of any length.\n    \n    Your\
    \ function should work for vectors of any type.\n    \n    Your function should\
    \ work for vectors of any length.\n    \n    Your function should work for vectors\
    \ of any type.\n    \n    Your function should work for vectors of any length.\n\
    \    \n    Your function should work for vectors of any type.\n    \n    Your\
    \ function should work for vectors of any length.\n    \n    Your function should\
    \ work for vectors of any type.\n    \n    Your function should work for vectors\
    \ of any length.\n    \n    Your function should work for vectors of any type.\n\
    \    \n    Your function should work for vectors of any length.\n    \n    Your\
    \ function should work for vectors of any type.\n    \n    Your function should\
    \ work for vectors of any length.\n    \n    Your function should work for vectors\
    \ of any type.\n    \n    Your function should work for vector\nusing Test\n\n\
    @testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03cfqsph.jl:17\nin expression starting at\
    \ /tmp/tmp03cfqsph.jl:17\n"
  stdout: ''
  timestamp: 1659748868
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[2]\n\
    \    \n    for i in 1:length(numbers)\n        if numbers[i] < smallest_number\n\
    \            smallest_number = numbers[i]\n        end\n        if numbers[i]\
    \ > largest_number\n            largest_number = numbers[i]\n        end\n   \
    \ end\n    \n    return (smallest_number, largest_number)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd5uj1l6_.jl:20\nin expression starting at\
    \ /tmp/tmpd5uj1l6_.jl:20\n"
  stdout: ''
  timestamp: 1659748868
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = numbers[1]\n    closest_numbers_2 = numbers[2]\n\
    \    \n    for number in numbers[3:end]\n        if number < closest_numbers_2\n\
    \            closest_numbers_2 = number\n        elseif number > closest_numbers_2\n\
    \            closest_numbers = number\n        end\n    end\n    \n    return\
    \ closest_numbers, closest_numbers_2\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5j7nqntd.jl:19\nin expression starting at\
    \ /tmp/tmp5j7nqntd.jl:19\n"
  stdout: ''
  timestamp: 1659748868
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[2]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes two numbers as inputs\
    \ and returns the sum of the squares of the two numbers. \nThe function should\
    \ only take two numbers as inputs and return one number.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfydut2_5.jl:19\nin expression starting at\
    \ /tmp/tmpfydut2_5.jl:19\n"
  stdout: ''
  timestamp: 1659748868
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for i in 2:length(numbers)\n        if numbers[i] < smallest_number\n\
    \            smallest_number = numbers[i]\n        elseif numbers[i] > largest_number\n\
    \            largest_number = numbers[i]\n        end\n    end\n    \n    return\
    \ (smallest_number, largest_number)\nend\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1,5,6,8,9,10])\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that takes in a list of numbers and returns the average of all the numbers in\
    \ the list. \nHint: use the function you wrote in the last exercise.\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg5wepb5b.jl:19\nin expression starting at\
    \ /tmp/tmpg5wepb5b.jl:19\n"
  stdout: ''
  timestamp: 1659748868
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_elements = numbers[1]\n    closest_elements_2 =\
    \ numbers[2]\n    \n    for element in numbers[2:end]\n        if element < closest_elements\n\
    \            closest_elements = element\n        elseif element > closest_elements_2\n\
    \            closest_elements_2 = element\n        end\n    end\n    \n    return\
    \ closest_elements, closest_elements_2\nend\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1.1, 2.2, 3.3, 4.4, 5.5])\n</cell>\n<text>\nExercise: Write\
    \ a function that takes in a list of numbers and returns the mean of the numbers\
    \ in that list. \nHint: Use a for loop to iterate through the list and calculate\
    \ the mean of the numbers in the list.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbuyl2rd5.jl:19\nin expression starting at\
    \ /tmp/tmpbuyl2rd5.jl:19\n"
  stdout: ''
  timestamp: 1659748868
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6])\n\
    </cell>\n<text>\nExercise\nWrite a function that takes a list of numbers and returns\
    \ the average of the numbers in the list. \nWrite a function that takes a list\
    \ of numbers and returns the average of the numbers in the list but ignores any\
    \ numbers that are less than zero.\nWrite a function that takes a list of numbers\
    \ and returns the average of the numbers in the list but ignores any numbers that\
    \ are greater than 100.\nWrite a function that takes a list of numbers and returns\
    \ the average of the numbers in the list but ignores any numbers that are less\
    \ than zero or greater than 100.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprvwkqrm4.jl:19\nin expression starting at\
    \ /tmp/tmprvwkqrm4.jl:19\n"
  stdout: ''
  timestamp: 1659748868
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.1,\
    \ 2.2, 3.3, 4.4, 5.5])\n</cell>\n<text>\nExercise\nWrite a function that takes\
    \ a list of numbers and returns the elements that are closest to each other (smaller\
    \ number, larger number).\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpukuynvhf.jl:19\nin expression starting at\
    \ /tmp/tmpukuynvhf.jl:19\n"
  stdout: ''
  timestamp: 1659748868
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = numbers[1]\n    \n    for number in numbers[2:end]\n\
    \        \n        if number < closest_numbers\n            closest_numbers =\
    \ number\n        else\n            break\n        end\n    end\n    \n    return\
    \ closest_numbers, closest_numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1.1, 2.1, 3.1, 4.1, 5.1])\n</cell>\n<text>\nExercise 4\n\
    Write a function that takes a vector of numbers and returns the sum of the squares\
    \ of the numbers in that vector.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5nefqfj2.jl:19\nin expression starting at\
    \ /tmp/tmp5nefqfj2.jl:19\n"
  stdout: ''
  timestamp: 1659748868
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[2]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.2,\
    \ 2.3, 3.4, 4.5])\n</cell>\n<text>\nExercise\nWrite a function that takes a list\
    \ of numbers and returns the mean of the numbers in that list. Test it on a list\
    \ of numbers that you generated in the previous exercise.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp65ak3iyv.jl:19\nin expression starting at\
    \ /tmp/tmp65ak3iyv.jl:19\n"
  stdout: ''
  timestamp: 1659748868
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = Vector{Float64}(undef, 0)\n    closest_numbers_distance\
    \ = Float64(0)\n    \n    for number in numbers\n        \n        distance =\
    \ abs(number - numbers[1])\n        \n        if closest_numbers_distance > distance\n\
    \            closest_numbers_distance = distance\n            closest_numbers\
    \ = [numbers[1], number]\n        elseif closest_numbers_distance == distance\n\
    \            closest_numbers = [number, numbers[1]]\n        end\n    end\n  \
    \  \n    return closest_numbers\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpj0iln36f.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpj0iln36f.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n  MethodError:\
    \ Cannot `convert` an object of type Vector{Float64} to an object of type Tuple{Float64,\
    \ Float64}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:336\n\
    \    convert(::Type{T}, !Matched::Tuple{Vararg{Any, N}}) where {N, T<:Tuple} at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:337\n    convert(::Type{T},\
    \ !Matched::CartesianIndex) where T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/multidimensional.jl:137\n\
    \    ...\n  Stacktrace:\n   [1] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpj0iln36f.jl:21\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpj0iln36f.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpj0iln36f.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpj0iln36f.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n  MethodError: Cannot `convert`\
    \ an object of type Vector{Float64} to an object of type Tuple{Float64, Float64}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Tuple\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:336\n    convert(::Type{T},\
    \ !Matched::Tuple{Vararg{Any, N}}) where {N, T<:Tuple} at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:337\n\
    \    convert(::Type{T}, !Matched::CartesianIndex) where T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/multidimensional.jl:137\n\
    \    ...\n  Stacktrace:\n   [1] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpj0iln36f.jl:21\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro ex"
  timestamp: 1659748871
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_elements = Vector{Float64}(undef, 0)\n    \n  \
    \  closest_elements[1] = numbers[1]\n    closest_elements[2] = numbers[2]\n  \
    \  \n    for i = 2:length(numbers)\n        \n        if numbers[i] > closest_elements[1]\n\
    \            closest_elements[1] = numbers[i]\n        end\n        \n       \
    \ if numbers[i] < closest_elements[2]\n            closest_elements[2] = numbers[i]\n\
    \        end\n    end\n    \n    return closest_elements\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvurh7maa.jl:24\nin expression starting at\
    \ /tmp/tmpvurh7maa.jl:24\n"
  stdout: ''
  timestamp: 1659748869
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyp99mtfw.jl:19\nin expression starting at\
    \ /tmp/tmpyp99mtfw.jl:19\n"
  stdout: ''
  timestamp: 1659748858
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest = numbers[1]\n    largest = numbers[1]\n    \n\
    \    for n in numbers[2:end]\n        if n < smallest\n            smallest =\
    \ n\n        elseif n > largest\n            largest = n\n        end\n    end\n\
    \    \n    return (smallest, largest)\nend\n</cell>\n<code language=julia-1.4>\n\
    find_closest_elements([1,2,3,4,5])\n</cell>\n<text>\nExercise\nWrite a function\
    \ that takes in a list of numbers and returns the sum of the squares of the numbers\
    \ in the list.\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplebopis9.jl:19\nin expression starting at\
    \ /tmp/tmplebopis9.jl:19\n"
  stdout: ''
  timestamp: 1659748869
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdbculwzk.jl:4\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdbculwzk.jl:1\n\
    in expression starting at /tmp/tmpdbculwzk.jl:1\n"
  stdout: ''
  timestamp: 1659748858
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzfdgb6jq.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpzfdgb6jq.jl:24\n  Expression: candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n   Evaluated: (1.0, 5.0) == (3.9, 4.0)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzfdgb6jq.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzfdgb6jq.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpzfdgb6jq.jl:25\n  Expression: candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0]) == (5.0, 5.9)\n   Evaluated: (1.0, 5.9) == (5.0, 5.9)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzfdgb6jq.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzfdgb6jq.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpzfdgb6jq.jl:26\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (1.0, 5.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzfdgb6jq.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzfdgb6jq.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpzfdgb6jq.jl:27\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (1.0, 5.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzfdgb6jq.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzfdgb6jq.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpzfdgb6jq.jl:28\n  Expression: candida"
  timestamp: 1659748870
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    smallest_index = find(numbers .< smallest_number)\n    largest_index\
    \ = find(numbers .> largest_number)\n    \n    smallest_number = numbers[smallest_index]\n\
    \    largest_number = numbers[largest_index]\n    \n    return (smallest_number,\
    \ largest_number)\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpjmczg4ee.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpjmczg4ee.jl:22\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n  UndefVarError:\
    \ find not defined\n  Stacktrace:\n   [1] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpjmczg4ee.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjmczg4ee.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjmczg4ee.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpjmczg4ee.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n  UndefVarError: find not\
    \ defined\n  Stacktrace:\n   [1] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpjmczg4ee.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjmczg4ee.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjmczg4ee.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpjmczg4ee.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n  UndefVarError: find\
    \ not defined\n  Stacktrace:\n   [1] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpjmczg4ee.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjmczg4ee.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjmczg4ee.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpjmczg4ee.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n  UndefVarError: find\
    \ not"
  timestamp: 1659748871
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdbculwzk.jl:4\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdbculwzk.jl:1\n\
    in expression starting at /tmp/tmpdbculwzk.jl:1\n"
  stdout: ''
  timestamp: 1659748858
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6])\n\
    </cell>\n<text>\nExercise\nWrite a function that takes a vector of numbers and\
    \ returns the sum of the squares of the numbers in that vector. Test it on some\
    \ vectors.\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiic3tfw0.jl:19\nin expression starting at\
    \ /tmp/tmpiic3tfw0.jl:19\n"
  stdout: ''
  timestamp: 1659748870
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = numbers[numbers .< numbers[1]]\n    \n\
    \    closest_numbers[1] = numbers[1]\n    \n    closest_numbers[2] = numbers[2]\n\
    \    \n    return closest_numbers\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg5u5t3vc.jl:14\nin expression starting at\
    \ /tmp/tmpg5u5t3vc.jl:14\n"
  stdout: ''
  timestamp: 1659748866
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdbculwzk.jl:4\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdbculwzk.jl:1\n\
    in expression starting at /tmp/tmpdbculwzk.jl:1\n"
  stdout: ''
  timestamp: 1659748858
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_elements = Vector{Float64}(undef, 2)\n    \n  \
    \  closest_elements[1] = numbers[1]\n    closest_elements[2] = numbers[2]\n  \
    \  \n    for n in numbers[3:end]\n        \n        if abs(closest_elements[1]\
    \ - n) < abs(closest_elements[2] - n)\n            closest_elements[1] = n\n \
    \       else\n            closest_elements[2] = n\n        end\n        \n   \
    \ end\n    \n    return closest_elements\nend\nusing Test\n\n@testset begin\n\n\
    candidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmptk5ivmex.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmptk5ivmex.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n  MethodError:\
    \ Cannot `convert` an object of type Vector{Float64} to an object of type Tuple{Float64,\
    \ Float64}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:336\n\
    \    convert(::Type{T}, !Matched::Tuple{Vararg{Any, N}}) where {N, T<:Tuple} at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:337\n    convert(::Type{T},\
    \ !Matched::CartesianIndex) where T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/multidimensional.jl:137\n\
    \    ...\n  Stacktrace:\n   [1] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmptk5ivmex.jl:21\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptk5ivmex.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptk5ivmex.jl:27\ntest set:\
    \ Error During Test at /tmp/tmptk5ivmex.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n  MethodError: Cannot `convert`\
    \ an object of type Vector{Float64} to an object of type Tuple{Float64, Float64}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Tuple\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:336\n    convert(::Type{T},\
    \ !Matched::Tuple{Vararg{Any, N}}) where {N, T<:Tuple} at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:337\n\
    \    convert(::Type{T}, !Matched::CartesianIndex) where T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/multidimensional.jl:137\n\
    \    ...\n  Stacktrace:\n   [1] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmptk5ivmex.jl:21\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro ex"
  timestamp: 1659748872
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a list of numbers and\
    \ returns the sum of the squares of the numbers in the list.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyya8exc9.jl:19\nin expression starting at\
    \ /tmp/tmpyya8exc9.jl:19\n"
  stdout: ''
  timestamp: 1659748870
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,\
    \ 2, 3, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that takes two numbers\
    \ as inputs and returns the sum of the squares of the two numbers. Test it on\
    \ $x^2 + y^2 = z^2$ for $x=1, y=2, z=3$.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp4c2wegb.jl:19\nin expression starting at\
    \ /tmp/tmpp4c2wegb.jl:19\n"
  stdout: ''
  timestamp: 1659748870
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[2]\n\
    \    \n    smallest_index = 2\n    largest_index = 1\n    \n    while smallest_index\
    \ < length(numbers)\n        if numbers[smallest_index] < smallest_number\n  \
    \          smallest_number = numbers[smallest_index]\n            smallest_index\
    \ = smallest_index + 1\n        elseif numbers[largest_index] > largest_number\n\
    \            largest_number = numbers[largest_index]\n            largest_index\
    \ = largest_index + 1\n        else\n            break\n        end\n    end\n\
    \    \n    return (smallest_number, largest_number)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7zzh_n3p.jl:26\nin expression starting at\
    \ /tmp/tmp7zzh_n3p.jl:26\n"
  stdout: ''
  timestamp: 1659748870
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = Vector{Float64}(undef, 2)\n    closest_numbers[1]\
    \ = numbers[1]\n    closest_numbers[2] = numbers[2]\n    \n    for n in numbers[2:end]\n\
    \        if abs(n - closest_numbers[1]) < abs(n - closest_numbers[2])\n      \
    \      closest_numbers[1] = n\n        else\n            closest_numbers[2] =\
    \ n\n        end\n    end\n    \n    return closest_numbers\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmptmozucn2.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmptmozucn2.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n  MethodError:\
    \ Cannot `convert` an object of type Vector{Float64} to an object of type Tuple{Float64,\
    \ Float64}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:336\n\
    \    convert(::Type{T}, !Matched::Tuple{Vararg{Any, N}}) where {N, T<:Tuple} at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:337\n    convert(::Type{T},\
    \ !Matched::CartesianIndex) where T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/multidimensional.jl:137\n\
    \    ...\n  Stacktrace:\n   [1] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmptmozucn2.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptmozucn2.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptmozucn2.jl:24\ntest set:\
    \ Error During Test at /tmp/tmptmozucn2.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n  MethodError: Cannot `convert`\
    \ an object of type Vector{Float64} to an object of type Tuple{Float64, Float64}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Tuple\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:336\n    convert(::Type{T},\
    \ !Matched::Tuple{Vararg{Any, N}}) where {N, T<:Tuple} at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:337\n\
    \    convert(::Type{T}, !Matched::CartesianIndex) where T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/multidimensional.jl:137\n\
    \    ...\n  Stacktrace:\n   [1] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmptmozucn2.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro ex"
  timestamp: 1659748872
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    smallest_index = 1\n    largest_index = end\n    \n    while smallest_index\
    \ < largest_index\n        \n        smaller_number = numbers[smallest_index]\n\
    \        larger_number = numbers[largest_index]\n        \n        if smaller_number\
    \ < larger_number\n            smallest_index += 1\n        elseif smaller_number\
    \ > larger_number\n            largest_index -= 1\n        else\n            smallest_index\
    \ += 1\n            largest_index += 1\n        end\n    end\n    \n    return\
    \ (smallest_number, largest_number)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdq0gxrp5.jl:10\nin expression starting at /tmp/tmpdq0gxrp5.jl:10\n"
  stdout: ''
  timestamp: 1659748870
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    smallest_index = 1\n    largest_index = end\n    \n    while smallest_index\
    \ <= largest_index\n        \n        smallest_number = numbers[smallest_index]\n\
    \        largest_number = numbers[largest_index]\n        \n        if smallest_number\
    \ < largest_number\n            \n            smallest_index += 1\n          \
    \  \n        elseif smallest_number > largest_number\n            \n         \
    \   largest_index -= 1\n            \n        else\n            \n           \
    \ return smallest_number, largest_number\n            \n        end\n        \n\
    \    end\n    \n    return smallest_number, largest_number\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1uaz_k9_.jl:10\nin expression starting at /tmp/tmp1uaz_k9_.jl:10\n"
  stdout: ''
  timestamp: 1659748870
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10,11])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12,13])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfygvqvow.jl:19\nin expression starting at\
    \ /tmp/tmpfygvqvow.jl:19\n"
  stdout: ''
  timestamp: 1659748870
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyp99mtfw.jl:19\nin expression starting at\
    \ /tmp/tmpyp99mtfw.jl:19\n"
  stdout: ''
  timestamp: 1659748858
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\n@time find_closest_elements(numbers)\n\
    </cell>\n<text>\nExercise: Write a function that takes in a list of numbers and\
    \ returns the sum of the squares of the numbers in the list. Test it on a small\
    \ list of numbers and compare it to the built in sum function.\nusing Test\n\n\
    @testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyndz73i4.jl:19\nin expression starting at\
    \ /tmp/tmpyndz73i4.jl:19\n"
  stdout: ''
  timestamp: 1659748870
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = numbers[numbers .< numbers[end]]\n  \
    \  \n    closest_numbers = sort(closest_numbers)\n    \n    return closest_numbers[1],\
    \ closest_numbers[2]\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9zfiemii.jl:12\nin expression starting at\
    \ /tmp/tmp9zfiemii.jl:12\n"
  stdout: ''
  timestamp: 1659748870
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_number = numbers[1]\n    closest_distance = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        distance = abs(number - closest_number)\n\
    \        if distance < closest_distance\n            closest_number = number\n\
    \            closest_distance = distance\n        end\n    end\n    \n    return\
    \ (closest_number, closest_distance)\nend\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements(numbers)\n</cell>\n<text>\nExercise: Write a function that\
    \ takes in a list of numbers and returns the list with the numbers that have the\
    \ smallest absolute difference between them. For example, if the input was [4,\
    \ 2, 6, 1, 3], the output would be [4, 2, 3]. Hint: Use find_closest_elements\
    \ to find the two numbers that are closest to each other.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjdaqsgfe.jl:19\nin expression starting at\
    \ /tmp/tmpjdaqsgfe.jl:19\n"
  stdout: ''
  timestamp: 1659748870
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[2]\n\
    \    \n    for number in numbers[3:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.1,\
    \ 2.2, 3.3, 4.4, 5.5])\n</cell>\n<text>\nExercise\nWrite a function that takes\
    \ a list of numbers and returns the list with the smallest and largest number\
    \ in it (without modifying the original list).\nusing Test\n\n@testset begin\n\
    \ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplwnjeky3.jl:19\nin expression starting at\
    \ /tmp/tmplwnjeky3.jl:19\n"
  stdout: ''
  timestamp: 1659748870
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest = numbers[1]\n    largest = numbers[1]\n    \n\
    \    for n in numbers[2:end]\n        if n < smallest\n            smallest =\
    \ n\n        elseif n > largest\n            largest = n\n        end\n    end\n\
    \    \n    return (smallest, largest)\nend\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1,4,5,7,9])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes in a list of numbers and returns the number of elements that are\
    \ greater than the average of the list.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxk4o2aiw.jl:19\nin expression starting at\
    \ /tmp/tmpxk4o2aiw.jl:19\n"
  stdout: ''
  timestamp: 1659748870
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = Vector{Float64}(undef, 0)\n    closest_numbers_distance\
    \ = Float64(0)\n    \n    for number in numbers\n        \n        distance =\
    \ abs(number - numbers[1])\n        \n        if closest_numbers_distance == 0\
    \ || distance < closest_numbers_distance\n            closest_numbers_distance\
    \ = distance\n            closest_numbers = [number]\n        else\n         \
    \   closest_numbers_distance = closest_numbers_distance\n            closest_numbers\
    \ = [number, closest_numbers[1]]\n        end\n    end\n    \n    return closest_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5aae5q4u.jl:24\nin expression starting at\
    \ /tmp/tmp5aae5q4u.jl:24\n"
  stdout: ''
  timestamp: 1659748870
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = numbers[numbers .< numbers[1]]\n    \n\
    \    if length(closest_numbers) < 2\n        return numbers[1], numbers[1]\n \
    \   end\n    \n    closest_numbers = numbers[numbers .> numbers[1]]\n    \n  \
    \  if length(closest_numbers) < 2\n        return numbers[1], numbers[1]\n   \
    \ end\n    \n    return closest_numbers[1], closest_numbers[2]\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5tj45pbc.jl:20\nin expression starting at\
    \ /tmp/tmp5tj45pbc.jl:20\n"
  stdout: ''
  timestamp: 1659748870
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = Vector{Float64}(undef, 0)\n    closest_numbers_distance\
    \ = Float64(0)\n    \n    for number in numbers\n        \n        distance =\
    \ abs(number - numbers[1])\n        \n        if closest_numbers_distance > distance\n\
    \            closest_numbers_distance = distance\n            closest_numbers\
    \ = [numbers[1], number]\n        elseif closest_numbers_distance == distance\n\
    \            closest_numbers = [number, numbers[1]]\n        end\n    end\n  \
    \  \n    return closest_numbers\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4xe677li.jl:23\nin expression starting at\
    \ /tmp/tmp4xe677li.jl:23\n"
  stdout: ''
  timestamp: 1659748870
