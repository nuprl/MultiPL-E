name: HumanEval_12_longest
language: jl
prompt: "\"\"\" Out of list of strings, return the longest one. Return the first one\
  \ in case of multiple\n    strings of the same length. Return None in case the input\
  \ list is empty.\n                \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
  \ Nothing} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
  \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
  x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
completions: ["    if length(strings) == 0 \n        return None \n    else \n   \
    \     return max(strings, key=length) \nend ", "    if length(strings) == 0 \n\
    \        return None \n    else \n        longest = length(strings)\n        for\
    \ s in strings \n            if length(s) > longest \n                longest\
    \ = length(s) \n            end \n        end \n        return strings[longest]\
    \ \n    end \nend ", "    if length(strings) == 0 return None \n    else return\
    \ max(strings, key = length) \nend", "    if length(strings) == 0 \n        return\
    \ None \n    else \n        return max(strings, key=length) \nend\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"Hello\", \"World\", \"Hello\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"Hello\", \"World\", \"Hello\", \"World\"])\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"Hello\", \"World\", \"Hello\",\
    \ \"World\", \"Hello\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"Hello\"\
    , \"World\", \"Hello\", \"World\", \"Hello\", \"World\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"Hello\",\
    \ \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\"\
    , \"Hello\", \"World\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"Hello\"\
    , \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\"\
    , \"Hello\", \"World\", \"Hello\", \"World\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"Hello\", \"World\",\
    \ \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"\
    , \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\"\
    , \"Hello\", \"World\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"Hello\"\
    , \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\"\
    , \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"\
    , \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\"\
    , \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"\
    , \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\"\
    , \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"\
    , \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\"\
    , \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"\
    , \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\"\
    , \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"\
    , \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\"\
    , \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"\
    , \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\"\
    , \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"\
    , \"World\", \"Hello\", \"", "    if length(strings) == 0 \n        return None\
    \ \n    else \n        return max(strings, key=length) \nend\n</cell>\n<code language=julia-1.3>\n\
    longest([\"a\", \"b\", \"c\", \"d\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\"])\n</cell>\n<code language=julia-1.3>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"])\n</cell>\n<code language=julia-1.3>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n<code\
    \ language=julia-1.3>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"])\n</cell>\n<code language=julia-1.3>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"])\n</cell>\n<code\
    \ language=julia-1.3>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"])\n</cell>\n<code language=julia-1.3>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\"])\n</cell>\n<code language=julia-1.3>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"])\n</cell>\n<code language=julia-1.3>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"", " \
    \   if length(strings) == 0 \n        return None \n    else \n        return\
    \ max(strings, key=length) \nend\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\"\
    , \"b\", \"c\", \"d\", \"e\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"", " \
    \   if length(strings) == 0\n        return nothing\n    elseif length(strings)\
    \ == 1\n        return strings[1]\n    else\n        longest = strings[1]\n  \
    \      for s in strings[2:end]\n            if length(longest) < length(s)\n \
    \               longest = s\n            end\n        end\n        return longest\n\
    \    end\nend", "    if length(strings) == 0\n        return nothing\n    end\n\
    \    longest_len = length(strings[1])\n    for i in 2:length(strings)\n      \
    \  if length(strings[i]) > longest_len\n            longest_len = length(strings[i])\n\
    \        end\n    end\n    if longest_len == length(strings[1])\n        return\
    \ strings[1]\n    else\n        return nothing\n    end\nend", "    if length(strings)\
    \ == 0 \n        return None \n    else \n        longest = strings[1] \n    \
    \    for s in strings[2:end] \n            if length(s) > length(longest) \n \
    \               longest = s \n            end \n        end \n        return longest\
    \ \n    end \nend \n</cell>\n<code language=julia-1.3>\nlongest([\"Hello\", \"\
    World\", \"Hello\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"Hello\",\
    \ \"World\", \"Hello\", \"World\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\"])\n</cell>\n<code language=julia-1.3>\n\
    longest([\"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\"])\n\
    </cell>\n<code language=julia-1.3>\nlongest([\"Hello\", \"World\", \"Hello\",\
    \ \"World\", \"Hello\", \"World\", \"Hello\"])\n</cell>\n<code language=julia-1.3>\n\
    longest([\"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"Hello\",\
    \ \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\"\
    , \"Hello\", \"World\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"Hello\"\
    , \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\"\
    , \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"\
    , \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\"\
    , \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"\
    , \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\"\
    , \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"\
    , \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\"\
    , \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"\
    , \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\"\
    , \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"\
    , \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\"\
    , \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"\
    , \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\"\
    , \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"\
    , \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\"\
    , \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"\
    , \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\"\
    , \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"\
    , \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\"\
    , \"", "    longest = None \n    for s in strings \n        if longest == None\
    \ or length(longest) > length(s) \n            longest = s \n        end\n   \
    \ end\n    return longest\nend", "    if length(strings) == 0\n        return\
    \ nothing\n    end\n    longest_str = strings[length(strings)-1]\n    for str\
    \ in strings\n        if str == longest_str\n            return str\n        end\n\
    \    end\n    return longest_str\nend\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\"\
    , \"b\", \"c\", \"d\", \"e\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"])", "    if length(strings)\
    \ == 0\n        return nothing\n    end\n    longest_len = length(strings[1])\n\
    \    for s in strings\n        if length(s) > longest_len\n            longest_len\
    \ = length(s)\n        end\n    end\n    return strings[longest_len]\nend", " \
    \   if length(strings) == 0\n        return nothing\n    elseif length(strings)\
    \ == 1\n        return strings[1]\n    else\n        max_length = length(strings)\n\
    \        longest_string = strings[1]\n        for s in strings[2:end]\n      \
    \      if length(s) < max_length\n                max_length = length(s)\n   \
    \             longest_string = s\n            end\n        end\n        return\
    \ longest_string\n    end\nend\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\"\
    , \"b\", \"c\", \"d\", \"e\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"", "    if length(strings)==0 return\
    \ None \n    else return max(strings, key=length) \nend", "    longest = Nothing\n\
    \    for s in strings\n        if length(s) > length(longest)\n            longest\
    \ = s\n        end\n    end\n    return longest\nend", "    longest = None \n\
    \    for s in strings \n        if longest == None \n            longest = s \n\
    \        else \n            if length(longest) > length(s) \n                longest\
    \ = s \n            end \n        end \n    end \n    return longest \nend ",
  "    if length(strings) == 0\n        return nothing\n    else \n        return\
    \ max(strings, key=length)\n    end\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia\
    \ |>\nI came up with this:\n<code>", "    if length(strings) == 0 \n        return\
    \ None \n    else \n        return max(strings, key=length) \nend\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"", " \
    \   if length(strings) == 0\n        error(\"Input list is empty.\")\n    end\n\
    \    max_length = length(strings)\n    longest_string = strings[max_length]\n\
    \    for s in strings[2:end]\n        if length(s) == max_length\n           \
    \ longest_string = s\n        else\n            break\n        end\n    end\n\
    \    return longest_string\nend", "    if length(strings) == 0 \n        return\
    \ None \n    else \n        return max(strings, key=length) \nend \n</cell>\n\
    <code language=julia-1.5>\nlongest([\"hello\", \"world\", \"hi\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"hello\", \"world\", \"hi\", \"hello\"])\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"hello\", \"world\", \"hi\", \"\
    hello\", \"world\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"hello\",\
    \ \"world\", \"hi\", \"hello\", \"world\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"hello\", \"world\", \"hi\", \"hello\", \"world\", \"hi\", \"hello\"\
    , \"world\", \"hi\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"hello\"\
    , \"world\", \"hi\", \"hello\", \"world\", \"hi\", \"hello\", \"world\", \"hi\"\
    , \"hello\", \"world\", \"hi\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    hello\", \"world\", \"hi\", \"hello\", \"world\", \"hi\", \"hello\", \"world\"\
    , \"hi\", \"hello\", \"world\", \"hi\", \"hello\", \"world\", \"hi\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"hello\", \"world\", \"hi\", \"hello\", \"\
    world\", \"hi\", \"hello\", \"world\", \"hi\", \"hello\", \"world\", \"hi\", \"\
    hello\", \"world\", \"hi\", \"hello\", \"world\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"hello\", \"world\", \"hi\", \"hello\", \"world\", \"hi\", \"hello\"\
    , \"world\", \"hi\", \"hello\", \"world\", \"hi\", \"hello\", \"world\", \"hi\"\
    , \"hello\", \"world\", \"hi\", \"hello\", \"world\", \"hi\", \"hello\", \"world\"\
    , \"hi\", \"hello\", \"world\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"hello\", \"world\", \"hi\", \"hello\", \"world\", \"hi\", \"hello\"\
    , \"world\", \"hi\", \"hello\", \"world\", \"hi\", \"hello\", \"world\", \"hi\"\
    , \"hello\", \"world\", \"hi\", \"hello\", \"world\", \"hi\", \"hello\", \"world\"\
    , \"hi\", \"hello\", \"world\", \"hi\", \"hello\", \"world\", \"hi\", \"hello\"\
    , \"world\", \"hi\", \"hello\", \"world\", \"hi\", \"hello\", \"world\", \"hi\"\
    , \"hello\", \"world\", \"hi\", \"hello\", \"world\", \"hi\", \"hello\", \"world\"\
    , \"hi\", \"hello\", \"world\", \"hi\", \"hello\", \"world\", \"hi\", \"hello\"\
    , \"world\", \"hi\", \"hello\", \"world\", \"hi\", \"hello\", \"world\", \"hi\"\
    , \"hello\", \"world\", \"hi\", \"hello\", \"world\", \"hi\", \"hello\", \"world\"\
    , \"hi\", \"hello\", \"world\", \"hi\", \"hello\", \"world\", \"hi\", \"hello\"\
    , \"world\", \"hi\", \"hello\", \"", "    if length(strings) == 0 \n        return\
    \ None \n    else \n        return max(strings, key=length) \nend\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"", " \
    \   if length(strings) == 0 \n        return None \n    else \n        longest_str\
    \ = strings[length(strings)-1] \n        for str in strings \n            if length(str)\
    \ == length(longest_str) \n                longest_str = str \n            end\
    \ \n        end \n        return longest_str \n    end \nend \n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"hello\", \"world\", \"hi\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"hello\", \"world\", \"hi\", \"hi\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"hello\", \"world\", \"hi\", \"hi\", \"hi\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"hello\", \"world\", \"hi\"\
    , \"hi\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"hello\"\
    , \"world\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"hello\", \"world\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"hello\", \"world\", \"hi\"\
    , \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"hello\", \"world\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\"\
    , \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\"\
    , \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\"\
    , \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\"\
    , \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\"\
    , \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\"\
    , \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\"\
    , \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\"\
    , \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\"\
    , \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\"\
    , \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\"\
    , \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\"\
    , \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\"\
    , \"hi\", \"hi\", \"hi\", \"hi\", \"", "    if length(strings) == 0 \n       \
    \ return None \n    else \n        return max(strings, key=length) \nend", " \
    \   longest = None \n    for s in strings \n        if longest == None or length(longest)\
    \ > length(s) \n            longest = s \n        end\n    end\n    return longest\n\
    end\n</code>\n<|/ a tags=julia |>\n<| c |>\nThis doesn't work if you have multiple\
    \ strings of the same length\n<|/ c |>\n<| c |>\nI added a version that works\
    \ with multiple strings of the same length\n<|/ c |>\n<| a tags=julia |>\n<code>",
  "    if length(strings) == 0\n        return nothing\n    elseif length(strings)\
    \ == 1\n        return strings[1]\n    else\n        max_length = length(strings)\n\
    \        longest_string = strings[1]\n        for string in strings\n        \
    \    if length(string) == max_length\n                longest_string = string\n\
    \            else\n                max_length = length(string)\n            end\n\
    \        end\n        return longest_string\n    end\nend", "    if length(strings)\
    \ == 0 return None \n    else return max(strings, key=length) \nend\n</cell>\n\
    <code language=julia-1.4>\nlongest([\"a\", \"b\", \"c\", \"d\"])\n</cell>\n<code\
    \ language=julia-1.4>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\"])\n</cell>\n\
    <code language=julia-1.4>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"])\n\
    </cell>\n<code language=julia-1.4>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n<code language=julia-1.4>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"])\n</cell>\n\
    <code language=julia-1.4>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\",\
    \ \"g\", \"h\", \"i\", \"j\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"])\n\
    </cell>\n<code language=julia-1.4>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"])\n</cell>\n<code language=julia-1.4>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"a\", \"\
    b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"\
    m\", \"n\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"a\", \"\
    b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"\
    m\", \"n\", \"o\", \"p\", \"q\", \"r\"])\n</cell>\n<code language=julia-1.4>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"", "    if length(strings) == 0\n        return nothing\n    else\n      \
    \  longest_string = strings[end]\n        for string in strings\n            if\
    \ length(longest_string) > length(string)\n                longest_string = string\n\
    \            end\n        end\n        return longest_string\n    end\nend", " \
    \   if length(strings) == 0\n        return nothing\n    elseif length(strings)\
    \ == 1\n        return strings[1]\n    else\n        longest = strings[1]\n  \
    \      for s in strings[2:end]\n            if length(longest) > length(s) \n\
    \                longest = s\n            end\n        end\n        return longest\n\
    \    end\nend", "    if length(strings) == 0\n        return Nothing\n    else\n\
    \        longest_str = strings[length(strings)-1]\n        for str in strings\n\
    \            if length(str) == length(longest_str)\n                return str\n\
    \            else\n                longest_str = str\n        end\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"])\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\",\
    \ \"g\", \"h\", \"i\", \"j\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"])\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"\
    m\", \"n\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"\
    m\", \"n\", \"", "    longest = None \n    for s in strings \n        if longest\
    \ == None or length(longest) > length(s) \n            longest = s \n        end\n\
    \    end\n    return longest\nend\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\"\
    , \"b\", \"c\", \"d\", \"e\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"", "    if length(strings) == 0 \n        return None \n   \
    \ else \n        return max(strings, key=length) \nend", "    if length(strings)\
    \ == 0 return None \n    else return max(strings, key = length) \nend\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"hello\", \"world\", \"hello\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"hello\", \"world\", \"hello\", \"world\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"hello\", \"world\", \"hello\"\
    , \"world\", \"hello\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"hello\"\
    , \"world\", \"hello\", \"world\", \"hello\", \"world\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"\
    hello\", \"world\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"hello\",\
    \ \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"\
    , \"hello\", \"world\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"hello\"\
    , \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"\
    , \"hello\", \"world\", \"hello\", \"world\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"\
    hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"\
    world\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"hello\", \"world\",\
    \ \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\"\
    , \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"hello\", \"world\", \"hello\"\
    , \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"\
    , \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\"\
    , \"world\", \"hello\", \"world\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"\
    world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"\
    hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"\
    world\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"hello\", \"world\",\
    \ \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\"\
    , \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"\
    , \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\"\
    , \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"\
    , \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\"\
    , \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"\
    , \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"", "    if length(strings)\
    \ == 0 \n        return None \n    else \n        return max(strings, key=length)\
    \ \nend", "    if length(strings) == 0\n        return nothing\n    end\n    longest\
    \ = strings[1]\n    for s in strings[2:end]\n        if length(longest) > length(s)\
    \ \n            longest = s\n        end\n    end\n    return longest\nend", " \
    \   if length(strings) == 0 \n        return None \n    else \n        return\
    \ max(strings, key=length) \nend\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\"\
    , \"b\", \"c\", \"d\", \"e\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"", " \
    \   if length(strings) == 0\n        return nothing\n    end\n    longest_string\
    \ = strings[end]\n    for string in strings\n        if length(longest_string)\
    \ > length(string)\n            longest_string = string\n        end\n    end\n\
    \    return longest_string\nend", "    if length(strings) == 0\n        return\
    \ nothing\n    else\n        return max(strings, key=length)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"])\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\",\
    \ \"g\", \"h\", \"i\", \"j\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"])\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"\
    m\", \"n\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"\
    m\", \"n\", \"o\", \"p\", \"q\", \"r\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"", " \
    \   longest = None \n    for s in strings \n        if longest == None or length(s)\
    \ >= length(longest) \n            longest = s\n        end\n    end\n    return\
    \ longest\nend\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"\
    c\", \"d\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\"\
    , \"d\", \"e\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"", "    if length(strings) == 0 \n        return None \n    else \n\
    \        return max(strings, key=length) \nend\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"", " \
    \   longest = Nothing\n    for s in strings\n        if longest == Nothing ||\
    \ length(longest) > length(s) \n            longest = s\n        end\n    end\n\
    \    return longest\nend\n</cell>\n<code language=julia-1.5>\nlongest([\"a\",\
    \ \"b\", \"c\", \"d\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    b\", \"c\", \"d\", \"e\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"])\n</cell>\n<code language=julia-1.5>\n",
  "    longest = None \n    for s in strings \n        if longest == None \n     \
    \       longest = s \n        else \n            if length(longest) > length(s)\
    \ \n                longest = s \n            end\n        end\n    end\n    return\
    \ longest\nend", "    if length(strings) == 0\n        return nothing\n    else\n\
    \        return max(strings, key=length)\n    end\nend", "    if length(strings)\
    \ == 0 \n        return None \n    else \n        return max(strings, key=length)\
    \ \nend\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"\
    d\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\"\
    ]) == longest([\"a\", \"b\", \"c\", \"e\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\"]) == longest([\"a\", \"b\", \"c\", \"e\",\
    \ \"f\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"\
    d\"]) == longest([\"a\", \"b\", \"c\", \"e\", \"f\", \"g\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\"]) == longest([\"a\", \"b\", \"c\", \"e\",\
    \ \"f\", \"g\", \"h\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    b\", \"c\", \"d\"]) == longest([\"a\", \"b\", \"c\", \"e\", \"f\", \"g\", \"h\"\
    , \"i\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"\
    d\"]) == longest([\"a\", \"b\", \"c\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\"])\
    \ == longest([\"a\", \"b\", \"c\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\"\
    ]) == longest([\"a\", \"b\", \"c\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\",\
    \ \"k\", \"l\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"\
    c\", \"d\"]) == longest([\"a\", \"b\", \"c\", \"e\", \"f\", \"g\", \"h\", \"i\"\
    , \"j\", \"k\", \"l\", \"m\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\"]) == longest([\"a\", \"b\", \"c\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\"]) == longest([\"a\", \"b\", \"c\", \"e\",\
    \ \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\"]) == longest([\"\
    a\", \"b\", \"c\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"\
    m\", \"n\", \"o\", \"p\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\"\
    , \"b\", \"c\", \"d\"]) == longest([\"a\", \"b\", \"c\", \"e\", \"f\", \"g\",\
    \ \"", "    if length(strings) == 0 \n        return None \n    else \n      \
    \  return max(strings, key=length) \nend ", "    if length(strings) == 0 \n  \
    \      return None \n    else \n        return max(strings, key=length) \nend ",
  "    if length(strings) == 0 \n        return None \n    else \n        return max(strings,\
    \ key=length) \nend", "    if length(strings) == 0 return None \n    else return\
    \ max(strings, key=length) \nend\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\"\
    , \"b\", \"c\", \"d\", \"e\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"", "    longest = None \n    for s in strings \n        if longest == None\
    \ or length(longest) > length(s) \n            longest = s\n        end\n    end\n\
    \    return longest\nend", "    if length(strings) == 0 \n        return None\
    \ \n    else \n        return max(strings, key=length) \nend ", "    if length(strings)\
    \ == 0\n        return nothing\n    else\n        return max(strings, key=length)\n\
    \    end\nend", "    if length(strings) == 0 \n        return None \n    else\
    \ \n        return max(strings, key=length) \nend", "    if length(strings) ==\
    \ 0 \n        return None \n    else \n        return max(strings, key=length)\
    \ \nend ", "    if length(strings) == 0 \n        return None \n    else \n  \
    \      return max(strings, key=length) \nend ", "    if length(strings) == 0 \n\
    \        return None \n    else \n        return max(strings, key=length) \nend\
    \ \n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\"])\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"\
    e\", \"f\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\",\
    \ \"g\", \"h\", \"i\", \"j\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"])\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"\
    m\", \"n\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"\
    m\", \"n\", \"o\", \"p\", \"q\", \"r\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"", " \
    \   longest = Nothing\n    longest = strings[end-1] if end>0 \n    if longest\
    \ == Nothing \n        longest = strings[1]\n    end\n    longest\nend\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"])\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\",\
    \ \"g\", \"h\", \"i\", \"j\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"])\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"\
    m\", \"n\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"\
    m\", \"n\", \"o\", \"p\", \"q\", \"r\"])\n</cell>\n<code language=julia-1.5>",
  "    if length(strings) == 0 \n        return None \n    else \n        return max(strings,\
    \ key=length) \nend ", "    longest = None \n    for s in strings \n        if\
    \ longest == None or length(longest) < length(s) \n            longest = s\n \
    \       end\n    end\n    return longest\nend", "    longest = None \n    for\
    \ s in strings \n        if longest == None or length(longest) > length(s) \n\
    \            longest = s \n        end\n    end\n    return longest\nend\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"])\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\",\
    \ \"g\", \"h\", \"i\", \"j\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"])\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"\
    m\", \"n\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"\
    m\", \"n\", \"o\", \"p\", \"q\", \"r\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l", "    if length(strings) == 0\n        return nothing\n    end\n\
    \    max_length = maximum([length(s) for s in strings])\n    longest_string =\
    \ nothing\n    for s in strings\n        if length(s) == max_length\n        \
    \    if longest_string == nothing\n                longest_string = s\n      \
    \      else\n                if length(s) > length(longest_string)\n         \
    \           longest_string = s\n                end\n            end\n       \
    \ end\n    end\n    return longest_string\nend", "    longest = Nothing\n    for\
    \ s in strings\n        if longest == Nothing || length(longest) > length(s)\n\
    \            longest = s\n        end\n    end\n    return longest\nend", "  \
    \  if length(strings) == 0\n        return nothing\n    elseif length(strings)\
    \ == 1\n        return strings[1]\n    else\n        longest = strings[1]\n  \
    \      for string in strings\n            if string.length > longest.length\n\
    \                longest = string\n            end\n        end\n        return\
    \ longest\n    end\nend", "    if length(strings) == 0 \n        return None \n\
    \    else \n        return max(strings, key=length) \nend \n</cell>\n<code language=julia-1.5>\n\
    longest([\"Hello\", \"World\", \"Hello\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"Hello\", \"World\", \"Hello\", \"World\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"Hello\",\
    \ \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"Hello\", \"World\", \"Hello\", \"World\"\
    , \"Hello\", \"World\", \"Hello\", \"World\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\", \"World\", \"Hello\", \"World\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"", "    if length(strings)==0\
    \ \n        return None \n    else \n        return max(strings, key=length) \n\
    end ", "    if length(strings)==0 \n        return None \n    else \n        return\
    \ max(strings, key=length) \nend\n</cell>\n<code language=julia-1.3>\nlongest([\"\
    a\", \"b\", \"c\", \"d\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"a\"\
    , \"b\", \"c\", \"d\", \"e\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\"])\n</cell>\n<code language=julia-1.3>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"])\n</cell>\n<code language=julia-1.3>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n<code\
    \ language=julia-1.3>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"])\n</cell>\n<code language=julia-1.3>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"])\n</cell>\n<code\
    \ language=julia-1.3>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"])\n</cell>\n<code language=julia-1.3>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\"])\n</cell>\n<code language=julia-1.3>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"])\n</cell>\n<code language=julia-1.3>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i", "    if\
    \ length(strings) == 0\n        return nothing\n    end\n    max_length = maximum([length(s)\
    \ for s in strings])\n    longest_string = nothing\n    for s in strings\n   \
    \     if length(s) == max_length\n            if longest_string == nothing\n \
    \               longest_string = s\n            else\n                longest_string\
    \ = longest_string[1]\n            end\n        else\n            return longest_string\n\
    \        end\n    end\n    return longest_string\nend", "    if length(strings)\
    \ == 0 \n        error(\"Input list is empty\") \n    else \n        longest =\
    \ length(strings) \n        for s in strings \n            if length(s) > longest\
    \ \n                longest = length(s) \n            end \n        end \n   \
    \     return longest \n    end \nend ", "    if length(strings) == 0 \n      \
    \  return None \n    else \n        return max(strings, key=length) \nend\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"])\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\",\
    \ \"g\", \"h\", \"i\", \"j\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"])\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"\
    m\", \"n\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"\
    m\", \"n\", \"o\", \"p\", \"q\", \"r\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"", " \
    \   if length(strings) == 0\n        return nothing\n    end\n    max_length =\
    \ maximum([length(string) for string in strings])\n    longest_string = nothing\n\
    \    for string in strings\n        if length(string) == max_length\n        \
    \    if longest_string == nothing\n                longest_string = string\n \
    \           else\n                if length(string) > length(longest_string)\n\
    \                    longest_string = string\n                end\n          \
    \  end\n        end\n    end\n    return longest_string\nend", "    longest =\
    \ None \n    for s in strings \n        if longest == None or length(longest)\
    \ > length(s) \n            longest = s \n        end\n    end\n    return longest\n\
    end\n</cell>\n<code language=julia-1.5>\nlongest([\"hello\", \"world\", \"hello\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"hello\", \"world\", \"hello\"\
    , \"world\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"hello\", \"world\"\
    , \"hello\", \"world\", \"hello\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\"])\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"hello\", \"world\", \"hello\",\
    \ \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"\
    , \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\"\
    , \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"\
    , \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\"\
    , \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"\
    , \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\"\
    , \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"\
    , \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\"\
    , \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"\
    , \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\"\
    , \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"\
    , \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\"\
    , \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"\
    , \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\"\
    , \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"\
    , \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\"\
    , \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"\
    , \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\"\
    , \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"\
    , \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\"\
    , \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"\
    , \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\"\
    , \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"\
    , \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\"\
    , \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"\
    , \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\"\
    , \"world\", \"hello\", \"world\", \"", "    longest = None \n    for s in strings\
    \ \n        if longest == None \n            longest = s \n        else \n   \
    \         if length(longest) < length(s) \n                longest = s \n    \
    \        end\n        end\n    end\n    return longest\nend", "    if length(strings)\
    \ == 0 \n        return None \n    else \n        return max(strings, key = length)\
    \ \nend\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"\
    d\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\"\
    , \"e\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\"\
    , \"c\", \"d\", \"e\", \"f\", \"g\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\",\
    \ \"g\", \"h\", \"i\", \"j\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"])\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"\
    m\", \"n\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"\
    m\", \"n\", \"o\", \"p\", \"q\", \"r\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"", " \
    \   if length(strings) == 0 return None \n    else return max(strings, key=length)\
    \ \nend", "    longest = None \n    for s in strings \n        if longest == None\
    \ \n            longest = s \n        else if length(longest) < length(s) \n \
    \           longest = s \n        end\n    end\n    return longest\nend\n</code>\n\
    <|/ a tags=julia,string |>\n<| a |>\n<code>", "    if length(strings) == 0\n \
    \       error(\"Input list is empty\")\n    end\n    max_length = length(strings)\n\
    \    longest_string = strings[1]\n    for string in strings[2:end]\n        if\
    \ length(longest_string) > length(string)\n            max_length = length(longest_string)\n\
    \            longest_string = string\n        end\n    end\n    return longest_string\n\
    end", "    if length(strings) == 0 \n        return None \n    else \n       \
    \ return max(strings, key=length) \nend\n</cell>\n<code language=julia-1.5>\n\
    longest([\"abc\", \"def\", \"ghi\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    abc\", \"def\", \"ghi\", \"jkl\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    abc\", \"def\", \"ghi\", \"jkl\", \"mno\"])\n</cell>\n<text>\nExercise\nWrite\
    \ a function that takes a vector of strings and returns the longest string in\
    \ that vector. Return nothing if the vector is empty.", "    longest = Nothing\n\
    \    for s in strings\n        if length(s) > length(longest)\n            longest\
    \ = s\n        end\n    end\n    return longest\nend\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| c |>\nThis doesn't work if there are multiple strings of the same length.\
    \ For example, `longest([\"ab\", \"cd\", \"ef\"])` returns `\"ab\"`, but should\
    \ be `\"cd\"`.\n<|/ c |>\n<| c |>\nYes, I realized that after I posted my answer.\
    \ Thanks for pointing it out. I've updated my answer to include a solution that\
    \ does that.\n<|/ c |>\n<| a dscore=2 |>\nI believe this should work:\n<code>",
  "    if length(strings) == 0 \n        return None \n    else \n        return max(strings,\
    \ key = length) \nend ", "    if length(strings) == 0 \n        return None \n\
    \    else \n        return max(strings, key=length) \nend ", "    if length(strings)\
    \ == 0 \n        return None \n    else \n        return max(strings, key=length)\
    \ \nend\n</cell>\n<code language=julia-1.5>\nlongest([\"abc\", \"def\", \"ghi\"\
    , \"jkl\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"abc\", \"def\", \"\
    ghi\", \"jkl\", \"mno\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"abc\"\
    , \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\"])\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a vector of strings and returns a vector of strings\
    \ with the same length as the input vector, but with the first letter of each\
    \ string capitalized.", "    longest = None \n    for s in strings \n        if\
    \ longest == None or length(longest) < length(s) \n            longest = s \n\
    \        end\n    end\n    return longest\nend\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"", "    if length(strings) == 0\n        return nothing\n  \
    \  else \n        return max(strings, key=len)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i", "    if\
    \ length(strings) == 0 \n        return None \n    else \n        return max(strings,\
    \ key=length) \nend\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\"\
    , \"c\", \"d\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"\
    c\", \"d\", \"e\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\"\
    , \"c\", \"d\", \"e\", \"f\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"", " \
    \   longest = None \n    for s in strings \n        if longest == None or length(longest)\
    \ > length(s) \n            longest = s \n        end\n    end\n    return longest\n\
    end\n</cell>\n<code language=julia-1.5>\nlongest([\"abc\", \"def\", \"ghi\", \"\
    jkl\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"abc\", \"def\", \"ghi\"\
    , \"jkl\", \"mno\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"abc\", \"\
    def\", \"ghi\", \"jkl\", \"mno\", \"pqr\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\"\
    , \"pqr\", \"stu\", \"vwx\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\"])\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"abc\", \"def\", \"ghi\", \"jkl\"\
    , \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\", \"123\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\"\
    , \"yz\", \"123\", \"456\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\",\
    \ \"123\", \"456\", \"789\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\",\
    \ \"123\", \"456\", \"789\", \"012\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\",\
    \ \"123\", \"456\", \"789\", \"012\", \"345\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\"\
    , \"yz\", \"123\", \"456\", \"789\", \"012\", \"345\", \"678\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"\
    pqr", "    if length(strings) == 0 \n        return None \n    else \n       \
    \ max_length = length(strings) \n        longest_string = None \n        for s\
    \ in strings \n            if length(s) > max_length \n                max_length\
    \ = length(s) \n                longest_string = s \n            end \n      \
    \  end \n        return longest_string \n    end \nend \n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j",
  "    if length(strings) == 0 return None \n    else return strings[length(strings)]\
    \ \nend", "    if length(strings)==0 return None \n    else return max(strings)\n\
    end", "    if length(strings) == 0 \n        return None \n    else \n       \
    \ return max(strings, key=length) \nend\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"\
    , \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"",
  "    if length(strings) == 0 \n        return None \n    else \n        return max(strings,\
    \ key=length) \nend\n</cell>\n<code language=julia-1.5>\nlongest([\"abc\", \"\
    def\", \"ghi\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"abc\", \"def\"\
    , \"ghi\", \"jkl\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"abc\", \"\
    def\", \"ghi\", \"jkl\", \"mno\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\"\
    , \"pqr\", \"stu\", \"vwx\", \"yz\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\",\
    \ \"abc\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"abc\", \"def\", \"\
    ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\", \"abc\", \"def\"])\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"abc\", \"def\", \"ghi\", \"jkl\"\
    , \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\", \"abc\", \"def\", \"ghi\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\"\
    , \"pqr\", \"stu\", \"vwx\", \"yz\", \"abc\", \"def\", \"ghi\", \"jkl\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\"\
    , \"pqr\", \"stu\", \"vwx\", \"yz\", \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"abc\", \"def\", \"ghi\", \"\
    jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\", \"abc\", \"def\", \"ghi\",\
    \ \"jkl\", \"mno\", \"pqr\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\",\
    \ \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\"])\n</cell>\n",
  "    if length(strings)==0 return None \n    longest_str = strings[length(strings)-1]\n\
    \    for str in strings \n        if str==longest_str \n            return longest_str\
    \ \n        else \n            longest_str = str \n    end \n    return longest_str\
    \ \nend \n</cell>\n<code language=julia-1.4>\nlongest([\"a\", \"b\", \"c\", \"\
    d\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"a\", \"b\", \"c\", \"d\"\
    , \"e\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"a\", \"b\"\
    , \"c\", \"d\", \"e\", \"f\", \"g\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n<code language=julia-1.4>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"])\n</cell>\n\
    <code language=julia-1.4>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\",\
    \ \"g\", \"h\", \"i\", \"j\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"])\n\
    </cell>\n<code language=julia-1.4>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"])\n</cell>\n<code language=julia-1.4>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"a\", \"\
    b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"\
    m\", \"n\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"a\", \"\
    b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"\
    m\", \"n\", \"", "    if length(strings) == 0 \n        return None \n    else\
    \ \n        return max(strings, key = length) \nend", "    if length(strings)\
    \ == 0 \n        return None \n    else \n        return max(strings, key = length)\
    \ \nend\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"\
    d\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\"\
    , \"e\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\"\
    , \"c\", \"d\", \"e\", \"f\", \"g\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\",\
    \ \"g\", \"h\", \"i\", \"j\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"])\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"\
    m\", \"n\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"\
    m\", \"n\", \"o\", \"p\", \"q\", \"r\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"", " \
    \   if length(strings) == 0\n        return nothing\n    end\n    longest = strings[1]\n\
    \    for s in strings[2:end]\n        if length(longest) > length(s) \n      \
    \      longest = s\n        end\n    end\n    return longest\nend", "    if length(strings)\
    \ == 0 \n        return None \n    else \n        return max(strings, key=length)\
    \ \nend", "    if length(strings) == 0\n        return nothing\n    else\n   \
    \     return max(strings, key=len)\n    end\nend", "    if length(strings) ==\
    \ 0\n        return nothing\n    else\n        return max(strings, key=length)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\"\
    , \"d\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    b\", \"c\", \"d\", \"e\", \"f\", \"g\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"", " \
    \   if length(strings) == 0 \n        return None \n    else \n        return\
    \ max(strings, key=length) \nend\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    abc\", \"def\", \"ghi\", \"jkl\"])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of strings and returns a vector of booleans indicating whether\
    \ each string is a palindrome or not. \nHint: Use isa.palindrome to check whether\
    \ a string is a palindrome.", "    if length(strings) == 0 \n        return None\
    \ \n    else \n        return max(strings, key=length) \nend\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"", " \
    \   longest = None \n    for s in strings \n        if longest == None or length(longest)\
    \ > length(s) \n            longest = s \n        end\n    end\n    return longest\n\
    end\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\"])\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"\
    e\", \"f\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\",\
    \ \"g\", \"h\", \"i\", \"j\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"])\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"\
    m\", \"n\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"\
    m\", \"n\", \"o\", \"p\", \"q\", \"r\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"", "    if length(strings) == 0 \n        error(\"The input\
    \ list is empty\")\n    end\n    longest = strings[1]\n    for string in strings[2:end]\n\
    \        if length(string) > length(longest)\n            longest = string\n \
    \       end\n    end\n    return longest\nend\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p", "    if length(strings) == 0\n    \
    \    return Nothing\n    else \n        return max(strings, key=length)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\"])\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"\
    e\", \"f\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\",\
    \ \"g\", \"h\", \"i\", \"j\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"])\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"\
    m\", \"n\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"\
    m\", \"n\", \"o\", \"p\", \"q\", \"r\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"", "    longest\
    \ = None \n    for s in strings \n        if longest == None \n            longest\
    \ = s \n        else \n            if length(longest) < length(s) \n         \
    \       longest = s \n            end\n        end\n    end\n    return longest\n\
    end\n</cell>\n<code language=julia-1.5>\nlongest([\"Hello\", \"World\", \"Hello\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"Hello\", \"World\", \"Hello\"\
    , \"World\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"Hello\", \"World\"\
    , \"Hello\", \"World\", \"Hello\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"Hello\",\
    \ \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\"\
    , \"Hello\", \"World\", \"Hello\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"", "    if length(strings) == 0\n        return nothing\n    elseif\
    \ length(strings) == 1\n        return strings[1]\n    else\n        longest =\
    \ strings[1]\n        for s in strings[2:end]\n            if length(longest)\
    \ > length(s) \n                longest = s\n            end\n        end\n  \
    \      return longest\n    end\nend\n</code>\n<|/ a tags=julia,string |>\n<| c\
    \ |>\nThis does not answer the question. The question asks for an efficient way\
    \ to find the longest string in a list of strings. Your code does not do that.\n\
    <|/ c |>\n<| c |>\nThe question asks for an efficient way to find the longest\
    \ string in a list of strings. Your code does not do that.\n<|/ c |>\n<| c |>\n\
    The question asks for an efficient way to find the longest string in a list of\
    \ strings. Your code does not do that.\n<|/ c |>\n<| c |>\nThe question asks for\
    \ an efficient way to find the longest string in a list of strings. Your code\
    \ does not do that.\n<|/ c |>\n<| c |>\nThe question asks for an efficient way\
    \ to find the longest string in a list of strings. Your code does not do that.\n\
    <|/ c |>\n<| a tags=julia,string |>\n<code>", "    longest = None \n    for string\
    \ in strings \n        if longest == None or length(longest) > length(string)\
    \ \n            longest = string \n        end\n    end\n    return longest\n\
    end", "    if length(strings) == 0 \n        return None \n    else \n       \
    \ return max(strings, key=length) \nend\n</cell>\n<code language=julia-1.5>\n\
    longest([\"Hello\", \"World\", \"Hello\"])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of strings and returns a vector of strings with\
    \ the same length as the original vector, but with each string repeated twice\
    \ (e.g., \"Hello\" -> \"HelloHello\").", "    if length(strings) == 0\n      \
    \  return nothing\n    end\n    max_length = maximum([length(s) for s in strings])\n\
    \    longest_string = nothing\n    for s in strings\n        if length(s) == max_length\n\
    \            longest_string = s\n            break\n        end\n    end\n   \
    \ return longest_string\nend", "    if length(strings) == 0\n        return nothing\n\
    \    else\n        longest = strings[end]\n        for s in strings[2:end]\n \
    \           if length(longest) < length(s)\n                longest = s\n    \
    \        end\n        end\n        return longest\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"abc\", \"def\", \"ghi\", \"jkl\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"abc\", \"def\", \"ghi\", \"\
    jkl\", \"mno\", \"pqr\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"abc\"\
    , \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\"\
    , \"yz\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"abc\", \"def\", \"\
    ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\", \"abc\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\"\
    , \"pqr\", \"stu\", \"vwx\", \"yz\", \"abc\", \"def\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\"\
    , \"yz\", \"abc\", \"def\", \"ghi\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\",\
    \ \"abc\", \"def\", \"ghi\", \"jkl\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\",\
    \ \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\"\
    , \"yz\", \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"\
    pqr\", \"stu\", \"vwx\", \"yz\", \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\",\
    \ \"pqr", "    if length(strings) == 0 \n        return None \n    else \n   \
    \     return max(strings, key=length) \nend\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"", " \
    \   if length(strings) == 0\n        return nothing\n    else\n        return\
    \ max(strings, key=len)\n    end\nend", "    if length(strings) == 0\n       \
    \ return Nothing\n    else\n        return max(strings, key=length) \n    end\n\
    end", "    if length(strings) == 0\n        return nothing\n    end\n    longest\
    \ = strings[1]\n    for s in strings[2:end]\n        if length(longest) > length(s)\
    \ \n            longest = s\n        end\n    end\n    return longest\nend", " \
    \   longest = None \n    for s in strings \n        if longest == None or length(longest)\
    \ > length(s) \n            longest = s \n        end\n    end\n    return longest\n\
    end\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\"])\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"\
    e\", \"f\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\",\
    \ \"g\", \"h\", \"i\", \"j\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"])\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"\
    m\", \"n\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"\
    m\", \"n\", \"o\", \"p\", \"q\", \"r\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"", "    longest = None \n    for s in strings \n        if longest\
    \ == None or length(s) >= length(longest) \n            longest = s \n       \
    \ end\n    end\n    return longest\nend\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"", "    if length(strings) == 0\n        return nothing\n    else\n\
    \        return max(strings, key=length)\n    end\nend", "    longest = None \n\
    \    for s in strings \n        if longest == None \n            longest = s \n\
    \        else \n            if length(longest) < length(s) \n                longest\
    \ = s \n            end\n        end\n    end\n    return longest\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=julia,string |>\n<code>\njulia> function longest(s::Vector{String})\n\
    \           return maximum([length(s.[i]) for i in 1:length(s)])\n       end\n\
    longest (generic function with 1 method)", "    if length(strings) == 0 \n   \
    \     return None \n    else \n        return max(strings, key=length) \nend \n\
    </cell>\n<code language=julia-1.3>\nlongest([\"Hello\", \"World\", \"Hello\"])\n\
    </cell>\n<code language=julia-1.3>\nlongest([\"Hello\", \"World\", \"Hello\",\
    \ \"World\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"Hello\", \"World\"\
    , \"Hello\", \"World\", \"Hello\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\"])\n</cell>\n<code\
    \ language=julia-1.3>\nlongest([\"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"Hello\", \"World\",\
    \ \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"\
    ])\n</cell>\n<code language=julia-1.3>\nlongest([\"Hello\", \"World\", \"Hello\"\
    , \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\"\
    ])\n</cell>\n<code language=julia-1.3>\nlongest([\"Hello\", \"World\", \"Hello\"\
    , \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\"\
    , \"Hello\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"Hello\", \"World\"\
    , \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"\
    , \"World\", \"Hello\", \"World\", \"Hello\"])\n</cell>\n<code language=julia-1.3>\n\
    longest([\"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"Hello\",\
    \ \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\"\
    , \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"\
    , \"World\", \"Hello\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"Hello\"\
    , \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\"\
    , \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"\
    , \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\"\
    , \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"\
    , \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\"\
    , \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"\
    , \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\"\
    , \"Hello\", \"World\", \"Hello\", \"World", "    if length(strings) == 0\n  \
    \      return nothing\n    elseif length(strings) == 1\n        return strings[1]\n\
    \    else\n        max_length = length(strings[1])\n        for s in strings\n\
    \            if length(s) > max_length\n                max_length = length(s)\n\
    \            end\n        end\n        return strings[max_length]\n    end\nend",
  "    if length(strings) == 0 \n        return None \n    else \n        return max(strings,\
    \ key=length) \nend\n</cell>\n<code language=julia-1.5>\nlongest([\"abc\", \"\
    def\", \"ghi\", \"jkl\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"abc\"\
    , \"def\", \"ghi\", \"jkl\", \"mno\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\"])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of strings and returns the number of\
    \ unique words in the vector.", "    if length(strings) == 0\n        return nothing\n\
    \    else \n        return max(strings, key=length) \nend", "    if length(strings)\
    \ == 0 \n        return None \n    else \n        return max(strings, key=length)\
    \ \nend\n</cell>\n<code language=julia-1.4>\nlongest([\"a\", \"b\", \"c\", \"\
    d\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"a\", \"b\", \"c\", \"d\"\
    , \"e\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"a\", \"b\"\
    , \"c\", \"d\", \"e\", \"f\", \"g\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n<code language=julia-1.4>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"])\n</cell>\n\
    <code language=julia-1.4>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\",\
    \ \"g\", \"h\", \"i\", \"j\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"])\n\
    </cell>\n<code language=julia-1.4>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"])\n</cell>\n<code language=julia-1.4>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"a\", \"\
    b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"\
    m\", \"n\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"a\", \"\
    b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"\
    m\", \"n\", \"o\", \"p\", \"q\", \"r\"])\n</cell>\n<code language=julia-1.4>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"", " \
    \   if length(strings) == 0 \n        return None \n    else \n        return\
    \ max(strings, key=length) \nend\n</cell>\n<code language=julia-1.4>\nlongest([\"\
    a\", \"b\", \"c\", \"d\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"a\"\
    , \"b\", \"c\", \"d\", \"e\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\"])\n</cell>\n<code language=julia-1.4>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"])\n</cell>\n<code language=julia-1.4>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n<code\
    \ language=julia-1.4>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"])\n</cell>\n<code language=julia-1.4>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"])\n</cell>\n<code\
    \ language=julia-1.4>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"])\n</cell>\n<code language=julia-1.4>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\"])\n</cell>\n<code language=julia-1.4>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"])\n</cell>\n<code language=julia-1.4>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"", " \
    \   longest = None \n    for s in strings \n        if longest == None \n    \
    \        longest = s \n        else \n            if length(longest) > length(s)\
    \ \n                longest = s \n            end\n        end\n    end\n    return\
    \ longest\nend", "    if length(strings) == 0\n        return nothing\n    else\n\
    \        return max(strings, key=length) \n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    longest([\"a\", \"b\", \"c\", \"d\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\"])\n</cell>\n<code language=julia-1.4>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"])\n</cell>\n<code language=julia-1.4>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n<code\
    \ language=julia-1.4>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"])\n</cell>\n<code language=julia-1.4>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"])\n</cell>\n<code\
    \ language=julia-1.4>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"])\n</cell>\n<code language=julia-1.4>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\"])\n</cell>\n<code language=julia-1.4>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"])\n</cell>\n<code language=julia-1.4>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i", "    if\
    \ length(strings) == 0 \n        return None \n    else \n        return max(strings,\
    \ key=length) \nend", "    if length(strings) == 0\n        return nothing\n \
    \   end\n    max_length = length(strings[1])\n    for string in strings\n    \
    \    if length(string) > max_length\n            max_length = length(string)\n\
    \        end\n    end\n    return strings[max_length]\nend\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"", "    if length(strings) == 0 \n        return\
    \ None \n    else \n        return max(strings, key=length) \nend", "    if length(strings)\
    \ == 0 \n        return None \n    else \n        return max(strings, key=length)\
    \ \nend\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"\
    d\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\"\
    , \"e\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\"\
    , \"c\", \"d\", \"e\", \"f\", \"g\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\",\
    \ \"g\", \"h\", \"i\", \"j\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"])\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"\
    m\", \"n\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"\
    m\", \"n\", \"o\", \"p\", \"q\", \"r\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"", " \
    \   if length(strings) == 0\n        return nothing\n    else\n        longest\
    \ = length(strings)\n        for string in strings\n            if length(string)\
    \ > longest\n                longest = length(string)\n            end\n     \
    \   end\n        return strings[longest]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    longest([\"Hello\", \"World\", \"Hello\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"Hello\", \"World\", \"Hello\", \"World\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"Hello\",\
    \ \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"Hello\", \"World\", \"Hello\", \"World\"\
    , \"Hello\", \"World\", \"Hello\", \"World\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\", \"World\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\", \"World\", \"Hello\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"])\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"Hello\", \"World\", \"Hello\",\
    \ \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\"\
    , \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"",
  "    if length(strings)==0 return None \n    longest_string =  strings[length(strings)-1]\
    \ \n    for string in strings \n        if length(string)>length(longest_string)\
    \ \n            longest_string = string \n        end \n    end \n    return longest_string\
    \ \nend \n</cell>\n<code language=julia-1.5>\nlongest([\"abc\",\"def\",\"ghi\"\
    ,\"jkl\",\"mno\",\"pqr\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"abc\"\
    ,\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"\
    pqr\",\"stu\",\"vwx\",\"yz\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\",\"abc\"])\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"abc\",\"def\",\"ghi\",\"jkl\",\"\
    mno\",\"pqr\",\"stu\",\"vwx\",\"yz\",\"abc\",\"def\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\"\
    ,\"abc\",\"def\",\"ghi\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"abc\"\
    ,\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\",\"abc\",\"def\"\
    ,\"ghi\",\"jkl\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"abc\",\"def\"\
    ,\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\",\"abc\",\"def\",\"ghi\"\
    ,\"jkl\",\"mno\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"abc\",\"def\"\
    ,\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\",\"abc\",\"def\",\"ghi\"\
    ,\"jkl\",\"mno\",\"pqr\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"abc\"\
    ,\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\",\"abc\",\"def\"\
    ,\"ghi\",\"jkl\",\"mno\",\"p", "    if length(strings) == 0 \n        return None\
    \ \n    else \n        return max(strings, key = length) \nend\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"", " \
    \   if length(strings) == 0 \n        return None \n    else \n        return\
    \ max(strings, key=length) \nend\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\"\
    , \"b\", \"c\", \"d\", \"e\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"", " \
    \   if length(strings) == 0 \n        return None \n    else \n        return\
    \ max(strings, key=length) \nend \n</cell>\n<code language=julia-1.5>\nlongest([\"\
    Hello\", \"World\", \"Hello\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    Hello\", \"World\", \"Hello\", \"World\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"Hello\",\
    \ \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"Hello\", \"World\", \"Hello\", \"World\"\
    , \"Hello\", \"World\", \"Hello\", \"World\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello", "    if length(strings) == 0 \n        return None\
    \ \n    else \n        return max(strings, key=length) \nend\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"", " \
    \   if length(strings) == 0 \n        return None \n    else \n        return\
    \ max(strings, key=length) \nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of strings and returns a vector of strings with the first\
    \ letter of each string capitalized. \nFor example, the input [\"hello\", \"world\"\
    ] should return the output [\"Hello\", \"World\"].\nHint: Use the function map()\
    \ and the function capitalize() from Julia.", "    longest = None \n    for s\
    \ in strings \n        if longest == None \n            longest = s \n       \
    \ else \n            if length(longest) > length(s) \n                longest\
    \ = s \n            end\n        end\n    end\n    return longest\nend\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"])\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\",\
    \ \"g\", \"h\", \"i\", \"j\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"])\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"\
    m\", \"n\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"\
    m\", \"n\", \"o\", \"p\", \"q\", \"r\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f", "    if length(strings) == 0\n\
    \        return nothing\n    else\n        return max(strings, key=length)\n \
    \   end\nend", "    longest = None \n    for s in strings \n        if longest\
    \ == None or length(longest) > length(s) \n            longest = s \n        end\n\
    \    end\n    return longest\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n\
    I came up with this solution:\n<code>", "    if length(strings) == 0 \n      \
    \  error(\"Input list is empty\") \n    else \n        longest = strings[length(strings)-1]\
    \ \n        for string in strings \n            if string.length() > longest.length()\
    \ \n                longest = string \n            end \n        end \n      \
    \  return longest \n    end \nend ", "    if length(strings) == 0 \n        return\
    \ None \n    else \n        return max(strings, key=length) \nend ", "    if length(strings)\
    \ == 0 \n        return None \n    else \n        return max(strings, key=length)\
    \ \nend\n</cell>\n<code language=julia-1.5>\nlongest([\"Hello\", \"World\", \"\
    Hello\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"Hello\", \"World\",\
    \ \"Hello\", \"World\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"Hello\"\
    , \"World\", \"Hello\", \"World\", \"Hello\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\"])\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"Hello\", \"World\", \"Hello\",\
    \ \"World\", \"Hello\", \"World\", \"Hello\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"Hello\",\
    \ \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\"\
    , \"Hello\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"Hello\", \"World\"\
    , \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"\
    , \"World\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"Hello\", \"World\"\
    , \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"\
    , \"World\", \"Hello\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"Hello\"\
    , \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\"\
    , \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"Hello\",\
    \ \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\"\
    , \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"\
    , \"World\", \"Hello\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"Hello\"\
    , \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\"\
    , \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"\
    , \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\"\
    , \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"\
    , \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\"\
    , \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"\
    , \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\"\
    , \"Hello\", \"World\", \"Hello\", \"World", "    if length(strings) == 0\n  \
    \      return nothing\n    end\n    longest_len = length(strings[1])\n    for\
    \ s in strings\n        if length(s) > longest_len\n            longest_len =\
    \ length(s)\n        end\n    end\n    if longest_len == 1\n        return strings[1]\n\
    \    else\n        return strings[longest_len]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i", "    if\
    \ length(strings) == 0\n        return nothing\n    else\n        longest = strings[1]\n\
    \        for s in strings[2:end]\n            if length(longest) > length(s) \n\
    \                longest = s\n            end\n        end\n        return longest\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\"\
    , \"d\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    b\", \"c\", \"d\", \"e\", \"f\", \"g\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"])", "    if length(strings)\
    \ == 0\n        return nothing\n    else\n        return max(strings, key = length)\
    \ \n    end\nend\n</cell>\n<code language=julia-1.5>\nlongest([\"abc\", \"def\"\
    , \"ghi\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"abc\", \"def\", \"\
    ghi\", \"jkl\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"abc\", \"def\"\
    , \"ghi\", \"jkl\", \"mno\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\"])\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a vector of strings and returns the longest string\
    \ in that vector, ignoring case. \n    For example, longest([\"abc\", \"def\"\
    , \"ghi\", \"jkl\", \"mno\", \"pqr\"]) should return \"mno\".\n    Use a case\
    \ insensitive string comparison function.\n    Use a case insensitive string comparison\
    \ function.\n    Use a case insensitive string comparison function.\n    Use a\
    \ case insensitive string comparison function.\n    Use a case insensitive string\
    \ comparison function.\n    Use a case insensitive string comparison function.\n\
    \    Use a case insensitive string comparison function.\n    Use a case insensitive\
    \ string comparison function.\n    Use a case insensitive string comparison function.\n\
    \    Use a case insensitive string comparison function.\n    Use a case insensitive\
    \ string comparison function.\n    Use a case insensitive string comparison function.\n\
    \    Use a case insensitive string comparison function.\n    Use a case insensitive\
    \ string comparison function.\n    Use a case insensitive string comparison function.\n\
    \    Use a case insensitive string comparison function.\n    Use a case insensitive\
    \ string comparison function.\n    Use a case insensitive string comparison function.\n\
    \    Use a case insensitive string comparison function.\n    Use a case insensitive\
    \ string comparison function.\n    Use a case insensitive string comparison function.\n\
    \    Use a case insensitive string comparison function.\n    Use a case insensitive\
    \ string comparison function.\n    Use a case insensitive string comparison function.\n\
    \    Use a case insensitive string comparison function.\n    Use a case insensitive\
    \ string comparison function.\n    Use a case insensitive string comparison function.\n\
    \    Use a case insensitive string comparison function.\n    Use a case insensitive\
    \ string comparison function.\n    Use a case insensitive string comparison function.\n\
    \    Use a case insensitive string comparison function.\n    Use a case insensitive\
    \ string comparison function.\n    Use a case insensitive string comparison function.\n\
    \    Use a case in", "    if length(strings) == 0 \n        return None \n   \
    \ else \n        return max(strings, key=length) \nend \n</cell>\n<code language=julia-1.5>\n\
    longest([\"Hello\", \"World\", \"Hello\"])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of strings and returns the number of strings\
    \ that are not empty. \nHint: Use filter! to filter out empty strings.", "   \
    \ if length(strings) == 0 return None \n    else return max(strings, key=length)\
    \ \nend \n</cell>\n<code language=julia-1.0>\nlongest([\"a\", \"b\", \"c\", \"\
    d\"])\n</cell>\n<code language=julia-1.0>\nlongest([\"a\", \"b\", \"c\", \"d\"\
    ])\n</cell>\n<code language=julia-1.0>\nlongest([\"a\", \"b\", \"c\", \"d\"])\n\
    </cell>\n<code language=julia-1.0>\nlongest([\"a\", \"b\", \"c\", \"d\"])\n</cell>\n\
    <code language=julia-1.0>\nlongest([\"a\", \"b\", \"c\", \"d\"])\n</cell>\n<code\
    \ language=julia-1.0>\nlongest([\"a\", \"b\", \"c\", \"d\"])\n</cell>\n<code language=julia-1.0>\n\
    longest([\"a\", \"b\", \"c\", \"d\"])\n</cell>\n<code language=julia-1.0>\nlongest([\"\
    a\", \"b\", \"c\", \"d\"])\n</cell>\n<code language=julia-1.0>\nlongest([\"a\"\
    , \"b\", \"c\", \"d\"])\n</cell>\n<code language=julia-1.0>\nlongest([\"a\", \"\
    b\", \"c\", \"d\"])\n</cell>\n<code language=julia-1.0>\nlongest([\"a\", \"b\"\
    , \"c\", \"d\"])\n</cell>\n<code language=julia-1.0>\nlongest([\"a\", \"b\", \"\
    c\", \"d\"])\n</cell>\n<code language=julia-1.0>\nlongest([\"a\", \"b\", \"c\"\
    , \"d\"])\n</cell>\n<code language=julia-1.0>\nlongest([\"a\", \"b\", \"c\", \"\
    d\"])\n</cell>\n<code language=julia-1.0>\nlongest([\"a\", \"b\", \"c\", \"d\"\
    ])\n</cell>\n<code language=julia-1.0>\nlongest([\"a\", \"b\", \"c\", \"d\"])\n\
    </cell>\n<code language=julia-1.0>\nlongest([\"a\", \"b\", \"c\", \"d\"])\n</cell>\n\
    <code language=julia-1.0>\nlongest([\"a\", \"b\", \"c\", \"d\"])\n</cell>\n<code\
    \ language=julia-1.0>\nlongest([\"a\", \"b\", \"c\", \"d\"])\n</cell>\n<code language=julia-1.0>\n\
    longest([\"a\", \"b\", \"c\", \"d\"])\n</cell>\n<code language=julia-1.0>\nlongest([\"\
    a\", \"b\", \"c\", \"d\"])\n</cell>\n<code language=julia-1.0>\nlongest([\"a\"\
    , \"b\", \"c\", \"d\"])\n</cell>\n<code language=julia-1.0>\nlongest([\"a\", \"\
    b\", \"c\", \"d\"])\n</cell>\n<code language=julia-1.0>\nlongest([\"a\", \"b\"\
    , \"c\", \"d\"])\n</cell>\n<code language=julia-1.0>\nlongest([\"a\", \"b\", \"\
    c\", \"d\"])\n</cell>\n<code language=julia-1.0>\nlongest([\"a\", \"b\", \"c\"\
    , \"d\"])\n</cell>\n<code language=julia-1.0>\nlongest([\"a\", \"b\", \"c\", \"\
    d\"])\n</cell>\n<code language=julia-", "    if length(strings) == 0 \n      \
    \  return None \n    else \n        return max(strings, key=length) \nend\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"hello\", \"world\", \"hello\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"hello\", \"world\", \"hello\", \"world\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"hello\", \"world\", \"hello\"\
    , \"world\", \"hello\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"hello\"\
    , \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"hello\", \"world\", \"hello\", \"world\"\
    , \"hello\", \"world\", \"hello\", \"world\", \"hello\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"\
    hello\", \"world\", \"hello\", \"world\", \"hello\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"\
    hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"\
    world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"\
    hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"\
    world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"\
    hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"\
    world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"\
    hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"\
    world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"\
    hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"\
    world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"\
    hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"\
    world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"\
    hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"\
    world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"\
    hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"\
    world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"\
    hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"\
    world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"\
    hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"\
    world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"\
    hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"\
    world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"\
    hello\", \"world", "    if length(strings) == 0 \n        return None \n    else\
    \ \n        return max(strings, key=length) \nend\n</cell>\n<code language=julia-1.5>\n\
    longest([\"abc\", \"def\", \"ghi\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    abc\", \"def\", \"ghi\", \"jkl\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    abc\", \"def\", \"ghi\", \"jkl\", \"mno\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"\
    pqr\", \"stu\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"abc\", \"def\"\
    , \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\"\
    , \"yz\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"abc\", \"def\", \"\
    ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\", \"abc\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\"\
    , \"pqr\", \"stu\", \"vwx\", \"yz\", \"abc\", \"def\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\"\
    , \"yz\", \"abc\", \"def\", \"ghi\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\",\
    \ \"abc\", \"def\", \"ghi\", \"jkl\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\",\
    \ \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\"\
    , \"yz\", \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"abc\", \"def\", \"gh", "    if length(strings)\
    \ == 0\n        return nothing\n    end\n    max_length = maximum([length(s) for\
    \ s in strings])\n    longest_string = nothing\n    for s in strings\n       \
    \ if length(s) == max_length\n            if longest_string == nothing\n     \
    \           longest_string = s\n            else\n                if length(s)\
    \ > length(longest_string)\n                    longest_string = s\n         \
    \       end\n            end\n        end\n    end\n    return longest_string\n\
    end", "    if length(strings) == 0 \n        return None \n    else \n       \
    \ return max(strings, key=length) \nend", "    if length(strings) == 0\n     \
    \   return Nothing\n    end\n    max_length = length(strings)\n    longest_string\
    \ = strings[max_length]\n    for string in strings\n        if length(string)\
    \ == max_length\n            return longest_string\n        end\n    end\n   \
    \ return longest_string\nend", "    if length(strings) == 0\n        return nothing\n\
    \    end\n    max_length = maximum([length(s) for s in strings])\n    longest_string\
    \ = nothing\n    for s in strings\n        if length(s) == max_length\n      \
    \      longest_string = s\n        else\n            return longest_string\n \
    \       end\n    end\n    return longest_string\nend", "    if length(strings)\
    \ == 0 \n        return None \n    else \n        return max(strings, key=length)\
    \ \nend", "    if length(strings) == 0 \n        return None \n    else \n   \
    \     return max(strings, key=length) \nend\n</cell>\n<code language=julia-1.5>\n\
    longest([\"hello\", \"world\", \"foo\", \"bar\"])\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the longest string in a list of strings. Return\
    \ None in case the input list is empty.", "    if length(strings) == 0\n     \
    \   return nothing\n    else\n        longest = strings[end]\n        for s in\
    \ strings\n            if length(s) > length(longest)\n                longest\
    \ = s\n            end\n        end\n        return longest\n    end\nend", " \
    \   if length(strings) == 0\n        return Nothing\n    else\n        return\
    \ max(strings, key=length)\n    end\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    Thanks for your answer. I'm aware of the `longest` function but I was looking\
    \ for a more general solution that would work with any kind of collection (not\
    \ just strings). I'll edit the question to make it clearer.\n<|/ c |>\n<| a dscore=1\
    \ |>\nI wrote a function that can handle any kind of collection (not just strings).\
    \ \n<code>", "    if length(strings) == 0 \n        return None \n    else \n\
    \        return max(strings, key=length) \nend\n</cell>\n<code language=julia-1.5>\n\
    longest([\"Hello\", \"World\", \"Hello\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"Hello\", \"World\", \"Hello\", \"World\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"Hello\",\
    \ \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"Hello\", \"World\", \"Hello\", \"World\"\
    , \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"", "    longest = None \n    for string in strings\
    \ \n        if longest == None or length(longest) > length(string) \n        \
    \    longest = string \n        end\n    end\n    return longest\nend\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\",\
    \ \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"\
    g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"", "    longest\
    \ = None \n    for s in strings \n        if longest == None or length(longest)\
    \ < length(s) \n            longest = s \n        end\n    end\n    return longest\n\
    end", "    if length(strings) == 0 \n        return None \n    else \n       \
    \ return max(strings, key=length) \nend\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"", " \
    \   if length(strings) == 0\n        return nothing\n    end\n    max_length =\
    \ length(strings)\n    longest_string = strings[max_length]\n    for s in strings[2:end]\n\
    \        if length(s) == max_length\n            return longest_string\n     \
    \   else\n            max_length = length(longest_string)\n            longest_string\
    \ = s\n        end\n    end\n    return longest_string\nend\n</cell>\n<code language=julia-1.3>\n\
    longest([\"a\", \"b\", \"c\", \"d\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\"])\n</cell>\n<code language=julia-1.3>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"])\n</cell>\n<code language=julia-1.3>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n<code\
    \ language=julia-1.3>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"])\n</cell>\n<code language=julia-1.3>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"])\n</cell>\n<code\
    \ language=julia-1.3>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"])\n</cell>\n<code language=julia-1.3>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\"])\n</cell>\n<code language=julia-1.3>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"", "    if length(strings)\
    \ == 0 \n        return None \n    else \n        return max(strings, key=length)\
    \ \nend\n</cell>\n<code language=julia-1.5>\nlongest([\"Hello\", \"World\", \"\
    Hello\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"Hello\", \"World\",\
    \ \"Hello\", \"World\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"Hello\"\
    , \"World\", \"Hello\", \"World\", \"Hello\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\"])\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"Hello\", \"World\", \"Hello\",\
    \ \"World\", \"Hello\", \"World\", \"Hello\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\", \"World\", \"Hello\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"])\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"Hello\", \"World\", \"Hello\",\
    \ \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\"\
    , \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"\
    , \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\"\
    , \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"\
    , \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\"\
    , \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"\
    , \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\"\
    , \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"\
    , \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\"\
    , \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"\
    , \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\"\
    , \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"\
    , \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\"\
    , \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"\
    , \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\"\
    , \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"\
    , \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\"\
    , \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"\
    , \"World", "    if length(strings) == 0 \n        return None \n    else \n \
    \       return max(strings, key = length) \nend", "    if length(strings) == 0\
    \ \n        return None \n    else \n        return max(strings, key=length) \n\
    end ", "    if length(strings) == 0\n        error(\"Input list is empty\")\n\
    \    end\n    longest = strings[1]\n    for s in strings[2:end]\n        if length(s)\
    \ > length(longest)\n            longest = s\n        end\n    end\n    return\
    \ longest\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nThanks for your answer!\
    \ I edited my question to make it clearer what I'm looking for.\n<|/ c |>\n<|\
    \ c |>\nI edited my answer to reflect your edit. Hope it helps.\n<|/ c |>\n<|\
    \ c |>\nThanks again! I edited my question to make it clearer what I'm looking\
    \ for. Your answer works perfectly for strings of length 1, but doesn't work for\
    \ strings of length 2. Any ideas?\n<|/ c |>\n<| c |>\nI edited my answer to reflect\
    \ your edit. Hope it helps.\n<|/ c |>\n<| c |>\nThanks again! I edited my question\
    \ to make it clearer what I'm looking for. Your answer works perfectly for strings\
    \ of length 1, but doesn't work for strings of length 2. Any ideas?\n<|/ c |>\n\
    <| a tags=julia |>\nI came up with this solution:\n<code>", "    longest = None\
    \ \n    for s in strings \n        if longest == None \n            longest =\
    \ s \n        else \n            if length(longest) < length(s) \n           \
    \     longest = s \n            end \n        end \n    end \n    return longest\
    \ \nend ", "    longest = None \n    for s in strings \n        if longest ==\
    \ None or length(longest) > length(s) \n            longest = s \n        end\n\
    \    end\n    return longest\nend\n</code>\n<|/ a tags=julia,string |>\n<| a |>\n\
    <code>", "    longest = None \n    for s in strings \n        if longest == None\
    \ or length(longest) > length(s) \n            longest = s\n        end\n    end\n\
    \    return longest\nend", "    if length(strings) == 0 \n        return None\
    \ \n    else \n        return max(strings, key=length) \nend\n</cell>\n<code language=julia-1.5>\n\
    longest([\"hello\", \"world\", \"hello\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"hello\", \"world\", \"hello\", \"world\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"hello\", \"world\", \"hello\", \"world\", \"hello\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"hello\", \"world\", \"hello\", \"world\", \"\
    hello\", \"world\"])\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of strings and returns a vector of strings with the first letter of\
    \ each string capitalized. \nFor example, [\"hello\", \"world\", \"hello\"] should\
    \ return [\"Hello\", \"World\", \"Hello\"].", "    if length(strings) == 0 \n\
    \        return None \n    else \n        return max(strings, key=length) \nend",
  "    if length(strings) == 0 \n        return None \n    else \n        return max(strings,\
    \ key = length) \nend\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    b\", \"c\", \"d\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\"\
    , \"c\", \"d\", \"e\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    b\", \"c\", \"d\", \"e\", \"f\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"", " \
    \   if length(strings) == 0 \n        return None \n    else \n        return\
    \ max(strings, key=length) \nend\n</cell>\n<code language=julia-1.3>\nlongest([\"\
    a\", \"b\", \"c\", \"d\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"a\"\
    , \"b\", \"c\", \"d\", \"e\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\"])\n</cell>\n<code language=julia-1.3>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"])\n</cell>\n<code language=julia-1.3>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n<code\
    \ language=julia-1.3>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"])\n</cell>\n<code language=julia-1.3>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"])\n</cell>\n<code\
    \ language=julia-1.3>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"])\n</cell>\n<code language=julia-1.3>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\"])\n</cell>\n<code language=julia-1.3>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"])\n</cell>\n<code language=julia-1.3>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"", " \
    \   if length(strings) == 0\n        return Nothing\n    else\n        return\
    \ max(strings, key=length) \n    end\nend", "    longest = None \n    for s in\
    \ strings \n        if longest == None \n            longest = s \n        else\
    \ if length(longest) < length(s) \n            longest = s \n        end\n   \
    \ end\n    return longest\nend", "    longest = None \n    for s in strings \n\
    \        if longest == None \n            longest = s \n        else \n      \
    \      if length(longest) < length(s) \n                longest = s \n       \
    \     end\n        end\n    end\n    return longest\nend\n</cell>\n<code language=julia-1.4>\n\
    longest([\"Hello\", \"World\", \"Hello\"])\n</cell>\n<code language=julia-1.4>\n\
    longest([\"Hello\", \"World\", \"Hello\", \"World\"])\n</cell>\n<code language=julia-1.4>\n\
    longest([\"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"])\n</cell>\n<code\
    \ language=julia-1.4>\nlongest([\"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"Hello\",\
    \ \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"])\n</cell>\n\
    <code language=julia-1.4>\nlongest([\"Hello\", \"World\", \"Hello\", \"World\"\
    , \"Hello\", \"World\", \"Hello\", \"World\"])\n</cell>\n<code language=julia-1.4>\n\
    longest([\"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\", \"World\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\", \"World\", \"Hello\"])\n</cell>\n<code language=julia-1.4>\n\
    longest([\"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"])\n\
    </cell>\n<code language=julia-1.4>\nlongest([\"Hello\", \"World\", \"Hello\",\
    \ \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\"\
    , \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"])\n</cell>\n<code language=julia-1.4>\n\
    longest([\"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello", "    if length(strings) == 0 \n        return None\
    \ \n    else \n        return max(strings, key=length) \nend", "    longest =\
    \ None \n    for s in strings \n        if longest == None or length(longest)\
    \ > length(s) \n            longest = s \n        end\n    end\n    return longest\n\
    end\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\",\
    \ \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"\
    , \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"\
    e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"\
    , \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\"\
    , \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\"\
    , \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"\
    , \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"\
    e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v", "    if length(strings) == 0\n        return nothing\n    else\n     \
    \   longest_str = strings[length(strings)-1]\n        for str in strings\n   \
    \         if str == longest_str\n                return str\n            else\n\
    \                longest_str = str\n        end\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"Hello\", \"World\", \"Hello\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"Hello\", \"World\", \"Hello\", \"World\"])\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"Hello\", \"World\", \"Hello\",\
    \ \"World\", \"Hello\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"Hello\"\
    , \"World\", \"Hello\", \"World\", \"Hello\", \"World\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"Hello\", \"World\",\
    \ \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"Hello\", \"World\", \"Hello\", \"World\"\
    , \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"])\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"Hello\", \"World\", \"Hello\",\
    \ \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\"\
    , \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World", "  \
    \  if length(strings) == 0\n        return nothing\n    end\n    max_length =\
    \ maximum([length(s) for s in strings])\n    longest_string = nothing\n    for\
    \ s in strings\n        if length(s) == max_length\n            longest_string\
    \ = s\n            break\n        end\n    end\n    if longest_string == nothing\n\
    \        return nothing\n    end\n    return longest_string\nend", "    longest\
    \ = None \n    for s in strings \n        if longest == None or length(longest)\
    \ > length(s) \n            longest = s \n        end\n    end\n    return longest\n\
    end\n</code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string |>\nThe shortest\
    \ answer I have found is to use join:\n<code>\njulia> join([\"a\", \"b\", \"c\"\
    ])\n\"abc\"\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThis should be the accepted\
    \ answer. `join` is designed for this.\n<|/ c |>\n<| c |>\nThis should be the\
    \ accepted answer. `join` is designed for this.\n<|/ c |>\n<| a tags=julia,string\
    \ |>\nI find that using join is very slow for large vectors. Here is a faster\
    \ solution:\n<code>", "    longest = None \n    for s in strings \n        if\
    \ longest == None or length(longest) > length(s) \n            longest = s \n\
    \        end\n    end\n    return longest\nend\n</code>\n<|/ a dscore=2 |>\n<|\
    \ c |>\nI like the idea of using length to find the longest string. Thanks!\n\
    <|/ c |>\n<| a dscore=2 |>\nI like using mapslices to get the longest string in\
    \ each row of a matrix:\n<code>\nlongest = mapslices(length, 1:size(mat,1), dims\
    \ = 1)\n</code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string |>\n<code>",
  "    if length(strings) == 0 \n        return None \n    else \n        return max(strings,\
    \ key = length) \nend\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    b\", \"c\", \"d\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\"\
    , \"c\", \"d\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"\
    c\", \"d\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\"\
    , \"d\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"\
    d\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\"])\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\"\
    , \"b\", \"c\", \"d\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    b\", \"c\", \"d\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\"\
    , \"c\", \"d\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"\
    c\", \"d\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\"\
    , \"d\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"\
    d\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\"])\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\"\
    , \"b\", \"c\", \"d\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    b\", \"c\", \"d\"])\n</cell>\n<code language=", "    longest = None \n    for\
    \ s in strings \n        if longest == None or length(longest) > length(s) \n\
    \            longest = s \n        end\n    end\n    return longest\nend", " \
    \   longest = None \n    for s in strings \n        if longest == None \n    \
    \        longest = s \n        else if length(longest) > length(s) \n        \
    \    longest = s \n        end\n    end\n    return longest\nend", "    if length(strings)\
    \ == 0 \n        return None \n    else \n        longest = length(strings) \n\
    \        for s in strings \n            if length(s) > longest \n            \
    \    longest = length(s) \n            end \n        end \n        return strings[longest]\
    \ \n    end \nend ", "    if length(strings) == 0\n        return nothing\n  \
    \  end\n    longest_len = length(strings[1])\n    for s in strings\n        if\
    \ length(s) > longest_len\n            longest_len = length(s)\n        end\n\
    \    end\n    return longest_len == 1 ? strings[1] : nothing\nend", "    if length(strings)\
    \ == 0 \n        return None \n    else \n        return max(strings, key=length)\
    \ \nend ", "    if length(strings) == 0 \n        return None \n    else \n  \
    \      return max(strings, key=length) \nend\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"", " \
    \   if length(strings) == 0\n        return nothing\n    elseif length(strings)\
    \ == 1\n        return strings[1]\n    else\n        longest = strings[1]\n  \
    \      for s in strings[2:end]\n            if length(longest) > length(s) \n\
    \                longest = s\n            end\n        end\n        return longest\n\
    \    end\nend", "    if length(strings) == 0 \n        return None \n    else\
    \ \n        return max(strings, key=length) \nend\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"", " \
    \   if length(strings) == 0 \n        return None \n    else \n        return\
    \ max(strings, key=length) \nend", "    if length(strings) == 0\n        error(\"\
    Input list is empty\")\n    end\n    max_length = length(strings)\n    longest_string\
    \ = strings[1]\n    for string in strings\n        if length(longest_string) >\
    \ length(string)\n            max_length = length(longest_string)\n          \
    \  longest_string = string\n        end\n    end\n    return longest_string\n\
    end", "    longest = None \n    for s in strings \n        if longest == None\
    \ or length(longest) > length(s) \n            longest = s \n        end\n   \
    \ end\n    return longest\nend\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    hello\", \"world\", \"goodbye\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    hello\", \"world\", \"goodbye\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"hello\", \"world\", \"goodbye\", \"hi\", \"hola\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"hello\", \"world\", \"goodbye\", \"hi\", \"\
    hola\", \"hola\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"hello\", \"\
    world\", \"goodbye\", \"hi\", \"hola\", \"hola\", \"hola\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"hello\", \"world\", \"goodbye\", \"hi\", \"hola\", \"hola\", \"hola\"\
    , \"hola\", \"hola\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"hello\"\
    , \"world\", \"goodbye\", \"hi\", \"hola\", \"hola\", \"hola\", \"hola\", \"hola\"\
    , \"hola\", \"hola\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"hello\"\
    , \"world\", \"goodbye\", \"hi\", \"hola\", \"hola\", \"hola\", \"hola\", \"hola\"\
    , \"hola\", \"hola\", \"hola\", \"hola\", \"hola\", \"hola\", \"hola\", \"hola\"\
    , \"hola\", \"hola\", \"hola\", \"hola\", \"hola\", \"hola\", \"hola\", \"hola\"\
    , \"hola\", \"hola\", \"hola\", \"hola\", \"hola\", \"hola\", \"hola\", \"hola\"\
    , \"hola\", \"hola\", \"hola\", \"hola\", \"hola\", \"hola\", \"hola\", \"hola\"\
    , \"hola\", \"hola\", \"hola\", \"hola\", \"hola\", \"hola\", \"hola\", \"hola\"\
    , \"hola\", \"hola\", \"hola\", \"hola\", \"hola\", \"hola\", \"hola\", \"hola\"\
    , \"hola\", \"hola\", \"hola\", \"hola\", \"hola\", \"hola\", \"hola\", \"hola\"\
    , \"hola\", \"hola\", \"hola\", \"hola\", \"hola\", \"hola\", \"hola\", \"hola\"\
    , \"hola\", \"hola\", \"hola\", \"hola\", \"hola\", \"hola\", \"hola\", \"hola\"\
    , \"hola\", \"hola\", \"hola\", \"hola\", \"", "    if length(strings) == 0\n\
    \        return Nothing\n    end\n    max_length = length(strings[1])\n    for\
    \ string in strings\n        if length(string) > max_length\n            max_length\
    \ = length(string)\n        end\n    end\n    return strings[max_length]\nend",
  "    if length(strings) == 0 \n        return None \n    else \n        return max(strings,\
    \ key = length) \nend\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    b\", \"c\", \"d\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\"\
    , \"c\", \"d\", \"e\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    b\", \"c\", \"d\", \"e\", \"f\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"", " \
    \   if length(strings) == 0 \n        return None \n    else \n        return\
    \ max(strings, key=length) \nend\n</cell>\n<code language=julia-1.4>\nlongest([\"\
    a\", \"b\", \"c\", \"d\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"a\"\
    , \"b\", \"c\", \"d\", \"e\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\"])\n</cell>\n<code language=julia-1.4>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"])\n</cell>\n<code language=julia-1.4>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n<code\
    \ language=julia-1.4>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"])\n</cell>\n<code language=julia-1.4>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"])\n</cell>\n<code\
    \ language=julia-1.4>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"])\n</cell>\n<code language=julia-1.4>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\"])\n</cell>\n<code language=julia-1.4>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"])\n</cell>\n<code language=julia-1.4>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"", " \
    \   longest = None \n    for s in strings \n        if longest == None \n    \
    \        longest = s \n        else \n            if length(longest) > length(s)\
    \ \n                longest = s \n            end \n        end \n    end \n \
    \   return longest \nend ", "    if length(strings) == 0\n        return nothing\n\
    \    end\n    longest_len = length(strings[1])\n    for string in strings\n  \
    \      if length(string) > longest_len\n            longest_len = length(string)\n\
    \        end\n    end\n    return strings[longest_len]\nend\n</cell>\n<code language=julia-1.5>\n\
    longest([\"Hello\", \"World\", \"Hello\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"Hello\", \"World\", \"Hello\", \"World\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"Hello\",\
    \ \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"Hello\", \"World\", \"Hello\", \"World\"\
    , \"Hello\", \"World\", \"Hello\", \"World\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\", \"World\", \"Hello\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"\
    Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"\
    World\", \"Hello\", \"World\", \"Hello\", \"World\", \"Hello\", \"World\", \"",
  "    if length(strings) == 0 \n        return None \n    else \n        return max(strings,\
    \ key = length) \nend\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    b\", \"c\", \"d\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\"\
    , \"c\", \"d\", \"e\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    b\", \"c\", \"d\", \"e\", \"f\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"", " \
    \   if length(strings) == 0 \n        return None \n    else \n        return\
    \ max(strings, key=length) \nend\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\"\
    , \"b\", \"c\", \"d\", \"e\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"", " \
    \   if length(strings) == 0\n        error(\"Input list is empty\")\n    end\n\
    \    max_length = length(strings)\n    longest = strings[1]\n    for i in 2:length(strings)\n\
    \        if length(strings[i]) > max_length\n            max_length = length(strings[i])\n\
    \            longest = strings[i]\n        end\n    end\n    return longest\n\
    end", "    if length(strings) == 0\n        return Nothing\n    else \n      \
    \  return strings[length(strings)-1]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \""]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
