name: HumanEval_47_median
language: jl
prompt: "\"\"\"Return median of elements in the list l.\n            \"\"\"\nfunction\
  \ median(l::Vector{Int64})::Float64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
  \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
  \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2,\
  \ 7]) == 7)\nend\n"
completions: ["    return sort(l)[end-1]\nend", "    median = sort(l)[end-1]\nend",
  "    median = sort(l)[end-1]\n    return median\nend\n</cell>\n<code language=julia-1.5>\n\
    median([1,2,3,4,5,6,7,8,9])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of elements in the list l that are less than the median of\
    \ the list.", "    sort(l)\n    length(l) == 0 ? Inf : l[floor(length(l)/2)]\n\
    end", "    median = sort(l)[end]\n    return median\nend", "    median = sort(l)[end-1]\n\
    \    return median\nend\n</cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8,9])\n\
    </cell>\n<text>\nExercise: Write a function that returns the median of a list\
    \ of numbers. \nThe function should take a list of numbers and return the median\
    \ of the numbers. \nThe median is the number in the middle of the sorted list.",
  "    median = sort(l)[end-1]\n    return median\nend\n</cell>\n<code language=julia-1.5>\n\
    median([1,2,3,4,5])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the mean of elements in the list l.", "    median = sort(l)[end-1]\n    return\
    \ median\nend", "    median = sort(l)[end]\n    return median\nend", "    sort(l)\n\
    \    return l[floor(Int64(l)/2)]\nend", "    return sort(l)[end-1]\nend", "  \
    \  median = sort(l)[end]\n    return median\nend\n</cell>\n<code language=julia-1.5>\n\
    median([1,2,3,4,5])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the mean of a list of numbers.", "    sort(l)\n    length(l) == 0 ? Inf : l[floor(length(l)/2)]\n\
    end", "    median = sort(l)[end-1]\n    return median\nend\n</cell>\n<code language=julia-1.5>\n\
    median([1,2,3,4,5])\n</cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5,6])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the median of a list\
    \ of numbers. \nThe function should take a list of numbers as an argument, and\
    \ return the median of the list.\nThe median is the number in the middle of the\
    \ list that has the highest value when sorted.", "    sort(l)\n    length(l) ==\
    \ 0 ? 0.0 : (l[floor(length(l)/2)] + l[floor(length(l)/2)+1])/2.0\nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([1,2,3,4,5])\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the median of a list of numbers, rounded to two\
    \ decimal places.", "    median = sort(l)[end]\n    return median\nend\n</cell>\n\
    <code language=julia-1.4>\nmedian([1,2,3,4,5])\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the mode of a given list of numbers. \nHint: use\
    \ mode function", "    \n    median = sort(l)[end-1]\n    \n    return median\n\
    end", "    median = sort(l)[end-1]\nend\n</cell>\n<code language=julia-1.3>\n\
    median([1,2,3,4,5])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the mean of a list of numbers.", "    \n    median = sort(l)[end/2+1]\n    \n\
    \    return median\nend", "    return sort(l)[end-1]\nend", "    sort(l)\n   \
    \ length(l) == 0 ? Inf : l[floor(length(l)/2)]\nend\n</cell>\n<code language=julia-1.5>\n\
    median([1,2,3,4,5])\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the mean of a list of numbers.", "    median = sort(l)[end-1]\n    return median\n\
    end", "    sort(l)\n    middle = length(l)//2\n    median = l[middle]\nend", " \
    \   sort(l)\n    middle = length(l)//2\n    if length(l)%2 == 1\n        return\
    \ l[middle]\n    else\n        return (l[middle-1] + l[middle])/2\n    end\nend",
  "    median = sort(l)[end-1]\nend", "    median = sort(l)[end-1]\n    return median\n\
    end", "    median = sort(l)[end]\n    return median\nend", "    median = sort(l)[end-1]\n\
    \    return median\nend\n</cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the median of a list\
    \ of numbers. \nThe function should take a list of numbers as an argument. \n\
    The function should return the median of the numbers in the list.", "    median\
    \ = sort(l)[end-1]\n    return median\nend\n</cell>\n<code language=julia-1.5>\n\
    median([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the mean of a list of numbers.", "    median = sort(l)[end]\n \
    \   return median\nend\n</cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the mean of a list\
    \ of numbers.", "    sort(l)\n    length(l) == 0 ? Float64(0.) : median(l[floor(Int,\
    \ length(l)/2)])\nend", "    sort(l)\n    length(l) == 0 ? Float64(0.) : median(l[floor(Int,\
    \ length(l)/2)])\nend", "    median = sort(l)[end-1]\n    return median\nend",
  "    return sort(l)[end-1]\nend", "    \n    median = sort(l)[end-1]\n    \n   \
    \ return median\nend", "    median = sort(l)[end]\n    return median\nend", " \
    \   median = sort(l)[end]\n    return median\nend", "    median = sort(l)[end-1]\n\
    \    return median\nend", "    median = sort(l)[end-1]\nend\n</cell>\n<code language=julia-1.4>\n\
    median([1,2,3,4,5])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the mean of a list of numbers.", "    median = sort(l)[end-1]\nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([1,2,3,4,5])\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the mean of a list of numbers.", "    median = sort(l)[end-1]\n\
    end", "    median = sort(l)[end-1]\nend\n</cell>\n<code language=julia-1.5>\n\
    median([1,2,3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ mean of a list of numbers.", "    \n    median = sort(l)[end-1]\n    \n    return\
    \ median\nend\n</cell>\n<code language=julia-1.3>\nmedian([1,2,3,4,5,6])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the mean of a list of numbers.",
  "    median = sort(l)[end-1]\nend\n</cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the mean of the elements\
    \ in the list l.", "    median = sort(l)[end-1]\n    return median\nend", "  \
    \  return sort(l)[end-1]\nend", "    median = sort(l)[end]\n    return median\n\
    end", "    sort(l)\n    length(l) == 0 ? Float64(0.) : median(l[floor(Int, length(l)/2)])\n\
    end", "    \n    median = sort(l)[end-1]\n    \n    return median\nend", "   \
    \ median = sort(l)[end-1]\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Return\
    \ median of elements in the list l.\n            \"\"\"", "    l = sort(l)\n \
    \   mid = floor(Int, length(l)+1)/2\n    if length(l)%2 == 1\n        return l[mid]\n\
    \    else\n        return (l[mid-1] + l[mid])/2\n    end\nend", "    median =\
    \ sort(l)[end]\n    return median\nend", "    median = sort(l)[end-1]\nend", " \
    \   median = sort(l)[end]\n    return median\nend", "    sort(l)\n    mid = floor(length(l)/2)\n\
    \    if length(l)%2==0\n        return l[mid]\n    else\n        return (l[mid-1]\
    \ + l[mid])/2\n    end\nend", "    return median(l)\nend", "    \n    median =\
    \ sort(l)[end/2+1]\n    \n    return median\nend", "    return sort(l)[end-1]\n\
    end", "    l = sort(l)\n    length = length(l) \n    if length < 2 \n        return\
    \ l[1] \n    else \n        return (l[length/2] + l[length/2-1])/2 \nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([1,3,5,7,9])\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the median of a list of numbers. \nThe function\
    \ should take a list of numbers as an argument. \nThe function should return the\
    \ median of the numbers in the list. \nThe median is the number in the middle\
    \ of the list that has the smallest value \n(middle element). \nIf the length\
    \ of the list is odd, the median is the average of the two middle elements. \n\
    If the length of the list is even, the median is the average of the two middle\
    \ elements. \nIf the length of the list is even, the median is the average of\
    \ the two middle elements. \nIf the length of the list is odd, the median is the\
    \ average of the two middle elements. \nIf the length of the list is even, the\
    \ median is the average of the two middle elements. \nIf the length of the list\
    \ is even, the median is the average of the two middle elements. \nIf the length\
    \ of the list is odd, the median is the average of the two middle elements. \n\
    If the length of the list is even, the median is the average of the two middle\
    \ elements. \nIf the length of the list is even, the median is the average of\
    \ the two middle elements. \nIf the length of the list is odd, the median is the\
    \ average of the two middle elements. \nIf the length of the list is even, the\
    \ median is the average of the two middle elements. \nIf the length of the list\
    \ is even, the median is the average of the two middle elements. \nIf the length\
    \ of the list is odd, the median is the average of the two middle elements. \n\
    If the length of the list is even, the median is the average of the two middle\
    \ elements. \nIf the length of the list is even, the median is the average of\
    \ the two middle elements. \nIf the length of the list is odd, the median is the\
    \ average of the two middle elements. \nIf the length of the list is even, the\
    \ median is the average of the two middle elements. \nIf the length of the list\
    \ is even, the median is the average of the two middle elements. \nIf the length\
    \ of the list is odd, the median is the average of the two middle elements. \n\
    If the length of the list is even, the median is the average of the two middle\
    \ elements. \nIf the length of the list is even, the median is the average of\
    \ the two middle elements. \nIf the length of the list is odd, the median is the\
    \ average of the two middle elements. \nIf the length of the list is even, the\
    \ median is the average of the two middle elements. \nIf the length of the list\
    \ is even, the median is the average of the two middle elements. \nIf the length\
    \ of the list is odd, the median is the average of the two middle elements. \n\
    If the length of the list is even, the median is the average of the two middle\
    \ elements. \nIf the length of the list is even, the median is the average of\
    \ the two middle elements. \nIf the length of the list is odd, the median is the\
    \ average of the two middle elements. \nIf the ", "    median = sort(l)[end]\n\
    \    return median\nend\n</cell>\n<code language=julia-1.3>\nmedian([1,2,3,4,5])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the mode of a given\
    \ list of numbers. \nThe mode is the number that appears most frequently in the\
    \ list.", "    median = sort(l)[end]\n    return median\nend", "    median = sort(l)[end-1]\n\
    \    return median\nend\n</cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the mean of a list\
    \ of numbers.", "    sort(l)\n    length(l) == 0 ? Float64(\"NaN\") : median(l[floor(length(l)/2)])\n\
    end\n</cell>\n<code language=julia-1.5>\nmedian([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    median([1,2,3])\n</cell>\n<code language=julia-1.5>\nmedian([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmedian([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    median([1,2,3])\n</cell>\n<code language=julia-1.5>\nmedian([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmedian([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    median([1,2,3])\n</cell>\n<code language=julia-1.5>\nmedian([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmedian([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    median([1,2,3])\n</cell>\n<code language=julia-1.5>\nmedian([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmedian([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    median([1,2,3])\n</cell>\n<code language=julia-1.5>\nmedian([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmedian([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    median([1,2,3])\n</cell>\n<code language=julia-1.5>\nmedian([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmedian([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    median([1,2,3])\n</cell>\n<code language=julia-1.5>\nmedian([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmedian([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    median([1,2,3])\n</cell>\n<code language=julia-1.5>\nmedian([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmedian([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    median([1,2,3])\n</cell>\n<code language=julia-1.5>\nmedian([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmedian([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    median([1,2,3])\n</cell>\n<code language=julia-1.5>\nmedian([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nmedian([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    median([1,2,3])\n</cell>\n<code language=", "    sort(l)\n    length(l) == 0 ?\
    \ Inf : l[floor(length(l)/2)]\nend\n</cell>\n<code language=julia-1.4>\nmedian([1,2,3,4,5])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the median of a list\
    \ of numbers. \nThe function should take a list of numbers and return the median\
    \ of the numbers. \nThe median is the number in the middle of the list that has\
    \ the smallest absolute value. The median is also called the \"typical\" number\
    \ of the list. \nThe median is defined as the value separating the higher half\
    \ of a data set from the lower half. \nThe median is often used to find the value\
    \ that separates the higher half of a data set from the lower half. \nThe median\
    \ is often used to find the value that separates the higher half of a data set\
    \ from the lower half. \nThe median is often used to find the value that separates\
    \ the higher half of a data set from the lower half. \nThe median is often used\
    \ to find the value that separates the higher half of a data set from the lower\
    \ half. \nThe median is often used to find the value that separates the higher\
    \ half of a data set from the lower half. \nThe median is often used to find the\
    \ value that separates the higher half of a data set from the lower half. \nThe\
    \ median is often used to find the value that separates the higher half of a data\
    \ set from the lower half. \nThe median is often used to find the value that separates\
    \ the higher half of a data set from the lower half. \nThe median is often used\
    \ to find the value that separates the higher half of a data set from the lower\
    \ half. \nThe median is often used to find the value that separates the higher\
    \ half of a data set from the lower half. \nThe median is often used to find the\
    \ value that separates the higher half of a data set from the lower half. \nThe\
    \ median is often used to find the value that separates the higher half of a data\
    \ set from the lower half. \nThe median is often used to find the value that separates\
    \ the higher half of a data set from the lower half. \nThe median is often used\
    \ to find the value that separates the higher half of a data set from the lower\
    \ half. \nThe median is often used to find the value that separates the higher\
    \ half of a data set from the lower half. \nThe median is often used to find the\
    \ value that separates the higher half of a data set from the lower half. \nThe\
    \ median is often used to find the value that separates the higher half of a data\
    \ set from the lower half. \nThe median is often used to find the value that separates\
    \ the higher half of a data set from the lower half. \nThe median is often used\
    \ to find the value that separates the higher half of a data set from the lower\
    \ half. \nThe median is often used to find the value that separates the higher\
    \ half of a data set ", "    median = sort(l)[end]\n    return median\nend", " \
    \   median = sort(l)[end]\n    return median\nend\n</cell>\n<code language=julia-1.0>\n\
    median([1,2,3,4,5,6,7,8,9])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the mean of the elements in the list l.", "    median = sort(l)[end]\n\
    end", "    sort(l)\n    length(l) == 0 ? 0.0 : (l[floor(length(l)/2)] + l[floor(length(l)/2)-1])/2\n\
    end", "    \n    median = sort(l)[floor(length(l)+1)/2]\n    \n    return median\n\
    end", "    sort(l)\n    length(l) == 0 ? Inf : l[floor(Int64, length(l)/2)]\n\
    end\n</cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5])\n</cell>\n<code language=julia-1.5>\n\
    median([1,2,3,4,5,6])\n</cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5,6,7])\n\
    </cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8])\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\n\
    median([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8,9,10,11])\n\
    </cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8,9,10,11,12])\n</cell>\n\
    <code language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8,9,10,11,12,13])\n</cell>\n\
    <code language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\n</cell>\n\
    <code language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n</cell>\n\
    <code language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    </cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    </cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23",
  "    median = sort(l)[end]\n    return median\nend", "    median = sort(l)[end]\n\
    end", "    median = sort(l)[end-1]\nend", "    sort(l)\n    length(l) == 0 ? NaN\
    \ : l[floor(length(l)/2)]\nend\n</cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector v and returns\
    \ the product of the absolute values of the elements in the vector.", "    median\
    \ = sort(l)[end-1]\nend", "    \n    median = sort(l)[end/2+1]\n    \n    return\
    \ median\nend", "    sort(l)\n    length(l) == 0 ? 0.0 : (l[floor(length(l)/2)]\
    \ + l[ceil(length(l)/2)])/2\nend\n</cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise\nWrite a function that returns the median of a list\
    \ of numbers. \nWrite a function that returns the median of a list of numbers.\
    \ \nWrite a function that returns the median of a list of numbers. \nWrite a function\
    \ that returns the median of a list of numbers. \nWrite a function that returns\
    \ the median of a list of numbers. \nWrite a function that returns the median\
    \ of a list of numbers. \nWrite a function that returns the median of a list of\
    \ numbers. \nWrite a function that returns the median of a list of numbers. \n\
    Write a function that returns the median of a list of numbers. \nWrite a function\
    \ that returns the median of a list of numbers. \nWrite a function that returns\
    \ the median of a list of numbers. \nWrite a function that returns the median\
    \ of a list of numbers. \nWrite a function that returns the median of a list of\
    \ numbers. \nWrite a function that returns the median of a list of numbers. \n\
    Write a function that returns the median of a list of numbers. \nWrite a function\
    \ that returns the median of a list of numbers. \nWrite a function that returns\
    \ the median of a list of numbers. \nWrite a function that returns the median\
    \ of a list of numbers. \nWrite a function that returns the median of a list of\
    \ numbers. \nWrite a function that returns the median of a list of numbers. \n\
    Write a function that returns the median of a list of numbers. \nWrite a function\
    \ that returns the median of a list of numbers. \nWrite a function that returns\
    \ the median of a list of numbers. \nWrite a function that returns the median\
    \ of a list of numbers. \nWrite a function that returns the median of a list of\
    \ numbers. \nWrite a function that returns the median of a list of numbers. \n\
    Write a function that returns the median of a list of numbers. \nWrite a function\
    \ that returns the median of a list of numbers. \nWrite a function that returns\
    \ the median of a list of numbers. \nWrite a function that returns the median\
    \ of a list of numbers. \nWrite a function that returns the median of a list of\
    \ numbers. \nWrite a function that returns the median of a list of numbers. \n\
    Write a function that returns the median of a list of numbers. \nWrite a function\
    \ that returns the median of a list of numbers. \nWrite a function that returns\
    \ the median of a list of numbers. \nWrite a function that returns the median\
    \ of a list of numbers. \nWrite a function that returns the median of a list of\
    \ numbers. \nWrite a function that returns the median of a list of numbers. \n\
    Write a function that returns the median of a list of numbers. \nWrite a function\
    \ that returns the median of a list of numbers. \nWrite a function that returns\
    \ the median of a list of numbers. \nWrite a function that returns the median\
    \ of a list of numbers. \nWrite a function that returns the median of a list of\
    \ numbers. \nWrite a function that returns the median of a list of numbers. \n\
    Write a function that returns the median of a list of numbers. \nWrite ", "  \
    \  \n    median = sort(l)[end]\n    \n    return median\nend", "    sort(l)\n\
    \    length(l) == 0 ? NaN : l[floor(length(l)/2)]\nend", "    median = sort(l)[end]\n\
    \    return median\nend", "    sort(l)\n    length(l)==1 ? l[0] : (l[floor(Int64,\
    \ length(l)/2)] + l[ceil(Int64, length(l)/2)])/2\nend\n</cell>\n<code language=julia-1.5>\n\
    median([1,2,3,4,5])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the mean of a list of numbers.", "    return sort(l)[end-1]\nend", "    sort(l)\n\
    \    length(l) == 0 ? Inf : l[floor(length(l)/2)]\nend\n</cell>\n<code language=julia-1.5>\n\
    median([1,2,3,4,5])\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the mean of the elements in the list l.", "    \n    median = sort(l)[end-1]\n\
    \    \n    return median\nend\n</cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5])\n\
    </cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8,9])\n</cell>\n<text>\n\
    Exercise: Write a function that returns the mean of a list of numbers. Use a for\
    \ loop to iterate over the list and calculate the mean.", "    sort(l)\n    middle\
    \ = length(l)//2\n    if length(l)%2 == 0\n        return l[middle]\n    else\n\
    \        return (l[middle-1] + l[middle])/2\n    end\nend", "    sort(l)\n   \
    \ length(l) == 0 ? Float64(0.) : median(l[end-1]) + median(l[end])/2\nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    median([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nmedian([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nmedian([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    median([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nmedian([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nmedian([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    median([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nmedian([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nmedian([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    median([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nmedian([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nmedian([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    median([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nmedian([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nmedian([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    median([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nmedian([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nmedian([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    median([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nmedian([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nmedian([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    median([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nmedian([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nmedian([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>",
  "    median = sort(l)[end-1]\n    return median\nend", "    median = sort(l)[end]\n\
    end", "    median = sort(l)[end-1]\nend", "    median = sort(l)[end-1]\nend",
  "    median = sort(l)[end-1]\nend", "    median = sort(l)[end]\n    return median\n\
    end", "    median = sort(l)[end-1]\n    return median\nend", "    median = sort(l)[end-1]\n\
    \    return median\nend\n</cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector v and returns\
    \ the product of the elements of v. For example, the product of [1,2,3] is $1\
    \ \\times 2 \\times 3$. Write a function that takes two vectors and returns the\
    \ product of the elements in the first vector. For example, the product of [1,2,3]\
    \ and [4,5,6] are $1 \\times 4 \\times 5 \\times 6$.", "    median = sort(l)[end]\n\
    \    return median\nend", "    sort(l)\n    length(l) == 0 ? Inf : l[floor(Int64,\
    \ length(l)/2)]\nend", "    \n    median = sort(l)[end-1]\n    \n    return median\n\
    end", "    median = sort(l)[end-1]\n    return median\nend", "    median = sort(l)[end-1]\n\
    end", "    median = sort(l)[end]\n    return median\nend\n</cell>\n<code language=julia-1.3>\n\
    median([1,2,3,4,5])\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the mean of a list of numbers.", "    l = sort(l)\n    middle = length(l)//2\n\
    \    if length(l)%2 == 1\n        return l[middle]\n    else\n        return (l[middle-1]\
    \ + l[middle])/2\n    end\nend", "    median = sort(l)[end]\n    return median\n\
    end", "    median = sort(l)[end-1]\n    return median\nend\n</cell>\n<code language=julia-1.5>\n\
    median([1,2,3,4,5])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the median of a list of numbers, rounded to two decimal places.", "    sort(l)\n\
    \    length(l) == 0 ? Inf : l[floor(Int64, length(l)/2)]\nend", "    median =\
    \ sort(l)[end]\n    return median\nend", "    median = sort(l)[end-1]\n    return\
    \ median\nend", "    sort(l)\n    length(l) == 0 ? Inf : l[floor(length(l)/2)]\n\
    end\n</cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8,9])\n</cell>\n\
    <code language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\n\
    median([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8,9])\n\
    </cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8,9])\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\n\
    median([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8,9])\n\
    </cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8,9])\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\n\
    median([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8,9])\n\
    </cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8,9])\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\n\
    median([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8,9])\n\
    </cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8,9])\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\n\
    median([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8,9])\n\
    </cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8,9])\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\n\
    median([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-", "    median = sort(l)[end]\n\
    \    return median\nend", "    \n    median = sort(l)[end-1]\n    \n    return\
    \ median\nend", "    median = sort(l)[end-1]\n    return median\nend", "    median\
    \ = sort(l)[end-1]\nend", "    \n    median = sort(l)[end]\n    \n    return median\n\
    end", "    median = sort(l)[end]\n    return median\nend\n</cell>\n<code language=julia-1.5>",
  "    median = sort(l)[end]\n    return median\nend\n</cell>\n<code language=julia-1.0>\n\
    median([1,2,3,4,5])\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the mean of a list of numbers.", "    sort(l)\n    middle = length(l)//2\n \
    \   if middle == 0\n        return NaN\n    else\n        return l[middle]\n \
    \   end\nend\n</cell>\n<code language=julia-1.3>\nmedian([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector.", "    sort(l)\n\
    \    length(l) == 0 ? NaN : l[floor(length(l)/2)]\nend", "    median = sort(l)[end]\n\
    \    return median\nend", "    sort(l)\n    length(l) == 0 ? Float64(0.) : l[floor(Int64,\
    \ length(l)/2)]\nend", "    l = sort(l)\n    mid = floor(Int, length(l)/2)\n \
    \   if length(l) % 2 == 0\n        return l[mid]\n    else\n        return (l[mid]\
    \ + l[mid-1]) / 2\n    end\nend\n</cell>\n<code language=julia-1.4>\nmedian([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the mean of a list\
    \ of numbers.", "    l = sort(l)\n    mid = floor(Int, length(l)/2)\n    if length(l)\
    \ % 2 == 0\n        return l[mid]\n    else\n        return (l[mid] + l[mid-1])/2\n\
    \    end\nend", "    return sort(l)[end-1]\nend", "    median = sort(l)[end-1]\n\
    \    return median\nend\n</cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the mean of elements\
    \ in the list l.\nWrite a function that returns the median of elements in the\
    \ list l.\nWrite a function that returns the mode of elements in the list l.",
  "    median = sort(l)[end-1]\nend", "    \n    median = sort(l)[end-1]\n    \n \
    \   return median\nend", "    median = sort(l)[end]\n    return median\nend",
  "    median = sort(l)[end-1]\n    return median\nend\n</cell>\n<code language=julia-1.5>\n\
    median([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns the sum of the squares of the integers\
    \ in the vector. For example, sum([1,2,3]) should return 9. Do not use sum.",
  "    median = sort(l)[end]\n    return median\nend", "    sort(l)\n    length =\
    \ length(l) \n    if length == 0 \n        return 0 \n    else \n        return\
    \ (length-1)/2 \nend\n</cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the mean of the elements\
    \ in the list l.", "    return sort(l)[end-1]\nend", "    sort(l)\n    length(l)\
    \ == 0 ? Float64(0.) : l[floor(length(l)/2)]\nend\n</cell>\n<code language=julia-1.3>\n\
    median([1,2,3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ mean of a list of numbers.", "    median = sort(l)[end-1]\n    return median\n\
    end", "    sort(l)\n    length(l) == 0 ? Inf : l[floor(Int, length(l)/2)]\nend",
  "    return sort(l)[end-1]\nend\n</cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5])\n\
    </cell>\n<text>\nExercise 4\nWrite a function that returns the mean of a list\
    \ of numbers.", "    median = sort(l)[end]\n    return median\nend", "    sort(l)\n\
    \    length(l) == 0 ? Float64(0.) : median(l[floor(Int64(length(l)/2)):end])\n\
    end\n</cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5])\n</cell>\n<code language=julia-1.5>\n\
    median([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\nExercise: Write a function that\
    \ returns the median of a list of numbers, rounded to the nearest integer.", " \
    \   median = sort(l)[end]\n    return median\nend", "    sort(l)\n    length(l)\
    \ == 0 ? Float64(0.) : median(l[floor(Int, length(l)/2)])\nend", "    median =\
    \ sort(l)[end]\n    return median\nend", "    \n    median = sort(l)[end]\n  \
    \  \n    return median\nend", "    \n    median = sort(l)[end]\n    \n    return\
    \ median\nend", "    median = sort(l)[end]\n    return median\nend\n</cell>\n\
    <code language=julia-1.4>\nmedian([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the mean of the elements in the list l.", " \
    \   median = sort(l)[end]\n    return median\nend", "    return median(l)\nend",
  "    sort(l)\n    mid = floor(Int, length(l)+1)/2\n    if length(l)%2 == 1\n   \
    \     return l[mid]\n    else\n        return (l[mid-1] + l[mid])/2\n    end\n\
    end", "    sort(l)\n    return l[floor(Int64, length(l)+1)/2]\nend", "    sort(l)\n\
    \    length(l) == 0 ? Float64(0.) : median(l[floor(Int, length(l)/2)])\nend\n\
    </cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the mean of a list of numbers.",
  "    median = sort(l)[end-1]\nend", "    sort(l)\n    length(l) == 0 ? NaN : l[floor(length(l)/2)]\n\
    end\n</cell>\n<code language=julia-1.3>\nmedian([1,2,3,4,5])\n</cell>\n<code language=julia-1.3>\n\
    median([1,2,3,4,5,6])\n</cell>\n<code language=julia-1.3>\nmedian([1,2,3,4,5,6,7])\n\
    </cell>\n<code language=julia-1.3>\nmedian([1,2,3,4,5,6,7,8])\n</cell>\n<code\
    \ language=julia-1.3>\nmedian([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.3>\n\
    median([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.3>\nmedian([1,2,3,4,5,6,7,8,9,10,11])\n\
    </cell>\n<code language=julia-1.3>\nmedian([1,2,3,4,5,6,7,8,9,10,11,12])\n</cell>\n\
    <code language=julia-1.3>\nmedian([1,2,3,4,5,6,7,8,9,10,11,12,13])\n</cell>\n\
    <code language=julia-1.3>\nmedian([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\n</cell>\n\
    <code language=julia-1.3>\nmedian([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n</cell>\n\
    <code language=julia-1.3>\nmedian([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.3>\nmedian([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.3>\nmedian([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<code language=julia-1.3>\nmedian([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    </cell>\n<code language=julia-1.3>\nmedian([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.3>\nmedian([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<code language=julia-1.3>\nmedian([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    </cell>\n<code language=julia-1.3>\nmedian([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n\
    </", "    median = sort(l)[end]\n    return median\nend\n</cell>\n<code language=julia-1.5>\n\
    @time median([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the mean of a list of numbers. \nThe function should take a list\
    \ of numbers as an argument. \nThe function should return the mean of the numbers\
    \ in the list.\nThe function should raise an error if the list is empty.", " \
    \   \n    median = sort(l)[end-1]\n    \n    return median\nend", "    sort(l)\n\
    \    middle = floor(Int, length(l)+1)/2\n    if length(l)%2 == 1\n        return\
    \ l[middle]\n    else\n        return (l[middle-1] + l[middle])/2\n    end\nend",
  "    median = sort(l)[end-1]\n    return median\nend\n</cell>\n<code language=julia-1.5>",
  "    median = sort(l)[end-1]\n    return median\nend", "    return sort(l)[end-1]\n\
    end", "    sort(l)\n    length(l) == 0 ? Float64(0.) : median(l[floor(Int, length(l)/2)])\n\
    end\n</cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the mean of a list of numbers.", " \
    \   sort(l)\n    length(l) == 0 ? NaN : l[floor(length(l)/2)]\nend", "    sort(l)\n\
    \    middle = length(l)//2\n    if length(l)%2 == 1\n        return l[middle]\n\
    \    else\n        return (l[middle-1] + l[middle])/2\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([1,2,3,4,5])\n</cell>\n<code language=julia-1.5>\n\
    median([1,2,3,4,5,6])\n</cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5,6,7])\n\
    </cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8])\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\n\
    median([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8,9,10,11])\n\
    </cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8,9,10,11,12])\n</cell>\n\
    <code language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8,9,10,11,12,13])\n</cell>\n\
    <code language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\n</cell>\n\
    <code language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n</cell>\n\
    <code language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    </cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    </cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,", "    l = sort(l)\n    middle\
    \ = floor(Int, length(l)/2)\n    if length(l) % 2 == 0\n        return l[middle]\n\
    \    else\n        return (l[middle-1] + l[middle])/2\n    end\nend\n</cell>\n\
    <code language=julia-1.4>\nmedian([1,3,5,7,9])\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the mean of a list of numbers.", "    sort(l)\n\
    \    length(l) == 0 ? 0 : (length(l) \xF7 2) == 1 ? l[floor(length(l)/2)] : median(l[floor(length(l)/2):end])\n\
    end\n</cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the median of a list of numbers.\
    \ \nThe function should take a list of numbers and return the median of the numbers.\
    \ \nThe median is the number in the middle of the list that has the smallest absolute\
    \ value.  \nThe median is defined as the value separating the higher half of a\
    \ list from the lower half. \nIf the list is empty, return NaN.", "    median\
    \ = sort(l)[end-1]\nend", "    median = sort(l)[end]\n    return median\nend",
  "    sort(l)\n    length(l) == 0 ? NaN : median(l[floor(length(l)/2)])\nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the mean of the elements in the list l.", " \
    \   median = sort(l)[end]\n    return median\nend", "    median = sort(l)[end]\n\
    \    return median\nend", "    \n    median = sort(l)[end-1]\n    \n    return\
    \ median\nend", "    return sort(l)[end-1]\nend", "    sort(l)\n    length(l)==0\
    \ ? NaN : l[floor(length(l)+1)/2]\nend\n</cell>\n<code language=julia-1.5>\nmedian([1,3,5,7,9])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the mean of a list\
    \ of numbers.", "    median = sort(l)[end-1]\n    return median\nend", "    l\
    \ = sort(l)\n    mid = floor(Int, length(l)/2)\n    if length(l) % 2 == 1\n  \
    \      return l[mid]\n    else\n        return (l[mid] + l[mid-1]) / 2\n    end\n\
    end\n</cell>\n<code language=julia-1.4>\nmedian([1,2,3,4,5])\n</cell>\n<code language=julia-1.4>\n\
    median([1,2,3,4,5,6])\n</cell>\n<code language=julia-1.4>\nmedian([1,2,3,4,5,6,7])\n\
    </cell>\n<code language=julia-1.4>\nmedian([1,2,3,4,5,6,7,8])\n</cell>\n<code\
    \ language=julia-1.4>\nmedian([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.4>\n\
    median([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.4>\nmedian([1,2,3,4,5,6,7,8,9,10,11])\n\
    </cell>\n<code language=julia-1.4>\nmedian([1,2,3,4,5,6,7,8,9,10,11,12])\n</cell>\n\
    <code language=julia-1.4>\nmedian([1,2,3,4,5,6,7,8,9,10,11,12,13])\n</cell>\n\
    <code language=julia-1.4>\nmedian([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\n</cell>\n\
    <code language=julia-1.4>\nmedian([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n</cell>\n\
    <code language=julia-1.4>\nmedian([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.4>\nmedian([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.4>\nmedian([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<code language=julia-1.4>\nmedian([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    </cell>\n<code language=julia-1.4>\nmedian([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.4>\nmedian([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<code language=julia-1.4>\nmedian([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    </cell>\n<code language=julia-1.4>\nmedian", "    median = sort(l)[end-1]\n  \
    \  return median\nend", "    l = sort(l)\n    mid = floor(Int, length(l) / 2)\n\
    \    if length(l) % 2 == 0\n        return l[mid]\n    else\n        return (l[mid]\
    \ + l[mid-1]) / 2\n    end\nend", "    \n    median = sort(l)[end-1]\n    \n \
    \   return median\nend\n</cell>\n<code language=julia-1.4>\nmedian([1,2,3,4,5])\n\
    </cell>\n<code language=julia-1.4>\nmedian([1,2,3,4,5,6])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the median of a list of numbers in descending\
    \ order.", "    sort(l)\n    length(l) == 0 ? Float64(0.) : median(l[floor(Int,\
    \ length(l)/2)])\nend", "    median = sort(l)[end]\n    return median\nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([1,2,3,4,5])\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the mode of a list of numbers. \nThe mode is the\
    \ number that appears most often in the list.\nThe function should return Inf\
    \ if the list contains no numbers.\nThe function should return NaN if the list\
    \ contains more than one number.", "    median = sort(l)[end-1]\n    return median\n\
    end", "    sort(l)\n    length(l) == 0 ? Inf : l[floor(Int64, length(l) / 2)]\n\
    end\n</cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the mode of a given list of numbers.\
    \ \nHint: use the mode function in StatsBase.jl.", "    median = sort(l)[end-1]\n\
    end\n</cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8,9])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the mode of a list of numbers.\
    \ \nThe mode is the number that appears most often in the list.", "    sort(l)\n\
    \    length(l)==1 ? l : l[floor(Int64, length(l)/2)]\nend\n</cell>\n<code language=julia-1.5>\n\
    median([1,2,3,4,5])\n</cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    </cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    </cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    </cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,6",
  "    median = sort(l)[end]\n    return median\nend", "    median = sort(l)[end-1]\n\
    end\n</cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the mean of a list of numbers.\
    \ \nHint: use mean.", "    \n    median = sort(l)[end]\n    \n    return median\n\
    end", "    l = sort(l)\n    length = length(l) \n    if length == 0 \n       \
    \ throw(DomainError(string(\"median of empty list\")))\n    end\n    if length\
    \ == 1 \n        return l[1]\n    end\n    mid = floor(length/2) \n    if length%2\
    \ == 1 \n        return median(l[mid-1:mid+1])\n    end\n    return median(l[mid-1:mid])\n\
    end", "    l = sort(l)\n    middle = length(l)/2\n    if length(l) % 2 == 0\n\
    \        return l[middle]\n    else\n        return (l[middle-1] + l[middle])/2\n\
    \    end\nend", "    median = sort(l)[end-1]\n    return median\nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([1,2,3,4,5])\n</cell>\n<code language=julia-1.5>\n\
    median([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\nExercise\nWrite a function that\
    \ returns the mean of a list of numbers.", "    median = sort(l)[end-1]\nend\n\
    </cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the mean of a list of numbers.", "    sort(l)\n\
    \    return l[floor(Int64, length(l)/2)]\nend\n</cell>\n<code language=julia-1.5>\n\
    median([1,2,3,4,5])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the maximum of elements in the list l.", "    \n    median = sort(l)[end/2+1]\n\
    \    \n    return median\nend", "    l = sort(l)\n    mid = floor(Int, length(l)\
    \ / 2)\n    if length(l) % 2 == 1\n        return l[mid]\n    else\n        return\
    \ (l[mid] + l[mid-1]) / 2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the median of a list of numbers. \nThe function should take a list\
    \ of numbers as an argument. \nThe function should return a single number.", " \
    \   sort(l)\n    return l[floor(Int64, length(l)/2)]\nend", "    median = sort(l)[end]\n\
    \    return median\nend\n</cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the index of the element\
    \ in the list l that is closest to x. \nFor example, if the list is [1,2,3,4,5,6,7,8,9,10]\
    \ and x = 5, the function should return 5.", "    \n    median = sort(l)[end]\n\
    \    \n    return median\nend", "    sort(l)\n    middle = length(l)//2\n    if\
    \ middle==0 \n        return l[1]\n    else \n        return l[middle]\nend",
  "    median = sort(l)[end]\n    return median\nend", "    sort(l)\n    length(l)\
    \ == 0 ? NaN : l[floor(length(l)/2)]\nend\n</cell>\n<code language=julia-1.5>\n\
    median([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8,9,10,NaN])\n\
    </cell>\n<code language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8,9,10,NaN,NaN])\n</cell>\n\
    <code language=julia-1.5>\nmedian([1,2,3,4,5,6,7,8,9,10,NaN,NaN,NaN])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the median of a list of numbers,\
    \ even if there are NaN values.", "    median = sort(l)[end-1]\nend", "    l =\
    \ sort(l)\n    median = l[floor(Int, length(l)/2)]\nend\n</cell>\n<code language=julia-1.5>\n\
    median([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the mean of a list of numbers.", "    \n    median = sort(l)[end/2+1]\n\
    \    \n    return median\nend\n</cell>\n<code language=julia-1.3>\nmedian([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of elements\
    \ in a list that satisfy a certain condition. For example, how many elements in\
    \ the list l satisfy the condition $x^2 + y^2 < 1$?", "    sort(l)\n    return\
    \ l[floor(Int64, length(l)/2)]\nend", "    median = sort(l)[end]\n    return median\n\
    end", "    sort(l)\n    length(l) == 0 ? 0.0 : (l[end-1] + l[end])/2\nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([1,3,5,7,9])\n</cell>\n<text>\nExercise\nWrite\
    \ a function that returns the mean of a list of numbers."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
