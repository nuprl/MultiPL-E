name: HumanEval_123_get_odd_collatz
language: jl
prompt: "\"\"\"\n    Given a positive integer n, return a sorted list that has the\
  \ odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
  \ in mathematics that concerns a sequence defined\n    as follows: start with any\
  \ positive integer n. Then each term is obtained from the \n    previous term as\
  \ follows: if the previous term is even, the next term is one half of \n    the\
  \ previous term. If the previous term is odd, the next term is 3 times the previous\n\
  \    term plus 1. The conjecture is that no matter what value of n, the sequence\
  \ will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2.\
  \ returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5)\
  \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
  \ numbers are only 1, and 5.\n        \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
  \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
  \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
completions: ["    if n == 1 \n        return [1]\n    else \n        collatz = get_odd_collatz(n\
    \ / 2)\n        odd_nums = collatz\n        odd_nums[end] = n % 2 == 0 ? n : 3\
    \ * n + 1 \n        return odd_nums\nend\n</cell>\n<code language=julia-1.5>\n\
    get_odd_collatz(10)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a positive integer n and returns the nth Fibonacci number.", "    if n == 1\
    \ \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n / 2)\n\
    \        odd_collatz .= [n * 3 + (n % 2 == 0)]\n        return odd_collatz\nend",
  "    if n == 1 \n        return [1]\n    else \n        odd_list = []\n        for\
    \ i in get_odd_collatz(n-1) do \n            if i % 2 == 1 \n                odd_list.append(i)\n\
    \            else \n                odd_list.append(i*3 + 1)\n        end\n  \
    \      return odd_list\n    end\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ given positive integer. \nThe factorial of a number $n$ is defined as:", " \
    \   if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz .= [n / 2]\n        if n % 2 == 1 \n            odd_collatz\
    \ .= odd_collatz ++ [n / 2]\n        end\n        return odd_collatz\n    end\n\
    end\n</cell>\n<code language=julia-1.4>\nget_odd_collatz(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the nth Fibonacci number.", "    if\
    \ n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz .= [n * 3 + (n % 2 == 0)]\n        return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(5)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a positive integer n and returns the nth\
    \ Fibonacci number.", "    if n == 1 \n        return [1]\n    else \n       \
    \ odd_list = []\n        for n in get_odd_collatz(n-1) do \n            if n %\
    \ 2 == 1 \n                odd_list.append(n/2)\n            else\n          \
    \      odd_list.append(3*n+1)\n        end\n        return odd_list\n    end\n\
    end\n</cell>\n<code language=julia-1.4>\nget_odd_collatz(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the first n integers of the Fibonacci\
    \ sequence. \nThe Fibonacci sequence is defined by the recurrence relation:",
  "    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz .= [n % 2]\n        return odd_collatz\nend", "  \
    \  if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz .+= [n * 3 if n % 2 == 0 else 1]\n        return odd_collatz\n\
    end", "    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz += [n * 3 if n % 2 == 0 else n * 2 + 1]\n        return\
    \ odd_collatz\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes an integer n and returns\
    \ the nth Fibonacci number.", "    if n == 1 \n        return [1]\n    \n    odd_list\
    \ = []\n    \n    for i in get_odd_collatz(n - 1) do \n        if i % 2 == 1 \n\
    \            odd_list.append(i)\n        else\n            odd_list.append(3 *\
    \ i + 1)\n    end\n    \n    return odd_list\nend\n</cell>\n<code language=julia-1.5>\n\
    get_odd_collatz(5)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the factorial of a given positive integer n.", "    if n == 1 \n        return\
    \ [1]\n    odd_list = []\n    odd_list += get_odd_collatz(n/2)\n    odd_list +=\
    \ [n/2]\n    odd_list += [n*3+1]\n    return odd_list\nend", "    if n == 1 \n\
    \        return [1]\n    else \n        odd_collatz = get_odd_collatz(n / 2)\n\
    \        odd_collatz .+= n % 2 == 0 ? 1 : 3\n        odd_collatz\n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes an integer $n$ and returns\
    \ the number of steps to reach 1 from the initial value of $n$. \nFor example,\
    \ get_steps(5) returns 3.", "    if n == 1 \n        return [1]\n    odd_list\
    \ = []\n    for i in get_odd_collatz(n-1) do \n        if i % 2 == 1 \n      \
    \      odd_list += [i]\n        else \n            odd_list += [i*3]\n    end\n\
    \    return odd_list\nend\n</cell>\n<code language=julia-1.5>", "    if n == 1\
    \ \n        return [1]\n    odd_list = []\n    odd_list += get_odd_collatz(n /\
    \ 2)\n    odd_list += [n * 3]\n    odd_list += get_odd_collatz(n / 2)\n    return\
    \ odd_list\nend", "    if n == 1 \n        return [1]\n    else\n        odd_list\
    \ = []\n        for i in get_odd_collatz(n-1) do \n            if i % 2 == 0 \n\
    \                odd_list.append(i)\n            else \n                odd_list.append(3*i+1)\n\
    \        end\n        return odd_list\n    end\nend\n</cell>\n<code language=julia-1.4>",
  "    if n == 1 \n        return [1]\n    else \n        odd_list = []\n        for\
    \ i in get_odd_collatz(n-1) do \n            if i % 2 == 1 \n                odd_list.append(i)\n\
    \            else \n                odd_list.append(i*2)\n        end\n      \
    \  return odd_list\n    end\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ given positive integer.", "    if n == 1 \n        return [1]\n    \n    odd_list\
    \ = []\n    \n    for x in get_odd_collatz(n-1) do \n        if x % 2 == 1 \n\
    \            odd_list.append(x)\n        else\n            odd_list.append(3*x\
    \ + 1)\n        end\n    end\n    \n    return odd_list\nend\n</cell>\n<code language=julia-1.5>\n\
    get_odd_collatz(5)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ positive integer n and returns the nth Fibonacci number.", "    if n == 1 \n\
    \        return [1]\n    odd_list = []\n    odd_list += get_odd_collatz(n-1)\n\
    \    odd_list += [n/2]\n    odd_list += [n*3+1]\n    return odd_list\nend", " \
    \   if n == 1 \n        return [1]\n    else \n        odd_list = Vector{Int64}()\n\
    \        odd_list += get_odd_collatz(n-1)\n        odd_list += [n/2]\n       \
    \ odd_list += [n*3+1]\n        return odd_list\nend\n</cell>\n<code language=julia-1.5>\n\
    get_odd_collatz(10)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a positive integer n and returns the number of steps it takes to reach 1 from\
    \ the first even number.", "    if n == 1 \n        return [1]\n    else\n   \
    \     odd_collatz = get_odd_collatz(n / 2)\n        odd_collatz .= [n * 3 + (n\
    \ % 2 == 0)]\n        return odd_collatz\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz .= [n * 3 + (n % 2 == 0)]\n        return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes an integer n and returns the Collatz sequence\
    \ up to n.", "    if n == 1 \n        return [1]\n    odd_list = []\n    odd_list\
    \ += get_odd_collatz(n-1)\n    odd_list += [n/2]\n    odd_list += [n*3+1]\n  \
    \  return odd_list\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the nth Fibonacci number\
    \ using recursion.", "    if n == 1 \n        return [1]\n    \n    odd_collatz\
    \ = get_odd_collatz(n / 2)\n    odd_collatz .= [n * 3 + (n % 2 == 1)]\n    return\
    \ odd_collatz\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the first n positive\
    \ integers starting from 1 that have the Collatz conjecture.", "    odd_list =\
    \ []\n    if n == 1 \n        odd_list = [n]\n    else\n        odd_list = [1]\n\
    \        while n != 1 \n            if n % 2 == 0 \n                odd_list.append(n/2)\n\
    \                n = n/2\n            else \n                odd_list.append(3*n+1)\n\
    \                n = n/2\n        end\n    end\n    return odd_list\nend\n</cell>\n\
    <code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes an integer n and returns the number of steps it takes\
    \ to reach 1 from n.", "    if n == 1 \n        return [1]\n    else \n      \
    \  odd_list = []\n        odd_list += get_odd_collatz(n-1)\n        odd_list +=\
    \ [n/2]\n        odd_list += [n*3+1]\n        return odd_list\nend\n</cell>\n\
    <code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the factorial of a given positive integer. \nThe\
    \ factorial of a non-negative integer is defined as the product of all positive\
    \ integers less than or equal to that integer.", "    if n == 1 \n        return\
    \ [1]\n    else\n        odd_list = []\n        odd_list += get_odd_collatz(n/2)\n\
    \        odd_list += [n/2]\n        odd_list += [n/3]\n        odd_list += [n/3]\n\
    \        odd_list += [n/2]\n        odd_list += [n/2]\n        odd_list += [n/2]\n\
    \        odd_list += [n/2]\n        odd_list += [n/2]\n        odd_list += [n/2]\n\
    \        odd_list += [n/2]\n        odd_list += [n/2]\n        odd_list += [n/2]\n\
    \        odd_list += [n/2]\n        odd_list += [n/2]\n        odd_list += [n/2]\n\
    \        odd_list += [n/2]\n        odd_list += [n/2]\n        odd_list += [n/2]\n\
    \        odd_list += [n/2]\n        odd_list += [n/2]\n        odd_list += [n/2]\n\
    \        odd_list += [n/2]\n        odd_list += [n/2]\n        odd_list += [n/2]\n\
    \        odd_list += [n/2]\n        odd_list += [n/2]\n        odd_list += [n/2]\n\
    \        odd_list += [n/2]\n        odd_list += [n/2]\n        odd_list += [n/2]\n\
    \        odd_list += [n/2]\n        odd_list += [n/2]\n        odd_list += [n/2]\n\
    \        odd_list += [n/2]\n        odd_list += [n/2]\n        odd_list += [n/2]\n\
    \        odd_list += [n/2]\n        odd_list += [n/2]\n        odd_list += [n/2]\n\
    \        odd_list += [n/2]\n        odd_list += [n/2]\n        odd_list += [n/2]\n\
    \        odd_list += [n/2]\n        odd_list += [n/2]\n        odd_list += [n/2]\n\
    \        odd_list += [n/2]\n        odd_list += [n/2]\n        odd_list += [n/2]\n\
    \        odd_list += [n/2]\n        odd_list += [n/2]\n        odd_list += [n/2]\n\
    \        odd_list += [n/2]\n        odd_list += [n/2]\n        odd_list += [n/",
  "    if n == 1 \n        return [1]\n    \n    odd_list = []\n    \n    for i in\
    \ get_odd_collatz(n-1) do \n        if i%2 == 1 \n            odd_list.append(i)\n\
    \        else\n            odd_list.append(i*2)\n        end\n    end\n    \n\
    \    odd_list\nend", "    if n == 1 \n        return [1]\n    else \n        odd_list\
    \ = []\n        for n in get_odd_collatz(n / 2)\n            if n % 2 == 1 \n\
    \                odd_list += [n * 3]\n            else \n                odd_list\
    \ += [n + 1]\n        end\n        return odd_list\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the first n prime numbers. \nA prime number is a natural\
    \ number greater than 1 that has no positive divisors other than 1 and itself.\
    \ \nThe first n prime numbers are 2, 3, 5, 7, 11, and 13.", "    if n == 1 \n\
    \        return [1]\n    odd_list = []\n    odd_list += get_odd_collatz(n-1)\n\
    \    odd_list += [n/2]\n    odd_list += [n*3+1]\n    return odd_list\nend", " \
    \   if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * n + 1]\n        return\
    \ odd_collatz\nend\n</cell>\n<code language=julia-1.5>", "    if n == 1 \n   \
    \     return [1]\n    odd_list = []\n    odd_list += get_odd_collatz(n/2)\n  \
    \  odd_list += [n/2]\n    odd_list += [n*3+1]\n    return odd_list\nend", "  \
    \  if n == 1 \n        return [1]\n    odd_list = []\n    odd_list += get_odd_collatz(n-1)\n\
    \    odd_list += [n/2]\n    odd_list += [n*3+1]\n    return odd_list\nend", " \
    \   if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz += [n * 3 if n % 2 == 0 else n * 2 + 1]\n        return\
    \ odd_collatz\nend\n</cell>\n<code language=julia-1.0>", "    if n == 1 \n   \
    \     return [1]\n    \n    odd_collatz = get_odd_collatz(n / 2)\n    \n    if\
    \ n % 2 == 0 \n        odd_collatz .+= [2]\n    else \n        odd_collatz .+=\
    \ [(3 * n) + 1]\n    \n    return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\n\
    get_odd_collatz(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes in\
    \ a list of numbers and returns the number of even numbers in the list.", "  \
    \  if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n-1)\n\
    \        odd_collatz .+= [n/2]\n        odd_collatz .+= [n/3]\n        odd_collatz\
    \ .+= [n/5]\n        odd_collatz .+= [n/7]\n        odd_collatz .+= [n/11]\n \
    \       odd_collatz .+= [n/13]\n        odd_collatz .+= [n/17]\n        odd_collatz\
    \ .+= [n/19]\n        odd_collatz .+= [n/23]\n        odd_collatz .+= [n/29]\n\
    \        odd_collatz .+= [n/37]\n        odd_collatz .+= [n/47]\n        odd_collatz\
    \ .+= [n/55]\n        odd_collatz .+= [n/63]\n        odd_collatz .+= [n/71]\n\
    \        odd_collatz .+= [n/79]\n        odd_collatz .+= [n/87]\n        odd_collatz\
    \ .+= [n/95]\n        odd_collatz .+= [n/103]\n        odd_collatz .+= [n/111]\n\
    \        odd_collatz .+= [n/119]\n        odd_collatz .+= [n/127]\n        odd_collatz\
    \ .+= [n/135]\n        odd_collatz .+= [n/143]\n        odd_collatz .+= [n/151]\n\
    \        odd_collatz .+= [n/159]\n        odd_collatz .+= [n/167]\n        odd_collatz\
    \ .+= [n/175]\n        odd_collatz .+= [n/183]\n        odd_collatz .+= [n/191]\n\
    \        odd_collatz .+= [n/199]\n        odd_collatz .+= [n/207]\n        odd_collatz\
    \ .+= [n/215]\n        odd_collatz .+= [n/223]\n        odd_collatz .+= [n/232]\n\
    \        odd_collatz .+= [n/241]\n        odd_collatz .+= [n/249]\n        odd_collatz\
    \ .+= [n/", "    odd_list = []\n    odd_list = [1]\n    if n==1\n        return\
    \ odd_list\n    else\n        odd_list = odd_list + [get_odd_collatz(n-1)]\n \
    \       odd_list = odd_list + [get_odd_collatz(n//2)]\n        return odd_list\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an integer n and returns the number\
    \ of steps to reach 1 from the first even number. For example, get_evens_steps(5)\
    \ returns 3.", "    if n == 1 \n        return [1]\n    \n    odd_list = []\n\
    \    \n    for n in get_odd_collatz(n-1)\n        if n % 2 == 0 \n           \
    \ odd_list.append(n/2)\n        else\n            odd_list.append(n*3 + 1)\n \
    \   end\n    \n    return odd_list\nend", "    if n == 1 \n        return [1]\n\
    \    else \n        odd_collatz = get_odd_collatz(n / 2)\n        odd_collatz\
    \ .= [n * 3 + (n % 2 == 0)]\n        return odd_collatz\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz .= [n * 3 + (n % 2 == 0)]\n        return odd_collatz\n\
    end", "    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz .= [n * 3 + 1]\n        odd_collatz .= odd_collatz[end-1]\n\
    \        return odd_collatz\nend", "    if n == 1 \n        return [1]\n    else\
    \ \n        odd_collatz = get_odd_collatz(n / 2)\n        odd_collatz .= [n *\
    \ 3 + 1]\n        odd_collatz .= odd_collatz .+ get_odd_collatz(n % 2)\n     \
    \   return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the nth Fibonacci number.",
  "    if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n /\
    \ 2)\n    odd_collatz .+= n % 2 == 0 ? [n / 2] : [n / 2] * 3 + 1\n    odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the nth Fibonacci number.", "    if\
    \ n == 1 \n        return [1]\n    \n    odd_list = []\n    \n    for x in get_odd_collatz(n-1)\
    \ do \n        if x % 2 == 1 \n            odd_list.append(x)\n        else\n\
    \            odd_list.append(x/2)\n        end\n    end\n    \n    odd_list\n\
    end\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a given positive integer\
    \ n.", "    if n == 1 \n        return [1]\n    else \n        odd_list = []\n\
    \        for i in get_odd_collatz(n-1) do \n            if i % 2 == 0 \n     \
    \           odd_list.append(i)\n            else \n                odd_list.append(3*i+1)\n\
    \        end\n        return odd_list\n    end\nend\n</cell>\n<code language=julia-1.4>",
  "    if n == 1 \n        return [1]\n    else\n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz .= [n * 3 + (n % 2 == 0)]\n        return odd_collatz\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if n == 1 \n        return\
    \ [1]\n    else\n        odd_collatz = get_odd_collatz(n-1)\n        odd_collatz\
    \ .+= [n/2]\n        odd_collatz .+= [n/3]\n        odd_collatz .+= [n/3]\n  \
    \      odd_collatz .+= [n/2]\n        return odd_collatz\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the factorial of a given positive integer n.", " \
    \   if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz .= [n * 3 + (n % 2 == 0)]\n        return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a positive integer n and returns the number\
    \ of steps it takes to reach 1 from n.", "    if n == 1 \n        return [1]\n\
    \    else \n        collatz = get_odd_collatz(n-1)\n        collatz = [n] + collatz\n\
    \        return collatz\nend", "    if n == 1 \n        return [1]\n    \n   \
    \ odd_collatz = get_odd_collatz(n / 2)\n    odd_collatz .= [n * 3 if n % 2 ==\
    \ 0 else n * 2 + 1]\n    odd_collatz\nend\n</cell>\n<code language=julia-1.5>\n\
    get_odd_collatz(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the factorial of a given positive integer n.", "    if n == 1 \n        return\
    \ [1]\n    odd_list = []\n    odd_list += get_odd_collatz(n/2)\n    odd_list +=\
    \ [n/2]\n    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n\
    \    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list\
    \ += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n\
    \    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list\
    \ += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n\
    \    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list\
    \ += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n\
    \    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list\
    \ += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n\
    \    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list\
    \ += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n\
    \    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list\
    \ += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n\
    \    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list\
    \ += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n    odd_list += [n/3]\n\
    \    odd_list += [n/3]\n", "    if n == 1 \n        return [1]\n    else \n  \
    \      odd_collatz = get_odd_collatz(n / 2)\n        odd_collatz .+= [n * 3 if\
    \ n % 2 == 0 else 1]\n        return odd_collatz\nend", "    if n == 1 \n    \
    \    return [1]\n    else \n        odd_collatz = get_odd_collatz(n / 2)\n   \
    \     odd_collatz .+= [n * 3 if n % 2 == 0 else 1]\n        return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a given positive integer\
    \ n. \nFor example, factorial(5) == 120.", "    odd_list = Vector{Int64}()\n \
    \   odd_list[1] = n\n    odd_list[2] = n / 2\n    odd_list[3] = n / 2 * 3\n  \
    \  odd_list[4] = n / 2 * 3 * 5\n    odd_list[5] = n / 2 * 3 * 5 * 7\n    odd_list[6]\
    \ = n / 2 * 3 * 5 * 7 * 11\n    odd_list[7] = n / 2 * 3 * 5 * 7 * 11 * 13\n  \
    \  odd_list[8] = n / 2 * 3 * 5 * 7 * 11 * 13 * 17\n    odd_list[9] = n / 2 * 3\
    \ * 5 * 7 * 11 * 13 * 17 * 19\n    odd_list[10] = n / 2 * 3 * 5 * 7 * 11 * 13\
    \ * 17 * 19 * 23\n    odd_list[11] = n / 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23\
    \ * 29\n    odd_list[12] = n / 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31\n\
    \    odd_list[13] = n / 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37\n\
    \    odd_list[14] = n / 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37\
    \ * 41\n    odd_list[15] = n / 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31\
    \ * 37 * 41 * 43\n    odd_list[16] = n / 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23\
    \ * 29 * 31 * 37 * 41 * 43 * 47\n    odd_list[17] = n / 2 * 3 * 5 * 7 * 11 * 13\
    \ * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 * 53\n    odd_list[18] = n / 2\
    \ * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 * 53 * 59\n\
    \    odd_list[19] = n / 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37\
    \ * 41 * 43 * 47 * 53 * 59 * 61\n    odd_list[20] = n / 2 * 3 * 5 * 7 * 11 * 13\
    \ * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 * 53 * 59 * 61 * 67\n    odd_list[21]\
    \ = n / 2 * 3 * 5 * 7 * 11 * ", "    if n == 1 \n        return [1]\n    \n  \
    \  odd_collatz = get_odd_collatz(n / 2)\n    \n    if n % 2 == 0 \n        odd_collatz\
    \ += [n]\n    else \n        odd_collatz += [n] * 3\n    end\n    \n    return\
    \ odd_collatz\nend\n</cell>\n<code language=julia-1.5>", "    if n == 1 \n   \
    \     return [1]\n    else\n        odd_collatz = get_odd_collatz(n / 2)\n   \
    \     odd_collatz .= [n * 2 if n % 2 == 0 else n * 3 + 1]\n        return odd_collatz\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the factorial of a given positive\
    \ integer n.", "    if n == 1 \n        return [1]\n    else \n        odd_collatz\
    \ = get_odd_collatz(n / 2)\n        odd_collatz .= [n * 3 + 1]\n        if n %\
    \ 2 == 1 \n            odd_collatz .= [n + 1]\n        end\n        return odd_collatz\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert get_odd_collatz(5)\
    \ == [1, 5]\n</cell>\n<text>\nProblem 4\nWrite a function that takes an integer\
    \ n and returns the number of positive integers less than or equal to n that are\
    \ divisible by 3.", "    if n == 1 \n        return [1]\n    else \n        odd_collatz\
    \ = get_odd_collatz(n-1)\n        odd_collatz .+= [n/2]\n        odd_collatz .+=\
    \ [n/3]\n        odd_collatz .+= [n/5]\n        odd_collatz .+= [n/7]\n      \
    \  odd_collatz .+= [n/11]\n        odd_collatz .+= [n/13]\n        odd_collatz\
    \ .+= [n/17]\n        odd_collatz .+= [n/19]\n        return odd_collatz\nend\n\
    </cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes an integer n and returns the number of steps\
    \ to reach 1 from n.", "    if n == 1 \n        return [1]\n    \n    odd_list\
    \ = []\n    \n    for x in get_odd_collatz(n-1) do \n        if x % 2 == 0 \n\
    \            odd_list.append(x)\n        else \n            odd_list.append(x/2)\n\
    \    end\n    \n    odd_list += [n]\n    \n    return odd_list\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n == 1 \n        return [1]\n    else \n \
    \       odd_collatz = get_odd_collatz(n / 2)\n        odd_collatz .+= [n * 3 if\
    \ n % 2 == 0 else 1]\n        return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\n\
    get_odd_collatz(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the factorial of a given positive integer n.", "    if n == 1 \n        return\
    \ [1]\n    else \n        odd_collatz = get_odd_collatz(n / 2)\n        odd_collatz\
    \ .= [n * 3 + 1]\n        odd_collatz .= odd_collatz[end-1]\n        return odd_collatz\n\
    end", "    odd_list = Vector{Int64}()\n    odd_list[1] = n\n    odd_list[2] =\
    \ n / 2\n    odd_list[3] = n / 2 * 3 + 1\n    odd_list[4] = n / 2 * 3 + 2\n  \
    \  odd_list[5] = n / 2 * 3 + 3\n    odd_list[6] = n / 2 * 3 + 4\n    odd_list[7]\
    \ = n / 2 * 3 + 5\n    odd_list[8] = n / 2 * 3 + 6\n    odd_list[9] = n / 2 *\
    \ 3 + 7\n    odd_list[10] = n / 2 * 3 + 8\n    odd_list[11] = n / 2 * 3 + 9\n\
    \    odd_list[12] = n / 2 * 3 + 10\n    odd_list[13] = n / 2 * 3 + 11\n    odd_list[14]\
    \ = n / 2 * 3 + 12\n    odd_list[15] = n / 2 * 3 + 13\n    odd_list[16] = n /\
    \ 2 * 3 + 14\n    odd_list[17] = n / 2 * 3 + 15\n    odd_list[18] = n / 2 * 3\
    \ + 16\n    odd_list[19] = n / 2 * 3 + 17\n    odd_list[20] = n / 2 * 3 + 18\n\
    \    odd_list[21] = n / 2 * 3 + 19\n    odd_list[22] = n / 2 * 3 + 20\n    odd_list[23]\
    \ = n / 2 * 3 + 21\n    odd_list[24] = n / 2 * 3 + 22\n    odd_list[25] = n /\
    \ 2 * 3 + 23\n    odd_list[26] = n / 2 * 3 + 24\n    odd_list[27] = n / 2 * 3\
    \ + 25\n    odd_list[28] = n / 2 * 3 + 26\n    odd_list[29] = n / 2 * 3 + 27\n\
    \    odd_list[30] = n / 2 * 3 + 28\n    odd_list[31] = n / 2 * 3 + 29\n    odd_list[32]\
    \ = n / 2 * 3 + 30\n    odd_list[33] = n / 2 * 3 + 31\n    odd_list[34] = n /\
    \ 2 * 3 + 32\n    odd_list[35] = n / 2 * 3 + 33\n    odd_list[36] = n / 2 * 3\
    \ + 34\n    odd_list[37] = n / 2 * 3 + 35\n    odd_list[38] = n / 2 * 3 + 36\n\
    \    odd_list[39] = n / 2 * 3 + 37\n    odd_list[40] = n / 2 * 3 + 38\n    odd_list[41]\
    \ = n / 2 * 3 + 39\n    odd_list[42] = n / 2 * 3 + 40\n    odd_list[43] = ", " \
    \   if n == 1 \n        return [1]\n    \n    odd_list = []\n    \n    for n in\
    \ get_odd_collatz(n-1) do \n        if n % 2 == 0 \n            odd_list.append(n)\n\
    \        else \n            odd_list.append(n*3 + 1)\n    end\n    \n    return\
    \ odd_list\nend", "    odd_list = []\n    odd_list = [1]\n    while n != 1\n \
    \       if n % 2 == 1\n            odd_list.append(n/2)\n            n = n/2\n\
    \        else\n            odd_list.append(3*n+1)\n            n = n/3\n    end\n\
    \    return odd_list\nend\n</cell>\n<code language=julia-1.5>", "    if n == 1\
    \ \n        return [1]\n    \n    odd_list = []\n    \n    for n in get_odd_collatz(n-1)\
    \ do \n        if n % 2 == 1 \n            odd_list.append(n/2)\n        else\
    \ \n            odd_list.append(3*n+1)\n    end\n    \n    return odd_list\nend\n\
    </cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a positive integer n and returns the nth Fibonacci\
    \ number.", "    if n == 1 \n        return [1]\n    else\n        odd_list =\
    \ []\n        for i in get_odd_collatz(n-1)\n            if i % 2 == 1\n     \
    \           odd_list += [i]\n            else\n                odd_list += [i*3]\n\
    \        end\n        odd_list += [n]\n        return odd_list\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the factorial of a given positive integer n.",
  "    if n == 1 \n        return [1]\n    else \n        odd_list = []\n        for\
    \ n in get_odd_collatz(n-1) do \n            if n % 2 == 0 \n                odd_list.append(n)\
    \ \n            else \n                odd_list.append(n*3 + 1)\n        end\n\
    \        return odd_list\n    end\nend\n</cell>\n<code language=julia-1.5>", " \
    \   odd_list = []\n    if n == 1 \n        odd_list = [n]\n    else\n        odd_list\
    \ = [1]\n        while n != 1 do\n            if n % 2 == 0 \n               \
    \ odd_list.append(n/2)\n                n = n/2\n            else\n          \
    \      odd_list.append(3*n+1)\n                n = n/2\n        end\n    end\n\
    \    return odd_list\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes an integer n and returns\
    \ the nth Fibonacci number.", "    odd_list = Vector{Int64}()\n    odd_list[1]\
    \ = n\n    odd_list[2] = n / 2\n    odd_list[3] = n / 2 * 3\n    odd_list[4] =\
    \ n / 2 * 3 * 3\n    odd_list[5] = n / 2 * 3 * 3 * 3\n    odd_list[6] = n / 2\
    \ * 3 * 3 * 3 * 3\n    odd_list[7] = n / 2 * 3 * 3 * 3 * 3 * 3\n    odd_list[8]\
    \ = n / 2 * 3 * 3 * 3 * 3 * 3 * 3\n    odd_list[9] = n / 2 * 3 * 3 * 3 * 3 * 3\
    \ * 3 * 3\n    odd_list[10] = n / 2 * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3\n    odd_list[11]\
    \ = n / 2 * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3\n    odd_list[12] = n / 2 * 3 *\
    \ 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3\n    odd_list[13] = n / 2 * 3 * 3 * 3 * 3\
    \ * 3 * 3 * 3 * 3 * 3 * 3 * 3\n    odd_list[14] = n / 2 * 3 * 3 * 3 * 3 * 3 *\
    \ 3 * 3 * 3 * 3 * 3 * 3 * 3\n    odd_list[15] = n / 2 * 3 * 3 * 3 * 3 * 3 * 3\
    \ * 3 * 3 * 3 * 3 * 3 * 3 * 3\n    odd_list[16] = n / 2 * 3 * 3 * 3 * 3 * 3 *\
    \ 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3\n    odd_list[17] = n / 2 * 3 * 3 * 3 * 3\
    \ * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3\n    odd_list[18] = n / 2 * 3 *\
    \ 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3\n    odd_list[19] = n\
    \ / 2 * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3\n    odd_list[20]\
    \ = n / 2 * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3\n\
    \    odd_list[21] = n / 2 * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3\
    \ * 3 * 3 * 3 * 3 * 3\n    odd_list[22] = n / 2 * 3 * 3 * 3 * 3 * 3 * 3 * 3 *\
    \ 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3\n    odd_list[23] = n / 2 * 3\
    \ * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3\n  \
    \  odd_list[24] = n / 2 * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3 *\
    \ 3 * 3 * 3 * 3 * 3 * 3\n    odd_list[25] = n / 2 * 3 * 3 * 3 * 3 * 3 * 3 * 3\
    \ * 3 * 3 * 3 * 3 * 3 * 3 * 3 * ", "    if n == 1 \n        return [1]\n    else\
    \ \n        odd_collatz = get_odd_collatz(n-1)\n        odd_collatz .+= [n/2]\n\
    \        odd_collatz .+= [n/3]\n        odd_collatz .+= [n/3]\n        odd_collatz\
    \ .+= [n/2]\n        return odd_collatz\nend", "    if n == 1 \n        return\
    \ [1]\n    odd_list = []\n    for x in get_odd_collatz(n-1) do \n        if x\
    \ % 2 == 1 \n            odd_list.append(x)\n        else \n            odd_list.append(x/2)\n\
    \    end\n    odd_list += [n]\n    return odd_list\nend\n</cell>\n<code language=julia-1.5>\n\
    get_odd_collatz(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an\
    \ integer n and returns the nth Fibonacci number.", "    if n == 1 \n        return\
    \ [1]\n    else \n        odd_collatz = get_odd_collatz(n-1)\n        odd_collatz\
    \ += [n/2]\n        return odd_collatz\nend\n</cell>\n<code language=julia-1.3>\n\
    get_odd_collatz(10)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a positive integer n and returns the nth Fibonacci number.", "    if n == 1\
    \ \n        return [1]\n    odd_list = []\n    odd_list += get_odd_collatz(n-1)\n\
    \    odd_list += [n/2]\n    odd_list += [n*3+1]\n    return odd_list\nend\n</cell>\n\
    <code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes an integer n and returns the nth Fibonacci number.",
  "    if n == 1 \n        return [1]\n    \n    odd_list = []\n    \n    for x in\
    \ get_odd_collatz(n-1) do \n        if x % 2 == 0 \n            odd_list += [x/2]\n\
    \        else \n            odd_list += [x*3 + 1]\n    end\n    \n    return odd_list\n\
    end\n</cell>\n<code language=julia-1.5>", "    if n == 1 \n        return [1]\n\
    \    else \n        odd_collatz = get_odd_collatz(n / 2)\n        odd_collatz\
    \ .= [n % 2 == 0 ? 1 : 3 * odd_collatz[end] + 1]\n        return odd_collatz\n\
    end", "    if n == 1 \n        return [1]\n    else\n        odd_list = Vector{Int64}()\n\
    \        odd_list += get_odd_collatz(n-1)\n        odd_list += [n/2]\n       \
    \ odd_list += [n*3]\n        odd_list += [n*3+1]\n        odd_list += [n*3+1]\n\
    \        return odd_list\n    end\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ given positive integer n.", "    if n == 1 \n        return [1]\n    \n    odd_list\
    \ = []\n    \n    for x in get_odd_collatz(n-1) do \n        if x % 2 == 1 \n\
    \            odd_list.append(x)\n        else\n            odd_list.append(3*x\
    \ + 1)\n        end\n    end\n    \n    return odd_list\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 1 \n        return [1]\n    odd_list = []\n    odd_list += get_odd_collatz(n-1)\n\
    \    odd_list += [n/2]\n    odd_list += [n*3]\n    odd_list += [n*3+1]\n    return\
    \ odd_list\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes in a positive integer n and returns\
    \ the number of even numbers less than or equal to n.", "    if n == 1 \n    \
    \    return [1]\n    \n    odd_list = []\n    \n    for i in get_odd_collatz(n-1)\
    \ do \n        if i % 2 == 1 \n            odd_list.append(i)\n        else \n\
    \            odd_list.append(i*3 + 1)\n    end\n    \n    odd_list\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert get_odd_collatz(5) == [1, 5]\n</cell>\n<text>\n\
    Problem 3\nWrite a function that returns the nth term of the Fibonacci sequence.\
    \ \nThe Fibonacci sequence is defined by the recurrence relation:", "    if n\
    \ == 1 \n        return [1]\n    odd_list = []\n    odd_list += get_odd_collatz(n\
    \ / 2)\n    odd_list += [n * 3]\n    odd_list += get_odd_collatz(n / 2)\n    return\
    \ odd_list\nend\n</cell>\n<code language=julia-1.5>\n@assert get_odd_collatz(5)\
    \ == [1, 5]\n</cell>\n<text>\nExercise 3\nWrite a function that returns the nth\
    \ term of the Fibonacci sequence. \nThe Fibonacci sequence is defined by the recurrence\
    \ relation:", "    if n == 1 \n        return [1]\n    \n    odd_list = []\n \
    \   \n    for n in get_odd_collatz(n - 1)\n        if n % 2 == 1 \n          \
    \  odd_list += [n/2]\n        else\n            odd_list += [n*3] + [n/2]\n  \
    \  end\n    \n    return odd_list\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes in a positive integer\
    \ n and returns the nth Fibonacci number.", "    if n == 1 \n        return [1]\n\
    \    else \n        odd_collatz = get_odd_collatz(n / 2)\n        odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n        odd_collatz .+= n % 2 == 0 ? 1 : 3\n       \
    \ return odd_collatz\nend", "    if n == 1 \n        return [1]\n    else \n \
    \       collatz = get_odd_collatz(n / 2)\n        odd_collatz = collatz\n    \
    \    for i in collatz do \n            if i % 2 == 1 \n                odd_collatz\
    \ += [i / 2]\n            else \n                odd_collatz += [i * 3]\n    \
    \    end\n        return odd_collatz\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    get_odd_collatz(10)\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ in an integer n and returns the nth Fibonacci number.", "    odd_list = Vector{Int64}()\n\
    \    odd_list.append(1)\n    odd_list.append(n)\n    for i in 2:n\n        if\
    \ odd_list[i-1] % 2 == 1\n            odd_list[i] = odd_list[i-1] / 2\n      \
    \  else\n            odd_list[i] = odd_list[i-1] * 3 + 1\n        end\n    end\n\
    \    return odd_list\nend", "    if n == 1 \n        return [1]\n    else \n \
    \       odd_list = []\n        for i in get_odd_collatz(n-1) do \n           \
    \ if i%2 == 1 \n                odd_list += [i/2]\n            else \n       \
    \         odd_list += [i*3+1]\n        end\n        return odd_list\n    end\n\
    end", "    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz .= [n / 2]\n        if n % 2 == 1 \n            odd_collatz\
    \ .= odd_collatz .* 3 + 1\n        end\n        return odd_collatz\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes an integer n and returns the nth Fibonacci\
    \ number.", "    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n\
    \ / 2)\n    odd_collatz += [n / 2]\n    if n % 2 == 0 \n        odd_collatz +=\
    \ [n / 2 * 3]\n    end\n    return odd_collatz\nend", "    if n == 1 \n      \
    \  return [1]\n    else \n        collatz = get_odd_collatz(n / 2)\n        push!(collatz,\
    \ n % 2)\n        return collatz\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ given positive integer n.", "    if n == 1 \n        return [1]\n    else \n\
    \        odd_collatz = get_odd_collatz(n / 2)\n        odd_collatz .= [n * 3 +\
    \ 1]\n        if n % 2 == 1 \n            odd_collatz .= [n + 1]\n        end\n\
    \        return odd_collatz\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    get_odd_collatz(10)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ in a positive integer n and returns the nth Fibonacci number.", "    if n ==\
    \ 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n /\
    \ 2)\n        odd_collatz += [n / 2]\n        return odd_collatz\nend", "    if\
    \ n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz .= [n * 3 + (n % 2 == 1)]\n        return odd_collatz\n\
    end", "    if n == 1 \n        return [1]\n    else \n        collatz = get_odd_collatz(n\
    \ / 2)\n        push!(collatz, n % 2)\n        return collatz\nend", "    if n\
    \ == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .= [n * 2 if n % 2 == 0 else n * 3 + 1]\n    odd_collatz\nend",
  "    if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n /\
    \ 2)\n    \n    if n % 2 == 0 \n        odd_collatz += [n]\n    \n    return odd_collatz\n\
    end", "    if n == 1 \n        return [1]\n    else \n        collatz = get_odd_collatz(n\
    \ / 2)\n        if n % 2 == 1 \n            collatz += [collatz[end-1] + 1]\n\
    \        else \n            collatz += [collatz[end-1] + 3]\n        end\n   \
    \     return collatz\n    end\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in a positive integer\
    \ n and returns the nth term of the Fibonacci sequence.", "    if n == 1 \n  \
    \      return [1]\n    odd_list = []\n    odd_list += get_odd_collatz(n/2)\n \
    \   odd_list += [n/2]\n    odd_list += [n*3+1]\n    return odd_list\nend\n</cell>\n\
    <code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes in a positive integer n and returns the nth Fibonacci\
    \ number.", "    if n == 1 \n        return [1]\n    \n    odd_list = []\n   \
    \ \n    for i in get_odd_collatz(n - 1) do \n        if i % 2 == 0 \n        \
    \    odd_list.append(i)\n        else \n            odd_list.append(3 * i + 1)\n\
    \    end\n    \n    odd_list\nend\n</cell>\n<code language=julia-1.3>\n@time odd_list\
    \ = get_odd_collatz(10)\n</cell>\n<code language=julia-1.3>\n@time odd_list =\
    \ get_odd_collatz(10)\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ in a positive integer n and returns the nth Fibonacci number.", "    if n ==\
    \ 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n /\
    \ 2)\n        odd_collatz .+= n % 2 == 0 ? 1 : 3\n        return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes in an integer n and returns the nth Fibonacci\
    \ number.", "    if n == 1 \n        return [1]\n    else\n        odd_collatz\
    \ = get_odd_collatz(n / 2)\n        odd_collatz .= [n * 2 if n % 2 == 0 else n\
    \ * 3 + 1 for (_,n) in zip(odd_collatz, odd_collatz)]\n        return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(5)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes an integer n and returns the number of\
    \ steps it takes to reach 1 from the first even number.", "    if n == 1 \n  \
    \      return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n    odd_collatz +=\
    \ [n * 3 if n % 2 == 0 else n * 2 + 1]\n    return odd_collatz\nend\n</cell>\n\
    <code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a positive integer n and returns the number of steps\
    \ to reach 1 from n.", "    if n == 1 \n        return [1]\n    odd_collatz =\
    \ get_odd_collatz(n / 2)\n    odd_collatz .= [n * 2 if n % 2 == 0 else n * 3 +\
    \ 1 for (_) in odd_collatz]\n    return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\n\
    get_odd_collatz(5)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the factorial of a given positive integer n.", "    if n == 1 \n        return\
    \ [1]\n    else \n        odd_collatz = get_odd_collatz(n / 2)\n        odd_collatz\
    \ .= [n / 2]\n        if n % 2 == 1 \n            odd_collatz .= odd_collatz .*\
    \ 3 + 1\n        else \n            odd_collatz .= odd_collatz .* 3\n        end\n\
    \        return odd_collatz\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .= [n * 3 + (n % 2 == 1)]\n    return odd_collatz\nend", "  \
    \  if n == 1 \n        return [1]\n    else \n        collatz = get_odd_collatz(n\
    \ / 2)\n        push!(collatz, n % 2)\n        return collatz\nend\n</cell>\n\
    <code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a given positive integer n.", " \
    \   if n == 1 \n        return [1]\n    elseif n % 2 == 0 \n        return get_odd_collatz(n\
    \ / 2) ++ [n * 3]\n    else\n        return get_odd_collatz(n / 2) ++ [n * 3]\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the nth Fibonacci number using\
    \ recursion.", "    if n == 1 \n        return [1]\n    else \n        odd_collatz\
    \ = get_odd_collatz(n / 2)\n        odd_collatz .= [n * 3 + (n % 2 == 0)]\n  \
    \      return odd_collatz\nend", "    odd_list = []\n    odd_list = [1]\n    if\
    \ n==1 \n        return odd_list\n    else\n        odd_list = get_odd_collatz(n-1)\n\
    \        odd_list[1] = odd_list[1]*2\n        odd_list[2] = odd_list[2]*3+1\n\
    \        return odd_list\n    end\nend", "    if n == 1 \n        return [1]\n\
    \    else \n        odd_list = Vector{Int64}()\n        odd_list += get_odd_collatz(n-1)\n\
    \        odd_list += [n/2]\n        odd_list += [n*3+1]\n        return odd_list\n\
    end", "    if n == 1 \n        return [1]\n    \n    odd_list = []\n    \n   \
    \ for n in get_odd_collatz(n-1) do \n        if n % 2 == 0 \n            odd_list.append(n)\n\
    \        else \n            odd_list.append(n*3 + 1)\n    end\n    \n    return\
    \ odd_list\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the factorial of a given number.\
    \ \nThe factorial of a number $n$ is defined as the product of all positive integers\
    \ less than or equal to $n$. \nFor example, $5! = 5 \xD7 4 \xD7 3 \xD7 2 \xD7\
    \ 1$. \nThe factorial of 0 is 1.", "    if n == 1 \n        return [1]\n    else\
    \ \n        odd_collatz = get_odd_collatz(n / 2)\n        odd_collatz .= [n *\
    \ 3 + 1]\n        if n % 2 == 1 \n            odd_collatz .= [n + 1]\n       \
    \ end\n        return odd_collatz\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    get_odd_collatz(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ positive integer n and returns the nth Fibonacci number.", "    if n == 1 \n\
    \        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : ", "    if n == 1 \n        return [1]\n    \n    odd_collatz\
    \ = get_odd_collatz(n / 2)\n    odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * odd_collatz[end]\
    \ + 1]\n    \n    return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\n\
    get_odd_collatz(10)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a positive integer n and returns the first n odd numbers in Collatz sequence.",
  "    odd_list = []\n    if n==1 \n        odd_list = [n]\n    else\n        odd_list\
    \ = [1]\n        odd_list = odd_list + get_odd_collatz(n-1)\n        odd_list\
    \ = odd_list + get_odd_collatz(3*n+1)\n    end\n    return odd_list\nend\n</cell>\n\
    <code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\nProblem 3\nWrite\
    \ a function that returns the factorial of a given positive integer n.", "   \
    \ if n == 1 \n        return [1]\n    else \n        collatz = get_odd_collatz(n\
    \ / 2)\n        push!(collatz, n % 2)\n        return collatz\nend", "    odd_list\
    \ = []\n    odd_list = [1]\n    if n == 1\n        odd_list\n    else\n      \
    \  odd_list = odd_list + get_odd_collatz(n / 2)\n        if n % 2 == 1\n     \
    \       odd_list = odd_list + [n / 2]\n        else\n            odd_list = odd_list\
    \ + [n / 2] * 3\n        end\n    end\n    odd_list\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz .= [n * 3 + 1]\n        return odd_collatz\nend\n\
    </cell>\n<code language=julia-1.5>\nget_odd_collatz(5)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the factorial of a given number. \nThe factorial\
    \ of a number $n$ is defined as:", "    if n == 1 \n        return [1]\n    elseif\
    \ n % 2 == 0 \n        return get_odd_collatz(n/2) + [n]\n    else\n        return\
    \ get_odd_collatz(n/2) + [n*3]\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 1 \n        return [1]\n    elseif n % 2 == 0 \n        return get_odd_collatz(n/2)\n\
    \    else\n        return get_odd_collatz((3*n) + 1) \nend", "    if n == 1 \n\
    \        return [1]\n    else \n        odd_list = Vector{Int64}()\n        odd_list\
    \ += get_odd_collatz(n-1)\n        odd_list += [n/2]\n        return odd_list\n\
    end\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes an integer n and returns the nth Fibonacci\
    \ number.", "    if n == 1 \n        return [1]\n    \n    odd_list = []\n   \
    \ \n    for i in get_odd_collatz(n-1) do \n        if i % 2 == 0 \n          \
    \  odd_list.append(i)\n        else \n            odd_list.append(i*2)\n    end\n\
    \    \n    odd_list += [n]\n    \n    return odd_list\nend", "    odd_list = []\n\
    \    odd_list = [1]\n    if n==1 \n        odd_list = [1]\n    else\n        odd_list\
    \ = [1]\n        for i in 2..n\n            if mod(i, 2) == 0 \n             \
    \   odd_list = odd_list + [i/2]\n            else \n                odd_list =\
    \ odd_list + [i*3]\n        end\n    end\n    return odd_list\nend\n</cell>\n\
    <code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a positive integer n and returns the Collatz sequence\
    \ up to and including n.", "    if n == 1 \n        return [1]\n    else \n  \
    \      odd_list = []\n        for i in get_odd_collatz(n - 1)\n            if\
    \ i % 2 == 1\n                odd_list += [i]\n            else\n            \
    \    odd_list += [i * 3]\n        end\n        return odd_list\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n# test get_odd_collatz\nget_odd_collatz(10)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ given positive integer n.", "    if n == 1 \n        return [1]\n    else \n\
    \        odd_collatz = get_odd_collatz(n / 2)\n        odd_collatz .= [n * 3 +\
    \ (n % 2 == 0)]\n        return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\n\
    get_odd_collatz(10)\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a positive integer n and returns the number of steps to reach 1 from the given\
    \ positive integer n.", "    if n == 1 \n        return [1]\n    else \n     \
    \   odd_nums = Vector{Int64}()\n        odd_nums.push(2)\n        odd_nums.push(n\
    \ / 2)\n        odd_nums.push(n / 2 * 3)\n        odd_nums.push(n / 2 * 3 * 5)\n\
    \        odd_nums.push(n / 2 * 3 * 5 * 7)\n        odd_nums.push(n / 2 * 3 * 5\
    \ * 7 * 11)\n        odd_nums.push(n / 2 * 3 * 5 * 7 * 11 * 13)\n        odd_nums.push(n\
    \ / 2 * 3 * 5 * 7 * 11 * 13 * 17)\n        odd_nums.push(n / 2 * 3 * 5 * 7 * 11\
    \ * 13 * 17 * 19)\n        odd_nums.push(n / 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\
    \ * 23)\n        odd_nums.push(n / 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29)\n\
    \        odd_nums.push(n / 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31)\n\
    \        odd_nums.push(n / 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 *\
    \ 37)\n        odd_nums.push(n / 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 *\
    \ 31 * 37 * 41)\n        odd_nums.push(n / 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 *\
    \ 23 * 29 * 31 * 37 * 41 * 43)\n        odd_nums.push(n / 2 * 3 * 5 * 7 * 11 *\
    \ 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47)\n        odd_nums.push(n /\
    \ 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 * 53)\n\
    \        odd_nums.push(n / 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 *\
    \ 37 * 41 * 43 * 47 * 53 * 59)\n        odd_nums.push(n / 2 * 3 * 5 * 7 * 11 *\
    \ 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 * 53 * 59 * 61)\n        odd_nums.push(n\
    \ / 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 * 53\
    \ * 59 * 61 * 65)\n        odd_nums.push(n / 2 * 3 * 5 * ", "    if n == 1 \n\
    \        return [1]\n    else \n        odd_collatz = get_odd_collatz(n-1)\n \
    \       odd_collatz .+= [n/2]\n        odd_collatz .+= [n/3]\n        odd_collatz\
    \ .+= [n/3]\n        return odd_collatz\nend", "    if n == 1 \n        return\
    \ [1]\n    else \n        odd_list = []\n        odd_list += get_odd_collatz(n-1)\n\
    \        odd_list += [n/2]\n        odd_list += [n*3]\n        odd_list += [n*3+1]\n\
    \        odd_list += [n*3+2]\n        odd_list += [n*3+2]\n        odd_list +=\
    \ [n*3+1]\n        odd_list += [n*3+2]\n        odd_list += [n*3+1]\n        odd_list\
    \ += [n*3+2]\n        odd_list += [n*3+2]\n        odd_list += [n*3+1]\n     \
    \   odd_list += [n*3+2]\n        odd_list += [n*3+1]\n        odd_list += [n*3+2]\n\
    \        odd_list += [n*3+2]\n        odd_list += [n*3+1]\n        odd_list +=\
    \ [n*3+2]\n        odd_list += [n*3+1]\n        odd_list += [n*3+2]\n        odd_list\
    \ += [n*3+2]\n        odd_list += [n*3+1]\n        odd_list += [n*3+2]\n     \
    \   odd_list += [n*3+1]\n        odd_list += [n*3+2]\n        odd_list += [n*3+2]\n\
    \        odd_list += [n*3+1]\n        odd_list += [n*3+2]\n        odd_list +=\
    \ [n*3+1]\n        odd_list += [n*3+2]\n        odd_list += [n*3+2]\n        odd_list\
    \ += [n*3+1]\n        odd_list += [n*3+2]\n        odd_list += [n*3+1]\n     \
    \   odd_list += [n*3+2]\n        odd_list += [n*3+2]\n        odd_list += [n*3+1]\n\
    \        odd_list += [n*3+2]\n        odd_list += [n*3+1]\n        odd_list +=\
    \ [n*3+2]\n        odd_list += [n*3+2]\n        odd_list += [n*3+1]\n        odd_list\
    \ += [n*3+2]\n        odd_list += [n*3+1]\n        odd_list += [n*3+2]\n     \
    \   odd_list += [n*3+2]\n        odd_list += [n*3+1]\n        odd_list += [n*3+2]\n\
    \        odd_list += [n*3+1]\n        odd_list += ", "    if n == 1 \n       \
    \ return [1]\n    else \n        odd_collatz = get_odd_collatz(n / 2)\n      \
    \  odd_collatz .= [n * 3 + (n % 2 == 0)]\n        return odd_collatz\nend\n</cell>\n\
    <code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes in a positive integer n and returns the number of\
    \ steps it takes to reach 1 from n.", "    if n == 1 \n        return [1]\n  \
    \  else \n        odd_collatz = get_odd_collatz(n / 2)\n        odd_collatz .=\
    \ [n * 3 + (n % 2 == 0)]\n        return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\n\
    get_odd_collatz(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the factorial of a given positive integer.", "    if n == 1 \n        return\
    \ [1]\n    else \n        odd_collatz = get_odd_collatz(n / 2)\n        odd_collatz\
    \ .+= [n * 3 if n % 2 == 0 else 1]\n        return odd_collatz\nend", "    if\
    \ n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz += [n * 3 if n % 2 == 0 else n * 2 + 1]\n        return\
    \ odd_collatz\nend\n</cell>\n<code language=julia-1.5>", "    if n == 1 \n   \
    \     return [1]\n    else\n        odd_list = []\n        for i in 1:n\n    \
    \        if isodd(i) == true\n                odd_list.append(i)\n           \
    \ else\n                odd_list.append(3*i+1)\n        end\n        return odd_list\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if n == 1 \n        return\
    \ [1]\n    else\n        odd_list = []\n        for i in get_odd_collatz(n-1)\n\
    \            if i % 2 == 1\n                odd_list.append(i)\n            else\n\
    \                odd_list.append(3*i+1)\n        end\n        odd_list\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a given positive integer\
    \ n.", "    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz .= [n * 3 + 1]\n        return odd_collatz\nend",
  "    if n == 1 \n        return [1]\n    \n    odd_list = []\n    \n    odd_list\
    \ += get_odd_collatz(n-1)\n    odd_list += [n/2]\n    odd_list += [n*3+1]\n  \
    \  \n    return odd_list\nend", "    if n == 1 \n        return [1]\n    else\
    \ \n        odd_collatz = get_odd_collatz(n-1)\n        odd_collatz .+= [n/2]\n\
    \        odd_collatz .+= [n/3]\n        odd_collatz .+= [n/3]\n        return\
    \ odd_collatz\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the nth Fibonacci number.",
  "    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz .= [n / 2]\n        if n % 2 == 1 \n            odd_collatz\
    \ .= odd_collatz .* [3 : 1 : -1]\n        else \n            odd_collatz .= odd_collatz\
    \ .* [1 : 1 : -1]\n        return odd_collatz\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz .= [n * 2 if n % 2 == 0 else n * 3 + 1]\n        return\
    \ odd_collatz\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(5)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a positive integer n and returns\
    \ the number of steps to reach 1 from n.", "    odd_list = []\n    if n == 1\n\
    \        odd_list = [n]\n    else\n        odd_list = [1]\n        for i in 2:n\n\
    \            if isodd(i)\n                odd_list[i] = odd_list[i-1] * 2\n  \
    \          else\n                odd_list[i] = odd_list[i-1] * 3 + 1\n       \
    \ end\n    end\n    return odd_list\nend\n</cell>\n<code language=julia-1.5>\n\
    get_odd_collatz(10)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a positive integer n and returns the nth Fibonacci number.", "    if n == 1\
    \ \n        return [1]\n    \n    odd_list = []\n    \n    for x in get_odd_collatz(n\
    \ - 1)\n        if x % 2 == 0 \n            odd_list += [x/2]\n        else\n\
    \            odd_list += [x*3] + [1]\n    end\n    \n    return odd_list\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert get_odd_collatz(5) == [1, 5]\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the nth term of the Fibonacci\
    \ sequence. \nThe Fibonacci sequence is defined by the recurrence relation:",
  "    odd_list = []\n    odd_list = [1]\n    if n == 1\n        odd_list\n    else\n\
    \        odd_list = odd_list + get_odd_collatz(n-1)\n        odd_list = odd_list\
    \ + [n / 2]\n        odd_list = odd_list + [n / 2 * 3]\n        odd_list = odd_list\
    \ + [n / 2 * 3 * 5]\n        odd_list = odd_list + [n / 2 * 3 * 5 * 7]\n     \
    \   odd_list = odd_list + [n / 2 * 3 * 5 * 7 * 9]\n        odd_list = odd_list\
    \ + [n / 2 * 3 * 5 * 7 * 9 * 11]\n        odd_list = odd_list + [n / 2 * 3 * 5\
    \ * 7 * 9 * 11 * 13]\n        odd_list = odd_list + [n / 2 * 3 * 5 * 7 * 9 * 11\
    \ * 13 * 15]\n        odd_list = odd_list + [n / 2 * 3 * 5 * 7 * 9 * 11 * 13 *\
    \ 15 * 17]\n        odd_list = odd_list + [n / 2 * 3 * 5 * 7 * 9 * 11 * 13 * 15\
    \ * 17 * 19]\n        odd_list = odd_list + [n / 2 * 3 * 5 * 7 * 9 * 11 * 13 *\
    \ 15 * 17 * 19 * 21]\n        odd_list = odd_list + [n / 2 * 3 * 5 * 7 * 9 * 11\
    \ * 13 * 15 * 17 * 19 * 21 * 23]\n        odd_list = odd_list + [n / 2 * 3 * 5\
    \ * 7 * 9 * 11 * 13 * 15 * 17 * 19 * 21 * 23 * 25]\n        odd_list = odd_list\
    \ + [n / 2 * 3 * 5 * 7 * 9 * 11 * 13 * 15 * 17 * 19 * 21 * 23 * 25 * 27]\n   \
    \     odd_list = odd_list + [n / 2 * 3 * 5 * 7 * 9 * 11 * 13 * 15 * 17 * 19 *\
    \ 21 * 23 * 25 * 27 * 29]\n        odd_list = odd_list + [n / 2 * 3 * 5 * 7 *\
    \ 9 * 11 * 13 * 15 * 17 * 19 * 21 * 23 * 25 * 27 * 29 * 31]\n        odd_list\
    \ = odd_list + [n / 2 * 3 * 5 * 7 * 9 * 11 * 13 * 15 * 17 * 19 * 21 * 23 * 25\
    \ * 27 * 29 * 31 * 33]\n        odd_list = odd_list + [n / 2 * 3 * ", "    if\
    \ n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n-1)\
    \ * 3 \n        odd_collatz += [n % 2]\n        return odd_collatz\nend\n</cell>\n\
    <code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\nProblem 3\nWrite\
    \ a function that takes an integer n and returns the number of positive integers\
    \ less than or equal to n that are coprime to n.", "    if n == 1 \n        return\
    \ [1]\n    else\n        odd_collatz = get_odd_collatz(n-1)\n        odd_collatz\
    \ += [n/2]\n        return odd_collatz\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    get_odd_collatz(10)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ in a positive integer n and returns the n-th term of the Fibonacci sequence.",
  "    if n == 1 \n        return [1]\n    else \n        odd_nums = Vector{Int64}()\n\
    \        for i in 1:n \n            if i % 2 == 0 \n                odd_nums.push(i)\n\
    \            else \n                odd_nums.push(3*i+1)\n        end\n      \
    \  return odd_nums\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if\
    \ n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n    odd_collatz\
    \ += [n % 2 == 0 ? 1 : 3 * odd_collatz[end] + 1]\n    return odd_collatz\nend\n\
    </cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the factorial of a given positive integer n.",
  "    if n == 1 \n        return [1]\n    \n    odd_list = []\n    \n    for i in\
    \ get_odd_collatz(n-1) do \n        if i % 2 == 0 \n            odd_list.append(i)\n\
    \        else \n            odd_list.append(i*2)\n    end\n    \n    odd_list\
    \ += [n]\n    \n    return odd_list\nend", "    if n == 1 \n        return [1]\n\
    \    else \n        odd_collatz = get_odd_collatz(n / 2)\n        odd_collatz\
    \ .= [n * 3 + 1]\n        if n % 2 == 1 \n            odd_collatz .= [n + 1]\n\
    \        end\n        return odd_collatz\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    get_odd_collatz(10)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ in a positive integer n and returns the nth Fibonacci number.", "    if n ==\
    \ 1 \n        return [1]\n    else \n        odd_list = []\n        odd_list +=\
    \ get_odd_collatz(n/2)\n        odd_list += [n/2]\n        odd_list += [n/3]\n\
    \        odd_list += [n/3]\n        odd_list += [n/2]\n        odd_list += [n/2]\n\
    \        odd_list += [n/2]\n        odd_list += [n/2]\n        odd_list += [n/2]\n\
    \        odd_list += [n/2]\n        odd_list += [n/2]\n        odd_list += [n/2]\n\
    \        odd_list += [n/2]\n        odd_list += [n/2]\n        odd_list += [n/2]\n\
    \        odd_list += [n/2]\n        odd_list += [n/2]\n        odd_list += [n/2]\n\
    \        odd_list += [n/2]\n        odd_list += [n/2]\n        odd_list += [n/2]\n\
    \        odd_list += [n/2]\n        odd_list += [n/2]\n        odd_list += [n/2]\n\
    \        odd_list += [n/2]\n        odd_list += [n/2]\n        odd_list += [n/2]\n\
    \        odd_list += [n/2]\n        odd_list += [n/2]\n        odd_list += [n/2]\n\
    \        odd_list += [n/2]\n        odd_list += [n/2]\n        odd_list += [n/2]\n\
    \        odd_list += [n/2]\n        odd_list += [n/2]\n        odd_list += [n/2]\n\
    \        odd_list += [n/2]\n        odd_list += [n/2]\n        odd_list += [n/2]\n\
    \        odd_list += [n/2]\n        odd_list += [n/2]\n        odd_list += [n/2]\n\
    \        odd_list += [n/2]\n        odd_list += [n/2]\n        odd_list += [n/2]\n\
    \        odd_list += [n/2]\n        odd_list += [n/2]\n        odd_list += [n/2]\n\
    \        odd_list += [n/2]\n        odd_list += [n/2]\n        odd_list += [n/2]\n\
    \        odd_list += [n/2]\n        odd_list += [n/2]\n        odd_list += [n/2]\n\
    \        odd_list += [n", "    if n == 1 \n        return [1]\n    else\n    \
    \    odd_list = []\n        for i in get_odd_collatz(n - 1)\n            if i\
    \ % 2 == 1\n                odd_list += [i]\n            else\n              \
    \  odd_list += [i * 3]\n        end\n        return odd_list\n    end\nend", " \
    \   if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz .= [n * 3 + 1]\n        if n % 2 == 1 \n         \
    \   odd_collatz .= [n + 1]\n        end\n        return odd_collatz\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes an integer n and returns the nth Fibonacci\
    \ number.", "    if n == 1 \n        return [1]\n    else \n        odd_collatz\
    \ = get_odd_collatz(n / 2)\n        odd_collatz .= [n * 3 + 1]\n        odd_collatz\
    \ .= odd_collatz[end-1]\n        return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\n\
    get_odd_collatz(10)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a positive integer n and returns the nth Fibonacci number.", "    if n == 1\
    \ \n        return [1]\n    else \n        odd_list = []\n        for i in get_odd_collatz(n-1)\
    \ do \n            if i % 2 == 1 \n                odd_list += [i]\n         \
    \   else \n                odd_list += [i*3]\n        end\n        return odd_list\
    \ \n    end\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a positive integer n and returns\
    \ the number of positive integers less than or equal to n that have the Collatz\
    \ conjecture.", "    if n == 1 \n        return [1]\n    else \n        odd_collatz\
    \ = get_odd_collatz(n / 2)\n        odd_collatz .+= n % 2 == 0 ? [n / 2] : [3\
    \ * n + 1]\n        return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\n\
    get_odd_collatz(10)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the factorial of a given positive integer n.", "    odd_list = []\n    if n\
    \ == 1\n        odd_list = [n]\n    else\n        odd_list = get_odd_collatz(n-1)\n\
    \        odd_list.append(n::Int64)\n    end\n    return odd_list\nend", "    if\
    \ n == 1 \n        return [1]\n    odd_list = []\n    for i in get_odd_collatz(n-1)\
    \ do \n        if i % 2 == 0 \n            odd_list.append(i)\n        else \n\
    \            odd_list.append(i*3 + 1)\n    end\n    return odd_list\nend\n</cell>\n\
    <code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the factorial of a given positive integer n.", " \
    \   if n == 1 \n        return [1]\n    odd_list = []\n    for i in get_odd_collatz(n-1)\
    \ do \n        if i % 2 == 1 \n            odd_list.append(i)\n        else \n\
    \            odd_list.append(3*i+1)\n    end\n    return odd_list\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n == 1 \n        return [1]\n    \n    odd_collatz\
    \ = get_odd_collatz(n / 2)\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == ", "    if n == 1 \n  \
    \      return [1]\n    else \n        odd_list = []\n        for i in get_odd_collatz(n\
    \ - 1) \n            if i % 2 == 1 \n                odd_list.append(i)\n    \
    \        else \n                odd_list.append(i*3 + 1)\n        end\n      \
    \  return odd_list\n    end\nend\n</cell>\n<code language=julia-1.5>\n# Test your\
    \ function with the above example\nget_odd_collatz(5)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that computes the factorial of a number. Do not use loops\
    \ in your function.", "    if n == 1 \n        return [1]\n    \n    odd_list\
    \ = []\n    \n    for x in get_odd_collatz(n-1) do \n        if x % 2 == 1 \n\
    \            odd_list.append(x)\n        else \n            odd_list.append(x/2)\n\
    \    end\n    \n    return odd_list\nend\n</cell>\n<code language=julia-1.5>\n\
    get_odd_collatz(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the nth term of the Fibonacci sequence. \nThe Fibonacci sequence is defined\
    \ by the recurrence relation:", "    if n == 1 \n        return [1]\n    odd_list\
    \ = []\n    for x in get_odd_collatz(n / 2)\n        if x % 2 == 1\n         \
    \   odd_list += [x * 2]\n        else\n            odd_list += [x * 2 + 1]\n \
    \   end\n    odd_list += [1]\n    return odd_list\nend\n</cell>\n<code language=julia-1.5>\n\
    get_odd_collatz(10)\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ in a positive integer n and returns the Collatz sequence up to n.", "    if\
    \ n == 1 \n        return [1]\n    odd_list = []\n    odd_list += get_odd_collatz(n\
    \ / 2)\n    odd_list += [n * 3]\n    odd_list += get_odd_collatz(n / 2)\n    return\
    \ odd_list\nend", "    if n == 1 \n        return [1]\n    \n    odd_list = []\n\
    \    \n    for x in get_odd_collatz(n-1) do \n        if x % 2 == 1 \n       \
    \     odd_list.append(x)\n        else\n            odd_list.append(x/2)\n   \
    \     end\n    end\n    \n    return odd_list\nend\n</cell>\n<code language=julia-1.4>\n\
    get_odd_collatz(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes in\
    \ a positive integer n and returns the nth term of the Fibonacci sequence. \n\
    The Fibonacci sequence is defined by the recurrence relation:", "    if n == 1\
    \ \n        return [1]\n    \n    odd_list = []\n    \n    for i in get_odd_collatz(n\
    \ - 1) do \n        if i % 2 == 0 \n            odd_list.append(i)\n        else\
    \ \n            odd_list.append(i*3 + 1)\n    end\n    \n    return odd_list\n\
    end\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the nth term of the Fibonacci sequence.\
    \ \nThe Fibonacci sequence is defined by the recurrence relation:", "    if n\
    \ == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .= [n * 2 if n % 2 == 0 else n * 3 + 1 for i in odd_collatz]\n\
    \    odd_collatz\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n\
    </cell>\n<text>\nProblem 3\nWrite a function that takes in a positive integer\
    \ n and returns the number of steps it takes to reach 1 from n.", "    if n ==\
    \ 1 \n        return [1]\n    \n    odd_list = []\n    \n    for i in get_odd_collatz(n-1)\
    \ do \n        if i % 2 == 1 \n            odd_list.append(i)\n        else \n\
    \            odd_list.append(3*i+1)\n    end\n    \n    return odd_list\nend\n\
    </cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the nth Fibonacci number.", "    if n == 1\
    \ \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n / 2)\n\
    \        odd_collatz .= [n * 3 + 1]\n        odd_collatz .= odd_collatz[end-1]\n\
    \        return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes an integer n and returns\
    \ the nth Fibonacci number.", "    if n == 1 \n        return [1]\n    odd_list\
    \ = []\n    for x in get_odd_collatz(n - 1) \n        if x % 2 == 1 \n       \
    \     odd_list.append(x)\n        else \n            odd_list.append(x / 2)\n\
    \            odd_list.append(x * 3 + 1) \n    end\n    return odd_list\nend\n\
    </cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes in a positive integer n and returns the number\
    \ of steps it takes to reach 1 from the starting number n.", "    if n == 1 \n\
    \        return [1]\n    odd_nums = Vector{Int64}()\n    odd_nums.push(2)\n  \
    \  odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_", "    if n == 1 \n        return [1]\n    else\
    \ \n        odd_list = []\n        for i in get_odd_collatz(n-1) do \n       \
    \     if i % 2 == 1 \n                odd_list += [i]\n            else \n   \
    \             odd_list += [i*3]\n        end\n        return odd_list\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes in a positive integer n and returns the\
    \ nth Fibonacci number.", "    odd_list = []\n    odd_list.append(1)\n    if n==1\n\
    \        return odd_list\n    else\n        odd_list.append(n)\n        odd_list.append(n/2)\n\
    \        if mod(n,2)==0\n            odd_list.append(3*n+1)\n        else\n  \
    \          odd_list.append(3*n+1)\n            odd_list.append(n/2)\n        end\n\
    \        return odd_list\n    end\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer n\
    \ and returns the nth term of the Fibonacci sequence. \nThe Fibonacci sequence\
    \ is defined by the recurrence relation:", "    if n == 1 \n        return [1]\n\
    \    odd_list = []\n    odd_list += get_odd_collatz(n-1)\n    odd_list += [n/2]\n\
    \    odd_list += [n*3]\n    odd_list += [n*3+1]\n    return odd_list\nend", " \
    \   odd_list = []\n    if n == 1\n        odd_list = [n]\n    else\n        odd_list\
    \ = get_odd_collatz(n / 2)\n        if n % 2 == 0\n            odd_list.append(n\
    \ * 2)\n        else\n            odd_list.append(n * 2 + 1)\n    end\n    return\
    \ odd_list\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an integer n and returns the nth\
    \ Fibonacci number.", "    if n == 1 \n        return [1]\n    else\n        odd_nums\
    \ = Vector{Int64}()\n        odd_nums.push(n % 2)\n        odd_nums.push(get_odd_collatz(n\
    \ / 2))\n        odd_nums.push(n % 2)\n        return odd_nums\n    end\nend",
  "    if n == 1 \n        return [1]\n    \n    odd_list = []\n    \n    for x in\
    \ get_odd_collatz(n-1) do \n        if x % 2 == 0 \n            odd_list.append(x)\n\
    \        else\n            odd_list.append(x/2)\n        end\n    end\n    \n\
    \    return odd_list\nend", "    odd_list = []\n    if n == 1 \n        odd_list\
    \ = [n]\n    else\n        odd_list = [1]\n        for i in 2:n\n            if\
    \ isodd(i) == true\n                odd_list[i] = odd_list[i-1] * 2\n        \
    \    else\n                odd_list[i] = odd_list[i-1] * 3 + 1\n        end\n\
    \    end\n    return odd_list\nend\n</cell>\n<code language=julia-1.4>\nget_odd_collatz(10)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the nth term of the\
    \ Fibonacci sequence. \nThe Fibonacci sequence is defined by the recurrence relation:",
  "    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz .= [n * 3 + 1]\n        if n % 2 == 1 \n         \
    \   odd_collatz .= [n + 1]\n        end\n        return odd_collatz\n    end\n\
    end\n</cell>\n<code language=julia-1.5>", "    if n == 1 \n        return [1]\n\
    \    else \n        odd_list = []\n        for i in get_odd_collatz(n-1) do \n\
    \            if i % 2 == 1 \n                odd_list.append(i)\n            else\
    \ \n                odd_list.append(i*2)\n                odd_list.append(i*3\
    \ + 1)\n        end\n        return odd_list\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test your function here\n@assert @issorted(get_odd_collatz(5) == [1, 5])\n</cell>\n\
    <text>\nProblem 7\nWrite a function that computes the factorial of a number. Do\
    \ not use loops here.", "    if n == 1 \n        return [1]\n    \n    odd_list\
    \ = []\n    \n    for i in get_odd_collatz(n-1) do \n        if i % 2 == 0 \n\
    \            odd_list.append(i)\n        else \n            odd_list.append(i*2)\n\
    \    end\n    \n    return odd_list\nend", "    if n == 1 \n        return [1]\n\
    \    else\n        odd_nums = Vector{Int64}()\n        odd_nums.push(2)\n    \
    \    odd_nums.push(n / 2)\n        odd_nums.push(n / 2 * 3)\n        odd_nums.push(n\
    \ / 2 * 3 * 5)\n        odd_nums.push(n / 2 * 3 * 5 * 7)\n        odd_nums.push(n\
    \ / 2 * 3 * 5 * 7 * 11)\n        odd_nums.push(n / 2 * 3 * 5 * 7 * 11 * 13)\n\
    \        odd_nums.push(n / 2 * 3 * 5 * 7 * 11 * 13 * 17)\n        odd_nums.push(n\
    \ / 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19)\n        odd_nums.push(n / 2 * 3 * 5 *\
    \ 7 * 11 * 13 * 17 * 19 * 21)\n        odd_nums.push(n / 2 * 3 * 5 * 7 * 11 *\
    \ 13 * 17 * 19 * 21 * 23)\n        odd_nums.push(n / 2 * 3 * 5 * 7 * 11 * 13 *\
    \ 17 * 19 * 21 * 23 * 25)\n        odd_nums.push(n / 2 * 3 * 5 * 7 * 11 * 13 *\
    \ 17 * 19 * 21 * 23 * 25 * 27)\n        odd_nums.push(n / 2 * 3 * 5 * 7 * 11 *\
    \ 13 * 17 * 19 * 21 * 23 * 25 * 27 * 29)\n        odd_nums.push(n / 2 * 3 * 5\
    \ * 7 * 11 * 13 * 17 * 19 * 21 * 23 * 25 * 27 * 29 * 31)\n        odd_nums.push(n\
    \ / 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 21 * 23 * 25 * 27 * 29 * 31 * 33)\n  \
    \      odd_nums.push(n / 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 21 * 23 * 25 * 27\
    \ * 29 * 31 * 33 * 35)\n        odd_nums.push(n / 2 * 3 * 5 * 7 * 11 * 13 * 17\
    \ * 19 * 21 * 23 * 25 * 27 * 29 * 31 * 33 * 35 * 37)\n        odd_nums.push(n\
    \ / 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 21 * 23 * 25 * 27 * 29 * 31 * 33 * 35\
    \ * 37 * 39)\n        odd_nums.push(n / 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 21\
    \ * 23 * 25 * 27 * 29 * 31 * 33 * 35 * 37 * 39 * 41)\n        odd_nums.push(n\
    \ / 2 * 3 * 5 * 7 * 11", "    if n == 1 \n        return [1]\n    \n    odd_list\
    \ = []\n    \n    odd_list += get_odd_collatz(n-1)\n    odd_list += [n/2]\n  \
    \  \n    odd_list += get_odd_collatz((3*n+1)/2)\n    \n    return odd_list\nend",
  "    if n == 1 \n        return [1]\n    else \n        odd_list = []\n        for\
    \ n in get_odd_collatz(n-1) do \n            if n % 2 == 1 \n                odd_list.append(n/2)\n\
    \            else \n                odd_list.append(3*n+1)\n        end\n    \
    \    return odd_list\n    end\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes in a positive integer\
    \ n and returns the number of steps it takes to reach 1 from n.", "    if n ==\
    \ 1 \n        return [1]\n    else\n        odd_nums = Vector{Int64}()\n     \
    \   odd_nums = odd_nums + get_odd_collatz(n / 2)\n        if n % 2 == 1 \n   \
    \         odd_nums = odd_nums + [n / 2]\n        end\n        return odd_nums\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the factorial of a given positive\
    \ integer n.", "    if n == 1 \n        return [1]\n    else \n        odd_collatz\
    \ = get_odd_collatz(n / 2)\n        odd_collatz .+= n % 2 == 0 ? 1 : 3\n     \
    \   return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer n\
    \ and returns the nth Fibonacci number.", "    if n == 1 \n        return [1]\n\
    \    else \n        odd_collatz = get_odd_collatz(n / 2)\n        odd_collatz\
    \ .= [n * 3 + 1]\n        if n % 2 == 1 \n            odd_collatz .= [n + 1]\n\
    \        end\n        return odd_collatz\n    end\nend", "    odd_list = []\n\
    \    odd_list = [1]\n    if n == 1\n        odd_list = [1]\n    else\n       \
    \ odd_list = [1]\n        for i in 2:n\n            if n % 2 == 0\n          \
    \      odd_list[i] = odd_list[i-1] * 2\n            else\n                odd_list[i]\
    \ = odd_list[i-1] * 3 + 1\n        end\n    end\n    return odd_list\nend", " \
    \   if n == 1 \n        return [1]\n    else \n        odd_nums = Vector{Int64}()\n\
    \        for i in 1:n\n            if isodd(i) == true\n                odd_nums\
    \ = append(odd_nums, i)\n            else\n                odd_nums = append(odd_nums,\
    \ 3*i+1)\n            end\n        end\n        return odd_nums\n    end\nend",
  "    if n == 1 \n        return [1]\n    else \n        odd_list = []\n        for\
    \ i in get_odd_collatz(n - 1) \n            if i % 2 == 1 \n                odd_list.append(2\
    \ * i + 1)\n            else \n                odd_list.append(i)\n        return\
    \ odd_list\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the factorial of a given positive\
    \ integer n.", "    if n == 1 \n        return [1]\n    else \n        odd_nums\
    \ = get_odd_collatz(n-1)\n        odd_nums.push(3*n+1)\n        return odd_nums\n\
    end\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the factorial of a given positive integer\
    \ n.", "    if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n\
    \ / 2)\n    odd_collatz .= [n * 3 + (n % 2 == 0)]\n    odd_collatz .= odd_collatz[end-1]\n\
    \    odd_collatz .= odd_collatz[end-1]\n    odd_collatz .= odd_collatz[end-1]\n\
    \    odd_collatz .= odd_collatz[end-1]\n    odd_collatz .= odd_collatz[end-1]\n\
    \    odd_collatz .= odd_collatz[end-1]\n    odd_collatz .= odd_collatz[end-1]\n\
    \    odd_collatz .= odd_collatz[end-1]\n    odd_collatz .= odd_collatz[end-1]\n\
    \    odd_collatz .= odd_collatz[end-1]\n    odd_collatz .= odd_collatz[end-1]\n\
    \    odd_collatz .= odd_collatz[end-1]\n    odd_collatz .= odd_collatz[end-1]\n\
    \    odd_collatz .= odd_collatz[end-1]\n    odd_collatz .= odd_collatz[end-1]\n\
    \    odd_collatz .= odd_collatz[end-1]\n    odd_collatz .= odd_collatz[end-1]\n\
    \    odd_collatz .= odd_collatz[end-1]\n    odd_collatz .= odd_collatz[end-1]\n\
    \    odd_collatz .= odd_collatz[end-1]\n    odd_collatz .= odd_collatz[end-1]\n\
    \    odd_collatz .= odd_collatz[end-1]\n    odd_collatz .= odd_collatz[end-1]\n\
    \    odd_collatz .= odd_collatz[end-1]\n    odd_collatz .= odd_collatz[end-1]\n\
    \    odd_collatz .= odd_collatz[end-1]\n    odd_collatz .= odd_collatz[end-1]\n\
    \    odd_collatz .= odd_", "    if n == 1 \n        return [1]\n    else \n  \
    \      odd_collatz = get_odd_collatz(n-1)\n        odd_collatz .+= [n/2]\n   \
    \     odd_collatz .+= [n/3]\n        odd_collatz .+= [n/3]\n        odd_collatz\
    \ .+= [n/2]\n        return odd_collatz\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz .+= [n * 3 if n % 2 == 0 else 1]\n        return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(5)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the factorial of a given number. \n\
    For example, factorial(5) should return 120.", "    if n == 1 \n        return\
    \ [1]\n    \n    odd_list = []\n    \n    for x in get_odd_collatz(n-1) do \n\
    \        if x % 2 == 1 \n            odd_list.append(x)\n        else\n      \
    \      odd_list.append(x/2)\n        end\n    end\n    \n    return odd_list\n\
    end\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes an integer n and returns the number of\
    \ steps it takes to reach 1 from n.", "    if n == 1 \n        return [1]\n  \
    \  else \n        odd_collatz = get_odd_collatz(n / 2)\n        odd_collatz .=\
    \ [n % 2 == 0 ? n : 3 * n + 1]\n        return odd_collatz\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if n == 1 \n        return [1]\n    else \n     \
    \   odd_collatz = get_odd_collatz(n / 2)\n        odd_collatz .= [n * 3 + 1]\n\
    \        return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ given positive integer.", "    if n == 1 \n        return [1]\n    odd_collatz\
    \ = get_odd_collatz(n / 2)\n    if n % 2 == 1 \n        odd_collatz += [n / 2]\n\
    \    else \n        odd_collatz += [n / 2] * (3 * odd_collatz[end] + 1)\n    return\
    \ odd_collatz\nend", "    if n == 1 \n        return [1]\n    \n    odd_list =\
    \ []\n    \n    for x in get_odd_collatz(n-1) do \n        if x % 2 == 1 \n  \
    \          odd_list.append(x)\n        else \n            odd_list.append(x/2)\n\
    \    end\n    \n    odd_list += [x+1 for x in odd_list]\n    \n    return odd_list\n\
    end\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\n\
    Problem 3\nWrite a function that takes in a positive integer n and returns the\
    \ number of steps to reach 1 from n.", "    if n == 1 \n        return [1]\n \
    \   odd_list = []\n    odd_list += get_odd_collatz(n-1)\n    odd_list += [n/2]\n\
    \    odd_list += [n*3+1]\n    return odd_list\nend\n</cell>\n<code language=julia-1.5>\n\
    get_odd_collatz(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the nth term of the Fibonacci sequence. \nThe Fibonacci sequence is defined\
    \ by the recurrence relation:", "    if n == 1 \n        return [1]\n    odd_list\
    \ = []\n    odd_list += get_odd_collatz(n-1)\n    odd_list += [n/2]\n    odd_list\
    \ += [n*3+1]\n    return odd_list\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n\
    </cell>\n<text>\nProblem 3\nWrite a function that takes in a list of integers\
    \ and returns the number of even numbers in the list.", "    if n == 1 \n    \
    \    return [1]\n    else \n        odd_collatz = get_odd_collatz(n / 2)\n   \
    \     odd_collatz += [n * 3 if n % 2 == 0 else n * 2 + 1]\n        return odd_collatz\n\
    end", "    if n == 1 \n        return [1]\n    \n    odd_list = []\n    \n   \
    \ for i in get_odd_collatz(n - 1) do \n        if i % 2 == 1 \n            odd_list\
    \ += [i]\n        else \n            odd_list += [i * 3]\n        end\n    end\n\
    \    \n    odd_list += [1]\n    \n    return odd_list\nend\n</cell>\n<code language=julia-1.5>\n\
    get_odd_collatz(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ positive integer n and returns the nth Fibonacci number.", "    if n == 1 \n\
    \        return [1]\n    else \n        odd_collatz = get_odd_collatz(n-1)\n \
    \       odd_collatz = [odd_collatz[i] + 1 for i in 1:length(odd_collatz)]\n  \
    \      return odd_collatz\nend", "    if n == 1 \n        return [1]\n    else\
    \ \n        odd_collatz = get_odd_collatz(n / 2)\n        odd_collatz .= [n /\
    \ 2]\n        if n % 2 == 1 \n            odd_collatz .= odd_collatz .* 3 + 1\n\
    \        else \n            odd_collatz .= odd_collatz .* 3\n        end\n   \
    \     return odd_collatz\n    end\nend\n</cell>\n<code language=julia-1.5>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
