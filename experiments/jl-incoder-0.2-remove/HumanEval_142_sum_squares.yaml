name: HumanEval_142_sum_squares
language: jl
prompt: "\"\"\"\"\n    This function will take a list of integers. For all entries\
  \ in the list, the function shall square the integer entry if its index is a \n\
  \    multiple of 3 and will cube the integer entry if its index is a multiple of\
  \ 4 and not a multiple of 3. The function will not \n    change the entries in the\
  \ list whose indexes are not a multiple of 3 or 4. The function shall then return\
  \ the sum of all entries. \n    \n    Examples:\n                \"\"\"\nfunction\
  \ sum_squares(lst::Vector{Int64})::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
  \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
  \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
  \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
  \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t\
  @test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9,\
  \ -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
  \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
  \ == -1448)\nend\n"
completions: ["    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n      \
    \      sum += i\n        end\n    end\n    return sum\nend", "    \n    sum =\
    \ 0\n    for i in lst\n        if i%3==0 || i%4==0\n            sum+=i\n     \
    \   else\n            sum+=i*i\n        end\n    end\n    return sum\nend", " \
    \   sum = 0\n    for i = 1:length(lst)\n        if mod(lst[i], 3) == 0 || mod(lst[i],\
    \ 4) == 0\n            sum += lst[i]\n        end\n    end\n    return sum\nend",
  "    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n            sum +=\
    \ i\n        end\n    end\n    return sum\nend", "    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum+=i^2\n        elseif i%4 == 0\n        \
    \    sum+=i^3\n        else\n            sum+=i\n        end\n    end\n    return\
    \ sum\nend", "    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n   \
    \         sum += i\n        end\n    end\n    return sum\nend", "    sum = 0\n\
    \    for x in lst\n        if x % 3 == 0 || x % 4 == 0\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that will take a list of integers and return a new list where all\
    \ entries are multiplied by 2. \n    \n    Examples:\n                \n     \
    \           \n                \n                \n                \n         \
    \       \n                \n                \n                \n             \
    \   \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n", "    sum = 0\n    for i in lst\n        if\
    \ i%3 == 0\n            sum+=i^2\n        elseif i%4 == 0\n            sum+=i^3\n\
    \        else\n            sum+=i\n        end\n    end\n    return sum\nend",
  "    sum = 0\n    for i = 1:length(lst)\n        if mod(lst[i], 3) == 0\n      \
    \      sum += lst[i]^2\n        elseif mod(lst[i], 4) == 0\n            sum +=\
    \ lst[i]^3\n        else\n            sum += lst[i]^4\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a list of integers and returns the sum of the squares of the integers in the\
    \ list. \n    \n    Examples:\n                \n                \n    \"\"\"",
  "    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n            sum+=i\n\
    \        else\n            sum+=i*i\n        end\n    end\n    return sum\nend",
  "    \n    sum = 0\n    for i in lst\n        if i%3 == 0 || i%4 == 0\n        \
    \    sum += i\n        end\n    end\n    return sum\nend", "    sum = 0\n    for\
    \ i in lst\n        if i%3 == 0\n            sum = sum + i*i\n        elseif i%4\
    \ == 0\n            sum = sum + i*i*i\n        else\n            sum = sum + i\n\
    \        end\n    end\n    return sum\nend\n    \"\"\"\n    \n    \n    \"\"\"\
    \n    This function will take a list of integers. For all entries in the list,\
    \ the function shall square the integer entry if its index is a \n    multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n    change the entries in the list\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \n    \n    Examples:\n                \"\"\"", "    sum\
    \ = 0\n    for i in lst\n        if i%3 == 0\n            sum = sum + i^2\n  \
    \      elseif i%4 == 0\n            sum = sum + i^3\n        else\n          \
    \  sum = sum + i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25",
  "    sum = 0\n    for i in lst\n        if i%3 == 0 && i%4 == 0\n            sum\
    \ += i\n        elseif i%3 == 0\n            sum += i*i\n        elseif i%4 ==\
    \ 0\n            sum += i*i*i\n        end\n    end\n    return sum\nend", " \
    \   sum = 0\n    for i in lst\n        if i%3 == 0\n            sum = sum + i^2\n\
    \        elseif i%4 == 0\n            sum = sum + i^3\n        else\n        \
    \    sum = sum + i\n        end\n    end\n    return sum\nend", "    sum = 0\n\
    \    for x in lst\n        if mod(x,3)==0 || mod(x,4)==0\n            sum += x\n\
    \        else\n            sum *= x\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a list of integers and returns the product of all the integers in\
    \ the list. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the product of\
    \ all the entries. \nThe function shall not change the entries in the list whose\
    \ indexes are a multiple of 3 or 4. The function shall then return the product\
    \ of all the entries. \nThe function shall not change the entries in the list\
    \ whose indexes are a multiple of 3 or 4 and a multiple of 5. The function shall\
    \ then return the product of all the entries. \nThe function shall not change\
    \ the entries in the list whose indexes are a multiple of 3 or 4 and a multiple\
    \ of 5 and a multiple of 7. The function shall then return the product of all\
    \ the entries. \nThe function shall not change the entries in the list whose indexes\
    \ are a multiple of 3 or 4 and a multiple of 5 and a multiple of 7 and a multiple\
    \ of 9. The function shall then return the product of all the entries. \nThe function\
    \ shall not change the entries in the list whose indexes are a multiple of 3 or\
    \ 4 and a multiple of 5 and a multiple of 7 and a multiple of 9 and a multiple\
    \ of 11. The function shall then return the product of all the entries. \nThe\
    \ function shall not change the entries in the list whose indexes are a multiple\
    \ of 3 or 4 and a multiple of 5 and a multiple of 7 and a multiple of 9 and a\
    \ multiple of 11 and a multiple of 13. The function shall then return the product\
    \ of all the entries. \nThe function shall not change the entries in the list\
    \ whose indexes are a multiple of 3 or 4 and a multiple of 5 and a multiple of\
    \ 7 and a multiple of 9 and a multiple of 11 and a multiple of 13 and a multiple\
    \ of 15. The function shall then return the product of all the entries. \nThe\
    \ function shall not change the entries in the list whose indexes are a multiple\
    \ of 3 or 4 and a multiple of 5 and a multiple of 7 and a multiple of 9 and a\
    \ multiple of 11 and a multiple of 13 and a multiple of 15 and a multiple of 17.\
    \ The function shall then return the product of all the entries. \nThe function\
    \ shall not change the entries in the list whose indexes are a multiple of 3 or\
    \ 4 and a multiple of 5 and a multiple of 7 and a multiple of 9 and a multiple\
    \ of 11 and a multiple of 13 and a multiple of 15 and a multiple of 17 and a multiple\
    \ of 19", "    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum\
    \ = sum + i^2\n        elseif i%4 == 0\n            sum = sum + i^3\n        else\n\
    \            sum = sum + i\n        end\n    end\n    return sum\nend", "    sum\
    \ = 0\n    for i in lst\n        if i%3==0 || i%4==0\n            sum+=i\n   \
    \     else\n            sum+=i*i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a list of integers and returns\
    \ the sum of the squares of the integers in the list if the integer is a multiple\
    \ of 3 or 4 and 0 otherwise. \nThe function shall not change the entries in the\
    \ list whose indexes are not a multiple of 3 or 4. The function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the ",
  "    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum = sum + i^2\n\
    \        elseif i%4 == 0\n            sum = sum + i^3\n        else\n        \
    \    sum = sum + i\n        end\n    end\n    return sum\nend", "    sum = 0\n\
    \    for x in lst\n        if x % 3 == 0\n            sum += x^2\n        elseif\
    \ x % 4 == 0\n            sum += x^3\n        else\n            sum += x\n   \
    \     end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3,4,5])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a list of integers\
    \ and return a list of all integers whose square is less than or equal to 100.\
    \ \n    \n    Examples:\n                [1,2,3,4,5,6,7,8,9,10] --> [1,2,3,4,5,6,7,8,9,10]\n\
    \                [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20] --> [1,2,3,4,5,6,7,8,9,10]\n\
    \                [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\n\
    \                [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\
    \ --> []\n                [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,",
  "    sum = 0\n    for i = 1:length(lst)\n        if mod(i, 3) == 0 || mod(i, 4)\
    \ == 0\n            sum += lst[i]\n        end\n    end\n    return sum\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a list of integers\
    \ and a number as input. The function shall then return the sum of the integers\
    \ in the list whose indexes are a multiple of 3 or 4 and less than the number\
    \ input. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of ", "    sum = 0\n    for i in lst\n        if i%3 == 0\n\
    \            sum = sum + i*i\n        elseif i%4 == 0\n            sum = sum +\
    \ i*i*i\n        else\n            sum = sum + i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that will take a list of integers\
    \ and return a new list where all entries are multiplied by a constant factor.\
    \ \nThe function shall then return the new list. \nThe constant factor shall be\
    \ an integer.", "    sum = 0\n    for x in lst\n        if x % 3 == 0 && x % 4\
    \ == 0\n            sum += x\n        else\n            sum *= x\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.3>\nsum_squares([1,2,3,4,5])\n\
    </cell>\n<code language=julia-1.3>\nsum_squares([1,2,3,4,5,6,7,8,9])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a list of integers and returns\
    \ the sum of the squares of the integers in the list. \n    \n    Examples:\n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n", "    sum = 0\n    for x in lst\n        if x % 3 == 0 && x % 4 == 0\n\
    \            sum += x\n        else\n            sum *= x\n        end\n    end\n\
    \    return sum\nend", "    sum = 0\n    for i in lst\n        if i%3 == 0\n \
    \           sum = sum + i^2\n        elseif i%4 == 0\n            sum = sum +\
    \ i^3\n        else\n            sum = sum + i\n        end\n    end\n    return\
    \ sum\nend", "    sum = 0\n    for i in lst\n        if i%3 == 0\n           \
    \ sum = sum + i^2\n        elseif i%4 == 0\n            sum = sum + i^3\n    \
    \    else\n            sum = sum + i\n        end\n    end\n    return sum\nend",
  "    sum = 0\n    for x in lst\n        if x % 3 == 0 && x % 4 == 0\n          \
    \  sum += x\n        else\n            sum *= x\n        end\n    end\n    return\
    \ sum\nend", "    sum = 0\n    for i = 1:length(lst)\n        if mod(lst[i], 3)\
    \ == 0\n            sum = sum + lst[i]^2\n        elseif mod(lst[i], 4) == 0\n\
    \            sum = sum + lst[i]^3\n        else\n            sum = sum + lst[i]^4\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that takes a list of integers and returns the product of all entries\
    \ in the list. The function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the product of\
    \ all entries. \n    \n    Examples:\n                \n    \"\"\"", "    sum\
    \ = 0\n    for x in lst\n        if x % 3 == 0 || x % 4 == 0\n            sum\
    \ += x\n        else\n            sum *= x\n        end\n    end\n    return sum\n\
    end", "    sum = 0\n    for x in lst\n        if x % 3 == 0 || x % 4 == 0\n  \
    \          sum += x\n        end\n    end\n    return sum\nend", "    sum = 0\n\
    \    for index in lst \n        if index % 3 == 0 \n            sum += index^2\
    \ \n        else \n            sum += index^3 \n        end\n    end\n    return\
    \ sum\nend", "    sum = 0\n    for i = 1:length(lst)\n        if mod(lst[i], 3)\
    \ == 0\n            sum += lst[i]^2\n        elseif mod(lst[i], 4) == 0\n    \
    \        sum += lst[i]^3\n        else\n            sum += lst[i]^4\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.4>\nsum_squares([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.4>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11])\n</cell>\n\
    <code language=julia-1.4>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12])\n</cell>\n\
    <code language=julia-1.4>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13])\n</cell>\n\
    <code language=julia-1.4>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\n</cell>\n\
    <code language=julia-1.4>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    </cell>\n<code language=julia-1.4>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.4>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.4>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<code language=julia-1.4>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    </cell>\n<code language=julia-1.4>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.4>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<code language=julia-1.4>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    </cell>\n<code language=julia-1.4>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n\
    </cell>\n<code language=julia-1.4>\nsum_squares([", "    sum = 0\n    for i in\
    \ lst\n        if i%3==0 || i%4==0\n            sum += i\n        end\n    end\n\
    \    return sum\nend", "    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n\
    \            sum += i\n        end\n    end\n    return sum\nend", "    \n   \
    \ sum = 0\n    for x in lst\n        if x % 3 == 0 && x % 4 == 0\n           \
    \ sum += x\n        else\n            sum *= x\n        end\n    end\n    return\
    \ sum\nend", "    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n   \
    \         sum+=i\n        end\n    end\n    return sum\nend", "    \n    sum =\
    \ 0\n    for i = 1:length(lst)\n        if mod(i, 3) == 0\n            sum = sum\
    \ + lst[i]^2\n        elseif mod(i, 4) == 0\n            sum = sum + lst[i]^3\n\
    \        else\n            sum = sum + lst[i]^4\n        end\n    end\n    return\
    \ sum\nend", "    sum = 0\n    for i in lst\n        if i%3 == 0\n           \
    \ sum = sum + i^2\n        elseif i%4 == 0\n            sum = sum + i^3\n    \
    \    else\n            sum = sum + i\n        end\n    end\n    return sum\nend",
  "    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n            sum +=\
    \ i\n        end\n    end\n    return sum\nend\n    \"\"\"\n    sum = 0\n    for\
    \ i in lst\n        if i%3==0 or i%4==0\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9])\n</cell>\n\
    <code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9])\n</cell>\n\
    <code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9])\n</cell>\n\
    <code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9])\n</cell>\n\
    <code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9])\n</cell>\n\
    <code language=julia-1.5>\nsum_squares([1,2,", "    sum = 0\n    for i = 1:length(lst)\n\
    \        if mod(lst[i], 3) == 0\n            sum = sum + lst[i]^2\n        elseif\
    \ mod(lst[i], 4) == 0\n            sum = sum + lst[i]^3\n        else\n      \
    \      sum = sum + lst[i]^4\n        end\n    end\n    return sum\nend", "   \
    \ \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n            sum+=i\n\
    \        else\n            sum+=i*i\n        end\n    end\n    return sum\nend",
  "    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n            sum +=\
    \ i^2\n        else\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.0>\nsum_squares([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers and\
    \ returns the sum of the squares of the integers in the list. \n    \n    Examples:\n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                ", "    sum = 0\n    for i in lst\n        if i%3\
    \ == 0\n            sum = sum + i^2\n        elseif i%4 == 0\n            sum\
    \ = sum + i^3\n        else\n            sum = sum + i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a list of integers\
    \ and will return the sum of all entries in the list except for the entries whose\
    \ indexes are multiples of 3 and 4. The function shall not change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries.", "    sum = 0\n    for i in lst\n        if\
    \ i%3 == 0 && i%4 == 0\n            sum += i\n        else\n            sum +=\
    \ i*i\n        end\n    end\n    return sum\nend", "    sum = 0\n    for i in\
    \ lst\n        if i%3==0 || i%4==0\n            sum+=i\n        else\n       \
    \     sum+=i*i\n        end\n    end\n    return sum\nend", "    sum = 0\n   \
    \ for i in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4\
    \ == 0\n            sum += i*i*i\n        else\n            sum += i\n       \
    \ end\n    end\n    return sum\nend", "    sum = 0\n    for i in lst\n       \
    \ if i%3 == 0\n            sum+=i^2\n        elseif i%4 == 0\n            sum+=i^3\n\
    \        else\n            sum+=i\n        end\n    end\n    return sum\nend",
  "    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum = sum + i^2\n\
    \        elseif i%4 == 0\n            sum = sum + i^3\n        else\n        \
    \    sum = sum + i\n        end\n    end\n    return sum\nend", "    sum = 0\n\
    \    for i in lst\n        if i%3 == 0\n            sum += i*i\n        elseif\
    \ i%4 == 0\n            sum += i*i*i\n        end\n    end\n    return sum\nend",
  "    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum = sum + i^2\n\
    \        elseif i%4 == 0\n            sum = sum + i^3\n        else\n        \
    \    sum = sum + i\n        end\n    end\n    return sum\nend", "    sum = 0\n\
    \    for i = 1:length(lst)\n        if mod(lst[i], 3) == 0\n            sum +=\
    \ lst[i]^2\n        elseif mod(lst[i], 4) == 0\n            sum += lst[i]^3\n\
    \        else\n            sum += lst[i]^4\n        end\n    end\n    return sum\n\
    end", "    sum = 0\n    for i = 1:length(lst)\n        if mod(lst[i], 3) == 0\n\
    \            sum += lst[i]^2\n        elseif mod(lst[i], 4) == 0\n           \
    \ sum += lst[i]^3\n        else\n            sum += lst[i]\n        end\n    end\n\
    \    return sum\nend", "    sum = 0\n    for i in lst\n        if i%3 == 0\n \
    \           sum += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n  \
    \      else\n            sum += i\n        end\n    end\n    return sum\nend",
  "    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n            sum+=i\n\
    \        else\n            sum+=i*i\n        end\n    end\n    return sum\nend",
  "    sum = 0\n    for x in lst\n        if x % 3 == 0 || x % 4 == 0\n          \
    \  sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3,4,5])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a list of integers and\
    \ returns the sum of the squares of the integers in the list. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3 or\
    \ 4.", "    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum =\
    \ sum + i^2\n        elseif i%4 == 0\n            sum = sum + i^3\n        else\n\
    \            sum = sum + i\n        end\n    end\n    return sum\nend", "    \n\
    \    sum = 0\n    for i in lst\n        if i%3 == 0 && i%4 == 0\n            sum\
    \ += i\n        else\n            sum *= i\n        end\n    end\n    return sum\n\
    end", "    sum = 0\n    for x in lst\n        if x % 3 == 0 || x % 4 == 0\n  \
    \          sum += x\n        end\n    end\n    return sum\nend", "    sum = 0\n\
    \    for i in lst\n        if i%3==0 || i%4==0\n            sum += i\n       \
    \ end\n    end\n    return sum\nend", "    sum = 0\n    for i in lst\n       \
    \ if i%3 == 0\n            sum = sum + i*i\n        elseif i%4 == 0\n        \
    \    sum = sum + i*i*i\n        else\n            sum = sum + i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,",
  "    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum += i*i\n  \
    \      elseif i%4 == 0\n            sum += i*i*i\n        else\n            sum\
    \ += i\n        end\n    end\n    return sum\nend", "    sum = 0\n    for i =\
    \ 1:length(lst)\n        if mod(lst[i], 3) == 0 || mod(lst[i], 4) == 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that will take a list of integers and return a list\
    \ of all entries that are divisible by 3 or 4.", "    sum = 0\n    for i = 1:length(lst)\n\
    \        if mod(lst[i], 3) == 0\n            sum = sum + lst[i]\n        elseif\
    \ mod(lst[i], 4) == 0\n            sum = sum + lst[i]\n        else\n        \
    \    sum = sum + lst[i]*lst[i]\n        end\n    end\n    return sum\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a list of integers and returns\
    \ the sum of the squares of the integers in the list. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3 or 4. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3 or 4. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3 or 4. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3 or 4. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3 or 4. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3 or 4. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3 or 4. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3 or 4. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3 or 4. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3 or 4. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3 or 4. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3 or 4. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3 or 4. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3 or 4. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3 or 4. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3 or 4. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list ", "    sum = 0\n    for i in lst\n        if\
    \ i%3 == 0\n            sum+=i^2\n        elseif i%4 == 0\n            sum+=i^3\n\
    \        else\n            sum+=i\n        end\n    end\n    return sum\nend",
  "    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum = sum + i^2\n\
    \        elseif i%4 == 0\n            sum = sum + i^3\n        else\n        \
    \    sum = sum + i\n        end\n    end\n    return sum\nend", "    sum = 0\n\
    \    for x in lst\n        if x % 3 == 0 && x % 4 == 0\n            sum += x\n\
    \        else\n            sum *= x\n        end\n    end\n    return sum\nend",
  "    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n            sum+=i\n\
    \        else\n            sum+=i*i\n        end\n    end\n    return sum\nend",
  "    sum = 0\n    for x in lst\n        if x % 3 == 0 || x % 4 == 0\n          \
    \  sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\n\
    </cell", "    sum = 0\n    for x in lst\n        if x % 3 == 0 && x % 4 == 0\n\
    \            sum += x\n        else\n            sum *= x\n        end\n    end\n\
    \    return sum\nend", "    sum = 0\n    for i in lst\n        if i%3 == 0\n \
    \           sum += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n  \
    \      else\n            sum += i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that will take a list of integers and return\
    \ a list of all entries that are divisible by 3. The function shall not change\
    \ the entries in the list whose indexes are not a multiple of 3. \nThe function\
    \ shall then return the sum of all entries. \nExamples:\n[1,2,3,4,5,6,7,8,9,10]\
    \ --> [3,6,9]\n[1,4,7,10] --> [3,6,9]\n[1,4,7,10,13] --> [3,6,9,13]\n[1,4,7,10,13,16]\
    \ --> [3,6,9,13,16]\n[1,4,7,10,13,16,19] --> [3,6,9,13,16,19]\n[1,4,7,10,13,16,19,22]\
    \ --> [3,6,9,13,16,19,22]\n[1,4,7,10,13,16,19,22,25] --> [3,6,9,13,16,19,22,25]\n\
    [1,4,7,10,13,16,19,22,25,30] --> [3,6,9,13,16,19,22,25,30]\n[1,4,7,10,13,16,19,22,25,30,35]\
    \ --> [3,6,9,13,16,19,22,25,30,35]\n[1,4,7,10,13,16,19,22,25,30,35,40] --> [3,6,9,13,16,19,22,25,30,35,40]\n\
    [1,4,7,10,13,16,19,22,25,30,35,40,45] --> [3,6,9,13,16,19,22,25,30,35,40,45]\n\
    [1,4,7,10,13,16,19,22,25,30,35,40,45,50] --> [3,6,9,13,16,19,22,25,30,35,40,45,50]\n\
    [1,4,7,10,13,16,19,22,25,30,35,40,45,50,55] --> [3,6,9,13,16,19,22,25,30,35,40,45,50,55]\n\
    [1,4,7,10,13,16,19,22,25,30,35,40,45,50,55,60] --> [3,6,9,13,16,19,22,25,30,35,40,45,50,55,60]\n\
    [1,4,7,10,13,16,19,22,25,30,35,40,45,50,55,60,65] --> [3,6,9,13,16,19,22,25,30,35,40,45,50,55,60,65]\n\
    [1,4,7,10,13,16,19,22,", "    sum = 0\n    for i in lst\n        if i%3 == 0\n\
    \            sum = sum + i^2\n        elseif i%4 == 0\n            sum = sum +\
    \ i^3\n        else\n            sum = sum + i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list of\
    \ integers and returns the sum of the squares of the integers in the list. \n\
    The function shall not change the entries in the list whose indexes are not a\
    \ multiple of 3 or 4. The function shall then return the sum of all entries. \n\
    The function shall not change the entries in the list whose indexes are not a\
    \ multiple of 3 or 4. The function shall then return the sum of all entries. \n\
    The function shall not change the entries in the list whose indexes are not a\
    \ multiple of 3 or 4. The function shall then return the sum of all entries. \n\
    The function shall not change the entries in the list whose indexes are not a\
    \ multiple of 3 or 4. The function shall then return the sum of all entries. \n\
    The function shall not change the entries in the list whose indexes are not a\
    \ multiple of 3 or 4. The function shall then return the sum of all entries. \n\
    The function shall not change the entries in the list whose indexes are not a\
    \ multiple of 3 or 4. The function shall then return the sum of all entries. \n\
    The function shall not change the entries in the list whose indexes are not a\
    \ multiple of 3 or 4. The function shall then return the sum of all entries. \n\
    The function shall not change the entries in the list whose indexes are not a\
    \ multiple of 3 or 4. The function shall then return the sum of all entries. \n\
    The function shall not change the entries in the list whose indexes are not a\
    \ multiple of 3 or 4. The function shall then return the sum of all entries. \n\
    The function shall not change the entries in the list whose indexes are not a\
    \ multiple of 3 or 4. The function shall then return the sum of all entries. \n\
    The function shall not change the entries in the list whose indexes are not a\
    \ multiple of 3 or 4. The function shall then return the sum of all entries. \n\
    The function shall not change the entries in the list whose indexes are not a\
    \ multiple of 3 or 4. The function shall then return the sum of all entries. \n\
    The function shall not change the entries in the list whose indexes are not a\
    \ multiple of 3 or 4. The function shall then return the sum of all entries. \n\
    The function shall not change the entries in the list whose indexes are not a\
    \ multiple of 3 or 4. The function shall then return the sum of all entries. \n\
    The function shall not change the entries in the list whose indexes are not a\
    \ multiple of 3 or 4. The function shall then return the sum of all entries. \n\
    The function shall not change the entries in the list whose indexes are not a\
    \ multiple of 3 or 4. The function shall then return the sum of all entries. \n\
    The function shall not change the entries in the list whose indexes are not a\
    \ multiple of 3 or 4. The function ", "    sum = 0\n    for i in lst\n       \
    \ if i%3==0 || i%4==0\n            sum += i\n        end\n    end\n    return\
    \ sum\nend", "    \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n\
    \            sum += i\n        end\n    end\n    return sum\nend", "    sum =\
    \ 0\n    for i in lst\n        if i%3==0 || i%4==0\n            sum+=i\n     \
    \   else\n            sum+=i*i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30])\n\
    </cell>\n<code language=julia-1.5", "    sum = 0\n    for i in lst\n        if\
    \ i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n            sum +=\
    \ i*i\n        else\n            sum += i\n        end\n    end\n    return sum\n\
    end", "    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum = sum\
    \ + i^2\n        elseif i%4 == 0\n            sum = sum + i^3\n        else\n\
    \            sum = sum + i\n        end\n    end\n    return sum\nend", "    sum\
    \ = 0\n    for i in lst\n        if i%3 == 0\n            sum+=i\n        elseif\
    \ i%4 == 0\n            sum+=i*i\n        else\n            sum+=i*i*i\n     \
    \   end\n    end\n    return sum\nend", "    sum = 0\n    for i in lst\n     \
    \   if i%3 == 0\n            sum = sum + i^2\n        elseif i%4 == 0\n      \
    \      sum = sum + i^3\n        else\n            sum = sum + i\n        end\n\
    \    end\n    return sum\nend", "    sum = 0\n    for x in lst\n        if x %\
    \ 3 == 0 || x % 4 == 0\n            sum += x\n        end\n    end\n    return\
    \ sum\nend", "    sum = 0\n    for i in lst\n        if i%3 == 0\n           \
    \ sum+=i^2\n        elseif i%4 == 0\n            sum+=i^3\n        else\n    \
    \        sum+=i\n        end\n    end\n    return sum\nend", "    sum = 0\n  \
    \  for i in lst\n        if i%3 == 0\n            sum = sum + i^2\n        elseif\
    \ i%4 == 0\n            sum = sum + i^3\n        else\n            sum = sum +\
    \ i\n        end\n    end\n    return sum\nend\n    \"\"\"\n    \n    sum = 0\n\
    \    for i in lst\n        if i%3 == 0\n            sum = sum + i^2\n        elseif\
    \ i%4 == 0\n            sum = sum + i^3\n        else\n            sum = sum +\
    \ i\n        end\n    end\n    return sum\nend", "    sum = 0\n    for i = 1:length(lst)\n\
    \        if mod(lst[i], 3) == 0\n            sum += lst[i]^2\n        elseif mod(lst[i],\
    \ 4) == 0\n            sum += lst[i]^3\n        else\n            sum += lst[i]\n\
    \        end\n    end\n    return sum\nend", "    sum = 0\n    for i in lst\n\
    \        if i%3==0 || i%4==0\n            sum += i\n        end\n    end\n   \
    \ return sum\nend", "    sum = 0\n    for i in lst\n        if i%3 == 0\n    \
    \        sum = sum + i^2\n        elseif i%4 == 0\n            sum = sum + i^3\n\
    \        else\n            sum = sum + i\n        end\n    end\n    return sum\n\
    end", "    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n          \
    \  sum+=i\n        else\n            sum+=i*i\n        end\n    end\n    return\
    \ sum\nend", "    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n   \
    \         sum += i\n        end\n    end\n    return sum\nend", "    sum = 0\n\
    \    for x in lst\n        if x % 3 == 0 && x % 4 == 0\n            sum += x\n\
    \        else\n            sum *= x\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of integers and returns\
    \ a vector of integers whose entries are the sum of the integers in the original\
    \ vector. \nThe function shall not change the original vector. \nThe function\
    \ shall not change the original vector and shall not change the original vector\
    \ if it is empty. \nThe function shall not change the original vector if it is\
    \ of length 0. \nThe function shall not change the original vector if it is of\
    \ length 1. \nThe function shall not change the original vector if it is of length\
    \ 2. \nThe function shall not change the original vector if it is of length 3.\
    \ \nThe function shall not change the original vector if it is of length 4. \n\
    The function shall not change the original vector if it is of length 5. \nThe\
    \ function shall not change the original vector if it is of length 6. \nThe function\
    \ shall not change the original vector if it is of length 7. \nThe function shall\
    \ not change the original vector if it is of length 8. \nThe function shall not\
    \ change the original vector if it is of length 9. \nThe function shall not change\
    \ the original vector if it is of length 10. \nThe function shall not change the\
    \ original vector if it is of length 11. \nThe function shall not change the original\
    \ vector if it is of length 12. \nThe function shall not change the original vector\
    \ if it is of length 13. \nThe function shall not change the original vector if\
    \ it is of length 14. \nThe function shall not change the original vector if it\
    \ is of length 15. \nThe function shall not change the original vector if it is\
    \ of length 16. \nThe function shall not change the original vector if it is of\
    \ length 17. \nThe function shall not change the original vector if it is of length\
    \ 18. \nThe function shall not change the original vector if it is of length 19.\
    \ \nThe function shall not change the original vector if it is of length 20. \n\
    The function shall not change the original vector if it is of length 21. \nThe\
    \ function shall not change the original vector if it is of length 22. \nThe function\
    \ shall not change the original vector if it is of length 23. \nThe function shall\
    \ not change the original vector if it is of length 24. \nThe function shall not\
    \ change the original vector if it is of length 25. \nThe function shall not change\
    \ the original vector if it is of length 26. \nThe function shall not change the\
    \ original vector if it is of length 27. \nThe function shall not change the original\
    \ vector if it is of length 28. \nThe function shall not change the original vector\
    \ if it is of length 29. \nThe function shall not change the original vector if\
    \ it is ", "    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n     \
    \       sum+=i\n        else\n            sum+=i*i\n        end\n    end\n   \
    \ return sum\nend", "    sum = 0\n    for x in lst\n        if x % 3 == 0 && x\
    \ % 4 == 0\n            sum += x\n        else\n            sum *= x\n       \
    \ end\n    end\n    return sum\nend", "    sum = 0\n    for x in lst\n       \
    \ if x % 3 == 0 && x % 4 == 0\n            sum += x\n        else\n          \
    \  sum *= x\n        end\n    end\n    return sum\nend", "    sum = 0\n    for\
    \ i in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 ==\
    \ 0\n            sum += i*i*i\n        else\n            sum += i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38",
  "    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum+=i^2\n    \
    \    elseif i%4 == 0\n            sum+=i^3\n        else\n            sum+=i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that takes a list of integers and returns the sum of the squares\
    \ of the integers in the list. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4.", "    sum = 0\n    for\
    \ i in lst\n        if i%3==0 || i%4==0\n            sum += i\n        else\n\
    \            sum *= i\n        end\n    end\n    return sum\nend", "    sum =\
    \ 0\n    for i in lst\n        if i%3 == 0\n            sum = sum + i^2\n    \
    \    elseif i%4 == 0\n            sum = sum + i^3\n        else\n            sum\
    \ = sum + i\n        end\n    end\n    return sum\nend", "    sum = 0\n    for\
    \ i = 1:length(lst)\n        if mod(lst[i],3) == 0\n            sum = sum + lst[i]^2\n\
    \        elseif mod(lst[i],4) == 0\n            sum = sum + lst[i]^3\n       \
    \ else\n            sum = sum + lst[i]^4\n        end\n    end\n    return sum\n\
    end", "    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum = sum\
    \ + i*i\n        elseif i%4 == 0\n            sum = sum + i*i*i\n        else\n\
    \            sum = sum + i\n        end\n    end\n    return sum\nend", "    sum\
    \ = 0\n    for i in lst\n        if i%3 == 0\n            sum = sum + i\n    \
    \    elseif i%4 == 0\n            sum = sum + i*i\n        else\n            sum\
    \ = sum + i*i*i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a list of integers and returns the product of the entries in the\
    \ list. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the product of\
    \ \nall entries.", "    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n\
    \            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3,4,5,6,7,8,9,10,11])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,",
  "    \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,",
  "    sum = 0\n    for x in lst\n        if x % 3 == 0 && x % 4 == 0\n          \
    \  sum += x\n        else\n            sum *= x\n        end\n    end\n    return\
    \ sum\nend", "    sum = 0\n    for i = 1:length(lst)\n        if mod(lst[i], 3)\
    \ == 0\n            sum = sum + lst[i]^2\n        elseif mod(lst[i], 4) == 0\n\
    \            sum = sum + lst[i]^3\n        else\n            sum = sum + lst[i]^4\n\
    \        end\n    end\n    return sum\nend", "    \n    sum = 0\n    for i in\
    \ lst\n        if i%3==0 || i%4==0\n            sum += i\n        end\n    end\n\
    \    return sum\nend", "    sum = 0\n    for i in lst\n        if i%3 == 0\n \
    \           sum = sum + i\n        elseif i%4 == 0\n            sum = sum + i*i\n\
    \        else\n            sum = sum + i*i*i\n        end\n    end\n    return\
    \ sum\nend", "    sum = 0\n    for i in lst\n        if i%3 == 0\n           \
    \ sum = sum + i^2\n        elseif i%4 == 0\n            sum = sum + i^3\n    \
    \    else\n            sum = sum + i\n        end\n    end\n    return sum\nend",
  "    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum+=i^2\n    \
    \    elseif i%4 == 0\n            sum+=i^3\n        else\n            sum+=i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<text>\nExercise 4\nWrite a function that will take a list of integers\
    \ and will return the number of entries in the list that are divisible by 3. The\
    \ function shall not change the entries in the list whose indexes are not a multiple\
    \ of 3. \nThe function shall then return the number of entries in the list that\
    \ are divisible by 3. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 4. \nThe function shall then return the\
    \ number of entries in the list that are divisible by 4. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 5 and\
    \ so on. \nThe function shall then return the number of entries in the list that\
    \ are divisible by 5 and so on. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 6 and so on. \nThe function shall\
    \ then return the number of entries in the list that are divisible by 6 and so\
    \ on. \nThe function shall not change the entries in the list whose indexes are\
    \ not a multiple of 7 and so on. \nThe function shall then return the number of\
    \ entries in the list that are divisible by 7 and so on. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 8 and\
    \ so on. \nThe function shall then return the number of entries in the list that\
    \ are divisible by 8 and so on. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 9 and so on. \nThe function shall\
    \ then return the number of entries in the list that are divisible by 9 and so\
    \ on. \nThe function shall not change the entries in the list whose indexes are\
    \ not a multiple of 10 and so on. \nThe function shall then return the number\
    \ of entries in the list that are divisible by 10 and so on. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 11 and\
    \ so on. \nThe function shall then return the number of entries in the list that\
    \ are divisible by 11 and so on. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 12 and so on. \nThe function shall\
    \ then return the number of entries in the list that are divisible by 12 and so\
    \ on. \nThe function shall not change the entries in the list whose indexes are\
    \ not a ", "    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum\
    \ = sum + i*i\n        elseif i%4 == 0\n            sum = sum + i*i*i\n      \
    \  else\n            sum = sum + i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a list of integers\
    \ and will return the number of entries in the list that are a multiple of 3.\
    \ The function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3. \nThe function shall then return the number of entries in the\
    \ list that are a multiple of 3. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3. \nThe function shall then return\
    \ the number of entries in the list that are a multiple of 3. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3. \n\
    The function shall then return the number of entries in the list that are a multiple\
    \ of 3. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3. \nThe function shall then return the number of entries\
    \ in the list that are a multiple of 3. \nThe function shall not change the entries\
    \ in the list whose indexes are not a multiple of 3. \nThe function shall then\
    \ return the number of entries in the list that are a multiple of 3. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 3. \nThe function shall then return the number of entries in the list that are\
    \ a multiple of 3. \nThe function shall not change the entries in the list whose\
    \ indexes are not a multiple of 3. \nThe function shall then return the number\
    \ of entries in the list that are a multiple of 3. \nThe function shall not change\
    \ the entries in the list whose indexes are not a multiple of 3. \nThe function\
    \ shall then return the number of entries in the list that are a multiple of 3.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3. \nThe function shall then return the number of entries in the\
    \ list that are a multiple of 3. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3. \nThe function shall then return\
    \ the number of entries in the list that are a multiple of 3. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3. \n\
    The function shall then return the number of entries in the list that are a multiple\
    \ of 3. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3. \nThe function shall then return the number of entries\
    \ in the list that are a multiple of 3. \nThe function shall not change the entries\
    \ in the list whose indexes are not a multiple of 3. \nThe function shall then\
    \ return the number of entries in the list that are a multiple of 3. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 3. \nThe function shall then return the number of entries in the list that are\
    \ a multiple of 3. \nThe function shall not change the entries in the list whose\
    \ indexes are not a multiple of 3. \nThe function shall then return the number\
    \ of entries in the list that are a multiple of ", "    sum = 0\n    for x in\
    \ lst\n        if x % 3 == 0 || x % 4 == 0\n            sum += x\n        else\n\
    \            sum *= x\n        end\n    end\n    return sum\nend", "    sum =\
    \ 0\n    for i = 1:length(lst)\n        if mod(lst[i], 3) == 0\n            sum\
    \ += lst[i]^2\n        elseif mod(lst[i], 4) == 0\n            sum += lst[i]^3\n\
    \        else\n            sum += lst[i]\n        end\n    end\n    return sum\n\
    end", "    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n          \
    \  sum += i\n        else\n            sum *= i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a list of integers and\
    \ returns the sum of the squares of the integers in the list. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the ", "    sum = 0\n    for x in lst\n        if\
    \ x % 3 == 0 && x % 4 == 0\n            sum += x\n        else\n            sum\
    \ += x * x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns a vector of integers whose entries\
    \ are all even.", "    sum = 0\n    for i in lst\n        if i%3 == 0\n      \
    \      sum+=i^2\n        elseif i%4 == 0\n            sum+=i^3\n        else\n\
    \            sum+=i\n        end\n    end\n    return sum\nend", "    sum = 0\n\
    \    for i = 1:length(lst)\n        if mod(lst[i], 3) == 0 || mod(lst[i], 4) ==\
    \ 0\n            sum += lst[i]\n        end\n    end\n    return sum\nend", " \
    \   sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n            sum +=\
    \ i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 4\n\
    Write a function that takes a list of integers and returns the product of all\
    \ entries in the list. The function shall not change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4.", "    sum = 0\n    for x in lst\n   \
    \     if x % 3 == 0 || x % 4 == 0\n            sum += x\n        else\n      \
    \      sum *= x\n        end\n    end\n    return sum\nend", "    \n    sum =\
    \ 0\n    for i = 1:length(lst)\n        if mod(i, 3) == 0\n            sum +=\
    \ lst[i]^2\n        elseif mod(i, 4) == 0\n            sum += lst[i]^3\n     \
    \   else\n            sum += lst[i]\n        end\n    end\n    return sum\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers and\
    \ returns the sum of the squares of the integers in the list. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3 or\
    \ 4.", "    sum = 0\n    for i = 1:length(lst)\n        if mod(i, 3) == 0\n  \
    \          sum = sum + lst[i]\n        elseif mod(i, 4) == 0\n            sum\
    \ = sum + lst[i]\n        else\n            sum = sum + lst[i] * lst[i]\n    \
    \    end\n    end\n    return sum\nend", "    sum = 0\n    for i in lst\n    \
    \    if i%3==0 || i%4==0\n            sum+=i\n        else\n            sum+=i*i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that will take a list of integers and return a list of integers whose\
    \ entries are the sum of the integers in the original list \n    multiplied by\
    \ 2.", "    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n         \
    \   sum += i\n        end\n    end\n    return sum\nend", "    sum = 0\n    for\
    \ x in lst\n        if mod(x, 3) == 0\n            sum+=x\n        elseif mod(x,\
    \ 4) == 0\n            sum+=x*x\n        else\n            sum+=x*x*x\n      \
    \  end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a list of integers and returns the sum of the squares of the integers\
    \ in the list.", "    \n    sum = 0\n    for i = 1:length(lst)\n        if mod(lst[i],\
    \ 3) == 0\n            sum += lst[i]^2\n        elseif mod(lst[i], 4) == 0\n \
    \           sum += lst[i]^3\n        else\n            sum += lst[i]\n       \
    \ end\n    end\n    \n    return sum\nend", "    sum = 0\n    for x in lst\n \
    \       if x % 3 == 0 || x % 4 == 0\n            sum += x\n        end\n    end\n\
    \    return sum\nend", "    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n\
    \            sum += i\n        end\n    end\n    return sum\nend", "    sum =\
    \ 0\n    for i in lst\n        if i%3 == 0\n            sum = sum + i^2\n    \
    \    elseif i%4 == 0\n            sum = sum + i^3\n        else\n            sum\
    \ = sum + i\n        end\n    end\n    return sum\nend", "    sum = 0\n    for\
    \ i in lst\n        if i%3==0 || i%4==0\n            sum+=i\n        else\n  \
    \          sum+=i*i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that will take a list of integers and return a list\
    \ of all integers that are divisible by 3. \n    \n    Examples:\n           \
    \     \n                \n                \n                \n               \
    \ \n                \n                \n                \n                \n \
    \               \n                \n                \n                \n     \
    \           \n                \n                \n                \n         \
    \       \n                \n                \n                \n             \
    \   \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n", "    sum = 0\n    for i\
    \ in lst\n        if i%3==0 || i%4==0\n            sum += i\n        end\n   \
    \ end\n    return sum\nend", "    sum = 0\n    for i in lst\n        if i%3 ==\
    \ 0\n            sum += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n\
    \        else\n            sum += i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.3>\nsum_squares([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that will take a list of integers and return\
    \ a new list with only the even numbers. \n    \n    Examples:\n             \
    \   \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n", "    sum = 0\n    for i in lst\n        if i%3 ==\
    \ 0\n            sum = sum + i^2\n        elseif i%4 == 0\n            sum = sum\
    \ + i^3\n        else\n            sum = sum + i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a list of\
    \ integers and returns the sum of the squares of the integers in the list. \n\
    The function shall not change the entries in the list whose indexes are not a\
    \ multiple of 3 or 4. The function shall then return the sum of all entries. \n\
    The function shall not change the entries in the list whose indexes are a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are a multiple of 3 or\
    \ 4 and not a multiple of 3. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are a\
    \ multiple of 3 or 4 and not a multiple of 3. The function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are a multiple of 3 or 4 and not a multiple of 3. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are a multiple of 3 or 4 and not a multiple\
    \ of 3. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are a multiple of 3 or\
    \ 4 and not a multiple of 3. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are a\
    \ multiple of 3 or 4 and not a multiple of 3. The function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are a multiple of 3 or 4 and not a multiple of 3. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are a multiple of 3 or 4 and not a multiple\
    \ of 3. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are a multiple of 3 or\
    \ 4 and not a multiple of 3. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are a\
    \ multiple of 3 or 4 and not a multiple of 3. The function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are a multiple of 3 or 4 and not a multiple of 3. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are a multiple of 3 or 4 and not a multiple\
    \ of 3. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are a multiple of 3 or\
    \ 4 and not a multiple of 3. The function ", "    sum = 0\n    for i in lst\n\
    \        if i%3 == 0 && i%4 == 0\n            sum += i\n        else\n       \
    \     sum += i*i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that will take a list of integers and will return\
    \ the number of entries in the list that are not a multiple of 3 or 4.", "   \
    \ sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n            sum += i\n\
    \        end\n    end\n    return sum\nend", "    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum+=i^2\n        elseif i%4 == 0\n        \
    \    sum+=i^3\n        else\n            sum+=i\n        end\n    end\n    return\
    \ sum\nend", "    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n   \
    \         sum += i^2\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend", "    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n\
    \            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,", "    sum = 0\n   \
    \ for i in lst\n        if i%3 == 0\n            sum+=i^2\n        elseif i%4\
    \ == 0\n            sum+=i^3\n        else\n            sum+=i\n        end\n\
    \    end\n    return sum\nend", "    sum = 0\n    for i in lst\n        if i%3\
    \ == 0\n            sum = sum + i^2\n        elseif i%4 == 0\n            sum\
    \ = sum + i^3\n        else\n            sum = sum + i\n        end\n    end\n\
    \    return sum\nend", "    sum = 0\n    for index in lst\n        if index %\
    \ 3 == 0 && index % 4 == 0\n            sum += index\n        else\n         \
    \   index = index * index\n            sum += index\n        end\n    end\n  \
    \  return sum\nend", "    sum = 0\n    for i in lst\n        if i%3 == 0\n   \
    \         sum += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n    \
    \    else\n            sum += i\n        end\n    end\n    return sum\nend", " \
    \   sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n            sum +=\
    \ i\n        else\n            sum *= i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers and\
    \ returns the product of the integers in the list. \nThe function shall not change\
    \ the entries in the list whose indexes are not a multiple of 3 or 4.", "    sum\
    \ = 0\n    for i in lst\n        if i%3 == 0\n            sum = sum + i^2\n  \
    \      elseif i%4 == 0\n            sum = sum + i^3\n        else\n          \
    \  sum = sum + i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11])\n</cell>\n\
    <code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12])\n</cell>\n\
    <code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13])\n</cell>\n\
    <code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\n</cell>\n\
    <code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,",
  "    sum = 0\n    for i in lst\n        if i%3 == 0 || i%4 == 0\n            sum\
    \ = sum + i\n        end\n    end\n    return sum\nend", "    sum = 0\n    for\
    \ i = 1:length(lst)\n        if mod(i, 3) == 0\n            sum = sum + lst[i]\n\
    \        elseif mod(i, 4) == 0\n            sum = sum + lst[i]\n        else\n\
    \            sum = sum + lst[i] * lst[i]\n        end\n    end\n    return sum\n\
    end", "    sum = 0\n    for x in lst\n        if x % 3 == 0 && x % 4 == 0\n  \
    \          sum += x\n        elseif x % 3 == 0\n            sum += x * x\n   \
    \     elseif x % 4 == 0\n            sum += x * x * x\n        end\n    end\n\
    \    return sum\nend", "    sum = 0\n    for i in lst\n        if i%3 == 0\n \
    \           sum = sum + i*i\n        elseif i%4 == 0\n            sum = sum +\
    \ i*i*i\n        else\n            sum = sum + i\n        end\n    end\n    return\
    \ sum\nend", "    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n   \
    \         sum += i\n        end\n    end\n    return sum\nend", "    sum = 0\n\
    \    for i in lst\n        if i%3==0 || i%4==0\n            sum += i\n       \
    \ end\n    end\n    return sum\nend", "    sum = 0\n    for i in lst\n       \
    \ if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n            sum\
    \ += i*i*i\n        else\n            sum += i\n        end\n    end\n    return\
    \ sum\nend", "    sum = 0\n    for i in lst\n        if i%3 == 0\n           \
    \ sum+=i^2\n        elseif i%4 == 0\n            sum+=i^3\n        else\n    \
    \        sum+=i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,", "    sum = 0\n\
    \    for x in lst\n        if x % 3 == 0 || x % 4 == 0\n            sum += x\n\
    \        else\n            sum *= x\n        end\n    end\n    return sum\nend",
  "    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum = sum + i^2\n\
    \        elseif i%4 == 0\n            sum = sum + i^3\n        else\n        \
    \    sum = sum + i\n        end\n    end\n    return sum\nend", "    sum = 0\n\
    \    for x in lst\n        if x % 3 == 0 || x % 4 == 0\n            sum += x\n\
    \        else\n            sum *= x\n        end\n    end\n    return sum\nend",
  "    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum += i*i\n  \
    \      elseif i%4 == 0\n            sum += i*i*i\n        else\n            sum\
    \ += i\n        end\n    end\n    return sum\nend", "    sum = 0\n    for i in\
    \ lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend", "    sum = 0\n    for i in lst\n        if i%3==0\
    \ || i%4==0\n            sum += i\n        end\n    end\n    return sum\nend",
  "    sum = 0\n    for i = 1:length(lst)\n        if mod(i, 3) == 0\n           \
    \ sum = sum + lst[i]\n        elseif mod(i, 4) == 0\n            sum = sum + lst[i]\n\
    \        else\n            sum = sum + lst[i]*lst[i]\n        end\n    end\n \
    \   return sum\nend", "    sum = 0\n    for i in lst\n        if i%3 == 0\n  \
    \          sum = sum + i*i\n        elseif i%4 == 0\n            sum = sum + i*i*i\n\
    \        else\n            sum = sum + i\n        end\n    end\n    return sum\n\
    end", "    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum = sum\
    \ + i*i\n        elseif i%4 == 0\n            sum = sum + i*i*i\n        else\n\
    \            sum = sum + i\n        end\n    end\n    return sum\nend", "    sum\
    \ = 0\n    for i in lst\n        if i%3==0 || i%4==0\n            sum+=i\n   \
    \     else\n            sum+=i*i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<text>\nExercise 4\nWrite a function that will take a list of integers\
    \ and return a list of integers whose entries are all even.", "    sum = 0\n \
    \   for i in lst\n        if i%3==0 || i%4==0\n            sum += i\n        end\n\
    \    end\n    return sum\nend", "    sum = 0\n    for i in lst\n        if i%3\
    \ == 0\n            sum+=i^2\n        elseif i%4 == 0\n            sum+=i^3\n\
    \        else\n            sum+=i\n        end\n    end\n    return sum\nend",
  "    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum = sum + i^2\n\
    \        elseif i%4 == 0\n            sum = sum + i^3\n        else\n        \
    \    sum = sum + i\n        end\n    end\n    return sum\nend", "    sum = 0\n\
    \    for i in lst\n        if i%3 == 0\n            sum+=i\n        elseif i%4\
    \ == 0\n            sum+=i*i\n        else\n            sum+=i*i*i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ takes a list of integers and returns the sum of the squares of the integers\
    \ in the list. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4.", "    sum = 0\n    for x in lst\n        if mod(x,3)\
    \ == 0\n            sum = sum + x^2\n        elseif mod(x,4) == 0\n          \
    \  sum = sum + x^3\n        else\n            sum = sum + x\n        end\n   \
    \ end\n    return sum\nend", "    sum = 0\n    for i in lst\n        if i%3==0\
    \ || i%4==0\n            sum += i\n        end\n    end\n    return sum\nend",
  "    \n    sum = 0\n    for i in lst\n        if i%3 == 0 && i%4 == 0\n        \
    \    sum += i\n        else\n            sum += i*i\n        end\n    end\n  \
    \  return sum\nend", "    sum = 0\n    for i in lst\n        if i%3 == 0\n   \
    \         sum+=i*i\n        elseif i%4 == 0\n            sum+=i*i*i\n        else\n\
    \            sum+=i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3,4,5,6,7,8,9,10,11])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225",
  "    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum = sum + i^2\n\
    \        elseif i%4 == 0\n            sum = sum + i^3\n        else\n        \
    \    sum = sum + i\n        end\n    end\n    return sum\nend", "    sum = 0\n\
    \    for i in lst\n        if i%3 == 0\n            sum = sum + i^2\n        elseif\
    \ i%4 == 0\n            sum = sum + i^3\n        else\n            sum = sum +\
    \ i\n        end\n    end\n    return sum\nend", "    sum = 0\n    for i = 1:length(lst)\n\
    \        if mod(lst[i], 3) == 0\n            sum += lst[i]^2\n        elseif mod(lst[i],\
    \ 4) == 0\n            sum += lst[i]^3\n        else\n            sum += lst[i]^4\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that will take a list of integers and a number as input. The function\
    \ shall then return the sum of the integers in the list that are divisible by\
    \ the number. \n    \n    Examples:\n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n", " \
    \   sum = 0\n    for i in lst\n        if i%3 == 0\n            sum = sum + i^2\n\
    \        elseif i%4 == 0\n            sum = sum + i^3\n        else\n        \
    \    sum = sum + i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a list of integers and returns the product\
    \ of all entries in the list. The function shall not change the entries in the\
    \ list whose indexes are not a multiple of 3 or 4.", "    sum = 0\n    for i in\
    \ lst\n        if i%3==0 || i%4==0\n            sum+=i\n        else\n       \
    \     sum+=i*i\n        end\n    end\n    return sum\nend", "    sum = 0\n   \
    \ for i = 1:length(lst)\n        if mod(lst[i],3) == 0 || mod(lst[i],4) == 0\n\
    \            sum += lst[i]\n        end\n    end\n    return sum\nend", "    sum\
    \ = 0\n    for x in lst\n        if x % 3 == 0 && x % 4 == 0\n            sum\
    \ += x\n        else\n            sum *= x\n        end\n    end\n    return sum\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers\
    \ and returns the sum of the integers squared. \nThe function shall not change\
    \ the entries in the list whose indexes are not a multiple of 3 or 4.", "    sum\
    \ = 0\n    for i in lst\n        if i%3 == 0\n            sum = sum + i*i\n  \
    \      elseif i%4 == 0\n            sum = sum + i*i*i\n        else\n        \
    \    sum = sum + i\n        end\n    end\n    return sum\nend", "    sum = 0\n\
    \    for x in lst\n        if x % 3 == 0 || x % 4 == 0\n            sum += x\n\
    \        else\n            sum *= x\n        end\n    end\n    return sum\nend",
  "    sum = 0\n    for i in lst\n        if i%3 == 0 || i%4 == 0\n            sum\
    \ += i\n        end\n    end\n    return sum\nend", "    sum = 0\n    for i in\
    \ lst\n        if i%3 == 0 && i%4 == 0\n            sum += i\n        elseif i%3\
    \ == 0\n            sum += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n\
    \        end\n    end\n    return sum\nend", "    sum = 0\n    for i in lst\n\
    \        if i%3==0 || i%4==0\n            sum += i\n        end\n    end\n   \
    \ return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ list of integers and returns the sum of all even numbers in the list. \nHint:\
    \ You can use the function sum.", "    sum = 0\n    for i in lst\n        if i%3==0\
    \ || i%4==0\n            sum += i\n        else\n            sum *= i\n      \
    \  end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that will take a list of integers and will return the sum of the squares of\
    \ the entries in the list. \nThe function shall not change the entries in the\
    \ list whose indexes are not a multiple of 3 or 4.", "    sum = 0\n    for i in\
    \ lst\n        if i%3==0 || i%4==0\n            sum += i\n        end\n    end\n\
    \    return sum\nend", "    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n\
    \            sum += i\n        else\n            sum *= i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a list of integers\
    \ and return a list of all integers that are divisible by 3 or by 5. The function\
    \ shall not change the entries in the list whose indexes are not divisible by\
    \ 3 or 5.", "    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n    \
    \        sum+=i\n        else\n            sum+=i*i\n        end\n    end\n  \
    \  return sum\nend", "    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n\
    \            sum+=i\n        else\n            sum+=i*i\n        end\n    end\n\
    \    return sum\nend", "    sum = 0\n    for i in lst\n        if i%3 == 0\n \
    \           sum+=i^2\n        elseif i%4 == 0\n            sum+=i^3\n        else\n\
    \            sum+=i\n        end\n    end\n    return sum\nend", "    sum = 0\n\
    \    for i in lst\n        if i%3 == 0\n            sum += i^2\n        elseif\
    \ i%4 == 0\n            sum += i^3\n        else\n            sum += i\n     \
    \   end\n    end\n    return sum\nend", "    sum = 0\n    for i in lst\n     \
    \   if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n           \
    \ sum += i^3\n        else\n            sum += i\n        end\n    end\n    return\
    \ sum\nend", "    sum = 0\n    for x in lst\n        if x % 3 == 0 || x % 4 ==\
    \ 0\n            sum += x\n        else\n            sum *= x\n        end\n \
    \   end\n    return sum\nend", "    sum = 0\n    for i in lst\n        if i%3\
    \ == 0\n            sum+=i^2\n        elseif i%4 == 0\n            sum+=i^3\n\
    \        else\n            sum+=i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers and\
    \ returns the sum of all even numbers in the list. \nWrite a function that takes\
    \ a list of integers and returns the sum of all odd numbers in the list. \nWrite\
    \ a function that takes a list of integers and returns the sum of all numbers\
    \ in the list that are not even or odd. \nWrite a function that takes a list of\
    \ integers and returns the sum of all numbers in the list that are not even or\
    \ odd. \nWrite a function that takes a list of integers and returns the sum of\
    \ all numbers in the list that are not even or odd. \nWrite a function that takes\
    \ a list of integers and returns the sum of all numbers in the list that are not\
    \ even or odd. \nWrite a function that takes a list of integers and returns the\
    \ sum of all numbers in the list that are not even or odd. \nWrite a function\
    \ that takes a list of integers and returns the sum of all numbers in the list\
    \ that are not even or odd. \nWrite a function that takes a list of integers and\
    \ returns the sum of all numbers in the list that are not even or odd. \nWrite\
    \ a function that takes a list of integers and returns the sum of all numbers\
    \ in the list that are not even or odd. \nWrite a function that takes a list of\
    \ integers and returns the sum of all numbers in the list that are not even or\
    \ odd. \nWrite a function that takes a list of integers and returns the sum of\
    \ all numbers in the list that are not even or odd. \nWrite a function that takes\
    \ a list of integers and returns the sum of all numbers in the list that are not\
    \ even or odd. \nWrite a function that takes a list of integers and returns the\
    \ sum of all numbers in the list that are not even or odd. \nWrite a function\
    \ that takes a list of integers and returns the sum of all numbers in the list\
    \ that are not even or odd. \nWrite a function that takes a list of integers and\
    \ returns the sum of all numbers in the list that are not even or odd. \nWrite\
    \ a function that takes a list of integers and returns the sum of all numbers\
    \ in the list that are not even or odd. \nWrite a function that takes a list of\
    \ integers and returns the sum of all numbers in the list that are not even or\
    \ odd. \nWrite a function that takes a list of integers and returns the sum of\
    \ all numbers in the list that are not even or odd. \nWrite a function that takes\
    \ a list of integers and returns the sum of all numbers in the list that are not\
    \ even or odd. \nWrite a function that takes a list of integers and returns the\
    \ sum of all numbers in the list that are not even or odd. \nWrite a function\
    \ that takes a list of integers and returns the sum of all numbers in the list\
    \ that are not even or odd. \nWrite a function that takes a list of integers and\
    \ returns the sum of all numbers in the list that are not even or odd. \nWrite\
    \ a ", "    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum =\
    \ sum + i\n        elseif i%4 == 0\n            sum = sum + i*i\n        else\n\
    \            sum = sum + i*i*i\n        end\n    end\n    return sum\nend", " \
    \   sum = 0\n    for i in lst\n        if i%3 == 0 && i%4 == 0\n            sum\
    \ += i\n        elseif i%3 == 0\n            sum += i*i\n        elseif i%4 ==\
    \ 0\n            sum += i*i*i\n        end\n    end\n    return sum\nend", " \
    \   sum = 0\n    for x in lst\n        if x % 3 == 0 && x % 4 == 0\n         \
    \   sum+=x\n        else\n            sum+=x*x\n        end\n    end\n    return\
    \ sum\nend", "    sum = 0\n    for i in lst\n        if i%3 == 0\n           \
    \ sum += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n        else\n\
    \            sum += i\n        end\n    end\n    return sum\nend", "    sum =\
    \ 0\n    for x in lst\n        if x % 3 == 0 || x % 4 == 0\n            sum +=\
    \ x\n        else\n            sum *= x\n        end\n    end\n    return sum\n\
    end", "    \n    sum = 0\n    for i in lst\n        if i%3 == 0 && i%4 == 0\n\
    \            sum += i\n        elseif i%3 == 0\n            sum += i*i\n     \
    \   elseif i%4 == 0\n            sum += i*i*i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11])\n</cell>\n\
    <code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13])\n</cell>\n\
    <code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\n</cell>\n\
    <code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\n\
    </cell>\n", "    sum = 0\n    for i = 1:length(lst)\n        if mod(lst[i], 3)\
    \ == 0\n            sum = sum + lst[i]^2\n        elseif mod(lst[i], 4) == 0\n\
    \            sum = sum + lst[i]^3\n        else\n            sum = sum + lst[i]^4\n\
    \        end\n    end\n    return sum\nend", "    sum = 0\n    for x in lst\n\
    \        if x % 3 == 0 || x % 4 == 0\n            sum += x\n        else\n   \
    \         sum *= x\n        end\n    end\n    return sum\nend", "    sum = 0\n\
    \    for i in lst\n        if i%3 == 0\n            sum = sum + i^2\n        elseif\
    \ i%4 == 0\n            sum = sum + i^3\n        else\n            sum = sum +\
    \ i\n        end\n    end\n    return sum\nend", "    sum = 0\n    for i in lst\n\
    \        if i%3==0 || i%4==0\n            sum += i\n        else\n           \
    \ sum *= i\n        end\n    end\n    return sum\nend", "    sum = 0\n    for\
    \ i in lst\n        if i%3 == 0\n            sum = sum + i*i\n        elseif i%4\
    \ == 0\n            sum = sum + i*i*i\n        else\n            sum = sum + i\n\
    \        end\n    end\n    return sum\nend", "    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum = sum + i^2\n        elseif i%4 == 0\n \
    \           sum = sum + i^3\n        else\n            sum = sum + i\n       \
    \ end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that takes a list of integers and returns the sum of the squares of the integers\
    \ in the list. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are a\
    \ multiple of 3 or 4 and not a multiple of 3. The function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are a multiple of 3 or 4 and not a multiple of 3. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are a multiple of 3 or 4 and not a multiple\
    \ of 3. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are a multiple of 3 or\
    \ 4 and not a multiple of 3. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are a\
    \ multiple of 3 or 4 and not a multiple of 3. The function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are a multiple of 3 or 4 and not a multiple of 3. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are a multiple of 3 or 4 and not a multiple\
    \ of 3. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are a multiple of 3 or\
    \ 4 and not a multiple of 3. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are a\
    \ multiple of 3 or 4 and not a multiple of 3. The function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are a multiple of 3 or 4 and not a multiple of 3. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are a multiple of 3 or 4 and not a multiple\
    \ of 3. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are a multiple of 3 or\
    \ 4 and not a multiple of 3. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are a\
    \ multiple of 3 or 4 and not a multiple of 3. The function ", "    sum = 0\n \
    \   for i = 1:length(lst)\n        if mod(lst[i],3) == 0\n            sum = sum\
    \ + lst[i]^2\n        elseif mod(lst[i],4) == 0\n            sum = sum + lst[i]^3\n\
    \        else\n            sum = sum + lst[i]^4\n        end\n    end\n    return\
    \ sum\nend", "    sum = 0\n    for i in lst\n        if i%3 == 0 && i%4 == 0\n\
    \            sum += i\n        end\n    end\n    return sum\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
