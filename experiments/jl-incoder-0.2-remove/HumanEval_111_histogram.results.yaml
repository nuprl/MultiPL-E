language: jl
name: HumanEval_111_histogram
results:
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadab\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9gtwy2ag.jl:18\nin expression starting at\
    \ /tmp/tmp9gtwy2ag.jl:18\n"
  stdout: ''
  timestamp: 1659748990
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for char in test\n        histogram[char] = histogram[char]\
    \ + 1\n    end\n    \n    return histogram\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpns670jjq.jl:23\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  KeyError:
    key \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64},
    key::Char)\n     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n     @
    Main /tmp/tmpns670jjq.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpns670jjq.jl:23 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpns670jjq.jl:22\ntest set: Error
    During Test at /tmp/tmpns670jjq.jl:24\n  Test threw exception\n  Expression: candidate("a
    b c a b") == Dict("a" => 2, "b" => 2)\n  KeyError: key \''a\'' not found\n  Stacktrace:\n   [1]
    getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmpns670jjq.jl:13\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmpns670jjq.jl:24 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmpns670jjq.jl:22\ntest set: Error During Test at
    /tmp/tmpns670jjq.jl:25\n  Test threw exception\n  Expression: candidate("a b c
    d g") == Dict("a" => 1, "b" => 1, "c" => 1, "d" => 1, "g" => 1)\n  KeyError: key
    \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @
    Base ./dict.jl:481\n   [2] histogram(test::String)\n     @ Main /tmp/tmpns670jjq.jl:13\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpns670jjq.jl:25 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n'
  timestamp: 1659748993
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = get(histogram,\
    \ letter, 0) + 1\n    end\n    \n    return histogram\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpx7j14kcy.jl:22\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  MethodError:
    Cannot `convert` an object of type Char to an object of type String\n  Closest
    candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n    convert(::Type{T},
    !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n    convert(::Type{T},
    !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n    ...\n  Stacktrace:\n   [1]
    setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n     @ Base ./dict.jl:373\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmpx7j14kcy.jl:12\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmpx7j14kcy.jl:22 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmpx7j14kcy.jl:21\ntest set: Error During Test at
    /tmp/tmpx7j14kcy.jl:23\n  Test threw exception\n  Expression: candidate("a b c
    a b") == Dict("a" => 2, "b" => 2)\n  MethodError: Cannot `convert` an object of
    type Char to an object of type String\n  Closest candidates are:\n    convert(::Type{String},
    !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n    convert(::Type{T},
    !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n    convert(::Type{T},
    !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n    ...\n  Stacktrace:\n   [1]
    setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n     @ Base ./dict.jl:373\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmpx7j14kcy.jl:12\n   [3] macro expansion\n     @
    /shared/centos'
  timestamp: 1659748993
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    letters = split(test)\n\
    \    counts = Dict{String, Int64}()\n    for letter in letters\n        counts[letter]\
    \ = get(counts, letter, 0) + 1\n    end\n    \n    return counts\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpio_izu57.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmpio_izu57.jl:24\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpio_izu57.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpio_izu57.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpio_izu57.jl:27\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpio_izu57.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpio_izu57.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659748992
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp0z0e6aj2.jl:23\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  KeyError:
    key \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64},
    key::Char)\n     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n     @
    Main /tmp/tmp0z0e6aj2.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:23 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0z0e6aj2.jl:22\ntest set: Error
    During Test at /tmp/tmp0z0e6aj2.jl:24\n  Test threw exception\n  Expression: candidate("a
    b c a b") == Dict("a" => 2, "b" => 2)\n  KeyError: key \''a\'' not found\n  Stacktrace:\n   [1]
    getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmp0z0e6aj2.jl:13\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:24 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmp0z0e6aj2.jl:22\ntest set: Error During Test at
    /tmp/tmp0z0e6aj2.jl:25\n  Test threw exception\n  Expression: candidate("a b c
    d g") == Dict("a" => 1, "b" => 1, "c" => 1, "d" => 1, "g" => 1)\n  KeyError: key
    \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @
    Base ./dict.jl:481\n   [2] histogram(test::String)\n     @ Main /tmp/tmp0z0e6aj2.jl:13\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:25 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n'
  timestamp: 1659748993
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpp312_w5m.jl:22\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  KeyError:
    key \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64},
    key::Char)\n     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n     @
    Main /tmp/tmpp312_w5m.jl:12\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpp312_w5m.jl:22 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpp312_w5m.jl:21\ntest set: Error
    During Test at /tmp/tmpp312_w5m.jl:23\n  Test threw exception\n  Expression: candidate("a
    b c a b") == Dict("a" => 2, "b" => 2)\n  KeyError: key \''a\'' not found\n  Stacktrace:\n   [1]
    getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmpp312_w5m.jl:12\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmpp312_w5m.jl:23 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmpp312_w5m.jl:21\ntest set: Error During Test at
    /tmp/tmpp312_w5m.jl:24\n  Test threw exception\n  Expression: candidate("a b c
    d g") == Dict("a" => 1, "b" => 1, "c" => 1, "d" => 1, "g" => 1)\n  KeyError: key
    \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @
    Base ./dict.jl:481\n   [2] histogram(test::String)\n     @ Main /tmp/tmpp312_w5m.jl:12\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpp312_w5m.jl:24 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n'
  timestamp: 1659748993
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp0z0e6aj2.jl:23\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  KeyError:
    key \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64},
    key::Char)\n     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n     @
    Main /tmp/tmp0z0e6aj2.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:23 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0z0e6aj2.jl:22\ntest set: Error
    During Test at /tmp/tmp0z0e6aj2.jl:24\n  Test threw exception\n  Expression: candidate("a
    b c a b") == Dict("a" => 2, "b" => 2)\n  KeyError: key \''a\'' not found\n  Stacktrace:\n   [1]
    getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmp0z0e6aj2.jl:13\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:24 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmp0z0e6aj2.jl:22\ntest set: Error During Test at
    /tmp/tmp0z0e6aj2.jl:25\n  Test threw exception\n  Expression: candidate("a b c
    d g") == Dict("a" => 1, "b" => 1, "c" => 1, "d" => 1, "g" => 1)\n  KeyError: key
    \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @
    Base ./dict.jl:481\n   [2] histogram(test::String)\n     @ Main /tmp/tmp0z0e6aj2.jl:13\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:25 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n'
  timestamp: 1659748993
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    end\n    histogram\nend\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b c d e f g h i j k l m n o p q r s t u v\
    \ w x y z\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of spaces separating the words in the string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpky_nm2yo.jl:16\nin expression starting at\
    \ /tmp/tmpky_nm2yo.jl:16\n"
  stdout: ''
  timestamp: 1659748990
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5\nusing Test\n\n@testset begin\n\ncandidate =\
    \ histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi8641346.jl:18\nin expression starting at\
    \ /tmp/tmpi8641346.jl:18\n"
  stdout: ''
  timestamp: 1659748990
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp0z0e6aj2.jl:23\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  KeyError:
    key \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64},
    key::Char)\n     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n     @
    Main /tmp/tmp0z0e6aj2.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:23 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0z0e6aj2.jl:22\ntest set: Error
    During Test at /tmp/tmp0z0e6aj2.jl:24\n  Test threw exception\n  Expression: candidate("a
    b c a b") == Dict("a" => 2, "b" => 2)\n  KeyError: key \''a\'' not found\n  Stacktrace:\n   [1]
    getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmp0z0e6aj2.jl:13\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:24 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmp0z0e6aj2.jl:22\ntest set: Error During Test at
    /tmp/tmp0z0e6aj2.jl:25\n  Test threw exception\n  Expression: candidate("a b c
    d g") == Dict("a" => 1, "b" => 1, "c" => 1, "d" => 1, "g" => 1)\n  KeyError: key
    \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @
    Base ./dict.jl:481\n   [2] histogram(test::String)\n     @ Main /tmp/tmp0z0e6aj2.jl:13\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:25 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n'
  timestamp: 1659748993
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp0z0e6aj2.jl:23\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  KeyError:
    key \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64},
    key::Char)\n     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n     @
    Main /tmp/tmp0z0e6aj2.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:23 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0z0e6aj2.jl:22\ntest set: Error
    During Test at /tmp/tmp0z0e6aj2.jl:24\n  Test threw exception\n  Expression: candidate("a
    b c a b") == Dict("a" => 2, "b" => 2)\n  KeyError: key \''a\'' not found\n  Stacktrace:\n   [1]
    getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmp0z0e6aj2.jl:13\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:24 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmp0z0e6aj2.jl:22\ntest set: Error During Test at
    /tmp/tmp0z0e6aj2.jl:25\n  Test threw exception\n  Expression: candidate("a b c
    d g") == Dict("a" => 1, "b" => 1, "c" => 1, "d" => 1, "g" => 1)\n  KeyError: key
    \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @
    Base ./dict.jl:481\n   [2] histogram(test::String)\n     @ Main /tmp/tmp0z0e6aj2.jl:13\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:25 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n'
  timestamp: 1659748993
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpp312_w5m.jl:22\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  KeyError:
    key \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64},
    key::Char)\n     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n     @
    Main /tmp/tmpp312_w5m.jl:12\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpp312_w5m.jl:22 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpp312_w5m.jl:21\ntest set: Error
    During Test at /tmp/tmpp312_w5m.jl:23\n  Test threw exception\n  Expression: candidate("a
    b c a b") == Dict("a" => 2, "b" => 2)\n  KeyError: key \''a\'' not found\n  Stacktrace:\n   [1]
    getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmpp312_w5m.jl:12\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmpp312_w5m.jl:23 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmpp312_w5m.jl:21\ntest set: Error During Test at
    /tmp/tmpp312_w5m.jl:24\n  Test threw exception\n  Expression: candidate("a b c
    d g") == Dict("a" => 1, "b" => 1, "c" => 1, "d" => 1, "g" => 1)\n  KeyError: key
    \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @
    Base ./dict.jl:481\n   [2] histogram(test::String)\n     @ Main /tmp/tmpp312_w5m.jl:12\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpp312_w5m.jl:24 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n'
  timestamp: 1659748993
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for c in test\n        histogram[c] = histogram[c] ? histogram[c]\
    \ + 1 : 1\n    end\n    \n    return histogram\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpkzkmwfvt.jl:23\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  KeyError:
    key \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64},
    key::Char)\n     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n     @
    Main /tmp/tmpkzkmwfvt.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpkzkmwfvt.jl:23 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpkzkmwfvt.jl:22\ntest set: Error
    During Test at /tmp/tmpkzkmwfvt.jl:24\n  Test threw exception\n  Expression: candidate("a
    b c a b") == Dict("a" => 2, "b" => 2)\n  KeyError: key \''a\'' not found\n  Stacktrace:\n   [1]
    getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmpkzkmwfvt.jl:13\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmpkzkmwfvt.jl:24 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmpkzkmwfvt.jl:22\ntest set: Error During Test at
    /tmp/tmpkzkmwfvt.jl:25\n  Test threw exception\n  Expression: candidate("a b c
    d g") == Dict("a" => 1, "b" => 1, "c" => 1, "d" => 1, "g" => 1)\n  KeyError: key
    \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @
    Base ./dict.jl:481\n   [2] histogram(test::String)\n     @ Main /tmp/tmpkzkmwfvt.jl:13\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpkzkmwfvt.jl:25 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n'
  timestamp: 1659748993
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp0z0e6aj2.jl:23\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  KeyError:
    key \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64},
    key::Char)\n     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n     @
    Main /tmp/tmp0z0e6aj2.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:23 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0z0e6aj2.jl:22\ntest set: Error
    During Test at /tmp/tmp0z0e6aj2.jl:24\n  Test threw exception\n  Expression: candidate("a
    b c a b") == Dict("a" => 2, "b" => 2)\n  KeyError: key \''a\'' not found\n  Stacktrace:\n   [1]
    getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmp0z0e6aj2.jl:13\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:24 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmp0z0e6aj2.jl:22\ntest set: Error During Test at
    /tmp/tmp0z0e6aj2.jl:25\n  Test threw exception\n  Expression: candidate("a b c
    d g") == Dict("a" => 1, "b" => 1, "c" => 1, "d" => 1, "g" => 1)\n  KeyError: key
    \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @
    Base ./dict.jl:481\n   [2] histogram(test::String)\n     @ Main /tmp/tmp0z0e6aj2.jl:13\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:25 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n'
  timestamp: 1659748993
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = get(histogram,\
    \ letter, 0) + 1\n    end\n    \n    return histogram\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp7vfajqb1.jl:23\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  MethodError:
    Cannot `convert` an object of type Char to an object of type String\n  Closest
    candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n    convert(::Type{T},
    !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n    convert(::Type{T},
    !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n    ...\n  Stacktrace:\n   [1]
    setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n     @ Base ./dict.jl:373\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmp7vfajqb1.jl:13\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmp7vfajqb1.jl:23 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmp7vfajqb1.jl:22\n'''
  timestamp: 1659748993
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    return histogram\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpnoqaf6w7.jl:20\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  KeyError:
    key \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64},
    key::Char)\n     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n     @
    Main /tmp/tmpnoqaf6w7.jl:11\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpnoqaf6w7.jl:20 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpnoqaf6w7.jl:19\ntest set: Error
    During Test at /tmp/tmpnoqaf6w7.jl:21\n  Test threw exception\n  Expression: candidate("a
    b c a b") == Dict("a" => 2, "b" => 2)\n  KeyError: key \''a\'' not found\n  Stacktrace:\n   [1]
    getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmpnoqaf6w7.jl:11\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmpnoqaf6w7.jl:21 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmpnoqaf6w7.jl:19\ntest set: Error During Test at
    /tmp/tmpnoqaf6w7.jl:22\n  Test threw exception\n  Expression: candidate("a b c
    d g") == Dict("a" => 1, "b" => 1, "c" => 1, "d" => 1, "g" => 1)\n  KeyError: key
    \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @
    Base ./dict.jl:481\n   [2] histogram(test::String)\n     @ Main /tmp/tmpnoqaf6w7.jl:11\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpnoqaf6w7.jl:22 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n'
  timestamp: 1659748993
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.4>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.4>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.4>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.4>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.4>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.4>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.4>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.4>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.4>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmporc90_xn.jl:18\nin expression starting at\
    \ /tmp/tmporc90_xn.jl:18\n"
  stdout: ''
  timestamp: 1659748990
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    for c in test\n        histogram[c] = histogram.get(c, 0) + 1\n\
    \    end\n    histogram\nend\n</cell>\n<code language=julia-1.4>\nhistogram(\"\
    a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b \nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp88ficxfk.jl:15\nin expression starting at\
    \ /tmp/tmp88ficxfk.jl:15\n"
  stdout: ''
  timestamp: 1659748990
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for i in split(test)\n        histogram[i] = histogram[i]\
    \ + 1 if histogram[i] < 1 else 1\n    \n    return histogram\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp7vnbwlh1.jl:12 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7vnbwlh1.jl:13\n\
    in expression starting at /tmp/tmp7vnbwlh1.jl:13\n"
  stdout: ''
  timestamp: 1659748990
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp0z0e6aj2.jl:23\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  KeyError:
    key \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64},
    key::Char)\n     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n     @
    Main /tmp/tmp0z0e6aj2.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:23 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0z0e6aj2.jl:22\ntest set: Error
    During Test at /tmp/tmp0z0e6aj2.jl:24\n  Test threw exception\n  Expression: candidate("a
    b c a b") == Dict("a" => 2, "b" => 2)\n  KeyError: key \''a\'' not found\n  Stacktrace:\n   [1]
    getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmp0z0e6aj2.jl:13\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:24 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmp0z0e6aj2.jl:22\ntest set: Error During Test at
    /tmp/tmp0z0e6aj2.jl:25\n  Test threw exception\n  Expression: candidate("a b c
    d g") == Dict("a" => 1, "b" => 1, "c" => 1, "d" => 1, "g" => 1)\n  KeyError: key
    \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @
    Base ./dict.jl:481\n   [2] histogram(test::String)\n     @ Main /tmp/tmp0z0e6aj2.jl:13\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:25 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n'
  timestamp: 1659748993
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = histogram[letter] + 1\n    end\n    histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c d e f g h i j k l m n o p q r s t\
    \ u v w x y z\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c d e f\
    \ g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c d e f g h i j k l m n o p q r s t\
    \ u v w x y z\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c d e f\
    \ g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c d e f g h i j k l m n o p q r s t\
    \ u v w x y z\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c d e f\
    \ g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c d e f g h i j k l m n o p q r s t\
    \ u v w x y z\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c d e f\
    \ g h i j k l m n o p q r s t \nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzf80u3j6.jl:16\nin expression starting at\
    \ /tmp/tmpzf80u3j6.jl:16\n"
  stdout: ''
  timestamp: 1659748990
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    for c in test\n        histogram[c] = get(histogram, c, 0) + 1\n\
    \    end\n    histogram\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp5gw9u9dj.jl:20\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  MethodError:
    Cannot `convert` an object of type Char to an object of type String\n  Closest
    candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n    convert(::Type{T},
    !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n    convert(::Type{T},
    !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n    ...\n  Stacktrace:\n   [1]
    setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n     @ Base ./dict.jl:373\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmp5gw9u9dj.jl:11\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmp5gw9u9dj.jl:20 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmp5gw9u9dj.jl:19\ntest set: Error During Test at
    /tmp/tmp5gw9u9dj.jl:21\n  Test threw exception\n  Expression: candidate("a b c
    a b") == Dict("a" => 2, "b" => 2)\n  MethodError: Cannot `convert` an object of
    type Char to an object of type String\n  Closest candidates are:\n    convert(::Type{String},
    !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n    convert(::Type{T},
    !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n    convert(::Type{T},
    !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n    ...\n  Stacktrace:\n   [1]
    setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n     @ Base ./dict.jl:373\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmp5gw9u9dj.jl:11\n   [3] macro expansion\n     @
    /shared/centos'
  timestamp: 1659748993
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    for char in test\n        if histogram.has_key(char)\n       \
    \     histogram[char] += 1\n        else\n            histogram[char] = 1\n  \
    \      end\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdpkny98n.jl:19\nin expression starting at\
    \ /tmp/tmpdpkny98n.jl:19\n"
  stdout: ''
  timestamp: 1659748990
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c d e f g h i j k l m n o p q r s t\
    \ u v w x y z\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c d e f\
    \ g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c d e f g h i j k l m n o p q r s t\
    \ u v w x y z\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c d e f\
    \ g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c d e f g h i j k l m n o p q r s t\
    \ u v w x y z\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c d e f\
    \ g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c d e f g h i j k l m n o p q r s t\
    \ u v w x y z\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c d e f\
    \ g h i j k l m n o p q r s t \nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8z40f4ii.jl:18\nin expression starting at\
    \ /tmp/tmp8z40f4ii.jl:18\n"
  stdout: ''
  timestamp: 1659748990
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        if histogram[letter]\
    \ == 0\n            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    histogram\nend\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"a b c d e f g h i j k l m n o p q r s t\
    \ u v w x y z\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c d e f\
    \ g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"a b c d e f g h i j k l m n o p q r s t\
    \ u v w x y z\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c d e f\
    \ g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"a b c d e f g h i j k l m n o p q r s t\
    \ u v w x y z\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c d e f\
    \ g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"a b c d e f g h i j k l m n o p q r s t\
    \ u v w x y z\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c d e f\
    \ g h \nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv34ovopb.jl:20\nin expression starting at\
    \ /tmp/tmpv34ovopb.jl:20\n"
  stdout: ''
  timestamp: 1659748990
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp0z0e6aj2.jl:23\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  KeyError:
    key \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64},
    key::Char)\n     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n     @
    Main /tmp/tmp0z0e6aj2.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:23 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0z0e6aj2.jl:22\ntest set: Error
    During Test at /tmp/tmp0z0e6aj2.jl:24\n  Test threw exception\n  Expression: candidate("a
    b c a b") == Dict("a" => 2, "b" => 2)\n  KeyError: key \''a\'' not found\n  Stacktrace:\n   [1]
    getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmp0z0e6aj2.jl:13\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:24 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmp0z0e6aj2.jl:22\ntest set: Error During Test at
    /tmp/tmp0z0e6aj2.jl:25\n  Test threw exception\n  Expression: candidate("a b c
    d g") == Dict("a" => 1, "b" => 1, "c" => 1, "d" => 1, "g" => 1)\n  KeyError: key
    \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @
    Base ./dict.jl:481\n   [2] histogram(test::String)\n     @ Main /tmp/tmp0z0e6aj2.jl:13\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:25 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n'
  timestamp: 1659748993
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    counts = Dict{String, Int64}()\n\
    \    for c in test\n        counts[c] = get(counts, c, 0) + 1\n    end\n    \n\
    \    return counts\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpl6hes4fo.jl:21\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  MethodError:
    Cannot `convert` an object of type Char to an object of type String\n  Closest
    candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n    convert(::Type{T},
    !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n    convert(::Type{T},
    !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n    ...\n  Stacktrace:\n   [1]
    setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n     @ Base ./dict.jl:373\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmpl6hes4fo.jl:11\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmpl6hes4fo.jl:21 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmpl6hes4fo.jl:20\n'''
  timestamp: 1659748993
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5\nusing Test\n\n@testset begin\n\ncandidate =\
    \ histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi8641346.jl:18\nin expression starting at\
    \ /tmp/tmpi8641346.jl:18\n"
  stdout: ''
  timestamp: 1659748990
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    histogram\nend\n</cell>\n<code language=julia-1.0>\nhistogram(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.0>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.0>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.0>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.0>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.0>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.0>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.0>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.0>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.0>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.0>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.0>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.0>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"abracadabra\")\n</cell>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxumurgv1.jl:15\nin expression starting at\
    \ /tmp/tmpxumurgv1.jl:15\n"
  stdout: ''
  timestamp: 1659748990
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp0z0e6aj2.jl:23\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  KeyError:
    key \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64},
    key::Char)\n     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n     @
    Main /tmp/tmp0z0e6aj2.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:23 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0z0e6aj2.jl:22\ntest set: Error
    During Test at /tmp/tmp0z0e6aj2.jl:24\n  Test threw exception\n  Expression: candidate("a
    b c a b") == Dict("a" => 2, "b" => 2)\n  KeyError: key \''a\'' not found\n  Stacktrace:\n   [1]
    getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmp0z0e6aj2.jl:13\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:24 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmp0z0e6aj2.jl:22\ntest set: Error During Test at
    /tmp/tmp0z0e6aj2.jl:25\n  Test threw exception\n  Expression: candidate("a b c
    d g") == Dict("a" => 1, "b" => 1, "c" => 1, "d" => 1, "g" => 1)\n  KeyError: key
    \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @
    Base ./dict.jl:481\n   [2] histogram(test::String)\n     @ Main /tmp/tmp0z0e6aj2.jl:13\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:25 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n'
  timestamp: 1659748993
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for char in test\n        histogram[char] = histogram[char]\
    \ + 1\n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of characters in the string that are not in the alphabet.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5npmtmfj.jl:18\nin expression starting at\
    \ /tmp/tmp5npmtmfj.jl:18\n"
  stdout: ''
  timestamp: 1659748990
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpp312_w5m.jl:22\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  KeyError:
    key \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64},
    key::Char)\n     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n     @
    Main /tmp/tmpp312_w5m.jl:12\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpp312_w5m.jl:22 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpp312_w5m.jl:21\ntest set: Error
    During Test at /tmp/tmpp312_w5m.jl:23\n  Test threw exception\n  Expression: candidate("a
    b c a b") == Dict("a" => 2, "b" => 2)\n  KeyError: key \''a\'' not found\n  Stacktrace:\n   [1]
    getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmpp312_w5m.jl:12\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmpp312_w5m.jl:23 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmpp312_w5m.jl:21\ntest set: Error During Test at
    /tmp/tmpp312_w5m.jl:24\n  Test threw exception\n  Expression: candidate("a b c
    d g") == Dict("a" => 1, "b" => 1, "c" => 1, "d" => 1, "g" => 1)\n  KeyError: key
    \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @
    Base ./dict.jl:481\n   [2] histogram(test::String)\n     @ Main /tmp/tmpp312_w5m.jl:12\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpp312_w5m.jl:24 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n'
  timestamp: 1659748993
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    counts = Dict{String, Int64}()\n\
    \    for c in test\n        counts[c] = get(counts, c, 0) + 1\n    \n    maximum\
    \ = max(counts.values)\n    \n    counts = counts |> filter((_, count) -> count\
    \ > maximum) |> map((_, count) -> count)\n    \n    return counts\n    \n\"\"\"\
    Given a string representing a space separated lowercase letters, return a dictionary\n\
    \    of the letter with the most repetition and containing the corresponding count.\n\
    \    If several letters have the same occurrence, return all of them.\n    \n\
    \    Example:\n                    \n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpdqgfplrl.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdqgfplrl.jl:1\n\
    in expression starting at /tmp/tmpdqgfplrl.jl:1\n"
  stdout: ''
  timestamp: 1659748990
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in split(test)\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracad\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t\
    @test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp084ru0tr.jl:18\nin expression starting at\
    \ /tmp/tmp084ru0tr.jl:18\n"
  stdout: ''
  timestamp: 1659748993
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = get(histogram,\
    \ letter, 0) + 1\n    end\n    \n    return histogram\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpx7j14kcy.jl:22\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  MethodError:
    Cannot `convert` an object of type Char to an object of type String\n  Closest
    candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n    convert(::Type{T},
    !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n    convert(::Type{T},
    !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n    ...\n  Stacktrace:\n   [1]
    setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n     @ Base ./dict.jl:373\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmpx7j14kcy.jl:12\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmpx7j14kcy.jl:22 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmpx7j14kcy.jl:21\ntest set: Error During Test at
    /tmp/tmpx7j14kcy.jl:23\n  Test threw exception\n  Expression: candidate("a b c
    a b") == Dict("a" => 2, "b" => 2)\n  MethodError: Cannot `convert` an object of
    type Char to an object of type String\n  Closest candidates are:\n    convert(::Type{String},
    !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n    convert(::Type{T},
    !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n    convert(::Type{T},
    !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n    ...\n  Stacktrace:\n   [1]
    setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n     @ Base ./dict.jl:373\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmpx7j14kcy.jl:12\n   [3] macro expansion\n     @
    /shared/centos'
  timestamp: 1659748993
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    letters = split(test)\n\
    \    \n    histogram = Dict{String, Int64}()\n    \n    for letter in letters\n\
    \        histogram[letter] = get(histogram, letter, 0) + 1\n    end\n    \n  \
    \  return histogram\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpo2x6aalr.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpo2x6aalr.jl:26\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo2x6aalr.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo2x6aalr.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpo2x6aalr.jl:29\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo2x6aalr.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo2x6aalr.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659748995
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    return histogram\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpnoqaf6w7.jl:20\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  KeyError:
    key \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64},
    key::Char)\n     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n     @
    Main /tmp/tmpnoqaf6w7.jl:11\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpnoqaf6w7.jl:20 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpnoqaf6w7.jl:19\ntest set: Error
    During Test at /tmp/tmpnoqaf6w7.jl:21\n  Test threw exception\n  Expression: candidate("a
    b c a b") == Dict("a" => 2, "b" => 2)\n  KeyError: key \''a\'' not found\n  Stacktrace:\n   [1]
    getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmpnoqaf6w7.jl:11\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmpnoqaf6w7.jl:21 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmpnoqaf6w7.jl:19\ntest set: Error During Test at
    /tmp/tmpnoqaf6w7.jl:22\n  Test threw exception\n  Expression: candidate("a b c
    d g") == Dict("a" => 1, "b" => 1, "c" => 1, "d" => 1, "g" => 1)\n  KeyError: key
    \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @
    Base ./dict.jl:481\n   [2] histogram(test::String)\n     @ Main /tmp/tmpnoqaf6w7.jl:11\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpnoqaf6w7.jl:22 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n'
  timestamp: 1659748993
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    letters = split(test)\n\
    \    \n    histogram = Dict{String, Int64}()\n    \n    for letter in letters\n\
    \        histogram[letter] = get(histogram, letter, 0) + 1\n    end\n    \n  \
    \  return histogram\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpo2x6aalr.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpo2x6aalr.jl:26\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo2x6aalr.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo2x6aalr.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpo2x6aalr.jl:29\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo2x6aalr.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo2x6aalr.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659748995
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp0z0e6aj2.jl:23\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  KeyError:
    key \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64},
    key::Char)\n     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n     @
    Main /tmp/tmp0z0e6aj2.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:23 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0z0e6aj2.jl:22\ntest set: Error
    During Test at /tmp/tmp0z0e6aj2.jl:24\n  Test threw exception\n  Expression: candidate("a
    b c a b") == Dict("a" => 2, "b" => 2)\n  KeyError: key \''a\'' not found\n  Stacktrace:\n   [1]
    getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmp0z0e6aj2.jl:13\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:24 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmp0z0e6aj2.jl:22\ntest set: Error During Test at
    /tmp/tmp0z0e6aj2.jl:25\n  Test threw exception\n  Expression: candidate("a b c
    d g") == Dict("a" => 1, "b" => 1, "c" => 1, "d" => 1, "g" => 1)\n  KeyError: key
    \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @
    Base ./dict.jl:481\n   [2] histogram(test::String)\n     @ Main /tmp/tmp0z0e6aj2.jl:13\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:25 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n'
  timestamp: 1659748993
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    for c in test\n        if histogram[c] == 0\n            histogram[c]\
    \ = 1\n        else\n            histogram[c] += 1\n        end\n    end\n   \
    \ return histogram\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp23pw6zqr.jl:24\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  KeyError:
    key \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64},
    key::Char)\n     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n     @
    Main /tmp/tmp23pw6zqr.jl:11\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp23pw6zqr.jl:24 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmp23pw6zqr.jl:23\ntest set: Error
    During Test at /tmp/tmp23pw6zqr.jl:25\n  Test threw exception\n  Expression: candidate("a
    b c a b") == Dict("a" => 2, "b" => 2)\n  KeyError: key \''a\'' not found\n  Stacktrace:\n   [1]
    getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmp23pw6zqr.jl:11\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmp23pw6zqr.jl:25 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmp23pw6zqr.jl:23\ntest set: Error During Test at
    /tmp/tmp23pw6zqr.jl:26\n  Test threw exception\n  Expression: candidate("a b c
    d g") == Dict("a" => 1, "b" => 1, "c" => 1, "d" => 1, "g" => 1)\n  KeyError: key
    \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @
    Base ./dict.jl:481\n   [2] histogram(test::String)\n     @ Main /tmp/tmp23pw6zqr.jl:11\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp23pw6zqr.jl:26 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n'
  timestamp: 1659748995
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadab\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9gtwy2ag.jl:18\nin expression starting at\
    \ /tmp/tmp9gtwy2ag.jl:18\n"
  stdout: ''
  timestamp: 1659748990
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for i in split(test)\n        histogram[i] = histogram[i]\
    \ + 1 \n    end\n    \n    return histogram\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp2nh__bbe.jl:23\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  KeyError:
    key "a" not found\n  Stacktrace:\n   [1] getindex\n     @ ./dict.jl:481 [inlined]\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmp2nh__bbe.jl:13\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmp2nh__bbe.jl:23 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmp2nh__bbe.jl:22\ntest set: Error During Test at
    /tmp/tmp2nh__bbe.jl:24\n  Test threw exception\n  Expression: candidate("a b c
    a b") == Dict("a" => 2, "b" => 2)\n  KeyError: key "a" not found\n  Stacktrace:\n   [1]
    getindex\n     @ ./dict.jl:481 [inlined]\n   [2] histogram(test::String)\n     @
    Main /tmp/tmp2nh__bbe.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp2nh__bbe.jl:24 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmp2nh__bbe.jl:22\ntest set: Error
    During Test at /tmp/tmp2nh__bbe.jl:25\n  Test threw exception\n  Expression: candidate("a
    b c d g") == Dict("a" => 1, "b" => 1, "c" => 1, "d" => 1, "g" => 1)\n  KeyError:
    key "a" not found\n  Stacktrace:\n   [1] getindex\n     @ ./dict.jl:481 [inlined]\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmp2nh__bbe.jl:13\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmp2nh__bbe.jl:25 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmp2nh__bbe.jl:22\ntest set: Error During Test at
    /tmp/tmp2n'
  timestamp: 1659748995
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    letters = split(test)\n\
    \    counts = Dict{String, Int64}()\n    for letter in letters\n        counts[letter]\
    \ = get(counts, letter, 0) + 1\n    end\n    \n    return counts\nend\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b c a b c a b c\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b c a b c a b c a b c a b c\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b c a b c a b c a b c\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b c a b c a b c a b c\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b c a b c a b c a b c\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b c a b c a b c a b c\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b c a b c a b c a b c\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b c a b c a b c a b c\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b c a b c a b c a b c\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b c a b c a b c a b c\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b c a b c a b c a b c\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b c a b c a b c a b c\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b c a b c a b c a b c\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b c a b c a b c a b c\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b c a b c a b c a b c\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b c a b c a b c a b c\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b c a b c \nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw4q2uxhm.jl:18\nin expression starting at\
    \ /tmp/tmpw4q2uxhm.jl:18\n"
  stdout: ''
  timestamp: 1659748993
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    letters = split(test)\n\
    \    \n    counts = Dict{String, Int64}()\n    \n    for letter in letters\n \
    \       counts[letter] = get(counts, letter, 0) + 1\n    end\n    \n    return\
    \ counts\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c d e f g h\
    \ i j k l m n o p q r s t u v w x y z\")\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes a string and returns the number of words in the string.\n\
    The function should ignore all punctuation and only count the letters a-z.\nThe\
    \ function should ignore all empty spaces.\nThe function should ignore all non-letter\
    \ characters and only count the letters a-z.\nThe function should ignore all non-letter\
    \ characters and only count the letters a-z.\nThe function should ignore all non-letter\
    \ characters and only count the letters a-z.\nThe function should ignore all non-letter\
    \ characters and only count the letters a-z.\nThe function should ignore all non-letter\
    \ characters and only count the letters a-z.\nThe function should ignore all non-letter\
    \ characters and only count the letters a-z.\nThe function should ignore all non-letter\
    \ characters and only count the letters a-z.\nThe function should ignore all non-letter\
    \ characters and only count the letters a-z.\nThe function should ignore all non-letter\
    \ characters and only count the letters a-z.\nThe function should ignore all non-letter\
    \ characters and only count the letters a-z.\nThe function should ignore all non-letter\
    \ characters and only count the letters a-z.\nThe function should ignore all non-letter\
    \ characters and only count the letters a-z.\nThe function should ignore all non-letter\
    \ characters and only count the letters a-z.\nThe function should ignore all non-letter\
    \ characters and only count the letters a-z.\nThe function should ignore all non-letter\
    \ characters and only count the letters a-z.\nThe function should ignore all non-letter\
    \ characters and only count the letters a-z.\nThe function should ignore all non-letter\
    \ characters and only count the letters a-z.\nThe function should ignore all non-letter\
    \ characters and only count the letters a-z.\nThe function should ignore all non-letter\
    \ characters and only count the letters a-z.\nThe function should ignore all non-letter\
    \ characters and only count the letters a-z.\nThe function should ignore all non-letter\
    \ characters and only count the letters a-z.\nThe function should ignore all non-letter\
    \ characters and only count the letters a-z.\nThe function \nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8ygv0h6c.jl:20\nin expression starting at\
    \ /tmp/tmp8ygv0h6c.jl:20\n"
  stdout: ''
  timestamp: 1659748993
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp0z0e6aj2.jl:23\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  KeyError:
    key \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64},
    key::Char)\n     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n     @
    Main /tmp/tmp0z0e6aj2.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:23 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0z0e6aj2.jl:22\ntest set: Error
    During Test at /tmp/tmp0z0e6aj2.jl:24\n  Test threw exception\n  Expression: candidate("a
    b c a b") == Dict("a" => 2, "b" => 2)\n  KeyError: key \''a\'' not found\n  Stacktrace:\n   [1]
    getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmp0z0e6aj2.jl:13\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:24 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmp0z0e6aj2.jl:22\ntest set: Error During Test at
    /tmp/tmp0z0e6aj2.jl:25\n  Test threw exception\n  Expression: candidate("a b c
    d g") == Dict("a" => 1, "b" => 1, "c" => 1, "d" => 1, "g" => 1)\n  KeyError: key
    \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @
    Base ./dict.jl:481\n   [2] histogram(test::String)\n     @ Main /tmp/tmp0z0e6aj2.jl:13\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:25 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n'
  timestamp: 1659748993
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    for letter in test\n        if histogram[letter] == 0\n      \
    \      histogram[letter] = 1\n        else\n            histogram[letter] += 1\n\
    \        end\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.4>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.4>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.4>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.4>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.4>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.4>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.4>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.4>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.4>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.4>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.4>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.4>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.4>\n\
    \nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptloy02_o.jl:19\nin expression starting at\
    \ /tmp/tmptloy02_o.jl:19\n"
  stdout: ''
  timestamp: 1659748993
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpp312_w5m.jl:22\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  KeyError:
    key \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64},
    key::Char)\n     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n     @
    Main /tmp/tmpp312_w5m.jl:12\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpp312_w5m.jl:22 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpp312_w5m.jl:21\ntest set: Error
    During Test at /tmp/tmpp312_w5m.jl:23\n  Test threw exception\n  Expression: candidate("a
    b c a b") == Dict("a" => 2, "b" => 2)\n  KeyError: key \''a\'' not found\n  Stacktrace:\n   [1]
    getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmpp312_w5m.jl:12\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmpp312_w5m.jl:23 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmpp312_w5m.jl:21\ntest set: Error During Test at
    /tmp/tmpp312_w5m.jl:24\n  Test threw exception\n  Expression: candidate("a b c
    d g") == Dict("a" => 1, "b" => 1, "c" => 1, "d" => 1, "g" => 1)\n  KeyError: key
    \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @
    Base ./dict.jl:481\n   [2] histogram(test::String)\n     @ Main /tmp/tmpp312_w5m.jl:12\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpp312_w5m.jl:24 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n'
  timestamp: 1659748993
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\
    a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\
    a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a \nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo8go_w_u.jl:18\nin expression starting at\
    \ /tmp/tmpo8go_w_u.jl:18\n"
  stdout: ''
  timestamp: 1659748993
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    for letter in test\n        histogram[letter] = get(histogram,\
    \ letter, 0) + 1\n    end\n    histogram\nend\nusing Test\n\n@testset begin\n\n\
    candidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpmtcflccs.jl:20\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  MethodError:
    Cannot `convert` an object of type Char to an object of type String\n  Closest
    candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n    convert(::Type{T},
    !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n    convert(::Type{T},
    !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n    ...\n  Stacktrace:\n   [1]
    setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n     @ Base ./dict.jl:373\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmpmtcflccs.jl:11\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmpmtcflccs.jl:20 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmpmtcflccs.jl:19\n'''
  timestamp: 1659748995
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in split(test)\n        histogram[letter] = get(histogram,\
    \ letter, 0) + 1\n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"\
    a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a\
    \ b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a\
    \ b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a\
    \ b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a\
    \ b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a\
    \ b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a\
    \ b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a\
    \ b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a\
    \ b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a\
    \ b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a\
    \ b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a\
    \ b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a\
    \ b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a\
    \ b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a\
    \ b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a\
    \ b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a\
    \ b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a\
    \ b c a b c \nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpggf7kezo.jl:18\nin expression starting at\
    \ /tmp/tmpggf7kezo.jl:18\n"
  stdout: ''
  timestamp: 1659748993
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    for c in test\n        histogram[c] = histogram[c] ? histogram[c]\
    \ + 1 : 1\n    end\n    return histogram\nend\nusing Test\n\n@testset begin\n\n\
    candidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpou2pt_yl.jl:20\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  KeyError:
    key \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64},
    key::Char)\n     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n     @
    Main /tmp/tmpou2pt_yl.jl:11\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpou2pt_yl.jl:20 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpou2pt_yl.jl:19\ntest set: Error
    During Test at /tmp/tmpou2pt_yl.jl:21\n  Test threw exception\n  Expression: candidate("a
    b c a b") == Dict("a" => 2, "b" => 2)\n  KeyError: key \''a\'' not found\n  Stacktrace:\n   [1]
    getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmpou2pt_yl.jl:11\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmpou2pt_yl.jl:21 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmpou2pt_yl.jl:19\ntest set: Error During Test at
    /tmp/tmpou2pt_yl.jl:22\n  Test threw exception\n  Expression: candidate("a b c
    d g") == Dict("a" => 1, "b" => 1, "c" => 1, "d" => 1, "g" => 1)\n  KeyError: key
    \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @
    Base ./dict.jl:481\n   [2] histogram(test::String)\n     @ Main /tmp/tmpou2pt_yl.jl:11\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpou2pt_yl.jl:22 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n'
  timestamp: 1659748995
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    counts = Dict{String, Int64}()\n\
    \    for c in test\n        counts[c] = get(counts, c, 0) + 1\n    end\n    counts\n\
    end\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b c a b c a b c\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b c a b c a b c\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b c a b c a b c\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b c a b c a b c\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b c a b c a b c a b c\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b c a b c a b c a b c\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b c a b c a b c a b c\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b c a b c a b c a b c\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b c a b c a b c a b c\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b c a b c a b c a b c\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b c a b c a b c a b c\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b c a b c a b c a b c\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b c a b c a b c a b c\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b c a b c a b c a b c\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b c a b c a b c a b c\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b c a b c a b c a b c\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b c a b c a b c a b c\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b c a b c a b c a b c\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b c a b c a b c a b c\")\n</cell>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5fef8ntg.jl:15\nin expression starting at\
    \ /tmp/tmp5fef8ntg.jl:15\n"
  stdout: ''
  timestamp: 1659748993
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for i in split(test)\n        histogram[i] = histogram[i]\
    \ + 1 \n    end\n    \n    return histogram\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpi_ukxlyu.jl:22\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  KeyError:
    key "a" not found\n  Stacktrace:\n   [1] getindex\n     @ ./dict.jl:481 [inlined]\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmpi_ukxlyu.jl:12\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmpi_ukxlyu.jl:22 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmpi_ukxlyu.jl:21\ntest set: Error During Test at
    /tmp/tmpi_ukxlyu.jl:23\n  Test threw exception\n  Expression: candidate("a b c
    a b") == Dict("a" => 2, "b" => 2)\n  KeyError: key "a" not found\n  Stacktrace:\n   [1]
    getindex\n     @ ./dict.jl:481 [inlined]\n   [2] histogram(test::String)\n     @
    Main /tmp/tmpi_ukxlyu.jl:12\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpi_ukxlyu.jl:23 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpi_ukxlyu.jl:21\ntest set: Error
    During Test at /tmp/tmpi_ukxlyu.jl:24\n  Test threw exception\n  Expression: candidate("a
    b c d g") == Dict("a" => 1, "b" => 1, "c" => 1, "d" => 1, "g" => 1)\n  KeyError:
    key "a" not found\n  Stacktrace:\n   [1] getindex\n     @ ./dict.jl:481 [inlined]\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmpi_ukxlyu.jl:12\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmpi_ukxlyu.jl:24 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmpi_ukxlyu.jl:21\ntest set: Error During Test at
    /tmp/tmpi_'
  timestamp: 1659748995
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp0z0e6aj2.jl:23\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  KeyError:
    key \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64},
    key::Char)\n     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n     @
    Main /tmp/tmp0z0e6aj2.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:23 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0z0e6aj2.jl:22\ntest set: Error
    During Test at /tmp/tmp0z0e6aj2.jl:24\n  Test threw exception\n  Expression: candidate("a
    b c a b") == Dict("a" => 2, "b" => 2)\n  KeyError: key \''a\'' not found\n  Stacktrace:\n   [1]
    getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmp0z0e6aj2.jl:13\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:24 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmp0z0e6aj2.jl:22\ntest set: Error During Test at
    /tmp/tmp0z0e6aj2.jl:25\n  Test threw exception\n  Expression: candidate("a b c
    d g") == Dict("a" => 1, "b" => 1, "c" => 1, "d" => 1, "g" => 1)\n  KeyError: key
    \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @
    Base ./dict.jl:481\n   [2] histogram(test::String)\n     @ Main /tmp/tmp0z0e6aj2.jl:13\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:25 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n'
  timestamp: 1659748993
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = get(histogram,\
    \ letter, 0) + 1\n    end\n    \n    return histogram\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpx7j14kcy.jl:22\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  MethodError:
    Cannot `convert` an object of type Char to an object of type String\n  Closest
    candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n    convert(::Type{T},
    !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n    convert(::Type{T},
    !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n    ...\n  Stacktrace:\n   [1]
    setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n     @ Base ./dict.jl:373\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmpx7j14kcy.jl:12\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmpx7j14kcy.jl:22 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmpx7j14kcy.jl:21\ntest set: Error During Test at
    /tmp/tmpx7j14kcy.jl:23\n  Test threw exception\n  Expression: candidate("a b c
    a b") == Dict("a" => 2, "b" => 2)\n  MethodError: Cannot `convert` an object of
    type Char to an object of type String\n  Closest candidates are:\n    convert(::Type{String},
    !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n    convert(::Type{T},
    !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n    convert(::Type{T},
    !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n    ...\n  Stacktrace:\n   [1]
    setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n     @ Base ./dict.jl:373\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmpx7j14kcy.jl:12\n   [3] macro expansion\n     @
    /shared/centos'
  timestamp: 1659748993
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadab\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9gtwy2ag.jl:18\nin expression starting at\
    \ /tmp/tmp9gtwy2ag.jl:18\n"
  stdout: ''
  timestamp: 1659748990
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    for c in test\n        histogram[c] = get(histogram, c, 0) + 1\n\
    \    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsohmujs9.jl:15\nin expression starting at\
    \ /tmp/tmpsohmujs9.jl:15\n"
  stdout: ''
  timestamp: 1659748995
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadab\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9gtwy2ag.jl:18\nin expression starting at\
    \ /tmp/tmp9gtwy2ag.jl:18\n"
  stdout: ''
  timestamp: 1659748990
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadab\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9gtwy2ag.jl:18\nin expression starting at\
    \ /tmp/tmp9gtwy2ag.jl:18\n"
  stdout: ''
  timestamp: 1659748990
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnky9oxt_.jl:17\nin expression starting at\
    \ /tmp/tmpnky9oxt_.jl:17\n"
  stdout: ''
  timestamp: 1659748995
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpp312_w5m.jl:22\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  KeyError:
    key \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64},
    key::Char)\n     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n     @
    Main /tmp/tmpp312_w5m.jl:12\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpp312_w5m.jl:22 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpp312_w5m.jl:21\ntest set: Error
    During Test at /tmp/tmpp312_w5m.jl:23\n  Test threw exception\n  Expression: candidate("a
    b c a b") == Dict("a" => 2, "b" => 2)\n  KeyError: key \''a\'' not found\n  Stacktrace:\n   [1]
    getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmpp312_w5m.jl:12\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmpp312_w5m.jl:23 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmpp312_w5m.jl:21\ntest set: Error During Test at
    /tmp/tmpp312_w5m.jl:24\n  Test threw exception\n  Expression: candidate("a b c
    d g") == Dict("a" => 1, "b" => 1, "c" => 1, "d" => 1, "g" => 1)\n  KeyError: key
    \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @
    Base ./dict.jl:481\n   [2] histogram(test::String)\n     @ Main /tmp/tmpp312_w5m.jl:12\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpp312_w5m.jl:24 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n'
  timestamp: 1659748993
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for c in test\n        histogram[c] = get(histogram, c,\
    \ 0) + 1\n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\
    a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c a b c a b c a \nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppjqv2kc0.jl:18\nin expression starting at\
    \ /tmp/tmppjqv2kc0.jl:18\n"
  stdout: ''
  timestamp: 1659748995
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    letters = split(test)\n\
    \    letters_count = Dict{String, Int64}()\n    \n    for letter in letters\n\
    \        letters_count[letter] = get(letters_count, letter, 0) + 1\n    end\n\
    \    \n    return letters_count\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"\
    a b c d e f g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns a string with all the letters\
    \ capitalized.\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpar8g2cq8.jl:19\nin expression starting at\
    \ /tmp/tmpar8g2cq8.jl:19\n"
  stdout: ''
  timestamp: 1659748995
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp0z0e6aj2.jl:23\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  KeyError:
    key \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64},
    key::Char)\n     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n     @
    Main /tmp/tmp0z0e6aj2.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:23 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0z0e6aj2.jl:22\ntest set: Error
    During Test at /tmp/tmp0z0e6aj2.jl:24\n  Test threw exception\n  Expression: candidate("a
    b c a b") == Dict("a" => 2, "b" => 2)\n  KeyError: key \''a\'' not found\n  Stacktrace:\n   [1]
    getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmp0z0e6aj2.jl:13\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:24 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmp0z0e6aj2.jl:22\ntest set: Error During Test at
    /tmp/tmp0z0e6aj2.jl:25\n  Test threw exception\n  Expression: candidate("a b c
    d g") == Dict("a" => 1, "b" => 1, "c" => 1, "d" => 1, "g" => 1)\n  KeyError: key
    \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @
    Base ./dict.jl:481\n   [2] histogram(test::String)\n     @ Main /tmp/tmp0z0e6aj2.jl:13\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:25 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n'
  timestamp: 1659748993
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp0z0e6aj2.jl:23\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  KeyError:
    key \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64},
    key::Char)\n     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n     @
    Main /tmp/tmp0z0e6aj2.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:23 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0z0e6aj2.jl:22\ntest set: Error
    During Test at /tmp/tmp0z0e6aj2.jl:24\n  Test threw exception\n  Expression: candidate("a
    b c a b") == Dict("a" => 2, "b" => 2)\n  KeyError: key \''a\'' not found\n  Stacktrace:\n   [1]
    getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmp0z0e6aj2.jl:13\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:24 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmp0z0e6aj2.jl:22\ntest set: Error During Test at
    /tmp/tmp0z0e6aj2.jl:25\n  Test threw exception\n  Expression: candidate("a b c
    d g") == Dict("a" => 1, "b" => 1, "c" => 1, "d" => 1, "g" => 1)\n  KeyError: key
    \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @
    Base ./dict.jl:481\n   [2] histogram(test::String)\n     @ Main /tmp/tmp0z0e6aj2.jl:13\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:25 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n'
  timestamp: 1659748993
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz7l7lz2u.jl:15\nin expression starting at\
    \ /tmp/tmpz7l7lz2u.jl:15\n"
  stdout: ''
  timestamp: 1659748995
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt0w7_9ns.jl:15\nin expression starting at\
    \ /tmp/tmpt0w7_9ns.jl:15\n"
  stdout: ''
  timestamp: 1659748995
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnky9oxt_.jl:17\nin expression starting at\
    \ /tmp/tmpnky9oxt_.jl:17\n"
  stdout: ''
  timestamp: 1659748995
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    counts = Dict{String, Int64}()\n\
    \    for c in test\n        counts[c] = get(counts, c, 0) + 1\n    end\n    \n\
    \    return counts\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpl6hes4fo.jl:21\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  MethodError:
    Cannot `convert` an object of type Char to an object of type String\n  Closest
    candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n    convert(::Type{T},
    !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n    convert(::Type{T},
    !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n    ...\n  Stacktrace:\n   [1]
    setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n     @ Base ./dict.jl:373\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmpl6hes4fo.jl:11\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmpl6hes4fo.jl:21 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmpl6hes4fo.jl:20\n'''
  timestamp: 1659748993
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp0z0e6aj2.jl:23\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  KeyError:
    key \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64},
    key::Char)\n     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n     @
    Main /tmp/tmp0z0e6aj2.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:23 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0z0e6aj2.jl:22\ntest set: Error
    During Test at /tmp/tmp0z0e6aj2.jl:24\n  Test threw exception\n  Expression: candidate("a
    b c a b") == Dict("a" => 2, "b" => 2)\n  KeyError: key \''a\'' not found\n  Stacktrace:\n   [1]
    getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmp0z0e6aj2.jl:13\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:24 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmp0z0e6aj2.jl:22\ntest set: Error During Test at
    /tmp/tmp0z0e6aj2.jl:25\n  Test threw exception\n  Expression: candidate("a b c
    d g") == Dict("a" => 1, "b" => 1, "c" => 1, "d" => 1, "g" => 1)\n  KeyError: key
    \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @
    Base ./dict.jl:481\n   [2] histogram(test::String)\n     @ Main /tmp/tmp0z0e6aj2.jl:13\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:25 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n'
  timestamp: 1659748993
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for i in split(test)\n        histogram[i] = histogram[i]\
    \ + 1 if histogram[i] < 1 else 1\n    \n    return histogram\nend\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b c a b c a b c a b c a b c\")\n</cell>\n\
    <text>\nExercise\nWrite a function that takes a string and returns the number\
    \ of spaces before the given character.\nFor example, if the string is \"a b c\
    \ a b c a b c a b c a b c\", and the character is \"a\", then the function should\
    \ return 3.\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpehgupup3.jl:11 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpehgupup3.jl:12\n\
    in expression starting at /tmp/tmpehgupup3.jl:12\n"
  stdout: ''
  timestamp: 1659748995
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    for c in test\n        histogram[c] = histogram.get(c, 0) + 1\n\
    \    end\n    return histogram\nend\n</cell>\n<code language=julia-1.4>\nhistogram(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.4>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.4>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.4>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.4>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.4>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.4>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.4>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.4>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.4>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.4>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.4>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.4>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"abracadabra\")\n</cell>\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp_frtwz3.jl:15\nin expression starting at\
    \ /tmp/tmpp_frtwz3.jl:15\n"
  stdout: ''
  timestamp: 1659748995
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"abracadabra\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns the number of characters in the string that are not\
    \ letters.\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpymfl7vl2.jl:18\nin expression starting at\
    \ /tmp/tmpymfl7vl2.jl:18\n"
  stdout: ''
  timestamp: 1659748995
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = get(histogram,\
    \ letter, 0) + 1\n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"ab\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpglt3us1w.jl:18\nin expression starting at\
    \ /tmp/tmpglt3us1w.jl:18\n"
  stdout: ''
  timestamp: 1659748995
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp0z0e6aj2.jl:23\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  KeyError:
    key \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64},
    key::Char)\n     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n     @
    Main /tmp/tmp0z0e6aj2.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:23 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0z0e6aj2.jl:22\ntest set: Error
    During Test at /tmp/tmp0z0e6aj2.jl:24\n  Test threw exception\n  Expression: candidate("a
    b c a b") == Dict("a" => 2, "b" => 2)\n  KeyError: key \''a\'' not found\n  Stacktrace:\n   [1]
    getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmp0z0e6aj2.jl:13\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:24 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmp0z0e6aj2.jl:22\ntest set: Error During Test at
    /tmp/tmp0z0e6aj2.jl:25\n  Test threw exception\n  Expression: candidate("a b c
    d g") == Dict("a" => 1, "b" => 1, "c" => 1, "d" => 1, "g" => 1)\n  KeyError: key
    \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @
    Base ./dict.jl:481\n   [2] histogram(test::String)\n     @ Main /tmp/tmp0z0e6aj2.jl:13\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:25 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n'
  timestamp: 1659748993
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = get(histogram,\
    \ letter, 0) + 1\n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"ab\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpglt3us1w.jl:18\nin expression starting at\
    \ /tmp/tmpglt3us1w.jl:18\n"
  stdout: ''
  timestamp: 1659748995
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = get(histogram,\
    \ letter, 0) + 1\n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b c a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b c a b c a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b c a b c a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b c a b c a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b c a b c a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b c a b c a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b c a b c a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b c a b c a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b c a b c a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b c a b c a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b c a b c a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b c a b c a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b c a b c a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b c a b c a b c a b c a b c \nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqar5y92a.jl:18\nin expression starting at\
    \ /tmp/tmpqar5y92a.jl:18\n"
  stdout: ''
  timestamp: 1659748995
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=\nusing Test\n\n@testset begin\n\n\
    candidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxmajvite.jl:16\nin expression starting at\
    \ /tmp/tmpxmajvite.jl:16\n"
  stdout: ''
  timestamp: 1659748995
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    letters = split(test)\n\
    \    \n    counts = Dict{String, Int64}()\n    \n    for letter in letters\n \
    \       counts[letter] = get(counts, letter, 0) + 1\n    end\n    \n    return\
    \ counts\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmppteh4rev.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmppteh4rev.jl:26\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppteh4rev.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppteh4rev.jl:24\ntest set: Test\
    \ Failed at /tmp/tmppteh4rev.jl:29\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppteh4rev.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppteh4rev.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659748997
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    for letter in test\n        histogram[letter] = get(histogram,\
    \ letter, 0) + 1\n    end\n    histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp66tl1po_.jl:15\nin expression starting at\
    \ /tmp/tmp66tl1po_.jl:15\n"
  stdout: ''
  timestamp: 1659748995
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    counts = Dict{String, Int64}()\n\
    \    for c in test\n        counts[c] = get(counts, c, 0) + 1\n    end\n    \n\
    \    return counts\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpl6hes4fo.jl:21\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  MethodError:
    Cannot `convert` an object of type Char to an object of type String\n  Closest
    candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n    convert(::Type{T},
    !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n    convert(::Type{T},
    !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n    ...\n  Stacktrace:\n   [1]
    setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n     @ Base ./dict.jl:373\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmpl6hes4fo.jl:11\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmpl6hes4fo.jl:21 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmpl6hes4fo.jl:20\n'''
  timestamp: 1659748993
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c d e f g h i j k l m n o p q r s t\
    \ u v w x y z\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c d e f\
    \ g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c d e f g h i j k l m n o p q r s t\
    \ u v w x y z\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c d e f\
    \ g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c d e f g h i j k l m n o p q r s t\
    \ u v w x y z\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c d e f\
    \ g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c d e f g h i j k l m n o p q r s t\
    \ u v w x y z\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c d e f\
    \ g h i j k l m n o p q r s t \nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8z40f4ii.jl:18\nin expression starting at\
    \ /tmp/tmp8z40f4ii.jl:18\n"
  stdout: ''
  timestamp: 1659748990
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpp312_w5m.jl:22\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  KeyError:
    key \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64},
    key::Char)\n     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n     @
    Main /tmp/tmpp312_w5m.jl:12\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpp312_w5m.jl:22 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpp312_w5m.jl:21\ntest set: Error
    During Test at /tmp/tmpp312_w5m.jl:23\n  Test threw exception\n  Expression: candidate("a
    b c a b") == Dict("a" => 2, "b" => 2)\n  KeyError: key \''a\'' not found\n  Stacktrace:\n   [1]
    getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmpp312_w5m.jl:12\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmpp312_w5m.jl:23 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmpp312_w5m.jl:21\ntest set: Error During Test at
    /tmp/tmpp312_w5m.jl:24\n  Test threw exception\n  Expression: candidate("a b c
    d g") == Dict("a" => 1, "b" => 1, "c" => 1, "d" => 1, "g" => 1)\n  KeyError: key
    \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @
    Base ./dict.jl:481\n   [2] histogram(test::String)\n     @ Main /tmp/tmpp312_w5m.jl:12\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpp312_w5m.jl:24 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n'
  timestamp: 1659748993
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnky9oxt_.jl:17\nin expression starting at\
    \ /tmp/tmpnky9oxt_.jl:17\n"
  stdout: ''
  timestamp: 1659748995
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for char in test\n        histogram[char] = histogram[char]\
    \ ? histogram[char] + 1 : 1\n    end\n    \n    return histogram\nend\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b \nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe1sauk35.jl:18\nin expression starting at\
    \ /tmp/tmpe1sauk35.jl:18\n"
  stdout: ''
  timestamp: 1659748995
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp0z0e6aj2.jl:23\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  KeyError:
    key \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64},
    key::Char)\n     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n     @
    Main /tmp/tmp0z0e6aj2.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:23 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0z0e6aj2.jl:22\ntest set: Error
    During Test at /tmp/tmp0z0e6aj2.jl:24\n  Test threw exception\n  Expression: candidate("a
    b c a b") == Dict("a" => 2, "b" => 2)\n  KeyError: key \''a\'' not found\n  Stacktrace:\n   [1]
    getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmp0z0e6aj2.jl:13\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:24 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmp0z0e6aj2.jl:22\ntest set: Error During Test at
    /tmp/tmp0z0e6aj2.jl:25\n  Test threw exception\n  Expression: candidate("a b c
    d g") == Dict("a" => 1, "b" => 1, "c" => 1, "d" => 1, "g" => 1)\n  KeyError: key
    \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @
    Base ./dict.jl:481\n   [2] histogram(test::String)\n     @ Main /tmp/tmp0z0e6aj2.jl:13\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:25 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n'
  timestamp: 1659748993
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = histogram[letter] ? histogram[letter] + 1 : 1\n    end\n    histogram\nend\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a \nusing Test\n\n@testset begin\n\n\
    candidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpidsvedof.jl:16\nin expression starting at\
    \ /tmp/tmpidsvedof.jl:16\n"
  stdout: ''
  timestamp: 1659748995
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    letters = split(test)\n\
    \    \n    counts = Dict{String, Int64}()\n    \n    for letter in letters\n \
    \       counts[letter] = get(counts, letter, 0) + 1\n    end\n    \n    return\
    \ counts\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmppteh4rev.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmppteh4rev.jl:26\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppteh4rev.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppteh4rev.jl:24\ntest set: Test\
    \ Failed at /tmp/tmppteh4rev.jl:29\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppteh4rev.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppteh4rev.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659748997
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\
    a b c a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\
    a b c a b c a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\
    a b c a b c a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\
    a b c a b c a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\
    a b c a b c a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\
    a b c a b c a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\
    a b c a b c a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\
    a b c a b c a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\
    a b c a b c a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\
    a b c a b c a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\
    a b c a b c a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\
    a b c a b c a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\
    a b c a b c a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\
    a b c a b c a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\
    a b c a b c a \nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuu6zmvxn.jl:18\nin expression starting at\
    \ /tmp/tmpuu6zmvxn.jl:18\n"
  stdout: ''
  timestamp: 1659748996
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpp312_w5m.jl:22\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  KeyError:
    key \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64},
    key::Char)\n     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n     @
    Main /tmp/tmpp312_w5m.jl:12\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpp312_w5m.jl:22 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpp312_w5m.jl:21\ntest set: Error
    During Test at /tmp/tmpp312_w5m.jl:23\n  Test threw exception\n  Expression: candidate("a
    b c a b") == Dict("a" => 2, "b" => 2)\n  KeyError: key \''a\'' not found\n  Stacktrace:\n   [1]
    getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmpp312_w5m.jl:12\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmpp312_w5m.jl:23 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmpp312_w5m.jl:21\ntest set: Error During Test at
    /tmp/tmpp312_w5m.jl:24\n  Test threw exception\n  Expression: candidate("a b c
    d g") == Dict("a" => 1, "b" => 1, "c" => 1, "d" => 1, "g" => 1)\n  KeyError: key
    \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @
    Base ./dict.jl:481\n   [2] histogram(test::String)\n     @ Main /tmp/tmpp312_w5m.jl:12\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpp312_w5m.jl:24 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n'
  timestamp: 1659748993
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1 if histogram[letter] > 0 else 1\n    end\n    histogram\nend\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.3>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.3>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.3>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.3>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.3>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.3>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.3>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.3>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.3>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.3>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.3>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.3>\nhistogram(\"abracadab\nusing Test\n\n@testset begin\n\n\
    candidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp01kthiav.jl:10 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp01kthiav.jl:11\n\
    in expression starting at /tmp/tmp01kthiav.jl:11\n"
  stdout: ''
  timestamp: 1659748997
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for i in split(test)\n        histogram[i] = histogram[i]\
    \ + 1 \n    end\n    \n    return histogram\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpi_ukxlyu.jl:22\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  KeyError:
    key "a" not found\n  Stacktrace:\n   [1] getindex\n     @ ./dict.jl:481 [inlined]\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmpi_ukxlyu.jl:12\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmpi_ukxlyu.jl:22 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmpi_ukxlyu.jl:21\ntest set: Error During Test at
    /tmp/tmpi_ukxlyu.jl:23\n  Test threw exception\n  Expression: candidate("a b c
    a b") == Dict("a" => 2, "b" => 2)\n  KeyError: key "a" not found\n  Stacktrace:\n   [1]
    getindex\n     @ ./dict.jl:481 [inlined]\n   [2] histogram(test::String)\n     @
    Main /tmp/tmpi_ukxlyu.jl:12\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpi_ukxlyu.jl:23 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpi_ukxlyu.jl:21\ntest set: Error
    During Test at /tmp/tmpi_ukxlyu.jl:24\n  Test threw exception\n  Expression: candidate("a
    b c d g") == Dict("a" => 1, "b" => 1, "c" => 1, "d" => 1, "g" => 1)\n  KeyError:
    key "a" not found\n  Stacktrace:\n   [1] getindex\n     @ ./dict.jl:481 [inlined]\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmpi_ukxlyu.jl:12\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmpi_ukxlyu.jl:24 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmpi_ukxlyu.jl:21\ntest set: Error During Test at
    /tmp/tmpi_'
  timestamp: 1659748995
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnky9oxt_.jl:17\nin expression starting at\
    \ /tmp/tmpnky9oxt_.jl:17\n"
  stdout: ''
  timestamp: 1659748995
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt0w7_9ns.jl:15\nin expression starting at\
    \ /tmp/tmpt0w7_9ns.jl:15\n"
  stdout: ''
  timestamp: 1659748995
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpp312_w5m.jl:22\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  KeyError:
    key \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64},
    key::Char)\n     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n     @
    Main /tmp/tmpp312_w5m.jl:12\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpp312_w5m.jl:22 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpp312_w5m.jl:21\ntest set: Error
    During Test at /tmp/tmpp312_w5m.jl:23\n  Test threw exception\n  Expression: candidate("a
    b c a b") == Dict("a" => 2, "b" => 2)\n  KeyError: key \''a\'' not found\n  Stacktrace:\n   [1]
    getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmpp312_w5m.jl:12\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmpp312_w5m.jl:23 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmpp312_w5m.jl:21\ntest set: Error During Test at
    /tmp/tmpp312_w5m.jl:24\n  Test threw exception\n  Expression: candidate("a b c
    d g") == Dict("a" => 1, "b" => 1, "c" => 1, "d" => 1, "g" => 1)\n  KeyError: key
    \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @
    Base ./dict.jl:481\n   [2] histogram(test::String)\n     @ Main /tmp/tmpp312_w5m.jl:12\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpp312_w5m.jl:24 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n'
  timestamp: 1659748993
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    counts = Dict{String, Int64}()\n\
    \    for c in test\n        counts[c] = get(counts, c, 0) + 1\n    end\n    \n\
    \    counts\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpdgrnxnsn.jl:21\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  MethodError:
    Cannot `convert` an object of type Char to an object of type String\n  Closest
    candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n    convert(::Type{T},
    !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n    convert(::Type{T},
    !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n    ...\n  Stacktrace:\n   [1]
    setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n     @ Base ./dict.jl:373\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmpdgrnxnsn.jl:11\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmpdgrnxnsn.jl:21 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmpdgrnxnsn.jl:20\n'''
  timestamp: 1659749000
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    for c in test\n        histogram[c] = get(histogram, c, 0) + 1\n\
    \    end\n    histogram\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp5gw9u9dj.jl:20\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  MethodError:
    Cannot `convert` an object of type Char to an object of type String\n  Closest
    candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n    convert(::Type{T},
    !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n    convert(::Type{T},
    !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n    ...\n  Stacktrace:\n   [1]
    setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n     @ Base ./dict.jl:373\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmp5gw9u9dj.jl:11\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmp5gw9u9dj.jl:20 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmp5gw9u9dj.jl:19\ntest set: Error During Test at
    /tmp/tmp5gw9u9dj.jl:21\n  Test threw exception\n  Expression: candidate("a b c
    a b") == Dict("a" => 2, "b" => 2)\n  MethodError: Cannot `convert` an object of
    type Char to an object of type String\n  Closest candidates are:\n    convert(::Type{String},
    !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n    convert(::Type{T},
    !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n    convert(::Type{T},
    !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n    ...\n  Stacktrace:\n   [1]
    setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n     @ Base ./dict.jl:373\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmp5gw9u9dj.jl:11\n   [3] macro expansion\n     @
    /shared/centos'
  timestamp: 1659748993
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    for c in test\n        histogram[c] = histogram.get(c, 0) + 1\n\
    \    end\n    histogram\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpep2ywrak.jl:20\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  type
    Dict has no field get\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42
    [inlined]\n   [2] histogram(test::String)\n     @ Main /tmp/tmpep2ywrak.jl:11\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpep2ywrak.jl:20 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpep2ywrak.jl:19\ntest set: Error
    During Test at /tmp/tmpep2ywrak.jl:21\n  Test threw exception\n  Expression: candidate("a
    b c a b") == Dict("a" => 2, "b" => 2)\n  type Dict has no field get\n  Stacktrace:\n   [1]
    getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] histogram(test::String)\n     @
    Main /tmp/tmpep2ywrak.jl:11\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpep2ywrak.jl:21 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpep2ywrak.jl:19\ntest set: Error
    During Test at /tmp/tmpep2ywrak.jl:22\n  Test threw exception\n  Expression: candidate("a
    b c d g") == Dict("a" => 1, "b" => 1, "c" => 1, "d" => 1, "g" => 1)\n  type Dict
    has no field get\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmpep2ywrak.jl:11\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmpep2ywrak.jl:22 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmpep2ywrak.jl:19\ntest set: Error During Test at
    /tmp/tm'
  timestamp: 1659749000
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp0z0e6aj2.jl:23\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  KeyError:
    key \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64},
    key::Char)\n     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n     @
    Main /tmp/tmp0z0e6aj2.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:23 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0z0e6aj2.jl:22\ntest set: Error
    During Test at /tmp/tmp0z0e6aj2.jl:24\n  Test threw exception\n  Expression: candidate("a
    b c a b") == Dict("a" => 2, "b" => 2)\n  KeyError: key \''a\'' not found\n  Stacktrace:\n   [1]
    getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmp0z0e6aj2.jl:13\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:24 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmp0z0e6aj2.jl:22\ntest set: Error During Test at
    /tmp/tmp0z0e6aj2.jl:25\n  Test threw exception\n  Expression: candidate("a b c
    d g") == Dict("a" => 1, "b" => 1, "c" => 1, "d" => 1, "g" => 1)\n  KeyError: key
    \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @
    Base ./dict.jl:481\n   [2] histogram(test::String)\n     @ Main /tmp/tmp0z0e6aj2.jl:13\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:25 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n'
  timestamp: 1659748993
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    \n    for letter in letters\n     \
    \   histogram[letter] = histogram[letter] + 1\n    end\n    \n    return histogram\n\
    end\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b c a b c a b c a\
    \ b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b c a b c a\
    \ b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b c a\
    \ b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a\
    \ b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\
    a b c a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\
    a b c a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\
    a b c a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\
    a b c a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\
    a b c a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\
    a b c a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\
    a b c a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\
    a b c a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\
    a b c a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\
    a b c a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\
    a b c a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\
    a b c a b c a b \nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc396nmso.jl:18\nin expression starting at\
    \ /tmp/tmpc396nmso.jl:18\n"
  stdout: ''
  timestamp: 1659748998
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = histogram[letter] + 1\n    end\n    histogram\nend\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"a b c a b c a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c \nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpozn3jigj.jl:16\nin expression starting at\
    \ /tmp/tmpozn3jigj.jl:16\n"
  stdout: ''
  timestamp: 1659748998
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    end\n    histogram\nend\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b c a b c a b c a b c\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c \nusing Test\n\n\
    @testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj_k9h98x.jl:16\nin expression starting at\
    \ /tmp/tmpj_k9h98x.jl:16\n"
  stdout: ''
  timestamp: 1659748998
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = histogram[letter] + 1 if histogram[letter] >= 1 else 1\n    end\n    histogram\n\
    end\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c \nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpmfqtbinz.jl:11 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmfqtbinz.jl:12\n\
    in expression starting at /tmp/tmpmfqtbinz.jl:12\n"
  stdout: ''
  timestamp: 1659748998
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in split(test)\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp7zs8r0ie.jl:23\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  KeyError:
    key "a" not found\n  Stacktrace:\n   [1] getindex\n     @ ./dict.jl:481 [inlined]\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmp7zs8r0ie.jl:13\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmp7zs8r0ie.jl:23 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmp7zs8r0ie.jl:22\ntest set: Error During Test at
    /tmp/tmp7zs8r0ie.jl:24\n  Test threw exception\n  Expression: candidate("a b c
    a b") == Dict("a" => 2, "b" => 2)\n  KeyError: key "a" not found\n  Stacktrace:\n   [1]
    getindex\n     @ ./dict.jl:481 [inlined]\n   [2] histogram(test::String)\n     @
    Main /tmp/tmp7zs8r0ie.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7zs8r0ie.jl:24 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7zs8r0ie.jl:22\ntest set: Error
    During Test at /tmp/tmp7zs8r0ie.jl:25\n  Test threw exception\n  Expression: candidate("a
    b c d g") == Dict("a" => 1, "b" => 1, "c" => 1, "d" => 1, "g" => 1)\n  KeyError:
    key "a" not found\n  Stacktrace:\n   [1] getindex\n     @ ./dict.jl:481 [inlined]\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmp7zs8r0ie.jl:13\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmp7zs8r0ie.jl:25 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmp7zs8r0ie.jl:22\ntest set: Error During Test at
    /tmp/tmp7z'
  timestamp: 1659749000
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a \nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprbdb126l.jl:18\nin expression starting at\
    \ /tmp/tmprbdb126l.jl:18\n"
  stdout: ''
  timestamp: 1659748998
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = histogram[letter] + 1 if letter in histogram else 1\n    end\n    return histogram\n\
    end\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpjftehcst.jl:11 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjftehcst.jl:12\n\
    in expression starting at /tmp/tmpjftehcst.jl:12\n"
  stdout: ''
  timestamp: 1659748998
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    for c in test\n        histogram[c] = histogram.get(c, 0) + 1\n\
    \    end\n    histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"\
    a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b \nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkcedyg6v.jl:15\nin expression starting at\
    \ /tmp/tmpkcedyg6v.jl:15\n"
  stdout: ''
  timestamp: 1659748998
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    end\n    return histogram\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5kvwumqe.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmp5kvwumqe.jl:22\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5kvwumqe.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5kvwumqe.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp5kvwumqe.jl:25\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5kvwumqe.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5kvwumqe.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659749000
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp0z0e6aj2.jl:23\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  KeyError:
    key \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64},
    key::Char)\n     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n     @
    Main /tmp/tmp0z0e6aj2.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:23 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0z0e6aj2.jl:22\ntest set: Error
    During Test at /tmp/tmp0z0e6aj2.jl:24\n  Test threw exception\n  Expression: candidate("a
    b c a b") == Dict("a" => 2, "b" => 2)\n  KeyError: key \''a\'' not found\n  Stacktrace:\n   [1]
    getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmp0z0e6aj2.jl:13\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:24 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmp0z0e6aj2.jl:22\ntest set: Error During Test at
    /tmp/tmp0z0e6aj2.jl:25\n  Test threw exception\n  Expression: candidate("a b c
    d g") == Dict("a" => 1, "b" => 1, "c" => 1, "d" => 1, "g" => 1)\n  KeyError: key
    \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @
    Base ./dict.jl:481\n   [2] histogram(test::String)\n     @ Main /tmp/tmp0z0e6aj2.jl:13\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:25 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n'
  timestamp: 1659748993
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnky9oxt_.jl:17\nin expression starting at\
    \ /tmp/tmpnky9oxt_.jl:17\n"
  stdout: ''
  timestamp: 1659748995
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for char in test\n        histogram[char] = histogram[char]\
    \ + 1\n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpit02xwmh.jl:17\nin expression starting at\
    \ /tmp/tmpit02xwmh.jl:17\n"
  stdout: ''
  timestamp: 1659748998
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnky9oxt_.jl:17\nin expression starting at\
    \ /tmp/tmpnky9oxt_.jl:17\n"
  stdout: ''
  timestamp: 1659748995
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpp312_w5m.jl:22\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  KeyError:
    key \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64},
    key::Char)\n     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n     @
    Main /tmp/tmpp312_w5m.jl:12\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpp312_w5m.jl:22 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpp312_w5m.jl:21\ntest set: Error
    During Test at /tmp/tmpp312_w5m.jl:23\n  Test threw exception\n  Expression: candidate("a
    b c a b") == Dict("a" => 2, "b" => 2)\n  KeyError: key \''a\'' not found\n  Stacktrace:\n   [1]
    getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmpp312_w5m.jl:12\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmpp312_w5m.jl:23 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmpp312_w5m.jl:21\ntest set: Error During Test at
    /tmp/tmpp312_w5m.jl:24\n  Test threw exception\n  Expression: candidate("a b c
    d g") == Dict("a" => 1, "b" => 1, "c" => 1, "d" => 1, "g" => 1)\n  KeyError: key
    \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @
    Base ./dict.jl:481\n   [2] histogram(test::String)\n     @ Main /tmp/tmpp312_w5m.jl:12\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpp312_w5m.jl:24 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n'
  timestamp: 1659748993
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    counts = Dict{String, Int64}()\n\
    \    for c in test\n        counts[c] = get(counts, c, 0) + 1\n    end\n    \n\
    \    maximum = max(counts.values)\n    \n    counts = Dict{String, Int64}()\n\
    \    for c in test\n        counts[c] = get(counts, c, 0) + 1\n    end\n    \n\
    \    minimum = min(counts.values)\n    \n    counts = Dict{String, Int64}()\n\
    \    for c in test\n        counts[c] = get(counts, c, 0) + 1\n    end\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4vf5ao5x.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4vf5ao5x.jl:1\n\
    in expression starting at /tmp/tmp4vf5ao5x.jl:1\n"
  stdout: ''
  timestamp: 1659748998
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c \nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprxa2rvg4.jl:17\nin expression starting at\
    \ /tmp/tmprxa2rvg4.jl:17\n"
  stdout: ''
  timestamp: 1659748998
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadab\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9gtwy2ag.jl:18\nin expression starting at\
    \ /tmp/tmp9gtwy2ag.jl:18\n"
  stdout: ''
  timestamp: 1659748990
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp0z0e6aj2.jl:23\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  KeyError:
    key \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64},
    key::Char)\n     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n     @
    Main /tmp/tmp0z0e6aj2.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:23 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0z0e6aj2.jl:22\ntest set: Error
    During Test at /tmp/tmp0z0e6aj2.jl:24\n  Test threw exception\n  Expression: candidate("a
    b c a b") == Dict("a" => 2, "b" => 2)\n  KeyError: key \''a\'' not found\n  Stacktrace:\n   [1]
    getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmp0z0e6aj2.jl:13\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:24 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmp0z0e6aj2.jl:22\ntest set: Error During Test at
    /tmp/tmp0z0e6aj2.jl:25\n  Test threw exception\n  Expression: candidate("a b c
    d g") == Dict("a" => 1, "b" => 1, "c" => 1, "d" => 1, "g" => 1)\n  KeyError: key
    \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @
    Base ./dict.jl:481\n   [2] histogram(test::String)\n     @ Main /tmp/tmp0z0e6aj2.jl:13\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:25 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n'
  timestamp: 1659748993
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    letters = split(test)\n\
    \    \n    histogram = Dict{String, Int64}()\n    \n    for letter in letters\n\
    \        histogram[letter] = get(histogram, letter, 0) + 1\n    end\n    \n  \
    \  return histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b \nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_gjr92hp.jl:20\nin expression starting at\
    \ /tmp/tmp_gjr92hp.jl:20\n"
  stdout: ''
  timestamp: 1659748998
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in split(test)\n        histogram[letter] = get(histogram,\
    \ letter, 0) + 1\n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq1wzhu_8.jl:18\nin expression starting at\
    \ /tmp/tmpq1wzhu_8.jl:18\n"
  stdout: ''
  timestamp: 1659748998
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"ab\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsrzzq8nb.jl:16\nin expression starting at\
    \ /tmp/tmpsrzzq8nb.jl:16\n"
  stdout: ''
  timestamp: 1659748998
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpp312_w5m.jl:22\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  KeyError:
    key \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64},
    key::Char)\n     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n     @
    Main /tmp/tmpp312_w5m.jl:12\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpp312_w5m.jl:22 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpp312_w5m.jl:21\ntest set: Error
    During Test at /tmp/tmpp312_w5m.jl:23\n  Test threw exception\n  Expression: candidate("a
    b c a b") == Dict("a" => 2, "b" => 2)\n  KeyError: key \''a\'' not found\n  Stacktrace:\n   [1]
    getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmpp312_w5m.jl:12\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmpp312_w5m.jl:23 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmpp312_w5m.jl:21\ntest set: Error During Test at
    /tmp/tmpp312_w5m.jl:24\n  Test threw exception\n  Expression: candidate("a b c
    d g") == Dict("a" => 1, "b" => 1, "c" => 1, "d" => 1, "g" => 1)\n  KeyError: key
    \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @
    Base ./dict.jl:481\n   [2] histogram(test::String)\n     @ Main /tmp/tmpp312_w5m.jl:12\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpp312_w5m.jl:24 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n'
  timestamp: 1659748993
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = histogram[letter] + 1\n    end\n    return histogram\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp79zo8pxv.jl:21\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  KeyError:
    key "a" not found\n  Stacktrace:\n   [1] getindex\n     @ ./dict.jl:481 [inlined]\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmp79zo8pxv.jl:12\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmp79zo8pxv.jl:21 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmp79zo8pxv.jl:20\ntest set: Error During Test at
    /tmp/tmp79zo8pxv.jl:22\n  Test threw exception\n  Expression: candidate("a b c
    a b") == Dict("a" => 2, "b" => 2)\n  KeyError: key "a" not found\n  Stacktrace:\n   [1]
    getindex\n     @ ./dict.jl:481 [inlined]\n   [2] histogram(test::String)\n     @
    Main /tmp/tmp79zo8pxv.jl:12\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp79zo8pxv.jl:22 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmp79zo8pxv.jl:20\ntest set: Error
    During Test at /tmp/tmp79zo8pxv.jl:23\n  Test threw exception\n  Expression: candidate("a
    b c d g") == Dict("a" => 1, "b" => 1, "c" => 1, "d" => 1, "g" => 1)\n  KeyError:
    key "a" not found\n  Stacktrace:\n   [1] getindex\n     @ ./dict.jl:481 [inlined]\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmp79zo8pxv.jl:12\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmp79zo8pxv.jl:23 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmp79zo8pxv.jl:20\ntest set: Error During Test at
    /tmp/tmp79'
  timestamp: 1659749001
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for i in split(test)\n        histogram[i] = histogram[i]\
    \ + 1 \n    end\n    \n    return histogram\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp2nh__bbe.jl:23\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  KeyError:
    key "a" not found\n  Stacktrace:\n   [1] getindex\n     @ ./dict.jl:481 [inlined]\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmp2nh__bbe.jl:13\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmp2nh__bbe.jl:23 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmp2nh__bbe.jl:22\ntest set: Error During Test at
    /tmp/tmp2nh__bbe.jl:24\n  Test threw exception\n  Expression: candidate("a b c
    a b") == Dict("a" => 2, "b" => 2)\n  KeyError: key "a" not found\n  Stacktrace:\n   [1]
    getindex\n     @ ./dict.jl:481 [inlined]\n   [2] histogram(test::String)\n     @
    Main /tmp/tmp2nh__bbe.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp2nh__bbe.jl:24 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmp2nh__bbe.jl:22\ntest set: Error
    During Test at /tmp/tmp2nh__bbe.jl:25\n  Test threw exception\n  Expression: candidate("a
    b c d g") == Dict("a" => 1, "b" => 1, "c" => 1, "d" => 1, "g" => 1)\n  KeyError:
    key "a" not found\n  Stacktrace:\n   [1] getindex\n     @ ./dict.jl:481 [inlined]\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmp2nh__bbe.jl:13\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmp2nh__bbe.jl:25 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmp2nh__bbe.jl:22\ntest set: Error During Test at
    /tmp/tmp2n'
  timestamp: 1659748995
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1 if letter in histogram else 1\n    end\n    return histogram\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpdc8znto1.jl:10 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdc8znto1.jl:11\n\
    in expression starting at /tmp/tmpdc8znto1.jl:11\n"
  stdout: ''
  timestamp: 1659748998
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnky9oxt_.jl:17\nin expression starting at\
    \ /tmp/tmpnky9oxt_.jl:17\n"
  stdout: ''
  timestamp: 1659748995
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp0z0e6aj2.jl:23\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  KeyError:
    key \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64},
    key::Char)\n     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n     @
    Main /tmp/tmp0z0e6aj2.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:23 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0z0e6aj2.jl:22\ntest set: Error
    During Test at /tmp/tmp0z0e6aj2.jl:24\n  Test threw exception\n  Expression: candidate("a
    b c a b") == Dict("a" => 2, "b" => 2)\n  KeyError: key \''a\'' not found\n  Stacktrace:\n   [1]
    getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmp0z0e6aj2.jl:13\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:24 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmp0z0e6aj2.jl:22\ntest set: Error During Test at
    /tmp/tmp0z0e6aj2.jl:25\n  Test threw exception\n  Expression: candidate("a b c
    d g") == Dict("a" => 1, "b" => 1, "c" => 1, "d" => 1, "g" => 1)\n  KeyError: key
    \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @
    Base ./dict.jl:481\n   [2] histogram(test::String)\n     @ Main /tmp/tmp0z0e6aj2.jl:13\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:25 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n'
  timestamp: 1659748993
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp0z0e6aj2.jl:23\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  KeyError:
    key \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64},
    key::Char)\n     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n     @
    Main /tmp/tmp0z0e6aj2.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:23 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0z0e6aj2.jl:22\ntest set: Error
    During Test at /tmp/tmp0z0e6aj2.jl:24\n  Test threw exception\n  Expression: candidate("a
    b c a b") == Dict("a" => 2, "b" => 2)\n  KeyError: key \''a\'' not found\n  Stacktrace:\n   [1]
    getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmp0z0e6aj2.jl:13\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:24 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmp0z0e6aj2.jl:22\ntest set: Error During Test at
    /tmp/tmp0z0e6aj2.jl:25\n  Test threw exception\n  Expression: candidate("a b c
    d g") == Dict("a" => 1, "b" => 1, "c" => 1, "d" => 1, "g" => 1)\n  KeyError: key
    \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @
    Base ./dict.jl:481\n   [2] histogram(test::String)\n     @ Main /tmp/tmp0z0e6aj2.jl:13\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:25 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n'
  timestamp: 1659748993
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpp312_w5m.jl:22\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  KeyError:
    key \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64},
    key::Char)\n     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n     @
    Main /tmp/tmpp312_w5m.jl:12\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpp312_w5m.jl:22 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpp312_w5m.jl:21\ntest set: Error
    During Test at /tmp/tmpp312_w5m.jl:23\n  Test threw exception\n  Expression: candidate("a
    b c a b") == Dict("a" => 2, "b" => 2)\n  KeyError: key \''a\'' not found\n  Stacktrace:\n   [1]
    getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmpp312_w5m.jl:12\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmpp312_w5m.jl:23 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmpp312_w5m.jl:21\ntest set: Error During Test at
    /tmp/tmpp312_w5m.jl:24\n  Test threw exception\n  Expression: candidate("a b c
    d g") == Dict("a" => 1, "b" => 1, "c" => 1, "d" => 1, "g" => 1)\n  KeyError: key
    \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @
    Base ./dict.jl:481\n   [2] histogram(test::String)\n     @ Main /tmp/tmpp312_w5m.jl:12\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpp312_w5m.jl:24 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n'
  timestamp: 1659748993
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    letters = split(test)\n\
    \    \n    letters_count = Dict{String, Int64}()\n    \n    for letter in letters\n\
    \        letters_count[letter] = get(letters_count, letter, 0) + 1\n    end\n\
    \    \n    return letters_count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpq3rxrc8h.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpq3rxrc8h.jl:26\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq3rxrc8h.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq3rxrc8h.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpq3rxrc8h.jl:29\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq3rxrc8h.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq3rxrc8h.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659749000
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    letters = split(test)\n\
    \    \n    counts = Dict{String, Int64}()\n    \n    for letter in letters\n \
    \       counts[letter] = get(counts, letter, 0) + 1\n    end\n    \n    return\
    \ counts\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c \nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx8720l2_.jl:20\nin expression starting at\
    \ /tmp/tmpx8720l2_.jl:20\n"
  stdout: ''
  timestamp: 1659748998
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    letters = split(test)\n\
    \    counts = Dict{String, Int64}()\n    for letter in letters\n        counts[letter]\
    \ = get(counts, letter, 0) + 1\n    \n    return counts\nend\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"\
    a b c a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"\
    a b c a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"\
    a b c a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"\
    a b c a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"\
    a b c a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"\
    a b c a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"\
    a b c a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"\
    a b c a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"\
    a b c a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"\
    a b c a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"\
    a b c a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"\
    a b c a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"\
    a b c a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"\
    a b c a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"\
    a b c a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"\
    a b c a b c a b c a b \nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd_qbxlis.jl:17\nin expression starting at\
    \ /tmp/tmpd_qbxlis.jl:17\n"
  stdout: ''
  timestamp: 1659749000
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadab\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9gtwy2ag.jl:18\nin expression starting at\
    \ /tmp/tmp9gtwy2ag.jl:18\n"
  stdout: ''
  timestamp: 1659748990
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    for letter in test\n        histogram[letter] = get(histogram,\
    \ letter, 0) + 1\n    end\n    histogram\nend\nusing Test\n\n@testset begin\n\n\
    candidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpmtcflccs.jl:20\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  MethodError:
    Cannot `convert` an object of type Char to an object of type String\n  Closest
    candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n    convert(::Type{T},
    !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n    convert(::Type{T},
    !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n    ...\n  Stacktrace:\n   [1]
    setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n     @ Base ./dict.jl:373\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmpmtcflccs.jl:11\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmpmtcflccs.jl:20 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmpmtcflccs.jl:19\n'''
  timestamp: 1659748995
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    counts = Dict{String, Int64}()\n\
    \    for letter in test\n        counts[letter] = get(counts, letter, 0) + 1\n\
    \    end\n    counts\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b\
    \ c d e f g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of characters\
    \ in the string that are not letters.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptvj68_ic.jl:15\nin expression starting at\
    \ /tmp/tmptvj68_ic.jl:15\n"
  stdout: ''
  timestamp: 1659749000
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c d e f g h i j k l m n o p q r s t\
    \ u v w x y z\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c d e f\
    \ g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c d e f g h i j k l m n o p q r s t\
    \ u v w x y z\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c d e f\
    \ g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c d e f g h i j k l m n o p q r s t\
    \ u v w x y z\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c d e f\
    \ g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c d e f g h i j k l m n o p q r s t\
    \ u v w x y z\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c d e f\
    \ g h i j k l m n o p q r s t u v \nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8asrhqr9.jl:17\nin expression starting at\
    \ /tmp/tmp8asrhqr9.jl:17\n"
  stdout: ''
  timestamp: 1659749000
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    letters = split(test)\n\
    \    counts = Dict{String, Int64}()\n    for letter in letters\n        counts[letter]\
    \ = get(counts, letter, 0) + 1\n    end\n    return counts\nend\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\
    a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c a b c a b c \nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t\
    @test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8hd5_8ro.jl:17\nin expression starting at\
    \ /tmp/tmp8hd5_8ro.jl:17\n"
  stdout: ''
  timestamp: 1659749000
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    letters = split(test)\n\
    \    \n    counts = Dict{String, Int64}()\n    \n    for letter in letters\n \
    \       counts[letter] = get(counts, letter, 0) + 1\n    end\n    \n    return\
    \ counts\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b c a b\
    \ c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b c a b\
    \ c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b c a b\
    \ c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b c a b\
    \ c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b c a b\
    \ c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b c a b\
    \ c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b c a b\
    \ c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b c a b\
    \ c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b c a b\
    \ c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b c a b\
    \ c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b c a b\
    \ c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b c a b\
    \ c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b c a b\
    \ c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b c a b\
    \ c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b c a b\
    \ c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b c a b\
    \ c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b c a b\
    \ c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b c a b\
    \ c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\nusing Test\n\n\
    @testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp32qpbf52.jl:20\nin expression starting at\
    \ /tmp/tmp32qpbf52.jl:20\n"
  stdout: ''
  timestamp: 1659749001
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    for c in test\n        histogram[c] = histogram.get(c, 0) + 1\n\
    \    end\n    return histogram\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp9kglx01g.jl:20\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  type
    Dict has no field get\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42
    [inlined]\n   [2] histogram(test::String)\n     @ Main /tmp/tmp9kglx01g.jl:11\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9kglx01g.jl:20 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9kglx01g.jl:19\ntest set: Error
    During Test at /tmp/tmp9kglx01g.jl:21\n  Test threw exception\n  Expression: candidate("a
    b c a b") == Dict("a" => 2, "b" => 2)\n  type Dict has no field get\n  Stacktrace:\n   [1]
    getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] histogram(test::String)\n     @
    Main /tmp/tmp9kglx01g.jl:11\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9kglx01g.jl:21 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9kglx01g.jl:19\ntest set: Error
    During Test at /tmp/tmp9kglx01g.jl:22\n  Test threw exception\n  Expression: candidate("a
    b c d g") == Dict("a" => 1, "b" => 1, "c" => 1, "d" => 1, "g" => 1)\n  type Dict
    has no field get\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmp9kglx01g.jl:11\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmp9kglx01g.jl:22 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmp9kglx01g.jl:19\ntest set: Error During Test at
    /tmp/tm'
  timestamp: 1659749003
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c d e f g h i j k l m n o p q r s t\
    \ u v w x y z\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c d e f\
    \ g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c d e f g h i j k l m n o p q r s t\
    \ u v w x y z\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c d e f\
    \ g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c d e f g h i j k l m n o p q r s t\
    \ u v w x y z\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c d e f\
    \ g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c d e f g h i j k l m n o p q r s t\
    \ u v w x y z\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c d e f\
    \ g h i j k l m n o p q r s t \nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8z40f4ii.jl:18\nin expression starting at\
    \ /tmp/tmp8z40f4ii.jl:18\n"
  stdout: ''
  timestamp: 1659748990
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = get(histogram,\
    \ letter, 0) + 1\n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.4>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.4>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.4>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.4>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.4>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.4>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.4>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.4>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.4>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"abba\")\n\
    </cell>\n<code language=\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk61z4pjc.jl:18\nin expression starting at\
    \ /tmp/tmpk61z4pjc.jl:18\n"
  stdout: ''
  timestamp: 1659749001
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnky9oxt_.jl:17\nin expression starting at\
    \ /tmp/tmpnky9oxt_.jl:17\n"
  stdout: ''
  timestamp: 1659748995
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp0z0e6aj2.jl:23\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  KeyError:
    key \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64},
    key::Char)\n     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n     @
    Main /tmp/tmp0z0e6aj2.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:23 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0z0e6aj2.jl:22\ntest set: Error
    During Test at /tmp/tmp0z0e6aj2.jl:24\n  Test threw exception\n  Expression: candidate("a
    b c a b") == Dict("a" => 2, "b" => 2)\n  KeyError: key \''a\'' not found\n  Stacktrace:\n   [1]
    getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmp0z0e6aj2.jl:13\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:24 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmp0z0e6aj2.jl:22\ntest set: Error During Test at
    /tmp/tmp0z0e6aj2.jl:25\n  Test threw exception\n  Expression: candidate("a b c
    d g") == Dict("a" => 1, "b" => 1, "c" => 1, "d" => 1, "g" => 1)\n  KeyError: key
    \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @
    Base ./dict.jl:481\n   [2] histogram(test::String)\n     @ Main /tmp/tmp0z0e6aj2.jl:13\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:25 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n'
  timestamp: 1659748993
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp0z0e6aj2.jl:23\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  KeyError:
    key \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64},
    key::Char)\n     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n     @
    Main /tmp/tmp0z0e6aj2.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:23 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0z0e6aj2.jl:22\ntest set: Error
    During Test at /tmp/tmp0z0e6aj2.jl:24\n  Test threw exception\n  Expression: candidate("a
    b c a b") == Dict("a" => 2, "b" => 2)\n  KeyError: key \''a\'' not found\n  Stacktrace:\n   [1]
    getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmp0z0e6aj2.jl:13\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:24 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmp0z0e6aj2.jl:22\ntest set: Error During Test at
    /tmp/tmp0z0e6aj2.jl:25\n  Test threw exception\n  Expression: candidate("a b c
    d g") == Dict("a" => 1, "b" => 1, "c" => 1, "d" => 1, "g" => 1)\n  KeyError: key
    \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @
    Base ./dict.jl:481\n   [2] histogram(test::String)\n     @ Main /tmp/tmp0z0e6aj2.jl:13\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:25 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n'
  timestamp: 1659748993
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = get(histogram,\
    \ letter, 0) + 1\n    end\n    \n    return histogram\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp7vfajqb1.jl:23\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  MethodError:
    Cannot `convert` an object of type Char to an object of type String\n  Closest
    candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n    convert(::Type{T},
    !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n    convert(::Type{T},
    !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n    ...\n  Stacktrace:\n   [1]
    setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n     @ Base ./dict.jl:373\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmp7vfajqb1.jl:13\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmp7vfajqb1.jl:23 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmp7vfajqb1.jl:22\n'''
  timestamp: 1659748993
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = get(histogram,\
    \ letter, 0) + 1\n    end\n    \n    return histogram\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp7vfajqb1.jl:23\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  MethodError:
    Cannot `convert` an object of type Char to an object of type String\n  Closest
    candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n    convert(::Type{T},
    !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n    convert(::Type{T},
    !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n    ...\n  Stacktrace:\n   [1]
    setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n     @ Base ./dict.jl:373\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmp7vfajqb1.jl:13\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmp7vfajqb1.jl:23 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmp7vfajqb1.jl:22\n'''
  timestamp: 1659748993
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp0z0e6aj2.jl:23\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  KeyError:
    key \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64},
    key::Char)\n     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n     @
    Main /tmp/tmp0z0e6aj2.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:23 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0z0e6aj2.jl:22\ntest set: Error
    During Test at /tmp/tmp0z0e6aj2.jl:24\n  Test threw exception\n  Expression: candidate("a
    b c a b") == Dict("a" => 2, "b" => 2)\n  KeyError: key \''a\'' not found\n  Stacktrace:\n   [1]
    getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmp0z0e6aj2.jl:13\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:24 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmp0z0e6aj2.jl:22\ntest set: Error During Test at
    /tmp/tmp0z0e6aj2.jl:25\n  Test threw exception\n  Expression: candidate("a b c
    d g") == Dict("a" => 1, "b" => 1, "c" => 1, "d" => 1, "g" => 1)\n  KeyError: key
    \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @
    Base ./dict.jl:481\n   [2] histogram(test::String)\n     @ Main /tmp/tmp0z0e6aj2.jl:13\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:25 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n'
  timestamp: 1659748993
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp0z0e6aj2.jl:23\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  KeyError:
    key \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64},
    key::Char)\n     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n     @
    Main /tmp/tmp0z0e6aj2.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:23 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0z0e6aj2.jl:22\ntest set: Error
    During Test at /tmp/tmp0z0e6aj2.jl:24\n  Test threw exception\n  Expression: candidate("a
    b c a b") == Dict("a" => 2, "b" => 2)\n  KeyError: key \''a\'' not found\n  Stacktrace:\n   [1]
    getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmp0z0e6aj2.jl:13\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:24 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmp0z0e6aj2.jl:22\ntest set: Error During Test at
    /tmp/tmp0z0e6aj2.jl:25\n  Test threw exception\n  Expression: candidate("a b c
    d g") == Dict("a" => 1, "b" => 1, "c" => 1, "d" => 1, "g" => 1)\n  KeyError: key
    \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @
    Base ./dict.jl:481\n   [2] histogram(test::String)\n     @ Main /tmp/tmp0z0e6aj2.jl:13\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:25 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n'
  timestamp: 1659748993
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = get(histogram,\
    \ letter, 0) + 1\n    end\n    \n    return histogram\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpx7j14kcy.jl:22\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  MethodError:
    Cannot `convert` an object of type Char to an object of type String\n  Closest
    candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n    convert(::Type{T},
    !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n    convert(::Type{T},
    !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n    ...\n  Stacktrace:\n   [1]
    setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n     @ Base ./dict.jl:373\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmpx7j14kcy.jl:12\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmpx7j14kcy.jl:22 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmpx7j14kcy.jl:21\ntest set: Error During Test at
    /tmp/tmpx7j14kcy.jl:23\n  Test threw exception\n  Expression: candidate("a b c
    a b") == Dict("a" => 2, "b" => 2)\n  MethodError: Cannot `convert` an object of
    type Char to an object of type String\n  Closest candidates are:\n    convert(::Type{String},
    !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n    convert(::Type{T},
    !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n    convert(::Type{T},
    !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n    ...\n  Stacktrace:\n   [1]
    setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n     @ Base ./dict.jl:373\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmpx7j14kcy.jl:12\n   [3] macro expansion\n     @
    /shared/centos'
  timestamp: 1659748993
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadab\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9gtwy2ag.jl:18\nin expression starting at\
    \ /tmp/tmp9gtwy2ag.jl:18\n"
  stdout: ''
  timestamp: 1659748990
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = histogram[letter] + 1 if histogram[letter] == 0\n    end\n    return histogram\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpgjp9r49g.jl:11 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgjp9r49g.jl:12\n\
    in expression starting at /tmp/tmpgjp9r49g.jl:12\n"
  stdout: ''
  timestamp: 1659749001
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp0z0e6aj2.jl:23\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  KeyError:
    key \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64},
    key::Char)\n     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n     @
    Main /tmp/tmp0z0e6aj2.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:23 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0z0e6aj2.jl:22\ntest set: Error
    During Test at /tmp/tmp0z0e6aj2.jl:24\n  Test threw exception\n  Expression: candidate("a
    b c a b") == Dict("a" => 2, "b" => 2)\n  KeyError: key \''a\'' not found\n  Stacktrace:\n   [1]
    getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmp0z0e6aj2.jl:13\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:24 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmp0z0e6aj2.jl:22\ntest set: Error During Test at
    /tmp/tmp0z0e6aj2.jl:25\n  Test threw exception\n  Expression: candidate("a b c
    d g") == Dict("a" => 1, "b" => 1, "c" => 1, "d" => 1, "g" => 1)\n  KeyError: key
    \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @
    Base ./dict.jl:481\n   [2] histogram(test::String)\n     @ Main /tmp/tmp0z0e6aj2.jl:13\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:25 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n'
  timestamp: 1659748993
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for char in test\n        histogram[char] = histogram[char]\
    \ + 1\n    end\n    \n    return histogram\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmptb4w1zci.jl:22\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  KeyError:
    key \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64},
    key::Char)\n     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n     @
    Main /tmp/tmptb4w1zci.jl:12\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmptb4w1zci.jl:22 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmptb4w1zci.jl:21\ntest set: Error
    During Test at /tmp/tmptb4w1zci.jl:23\n  Test threw exception\n  Expression: candidate("a
    b c a b") == Dict("a" => 2, "b" => 2)\n  KeyError: key \''a\'' not found\n  Stacktrace:\n   [1]
    getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmptb4w1zci.jl:12\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmptb4w1zci.jl:23 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmptb4w1zci.jl:21\ntest set: Error During Test at
    /tmp/tmptb4w1zci.jl:24\n  Test threw exception\n  Expression: candidate("a b c
    d g") == Dict("a" => 1, "b" => 1, "c" => 1, "d" => 1, "g" => 1)\n  KeyError: key
    \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @
    Base ./dict.jl:481\n   [2] histogram(test::String)\n     @ Main /tmp/tmptb4w1zci.jl:12\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmptb4w1zci.jl:24 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n'
  timestamp: 1659749003
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp0z0e6aj2.jl:23\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  KeyError:
    key \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64},
    key::Char)\n     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n     @
    Main /tmp/tmp0z0e6aj2.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:23 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0z0e6aj2.jl:22\ntest set: Error
    During Test at /tmp/tmp0z0e6aj2.jl:24\n  Test threw exception\n  Expression: candidate("a
    b c a b") == Dict("a" => 2, "b" => 2)\n  KeyError: key \''a\'' not found\n  Stacktrace:\n   [1]
    getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmp0z0e6aj2.jl:13\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:24 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmp0z0e6aj2.jl:22\ntest set: Error During Test at
    /tmp/tmp0z0e6aj2.jl:25\n  Test threw exception\n  Expression: candidate("a b c
    d g") == Dict("a" => 1, "b" => 1, "c" => 1, "d" => 1, "g" => 1)\n  KeyError: key
    \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @
    Base ./dict.jl:481\n   [2] histogram(test::String)\n     @ Main /tmp/tmp0z0e6aj2.jl:13\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:25 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n'
  timestamp: 1659748993
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for c in test\n        histogram[c] = histogram[c] + 1\n\
    \    end\n    \n    return histogram\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpl0uzhkhn.jl:23\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  KeyError:
    key \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64},
    key::Char)\n     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n     @
    Main /tmp/tmpl0uzhkhn.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpl0uzhkhn.jl:23 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpl0uzhkhn.jl:22\ntest set: Error
    During Test at /tmp/tmpl0uzhkhn.jl:24\n  Test threw exception\n  Expression: candidate("a
    b c a b") == Dict("a" => 2, "b" => 2)\n  KeyError: key \''a\'' not found\n  Stacktrace:\n   [1]
    getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmpl0uzhkhn.jl:13\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmpl0uzhkhn.jl:24 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmpl0uzhkhn.jl:22\ntest set: Error During Test at
    /tmp/tmpl0uzhkhn.jl:25\n  Test threw exception\n  Expression: candidate("a b c
    d g") == Dict("a" => 1, "b" => 1, "c" => 1, "d" => 1, "g" => 1)\n  KeyError: key
    \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @
    Base ./dict.jl:481\n   [2] histogram(test::String)\n     @ Main /tmp/tmpl0uzhkhn.jl:13\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpl0uzhkhn.jl:25 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n'
  timestamp: 1659749003
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    letters = split(test)\n\
    \    \n    counts = Dict{String, Int64}()\n    \n    for letter in letters\n \
    \       counts[letter] = get(counts, letter, 0) + 1\n    end\n    \n    return\
    \ counts\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b c a b\
    \ c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b c a b\
    \ c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b c a b\
    \ c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b c a b\
    \ c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b c a b\
    \ c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b c a b\
    \ c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b c a b\
    \ c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b c a b\
    \ c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b c a b\
    \ c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b c a b\
    \ c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b c a b\
    \ c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b c a b\
    \ c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b c a b\
    \ c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b c a b\
    \ c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b c a b\
    \ c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b c a b\
    \ c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b c a b\
    \ c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b c a b\
    \ c a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\nusing Test\n\n\
    @testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp32qpbf52.jl:20\nin expression starting at\
    \ /tmp/tmp32qpbf52.jl:20\n"
  stdout: ''
  timestamp: 1659749001
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadab\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9gtwy2ag.jl:18\nin expression starting at\
    \ /tmp/tmp9gtwy2ag.jl:18\n"
  stdout: ''
  timestamp: 1659748990
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadab\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9gtwy2ag.jl:18\nin expression starting at\
    \ /tmp/tmp9gtwy2ag.jl:18\n"
  stdout: ''
  timestamp: 1659748990
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpp312_w5m.jl:22\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  KeyError:
    key \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64},
    key::Char)\n     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n     @
    Main /tmp/tmpp312_w5m.jl:12\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpp312_w5m.jl:22 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpp312_w5m.jl:21\ntest set: Error
    During Test at /tmp/tmpp312_w5m.jl:23\n  Test threw exception\n  Expression: candidate("a
    b c a b") == Dict("a" => 2, "b" => 2)\n  KeyError: key \''a\'' not found\n  Stacktrace:\n   [1]
    getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmpp312_w5m.jl:12\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmpp312_w5m.jl:23 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmpp312_w5m.jl:21\ntest set: Error During Test at
    /tmp/tmpp312_w5m.jl:24\n  Test threw exception\n  Expression: candidate("a b c
    d g") == Dict("a" => 1, "b" => 1, "c" => 1, "d" => 1, "g" => 1)\n  KeyError: key
    \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @
    Base ./dict.jl:481\n   [2] histogram(test::String)\n     @ Main /tmp/tmpp312_w5m.jl:12\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpp312_w5m.jl:24 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n'
  timestamp: 1659748993
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadab\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9gtwy2ag.jl:18\nin expression starting at\
    \ /tmp/tmp9gtwy2ag.jl:18\n"
  stdout: ''
  timestamp: 1659748990
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for i in split(test)\n        histogram[i] = histogram[i]\
    \ + 1 \n        \n    \n    return histogram\n    \nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxkm7ku9u.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxkm7ku9u.jl:1\n\
    in expression starting at /tmp/tmpxkm7ku9u.jl:1\n"
  stdout: ''
  timestamp: 1659749001
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpp312_w5m.jl:22\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  KeyError:
    key \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64},
    key::Char)\n     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n     @
    Main /tmp/tmpp312_w5m.jl:12\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpp312_w5m.jl:22 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpp312_w5m.jl:21\ntest set: Error
    During Test at /tmp/tmpp312_w5m.jl:23\n  Test threw exception\n  Expression: candidate("a
    b c a b") == Dict("a" => 2, "b" => 2)\n  KeyError: key \''a\'' not found\n  Stacktrace:\n   [1]
    getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmpp312_w5m.jl:12\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmpp312_w5m.jl:23 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmpp312_w5m.jl:21\ntest set: Error During Test at
    /tmp/tmpp312_w5m.jl:24\n  Test threw exception\n  Expression: candidate("a b c
    d g") == Dict("a" => 1, "b" => 1, "c" => 1, "d" => 1, "g" => 1)\n  KeyError: key
    \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @
    Base ./dict.jl:481\n   [2] histogram(test::String)\n     @ Main /tmp/tmpp312_w5m.jl:12\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpp312_w5m.jl:24 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n'
  timestamp: 1659748993
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = get(histogram,\
    \ letter, 0) + 1\n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"ab\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpglt3us1w.jl:18\nin expression starting at\
    \ /tmp/tmpglt3us1w.jl:18\n"
  stdout: ''
  timestamp: 1659748995
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = histogram[letter] + 1\n    end\n    return histogram\nend\n</cell>\n<code\
    \ language=julia-1.0>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.0>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.0>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.0>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.0>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.0>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.0>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.0>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.0>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.0>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.0>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.0>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.0>\nhistogram(\"abracadab\nusing Test\n\n@testset begin\n\n\
    candidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy2e5173h.jl:16\nin expression starting at\
    \ /tmp/tmpy2e5173h.jl:16\n"
  stdout: ''
  timestamp: 1659749001
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for c in test\n        histogram[c] = histogram.get(c, 0)\
    \ + 1\n    end\n    \n    return histogram\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpkl1p0656.jl:23\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  type
    Dict has no field get\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42
    [inlined]\n   [2] histogram(test::String)\n     @ Main /tmp/tmpkl1p0656.jl:13\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpkl1p0656.jl:23 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpkl1p0656.jl:22\ntest set: Error
    During Test at /tmp/tmpkl1p0656.jl:24\n  Test threw exception\n  Expression: candidate("a
    b c a b") == Dict("a" => 2, "b" => 2)\n  type Dict has no field get\n  Stacktrace:\n   [1]
    getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] histogram(test::String)\n     @
    Main /tmp/tmpkl1p0656.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpkl1p0656.jl:24 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpkl1p0656.jl:22\ntest set: Error
    During Test at /tmp/tmpkl1p0656.jl:25\n  Test threw exception\n  Expression: candidate("a
    b c d g") == Dict("a" => 1, "b" => 1, "c" => 1, "d" => 1, "g" => 1)\n  type Dict
    has no field get\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmpkl1p0656.jl:13\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmpkl1p0656.jl:25 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmpkl1p0656.jl:22\ntest set: Error During Test at
    /tmp/tm'
  timestamp: 1659749003
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = get(histogram,\
    \ letter, 0) + 1\n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"ab\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpglt3us1w.jl:18\nin expression starting at\
    \ /tmp/tmpglt3us1w.jl:18\n"
  stdout: ''
  timestamp: 1659748995
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = get(histogram,\
    \ letter, 0) + 1\n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"ab\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpglt3us1w.jl:18\nin expression starting at\
    \ /tmp/tmpglt3us1w.jl:18\n"
  stdout: ''
  timestamp: 1659748995
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = histogram[letter] + 1\n    end\n    histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadab\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjbxb5wfs.jl:16\nin expression starting at\
    \ /tmp/tmpjbxb5wfs.jl:16\n"
  stdout: ''
  timestamp: 1659749001
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    letters = split(test)\n\
    \    \n    histogram = Dict{String, Int64}()\n    \n    for letter in letters\n\
    \        histogram[letter] = histogram[letter] + 1\n    end\n    \n    return\
    \ histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b \nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5pj87de1.jl:20\nin expression starting at\
    \ /tmp/tmp5pj87de1.jl:20\n"
  stdout: ''
  timestamp: 1659749001
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnky9oxt_.jl:17\nin expression starting at\
    \ /tmp/tmpnky9oxt_.jl:17\n"
  stdout: ''
  timestamp: 1659748995
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns a string\
    \ with the first letter of each word capitalized.\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa2fx9m8x.jl:18\nin expression starting at\
    \ /tmp/tmpa2fx9m8x.jl:18\n"
  stdout: ''
  timestamp: 1659749001
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for char in test\n        histogram[char] = histogram[char]\
    \ + 1\n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c d e f g h i j k l m n o p q r s t\
    \ u v w x y z\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c d e f\
    \ g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c d e f g h i j k l m n o p q r s t\
    \ u v w x y z\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c d e f\
    \ g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c d e f g h i j k l m n o p q r s t\
    \ u v w x y z\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c d e f\
    \ g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c d e f g h i j k l m n o p q r s t\
    \ u v w x y z\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c d e f\
    \ g h i j k l m n o p q r s t u \nusing Test\n\n@testset begin\n\ncandidate =\
    \ histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprff2t2bq.jl:18\nin expression starting at\
    \ /tmp/tmprff2t2bq.jl:18\n"
  stdout: ''
  timestamp: 1659749001
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c \nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprxa2rvg4.jl:17\nin expression starting at\
    \ /tmp/tmprxa2rvg4.jl:17\n"
  stdout: ''
  timestamp: 1659748998
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = get(histogram,\
    \ letter, 0) + 1\n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a \nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp6j9p1ht.jl:18\nin expression starting at\
    \ /tmp/tmpp6j9p1ht.jl:18\n"
  stdout: ''
  timestamp: 1659749002
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp0z0e6aj2.jl:23\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  KeyError:
    key \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64},
    key::Char)\n     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n     @
    Main /tmp/tmp0z0e6aj2.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:23 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0z0e6aj2.jl:22\ntest set: Error
    During Test at /tmp/tmp0z0e6aj2.jl:24\n  Test threw exception\n  Expression: candidate("a
    b c a b") == Dict("a" => 2, "b" => 2)\n  KeyError: key \''a\'' not found\n  Stacktrace:\n   [1]
    getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmp0z0e6aj2.jl:13\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:24 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmp0z0e6aj2.jl:22\ntest set: Error During Test at
    /tmp/tmp0z0e6aj2.jl:25\n  Test threw exception\n  Expression: candidate("a b c
    d g") == Dict("a" => 1, "b" => 1, "c" => 1, "d" => 1, "g" => 1)\n  KeyError: key
    \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @
    Base ./dict.jl:481\n   [2] histogram(test::String)\n     @ Main /tmp/tmp0z0e6aj2.jl:13\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:25 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n'
  timestamp: 1659748993
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp0z0e6aj2.jl:23\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  KeyError:
    key \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64},
    key::Char)\n     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n     @
    Main /tmp/tmp0z0e6aj2.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:23 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0z0e6aj2.jl:22\ntest set: Error
    During Test at /tmp/tmp0z0e6aj2.jl:24\n  Test threw exception\n  Expression: candidate("a
    b c a b") == Dict("a" => 2, "b" => 2)\n  KeyError: key \''a\'' not found\n  Stacktrace:\n   [1]
    getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmp0z0e6aj2.jl:13\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:24 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmp0z0e6aj2.jl:22\ntest set: Error During Test at
    /tmp/tmp0z0e6aj2.jl:25\n  Test threw exception\n  Expression: candidate("a b c
    d g") == Dict("a" => 1, "b" => 1, "c" => 1, "d" => 1, "g" => 1)\n  KeyError: key
    \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @
    Base ./dict.jl:481\n   [2] histogram(test::String)\n     @ Main /tmp/tmp0z0e6aj2.jl:13\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:25 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n'
  timestamp: 1659748993
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    for c in test\n        histogram[c] = histogram[c] ? histogram[c]\
    \ + 1 : 1\n    end\n    histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"\
    a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b \nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphf52l1xd.jl:15\nin expression starting at\
    \ /tmp/tmphf52l1xd.jl:15\n"
  stdout: ''
  timestamp: 1659749002
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    counts = Dict{String, Int64}()\n\
    \    for c in test\n        counts[c] = get(counts, c, 0) + 1\n    \n    return\
    \ counts\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxm7q76qo.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxm7q76qo.jl:1\n\
    in expression starting at /tmp/tmpxm7q76qo.jl:1\n"
  stdout: ''
  timestamp: 1659749002
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5\nusing Test\n\n@testset begin\n\ncandidate =\
    \ histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi8641346.jl:18\nin expression starting at\
    \ /tmp/tmpi8641346.jl:18\n"
  stdout: ''
  timestamp: 1659748990
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for c in test\n        histogram[c] = histogram.get(c, 0)\
    \ + 1\n    end\n    \n    return histogram\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpw6nbwy1c.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpw6nbwy1c.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  type\
    \ Dict has no field get\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] histogram(test::String)\n     @ Main /tmp/tmpw6nbwy1c.jl:12\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpw6nbwy1c.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpw6nbwy1c.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpw6nbwy1c.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  type Dict has no\
    \ field get\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] histogram(test::String)\n     @ Main /tmp/tmpw6nbwy1c.jl:12\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpw6nbwy1c.jl:23 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpw6nbwy1c.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpw6nbwy1c.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\n  type Dict has no field get\n  Stacktrace:\n   [1] getproperty\n\
    \     @ ./Base.jl:42 [inlined]\n   [2] histogram(test::String)\n     @ Main /tmp/tmpw6nbwy1c.jl:12\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpw6nbwy1c.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpw6nbwy1c.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpw6nbwy1c.jl:25\n  Test threw exception\n  Expression: "
  timestamp: 1659749004
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for c in test\n        histogram[c] = histogram.get(c, 0)\
    \ + 1\n    end\n    \n    return histogram\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpkl1p0656.jl:23\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  type
    Dict has no field get\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42
    [inlined]\n   [2] histogram(test::String)\n     @ Main /tmp/tmpkl1p0656.jl:13\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpkl1p0656.jl:23 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpkl1p0656.jl:22\ntest set: Error
    During Test at /tmp/tmpkl1p0656.jl:24\n  Test threw exception\n  Expression: candidate("a
    b c a b") == Dict("a" => 2, "b" => 2)\n  type Dict has no field get\n  Stacktrace:\n   [1]
    getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] histogram(test::String)\n     @
    Main /tmp/tmpkl1p0656.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpkl1p0656.jl:24 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpkl1p0656.jl:22\ntest set: Error
    During Test at /tmp/tmpkl1p0656.jl:25\n  Test threw exception\n  Expression: candidate("a
    b c d g") == Dict("a" => 1, "b" => 1, "c" => 1, "d" => 1, "g" => 1)\n  type Dict
    has no field get\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmpkl1p0656.jl:13\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmpkl1p0656.jl:25 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmpkl1p0656.jl:22\ntest set: Error During Test at
    /tmp/tm'
  timestamp: 1659749003
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    for letter in test\n        histogram[letter] = get(histogram,\
    \ letter, 0) + 1\n    end\n    return histogram\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpgrffouys.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpgrffouys.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmpgrffouys.jl:11\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgrffouys.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgrffouys.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpgrffouys.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmpgrffouys.jl:11\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/T"
  timestamp: 1659749005
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = get(histogram,\
    \ letter, 0) + 1\n    end\n    \n    return histogram\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp7vfajqb1.jl:23\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  MethodError:
    Cannot `convert` an object of type Char to an object of type String\n  Closest
    candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n    convert(::Type{T},
    !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n    convert(::Type{T},
    !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n    ...\n  Stacktrace:\n   [1]
    setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n     @ Base ./dict.jl:373\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmp7vfajqb1.jl:13\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmp7vfajqb1.jl:23 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmp7vfajqb1.jl:22\n'''
  timestamp: 1659748993
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a \nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprbdb126l.jl:18\nin expression starting at\
    \ /tmp/tmprbdb126l.jl:18\n"
  stdout: ''
  timestamp: 1659748998
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.4>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.4>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.4>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.4>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.4>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.4>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.4>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.4>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.4>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.4>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.4>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.4>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"abracadabra\")\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp17gqqgic.jl:17\nin expression starting at\
    \ /tmp/tmp17gqqgic.jl:17\n"
  stdout: ''
  timestamp: 1659749003
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    for c in test\n        histogram[c] = histogram.get(c, 0) + 1\n\
    \    end\n    histogram\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpep2ywrak.jl:20\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  type
    Dict has no field get\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42
    [inlined]\n   [2] histogram(test::String)\n     @ Main /tmp/tmpep2ywrak.jl:11\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpep2ywrak.jl:20 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpep2ywrak.jl:19\ntest set: Error
    During Test at /tmp/tmpep2ywrak.jl:21\n  Test threw exception\n  Expression: candidate("a
    b c a b") == Dict("a" => 2, "b" => 2)\n  type Dict has no field get\n  Stacktrace:\n   [1]
    getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] histogram(test::String)\n     @
    Main /tmp/tmpep2ywrak.jl:11\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpep2ywrak.jl:21 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpep2ywrak.jl:19\ntest set: Error
    During Test at /tmp/tmpep2ywrak.jl:22\n  Test threw exception\n  Expression: candidate("a
    b c d g") == Dict("a" => 1, "b" => 1, "c" => 1, "d" => 1, "g" => 1)\n  type Dict
    has no field get\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmpep2ywrak.jl:11\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmpep2ywrak.jl:22 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmpep2ywrak.jl:19\ntest set: Error During Test at
    /tmp/tm'
  timestamp: 1659749000
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = get(histogram,\
    \ letter, 0) + 1\n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpba1j8uxg.jl:18\nin expression starting at\
    \ /tmp/tmpba1j8uxg.jl:18\n"
  stdout: ''
  timestamp: 1659749003
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for i in split(test)\n        histogram[i] = histogram[i]\
    \ + 1 \n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a \nusing Test\n\n@testset begin\n\ncandidate =\
    \ histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyyxhl2rp.jl:17\nin expression starting at\
    \ /tmp/tmpyyxhl2rp.jl:17\n"
  stdout: ''
  timestamp: 1659749003
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in split(test)\n        histogram[letter] = get(histogram,\
    \ letter, 0) + 1\n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of words in the string. \nThe function should ignore all punctuation and only\
    \ count the letters a-z.\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjrkk3uog.jl:18\nin expression starting at\
    \ /tmp/tmpjrkk3uog.jl:18\n"
  stdout: ''
  timestamp: 1659749003
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a \nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprbdb126l.jl:18\nin expression starting at\
    \ /tmp/tmprbdb126l.jl:18\n"
  stdout: ''
  timestamp: 1659748998
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for c in test\n        histogram[c] = histogram[c] + 1\n\
    \    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abracadabra\")\n\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_d9xq3ac.jl:18\nin expression starting at\
    \ /tmp/tmp_d9xq3ac.jl:18\n"
  stdout: ''
  timestamp: 1659749003
- exit_code: -1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp0z0e6aj2.jl:23\n  Test threw
    exception\n  Expression: candidate("a b b a") == Dict("a" => 2, "b" => 2)\n  KeyError:
    key \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64},
    key::Char)\n     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n     @
    Main /tmp/tmp0z0e6aj2.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:23 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0z0e6aj2.jl:22\ntest set: Error
    During Test at /tmp/tmp0z0e6aj2.jl:24\n  Test threw exception\n  Expression: candidate("a
    b c a b") == Dict("a" => 2, "b" => 2)\n  KeyError: key \''a\'' not found\n  Stacktrace:\n   [1]
    getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n   [2]
    histogram(test::String)\n     @ Main /tmp/tmp0z0e6aj2.jl:13\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:24 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmp0z0e6aj2.jl:22\ntest set: Error During Test at
    /tmp/tmp0z0e6aj2.jl:25\n  Test threw exception\n  Expression: candidate("a b c
    d g") == Dict("a" => 1, "b" => 1, "c" => 1, "d" => 1, "g" => 1)\n  KeyError: key
    \''a\'' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @
    Base ./dict.jl:481\n   [2] histogram(test::String)\n     @ Main /tmp/tmp0z0e6aj2.jl:13\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0z0e6aj2.jl:25 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n'
  timestamp: 1659748993
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    letters = split(test)\n\
    \    \n    histogram = Dict{String, Int64}()\n    \n    for letter in letters\n\
    \        histogram[letter] = histogram[letter] + 1\n    end\n    \n    return\
    \ histogram\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpaj7os3xk.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmpaj7os3xk.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  KeyError:\
    \ key \"a\" not found\n  Stacktrace:\n   [1] getindex\n     @ ./dict.jl:481 [inlined]\n\
    \   [2] histogram(test::String)\n     @ Main /tmp/tmpaj7os3xk.jl:15\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpaj7os3xk.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpaj7os3xk.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpaj7os3xk.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  KeyError: key \"\
    a\" not found\n  Stacktrace:\n   [1] getindex\n     @ ./dict.jl:481 [inlined]\n\
    \   [2] histogram(test::String)\n     @ Main /tmp/tmpaj7os3xk.jl:15\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpaj7os3xk.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpaj7os3xk.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpaj7os3xk.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\n  KeyError: key \"a\" not found\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./dict.jl:481 [inlined]\n   [2] histogram(test::String)\n     @ Main /tmp/tmpaj7os3xk.jl:15\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpaj7os3xk.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpaj7os3xk.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpaj7os3xk.jl:28\n  Test threw exception\n  Expression:\
    \ can"
  timestamp: 1659749005
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    for c in test\n        histogram[c] = histogram.get(c, 0) + 1\n\
    \    end\n    histogram\nend\n</cell>\n<code language=julia-1.3>\nhistogram(\"\
    abba\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"abba\")\n</cell>\n<code\
    \ language=julia-1.3>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.3>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.3>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.3>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.3>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.3>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.3>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.3>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.3>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.3>\nhistogram(\"abba\")\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzixjv65k.jl:15\nin expression starting at\
    \ /tmp/tmpzixjv65k.jl:15\n"
  stdout: ''
  timestamp: 1659749003
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"\
    abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz7l7lz2u.jl:15\nin expression starting at\
    \ /tmp/tmpz7l7lz2u.jl:15\n"
  stdout: ''
  timestamp: 1659748995
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.5\nusing Test\n\n@testset begin\n\ncandidate =\
    \ histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi8641346.jl:18\nin expression starting at\
    \ /tmp/tmpi8641346.jl:18\n"
  stdout: ''
  timestamp: 1659748990
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    for c in test\n        histogram[c] = histogram[c] ? histogram[c]\
    \ + 1 : 1\n    end\n    return histogram\nend\n\"\"\"\n    \n    \n\"\"\"\n  \
    \  \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n\"\"\"\n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpxhu19k6l.jl:256

    '
  stdout: "test set: Error During Test at /tmp/tmpxhu19k6l.jl:259\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  KeyError:\
    \ key 'a' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Char)\n\
    \     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n     @ Main /tmp/tmpxhu19k6l.jl:11\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxhu19k6l.jl:259 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxhu19k6l.jl:258\ntest set:\
    \ Error During Test at /tmp/tmpxhu19k6l.jl:260\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  KeyError: key 'a'\
    \ not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Char)\n\
    \     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n     @ Main /tmp/tmpxhu19k6l.jl:11\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxhu19k6l.jl:260 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxhu19k6l.jl:258\ntest set:\
    \ Error During Test at /tmp/tmpxhu19k6l.jl:261\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\n  KeyError: key 'a' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String,\
    \ Int64}, key::Char)\n     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n\
    \     @ Main /tmp/tmpxhu19k6l.jl:11\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxhu19k6l.jl:261 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxhu19k6l.jl"
  timestamp: 1659749005
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    for c in test\n        histogram[c] = get(histogram, c, 0) + 1\n\
    \    end\n    histogram\nend\n</cell>\n<code language=julia-1.3>\nhistogram(\"\
    a b c a b c a b c a b c\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c \nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxwbp8cbd.jl:15\nin expression starting at\
    \ /tmp/tmpxwbp8cbd.jl:15\n"
  stdout: ''
  timestamp: 1659749003
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    letters = split(test)\n\
    \    \n    letters = letters[2:end]\n    \n    letters = letters[2:end]\n    \n\
    \    letters = letters[2:end]\n    \n    letters = letters[2:end]\n    \n    letters\
    \ = letters[2:end]\n    \n    letters = letters[2:end]\n    \n    letters = letters[2:end]\n\
    \    \n    letters = letters[2:end]\n    \n    letters = letters[2:end]\n    \n\
    \    letters = letters[2:end]\n    \n    letters = letters[2:end]\n    \n    letters\
    \ = letters[2:end]\n    \n    letters = letters[2:end]\n    \n    letters = letters[2:end]\n\
    \    \n    letters = letters[2:end]\n    \n    letters = letters[2:end]\n    \n\
    \    letters = letters[2:end]\n    \n    letters = letters[2:end]\n    \n    letters\
    \ = letters[2:end]\n    \n    letters = letters[2:end]\n    \n    letters = letters[2:end]\n\
    \    \n    letters = letters[2:end]\n    \n    letters = letters[2:end]\n    \n\
    \    letters = letters[2:end]\n    \n    letters = letters[2:end]\n    \n    letters\
    \ = letters[2:end]\n    \n    letters = letters[2:end]\n    \n    letters = letters[2:end]\n\
    \    \n    letters = letters[2:end]\n    \n    letters = letters[2:end]\n    \n\
    \    letters = letters[2:end]\n    \n    letters = letters[2:end]\n    \n    letters\
    \ = letters[2:end]\n    \n    letters = letters[2:end]\n    \n    letters = letters[2:end]\n\
    \    \n    letters = letters[2:end]\n    \n    letters = letters[2:end]\n    \n\
    \    letters = letters[2:end]\n    \n    letters = letters[2:end]\n    \n    letters\
    \ = letters[2:end]\n    \n    letters = letters[2:end]\n    \n    letters = letters[2:end]\n\
    \    \n    letters = letters[2:end]\n    \n    letters = letters[2:end]\n    \n\
    \    letters = letters[2:end]\n    \n    letters = letters[2:end]\n    \n    letters\
    \ = letters[2:end]\n    \n    letters = letters[2:end]\n    \n    letters = letters[2:end]\n\
    \    \n    letters = letters[2:end]\n    \n    letter\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpim2745v0.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpim2745v0.jl:1\n\
    in expression starting at /tmp/tmpim2745v0.jl:1\n"
  stdout: ''
  timestamp: 1659749003
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    \n    histogram = Dict{String,\
    \ Int64}()\n    \n    for letter in test\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"abracadabra\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns the number of times each letter appears in the string.\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4xgad2ga.jl:18\nin expression starting at\
    \ /tmp/tmp4xgad2ga.jl:18\n"
  stdout: ''
  timestamp: 1659749003
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\nfunction\
    \ histogram(test::String)::Dict{String, Int64}> \n    histogram = Dict{String,\
    \ Int64}()\n    for letter in test\n        histogram[letter] = get(histogram,\
    \ letter, 0) + 1\n    end\n    histogram\nend\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.0>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.0>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.0>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.0>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.0>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.0>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.0>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.0>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.0>\nhistogram(\"abba\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"abba\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"abba\")\n\
    </cell>\n<code language=julia-1.0>\nhistogram\nusing Test\n\n@testset begin\n\n\
    candidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzyx_frqh.jl:15\nin expression starting at\
    \ /tmp/tmpzyx_frqh.jl:15\n"
  stdout: ''
  timestamp: 1659749003
