language: jl
name: HumanEval_21_rescale_to_unit
results:
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers ./=\
    \ maximum(rescaled_numbers)\n    return rescaled_numbers\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers ./=\
    \ maximum(rescaled_numbers)\n    return rescaled_numbers\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers.map(x -> x/min(numbers))\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmppg0kpuxa.jl:10

    '
  stdout: "test set: Error During Test at /tmp/tmppg0kpuxa.jl:13\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  type Array has no field\
    \ map\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2]\
    \ rescale_to_unit(numbers::Vector{Float64})\n     @ Main /tmp/tmppg0kpuxa.jl:5\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmppg0kpuxa.jl:13 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmppg0kpuxa.jl:12\ntest set:\
    \ Error During Test at /tmp/tmppg0kpuxa.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  type Array has no field map\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmppg0kpuxa.jl:5\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmppg0kpuxa.jl:14 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmppg0kpuxa.jl:12\ntest set:\
    \ Error During Test at /tmp/tmppg0kpuxa.jl:15\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n  type\
    \ Array has no field map\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] rescale_to_unit(numbers::Vector{Float64})\n     @ Main /tmp/tmppg0kpuxa.jl:5\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmppg0kpuxa.jl:15 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmppg0kpuxa.jl:12\ntest set:\
    \ Error During Test at /tmp/tmppg0kpuxa.jl:16\n  Test threw excepti"
  timestamp: 1659748825
- exit_code: 1
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled = numbers .- minimum(numbers)\n    rescaled ./= maximum(rescaled)\n\
    \    return rescaled\nend\n</cell>\n<code language=julia-1.5>\n# Let's try it\
    \ out\nnumbers = [1,2,3]\nrescaled = rescale_to_unit(numbers)\n</cell>\n<text>\n\
    Let's try it out with some random numbers\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3xq9evtl.jl:9\nin expression starting at /tmp/tmp3xq9evtl.jl:9\n"
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers ./=\
    \ maximum(rescaled_numbers)\n    return rescaled_numbers\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers.map(x -> x/min(numbers))\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmppg0kpuxa.jl:10

    '
  stdout: "test set: Error During Test at /tmp/tmppg0kpuxa.jl:13\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  type Array has no field\
    \ map\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2]\
    \ rescale_to_unit(numbers::Vector{Float64})\n     @ Main /tmp/tmppg0kpuxa.jl:5\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmppg0kpuxa.jl:13 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmppg0kpuxa.jl:12\ntest set:\
    \ Error During Test at /tmp/tmppg0kpuxa.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  type Array has no field map\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmppg0kpuxa.jl:5\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmppg0kpuxa.jl:14 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmppg0kpuxa.jl:12\ntest set:\
    \ Error During Test at /tmp/tmppg0kpuxa.jl:15\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n  type\
    \ Array has no field map\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] rescale_to_unit(numbers::Vector{Float64})\n     @ Main /tmp/tmppg0kpuxa.jl:5\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmppg0kpuxa.jl:15 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmppg0kpuxa.jl:12\ntest set:\
    \ Error During Test at /tmp/tmppg0kpuxa.jl:16\n  Test threw excepti"
  timestamp: 1659748825
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers ./=\
    \ maximum(rescaled_numbers)\n    return rescaled_numbers\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled = numbers .- minimum(numbers)\n    rescaled ./= maximum(rescaled)\n\
    \    return rescaled\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- min(numbers)\n    rescaled_numbers .= rescaled_numbers\
    \ ./ max(rescaled_numbers)\n    return rescaled_numbers\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0,\
    \ 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpvql66oms.jl:11

    '
  stdout: "test set: Error During Test at /tmp/tmpvql66oms.jl:14\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  MethodError: no method\
    \ matching min(::Vector{Float64})\n  Closest candidates are:\n    min(::Any, !Matched::Missing)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:134\n    min(::Any,\
    \ !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:506\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpvql66oms.jl:5\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvql66oms.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvql66oms.jl:13\ntest set:\
    \ Error During Test at /tmp/tmpvql66oms.jl:15\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  MethodError: no method matching min(::Vector{Float64})\n\
    \  Closest candidates are:\n    min(::Any, !Matched::Missing) at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:134\n\
    \    min(::Any, !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:506\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpvql66oms.jl:5\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvql66oms.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvql66oms.jl:13\ntest set:\
    \ Error During Test at /tmp/tmpvql66oms.jl:16\n  Test threw exception\n  Expressio"
  timestamp: 1659748825
- exit_code: 1
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- min(numbers)\n    rescaled_numbers .= rescaled_numbers\
    \ ./ max(rescaled_numbers)\n    return rescaled_numbers\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0,\
    \ 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpvql66oms.jl:11

    '
  stdout: "test set: Error During Test at /tmp/tmpvql66oms.jl:14\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  MethodError: no method\
    \ matching min(::Vector{Float64})\n  Closest candidates are:\n    min(::Any, !Matched::Missing)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:134\n    min(::Any,\
    \ !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:506\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpvql66oms.jl:5\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvql66oms.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvql66oms.jl:13\ntest set:\
    \ Error During Test at /tmp/tmpvql66oms.jl:15\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  MethodError: no method matching min(::Vector{Float64})\n\
    \  Closest candidates are:\n    min(::Any, !Matched::Missing) at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:134\n\
    \    min(::Any, !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:506\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpvql66oms.jl:5\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvql66oms.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvql66oms.jl:13\ntest set:\
    \ Error During Test at /tmp/tmpvql66oms.jl:16\n  Test threw exception\n  Expressio"
  timestamp: 1659748825
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers.map(x -> x/maximum(numbers))\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\n# Let's try it out\nnumbers = [1,2,3,4,5,6,7,8,9,10]\n\
    rescaled_numbers = rescale_to_unit(numbers)\n</cell>\n<code language=julia-1.5>\n\
    # Let's try it out\nnumbers = [1,2,3,4,5,6,7,8,9,10]\nrescaled_numbers = rescale_to_unit(numbers)\n\
    </cell>\n<code language=julia-1.5>\n# Let's try it out\nnumbers = [1,2,3,4,5,6,7,8,9,10]\n\
    rescaled_numbers = rescale_to_unit(numbers)\n</cell>\n<code language=julia-1.5>\n\
    # Let's try it out\nnumbers = [1,2,3,4,5,6,7,8,9,10]\nrescaled_numbers = rescale_to_unit(numbers)\n\
    </cell>\n<code language=julia-1.5>\n# Let's try it out\nnumbers = [1,2,3,4,5,6,7,8,9,10]\n\
    rescaled_numbers = rescale_to_unit(numbers)\n</cell>\n<code language=julia-1.5>\n\
    # Let's try it out\nnumbers = [1,2,3,4,5,6,7,8,9,10]\nrescaled_numbers = rescale_to_unit(numbers)\n\
    </cell>\n<code language=julia-1.5>\n# Let's try it out\nnumbers = [1,2,3,4,5,6,7,8,9,10]\n\
    rescaled_numbers = rescale_to_unit(numbers)\n</cell>\n<code language=julia-1.5>\n\
    # Let's try it out\nnumbers = [1,2,3,4,5,6,7,8,9,10]\nrescaled_numbers = rescale_to_unit(numbers)\n\
    </cell>\n<code language=julia-1.5>\n# Let's try it out\nnumbers = [1,2,3,4,5,6,7,8,9,10]\n\
    rescaled_numbers = rescale_to_unit(numbers)\n</cell>\n<code language=julia-1.5>\n\
    # Let's try it out\nnumbers = [1,2,3,4,5,6,7,8,9,10]\nrescaled_numbers = rescale_to_unit(numbers)\n\
    </cell>\n<code language=julia-1.5>\n# Let's try it out\nnumbers = [1,2,3,4,5,6,7,8,9,10]\n\
    rescaled_numbers = rescale_to_unit(numbers)\n</cell>\n<code language=julia-1.5>\n\
    # Let's try it out\nnumbers = [1,2,3,4,5,6,7,8,9,10]\nrescaled_numbers = rescale_to_unit(numbers)\n\
    </cell>\n<code language=julia-1.5>\n# Let's try it out\nnumbers = [1,2,3,4,5,6,7,\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc_iyxvvv.jl:8\nin expression starting at /tmp/tmpc_iyxvvv.jl:8\n"
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\n# Test the function\nnumbers = [1, 2,\
    \ 3, 4]\nrescaled_numbers = rescale_to_unit(numbers)\nprintln(rescaled_numbers)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers in the list.\nusing Test\n\
    \n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_u3xkh5b.jl:9\nin expression starting at /tmp/tmp_u3xkh5b.jl:9\n"
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers.map(x -> x/min(numbers))\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmppg0kpuxa.jl:10

    '
  stdout: "test set: Error During Test at /tmp/tmppg0kpuxa.jl:13\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  type Array has no field\
    \ map\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2]\
    \ rescale_to_unit(numbers::Vector{Float64})\n     @ Main /tmp/tmppg0kpuxa.jl:5\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmppg0kpuxa.jl:13 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmppg0kpuxa.jl:12\ntest set:\
    \ Error During Test at /tmp/tmppg0kpuxa.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  type Array has no field map\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmppg0kpuxa.jl:5\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmppg0kpuxa.jl:14 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmppg0kpuxa.jl:12\ntest set:\
    \ Error During Test at /tmp/tmppg0kpuxa.jl:15\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n  type\
    \ Array has no field map\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] rescale_to_unit(numbers::Vector{Float64})\n     @ Main /tmp/tmppg0kpuxa.jl:5\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmppg0kpuxa.jl:15 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmppg0kpuxa.jl:12\ntest set:\
    \ Error During Test at /tmp/tmppg0kpuxa.jl:16\n  Test threw excepti"
  timestamp: 1659748825
- exit_code: 1
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.4>\n# Test rescale_to_unit\nnumbers = [0.2,\
    \ 0.4, 0.6, 0.8]\nrescaled_numbers = rescale_to_unit(numbers)\nprintln(rescaled_numbers)\n\
    </cell>\n<text>\nExercise 3: Implement a function to compute the cumulative product\
    \ of a given vector\n    \n    For example, given [1,2,3], the cumulative product\
    \ is [1,4,9], since 1 * 2 * 3 = 1, 2 * 3 * 4 = 6, 3 * 4 * 5 = 24\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn2vi9a5_.jl:9\nin expression starting at /tmp/tmpn2vi9a5_.jl:9\n"
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- min(numbers)\n    rescaled_numbers .= rescaled_numbers\
    \ ./ max(rescaled_numbers)\n    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptwa_wr00.jl:9\nin expression starting at /tmp/tmptwa_wr00.jl:9\n"
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled = numbers .- minimum(numbers)\n    rescaled ./= maximum(rescaled)\n\
    \    return rescaled\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers.map(x -> x/min(numbers))\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmppg0kpuxa.jl:10

    '
  stdout: "test set: Error During Test at /tmp/tmppg0kpuxa.jl:13\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  type Array has no field\
    \ map\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2]\
    \ rescale_to_unit(numbers::Vector{Float64})\n     @ Main /tmp/tmppg0kpuxa.jl:5\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmppg0kpuxa.jl:13 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmppg0kpuxa.jl:12\ntest set:\
    \ Error During Test at /tmp/tmppg0kpuxa.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  type Array has no field map\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmppg0kpuxa.jl:5\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmppg0kpuxa.jl:14 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmppg0kpuxa.jl:12\ntest set:\
    \ Error During Test at /tmp/tmppg0kpuxa.jl:15\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n  type\
    \ Array has no field map\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] rescale_to_unit(numbers::Vector{Float64})\n     @ Main /tmp/tmppg0kpuxa.jl:5\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmppg0kpuxa.jl:15 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmppg0kpuxa.jl:12\ntest set:\
    \ Error During Test at /tmp/tmppg0kpuxa.jl:16\n  Test threw excepti"
  timestamp: 1659748825
- exit_code: 1
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers.map(x -> x/maximum(numbers))\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp9stan85t.jl:10

    '
  stdout: "test set: Error During Test at /tmp/tmp9stan85t.jl:13\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  type Array has no field\
    \ map\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2]\
    \ rescale_to_unit(numbers::Vector{Float64})\n     @ Main /tmp/tmp9stan85t.jl:5\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9stan85t.jl:13 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9stan85t.jl:12\ntest set:\
    \ Error During Test at /tmp/tmp9stan85t.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  type Array has no field map\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmp9stan85t.jl:5\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9stan85t.jl:14 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9stan85t.jl:12\ntest set:\
    \ Error During Test at /tmp/tmp9stan85t.jl:15\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n  type\
    \ Array has no field map\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] rescale_to_unit(numbers::Vector{Float64})\n     @ Main /tmp/tmp9stan85t.jl:5\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9stan85t.jl:15 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9stan85t.jl:12\ntest set:\
    \ Error During Test at /tmp/tmp9stan85t.jl:16\n  Test threw excepti"
  timestamp: 1659748825
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- min(numbers)\n    rescaled_numbers .= rescaled_numbers\
    \ ./ max(rescaled_numbers)\n    return rescaled_numbers\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0,\
    \ 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpvql66oms.jl:11

    '
  stdout: "test set: Error During Test at /tmp/tmpvql66oms.jl:14\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  MethodError: no method\
    \ matching min(::Vector{Float64})\n  Closest candidates are:\n    min(::Any, !Matched::Missing)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:134\n    min(::Any,\
    \ !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:506\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpvql66oms.jl:5\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvql66oms.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvql66oms.jl:13\ntest set:\
    \ Error During Test at /tmp/tmpvql66oms.jl:15\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  MethodError: no method matching min(::Vector{Float64})\n\
    \  Closest candidates are:\n    min(::Any, !Matched::Missing) at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:134\n\
    \    min(::Any, !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:506\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpvql66oms.jl:5\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvql66oms.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvql66oms.jl:13\ntest set:\
    \ Error During Test at /tmp/tmpvql66oms.jl:16\n  Test threw exception\n  Expressio"
  timestamp: 1659748825
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled = numbers .- minimum(numbers)\n    rescaled ./= maximum(rescaled)\n\
    \    return rescaled\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled = numbers .- minimum(numbers)\n    rescaled ./= maximum(rescaled)\n\
    \    return rescaled\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled = numbers .- minimum(numbers)\n    rescaled ./= maximum(rescaled)\n\
    \    return rescaled\nend\n</cell>\n<code language=julia-1.5>\n# Let's try it\
    \ out\nnumbers = [1,2,3,4,5,6,7,8,9,10]\nrescaled = rescale_to_unit(numbers)\n\
    </cell>\n<text>\nThe rescaled array is now a vector of numbers between 0 and 1.\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprbyu_bhg.jl:9\nin expression starting at /tmp/tmprbyu_bhg.jl:9\n"
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers ./=\
    \ maximum(rescaled_numbers)\n    return rescaled_numbers\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\n# Let's try it out\nnumbers = [1,2,3,4,5,6,7,8,9,10]\n\
    rescaled_numbers = rescale_to_unit(numbers)\n</cell>\n<text>\nLet's now apply\
    \ the function to the whole dataset and see how it performs\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0,\
    \ 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7n380b5j.jl:9\nin expression starting at /tmp/tmp7n380b5j.jl:9\n"
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv7b120nt.jl:9\nin expression starting at /tmp/tmpv7b120nt.jl:9\n"
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\n# Let's try it out\nnumbers = [1,2,3,4,5,6,7,8,9,10]\n\
    rescaled_numbers = rescale_to_unit(numbers)\n</cell>\n<code language=julia-1.5>\n\
    # Let's plot it\nplot(rescaled_numbers)\n</cell>\n<text>\nLet's try it out with\
    \ some different numbers\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5fzvtamn.jl:9\nin expression starting at /tmp/tmp5fzvtamn.jl:9\n"
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled = numbers .- minimum(numbers)\n    rescaled ./= maximum(rescaled)\n\
    \    return rescaled\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers.map(x->x/min(numbers))\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.0>\n# Test the rescale_to_unit function\n\
    numbers = [0.5, 0.1, 0.2, 0.3]\nrescaled_numbers = rescale_to_unit(numbers)\n\
    println(rescaled_numbers)\n</cell>\n<text>\nThe rescale_to_unit function can also\
    \ be used to rescale a list of numbers to between 0 and 1\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0,\
    \ 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmg63jx4b.jl:8\nin expression starting at /tmp/tmpmg63jx4b.jl:8\n"
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled = numbers .- minimum(numbers)\n    rescaled ./= maximum(rescaled)\n\
    \    return rescaled\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers ./=\
    \ maximum(rescaled_numbers)\n    return rescaled_numbers\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.3>\n# Let's test the rescale_to_unit function\n\
    numbers = [1,2,3,4,5]\nrescaled_numbers = rescale_to_unit(numbers)\n</cell>\n\
    <text>\nThe rescale_to_unit function returns a new vector with the rescaled numbers.\
    \ Let's see how it works:\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_frcuqui.jl:9\nin expression starting at /tmp/tmp_frcuqui.jl:9\n"
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- min(numbers)\n    rescaled_numbers .= rescaled_numbers\
    \ ./ max(rescaled_numbers)\n    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptwa_wr00.jl:9\nin expression starting at /tmp/tmptwa_wr00.jl:9\n"
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled = numbers .- minimum(numbers)\n    rescaled ./= maximum(rescaled)\n\
    \    return rescaled\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled = numbers .- minimum(numbers)\n    rescaled ./= maximum(rescaled)\n\
    \    return rescaled\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled = numbers .- minimum(numbers)\n    rescaled ./= maximum(rescaled)\n\
    \    return rescaled\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled = numbers .- minimum(numbers)\n    rescaled ./= maximum(rescaled)\n\
    \    return rescaled\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.4>\n# Test the rescale_to_unit function\n\
    numbers = [1,2,3,4,5]\nrescaled_numbers = rescale_to_unit(numbers)\nprintln(rescaled_numbers)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers. \nThe function should return\
    \ 0 if the list is empty.\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp96ozmn6h.jl:9\nin expression starting at /tmp/tmp96ozmn6h.jl:9\n"
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv7b120nt.jl:9\nin expression starting at /tmp/tmpv7b120nt.jl:9\n"
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- min(numbers)\n    rescaled_numbers .= rescaled_numbers\
    \ ./ max(rescaled_numbers)\n    return rescaled_numbers\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0,\
    \ 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpvql66oms.jl:11

    '
  stdout: "test set: Error During Test at /tmp/tmpvql66oms.jl:14\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  MethodError: no method\
    \ matching min(::Vector{Float64})\n  Closest candidates are:\n    min(::Any, !Matched::Missing)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:134\n    min(::Any,\
    \ !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:506\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpvql66oms.jl:5\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvql66oms.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvql66oms.jl:13\ntest set:\
    \ Error During Test at /tmp/tmpvql66oms.jl:15\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  MethodError: no method matching min(::Vector{Float64})\n\
    \  Closest candidates are:\n    min(::Any, !Matched::Missing) at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:134\n\
    \    min(::Any, !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:506\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpvql66oms.jl:5\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvql66oms.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvql66oms.jl:13\ntest set:\
    \ Error During Test at /tmp/tmpvql66oms.jl:16\n  Test threw exception\n  Expressio"
  timestamp: 1659748825
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers ./=\
    \ maximum(rescaled_numbers)\n    return rescaled_numbers\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = zeros(length(numbers))\n    rescaled_numbers[1] = numbers[1]\n\
    \    rescaled_numbers[length(numbers)] = numbers[length(numbers)] \n    for i\
    \ = 2:length(numbers)\n        rescaled_numbers[i] = numbers[i]/rescaled_numbers[i-1]\n\
    \    end\n    return rescaled_numbers\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpivwlwxzq.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpivwlwxzq.jl:18\n  Expression: candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n   Evaluated: [2.0, 24.95] == [0.0, 1.0]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpivwlwxzq.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpivwlwxzq.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpivwlwxzq.jl:19\n  Expression: candidate([100.0, 49.9]) ==\
    \ [1.0, 0.0]\n   Evaluated: [100.0, 0.499] == [1.0, 0.0]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpivwlwxzq.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpivwlwxzq.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpivwlwxzq.jl:20\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n   Evaluated: [1.0, 2.0, 1.5, 2.6666666666666665,\
    \ 1.875] == [0.0, 0.25, 0.5, 0.75, 1.0]\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpivwlwxzq.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpivwlwxzq.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpivwlwxzq.jl:21\n  Expression: candidate([2.0, 1.0, 5.0, 3.0,\
    \ 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n   Evaluated: [2.0, 0.5, 10.0, 0.3, 13.333333333333334]\
    \ == [0.25, 0.0, 1.0, 0.5, 0.75]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpivwlwxzq.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n "
  timestamp: 1659748824
- exit_code: 1
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\n# Let's try it out\nnumbers = [1,2,3,4,5]\n\
    rescaled_numbers = rescale_to_unit(numbers)\n</cell>\n<text>\nNow let's try it\
    \ out on a vector of strings:\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsuw45fvu.jl:9\nin expression starting at /tmp/tmpsuw45fvu.jl:9\n"
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- min(numbers)\n    rescaled_numbers .= rescaled_numbers\
    \ ./ max(rescaled_numbers)\n    return rescaled_numbers\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0,\
    \ 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpvql66oms.jl:11

    '
  stdout: "test set: Error During Test at /tmp/tmpvql66oms.jl:14\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  MethodError: no method\
    \ matching min(::Vector{Float64})\n  Closest candidates are:\n    min(::Any, !Matched::Missing)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:134\n    min(::Any,\
    \ !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:506\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpvql66oms.jl:5\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvql66oms.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvql66oms.jl:13\ntest set:\
    \ Error During Test at /tmp/tmpvql66oms.jl:15\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  MethodError: no method matching min(::Vector{Float64})\n\
    \  Closest candidates are:\n    min(::Any, !Matched::Missing) at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:134\n\
    \    min(::Any, !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:506\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpvql66oms.jl:5\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvql66oms.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvql66oms.jl:13\ntest set:\
    \ Error During Test at /tmp/tmpvql66oms.jl:16\n  Test threw exception\n  Expressio"
  timestamp: 1659748825
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers ./=\
    \ maximum(rescaled_numbers)\n    return rescaled_numbers\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\n# Test rescale_to_unit\nnumbers = [1,2,3,4,5]\n\
    rescaled_numbers = rescale_to_unit(numbers)\nprintln(rescaled_numbers)\n</cell>\n\
    <text>\nExercise: Write a function that takes a list of numbers and returns the\
    \ mean of the numbers. \n    Use this function to rescale a list of numbers to\
    \ a range of 0 to 1.\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqp6jnzd0.jl:9\nin expression starting at /tmp/tmpqp6jnzd0.jl:9\n"
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv7b120nt.jl:9\nin expression starting at /tmp/tmpv7b120nt.jl:9\n"
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled = numbers .- minimum(numbers)\n    rescaled ./= maximum(rescaled)\n\
    \    return rescaled\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- min(numbers)\n    rescaled_numbers .= rescaled_numbers\
    \ ./ max(rescaled_numbers)\n    return rescaled_numbers\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0,\
    \ 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpvql66oms.jl:11

    '
  stdout: "test set: Error During Test at /tmp/tmpvql66oms.jl:14\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  MethodError: no method\
    \ matching min(::Vector{Float64})\n  Closest candidates are:\n    min(::Any, !Matched::Missing)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:134\n    min(::Any,\
    \ !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:506\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpvql66oms.jl:5\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvql66oms.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvql66oms.jl:13\ntest set:\
    \ Error During Test at /tmp/tmpvql66oms.jl:15\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  MethodError: no method matching min(::Vector{Float64})\n\
    \  Closest candidates are:\n    min(::Any, !Matched::Missing) at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:134\n\
    \    min(::Any, !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:506\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpvql66oms.jl:5\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvql66oms.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvql66oms.jl:13\ntest set:\
    \ Error During Test at /tmp/tmpvql66oms.jl:16\n  Test threw exception\n  Expressio"
  timestamp: 1659748825
- exit_code: 1
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = zeros(length(numbers))\n    rescaled_numbers[1] = numbers[1]\n\
    \    rescaled_numbers[length(numbers)] = numbers[length(numbers)]\n    for i =\
    \ 2:length(numbers)\n        rescaled_numbers[i] = numbers[i]/rescaled_numbers[i-1]\n\
    \    end\n    return rescaled_numbers\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmtgrd7hx.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpmtgrd7hx.jl:18\n  Expression: candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n   Evaluated: [2.0, 24.95] == [0.0, 1.0]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmtgrd7hx.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmtgrd7hx.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpmtgrd7hx.jl:19\n  Expression: candidate([100.0, 49.9]) ==\
    \ [1.0, 0.0]\n   Evaluated: [100.0, 0.499] == [1.0, 0.0]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmtgrd7hx.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmtgrd7hx.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpmtgrd7hx.jl:20\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n   Evaluated: [1.0, 2.0, 1.5, 2.6666666666666665,\
    \ 1.875] == [0.0, 0.25, 0.5, 0.75, 1.0]\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmtgrd7hx.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmtgrd7hx.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpmtgrd7hx.jl:21\n  Expression: candidate([2.0, 1.0, 5.0, 3.0,\
    \ 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n   Evaluated: [2.0, 0.5, 10.0, 0.3, 13.333333333333334]\
    \ == [0.25, 0.0, 1.0, 0.5, 0.75]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmtgrd7hx.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n "
  timestamp: 1659748824
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers ./=\
    \ maximum(rescaled_numbers)\n    return rescaled_numbers\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled = numbers .- minimum(numbers)\n    rescaled ./= maximum(rescaled)\n\
    \    return rescaled\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled = numbers .- minimum(numbers)\n    rescaled ./= maximum(rescaled)\n\
    \    return rescaled\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled = numbers .- minimum(numbers)\n    rescaled ./= maximum(rescaled)\n\
    \    return rescaled\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.3>\n# Let's test our rescale_to_unit function\n\
    numbers = [1,2,3,4,5]\nrescaled_numbers = rescale_to_unit(numbers)\nprintln(rescaled_numbers)\n\
    </cell>\n<text>\nNow let's apply the rescale_to_unit function to our training\
    \ data\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa5325hvl.jl:9\nin expression starting at /tmp/tmpa5325hvl.jl:9\n"
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.4>\n# test the rescale_to_unit function\n\
    numbers = [0.2, 0.4, 0.6, 0.8]\nrescaled_numbers = rescale_to_unit(numbers)\n\
    println(rescaled_numbers)\n</cell>\n<text>\nExercise 3: Implement the function\
    \ rescale_and_normalize!\nThis function will take in a vector of numbers and will\
    \ rescale them to the range [0, 1] and then normalize them (divide by the maximum\
    \ absolute value). After the function is complete, the vector should be normalized.\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnlh3l5a1.jl:9\nin expression starting at /tmp/tmpnlh3l5a1.jl:9\n"
  stdout: ''
  timestamp: 1659748824
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers ./=\
    \ maximum(rescaled_numbers)\n    return rescaled_numbers\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers.map(x -> x/maximum(numbers))\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp9stan85t.jl:10

    '
  stdout: "test set: Error During Test at /tmp/tmp9stan85t.jl:13\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  type Array has no field\
    \ map\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2]\
    \ rescale_to_unit(numbers::Vector{Float64})\n     @ Main /tmp/tmp9stan85t.jl:5\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9stan85t.jl:13 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9stan85t.jl:12\ntest set:\
    \ Error During Test at /tmp/tmp9stan85t.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  type Array has no field map\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmp9stan85t.jl:5\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9stan85t.jl:14 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9stan85t.jl:12\ntest set:\
    \ Error During Test at /tmp/tmp9stan85t.jl:15\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n  type\
    \ Array has no field map\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] rescale_to_unit(numbers::Vector{Float64})\n     @ Main /tmp/tmp9stan85t.jl:5\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9stan85t.jl:15 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9stan85t.jl:12\ntest set:\
    \ Error During Test at /tmp/tmp9stan85t.jl:16\n  Test threw excepti"
  timestamp: 1659748825
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled = numbers .- minimum(numbers)\n    rescaled ./= maximum(rescaled)\n\
    \    return rescaled\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled = numbers .- minimum(numbers)\n    rescaled ./= maximum(rescaled)\n\
    \    return rescaled\nend\n</cell>\n<code language=julia-1.5>\n# Let's try it\
    \ out\nnumbers = [1,2,3,4,5,6,7,8,9,10]\nrescaled = rescale_to_unit(numbers)\n\
    </cell>\n<code language=julia-1.5>\n# Let's try it out\nnumbers = [1,2,3,4,5,6,7,8,9,10]\n\
    rescaled = rescale_to_unit(numbers)\n</cell>\n<code language=julia-1.5>\n# Let's\
    \ try it out\nnumbers = [1,2,3,4,5,6,7,8,9,10]\nrescaled = rescale_to_unit(numbers)\n\
    </cell>\n<code language=julia-1.5>\n# Let's try it out\nnumbers = [1,2,3,4,5,6,7,8,9,10]\n\
    rescaled = rescale_to_unit(numbers)\n</cell>\n<code language=julia-1.5>\n# Let's\
    \ try it out\nnumbers = [1,2,3,4,5,6,7,8,9,10]\nrescaled = rescale_to_unit(numbers)\n\
    </cell>\n<code language=julia-1.5>\n# Let's try it out\nnumbers = [1,2,3,4,5,6,7,8,9,10]\n\
    rescaled = rescale_to_unit(numbers)\n</cell>\n<code language=julia-1.5>\n# Let's\
    \ try it out\nnumbers = [1,2,3,4,5,6,7,8,9,10]\nrescaled = rescale_to_unit(numbers)\n\
    </cell>\n<code language=julia-1.5>\n# Let's try it out\nnumbers = [1,2,3,4,5,6,7,8,9,10]\n\
    rescaled = rescale_to_unit(numbers)\n</cell>\n<code language=julia-1.5>\n# Let's\
    \ try it out\nnumbers = [1,2,3,4,5,6,7,8,9,10]\nrescaled = rescale_to_unit(numbers)\n\
    </cell>\n<code language=julia-1.5>\n# Let's try it out\nnumbers = [1,2,3,4,5,6,7,8,9,10]\n\
    rescaled = rescale_to_unit(numbers)\n</cell>\n<code language=julia-1.5>\n# Let's\
    \ try it out\nnumbers = [1,2,3,4,5,6,7,8,9,10]\nrescaled = rescale_to_unit(numbers)\n\
    </cell>\n<code language=julia-1.5>\n# Let's try it out\nnumbers = [1,2,3,4,5,6,7,8,9,10]\n\
    rescaled = rescale_to_unit(numbers)\n</cell>\n<code language=julia-1.5>\n# Let's\
    \ try it out\nnumbers = [1,2,3,4,5,6,7,8,9,10]\nrescaled = rescale_to_unit(numbers)\n\
    </cell>\n<code language=\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbwa617lx.jl:9\nin expression starting at /tmp/tmpbwa617lx.jl:9\n"
  stdout: ''
  timestamp: 1659748824
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers ./=\
    \ maximum(rescaled_numbers)\n    return rescaled_numbers\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- min(numbers)\n    rescaled_numbers ./= max(rescaled_numbers)\n\
    \    return rescaled_numbers\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp_ye42__t.jl:11

    '
  stdout: "test set: Error During Test at /tmp/tmp_ye42__t.jl:14\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  MethodError: no method\
    \ matching min(::Vector{Float64})\n  Closest candidates are:\n    min(::Any, !Matched::Missing)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:134\n    min(::Any,\
    \ !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:506\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmp_ye42__t.jl:5\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_ye42__t.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_ye42__t.jl:13\ntest set:\
    \ Error During Test at /tmp/tmp_ye42__t.jl:15\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  MethodError: no method matching min(::Vector{Float64})\n\
    \  Closest candidates are:\n    min(::Any, !Matched::Missing) at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:134\n\
    \    min(::Any, !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:506\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmp_ye42__t.jl:5\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_ye42__t.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_ye42__t.jl:13\ntest set:\
    \ Error During Test at /tmp/tmp_ye42__t.jl:16\n  Test threw exception\n  Expressio"
  timestamp: 1659748827
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled = numbers .- minimum(numbers)\n    rescaled ./= maximum(rescaled)\n\
    \    return rescaled\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- min(numbers)\n    rescaled_numbers ./= max(rescaled_numbers)\n\
    \    return rescaled_numbers\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp_ye42__t.jl:11

    '
  stdout: "test set: Error During Test at /tmp/tmp_ye42__t.jl:14\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  MethodError: no method\
    \ matching min(::Vector{Float64})\n  Closest candidates are:\n    min(::Any, !Matched::Missing)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:134\n    min(::Any,\
    \ !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:506\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmp_ye42__t.jl:5\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_ye42__t.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_ye42__t.jl:13\ntest set:\
    \ Error During Test at /tmp/tmp_ye42__t.jl:15\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  MethodError: no method matching min(::Vector{Float64})\n\
    \  Closest candidates are:\n    min(::Any, !Matched::Missing) at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:134\n\
    \    min(::Any, !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:506\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmp_ye42__t.jl:5\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_ye42__t.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_ye42__t.jl:13\ntest set:\
    \ Error During Test at /tmp/tmp_ye42__t.jl:16\n  Test threw exception\n  Expressio"
  timestamp: 1659748827
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- min(numbers)\n    rescaled_numbers .= rescaled_numbers\
    \ ./ max(rescaled_numbers)\n    return rescaled_numbers\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0,\
    \ 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpvql66oms.jl:11

    '
  stdout: "test set: Error During Test at /tmp/tmpvql66oms.jl:14\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  MethodError: no method\
    \ matching min(::Vector{Float64})\n  Closest candidates are:\n    min(::Any, !Matched::Missing)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:134\n    min(::Any,\
    \ !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:506\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpvql66oms.jl:5\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvql66oms.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvql66oms.jl:13\ntest set:\
    \ Error During Test at /tmp/tmpvql66oms.jl:15\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  MethodError: no method matching min(::Vector{Float64})\n\
    \  Closest candidates are:\n    min(::Any, !Matched::Missing) at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:134\n\
    \    min(::Any, !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:506\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpvql66oms.jl:5\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvql66oms.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvql66oms.jl:13\ntest set:\
    \ Error During Test at /tmp/tmpvql66oms.jl:16\n  Test threw exception\n  Expressio"
  timestamp: 1659748825
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers ./=\
    \ maximum(rescaled_numbers)\n    return rescaled_numbers\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers.map(x -> x/maximum(numbers))\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp9stan85t.jl:10

    '
  stdout: "test set: Error During Test at /tmp/tmp9stan85t.jl:13\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  type Array has no field\
    \ map\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2]\
    \ rescale_to_unit(numbers::Vector{Float64})\n     @ Main /tmp/tmp9stan85t.jl:5\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9stan85t.jl:13 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9stan85t.jl:12\ntest set:\
    \ Error During Test at /tmp/tmp9stan85t.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  type Array has no field map\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmp9stan85t.jl:5\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9stan85t.jl:14 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9stan85t.jl:12\ntest set:\
    \ Error During Test at /tmp/tmp9stan85t.jl:15\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n  type\
    \ Array has no field map\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] rescale_to_unit(numbers::Vector{Float64})\n     @ Main /tmp/tmp9stan85t.jl:5\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9stan85t.jl:15 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9stan85t.jl:12\ntest set:\
    \ Error During Test at /tmp/tmp9stan85t.jl:16\n  Test threw excepti"
  timestamp: 1659748825
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers ./=\
    \ maximum(rescaled_numbers)\n    return rescaled_numbers\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled = numbers .- minimum(numbers)\n    rescaled ./= maximum(rescaled)\n\
    \    return rescaled\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8ufsux7v.jl:9\nin expression starting at /tmp/tmp8ufsux7v.jl:9\n"
  stdout: ''
  timestamp: 1659748825
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled = numbers .- minimum(numbers)\n    rescaled ./= maximum(rescaled)\n\
    \    return rescaled\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled = numbers .- minimum(numbers)\n    rescaled ./= maximum(rescaled)\n\
    \    return rescaled\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled = numbers .- minimum(numbers)\n    rescaled ./= maximum(rescaled)\n\
    \    return rescaled\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers.map(x -> x / min(numbers))\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp0a4z_9xl.jl:10

    '
  stdout: "test set: Error During Test at /tmp/tmp0a4z_9xl.jl:13\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  type Array has no field\
    \ map\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2]\
    \ rescale_to_unit(numbers::Vector{Float64})\n     @ Main /tmp/tmp0a4z_9xl.jl:5\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0a4z_9xl.jl:13 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0a4z_9xl.jl:12\ntest set:\
    \ Error During Test at /tmp/tmp0a4z_9xl.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  type Array has no field map\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmp0a4z_9xl.jl:5\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0a4z_9xl.jl:14 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0a4z_9xl.jl:12\ntest set:\
    \ Error During Test at /tmp/tmp0a4z_9xl.jl:15\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n  type\
    \ Array has no field map\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] rescale_to_unit(numbers::Vector{Float64})\n     @ Main /tmp/tmp0a4z_9xl.jl:5\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0a4z_9xl.jl:15 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0a4z_9xl.jl:12\ntest set:\
    \ Error During Test at /tmp/tmp0a4z_9xl.jl:16\n  Test threw excepti"
  timestamp: 1659748826
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled = numbers .- minimum(numbers)\n    rescaled ./= maximum(rescaled)\n\
    \    return rescaled\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers ./=\
    \ maximum(rescaled_numbers)\n    return rescaled_numbers\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers.map(x -> x/minimum(numbers))\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\n# Let's try it out\nnumbers = [1,2,3,4,5]\n\
    rescaled_numbers = rescale_to_unit(numbers)\n</cell>\n<code language=julia-1.5>\n\
    # Let's try it out\nnumbers = [1,2,3,4,5]\nrescaled_numbers = rescale_to_unit(numbers)\n\
    </cell>\n<code language=julia-1.5>\n# Let's try it out\nnumbers = [1,2,3,4,5]\n\
    rescaled_numbers = rescale_to_unit(numbers)\n</cell>\n<code language=julia-1.5>\n\
    # Let's try it out\nnumbers = [1,2,3,4,5]\nrescaled_numbers = rescale_to_unit(numbers)\n\
    </cell>\n<code language=julia-1.5>\n# Let's try it out\nnumbers = [1,2,3,4,5]\n\
    rescaled_numbers = rescale_to_unit(numbers)\n</cell>\n<code language=julia-1.5>\n\
    # Let's try it out\nnumbers = [1,2,3,4,5]\nrescaled_numbers = rescale_to_unit(numbers)\n\
    </cell>\n<code language=julia-1.5>\n# Let's try it out\nnumbers = [1,2,3,4,5]\n\
    rescaled_numbers = rescale_to_unit(numbers)\n</cell>\n<code language=julia-1.5>\n\
    # Let's try it out\nnumbers = [1,2,3,4,5]\nrescaled_numbers = rescale_to_unit(numbers)\n\
    </cell>\n<code language=julia-1.5>\n# Let's try it out\nnumbers = [1,2,3,4,5]\n\
    rescaled_numbers = rescale_to_unit(numbers)\n</cell>\n<code language=julia-1.5>\n\
    # Let's try it out\nnumbers = [1,2,3,4,5]\nrescaled_numbers = rescale_to_unit(numbers)\n\
    </cell>\n<code language=julia-1.5>\n# Let's try it out\nnumbers = [1,2,3,4,5]\n\
    rescaled_numbers = rescale_to_unit(numbers)\n</cell>\n<code language=julia-1.5>\n\
    # Let's try it out\nnumbers = [1,2,3,4,5]\nrescaled_numbers = rescale_to_unit(numbers)\n\
    </cell>\n<code language=julia-1.5>\n# Let's try it out\nnumbers = [1,2,3,4,5]\n\
    rescaled_numbers = rescale_to_unit(numbers)\n</cell>\n<code language=julia-1.5>\n\
    # Let's try it out\nnumbers = [1,2,3,4,5]\nrescaled_numbers = rescale_to_unit(numbers)\n\
    </cell>\n<code language=julia-1.5>\n# Let's try it \nusing Test\n\n@testset begin\n\
    \ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\
    \t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0226jh8t.jl:8\nin expression starting at /tmp/tmp0226jh8t.jl:8\n"
  stdout: ''
  timestamp: 1659748825
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = zeros(length(numbers))\n    rescaled_numbers[1] = numbers[1]\n\
    \    rescaled_numbers[length(numbers)] = numbers[length(numbers)] \n    rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpcfm9q4hh.jl:12

    '
  stdout: "test set: Test Failed at /tmp/tmpcfm9q4hh.jl:15\n  Expression: candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n   Evaluated: [2.0, 49.9] == [0.0, 1.0]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcfm9q4hh.jl:15 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcfm9q4hh.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpcfm9q4hh.jl:16\n  Expression: candidate([100.0, 49.9]) ==\
    \ [1.0, 0.0]\n   Evaluated: [100.0, 49.9] == [1.0, 0.0]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcfm9q4hh.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcfm9q4hh.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpcfm9q4hh.jl:17\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n   Evaluated: [1.0, 0.0, 0.0, 0.0, 5.0]\
    \ == [0.0, 0.25, 0.5, 0.75, 1.0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcfm9q4hh.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcfm9q4hh.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpcfm9q4hh.jl:18\n  Expression: candidate([2.0, 1.0, 5.0, 3.0,\
    \ 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n   Evaluated: [2.0, 0.0, 0.0, 0.0, 4.0]\
    \ == [0.25, 0.0, 1.0, 0.5, 0.75]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcfm9q4hh.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcfm9q4hh.jl:14\ntest set"
  timestamp: 1659748826
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled = numbers .- minimum(numbers)\n    rescaled ./= maximum(rescaled)\n\
    \    return rescaled\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers ./=\
    \ maximum(rescaled_numbers)\n    return rescaled_numbers\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers ./=\
    \ maximum(rescaled_numbers)\n    return rescaled_numbers\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers.map(x -> x/min(numbers))\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmppg0kpuxa.jl:10

    '
  stdout: "test set: Error During Test at /tmp/tmppg0kpuxa.jl:13\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  type Array has no field\
    \ map\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2]\
    \ rescale_to_unit(numbers::Vector{Float64})\n     @ Main /tmp/tmppg0kpuxa.jl:5\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmppg0kpuxa.jl:13 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmppg0kpuxa.jl:12\ntest set:\
    \ Error During Test at /tmp/tmppg0kpuxa.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  type Array has no field map\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmppg0kpuxa.jl:5\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmppg0kpuxa.jl:14 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmppg0kpuxa.jl:12\ntest set:\
    \ Error During Test at /tmp/tmppg0kpuxa.jl:15\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n  type\
    \ Array has no field map\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] rescale_to_unit(numbers::Vector{Float64})\n     @ Main /tmp/tmppg0kpuxa.jl:5\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmppg0kpuxa.jl:15 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmppg0kpuxa.jl:12\ntest set:\
    \ Error During Test at /tmp/tmppg0kpuxa.jl:16\n  Test threw excepti"
  timestamp: 1659748825
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers.map(x -> x/min(numbers))\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmppg0kpuxa.jl:10

    '
  stdout: "test set: Error During Test at /tmp/tmppg0kpuxa.jl:13\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  type Array has no field\
    \ map\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2]\
    \ rescale_to_unit(numbers::Vector{Float64})\n     @ Main /tmp/tmppg0kpuxa.jl:5\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmppg0kpuxa.jl:13 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmppg0kpuxa.jl:12\ntest set:\
    \ Error During Test at /tmp/tmppg0kpuxa.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  type Array has no field map\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmppg0kpuxa.jl:5\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmppg0kpuxa.jl:14 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmppg0kpuxa.jl:12\ntest set:\
    \ Error During Test at /tmp/tmppg0kpuxa.jl:15\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n  type\
    \ Array has no field map\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] rescale_to_unit(numbers::Vector{Float64})\n     @ Main /tmp/tmppg0kpuxa.jl:5\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmppg0kpuxa.jl:15 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmppg0kpuxa.jl:12\ntest set:\
    \ Error During Test at /tmp/tmppg0kpuxa.jl:16\n  Test threw excepti"
  timestamp: 1659748825
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- min(numbers)\n    rescaled_numbers .= rescaled_numbers\
    \ ./ max(rescaled_numbers)\n    return rescaled_numbers\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0,\
    \ 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpvql66oms.jl:11

    '
  stdout: "test set: Error During Test at /tmp/tmpvql66oms.jl:14\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  MethodError: no method\
    \ matching min(::Vector{Float64})\n  Closest candidates are:\n    min(::Any, !Matched::Missing)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:134\n    min(::Any,\
    \ !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:506\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpvql66oms.jl:5\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvql66oms.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvql66oms.jl:13\ntest set:\
    \ Error During Test at /tmp/tmpvql66oms.jl:15\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  MethodError: no method matching min(::Vector{Float64})\n\
    \  Closest candidates are:\n    min(::Any, !Matched::Missing) at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:134\n\
    \    min(::Any, !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:506\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpvql66oms.jl:5\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvql66oms.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvql66oms.jl:13\ntest set:\
    \ Error During Test at /tmp/tmpvql66oms.jl:16\n  Test threw exception\n  Expressio"
  timestamp: 1659748825
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.3>\n# Let's try it out\nnumbers = [0.2, 0.4,\
    \ 0.6, 0.8]\nrescaled_numbers = rescale_to_unit(numbers)\n</cell>\n<code language=julia-1.3>\n\
    # Let's plot it\nusing PyPlot\nplot(numbers, rescaled_numbers)\n</cell>\n<text>\n\
    Exercise: Write a function that takes a list of numbers and returns a list of\
    \ numbers that have been scaled linearly to unit length. For example, given [1,2,3],\
    \ it should return [1/3, 2/3, 3/3].\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1vym42hn.jl:9\nin expression starting at /tmp/tmp1vym42hn.jl:9\n"
  stdout: ''
  timestamp: 1659748825
- exit_code: 1
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers.map(x -> x/maximum(numbers))\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp9stan85t.jl:10

    '
  stdout: "test set: Error During Test at /tmp/tmp9stan85t.jl:13\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  type Array has no field\
    \ map\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2]\
    \ rescale_to_unit(numbers::Vector{Float64})\n     @ Main /tmp/tmp9stan85t.jl:5\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9stan85t.jl:13 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9stan85t.jl:12\ntest set:\
    \ Error During Test at /tmp/tmp9stan85t.jl:14\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  type Array has no field map\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmp9stan85t.jl:5\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9stan85t.jl:14 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9stan85t.jl:12\ntest set:\
    \ Error During Test at /tmp/tmp9stan85t.jl:15\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n  type\
    \ Array has no field map\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] rescale_to_unit(numbers::Vector{Float64})\n     @ Main /tmp/tmp9stan85t.jl:5\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9stan85t.jl:15 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9stan85t.jl:12\ntest set:\
    \ Error During Test at /tmp/tmp9stan85t.jl:16\n  Test threw excepti"
  timestamp: 1659748825
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled = numbers .- minimum(numbers)\n    rescaled ./= maximum(rescaled)\n\
    \    return rescaled\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers ./=\
    \ maximum(rescaled_numbers)\n    return rescaled_numbers\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers ./=\
    \ maximum(rescaled_numbers)\n    return rescaled_numbers\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled = numbers .- minimum(numbers)\n    rescaled ./= maximum(rescaled)\n\
    \    return rescaled\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\n# Let's try it out\nnumbers = [1,2,3,4,5,6,7,8,9,10]\n\
    rescaled_numbers = rescale_to_unit(numbers)\n</cell>\n<text>\nLet's try it out\
    \ with some random numbers\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpexx_1a5o.jl:9\nin expression starting at /tmp/tmpexx_1a5o.jl:9\n"
  stdout: ''
  timestamp: 1659748825
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled = numbers .- minimum(numbers)\n    rescaled ./= maximum(rescaled)\n\
    \    return rescaled\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled = numbers .- minimum(numbers)\n    rescaled ./= maximum(rescaled)\n\
    \    return rescaled\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled = numbers .- minimum(numbers)\n    rescaled ./= maximum(rescaled)\n\
    \    return rescaled\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8ufsux7v.jl:9\nin expression starting at /tmp/tmp8ufsux7v.jl:9\n"
  stdout: ''
  timestamp: 1659748825
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- min(numbers)\n    rescaled_numbers .= rescaled_numbers\
    \ ./ max(rescaled_numbers)\n    return rescaled_numbers\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0,\
    \ 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpvql66oms.jl:11

    '
  stdout: "test set: Error During Test at /tmp/tmpvql66oms.jl:14\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  MethodError: no method\
    \ matching min(::Vector{Float64})\n  Closest candidates are:\n    min(::Any, !Matched::Missing)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:134\n    min(::Any,\
    \ !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:506\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpvql66oms.jl:5\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvql66oms.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvql66oms.jl:13\ntest set:\
    \ Error During Test at /tmp/tmpvql66oms.jl:15\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  MethodError: no method matching min(::Vector{Float64})\n\
    \  Closest candidates are:\n    min(::Any, !Matched::Missing) at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:134\n\
    \    min(::Any, !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:506\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpvql66oms.jl:5\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvql66oms.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvql66oms.jl:13\ntest set:\
    \ Error During Test at /tmp/tmpvql66oms.jl:16\n  Test threw exception\n  Expressio"
  timestamp: 1659748825
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\n# Test the function\nnumbers = [1, 2,\
    \ 3, 4]\nrescaled_numbers = rescale_to_unit(numbers)\nprintln(rescaled_numbers)\n\
    </cell>\n<text>\nThe function rescale_to_unit takes a list of numbers and returns\
    \ a list of numbers that have been rescaled so that they have unit length.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpurmympbj.jl:9\nin expression starting at /tmp/tmpurmympbj.jl:9\n"
  stdout: ''
  timestamp: 1659748825
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers ./=\
    \ maximum(rescaled_numbers)\n    return rescaled_numbers\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- min(numbers)\n    rescaled_numbers .= rescaled_numbers\
    \ ./ max(rescaled_numbers)\n    return rescaled_numbers\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0,\
    \ 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpvql66oms.jl:11

    '
  stdout: "test set: Error During Test at /tmp/tmpvql66oms.jl:14\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  MethodError: no method\
    \ matching min(::Vector{Float64})\n  Closest candidates are:\n    min(::Any, !Matched::Missing)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:134\n    min(::Any,\
    \ !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:506\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpvql66oms.jl:5\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvql66oms.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvql66oms.jl:13\ntest set:\
    \ Error During Test at /tmp/tmpvql66oms.jl:15\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  MethodError: no method matching min(::Vector{Float64})\n\
    \  Closest candidates are:\n    min(::Any, !Matched::Missing) at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:134\n\
    \    min(::Any, !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:506\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpvql66oms.jl:5\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvql66oms.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvql66oms.jl:13\ntest set:\
    \ Error During Test at /tmp/tmpvql66oms.jl:16\n  Test threw exception\n  Expressio"
  timestamp: 1659748825
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- min(numbers)\n    rescaled_numbers .= rescaled_numbers\
    \ ./ max(rescaled_numbers)\n    return rescaled_numbers\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0,\
    \ 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpvql66oms.jl:11

    '
  stdout: "test set: Error During Test at /tmp/tmpvql66oms.jl:14\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  MethodError: no method\
    \ matching min(::Vector{Float64})\n  Closest candidates are:\n    min(::Any, !Matched::Missing)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:134\n    min(::Any,\
    \ !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:506\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpvql66oms.jl:5\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvql66oms.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvql66oms.jl:13\ntest set:\
    \ Error During Test at /tmp/tmpvql66oms.jl:15\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  MethodError: no method matching min(::Vector{Float64})\n\
    \  Closest candidates are:\n    min(::Any, !Matched::Missing) at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:134\n\
    \    min(::Any, !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:506\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpvql66oms.jl:5\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvql66oms.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvql66oms.jl:13\ntest set:\
    \ Error During Test at /tmp/tmpvql66oms.jl:16\n  Test threw exception\n  Expressio"
  timestamp: 1659748825
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 0
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659748823
- exit_code: 1
  program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n        \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .=\
    \ rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv7b120nt.jl:9\nin expression starting at /tmp/tmpv7b120nt.jl:9\n"
  stdout: ''
  timestamp: 1659748823
