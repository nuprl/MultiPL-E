language: jl
name: HumanEval_91_is_bored
results:
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_bored(S)\
    \ == 0 then 1 else 0 end\nend\n            \nusing Test\n\n@testset begin\n\n\
    candidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpg4ym1r59.jl:9\nin expression starting at /tmp/tmpg4ym1r59.jl:9\n"
  stdout: ''
  timestamp: 1659747059
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = Dict{String,Int64}()\n    \n    for w\
    \ in split(S)\n        if w == \"I\"\n            boredoms[w] = 1\n        else\n\
    \            boredoms[w] = boredoms[w] + 1\n    end\n    \n    return boredoms[\"\
    I\"]\nend\n\"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw2mcwq28.jl:1\nin expression starting at /tmp/tmpw2mcwq28.jl:1\n"
  stdout: ''
  timestamp: 1659747059
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_bored(S)\
    \ == 0 then 1 else 0 end\nend\n            \"\"\"\n    \n    boredoms = findall(S,\
    \ \"I\")\n    boredoms = length(boredoms)\n    return boredoms\nend\n</cell>\n\
    <code language=julia-1.3>\nboredoms(s)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\")\
    \ == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpd0e7e4a9.jl:9\nin expression starting at /tmp/tmpd0e7e4a9.jl:9\n"
  stdout: ''
  timestamp: 1659747059
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe66xq9u0.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe66xq9u0.jl:1\n\
    in expression starting at /tmp/tmpe66xq9u0.jl:1\n"
  stdout: ''
  timestamp: 1659747059
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\
    \ then return 0\n    else if starts_with(S, \"I\") then return 1\n    else return\
    \ 0\nend\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nusing Test\n\
    \n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\")\
    \ == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmplykju451.jl:9\nin expression starting at /tmp/tmplykju451.jl:9\n"
  stdout: ''
  timestamp: 1659747059
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_bored(S)\
    \ == 0 then 1 else 0 end\nend\n            \"\"\"\n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7tj_x2dd.jl:9\nin expression starting at /tmp/tmp7tj_x2dd.jl:9\n"
  stdout: ''
  timestamp: 1659747059
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\
    \ then return 0\n    else if S == \"I\" then return 1\n    else if S == \"!\"\
    \ then return 0\n    else if S == \"?\" then return 0\n    else return is_bored(tail(S))\n\
    end\n    \"\"\"\n    \n    boredom = 0\n    \n    boredom_list = list(boredom)\n\
    \    \n    for word in words:\n        if word == \"I\":\n            boredom\
    \ += 1\n        elif word == \"!\":\n            boredom -= 1\n        elif word\
    \ == \"?\":\n            boredom += 1\n        else:\n            boredom += is_bored(word)\n\
    \            \n    return boredom\n</cell>\n<cell>\n# Test your code\nboredom\
    \ = is_bored(boredom_string)\nprint(f\"Number of boredoms found: {boredom}\")\n\
    </cell>\n<text>\nExpected output\nNumber of boredoms found: 4\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8l3fjgv0.jl:9\nin expression starting at /tmp/tmp8l3fjgv0.jl:9\n"
  stdout: ''
  timestamp: 1659747059
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\
    \ \n        return 0 \n    else \n        boredoms = 0 \n        for word in split(S)\
    \ \n            if starts_with(word, \"I\") \n                boredoms += 1 \n\
    \        return boredoms \nend \n    \"\"\"\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp014ze38f.jl:1\nin expression starting at /tmp/tmp014ze38f.jl:1\n"
  stdout: ''
  timestamp: 1659747059
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    \n    S = lower(S)\n\
    \    \n    boredoms = 0\n    \n    for w in words(S)\n        if w == \"i\"\n\
    \            boredoms += 1\n    end\n    \n    return boredoms\nend\n    \"\"\"\
    \n    \n    S = lower(S)\n    \n    boredoms = 0\n    \n    for w in words(S)\n\
    \        if w == \"i\"\n            boredoms += 1\n    end\n    \n    return boredoms\n\
    end\n</cell>\n<code language=julia-1.5>\n@time is_bored(\"\"\"\n    You'll be\
    \ given a string of words, and your task is to count the number\n    of boredoms.\
    \ A boredom is a sentence that starts with the word \"I\".\n    Sentences are\
    \ delimited by '.', '?' or '!'.\n   \n    For example:\n            \"\"\")\n\
    </cell>\n<code language=julia-1.5>\n@time is_bored(\"\"\"\n    You'll be given\
    \ a string of words, and your task is to count the number\n    of boredoms. A\
    \ boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited\
    \ by '.', '?' or '!'.\n   \n    For example:\n            \"\"\")\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_bored(\"\"\"\n    You'll be given a string of\
    \ words, and your task is to count the number\n    of boredoms. A boredom is a\
    \ sentence that starts with the word \"I\".\n    Sentences are delimited by '.',\
    \ '?' or '!'.\n   \n    For example:\n            \"\"\")\n</cell>\n<code language=julia-1.5>\n\
    @time is_bored(\"\"\"\n    You'll be given a string of words, and your task is\
    \ to count the number\n    of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For\
    \ example:\n            \"\"\")\n</cell>\n<code language=julia-1.5>\n@time is_bored(\"\
    \"\"\n    You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n     \
    \       \"\"\")\n</cell>\n<code language=julia-1.5>\n@time is_bored(\"\"\"\n \
    \   You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom \nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmptz82pmek.jl:8 expected\
    \ \"end\", got \"be\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptz82pmek.jl:37\n\
    in expression starting at /tmp/tmptz82pmek.jl:37\n"
  stdout: ''
  timestamp: 1659747059
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_bored(S)\
    \ == 0 then 1 else 0 end\nend\n            \nusing Test\n\n@testset begin\n\n\
    candidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpg4ym1r59.jl:9\nin expression starting at /tmp/tmpg4ym1r59.jl:9\n"
  stdout: ''
  timestamp: 1659747059
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\
    \ \n        return 0 \n    else \n        boredoms = count_boredoms(S) \n    \
    \    return boredoms \nend \n\"\"\"\n    \n    boredoms = count_boredoms(S)\n\
    \    return boredoms\n</cell>\n<cell>\n# Test your code\ns = \"I like you!\"\n\
    boredoms = count_boredoms(s)\nprint(f\"There are {boredoms} boredoms in {s}.\"\
    )\n</cell>\n<text>\nExpected output\nThere are 2 boredoms in I like you!.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3u5m42fg.jl:1\nin expression starting at /tmp/tmp3u5m42fg.jl:1\n"
  stdout: ''
  timestamp: 1659747059
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = Dict()\n    \n    for w in split(S)\n\
    \        if is_bored(w)\n            boredoms[w] = get(boredoms, w, 0) + 1\n \
    \       end\n    end\n    \n    return length(boredoms)\nend\n    \"\"\"\n   \
    \ \n    boredoms = Dict()\n    \n    for w in split(S)\n        if is_bored(w)\n\
    \            boredoms[w] = get(boredoms, w, 0) + 1\n        end\n    end\n   \
    \ \n    return length(boredoms)\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ boredoms(\"\"\"\n    You'll be given a string of words, and your task is to\
    \ count the number\n    of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For\
    \ example:\n            \"\"\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that counts the number of boredoms in a string.\nThe function should return\
    \ a dictionary where the keys are the boredom words,\nand the values are the count\
    \ of how many times they appear in the string.\nThe boredom words should be all\
    \ lowercase.\nThe function should ignore punctuation and capitalization.\nThe\
    \ function should ignore the empty string.\nThe function should ignore the empty\
    \ string.\nThe function should ignore the empty string.\nThe function should ignore\
    \ the empty string.\nThe function should ignore the empty string.\nThe function\
    \ should ignore the empty string.\nThe function should ignore the empty string.\n\
    The function should ignore the empty string.\nThe function should ignore the empty\
    \ string.\nThe function should ignore the empty string.\nThe function should ignore\
    \ the empty string.\nThe function should ignore the empty string.\nThe function\
    \ should ignore the empty string.\nThe function should ignore the empty string.\n\
    The function should ignore the empty string.\nThe function should ignore the empty\
    \ string.\nThe function should ignore the empty string.\nThe function should ignore\
    \ the empty string.\nThe function should ignore the empty string.\nThe function\
    \ should ignore the empty string.\nThe function should ignore the empty string.\n\
    The function should ignore the empty string.\nThe function should ignore the empty\
    \ string.\nThe function should ignore the empty string.\nThe function should ignore\
    \ the empty string.\nThe function should ignore the empty string.\nThe function\
    \ should ignore the empty string.\nThe function should ignore the empty string.\n\
    The function should ignore the empty string.\nThe function should ignore the empty\
    \ string.\nThe function should ignore the empty string.\nThe function should ignore\
    \ \nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpprokkb4i.jl:8 expected\
    \ \"end\", got \"be\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpprokkb4i.jl:37\n\
    in expression starting at /tmp/tmpprokkb4i.jl:37\n"
  stdout: ''
  timestamp: 1659747059
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\
    \ == true \n        return 0 \n    else \n        boredoms = 0 \n        for w\
    \ in S \n            if w == \"I\" \n                boredoms = boredoms + 1 \n\
    \        return boredoms \nend \n\"\"\"\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph2ljng6b.jl:1\nin expression starting at /tmp/tmph2ljng6b.jl:1\n"
  stdout: ''
  timestamp: 1659747059
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = Dict{String,Int64}()\n    \n    for w\
    \ in split(S)\n        if w == \"I\"\n            boredoms[w] = 1\n        end\n\
    \    end\n    \n    return length(boredoms)\nend\n\"\"\"\n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsdrj45vh.jl:1\nin expression starting at /tmp/tmpsdrj45vh.jl:1\n"
  stdout: ''
  timestamp: 1659747059
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\
    \ then return 0\n    \n    boredoms = Dict{String,Int64}()\n    for word in split(S)\
    \ do \n        if word==\"I\" then boredoms[word] = 1 \n    end\n    return length(boredoms)\n\
    end\n    \"\"\"\n    \n    boredoms = Dict{String,Int64}()\n    for word in split(S)\
    \ do \n        if word==\"I\" then boredoms[word] = 1 \n    end\n    return length(boredoms)\n\
    end\n</cell>\n<code language=julia-1.5>\n@time is_bored(\"\"\"\n    You'll be\
    \ given a string of words, and your task is to count the number\n    of boredoms.\
    \ A boredom is a sentence that starts with the word \"I\".\n    Sentences are\
    \ delimited by '.', '?' or '!'.\n   \n    For example:\n            \"\"\")\n\
    </cell>\n<text>\nExercise: Write a function that takes a string and returns the\
    \ number of words in the string.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is\
    \ the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvi7bwmg9.jl:9\nin expression starting at /tmp/tmpvi7bwmg9.jl:9\n"
  stdout: ''
  timestamp: 1659747059
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\
    \ == true \n        return 0 \n    else \n        boredoms = 0 \n        for word\
    \ in split(S) do \n            if word == \"I\" then \n                boredoms\
    \ = boredoms + 1 \n            end \n        end \n        return boredoms \n\
    \    end \nend \n\"\"\"\n</cell>\n<cell>\n# Write your function here\n</cell>\n\
    <cell>\n# Test your function here\n</cell>\n<text>\nQuestion 7\nWrite a function\
    \ that takes a string and returns a list of all the words in the string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf40f7ior.jl:1\nin expression starting at /tmp/tmpf40f7ior.jl:1\n"
  stdout: ''
  timestamp: 1659747059
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\
    \ then return 0\n    else if S == \"I\" then return 1\n    else if S == \"?\"\
    \ then return 1\n    else if S == \"!\" then return 1\n    else return 0\nend\n\
    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9io58cyo.jl:9\nin expression starting at /tmp/tmp9io58cyo.jl:9\n"
  stdout: ''
  timestamp: 1659747059
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    \n    S = lower(S)\n\
    \    \n    I = 0\n    \n    for w in S\n        if w == \"i\"\n            I +=\
    \ 1\n        end\n    end\n    \n    return I\nend\n\"\"\"\n    \n    boredoms\
    \ = count_boredoms(text)\n    \n    return boredoms\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test your code\nboredoms = count_boredoms(\"I love Julia. Julia is my favorite\
    \ language.\")\n</cell>\n<text>\nExpected Output\n12\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0xipv9g5.jl:22\nin expression starting at\
    \ /tmp/tmp0xipv9g5.jl:22\n"
  stdout: ''
  timestamp: 1659747059
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\
    \ then 0 else 1\nend\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t\
    @test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgh51ckd1.jl:9\nin expression starting at /tmp/tmpgh51ckd1.jl:9\n"
  stdout: ''
  timestamp: 1659747059
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_bored(S)\
    \ == 0 \n        then return 0 \n        else return 1 \n    end\n    \n    function\
    \ is_bored(S::String)::Int64 \n        if is_bored(S) == 0 \n            then\
    \ return 0 \n            else return 1 \n        end\n    \n    function is_bored(S::String)::Int64\
    \ \n        if is_bored(S) == 0 \n            then return 0 \n            else\
    \ return 1 \n        end\n    \n    function is_bored(S::String)::Int64 \n   \
    \     if is_bored(S) == 0 \n            then return 0 \n            else return\
    \ 1 \n        end\n    \n    function is_bored(S::String)::Int64 \n        if\
    \ is_bored(S) == 0 \n            then return 0 \n            else return 1 \n\
    \        end\n    \n    function is_bored(S::String)::Int64 \n        if is_bored(S)\
    \ == 0 \n            then return 0 \n            else return 1 \n        end\n\
    \    \n    function is_bored(S::String)::Int64 \n        if is_bored(S) == 0 \n\
    \            then return 0 \n            else return 1 \n        end\n    \n \
    \   function is_bored(S::String)::Int64 \n        if is_bored(S) == 0 \n     \
    \       then return 0 \n            else return 1 \n        end\n    \n    function\
    \ is_bored(S::String)::Int64 \n        if is_bored(S) == 0 \n            then\
    \ return 0 \n            else return 1 \n        end\n    \n    function is_bored(S::String)::Int64\
    \ \n        if is_bored(S) == 0 \n            then return 0 \n            else\
    \ return 1 \n        end\n    \n    function is_bored(S::String)::Int64 \n   \
    \     if is_bored(S) == 0 \n            then return 0 \n            else return\
    \ 1 \n        end\n    \n    function is_bored(S::String)::Int64 \n        if\
    \ is_bored(S) == 0 \n            then return 0 \n            else return 1 \n\
    \        end\n    \n    function is_bored(S::String)::Int64 \n        if is_bored(S)\
    \ == 0 \n            then return 0 \n            else return 1 \n        end\n\
    \    \n    function is_bored(S::String)::Int64 \n        if is_bored(S) == 0 \n\
    \            then return 0 \n            else return 1 \n        end\n    \n \
    \   function is_bored(S::String)::Int64 \n        if is_bored(S) == 0 \n     \
    \       then return 0 \n            else return 1 \n        end\n    \n    function\
    \ is_bored(S::String)::Int64 \n        if is_bo\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6nb4zb9n.jl:10\nin expression starting at /tmp/tmp6nb4zb9n.jl:10\n"
  stdout: ''
  timestamp: 1659747059
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\
    \ then return 0\n    else if S == \"I\" then return 1\n    else if S == \"!\"\
    \ then return 0\n    else if S == \"?\" then return 0\n    else return is_bored(S[1..end-1])\
    \ + is_bored(S[end..end-1]) \nend\n    \"\"\"\n    \n    boredom = 0\n    \n \
    \   for word in words:\n        if word == \"I\":\n            boredom += 1\n\
    \        elif word == \"!\":\n            boredom += 1\n        elif word == \"\
    ?\":\n            boredom += 1\n        else:\n            boredom += is_bored(word[1:])\n\
    \    return boredom\n</cell>\n<cell>\n# Test your code\nwords = [\"I\", \"am\"\
    , \"I\"]\nprint(boredom(words))\n</cell>\n<text>\nPart 3: String Manipulation\n\
    3.1 String Manipulation\n3.1.1 String Manipulation\nStrings are a sequence of\
    \ characters. In Julia, Strings are represented using single quotes ('). \nFor\
    \ example 'hello' is a string containing the letters 'h', 'e', 'l', 'l', 'o'\n\
    To concatenate strings, use the plus sign. For example, 'hello' + ' world' yields\
    \ 'hello world'\nTo repeat strings, use the * operator. For example, 'hello' *\
    \ 3 yields 'hellohellohello'\nTo slice strings, use the : operator. For example,\
    \ 'hello'[1:2] yields 'he'\nNote that Julia uses 1-based indexing. That means\
    \ 'hello'[1] yields 'h'\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpe38hgesl.jl:9\nin expression starting at /tmp/tmpe38hgesl.jl:9\n"
  stdout: ''
  timestamp: 1659747059
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = Dict()\n    \n    for w in split(S)\n\
    \        if is_bored(w)\n            boredoms[w] = 1\n        end\n    end\n \
    \   \n    return length(boredoms)\nend\n\"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t\
    @test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcyc6yqj3.jl:1\nin expression starting at /tmp/tmpcyc6yqj3.jl:1\n"
  stdout: ''
  timestamp: 1659747059
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_bored(S)\
    \ == 0 then 1 else 0 end\nend\nis_bored(\"\"\"I. I am a bored. I am bored.\"\"\
    \")\nis_bored(\"\"\"I. I am a bored. I am bored.\"\"\")\nis_bored(\"\"\"I. I am\
    \ a bored. I am bored.\"\"\")\nis_bored(\"\"\"I. I am a bored. I am bored.\"\"\
    \")\nis_bored(\"\"\"I. I am a bored. I am bored.\"\"\")\nis_bored(\"\"\"I. I am\
    \ a bored. I am bored.\"\"\")\nis_bored(\"\"\"I. I am a bored. I am bored.\"\"\
    \")\nis_bored(\"\"\"I. I am a bored. I am bored.\"\"\")\nis_bored(\"\"\"I. I am\
    \ a bored. I am bored.\"\"\")\nis_bored(\"\"\"I. I am a bored. I am bored.\"\"\
    \")\nis_bored(\"\"\"I. I am a bored. I am bored.\"\"\")\nis_bored(\"\"\"I. I am\
    \ a bored. I am bored.\"\"\")\nis_bored(\"\"\"I. I am a bored. I am bored.\"\"\
    \")\nis_bored(\"\"\"I. I am a bored. I am bored.\"\"\")\nis_bored(\"\"\"I. I am\
    \ a bored. I am bored.\"\"\")\nis_bored(\"\"\"I. I am a bored. I am bored.\"\"\
    \")\nis_bored(\"\"\"I. I am a bored. I am bored.\"\"\")\nis_bored(\"\"\"I. I am\
    \ a bored. I am bored.\"\"\")\nis_bored(\"\"\"I. I am a bored. I am bored.\"\"\
    \")\nis_bored(\"\"\"I. I am a bored. I am bored.\"\"\")\nis_bored(\"\"\"I. I am\
    \ a bored. I am bored.\"\"\")\nis_bored(\"\"\"I. I am a bored. I am bored.\"\"\
    \")\nis_bored(\"\"\"I. I am a bored. I am bored.\"\"\")\nis_bored(\"\"\"I. I am\
    \ a bored. I am bored.\"\"\")\nis_bored(\"\"\"I. I am a bored. I am bored.\"\"\
    \")\nis_bored(\"\"\"I. I am a bored. I am bored.\"\"\")\nis_bored(\"\"\"I. I am\
    \ a bored. I am bored.\"\"\")\nis_bored(\"\"\"I. I am a bored. I am bored.\"\"\
    \")\nis_bored(\"\"\"I. I am a bored. I am bored.\"\"\")\nis_bored(\"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmplhiilgv8.jl:9\nin expression starting at /tmp/tmplhiilgv8.jl:9\n"
  stdout: ''
  timestamp: 1659747059
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = Dict{String,Int64}()\n    for word in\
    \ split(S)\n        if word==\"I\"\n            boredoms[word] = get(boredoms,\
    \ word, 0) + 1\n        end\n    end\n    return get(boredoms, \"I\", 0)\nend\n\
    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2tw7kcy5.jl:1\nin expression starting at /tmp/tmp2tw7kcy5.jl:1\n"
  stdout: ''
  timestamp: 1659747059
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_bored(S)\
    \ == 0 \n    then 1 else 0 \n    end \nend \n\"\"\"\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8w8gte65.jl:10\nin expression starting at /tmp/tmp8w8gte65.jl:10\n"
  stdout: ''
  timestamp: 1659747060
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\
    \ == true \n        return 0 \n    else \n        boredoms = 0 \n        for w\
    \ in split(S) do \n            if w == \"I\" then \n                boredoms +=\
    \ 1 \n            end \n        end \n        return boredoms \n    end \nend\
    \ \n\"\"\"\n</cell>\n<cell>\n# Test your code\ns = \"I\"\nassert is_bored(s) ==\
    \ 0\ns = \"Boredom\"\nassert is_bored(s) == 2\ns = \"I boredom because I love\
    \ you.\"\nassert is_bored(s) == 3\ns = \"I boredom because I love you and you.\"\
    \nassert is_bored(s) == 4\ns = \"I boredom because I love you and you and you.\"\
    \nassert is_bored(s) == 5\ns = \"I boredom because I love you and you and you\
    \ and you.\"\nassert is_bored(s) == 6\ns = \"I boredom because I love you and\
    \ you and you and you and you.\"\nassert is_bored(s) == 7\ns = \"I boredom because\
    \ I love you and you and you and you and you and you.\"\nassert is_bored(s) ==\
    \ 8\ns = \"I boredom because I love you and you and you and you and you and you\
    \ and you.\"\nassert is_bored(s) == 9\ns = \"I boredom because I love you and\
    \ you and you and you and you and you and you and you.\"\nassert is_bored(s) ==\
    \ 10\ns = \"I boredom because I love you and you and you and you and you and you\
    \ and you and you and you.\"\nassert is_bored(s) == 11\ns = \"I boredom because\
    \ I love you and you and you and you and you and you and you and you and you and\
    \ you.\"\nassert is_bored(s) == 12\ns = \"I boredom because I love you and you\
    \ and you and you and you and you and you and you and you and you.\"\nassert is_bored(s)\
    \ == 13\ns = \"I boredom because I love you and you and you and you and you and\
    \ you and you and you and you and you.\"\nassert is_bored(s) == 14\ns = \"I boredom\
    \ because I love you and you and you and you and you and you and you and you and\
    \ you and you.\"\nassert is_bored(s) == 15\ns = \"I boredom because I love you\
    \ \nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjn5i92hw.jl:1\nin expression starting at /tmp/tmpjn5i92hw.jl:1\n"
  stdout: ''
  timestamp: 1659747060
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\
    \ then return 0\n    else if S == \"I\" then return 1\n    else if S == \"?\"\
    \ then return 1\n    else if S == \"!\" then return 1\n    else return 0\nend\n\
    \    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3cgncens.jl:9\nin expression starting at /tmp/tmp3cgncens.jl:9\n"
  stdout: ''
  timestamp: 1659747060
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    S = lower(S)\n\
    \    I = 0\n    for w in split(S) do \n        if w == \"i\" then \n         \
    \   I += 1 \n        end\n    end\n    return I\nend\n    \"\"\"\n    boredoms\
    \ = sum(1 for word in split(S) if word.startswith(\"i\"))\n    return boredoms\n\
    </cell>\n<cell>\n# Test your code\nboredoms = count_boredoms(\"I like Ice cream!\"\
    )\nprint(boredoms)\n</cell>\n<text>\nExpected output\n2\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqjso4wl5.jl:1\nin expression starting at /tmp/tmpqjso4wl5.jl:1\n"
  stdout: ''
  timestamp: 1659747060
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    \n    S = lower(S)\n\
    \    \n    count = 0\n    \n    for w in split(S)\n        if w == \"i\"\n   \
    \         count += 1\n            \n    return count\n\"\"\"\n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg57w9u9n.jl:1\nin expression starting at /tmp/tmpg57w9u9n.jl:1\n"
  stdout: ''
  timestamp: 1659747061
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\
    \ then return 0\n    else if S == \"I\" then return 1\n    else if S == \"!\"\
    \ then return 0\n    else if S == \"?\" then return 0\n    else if S == \".\"\
    \ then return 0\n    else return is_bored(tail(S))\nend\n\"\"\"\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello\
    \ world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp13bo9nmk.jl:9\nin expression starting at /tmp/tmp13bo9nmk.jl:9\n"
  stdout: ''
  timestamp: 1659747060
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = Dict{String,Int64}()\n    \n    for word\
    \ in split(S)\n        if word[1] == 'I'\n            boredoms[word] = 0\n   \
    \     end\n    end\n    \n    return length(boredoms)\nend\n\"\"\"\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj_p6ywtj.jl:1\nin expression starting at /tmp/tmpj_p6ywtj.jl:1\n"
  stdout: ''
  timestamp: 1659747060
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_bored(S)\
    \ == 0 then 1 else 0 end\nend\n            \nusing Test\n\n@testset begin\n\n\
    candidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpg4ym1r59.jl:9\nin expression starting at /tmp/tmpg4ym1r59.jl:9\n"
  stdout: ''
  timestamp: 1659747059
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_bored(S)\
    \ == 0 then 1 else 0 end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpoa44ww7v.jl:9\nin expression starting at /tmp/tmpoa44ww7v.jl:9\n"
  stdout: ''
  timestamp: 1659747061
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0 \n    \n    boredoms = 0 \n    \n    for w in split(S)\n   \
    \     if w == \"I\"\n            boredoms += 1\n            \n    return boredoms\n\
    end\n    \"\"\"\n    \n    boredoms = 0\n    \n    for w in split(s):\n      \
    \  if w == \"I\":\n            boredoms += 1\n            \n    return boredoms\n\
    </cell>\n<code language=julia-1.5>\n# Test your code\ns = \"\"\"\nI love Julia!\n\
    It's amazing!\nI love it!\n\"\"\"\nboredoms(s)\n</cell>\n<text>\nExercise 3\n\
    Write a function that counts the number of times the word \"love\" appears in\
    \ a string.\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpag97vgfx.jl:14 expected \"\
    end\", got \"love\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpag97vgfx.jl:33\n\
    in expression starting at /tmp/tmpag97vgfx.jl:33\n"
  stdout: ''
  timestamp: 1659747060
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = Dict{String,Int64}()\n    \n    for w\
    \ in split(S)\n        if w == \"I\"\n            boredoms[w] = 1\n        end\n\
    \    end\n    \n    return length(boredoms)\nend\n\"\"\"\n    \nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5vwlc1dq.jl:1\nin expression starting at /tmp/tmp5vwlc1dq.jl:1\n"
  stdout: ''
  timestamp: 1659747060
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_bored(S,0)==0\
    \ then 1 else 0 end\nend\n\"\"\"\n    \nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpr5rcpruh.jl:9\nin expression starting at /tmp/tmpr5rcpruh.jl:9\n"
  stdout: ''
  timestamp: 1659747061
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = Dict{String,Int64}()\n    \n    for word\
    \ in split(S)\n        if word == \"I\"\n            boredoms[word] = 1\n    \
    \    end\n    end\n    \n    return length(boredoms)\nend\n\"\"\"\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn85ndc_d.jl:1\nin expression starting at /tmp/tmpn85ndc_d.jl:1\n"
  stdout: ''
  timestamp: 1659747061
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = Dict()\n    \n    for w in split(S)\n\
    \        if w == \"I\"\n            boredoms[w] = 1\n        end\n    end\n  \
    \  \n    return length(boredoms)\nend\n\"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t\
    @test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjbk6vtt4.jl:1\nin expression starting at /tmp/tmpjbk6vtt4.jl:1\n"
  stdout: ''
  timestamp: 1659747060
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = 0\n    for w in split(S)\n        if is_bored(w)\n\
    \            boredoms += 1\n        end\n    end\n    return boredoms\nend\n \
    \   \"\"\"\n    \n    # YOUR CODE HERE\n    boredoms = 0\n    for w in split(S):\n\
    \        if is_bored(w):\n            boredoms += 1\n    return boredoms\n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1sycwj8l.jl:1\nin expression starting at /tmp/tmp1sycwj8l.jl:1\n"
  stdout: ''
  timestamp: 1659747061
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\
    \ then 0 else 1\nend\n            \"\"\"\n    \n    \n    \"\"\"\n    Your task\
    \ is to implement the function count_boredoms.\n    It should return the number\
    \ of boredoms in the given string.\n    \"\"\"\n    \n    \n    \"\"\"\n    Your\
    \ task is to implement the function count_boredoms.\n    It should return the\
    \ number of boredoms in the given string.\n    \"\"\"\n    \n    \n    \"\"\"\n\
    \    Your task is to implement the function count_boredoms.\n    It should return\
    \ the number of boredoms in the given string.\n    \"\"\"\n    \n    \n    \"\"\
    \"\n    Your task is to implement the function count_boredoms.\n    It should\
    \ return the number of boredoms in the given string.\n    \"\"\"\n    \n    \n\
    \    \"\"\"\n    Your task is to implement the function count_boredoms.\n    It\
    \ should return the number of boredoms in the given string.\n    \"\"\"\n    \n\
    \    \n    \"\"\"\n    Your task is to implement the function count_boredoms.\n\
    \    It should return the number of boredoms in the given string.\n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    Your task is to implement the function count_boredoms.\n\
    \    It should return the number of boredoms in the given string.\n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    Your task is to implement the function count_boredoms.\n\
    \    It should return the number of boredoms in the given string.\n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    Your task is to implement the function count_boredoms.\n\
    \    It should return the number of boredoms in the given string.\n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    Your task is to implement the function count_boredoms.\n\
    \    It should return the number of boredoms in the given string.\n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    Your task is to implement the function count_boredoms.\n\
    \    It should return the number of boredoms in the given string.\n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    Your task is to implement the function count_boredoms.\n\
    \    It should return the number of boredoms in the given string.\n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    Your task is to implement the function count_boredoms.\n\
    \    It should return the number of boredoms in the given string.\n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    Your task is to implement the function count_boredoms.\n\
    \    It should return the number of boredoms in the given string.\n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    Your task is to implement the function count_boredoms.\n\
    \    It should return the number of boredoms in the given string.\n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    Your task is to implement the function count_boredoms.\n\
    \    It \nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp291h8nj5.jl:9\nin expression starting at /tmp/tmp291h8nj5.jl:9\n"
  stdout: ''
  timestamp: 1659747061
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\
    \ == true \n        return 0 \n    else \n        boredoms = 0 \n        for word\
    \ in split(S) do \n            if word == \"I\" then \n                boredoms\
    \ += 1 \n            end \n        end \n        return boredoms \n    end \n\
    end \n\"\"\"\n</cell>\n<cell>\n# Test your code\ns = \"I like Ice! I love Ice!\"\
    \nassert is_bored(s) == 3, \"is_bored(s) should return 3, but returned {}\".format\
    \ (is_bored(s))\n</cell>\n<text>\nTask 2: Write a function that takes a string\
    \ and returns the number of words in it.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppzb8jo1x.jl:1\nin expression starting at /tmp/tmppzb8jo1x.jl:1\n"
  stdout: ''
  timestamp: 1659747061
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = Dict{String,Int64}()\n    \n    for w\
    \ in split(S)\n        if w == \"I\"\n            boredoms[w] = 1\n        end\n\
    \    end\n    \n    return length(boredoms)\nend\n\"\"\"\n    \nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5vwlc1dq.jl:1\nin expression starting at /tmp/tmp5vwlc1dq.jl:1\n"
  stdout: ''
  timestamp: 1659747060
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    \n    S = lower(S)\n\
    \    \n    count = 0\n    \n    for w in split(S) do\n        if w == \"i\" then\n\
    \            count += 1\n        end\n    end\n    \n    return count\nend\n\"\
    \"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuxlewsrh.jl:1\nin expression starting at /tmp/tmpuxlewsrh.jl:1\n"
  stdout: ''
  timestamp: 1659747060
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = Dict{String,Int64}()\n    \n    for w\
    \ in split(S)\n        if w == \"I\"\n            boredoms[w] = 1\n        end\n\
    \    end\n    \n    return sum([v for (k,v) in boredoms.items()]) \nend\n\"\"\"\
    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t\
    @test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy8a53ljt.jl:1\nin expression starting at /tmp/tmpy8a53ljt.jl:1\n"
  stdout: ''
  timestamp: 1659747061
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = Dict()\n    \n    for w in split(S)\n\
    \        if is_bored(w)\n            boredoms[w] = get(boredoms, w, 0) + 1\n \
    \       end\n    end\n    \n    return length(boredoms)\nend\n\"\"\"\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t\
    @test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiqb_3adi.jl:1\nin expression starting at /tmp/tmpiqb_3adi.jl:1\n"
  stdout: ''
  timestamp: 1659747061
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = 0\n    for w in split(S)\n        if is_bored(w)\n\
    \            boredoms += 1\n        end\n    end\n    return boredoms\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpww9b6ft3.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpww9b6ft3.jl:1\n\
    in expression starting at /tmp/tmpww9b6ft3.jl:1\n"
  stdout: ''
  timestamp: 1659747061
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe66xq9u0.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe66xq9u0.jl:1\n\
    in expression starting at /tmp/tmpe66xq9u0.jl:1\n"
  stdout: ''
  timestamp: 1659747059
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\
    \ then return 0\n    else if S == \"I\" then return 1\n    else if S == \"I'm\"\
    \ then return 2\n    else if S == \"I'll\" then return 3\n    else if S == \"\
    I'd\" then return 4\n    else if S == \"I've\" then return 5\n    else if S ==\
    \ \"I'll've\" then return 6\n    else if S == \"I'dve\" then return 7\n    else\
    \ if S == \"I'llve\" then return 8\n    else if S == \"Ive\" then return 9\n \
    \   else if S == \"I'd\" then return 10\n    else if S == \"I\" then return 11\n\
    \    else if S == \"my\" then return 12\n    else if S == \"your\" then return\
    \ 13\n    else if S == \"yours\" then return 14\n    else if S == \"yourself\"\
    \ then return 15\n    else if S == \"you've\" then return 16\n    else if S ==\
    \ \"you'll\" then return 17\n    else if S == \"you'd\" then return 18\n    else\
    \ if S == \"you're\" then return 19\n    else if S == \"you've\" then return 20\n\
    \    else if S == \"you'll\" then return 21\n    else if S == \"you'd\" then return\
    \ 22\n    else if S == \"you're\" then return 23\n    else if S == \"you've\"\
    \ then return 24\n    else if S == \"you'll\" then return 25\n    else if S ==\
    \ \"you'd\" then return 26\n    else if S == \"you're\" then return 27\n    else\
    \ if S == \"you've\" then return 28\n    else if S == \"you'll\" then return 29\n\
    \    else if S == \"you'd\" then return 30\n    else if S == \"you're\" then return\
    \ 31\n    else if S == \"you've\" then return 32\n    else if S == \"you'll\"\
    \ then return 33\n    else if S == \"you'd\" then return 34\n    else if S ==\
    \ \"you're\" then return 35\n    else if S == \"you've\" then return 36\n    else\
    \ if S == \"you'll\" then return 37\n    else if S == \"you'd\" then return 38\n\
    \    else if S == \"you're\" then return 39\n    else if S == \"you've\" then\
    \ return 40\n\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7_nlpun9.jl:9\nin expression starting at /tmp/tmp7_nlpun9.jl:9\n"
  stdout: ''
  timestamp: 1659747061
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\
    \ then return 0\n    \n    boredoms = Dict{String,Int64}()\n    \n    for word\
    \ in split(S) do \n        if word==\"I\" then boredoms[word] = 1 \n    end\n\
    \    \n    return sum(boredoms.values)\nend\n    \"\"\"\n    \n    boredoms =\
    \ Dict{String,Int64}()\n    \n    for word in split(S) do \n        if word==\"\
    I\" then boredoms[word] = 1 \n    end\n    \n    return sum(boredoms.values)\n\
    end\n</cell>\n<code language=julia-1.5>\n@time is_bored(\"\"\"\n    You'll be\
    \ given a string of words, and your task is to count the number\n    of boredoms.\
    \ A boredom is a sentence that starts with the word \"I\".\n    Sentences are\
    \ delimited by '.', '?' or '!'.\n   \n    For example:\n            \"\"\")\n\
    </cell>\n<code language=julia-1.5>\n@time is_bored(\"\"\"\n    You'll be given\
    \ a string of words, and your task is to count the number\n    of boredoms. A\
    \ boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited\
    \ by '.', '?' or '!'.\n   \n    For example:\n            \"\"\")\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_bored(\"\"\"\n    You'll be given a string of\
    \ words, and your task is to count the number\n    of boredoms. A boredom is a\
    \ sentence that starts with the word \"I\".\n    Sentences are delimited by '.',\
    \ '?' or '!'.\n   \n    For example:\n            \"\"\")\n</cell>\n<code language=julia-1.5>\n\
    @time is_bored(\"\"\"\n    You'll be given a string of words, and your task is\
    \ to count the number\n    of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For\
    \ example:\n            \"\"\")\n</cell>\n<code language=julia-1.5>\n@time is_bored(\"\
    \"\"\n    You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n     \
    \       \"\"\")\n</cell>\n<code language=julia-1.5>\n@time is_bored(\"\"\"\n \
    \   You'll be given \nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t\
    @test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpv9_686bi.jl:9\nin expression starting at /tmp/tmpv9_686bi.jl:9\n"
  stdout: ''
  timestamp: 1659747061
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0;\n    \n    boredoms = findall(S, \"^I\");\n    \n    return\
    \ length(boredoms);\nend\n    \"\"\"\n    \n    boredoms = findall(S, \"^I\")\n\
    \    return len(boredoms)\n</cell>\n<cell>\n# Test your code\ns = \"I like Ice!\
    \ I love Ice!\"\nboredoms = count_boredoms(s)\nprint(f\"Number of boredoms in\
    \ {s}: {boredoms}\")\n</cell>\n<text>\nExpected output\nNumber of boredoms in\
    \ I like Ice! I love Ice!: 2\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm39hhux0.jl:1\nin expression starting at /tmp/tmpm39hhux0.jl:1\n"
  stdout: ''
  timestamp: 1659747061
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_bored(S)\
    \ == 0 then 1 else 0 end\nend\n            \"\"\"\n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7tj_x2dd.jl:9\nin expression starting at /tmp/tmp7tj_x2dd.jl:9\n"
  stdout: ''
  timestamp: 1659747059
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    \n    S = lower(S)\n\
    \    \n    boredoms = 0\n    \n    for w in S\n        if w == \"i\"\n       \
    \     boredoms += 1\n        end\n    end\n    \n    return boredoms\nend\n\"\"\
    \"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5czkhpic.jl:22\nin expression starting at\
    \ /tmp/tmp5czkhpic.jl:22\n"
  stdout: ''
  timestamp: 1659747062
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    I = find(S, \"I\")\n    if I < 0\n        return\
    \ 0\n    \n    boredoms = 0\n    \n    for i = I + 1 to length(S)\n        if\
    \ S[i] == '.'\n            boredoms += 1\n        \n    return boredoms\nend\n\
    \    \"\"\"\n    \n    boredoms = 0\n    \n    for word in words:\n        if\
    \ word[0] in \"I!?\":\n            boredoms += 1\n    \n    return boredoms\n\
    </cell>\n<code language=julia-1.5>\n# Test your code\nboredoms(\"I bore you.\"\
    )\n</cell>\n<code language=julia-1.5>\n# Run this cell to see what your outputs\
    \ look like\nboredoms(\"I bore you.\")\n</cell>\n<text>\nPart 2\nThe second task\
    \ is to count the frequency of words that start with a given letter. \nThis will\
    \ be similar to the boredoms function you wrote in Part 1, but instead of looking\
    \ for a boredom, we'll count the number of times a given letter appears in a given\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpfnerkclh.jl:18 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfnerkclh.jl:18\n\
    in expression starting at /tmp/tmpfnerkclh.jl:18\n"
  stdout: ''
  timestamp: 1659747062
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_bored(S)\
    \ == 0 then 1 else 0 end\nend\n            \"\"\"\n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7tj_x2dd.jl:9\nin expression starting at /tmp/tmp7tj_x2dd.jl:9\n"
  stdout: ''
  timestamp: 1659747059
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = findall(S, \"I\")\n    \n    length(boredoms)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq00knt5l.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq00knt5l.jl:1\n\
    in expression starting at /tmp/tmpq00knt5l.jl:1\n"
  stdout: ''
  timestamp: 1659747062
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = findall(S, \"I\")\n    \n    return length(boredoms)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyx2tcbgd.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyx2tcbgd.jl:1\n\
    in expression starting at /tmp/tmpyx2tcbgd.jl:1\n"
  stdout: ''
  timestamp: 1659747062
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = findall(S, \"^I\")\n    \n    return length(boredoms)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpo3qbq3ou.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpo3qbq3ou.jl:1\n\
    in expression starting at /tmp/tmpo3qbq3ou.jl:1\n"
  stdout: ''
  timestamp: 1659747062
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_bored(S)\
    \ == 1 then 1 else 0 end\nend\n            \"\"\"\n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmplp15be2k.jl:9\nin expression starting at /tmp/tmplp15be2k.jl:9\n"
  stdout: ''
  timestamp: 1659747062
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = Dict{String,Int64}()\n    for w in split(S)\n\
    \        if w == \"I\"\n            boredoms[w] = 1\n        end\n    end\n  \
    \  return length(boredoms)\nend\n\"\"\"\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdnr6x9ko.jl:1\nin expression starting at /tmp/tmpdnr6x9ko.jl:1\n"
  stdout: ''
  timestamp: 1659747062
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = Dict{String,Int64}()\n    \n    for word\
    \ in split(S)\n        if word == \"I\"\n            boredoms[word] = 1\n    \
    \    end\n    end\n    \n    return length(boredoms)\nend\n    \"\"\"\n    \n\
    \    boredoms = Dict{String,Int64}()\n    \n    for word in split(S)\n       \
    \ if word == \"I\"\n            boredoms[word] = 1\n        end\n    end\n   \
    \ \n    return length(boredoms)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2yp6avhg.jl:1\nin expression starting at /tmp/tmp2yp6avhg.jl:1\n"
  stdout: ''
  timestamp: 1659747062
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = Dict{String,Int64}()\n    \n    for word\
    \ in split(S)\n        if word == \"I\"\n            boredoms[word] = 1\n    \
    \    end\n    end\n    \n    return length(boredoms)\nend\n\"\"\"\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn85ndc_d.jl:1\nin expression starting at /tmp/tmpn85ndc_d.jl:1\n"
  stdout: ''
  timestamp: 1659747061
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = Dict{String,Int64}()\n    \n    for w\
    \ in split(S)\n        if w == \"I\"\n            boredoms[w] = 1\n        end\n\
    \    end\n    \n    return length(boredoms)\nend\n\"\"\"\n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsdrj45vh.jl:1\nin expression starting at /tmp/tmpsdrj45vh.jl:1\n"
  stdout: ''
  timestamp: 1659747059
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_bored(S)\
    \ == 0 then 1 else 0 end\nend\n            \nusing Test\n\n@testset begin\n\n\
    candidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpg4ym1r59.jl:9\nin expression starting at /tmp/tmpg4ym1r59.jl:9\n"
  stdout: ''
  timestamp: 1659747059
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_bored(S)\
    \ == 0 then 1 else 0 end\nend\nis_bored(\"Im a bored. Im a bored. Im a bored.\
    \ Im a bored. Im a bored. Im a bored. Im a bored. Im a bored. Im a bored. Im a\
    \ bored. Im a bored. Im a bored. Im a bored. Im a bored. Im a bored. Im a bored.\
    \ Im a bored. Im a bored. Im a bored. Im a bored. Im a bored. Im a bored. Im a\
    \ bored. Im a bored. Im a bored. Im a bored. Im a bored. Im a bored. Im a bored.\
    \ Im a bored. Im a bored. Im a bored. Im a bored. Im a bored. Im a bored. Im a\
    \ bored. Im a bored. Im a bored. Im a bored. Im a bored. Im a bored. Im a bored.\
    \ Im a bored. Im a bored. Im a bored. Im a bored. Im a bored. Im a bored. Im a\
    \ bored. Im a bored. Im a bored. Im a bored. Im a bored. Im a bored. Im a bored.\
    \ Im a bored. Im a bored. Im a bored. Im a bored. Im a bored. Im a bored. Im a\
    \ bored. Im a bored. Im a bored. Im a bored. Im a bored. Im a bored. Im a bored.\
    \ Im a bored. Im a bored. Im a bored. Im a bored. Im a bored. Im a bored. Im a\
    \ bored. Im a bored. Im a bored. Im a bored. Im a bored. Im a bored. Im a bored.\
    \ Im a bored. Im \nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpiyo55ioc.jl:9\nin expression starting at /tmp/tmpiyo55ioc.jl:9\n"
  stdout: ''
  timestamp: 1659747062
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = Dict{String,Int64}()\n    \n    for w\
    \ in split(S)\n        if w == \"I\"\n            boredoms[w] = 1\n        else\n\
    \            boredoms[w] = boredoms[w] + 1\n    end\n    \n    return length(boredoms)\n\
    end\n    \"\"\"\n    \n    boredoms = Dict{String,Int64}()\n    \n    for w in\
    \ split(S)\n        if w == \"I\"\n            boredoms[w] = 1\n        else\n\
    \            boredoms[w] = boredoms[w] + 1\n        end\n    end\n    \n    return\
    \ length(boredoms)\nend\n</cell>\n<code language=julia-1.4>\n@time boredoms(\"\
    \"\"\n    You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n     \
    \       \"\"\")\n</cell>\n<code language=julia-1.4>\n@time boredoms(\"\"\"\n \
    \   You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n     \
    \       \"\"\")\n</cell>\n<code language=julia-1.4>\n@time boredoms(\"\"\"\n \
    \   You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n     \
    \       \"\"\")\n</cell>\n<code language=julia-1.4>\n@time boredoms(\"\"\"\n \
    \   You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n     \
    \       \"\"\")\n</cell>\n<code language=julia-1.4>\n@time boredoms(\"\"\"\n \
    \   You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"be\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbctdqs4e.jl:40\nin expression starting at /tmp/tmpbctdqs4e.jl:40\n"
  stdout: ''
  timestamp: 1659747062
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_bored(S)\
    \ == 0 then 1 else 0 end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpoa44ww7v.jl:9\nin expression starting at /tmp/tmpoa44ww7v.jl:9\n"
  stdout: ''
  timestamp: 1659747061
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    \n    S = lower(S)\n\
    \    \n    count = 0\n    \n    for word in split(S) do \n        if word == \"\
    i\" then \n            count += 1\n        end\n    end\n    \n    return count\n\
    end\n\"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnuettji7.jl:1\nin expression starting at /tmp/tmpnuettji7.jl:1\n"
  stdout: ''
  timestamp: 1659747062
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    \n    S = lower(S)\n\
    \    \n    boredoms = 0\n    \n    for w in split(S) do \n        if w == \"i\"\
    \ then \n            boredoms = boredoms + 1\n        end\n    end\n    \n   \
    \ return boredoms\nend\n\"\"\"\n    \n    boredoms = 0\n    \n    for w in split(S)\
    \ do \n        if w == \"i\" then \n            boredoms = boredoms + 1\n    \
    \    end\n    end\n    \n    return boredoms\nend\n</cell>\n<code language=julia-1.4>\n\
    is_bored(\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\")\n</cell>\n<code language=julia-1.4>\nis_bored(\"\"\"\n  \
    \  You'll be given a string of words, and your task is to count the number\n \
    \   of boredoms. A boredom is a sentence that starts with the word \"I\".\n  \
    \  Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n      \
    \      \"\"\")\n</cell>\n<code language=julia-1.4>\nis_bored(\"\"\"\n    You'll\
    \ be given a string of words, and your task is to count the number\n    of boredoms.\
    \ A boredom is a sentence that starts with the word \"I\".\n    Sentences are\
    \ delimited by '.', '?' or '!'.\n   \n    For example:\n            \"\"\")\n\
    </cell>\n<code language=julia-1.4>\nis_bored(\"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\")\n</cell>\n<code\
    \ language=julia-1.4>\nis_bored(\"\"\"\n    You'll be given a string of words,\
    \ and your task is to count the number\n    of boredoms. A boredom is a sentence\
    \ that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or\
    \ '!'.\n   \n    For example:\n            \"\"\")\n</cell>\n<code language=julia-1.4>\n\
    is_bored(\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A bore\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmph67cy_fp.jl:8 expected\
    \ \"end\", got \"be\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmph67cy_fp.jl:37\n\
    in expression starting at /tmp/tmph67cy_fp.jl:37\n"
  stdout: ''
  timestamp: 1659747062
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = Dict{String,Int64}()\n    \n    for w\
    \ in split(S)\n        if w == \"I\"\n            boredoms[w] = 1\n        end\n\
    \    end\n    \n    return length(boredoms)\nend\n    \nis_bored(\"I like Ice.\"\
    )\nis_bored(\"I like ice.\")\nis_bored(\"I like ice.I\")\nis_bored(\"I like ice.I\
    \ like ice.I\")\nis_bored(\"I like ice.I like ice.I like ice.I\")\nis_bored(\"\
    I like ice.I like ice.I like ice.I like ice.I\")\nis_bored(\"I like ice.I like\
    \ ice.I like ice.I like ice.I like ice.I\")\nis_bored(\"I like ice.I like ice.I\
    \ like ice.I like ice.I like ice.I like ice.I\")\nis_bored(\"I like ice.I like\
    \ ice.I like ice.I like ice.I like ice.I like ice.I like ice.I\")\nis_bored(\"\
    I like ice.I like ice.I like ice.I like ice.I like ice.I like ice.I like ice.I\
    \ like ice.I like ice.I like ice.I like ice.I like ice.I like ice.I like ice.I\
    \ like ice.I like ice.I like ice.I like ice.I like ice.I like ice.I like ice.I\
    \ like ice.I like ice.I like ice.I like ice.I like ice.I like ice.I like ice.I\
    \ like ice.I like ice.I like ice.I like ice.I like ice.I like ice.I like ice.I\
    \ like ice.I like ice.I like ice.I like ice.I like ice.I like ice.I like ice.I\
    \ like ice.I like ice.I like ice.I like ice.I like ice.I like ice.I like ice.I\
    \ like ice.I like ice.I like ice.I like ice.I like ice.I like ice.I like ice.I\
    \ like ice.I like ice.I like ice.I like ice.I like ice.I like ice.I like ice.I\
    \ like ice.I like ice.I like ice.I like ice.I \nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxapvq4rk.jl:38\nin expression starting at\
    \ /tmp/tmpxapvq4rk.jl:38\n"
  stdout: ''
  timestamp: 1659747062
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_bored(S,0)==0\
    \ then 1 else 0 end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7zls_a4y.jl:9\nin expression starting at /tmp/tmp7zls_a4y.jl:9\n"
  stdout: ''
  timestamp: 1659747062
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0;\n    \n    boredoms = findall(S, \"^I.*\");\n    \n    if length(boredoms)\
    \ == 0\n        return 0;\n    else\n        return length(boredoms);\n    end\n\
    end\n\"\"\"\n</cell>\n<cell>\n# Test your code\ns = \"\"\"\n    I like Ice cream!\n\
    \    I like Ice cream!\n    I like Ice cream!\n    I like Ice cream!\n    I like\
    \ Ice cream!\n    I like Ice cream!\n    I like Ice cream!\n    I like Ice cream!\n\
    \    I like Ice cream!\n    I like Ice cream!\n    I like Ice cream!\n    I like\
    \ Ice cream!\n    I like Ice cream!\n    I like Ice cream!\n    I like Ice cream!\n\
    \    I like Ice cream!\n    I like Ice cream!\n    I like Ice cream!\n    I like\
    \ Ice cream!\n    I like Ice cream!\n    I like Ice cream!\n    I like Ice cream!\n\
    \    I like Ice cream!\n    I like Ice cream!\n    I like Ice cream!\n    I like\
    \ Ice cream!\n    I like Ice cream!\n    I like Ice cream!\n    I like Ice cream!\n\
    \    I like Ice cream!\n    I like Ice cream!\n    I like Ice cream!\n    I like\
    \ Ice cream!\n    I like Ice cream!\n    I like Ice cream!\n    I like Ice cream!\n\
    \    I like Ice cream!\n    I like Ice cream!\n    I like Ice cream!\n    I like\
    \ Ice cream!\n    I like Ice cream!\n    I like Ice cream!\n    I like Ice cream!\n\
    \    I like Ice cream!\n    I like Ice cream!\n    I like Ice cream!\n    I like\
    \ Ice cream!\n    I like Ice cream!\n    I like Ice cream!\n    I like I\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpjpxn5y1a.jl:8 expected\
    \ \"end\", got \"like\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjpxn5y1a.jl:25\n\
    in expression starting at /tmp/tmpjpxn5y1a.jl:25\n"
  stdout: ''
  timestamp: 1659747062
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = Dict{String,Int64}()\n    \n    for word\
    \ in split(S)\n        if word == \"I\"\n            boredoms[word] = get(boredoms,\
    \ word, 0) + 1\n        end\n    end\n    \n    return length(boredoms)\nend\n\
    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdpam08ed.jl:1\nin expression starting at /tmp/tmpdpam08ed.jl:1\n"
  stdout: ''
  timestamp: 1659747062
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_bored(S)\
    \ == 0 then 1 else 0 end\nend\n            \"\"\"\n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7tj_x2dd.jl:9\nin expression starting at /tmp/tmp7tj_x2dd.jl:9\n"
  stdout: ''
  timestamp: 1659747059
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\
    \ \n        return 0 \n    else \n        boredoms = 0 \n        for word in split(S)\
    \ \n            if word == \"I\" \n                boredoms += 1 \n        return\
    \ boredoms \nend \n\"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_3kzfrhp.jl:1\nin expression starting at /tmp/tmp_3kzfrhp.jl:1\n"
  stdout: ''
  timestamp: 1659747062
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_bored(S)\
    \ == 0 \n        then return 0 \n        else return 1 \n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\")\
    \ == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3kxqkmh8.jl:10\nin expression starting at /tmp/tmp3kxqkmh8.jl:10\n"
  stdout: ''
  timestamp: 1659747062
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\
    \ == true \n        return 0 \n    else \n        boredoms = 0 \n        for word\
    \ in split(S) do \n            if word == \"I\" then \n                boredoms\
    \ += 1 \n            end \n        end \n        return boredoms \n    end \n\
    end \n\"\"\"\n</cell>\n<cell>\n# Write a function that takes a string and returns\
    \ the number of boredoms \n# in the string.\ndef count_boredoms(S::String)::Int64\
    \ \n    if is_empty(S) == true \n        return 0 \n    else \n        boredoms\
    \ = 0 \n        for word in split(S) do \n            if word == \"I\" then \n\
    \                boredoms += 1 \n            end \n        end \n        return\
    \ boredoms \n    end \nend \n</cell>\n<cell>\n# Test your function below.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeexd61h9.jl:1\nin expression starting at /tmp/tmpeexd61h9.jl:1\n"
  stdout: ''
  timestamp: 1659747062
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\
    \ == true \n        return 0 \n    else \n        boredoms = 0 \n        for word\
    \ in split(S) do \n            if word == \"I\" then \n                boredoms\
    \ += 1 \n            end \n        end \n        return boredoms \n    end \n\
    end \n\"\"\"\n</cell>\n<cell>\n# Write a function that takes a string and returns\
    \ the number of words in the string.\n# \n# For example:\n# \n# ```\n# count_words(\"\
    Hello World\")\n# ```\n# should return 5.\n# \n# ```\n# count_words(\"Hello World.\
    \ How are you?\")\n# ```\n# should return 4.\n# \n# ```\n# count_words(\"Hello\
    \ World! How are you?\")\n# ```\n# should return 3.\n# \n# ```\n# count_words(\"\
    Hello World! How are you? I am fine.\")\n# ```\n# should return 3.\n# \n# ```\n\
    # count_words(\"Hello World! How are you? I am fine. Are you okay?\")\n# ```\n\
    # should return 2.\n# \n# ```\n# count_words(\"Hello World! How are you? I am\
    \ fine. Are you okay.\")\n# ```\n# should return 2.\n# \n# ```\n# count_words(\"\
    Hello World! How are you? I am fine. Are you okay.\")\n# ```\n# should return\
    \ 2.\n# \n# ```\n# count_words(\"Hello World! How are you? I am fine. Are you\
    \ okay.\")\n# ```\n# should return 2.\n# \n# ```\n# count_words(\"Hello World!\
    \ How are you? I am fine. Are you okay.\")\n# ```\n# should return 2.\n# \n# ```\n\
    # count_words(\"Hello World! How are you? I am fine. Are you okay.\")\n# ```\n\
    # should return 2.\n# \n# ```\n# count_words(\"Hello World! How are you? I am\
    \ fine. Are you okay.\")\n# ```\n# should return 2.\n# \n# ```\n# count_words(\"\
    Hello World! How are you? I am fine. Are you okay.\")\n# ```\n# should return\
    \ 2.\n# \n# ```\n# count_words(\"Hello World! How are you? I am fine. Are you\
    \ okay.\")\n# ```\n# should return 2.\n# \n# ```\n# count_words(\"Hello World!\
    \ How are you? I am fine. Are you okay.\")\n# ```\n# should return 2.\nusing Test\n\
    \n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\")\
    \ == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg_mn_va8.jl:1\nin expression starting at /tmp/tmpg_mn_va8.jl:1\n"
  stdout: ''
  timestamp: 1659747062
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = Dict{String,Int64}()\n    \n    for word\
    \ in split(S)\n        if word == \"I\"\n            boredoms[word] = 1\n    \
    \    else\n            boredoms[word] = boredoms[word] + 1\n        end\n    end\n\
    \    \n    return length(boredoms)\nend\n\"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppmg7rqko.jl:1\nin expression starting at /tmp/tmppmg7rqko.jl:1\n"
  stdout: ''
  timestamp: 1659747062
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\
    \ then return 0\n    \n    boredoms = Dict{String,Int64}()\n    \n    for w in\
    \ split(S) do \n        if w == \"I\" then boredoms[w] = 1 \n    end\n    \n \
    \   return length(boredoms)\nend\n\"\"\"\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp954_ph26.jl:9\nin expression starting at /tmp/tmp954_ph26.jl:9\n"
  stdout: ''
  timestamp: 1659747062
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = findall(S, \"^I\")\n    \n    if is_empty(boredoms)\n\
    \        return 0\n    \n    return length(boredoms)\nend\n    \"\"\"\n    \n\
    \    boredoms = findall(S, \"^I\")\n    \n    if is_empty(boredoms)\n        return\
    \ 0\n    \n    return length(boredoms)\n    \n</cell>\n<code language=julia-1.5>\n\
    @time boredoms_count(boredoms)\n</cell>\n<text>\nPart 4: Finding Boredoms in Text\n\
    Now that we have our boredoms function defined, we can use it to find boredoms\
    \ in our text. Let's start by defining a function called boredom_count that takes\
    \ a text string and returns the number of boredoms in that text.\nusing Test\n\
    \n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\")\
    \ == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpin5zxjwg.jl:1\nin expression starting at /tmp/tmpin5zxjwg.jl:1\n"
  stdout: ''
  timestamp: 1659747063
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = findall(S, \"^I\")\n    return length(boredoms)\n\
    end\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6_dh9l9w.jl:1\nin expression starting at /tmp/tmp6_dh9l9w.jl:1\n"
  stdout: ''
  timestamp: 1659747064
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\
    \ then return 0\n    else if starts_with(S, \"I\") then return 1\n    else return\
    \ 0\nend\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nusing Test\n\
    \n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\")\
    \ == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmplykju451.jl:9\nin expression starting at /tmp/tmplykju451.jl:9\n"
  stdout: ''
  timestamp: 1659747059
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    \n    boredoms\
    \ = Dict{String,Int64}()\n    for word in split(S)\n        if word==\"I\"\n \
    \           boredoms[word] = get(boredoms, word, 0) + 1\n        end\n    end\n\
    \    return length(boredoms)\nend\n\"\"\"\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7ulnu6ux.jl:18\nin expression starting at\
    \ /tmp/tmp7ulnu6ux.jl:18\n"
  stdout: ''
  timestamp: 1659747064
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_bored(S)\
    \ == 0 then 1 else 0 end\nend\n            \nusing Test\n\n@testset begin\n\n\
    candidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpg4ym1r59.jl:9\nin expression starting at /tmp/tmpg4ym1r59.jl:9\n"
  stdout: ''
  timestamp: 1659747059
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = Dict{String,Int64}()\n    for word in\
    \ split(S)\n        if word == \"I\"\n            boredoms[word] = get(boredoms,\
    \ word, 0) + 1\n        end\n    end\n    return get(boredoms, \"I\", 0)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello\
    \ world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5voh44lo.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5voh44lo.jl:1\n\
    in expression starting at /tmp/tmp5voh44lo.jl:1\n"
  stdout: ''
  timestamp: 1659747064
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\
    \ \n        return 0 \n    \n    boredoms = 0 \n    \n    for w in split(S) do\
    \ \n        if w == \"I\" then \n            boredoms += 1 \n        else \n \
    \           boredoms += 0 \n    \n    return boredoms \nend\n\"\"\"\n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9q07hgc8.jl:1\nin expression starting at /tmp/tmp9q07hgc8.jl:1\n"
  stdout: ''
  timestamp: 1659747064
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    S = lower(S)\n\
    \    boredoms = findall(S, \"I\")\n    return length(boredoms)\nend\n    \"\"\"\
    \n    boredoms = findall(S, \"I\")\n    return length(boredoms)\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz2dv2a25.jl:13\nin expression starting at\
    \ /tmp/tmpz2dv2a25.jl:13\n"
  stdout: ''
  timestamp: 1659747064
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_bored(S)\
    \ == 0 then 1 else 0 end\nend\n            \"\"\"\n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7tj_x2dd.jl:9\nin expression starting at /tmp/tmp7tj_x2dd.jl:9\n"
  stdout: ''
  timestamp: 1659747059
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    \n    S = lower(S)\n\
    \    \n    boredoms = 0\n    \n    for w in S\n        if w == \"i\"\n       \
    \     boredoms += 1\n        end\n    end\n    \n    return boredoms\nend\n\"\"\
    \"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5czkhpic.jl:22\nin expression starting at\
    \ /tmp/tmp5czkhpic.jl:22\n"
  stdout: ''
  timestamp: 1659747062
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_bored(S)\
    \ == 0 then 1 else 0 end\nend\n\"\"\"\n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpz658jz0_.jl:9\nin expression starting at /tmp/tmpz658jz0_.jl:9\n"
  stdout: ''
  timestamp: 1659747064
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\
    \ then return 0\n    else if S == \"I\" then return 1\n    else return is_bored(tail(S))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpg6xhlj52.jl:9\nin expression starting at /tmp/tmpg6xhlj52.jl:9\n"
  stdout: ''
  timestamp: 1659747064
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = Dict{String,Int64}()\n    \n    for w\
    \ in split(S)\n        if w == \"I\"\n            boredoms[w] = 1\n        end\n\
    \    end\n    \n    return length(boredoms)\nend\n    \"\"\"\n    \n    boredoms\
    \ = Dict{String,Int64}()\n    \n    for w in split(S)\n        if w == \"I\"\n\
    \            boredoms[w] = 1\n        end\n    end\n    \n    return length(boredoms)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9kwd074x.jl:1\nin expression starting at /tmp/tmp9kwd074x.jl:1\n"
  stdout: ''
  timestamp: 1659747064
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\
    \ then return 0\n    else if S == \"I\" then return 1\n    else if S == \"?\"\
    \ then return 1\n    else if S == \"!\" then return 1\n    else return 0\nend\n\
    \    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3cgncens.jl:9\nin expression starting at /tmp/tmp3cgncens.jl:9\n"
  stdout: ''
  timestamp: 1659747060
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_bored(S)\
    \ == 0 then 1 else 0 end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpoa44ww7v.jl:9\nin expression starting at /tmp/tmpoa44ww7v.jl:9\n"
  stdout: ''
  timestamp: 1659747061
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = Dict()\n    for word in split(S)\n   \
    \     if is_bored(word)\n            boredoms[word] = 1\n        end\n    end\n\
    \    return length(boredoms)\nend\n\"\"\"\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzqex4xt4.jl:1\nin expression starting at /tmp/tmpzqex4xt4.jl:1\n"
  stdout: ''
  timestamp: 1659747064
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\
    \ \n        return 0 \n    \n    boredoms = 0 \n    \n    for w in split(S) do\
    \ \n        if w == \"I\" then \n            boredoms += 1 \n        else \n \
    \           boredoms += 0 \n    \n    return boredoms \nend\n    \"\"\"\n    \n\
    \    boredoms = 0\n    \n    for w in split(S):\n        if w == \"I\":\n    \
    \        boredoms += 1\n        else:\n            boredoms += 0\n    \n    return\
    \ boredoms\n</cell>\n<cell>\n# Test your code\ns = \"I love learning\"\nassert\
    \ is_bored(s) == 3, \"is_bored function should return 3 when given s = 'I love\
    \ learning'\"\nassert is_bored(\"\") == 0, \"is_bored function should return 0\
    \ when given s = ''\"\nassert is_bored(\"I love learning\") == 3, \"is_bored function\
    \ should return 3 when given s = 'I love learning'\"\nassert is_bored(\"I hate\
    \ lord of the rings\") == 0, \"is_bored function should return 0 when given s\
    \ = 'I hate lord of the rings'\"\n</cell>\n<text>\nTask 3\nWrite a function that\
    \ takes a string and returns the number of words in the string.\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv4jpnj3o.jl:1\nin expression starting at /tmp/tmpv4jpnj3o.jl:1\n"
  stdout: ''
  timestamp: 1659747064
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = Dict{String,Int64}()\n    \n    for w\
    \ in words\n        if w == \"I\"\n            boredoms[w] = 1\n        else\n\
    \            boredoms[w] = boredoms[w] + 1\n    end\n    \n    return boredoms[\"\
    I\"]\nend\n\"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3wfwk6z_.jl:1\nin expression starting at /tmp/tmp3wfwk6z_.jl:1\n"
  stdout: ''
  timestamp: 1659747064
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\
    \ then return 0\n    else if S == \"I\" then return 1\n    else if S == \"!\"\
    \ then return 0\n    else if S == \"?\" then return 0\n    else return is_bored(S[1..end])\n\
    end\n    \"\"\"\n    \n    boredoms = []\n    boredoms.append(boredom)\n    boredoms.append(boredom)\n\
    \    boredoms.append(boredom)\n    boredoms.append(boredom)\n    boredoms.append(boredom)\n\
    \    boredoms.append(boredom)\n    boredoms.append(boredom)\n    boredoms.append(boredom)\n\
    \    boredoms.append(boredom)\n    boredoms.append(boredom)\n    boredoms.append(boredom)\n\
    \    boredoms.append(boredom)\n    boredoms.append(boredom)\n    boredoms.append(boredom)\n\
    \    boredoms.append(boredom)\n    boredoms.append(boredom)\n    boredoms.append(boredom)\n\
    \    boredoms.append(boredom)\n    boredoms.append(boredom)\n    boredoms.append(boredom)\n\
    \    boredoms.append(boredom)\n    boredoms.append(boredom)\n    boredoms.append(boredom)\n\
    \    boredoms.append(boredom)\n    boredoms.append(boredom)\n    boredoms.append(boredom)\n\
    \    boredoms.append(boredom)\n    boredoms.append(boredom)\n    boredoms.append(boredom)\n\
    \    boredoms.append(boredom)\n    boredoms.append(boredom)\n    boredoms.append(boredom)\n\
    \    boredoms.append(boredom)\n    boredoms.append(boredom)\n    boredoms.append(boredom)\n\
    \    boredoms.append(boredom)\n    boredoms.append(boredom)\n    boredoms.append(boredom)\n\
    \    boredoms.append(boredom)\n    boredoms.append(boredom)\n    boredoms.append(boredom)\n\
    \    boredoms.append(boredom)\n    boredoms.append(boredom)\n    boredoms.append(boredom)\n\
    \    boredoms.append(bo\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzocmyy1c.jl:9\nin expression starting at /tmp/tmpzocmyy1c.jl:9\n"
  stdout: ''
  timestamp: 1659747064
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    S = lower(S)\n\
    \    boredoms = 0\n    for w in split(S, \".?!\")\n        if w == \"i\"\n   \
    \         boredoms += 1\n        end\n    end\n    return boredoms\nend\n\"\"\"\
    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_xjp7squ.jl:18\nin expression starting at\
    \ /tmp/tmp_xjp7squ.jl:18\n"
  stdout: ''
  timestamp: 1659747064
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_bored(S)\
    \ == 0 then 1 else 0 end\nend\n            \"\"\"\n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7tj_x2dd.jl:9\nin expression starting at /tmp/tmp7tj_x2dd.jl:9\n"
  stdout: ''
  timestamp: 1659747059
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = Dict()\n    for word in split(S)\n   \
    \     if word == \"I\"\n            boredoms[word] = 1\n        end\n    end\n\
    \    return length(boredoms)\nend\n    \"\"\"\n    \n    boredoms = Dict()\n \
    \   for word in split(S)\n        if word == \"I\"\n            boredoms[word]\
    \ = 1\n        end\n    end\n    return length(boredoms)\nend\n</cell>\n<code\
    \ language=julia-1.4>\n# Test your code\n@test is_bored(\"\"\"\n    I love Julia\n\
    \    I love Python\n    I love R\n    I love Julia\n    I love Julia\n    I love\
    \ Julia\n    I love Julia\n    I love Julia\n    I love Julia\n    I love Julia\n\
    \    I love Julia\n    I love Julia\n    I love Julia\n    I love Julia\n    I\
    \ love Julia\n    I love Julia\n    I love Julia\n    I love Julia\n    I love\
    \ Julia\n    I love Julia\n    I love Julia\n    I love Julia\n    I love Julia\n\
    \    I love Julia\n    I love Julia\n    I love Julia\n    I love Julia\n    I\
    \ love Julia\n    I love Julia\n    I love Julia\n    I love Julia\n    I love\
    \ Julia\n    I love Julia\n    I love Julia\n    I love Julia\n    I love Julia\n\
    \    I love Julia\n    I love Julia\n    I love Julia\n    I love Julia\n    I\
    \ love Julia\n    I love Julia\n    I love Julia\n    I love Julia\n    I love\
    \ Julia\n    I love Julia\n    I love Julia\n    I love Julia\n    I love Julia\n\
    \    I love Julia\n    I love Julia\n    I love Julia\n    I love Julia\n    I\
    \ love Julia\n    I love Julia\n    I love Julia\n    I love Julia\n\nusing Test\n\
    \n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\")\
    \ == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpz3j8i_uo.jl:8 expected\
    \ \"end\", got \"love\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpz3j8i_uo.jl:34\n\
    in expression starting at /tmp/tmpz3j8i_uo.jl:34\n"
  stdout: ''
  timestamp: 1659747064
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\
    \ == true\n        return 0\n    \n    boredoms = 0\n    \n    for word in split(S)\n\
    \        if is_bored(word) == true\n            boredoms += 1\n        end\n \
    \   end\n    \n    return boredoms\nend\n\"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbvhmd337.jl:1\nin expression starting at /tmp/tmpbvhmd337.jl:1\n"
  stdout: ''
  timestamp: 1659747064
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\
    \ then return 0\n    \n    boredoms = Dict{String,Int64}()\n    \n    for w in\
    \ split(S) do \n        if w == \"I\" then \n            boredoms[w] = 1 \n  \
    \      else \n            boredoms[w] = 0 \n    end\n    \n    return sum(boredoms.values)\n\
    end\n\"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello\
    \ world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpnuf8el8d.jl:9\nin expression starting at /tmp/tmpnuf8el8d.jl:9\n"
  stdout: ''
  timestamp: 1659747064
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0 \n    \n    boredoms = 0 \n    \n    for w in split(S)\n   \
    \     if w == \"I\"\n            boredoms += 1 \n    \n    return boredoms \n\
    end\n\"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7n1ghq0w.jl:1\nin expression starting at /tmp/tmp7n1ghq0w.jl:1\n"
  stdout: ''
  timestamp: 1659747064
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\
    \ == true \n        return 0 \n    else \n        boredoms = 0 \n        for word\
    \ in split(S) do \n            if word == \"I\" then \n                boredoms\
    \ += 1 \n            end \n        end \n        return boredoms \n    end \n\
    end \n\"\"\"\n</cell>\n<cell>\n# Test your code\ns = \"I\"\nassert is_bored(s)\
    \ == 0\ns = \"Boredom is my favorite partner\"\nassert is_bored(s) == 2\ns = \"\
    I like my best friend's boredom\"\nassert is_bored(s) == 3\ns = \"I like my best\
    \ friend's boredom!\"\nassert is_bored(s) == 3\ns = \"I like my best friend's\
    \ boredom and I love my boredom!\"\nassert is_bored(s) == 4\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of words in a given string.\n\
    using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello\
    \ world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz24bcprk.jl:1\nin expression starting at /tmp/tmpz24bcprk.jl:1\n"
  stdout: ''
  timestamp: 1659747064
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    S = lower(S)\n\
    \    boredoms = 0\n    for w in words(S)\n        if w == \"i\"\n            boredoms\
    \ += 1\n        end\n    end\n    return boredoms\nend\n    \"\"\"\n    boredoms\
    \ = 0\n    for w in words(S)\n        if w == \"i\"\n            boredoms += 1\n\
    \        end\n    end\n    return boredoms\nend\n</cell>\n<code language=julia-1.5>\n\
    @time boredoms(\"\"\"\n    You'll be given a string of words, and your task is\
    \ to count the number\n    of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For\
    \ example:\n            \"\"\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\")\
    \ == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: extra token \"be\" after end of expression\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpd4f8m7tm.jl:30\nin expression\
    \ starting at /tmp/tmpd4f8m7tm.jl:30\n"
  stdout: ''
  timestamp: 1659747064
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = findall(S, \"I\")\n    \n    return length(boredoms)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyx2tcbgd.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyx2tcbgd.jl:1\n\
    in expression starting at /tmp/tmpyx2tcbgd.jl:1\n"
  stdout: ''
  timestamp: 1659747062
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = 0\n    \n    for w in split(S)\n     \
    \   if w == \"I\"\n            boredoms += 1\n        end\n    end\n    \n   \
    \ return boredoms\nend\n\"\"\"\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplrr17n96.jl:1\nin expression starting at /tmp/tmplrr17n96.jl:1\n"
  stdout: ''
  timestamp: 1659747064
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = Dict{String,Int64}()\n    \n    for word\
    \ in split(S)\n        if is_bored(word)\n            boredoms[word] += 1\n  \
    \      end\n    end\n    \n    return length(boredoms)\nend\n    \"\"\"\n    \n\
    \    boredoms = Dict{String,Int64}()\n    \n    for word in split(S)\n       \
    \ if is_bored(word)\n            boredoms[word] += 1\n        end\n    end\n \
    \   \n    return length(boredoms)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt30pzcnx.jl:1\nin expression starting at /tmp/tmpt30pzcnx.jl:1\n"
  stdout: ''
  timestamp: 1659747064
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = Dict{String,Int64}()\n    \n    for word\
    \ in split(S)\n        if word == \"I\"\n            boredoms[word] = 1\n    \
    \    end\n    end\n    \n    return length(boredoms)\nend\n\"\"\"\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn85ndc_d.jl:1\nin expression starting at /tmp/tmpn85ndc_d.jl:1\n"
  stdout: ''
  timestamp: 1659747061
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_bored(S)\
    \ == 0 \n        then return 0 \n        else return 1 \n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\")\
    \ == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3kxqkmh8.jl:10\nin expression starting at /tmp/tmp3kxqkmh8.jl:10\n"
  stdout: ''
  timestamp: 1659747062
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\
    \ then return 0\n    else if starts_with(S, \"I\") then return 1\n    else return\
    \ 0\nend\n            \"\"\"\n    \n    \n    \n    \"\"\"\n    Write a function\
    \ that takes a string and returns the number of words\n    in the string that\
    \ start with the letter 'I'.\n    \"\"\"\n    \n    \n    \n    \"\"\"\n    Write\
    \ a function that takes a string and returns the number of words\n    in the string\
    \ that start with the letter 'I' and are longer than 3 characters.\n    \"\"\"\
    \n    \n    \n    \n    \"\"\"\n    Write a function that takes a string and returns\
    \ the number of words\n    in the string that start with the letter 'I' and are\
    \ longer than 3 characters\n    and are separated by a single space character.\n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    Write a function that takes a string\
    \ and returns the number of words\n    in the string that start with the letter\
    \ 'I' and are longer than 3 characters\n    and are separated by a single space\
    \ character.\n    \"\"\"\n    \n    \n    \n    \"\"\"\n    Write a function that\
    \ takes a string and returns the number of words\n    in the string that start\
    \ with the letter 'I' and are longer than 3 characters\n    and are separated\
    \ by a single space character.\n    \"\"\"\n    \n    \n    \n    \"\"\"\n   \
    \ Write a function that takes a string and returns the number of words\n    in\
    \ the string that start with the letter 'I' and are longer than 3 characters\n\
    \    and are separated by a single space character.\n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    Write a function that takes a string and returns the number\
    \ of words\n    in the string that start with the letter 'I' and are longer than\
    \ 3 characters\n    and are separated by a single space character.\n    \"\"\"\
    \n    \n    \n    \n    \"\"\"\n    Write a function that takes a string and returns\
    \ the number of words\n    in the string that start with the letter 'I' and are\
    \ longer than 3 characters\n    and are separated by a single space character.\n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    Write a function that takes a string\
    \ and returns the number of words\n    in the string that start with the letter\
    \ 'I' and are longer than 3 characters\n    and are separated by a single space\
    \ character.\n    \"\"\"\n    \n    \n    \n    \"\"\"\n    Write a function that\
    \ takes a string and returns the number of words\n    in the string that start\
    \ with the letter 'I' and are longer than 3 characters\n    and are separated\
    \ by a single space character.\n    \"\"\"\n    \n    \n    \n    \"\"\"\n   \
    \ Write a function that takes a string and returns the number of words\n    in\
    \ the string that start with the letter 'I' and are longer than 3 characters\n\
    \    and are separated by a single space character.\n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprme_m232.jl:9\nin expression starting at /tmp/tmprme_m232.jl:9\n"
  stdout: ''
  timestamp: 1659747064
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\
    \ then return 0\n    if S == \"I\" then return 1\n    else if S == \"!\" then\
    \ return 0\n    else if S == \"?\" then return 0\n    else if S == \".\" then\
    \ return 0\n    else return is_bored(S[1..end])\nend\n    \"\"\"\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello\
    \ world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp19lczm5c.jl:9\nin expression starting at /tmp/tmp19lczm5c.jl:9\n"
  stdout: ''
  timestamp: 1659747064
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = findall(S, \"^I\")\n    \n    if is_empty(boredoms)\n\
    \        return 0\n    \n    return length(boredoms)\nend\n    \"\"\"\n    \n\
    \    boredoms = findall(S, \"^I\")\n    \n    if is_empty(boredoms)\n        return\
    \ 0\n    \n    return length(boredoms)\n    \n</cell>\n<code language=julia-1.5>\n\
    @time boredoms = count_boredoms(boredoms_str)\n</cell>\n<code language=julia-1.5>\n\
    @time boredoms = count_boredoms(boredoms_str)\n</cell>\n<text>\nExercise\nWrite\
    \ a function that takes a string and returns the number of words in the string\
    \ that start with capital letters.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfz2mh14f.jl:1\nin expression starting at /tmp/tmpfz2mh14f.jl:1\n"
  stdout: ''
  timestamp: 1659747065
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_bored(S)\
    \ == 0 then 1 else 0 end\nend\n            \"\"\"\n    \n    boredoms = findall(S,\
    \ \"I\")\n    boredoms_count = length(boredoms)\n    return boredoms_count\nend\n\
    </cell>\n<code language=julia-1.5>\n# Test your code\n@code_warntype is_bored(boredoms)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that counts the number of times\
    \ the word \"I\" appears in the sentence \"I love you!\".\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3d8poen8.jl:9\nin expression starting at /tmp/tmp3d8poen8.jl:9\n"
  stdout: ''
  timestamp: 1659747065
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    S = lower(S)\n\
    \    S = replace(S, \".\", \"?\")\n    S = replace(S, \"!\", \"?\")\n    S = replace(S,\
    \ \"?\", \".\")\n    S = replace(S, \"?\", \"!\")\n    S = replace(S, \"!\", \"\
    .\")\n    S = replace(S, \"!\", \"?\")\n    S = replace(S, \".\", \"?\")\n   \
    \ S = replace(S, \"?\", \".\")\n    S = replace(S, \"?\", \"!\")\n    S = replace(S,\
    \ \"!\", \".\")\n    S = replace(S, \"!\", \"?\")\n    S = replace(S, \".\", \"\
    ?\")\n    S = replace(S, \"?\", \".\")\n    S = replace(S, \"?\", \"!\")\n   \
    \ S = replace(S, \"!\", \".\")\n    S = replace(S, \"!\", \"?\")\n    S = replace(S,\
    \ \".\", \"?\")\n    S = replace(S, \"?\", \".\")\n    S = replace(S, \"?\", \"\
    !\")\n    S = replace(S, \"!\", \".\")\n    S = replace(S, \"!\", \"?\")\n   \
    \ S = replace(S, \".\", \"?\")\n    S = replace(S, \"?\", \".\")\n    S = replace(S,\
    \ \"?\", \"!\")\n    S = replace(S, \"!\", \".\")\n    S = replace(S, \"!\", \"\
    ?\")\n    S = replace(S, \".\", \"?\")\n    S = replace(S, \"?\", \".\")\n   \
    \ S = replace(S, \"?\", \"!\")\n    S = replace(S, \"!\", \".\")\n    S = replace(S,\
    \ \"!\", \"?\")\n    S = replace(S, \".\", \"?\")\n    S = replace(S, \"?\", \"\
    .\")\n    S = replace(S, \"?\", \"!\")\n    S = replace(S, \"!\", \".\")\n   \
    \ S = replace(S, \"!\", \"?\")\n    S = replace(S, \".\", \"?\")\n    S = replace(S,\
    \ \"?\", \".\")\n    S = replace(S, \"?\", \"!\")\n    S = replace(S, \"!\", \"\
    .\")\n    S = replace(S, \"!\", \"?\")\n    S = replace(S, \".\", \"?\")\n   \
    \ S = replace(S, \"?\", \".\")\n    S = replace(S, \"?\", \"!\")\n    S = replace(S,\
    \ \"!\", \".\")\n    S = replace(S, \"!\", \"?\")\n    S = replace(S, \".\", \"\
    ?\")\n    S = replace(S, \"?\", \".\")\n    S = replace(S, \"?\", \"!\")\n   \
    \ S = replace(S, \"!\", \".\")\n    S = replace(S, \"!\", \"?\")\n    S = replace(S,\
    \ \".\", \"?\")\n    S = replace(S, \"?\", \".\")\n    S = replace(S, \"?\", \"\
    !\")\n    S = replace(S, \"!\", \".\")\n    S = replace(S, \"!\", \"?\")\n   \
    \ S = replace(\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm_z6ul0p.jl:69\nin expression starting at\
    \ /tmp/tmpm_z6ul0p.jl:69\n"
  stdout: ''
  timestamp: 1659747065
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = findall(S, \"^I\")\n    \n    if is_empty(boredoms)\n\
    \        return 0\n    \n    return length(boredoms)\nend\n    \"\"\"\n    \n\
    \    boredoms = findall(S, \"^I\")\n    \n    if is_empty(boredoms)\n        return\
    \ 0\n    \n    return length(boredoms)\n</cell>\n<code language=julia-1.5>\n@time\
    \ boredoms_count = boredoms_count(boredoms)\n</cell>\n<code language=julia-1.5>\n\
    @time boredoms_count = boredoms_count(boredoms)\n</cell>\n<code language=julia-1.5>\n\
    @time boredoms_count = boredoms_count(boredoms)\n</cell>\n<code language=julia-1.5>\n\
    @time boredoms_count = boredoms_count(boredoms)\n</cell>\n<code language=julia-1.5>\n\
    @time boredoms_count = boredoms_count(boredoms)\n</cell>\n<code language=julia-1.5>\n\
    @time boredoms_count = boredoms_count(boredoms)\n</cell>\n<code language=julia-1.5>\n\
    @time boredoms_count = boredoms_count(boredoms)\n</cell>\n<code language=julia-1.5>\n\
    @time boredoms_count = boredoms_count(boredoms)\n</cell>\n<code language=julia-1.5>\n\
    @time boredoms_count = boredoms_count(boredoms)\n</cell>\n<code language=julia-1.5>\n\
    @time boredoms_count = boredoms_count(boredoms)\n</cell>\n<code language=julia-1.5>\n\
    @time boredoms_count = boredoms_count(boredoms)\n</cell>\n<code language=julia-1.5>\n\
    @time boredoms_count = boredoms_count(boredoms)\n</cell>\n<code language=julia-1.5>\n\
    @time boredoms_count = boredoms_count(boredoms)\n</cell>\n<code language=julia-1.5>\n\
    @time boredoms_count = boredoms_count(boredoms)\n</cell>\n<code language=julia-1.5>\n\
    @time boredoms_count = boredoms_count(boredoms)\n</cell>\n<code language=julia-1.5>\n\
    @time boredoms_count = boredoms_count(boredoms)\n</cell\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmzd0bdnx.jl:1\nin expression starting at /tmp/tmpmzd0bdnx.jl:1\n"
  stdout: ''
  timestamp: 1659747065
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    I::Int64 = 0\n    \n    for w in split(S)\n     \
    \   if w == \"I\"\n            I += 1\n        end\n    end\n    \n    return\
    \ I\nend\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0qwl309w.jl:1\nin expression starting at /tmp/tmp0qwl309w.jl:1\n"
  stdout: ''
  timestamp: 1659747065
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = Dict{String,Int64}()\n    \n    for word\
    \ in split(S)\n        if word==\"I\"\n            boredoms[word] = get(boredoms,\
    \ word, 0) + 1\n        end\n    end\n    \n    return length(boredoms)\nend\n\
    \    \"\"\"\n    \n    boredoms = Dict{String,Int64}()\n    \n    for word in\
    \ split(S)\n        if word==\"I\"\n            boredoms[word] = get(boredoms,\
    \ word, 0) + 1\n        end\n    end\n    \n    return length(boredoms)\nend\n\
    </cell>\n<code language=julia-1.5>\nis_bored(\"\"\"\n    I love Julia\n    Julia\
    \ is awesome\n    Julia is awesome\n    Julia is awesome\n    Julia is awesome\n\
    \    Julia is awesome\n    Julia is awesome\n    Julia is awesome\n    Julia is\
    \ awesome\n    Julia is awesome\n    Julia is awesome\n    Julia is awesome\n\
    \    Julia is awesome\n    Julia is awesome\n    Julia is awesome\n    Julia is\
    \ awesome\n    Julia is awesome\n    Julia is awesome\n    Julia is awesome\n\
    \    Julia is awesome\n    Julia is awesome\n    Julia is awesome\n    Julia is\
    \ awesome\n    Julia is awesome\n    Julia is awesome\n    Julia is awesome\n\
    \    Julia is awesome\n    Julia is awesome\n    Julia is awesome\n    Julia is\
    \ awesome\n    Julia is awesome\n    Julia is awesome\n    Julia is awesome\n\
    \    Julia is awesome\n    Julia is awesome\n    Julia is awesome\n    Julia is\
    \ awesome\n    Julia is awesome\n    Julia is awesome\n    Julia is awesome\n\
    \    Julia is awesome\n    Julia is awesome\n    Julia is awesome\n    Julia is\
    \ awesome\n    Julia is awesome\n    Julia is awesome\n    Julia is awesome\n\
    \    Julia is awesome\n    Julia is awesome\n    Julia is awesome\n    Julia is\
    \ awesome\n    Julia is awesome\n    Julia is awesome\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp1b018vhi.jl:8 expected\
    \ \"end\", got \"love\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1b018vhi.jl:37\n\
    in expression starting at /tmp/tmp1b018vhi.jl:37\n"
  stdout: ''
  timestamp: 1659747066
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = Dict{String,Int64}()\n    \n    for word\
    \ in split(S)\n        if word==\"I\"\n            boredoms[word] = boredoms[word]+1\n\
    \        end\n    end\n    \n    return length(boredoms)\nend\n\"\"\"\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc9xkgwcg.jl:1\nin expression starting at /tmp/tmpc9xkgwcg.jl:1\n"
  stdout: ''
  timestamp: 1659747065
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = Dict()\n    \n    for w in split(S)\n\
    \        if is_bored(w)\n            boredoms[w] = get(boredoms, w, 0) + 1\n \
    \       end\n    end\n    \n    return length(boredoms)\nend\n\"\"\"\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t\
    @test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiqb_3adi.jl:1\nin expression starting at /tmp/tmpiqb_3adi.jl:1\n"
  stdout: ''
  timestamp: 1659747061
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = Dict{String,Int64}()\n    \n    for w\
    \ in split(S)\n        if w == \"I\"\n            boredoms[w] = get(boredoms,\
    \ w, 0) + 1\n        end\n    end\n    \n    return length(boredoms)\nend\n\"\"\
    \"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoxo5dc9w.jl:1\nin expression starting at /tmp/tmpoxo5dc9w.jl:1\n"
  stdout: ''
  timestamp: 1659747065
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_bored(S)\
    \ == 0 then 1 else 0 end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpoa44ww7v.jl:9\nin expression starting at /tmp/tmpoa44ww7v.jl:9\n"
  stdout: ''
  timestamp: 1659747061
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    S = lower(S)\n\
    \    S = replace(S, \".\", \"\")\n    S = replace(S, \"?\", \"\")\n    S = replace(S,\
    \ \"!\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"i\", \"\"\
    )\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"i\", \"\")\n    S = replace(S,\
    \ \"I\", \"\")\n    S = replace(S, \"i\", \"\")\n    S = replace(S, \"I\", \"\"\
    )\n    S = replace(S, \"i\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S,\
    \ \"i\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"i\", \"\"\
    )\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"i\", \"\")\n    S = replace(S,\
    \ \"I\", \"\")\n    S = replace(S, \"i\", \"\")\n    S = replace(S, \"I\", \"\"\
    )\n    S = replace(S, \"i\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S,\
    \ \"i\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"i\", \"\"\
    )\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"i\", \"\")\n    S = replace(S,\
    \ \"I\", \"\")\n    S = replace(S, \"i\", \"\")\n    S = replace(S, \"I\", \"\"\
    )\n    S = replace(S, \"i\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S,\
    \ \"i\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"i\", \"\"\
    )\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"i\", \"\")\n    S = replace(S,\
    \ \"I\", \"\")\n    S = replace(S, \"i\", \"\")\n    S = replace(S, \"I\", \"\"\
    )\n    S = replace(S, \"i\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S,\
    \ \"i\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"i\", \"\"\
    )\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"i\", \"\")\n    S = replace(S,\
    \ \"I\", \"\")\n    S = replace(S, \"i\", \"\")\n    S = replace(S, \"I\", \"\"\
    )\n    S = replace(S, \"i\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S,\
    \ \"i\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"i\", \"\"\
    )\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"i\", \"\")\n    S = replace(S,\
    \ \"I\", \"\")\n    S = replace(S, \"i\", \"\")\n    S = replace(S, \"I\", \"\"\
    )\n    S = replace(S, \"i\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S,\
    \ \"i\", \"\")\n    S = replace(\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is\
    \ the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpim9xm90k.jl:76\nin expression starting at\
    \ /tmp/tmpim9xm90k.jl:76\n"
  stdout: ''
  timestamp: 1659747066
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = Dict()\n    for word in split(S)\n   \
    \     if word[1] == 'I'\n            boredoms[word] = 0\n    \n    return length(boredoms)\n\
    end\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9cq906b1.jl:1\nin expression starting at /tmp/tmp9cq906b1.jl:1\n"
  stdout: ''
  timestamp: 1659747065
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = Dict{String,Int64}()\n    for word in\
    \ split(S)\n        if word == \"I\"\n            boredoms[word] = get(boredoms,\
    \ word, 0) + 1\n        end\n    end\n    return get(boredoms, \"I\", 0)\nend\n\
    \    \"\"\"\n    \n    boredoms = Dict{String,Int64}()\n    for word in split(S)\n\
    \        if word == \"I\"\n            boredoms[word] = get(boredoms, word, 0)\
    \ + 1\n        end\n    end\n    return get(boredoms, \"I\", 0)\nend\n</cell>\n\
    <code language=julia-1.5>\n@time boredoms(\"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\")\n</cell>\n<code\
    \ language=julia-1.5>\n@time boredoms(\"\"\"\n    You'll be given a string of\
    \ words, and your task is to count the number\n    of boredoms. A boredom is a\
    \ sentence that starts with the word \"I\".\n    Sentences are delimited by '.',\
    \ '?' or '!'.\n   \n    For example:\n            \"\"\")\n</cell>\n<code language=julia-1.5>\n\
    @time boredoms(\"\"\"\n    You'll be given a string of words, and your task is\
    \ to count the number\n    of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For\
    \ example:\n            \"\"\")\n</cell>\n<code language=julia-1.5>\n@time boredoms(\"\
    \"\"\n    You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n     \
    \       \"\"\")\n</cell>\n<code language=julia-1.5>\n@time boredoms(\"\"\"\n \
    \   You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n     \
    \       \"\"\")\n</cell>\n<code language=julia-1.5>\n@time bo\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp0z2kaysd.jl:8 expected\
    \ \"end\", got \"be\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0z2kaysd.jl:33\n\
    in expression starting at /tmp/tmp0z2kaysd.jl:33\n"
  stdout: ''
  timestamp: 1659747065
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0 \n    \n    I = find(S, 'I')\n    if I < 1\n        return 0\n\
    \    \n    boredoms = 0 \n    \n    for i = I + 1 : length(S)\n        if S[i]\
    \ == '.'\n            boredoms += 1\n        \n    return boredoms\nend\n    \"\
    \"\"\n    \n    boredoms = 0\n    \n    for word in words:\n        if word.startswith('I'):\n\
    \            boredoms += 1\n    \n    return boredoms\n</cell>\n<cell>\n# Test\
    \ your code\nboredom = is_bored(boredom_sentence)\nprint(boredom)\n</cell>\n<text>\n\
    Expected output\n2\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t\
    @test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoc1y9beb.jl:1\nin expression starting at /tmp/tmpoc1y9beb.jl:1\n"
  stdout: ''
  timestamp: 1659747066
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\
    \ then return 0\n    if S == \"I\" then return 1\n    if is_bored(S[1:end-1])\
    \ then return 1 + is_bored(S[1:end-1])\n    if is_bored(S[2:end]) then return\
    \ 1 + is_bored(S[2:end])\n    if is_bored(S[2:end-1]) then return 1 + is_bored(S[2:end-1])\n\
    \    if is_bored(S[3:end]) then return 1 + is_bored(S[3:end])\n    if is_bored(S[4:end])\
    \ then return 1 + is_bored(S[4:end])\n    if is_bored(S[2:end-1]) then return\
    \ 1 + is_bored(S[2:end-1])\n    if is_bored(S[3:end-1]) then return 1 + is_bored(S[3:end-1])\n\
    \    if is_bored(S[4:end-1]) then return 1 + is_bored(S[4:end-1])\n    if is_bored(S[2:end])\
    \ then return 1 + is_bored(S[2:end])\n    if is_bored(S[3:end]) then return 1\
    \ + is_bored(S[3:end])\n    if is_bored(S[4:end]) then return 1 + is_bored(S[4:end])\n\
    \    if is_bored(S[2:end-1]) then return 1 + is_bored(S[2:end-1])\n    if is_bored(S[3:end-1])\
    \ then return 1 + is_bored(S[3:end-1])\n    if is_bored(S[4:end-1]) then return\
    \ 1 + is_bored(S[4:end-1])\n    if is_bored(S[2:end]) then return 1 + is_bored(S[2:end])\n\
    \    if is_bored(S[3:end]) then return 1 + is_bored(S[3:end])\n    if is_bored(S[4:end])\
    \ then return 1 + is_bored(S[4:end])\n    if is_bored(S[2:end-1]) then return\
    \ 1 + is_bored(S[2:end-1])\n    if is_bored(S[3:end-1]) then return 1 + is_bored(S[3:end-1])\n\
    \    if is_bored(S[4:end-1]) then return 1 + is_bored(S[4:end-1])\n    if is_bored(S[2:end])\
    \ then return 1 + is_bored(S[2:end])\n    if is_bored(S[3:end]) then return 1\
    \ + is_bored(S[3:end])\n    if is_bored(S[4:end]) then return 1 + is_bored(S[4\n\
    using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello\
    \ world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpp_hl2t_j.jl:9\nin expression starting at /tmp/tmpp_hl2t_j.jl:9\n"
  stdout: ''
  timestamp: 1659747066
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = Dict{String,Int64}()\n    \n    for word\
    \ in split(S)\n        if word==\"I\"\n            boredoms[word] = get(boredoms,\
    \ word, 0) + 1\n        end\n    end\n    \n    return get(boredoms, \"I\", 0)\n\
    end\n\"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo39mqvdq.jl:1\nin expression starting at /tmp/tmpo39mqvdq.jl:1\n"
  stdout: ''
  timestamp: 1659747066
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_bored(S)\
    \ == 0 \n        then return 1 \n        else return 0 \n    end \nend \n\"\"\"\
    \n    \n    \n    \"\"\"\n    Write a function that takes a string and returns\
    \ the number of words\n    in the string that start with the letter 'I'.\n   \
    \ \n    For example:\n    \n    ```julia\n    julia> count_boredom(\"I like Ice\
    \ cream.\")\n    2\n    ```\n    \"\"\"\n    \n    \n    \"\"\"\n    Write a function\
    \ that takes a string and returns the number of words\n    in the string that\
    \ start with the letter 'I'.\n    \n    For example:\n    \n    ```julia\n   \
    \ julia> count_boredom(\"I like Ice cream.\")\n    2\n    ```\n    \"\"\"\n  \
    \  \n    \n    \"\"\"\n    Write a function that takes a string and returns the\
    \ number of words\n    in the string that start with the letter 'I'.\n    \n \
    \   For example:\n    \n    ```julia\n    julia> count_boredom(\"I like Ice cream.\"\
    )\n    2\n    ```\n    \"\"\"\n    \n    \n    \"\"\"\n    Write a function that\
    \ takes a string and returns the number of words\n    in the string that start\
    \ with the letter 'I'.\n    \n    For example:\n    \n    ```julia\n    julia>\
    \ count_boredom(\"I like Ice cream.\")\n    2\n    ```\n    \"\"\"\n    \n   \
    \ \n    \"\"\"\n    Write a function that takes a string and returns the number\
    \ of words\n    in the string that start with the letter 'I'.\n    \n    For example:\n\
    \    \n    ```julia\n    julia> count_boredom(\"I like Ice cream.\")\n    2\n\
    \    ```\n    \"\"\"\n    \n    \n    \"\"\"\n    Write a function that takes\
    \ a string and returns the number of words\n    in the string that start with\
    \ the letter 'I'.\n    \n    For example:\n    \n    ```julia\n    julia> count_boredom(\"\
    I like Ice cream.\")\n    2\n    ```\n    \"\"\"\n    \n    \n    \"\"\"\n   \
    \ Write a function that takes a string and returns the number of words\n    in\
    \ the string that start with the letter 'I'.\n    \n    For example:\n    \n \
    \   ```julia\n    julia> count_boredom(\"I like Ice cream.\")\n    2\n    ```\n\
    \    \"\"\"\n    \n    \n    \"\"\"\n    Write a function that takes a string\
    \ and returns the number of words\n    in the string that start with the letter\
    \ 'I'.\n    \n    For example:\n    \n    ```julia\n\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpz4sfcvsa.jl:10\nin expression starting at /tmp/tmpz4sfcvsa.jl:10\n"
  stdout: ''
  timestamp: 1659747066
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\
    \ then return 0\n    \n    boredoms = 0\n    \n    for w in split(S) do \n   \
    \     if w == \"I\" then boredoms += 1\n    end\n    \n    return boredoms\nend\n\
    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9qehrwbq.jl:9\nin expression starting at /tmp/tmp9qehrwbq.jl:9\n"
  stdout: ''
  timestamp: 1659747066
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\
    \ then return 0\n    else if starts_with(S,\"I\") then return 1\n    else return\
    \ 0\nend\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nusing Test\n\
    \n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\")\
    \ == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpov692m8t.jl:9\nin expression starting at /tmp/tmpov692m8t.jl:9\n"
  stdout: ''
  timestamp: 1659747066
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0;\n    \n    boredoms = findall(S,\"I\");\n    \n    return length(boredoms);\n\
    end\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv6hpiihl.jl:1\nin expression starting at /tmp/tmpv6hpiihl.jl:1\n"
  stdout: ''
  timestamp: 1659747066
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_bored(S)\
    \ == 0 then 1 else 0 end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpoa44ww7v.jl:9\nin expression starting at /tmp/tmpoa44ww7v.jl:9\n"
  stdout: ''
  timestamp: 1659747061
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\
    \ == true \n        return 0 \n    else \n        boredoms = 0 \n        for w\
    \ in S \n            if w == \"I\" \n                boredoms += 1 \n        return\
    \ boredoms \nend \n\"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6d_8qck0.jl:1\nin expression starting at /tmp/tmp6d_8qck0.jl:1\n"
  stdout: ''
  timestamp: 1659747066
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\
    \ \n        0\n    else\n        length(filter(x -> x == 'I', S)) \n    end\n\
    end\n            \n            \n            \n            \n            \n  \
    \          \n            \n            \n            \n            \n        \
    \    \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp5dn1iwth.jl:261

    '
  stdout: "test set: Error During Test at /tmp/tmp5dn1iwth.jl:264\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world\") == 0\n  UndefVarError: is_empty not\
    \ defined\n  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmp5dn1iwth.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5dn1iwth.jl:264 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5dn1iwth.jl:263\ntest set:\
    \ Error During Test at /tmp/tmp5dn1iwth.jl:265\n  Test threw exception\n  Expression:\
    \ candidate(\"Is the sky blue?\") == 0\n  UndefVarError: is_empty not defined\n\
    \  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmp5dn1iwth.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5dn1iwth.jl:265 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5dn1iwth.jl:263\ntest set:\
    \ Error During Test at /tmp/tmp5dn1iwth.jl:266\n  Test threw exception\n  Expression:\
    \ candidate(\"I love It !\") == 1\n  UndefVarError: is_empty not defined\n  Stacktrace:\n\
    \   [1] is_bored(S::String)\n     @ Main /tmp/tmp5dn1iwth.jl:9\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5dn1iwth.jl:266 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5dn1iwth.jl:263\ntest set:\
    \ Error During Test at /tmp/tmp5dn1iwth.jl:267\n  Test threw exception\n  Expression:\
    \ candidate(\"bIt\") == 0\n  UndefVarError: is_empty not defined\n  Stacktrace:\n\
    \   [1] is_bored(S::String)\n     @ Main /tmp/tmp5dn1iwth.jl:9\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib"
  timestamp: 1659747067
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_bored(S)\
    \ == 0 \n        return 0 \n    else \n        return 1 \n    end \nend \n\"\"\
    \"\n    \n    \n    \"\"\"\n    You'll be given a string of words, and your task\
    \ is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n            \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: extra token \"be\" after end of expression\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7toyuqv.jl:19\nin expression\
    \ starting at /tmp/tmpu7toyuqv.jl:19\n"
  stdout: ''
  timestamp: 1659747066
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_bored(S)\
    \ == 1 then 1 else 0 end\nend\n            \"\"\"\n    \n    boredoms = findall(S,\
    \ \"I.*\")\n    boredoms = length(boredoms)\n    \n    return boredoms\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjkxiq5g0.jl:9\nin expression starting at /tmp/tmpjkxiq5g0.jl:9\n"
  stdout: ''
  timestamp: 1659747066
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = findall(S, \"^I\")\n    \n    if is_empty(boredoms)\n\
    \        return 0\n    \n    return length(boredoms)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2u0umsrg.jl:1\nin expression starting at /tmp/tmp2u0umsrg.jl:1\n"
  stdout: ''
  timestamp: 1659747066
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_bored(S)\
    \ == 0 then 1 else 0 end\nend\n            \"\"\"\n    \n    \n    \"\"\"\n  \
    \  Write a function that takes a string and returns the number of boredoms \n\
    \    in the string.\n    \"\"\"\n    \n    \n    \n    \"\"\"\n    Write a function\
    \ that takes a string and returns the number of boredoms \n    in the string.\n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    Write a function that takes a string\
    \ and returns the number of boredoms \n    in the string.\n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    Write a function that takes a string and returns\
    \ the number of boredoms \n    in the string.\n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    Write a function that takes a string and returns the number of\
    \ boredoms \n    in the string.\n    \"\"\"\n    \n    \n    \n    \"\"\"\n  \
    \  Write a function that takes a string and returns the number of boredoms \n\
    \    in the string.\n    \"\"\"\n    \n    \n    \n    \"\"\"\n    Write a function\
    \ that takes a string and returns the number of boredoms \n    in the string.\n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    Write a function that takes a string\
    \ and returns the number of boredoms \n    in the string.\n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    Write a function that takes a string and returns\
    \ the number of boredoms \n    in the string.\n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    Write a function that takes a string and returns the number of\
    \ boredoms \n    in the string.\n    \"\"\"\n    \n    \n    \n    \"\"\"\n  \
    \  Write a function that takes a string and returns the number of boredoms \n\
    \    in the string.\n    \"\"\"\n    \n    \n    \n    \"\"\"\n    Write a function\
    \ that takes a string and returns the number of boredoms \n    in the string.\n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    Write a function that takes a string\
    \ and returns the number of boredoms \n    in the string.\n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    Write a function that takes a string and returns\
    \ the number of boredoms \n    in the string.\n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    Write a function that takes a string and returns the number of\
    \ boredoms \n    in the string.\n    \"\"\"\n    \n    \n    \n    \"\"\"\n  \
    \  Write a function that takes a string and returns the number of boredoms \n\
    \    in the string.\n    \"\"\"\n    \n    \n    \n    \"\"\"\n    Write a function\
    \ that takes a string and returns the number of boredoms \n    in the string.\n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    Write a function that takes a string\
    \ and returns the number of boredoms \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpimf59pzw.jl:9\nin expression starting at /tmp/tmpimf59pzw.jl:9\n"
  stdout: ''
  timestamp: 1659747067
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = findall(S, \"^I.*\")\n    if is_empty(boredoms)\n\
    \        return 0\n    \n    return length(boredoms)\nend\n    \"\"\"\n    \n\
    \    boredoms = findall(S, \"^I.*\")\n    if is_empty(boredoms): return 0\n  \
    \  \n    return length(boredoms)\n</cell>\n<code language=julia-1.5>\n@time boredoms(boredom_sentence)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of words in the string that start with the letter 'e'.\nusing Test\n\
    \n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\")\
    \ == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbv31m_yu.jl:1\nin expression starting at /tmp/tmpbv31m_yu.jl:1\n"
  stdout: ''
  timestamp: 1659747067
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    S = lower(S)\n\
    \    boredoms = 0\n    for w in S\n        if w == \"i\"\n            boredoms\
    \ += 1\n        end\n    end\n    return boredoms\nend\nis_bored(\"\"\"\n    I\
    \ love Julia!\n    Julia is my favorite language!\n    Julia is my favorite language!\n\
    \    Julia is my favorite language!\n    Julia is my favorite language!\n    Julia\
    \ is my favorite language!\n    Julia is my favorite language!\n    Julia is my\
    \ favorite language!\n    Julia is my favorite language!\n    Julia is my favorite\
    \ language!\n    Julia is my favorite language!\n    Julia is my favorite language!\n\
    \    Julia is my favorite language!\n    Julia is my favorite language!\n    Julia\
    \ is my favorite language!\n    Julia is my favorite language!\n    Julia is my\
    \ favorite language!\n    Julia is my favorite language!\n    Julia is my favorite\
    \ language!\n    Julia is my favorite language!\n    Julia is my favorite language!\n\
    \    Julia is my favorite language!\n    Julia is my favorite language!\n    Julia\
    \ is my favorite language!\n    Julia is my favorite language!\n    Julia is my\
    \ favorite language!\n    Julia is my favorite language!\n    Julia is my favorite\
    \ language!\n    Julia is my favorite language!\n    Julia is my favorite language!\n\
    \    Julia is my favorite language!\n    Julia is my favorite language!\n    Julia\
    \ is my favorite language!\n    Julia is my favorite language!\n    Julia is my\
    \ favorite language!\n    Julia is my favorite language!\n    Julia is my favorite\
    \ language!\n    Julia is my favorite language!\n    Julia is my favorite language!\n\
    \    Julia is my favorite language!\n    Julia is my favorite language!\n    Julia\
    \ is my favorite language!\n    Julia is my favorite language!\n    Julia is my\
    \ favorite language!\n    Julia is my favorite language!\n    Julia is my favorite\
    \ language!\n    Julia is my favorite language!\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp979_yyt2.jl:18\nin expression starting at\
    \ /tmp/tmp979_yyt2.jl:18\n"
  stdout: ''
  timestamp: 1659747067
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    \n    S = lower(S)\n\
    \    \n    boredoms = findall(S, \"^I.*\")\n    \n    return length(boredoms)\n\
    end\n    \"\"\"\n    boredoms = findall(S, \"^I.*\")\n    return length(boredoms)\n\
    </cell>\n<code language=julia-1.5>\n@time boredom_count = is_bored(boredoms)\n\
    </cell>\n<text>\nExercise: Write a function that counts the number of \"I\"s in\
    \ a string.\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqlj_59vv.jl:16\nin expression starting at\
    \ /tmp/tmpqlj_59vv.jl:16\n"
  stdout: ''
  timestamp: 1659747067
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_bored(S)\
    \ == 1 then 1 else 0 end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpsvevnxdf.jl:9\nin expression starting at /tmp/tmpsvevnxdf.jl:9\n"
  stdout: ''
  timestamp: 1659747067
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_bored(S)\
    \ == 0 then 1 else 0 end\nend\n            \nusing Test\n\n@testset begin\n\n\
    candidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpg4ym1r59.jl:9\nin expression starting at /tmp/tmpg4ym1r59.jl:9\n"
  stdout: ''
  timestamp: 1659747059
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = findall(S, \"^I.*\")\n    \n    return\
    \ length(boredoms)\nend\n    \"\"\"\n    \n    boredoms = findall(S, \"^I.*\"\
    )\n    \n    return length(boredoms)\n    \n</cell>\n<code language=julia-1.5>\n\
    @time boredom_count = is_bored(boredoms)\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes a string and returns the number of words in the string.\n\
    using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello\
    \ world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmput7xcbb1.jl:1\nin expression starting at /tmp/tmput7xcbb1.jl:1\n"
  stdout: ''
  timestamp: 1659747067
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\
    \ == true\n        return 0\n    else \n        boredoms = 0\n        for word\
    \ in split(S)\n            if word == \"I\"\n                boredoms += 1\n \
    \       return boredoms\nend\n            \"\"\"\n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptha_ww0c.jl:1\nin expression starting at /tmp/tmptha_ww0c.jl:1\n"
  stdout: ''
  timestamp: 1659747067
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    S = lower(S)\n\
    \    boredoms = 0\n    for w in split(S, '.', '?', '!')\n        if w == \"i\"\
    \n            boredoms += 1\n        end\n    end\n    return boredoms\nend\n\
    \            \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4qmh2u65.jl:18\nin expression starting at\
    \ /tmp/tmp4qmh2u65.jl:18\n"
  stdout: ''
  timestamp: 1659747067
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    S = lower(S)\n\
    \    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S\
    \ = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n\
    \    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S\
    \ = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n\
    \    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S\
    \ = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n\
    \    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S\
    \ = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n\
    \    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S\
    \ = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n\
    \    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S\
    \ = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n\
    \    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S\
    \ = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n\
    \    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S\
    \ = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n\
    \    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S\
    \ = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n\
    \    S = strip(S)\n    S = strip(S)\n    S = strip(S)\n    S = strip\nusing Test\n\
    \n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\")\
    \ == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0u4hh7w_.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0u4hh7w_.jl:1\n\
    in expression starting at /tmp/tmp0u4hh7w_.jl:1\n"
  stdout: ''
  timestamp: 1659747067
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    \n    boredoms\
    \ = 0\n    \n    for word in S\n        if word[0] == \"I\"\n            boredoms\
    \ += 1\n    end\n    return boredoms\nend\n            \"\"\"\n    \n    boredoms\
    \ = 0\n    \n    for word in S\n        if word[0] == \"I\"\n            boredoms\
    \ += 1\n    end\n    return boredoms\nend\n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyvpskhn2.jl:1\nin expression starting at /tmp/tmpyvpskhn2.jl:1\n"
  stdout: ''
  timestamp: 1659747067
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = Dict{String,Int64}()\n    \n    for w\
    \ in split(S)\n        if w == \"I\"\n            boredoms[w] = 1\n        end\n\
    \    end\n    \n    return length(boredoms)\nend\n    \"\"\"\n    \n    boredoms\
    \ = Dict{String,Int64}()\n    \n    for w in split(S)\n        if w == \"I\"\n\
    \            boredoms[w] = 1\n        end\n    end\n    \n    return length(boredoms)\n\
    end\n</cell>\n<code language=julia-1.5>\n@time is_bored(\"\"\"\n    You'll be\
    \ given a string of words, and your task is to count the number\n    of boredoms.\
    \ A boredom is a sentence that starts with the word \"I\".\n    Sentences are\
    \ delimited by '.', '?' or '!'.\n   \n    For example:\n            \"\"\")\n\
    </cell>\n<code language=julia-1.5>\n@time is_bored(\"\"\"\n    You'll be given\
    \ a string of words, and your task is to count the number\n    of boredoms. A\
    \ boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited\
    \ by '.', '?' or '!'.\n   \n    For example:\n            \"\"\")\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_bored(\"\"\"\n    You'll be given a string of\
    \ words, and your task is to count the number\n    of boredoms. A boredom is a\
    \ sentence that starts with the word \"I\".\n    Sentences are delimited by '.',\
    \ '?' or '!'.\n   \n    For example:\n            \"\"\")\n</cell>\n<code language=julia-1.5>\n\
    @time is_bored(\"\"\"\n    You'll be given a string of words, and your task is\
    \ to count the number\n    of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For\
    \ example:\n            \"\"\")\n</cell>\n<code language=julia-1.5>\n@time is_bored(\"\
    \"\"\n    You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n     \
    \       \"\"\")\n</cell>\n<code language=julia-1.5>\n@time is_bored(\"\"\"\n \
    \   You'll be given a string of words, and \nusing Test\n\n@testset begin\n\n\
    candidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpp0y6h5ci.jl:8 expected\
    \ \"end\", got \"be\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp0y6h5ci.jl:37\n\
    in expression starting at /tmp/tmpp0y6h5ci.jl:37\n"
  stdout: ''
  timestamp: 1659747067
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_bored(S)\
    \ == 0 \n        return 0 \n    else \n        return 1 \nend\n            \"\"\
    \"\n    \n    \n    \"\"\"\n    Write a function that takes a string and returns\
    \ the number of boredoms.\n    \"\"\"\n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp80yanw6b.jl:8 expected\
    \ \"end\", got \"a\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp80yanw6b.jl:18\n\
    in expression starting at /tmp/tmp80yanw6b.jl:18\n"
  stdout: ''
  timestamp: 1659747067
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_bored(S)\
    \ == 0 then 1 else 0 end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpoa44ww7v.jl:9\nin expression starting at /tmp/tmpoa44ww7v.jl:9\n"
  stdout: ''
  timestamp: 1659747061
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = Dict{String,Int64}()\n    for word in\
    \ split(S)\n        if word[1] == 'I'\n            boredoms[word] = 0\n      \
    \  end\n    end\n    return length(boredoms)\nend\n\"\"\"\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph9i2lcx4.jl:1\nin expression starting at /tmp/tmph9i2lcx4.jl:1\n"
  stdout: ''
  timestamp: 1659747067
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\
    \ then return 0\n    else if S == \"I\" then return 1\n    else if S == \"?\"\
    \ then return 1\n    else if S == \"!\" then return 1\n    else return 0\nend\n\
    \            \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmph61c3ewn.jl:9\nin expression starting at /tmp/tmph61c3ewn.jl:9\n"
  stdout: ''
  timestamp: 1659747067
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    I = find(S, \"I\")\n    if I < 0\n        return\
    \ 0\n    \n    boredoms = 0\n    \n    for i = I + 1 to length(S)\n        if\
    \ S[i] == '.'\n            boredoms += 1\n        \n    return boredoms\nend\n\
    \    \"\"\"\n    \n    boredoms = 0\n    \n    for word in words:\n        if\
    \ word == \"I\":\n            boredoms += 1\n        \n    return boredoms\n</cell>\n\
    <text>\nLet's test our function\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpri_n9fw_.jl:18 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpri_n9fw_.jl:18\n\
    in expression starting at /tmp/tmpri_n9fw_.jl:18\n"
  stdout: ''
  timestamp: 1659747067
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = Dict{String,Int64}()\n    \n    for w\
    \ in split(S)\n        if w == \"I\"\n            boredoms[w] = 1\n        end\n\
    \    end\n    \n    return length(boredoms)\nend\n\"\"\"\n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsdrj45vh.jl:1\nin expression starting at /tmp/tmpsdrj45vh.jl:1\n"
  stdout: ''
  timestamp: 1659747059
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = Dict{String,Int64}()\n    for word in\
    \ split(S)\n        if word == \"I\"\n            boredoms[word] = 1\n       \
    \ end\n    end\n    return length(boredoms)\nend\nis_bored(\"I like Ice.\")\n\
    is_bored(\"I like ice.\")\nis_bored(\"I like ice.I\")\nis_bored(\"I like ice.I.\"\
    )\nis_bored(\"I like ice.I!\") # returns 1\nis_bored(\"I like ice.I!I\") # returns\
    \ 2\nis_bored(\"I like ice.I!I.\")\nis_bored(\"I like ice.I!I!\") # returns 3\n\
    is_bored(\"I like ice.I!I!I.\")\nis_bored(\"I like ice.I!I!I!I\") # returns 4\n\
    is_bored(\"I like ice.I!I!I!I.\")\nis_bored(\"I like ice.I!I!I!I!\") # returns\
    \ 5\nis_bored(\"I like ice.I!I!I!I!I\") # returns 6\nis_bored(\"I like ice.I!I!I!I!I!\"\
    ) # returns 7\nis_bored(\"I like ice.I!I!I!I!I!I\") # returns 8\nis_bored(\"I\
    \ like ice.I!I!I!I!I!I!\") # returns 9\nis_bored(\"I like ice.I!I!I!I!I!I!I\"\
    ) # returns 10\nis_bored(\"I like ice.I!I!I!I!I!I!I!\") # returns 11\nis_bored(\"\
    I like ice.I!I!I!I!I!I!I!I\") # returns 12\nis_bored(\"I like ice.I!I!I!I!I!I!I!I!\"\
    ) # returns 13\nis_bored(\"I like ice.I!I!I!I!I!I!I!I!I\") # returns 14\nis_bored(\"\
    I like ice.I!I!I!I!I!I!I!I!I!\") # returns 15\nis_bored(\"I like ice.I!I!I!I!I!I\n\
    using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello\
    \ world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpng8sd6_7.jl:48\nin expression starting at\
    \ /tmp/tmpng8sd6_7.jl:48\n"
  stdout: ''
  timestamp: 1659747067
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    \n    S = lower(S)\n\
    \    \n    count = 0\n    \n    for w in S:\n        if w == \"i\":\n        \
    \    count += 1\n            \n    return count\n\"\"\"\n    \n    S = lower(S)\n\
    \    \n    count = 0\n    \n    for w in S:\n        if w == \"i\":\n        \
    \    count += 1\n            \n    return count\n</cell>\n<cell>\n# Test your\
    \ code\ns = \"I like learning\"\nassert is_bored(s) == 3, \"is_bored function\
    \ should return 3 because \\\nS contains 'i' and it starts with 'I' \"\nassert\
    \ is_bored(\"\") == 0, \"is_bored function should return 0 because \\\nS contains\
    \ no characters and it starts with 'I' \"\nassert is_bored(\"I like learning\"\
    ) == 3, \"is_bored function should return 3 because \\\nS contains 'i' and it\
    \ starts with 'I' \"\nassert is_bored(\"I like learning to code\") == 3, \"is_bored\
    \ function should return 3 because \\\nS contains 'i' and it starts with 'I' \"\
    \nassert is_bored(\"Ilike learning to code\") == 3, \"is_bored function should\
    \ return 3 because \\\nS contains 'i' and it starts with 'I' \"\nassert is_bored(\"\
    I like !learning\") == 0, \"is_bored function should return 0 because \\\nS contains\
    \ 'i' and it starts with 'I' \"\nassert is_bored(\"I like !learning to code\"\
    ) == 0, \"is_bored function should return 0 because \\\nS contains 'i' and it\
    \ starts with 'I' \"\nassert is_bored(\"I like !learning to code !\") == 0, \"\
    is_bored function should return 0 because \\\nS contains 'i' and it starts with\
    \ 'I' \"\n</cell>\n<text>\nTask 2: Write a function that counts the number of\
    \ times a substring appears in a string.\nThe substring will be a boredom sentence\
    \ that starts with the word \"I\".\nSentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n            \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpppo_lhsb.jl:15\nin expression starting at\
    \ /tmp/tmpppo_lhsb.jl:15\n"
  stdout: ''
  timestamp: 1659747067
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\
    \ \n        return 0 \n    else \n        boredoms = 0 \n        for w in split(S)\
    \ \n            if w == \"I\" \n                boredoms += 1 \n        return\
    \ boredoms \nend \n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprcxglhz2.jl:1\nin expression starting at /tmp/tmprcxglhz2.jl:1\n"
  stdout: ''
  timestamp: 1659747067
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_bored(S)\
    \ == 1 then 1 else 0 end\nend\n            \"\"\"\n    \n    \n    \"\"\"\n  \
    \  Write a function that takes a string and returns the number of boredoms.\n\
    \    \n    For example:\n            \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp43h0acdy.jl:9\nin expression starting at /tmp/tmp43h0acdy.jl:9\n"
  stdout: ''
  timestamp: 1659747067
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    S = lower(S)\n\
    \    boredoms = 0\n    for w in words(S)\n        if w == \"i\"\n            boredoms\
    \ += 1\n        end\n    end\n    return boredoms\nend\n            \"\"\"\n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5blui0wh.jl:18\nin expression starting at\
    \ /tmp/tmp5blui0wh.jl:18\n"
  stdout: ''
  timestamp: 1659747067
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = Dict{String,Int64}()\n    \n    for w\
    \ in split(S)\n        if w == \"I\"\n            boredoms[w] = 1\n        end\n\
    \    end\n    \n    return length(boredoms)\nend\n\"\"\"\n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsdrj45vh.jl:1\nin expression starting at /tmp/tmpsdrj45vh.jl:1\n"
  stdout: ''
  timestamp: 1659747059
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    \n    boredoms\
    \ = Dict{String,Int64}()\n    \n    for word in split(S)\n        if word[1] ==\
    \ 'I'\n            boredoms[word] = 0\n        end\n    end\n    \n    return\
    \ sum(boredoms.values)\nend\n\"\"\"\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp205zn_mg.jl:20\nin expression starting at\
    \ /tmp/tmp205zn_mg.jl:20\n"
  stdout: ''
  timestamp: 1659747067
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    S = lower(S)\n\
    \    boredoms = 0\n    for w in split(S) do \n        if starts_with(w, \"i\"\
    ) then \n            boredoms += 1\n        end\n    end\n    return boredoms\n\
    end\n    \"\"\"\n    boredoms = 0\n    for w in split(S):\n        if starts_with(w,\
    \ \"i\"):\n            boredoms += 1\n    return boredoms\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph1b35qhu.jl:1\nin expression starting at /tmp/tmph1b35qhu.jl:1\n"
  stdout: ''
  timestamp: 1659747068
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = Dict{String,Int64}()\n    \n    for w\
    \ in split(S)\n        if w == \"I\"\n            boredoms[w] = 1\n        end\n\
    \    end\n    \n    return length(boredoms)\nend\n\"\"\"\n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsdrj45vh.jl:1\nin expression starting at /tmp/tmpsdrj45vh.jl:1\n"
  stdout: ''
  timestamp: 1659747059
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = 0\n    \n    for word in split(S)\n  \
    \      if word == \"I\"\n            boredoms += 1\n        end\n    end\n   \
    \ \n    return boredoms\nend\n\"\"\"\n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb1wequh3.jl:1\nin expression starting at /tmp/tmpb1wequh3.jl:1\n"
  stdout: ''
  timestamp: 1659747069
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = Dict{String,Int64}()\n    \n    for w\
    \ in split(S)\n        if w == \"I\"\n            boredoms[w] = 1\n        end\n\
    \    end\n    \n    return length(boredoms)\nend\n\"\"\"\n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsdrj45vh.jl:1\nin expression starting at /tmp/tmpsdrj45vh.jl:1\n"
  stdout: ''
  timestamp: 1659747059
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    S = lower(S)\n\
    \    S = replace(S, \".\", \"\")\n    S = replace(S, \"?\", \"\")\n    S = replace(S,\
    \ \"!\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"I\", \"\"\
    )\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S,\
    \ \"I\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"I\", \"\"\
    )\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S,\
    \ \"I\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"I\", \"\"\
    )\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S,\
    \ \"I\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"I\", \"\"\
    )\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S,\
    \ \"I\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"I\", \"\"\
    )\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S,\
    \ \"I\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"I\", \"\"\
    )\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S,\
    \ \"I\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"I\", \"\"\
    )\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S,\
    \ \"I\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"I\", \"\"\
    )\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S,\
    \ \"I\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"I\", \"\"\
    )\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S,\
    \ \"I\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"I\", \"\"\
    )\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S,\
    \ \"I\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"I\", \"\"\
    )\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S,\
    \ \"I\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"I\", \"\"\
    )\n    S = replace(S, \"I\", \"\")\n    S = replace(S, \"I\", \"\")\n    S = replace(S,\
    \ \"I\", \"\")\n    S = replace(\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is\
    \ the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjgf536nm.jl:76\nin expression starting at\
    \ /tmp/tmpjgf536nm.jl:76\n"
  stdout: ''
  timestamp: 1659747069
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\
    \ then return 0\n    else if S==\"I\" then return 1\n    else if S==\".\" then\
    \ return 1\n    else if S==\"?\" then return 1\n    else if S==\"!\" then return\
    \ 1\n    else return 0\n    end\nend\n    \"\"\"\n    \n    boredoms = sum(is_bored(word)\
    \ for word in words)\n    return boredoms\n</cell>\n<text>\nLet's test your function\n\
    using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello\
    \ world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0swi5k6_.jl:9\nin expression starting at /tmp/tmp0swi5k6_.jl:9\n"
  stdout: ''
  timestamp: 1659747069
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_bored(S)\
    \ == 0 then 1 else 0 end\nend\n\"\"\"\n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpz658jz0_.jl:9\nin expression starting at /tmp/tmpz658jz0_.jl:9\n"
  stdout: ''
  timestamp: 1659747064
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_bored(S)\
    \ == 0 then 1 else 0 end\nend\n            \"\"\"\n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7tj_x2dd.jl:9\nin expression starting at /tmp/tmp7tj_x2dd.jl:9\n"
  stdout: ''
  timestamp: 1659747059
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = Dict{String,Int64}()\n    \n    for word\
    \ in split(S)\n        if word==\"I\"\n            boredoms[word] = boredoms[word]+1\n\
    \        end\n    end\n    \n    return length(boredoms)\nend\n\"\"\"\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc9xkgwcg.jl:1\nin expression starting at /tmp/tmpc9xkgwcg.jl:1\n"
  stdout: ''
  timestamp: 1659747065
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = Dict{String,Int64}()\n    for word in\
    \ split(S)\n        if word==\"I\"\n            boredoms[word] = get(boredoms,\
    \ word, 0) + 1\n        end\n    end\n    return length(boredoms)\nend\n\"\"\"\
    \n    \nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjmep8_gt.jl:1\nin expression starting at /tmp/tmpjmep8_gt.jl:1\n"
  stdout: ''
  timestamp: 1659747069
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_bored(S)\
    \ == 0 then 1 else 0 end\nend\n            \"\"\"\n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7tj_x2dd.jl:9\nin expression starting at /tmp/tmp7tj_x2dd.jl:9\n"
  stdout: ''
  timestamp: 1659747059
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = 0\n    for w in split(S)\n        if is_bored(w)\n\
    \            boredoms += 1\n        end\n    end\n    return boredoms\nend\n \
    \   \n    boredoms = is_bored(\"I like Ice.\")\n    @assert boredoms == 2\n  \
    \  boredoms = is_bored(\"I like ice.\")\n    @assert boredoms == 1\n    boredoms\
    \ = is_bored(\"I like ice.!?\")\n    @assert boredoms == 1\n    boredoms = is_bored(\"\
    I like ice.!?\")\n    @assert boredoms == 0\n    boredoms = is_bored(\"I like\
    \ ice.!?!?\")\n    @assert boredoms == 0\n    boredoms = is_bored(\"I like ice.!?!?!?\"\
    )\n    @assert boredoms == 0\n    boredoms = is_bored(\"I like ice.!?!?!?!?\"\
    )\n    @assert boredoms == 0\n    boredoms = is_bored(\"I like ice.!?!?!?!?!?\"\
    )\n    @assert boredoms == 0\n    boredoms = is_bored(\"I like ice.!?!?!?!?!?!?\"\
    )\n    @assert boredoms == 0\n    boredoms = is_bored(\"I like ice.!?!?!?!?!?!?!?\"\
    )\n    @assert boredoms == 0\n    boredoms = is_bored(\"I like ice.!?!?!?!?!?!?!?!?\"\
    )\n    @assert boredoms == 0\n    boredoms = is_bored(\"I like ice.!?!?!?!?!?!?!?!?!?\"\
    )\n    @assert boredoms == 0\n    boredoms = is_bored(\"I like ice.!?!?!?!?!?!?!?!?!?!?\"\
    )\n    @assert boredoms == 0\n    boredoms = is_bored(\"I like ice.!?!?!?!?!?!?!?!?!?!?!?\"\
    )\n    @assert boredoms == 0\n    boredoms = is_bored(\"I like ice.!?!?!?!?!?!\n\
    using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello\
    \ world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx6a5_i2h.jl:55\nin expression starting at\
    \ /tmp/tmpx6a5_i2h.jl:55\n"
  stdout: ''
  timestamp: 1659747069
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    S = strip(S)\n\
    \    S = lower(S)\n    S = replace(S, \".\", \"\")\n    S = replace(S, \"?\",\
    \ \"\")\n    S = replace(S, \"!\", \"\")\n    S = split(S)\n    S = filter(x ->\
    \ x != \"\", S)\n    S = map(x -> tolower(x), S)\n    S = filter(x -> x != \"\
    i\", S)\n    S = map(x -> tolower(x), S)\n    S = filter(x -> x != \"boredom\"\
    , S)\n    S = map(x -> tolower(x), S)\n    S = filter(x -> x != \"\", S)\n   \
    \ S = map(x -> tolower(x), S)\n    S = filter(x -> x != \"i\", S)\n    S = map(x\
    \ -> tolower(x), S)\n    S = filter(x -> x != \"boredom\", S)\n    S = map(x ->\
    \ tolower(x), S)\n    S = filter(x -> x != \"\", S)\n    S = map(x -> tolower(x),\
    \ S)\n    S = filter(x -> x != \"i\", S)\n    S = map(x -> tolower(x), S)\n  \
    \  S = filter(x -> x != \"boredom\", S)\n    S = map(x -> tolower(x), S)\n   \
    \ S = filter(x -> x != \"\", S)\n    S = map(x -> tolower(x), S)\n    S = filter(x\
    \ -> x != \"i\", S)\n    S = map(x -> tolower(x), S)\n    S = filter(x -> x !=\
    \ \"boredom\", S)\n    S = map(x -> tolower(x), S)\n    S = filter(x -> x != \"\
    \", S)\n    S = map(x -> tolower(x), S)\n    S = filter(x -> x != \"i\", S)\n\
    \    S = map(x -> tolower(x), S)\n    S = filter(x -> x != \"boredom\", S)\n \
    \   S = map(x -> tolower(x), S)\n    S = filter(x -> x != \"\", S)\n    S = map(x\
    \ -> tolower(x), S)\n    S = filter(x -> x != \"i\", S)\n    S = map(x -> tolower(x),\
    \ S)\n    S = filter(x -> x != \"boredom\", S)\n    S = map(x -> tolower(x), S)\n\
    \    S = filter(x -> x != \"\", S)\n    S = map(x -> tolower(x), S)\n    S = filter(x\
    \ -> x != \"i\", S)\n    S = map(x -> tolower(x), S)\n    S = filter(x -> x !=\
    \ \"boredom\", S)\n    S = map(x -> tolower(x), S)\n    S = filter(x -> x != \"\
    \", S)\n    S = map(x -> tolower(x), S)\n    S = filter(x \nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptu02d_f8.jl:60\nin expression starting at\
    \ /tmp/tmptu02d_f8.jl:60\n"
  stdout: ''
  timestamp: 1659747069
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_bored(S)\
    \ == 0 then 1 else 0 end\nend\n            \nusing Test\n\n@testset begin\n\n\
    candidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpg4ym1r59.jl:9\nin expression starting at /tmp/tmpg4ym1r59.jl:9\n"
  stdout: ''
  timestamp: 1659747059
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    \n    boredoms\
    \ = 0\n    \n    for word in S\n        if word = \"I\"\n            boredoms\
    \ += 1\n        end\n    end\n    \n    return boredoms\nend\n\"\"\"\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_hckv5lv.jl:13\nin expression starting at /tmp/tmp_hckv5lv.jl:13\n"
  stdout: ''
  timestamp: 1659747069
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = Dict{String,Int64}()\n    \n    for w\
    \ in split(S)\n        if w == \"I\"\n            boredoms[w] = 1\n        end\n\
    \    end\n    \n    return length(boredoms)\nend\n\"\"\"\n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsdrj45vh.jl:1\nin expression starting at /tmp/tmpsdrj45vh.jl:1\n"
  stdout: ''
  timestamp: 1659747059
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_bored(S)\
    \ == 0 then 1 else 0 end\nend\nis_bored(\"\"\"\n    I. Love you!\n    I. Love\
    \ you!\n    I. Love you!\n    I. Love you!\n    I. Love you!\n    I. Love you!\n\
    \    I. Love you!\n    I. Love you!\n    I. Love you!\n    I. Love you!\n    I.\
    \ Love you!\n    I. Love you!\n    I. Love you!\n    I. Love you!\n    I. Love\
    \ you!\n    I. Love you!\n    I. Love you!\n    I. Love you!\n    I. Love you!\n\
    \    I. Love you!\n    I. Love you!\n    I. Love you!\n    I. Love you!\n    I.\
    \ Love you!\n    I. Love you!\n    I. Love you!\n    I. Love you!\n    I. Love\
    \ you!\n    I. Love you!\n    I. Love you!\n    I. Love you!\n    I. Love you!\n\
    \    I. Love you!\n    I. Love you!\n    I. Love you!\n    I. Love you!\n    I.\
    \ Love you!\n    I. Love you!\n    I. Love you!\n    I. Love you!\n    I. Love\
    \ you!\n    I. Love you!\n    I. Love you!\n    I. Love you!\n    I. Love you!\n\
    \    I. Love you!\n    I. Love you!\n    I. Love you!\n    I. Love you!\n    I.\
    \ Love you!\n    I. Love you!\n    I. Love you!\n    I. Love you!\n    I. Love\
    \ you!\n    I. Love you!\n    I. Love you!\n    I. Love you!\n    I. Love you!\n\
    \    I. Love you!\n    I. Love you!\n    I. Love you!\n    I. Lo\nusing Test\n\
    \n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\")\
    \ == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpu9ci7e51.jl:9\nin expression starting at /tmp/tmpu9ci7e51.jl:9\n"
  stdout: ''
  timestamp: 1659747069
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = Dict()\n    for word in split(S)\n   \
    \     if word[1] == 'I'\n            boredoms[word] = 0\n    end\n    return length(boredoms)\n\
    end\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_a8gr0mc.jl:1\nin expression starting at /tmp/tmp_a8gr0mc.jl:1\n"
  stdout: ''
  timestamp: 1659747069
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\
    \ == true then return 0\n    \n    boredoms = 0\n    \n    for w in split(S) do\
    \ \n        if w == \"I\" then boredoms += 1\n    end\n    \n    return boredoms\n\
    end\n    \"\"\"\n    \n    boredoms = 0\n    \n    for w in split(S):\n      \
    \  if w == \"I\":\n            boredoms += 1\n    \n    return boredoms\n</cell>\n\
    <cell>\n# Test your code\ns = \"I like I!\"\nassert is_bored(s) == 3, \"is_bored\
    \ should return 3 given s = 'I like I!'\"\nassert is_bored(\"\") == 0, \"is_bored\
    \ should return 0 given s = ''\"\nassert is_bored(\"I\") == 1, \"is_bored should\
    \ return 1 given s = 'I' and nothing else\"\nassert is_bored(\"I like I!\") ==\
    \ 3, \"is_bored should return 3 given s = 'I like I!'\"\nassert is_bored(\"I like\
    \ I! I love I!\") == 4, \"is_bored should return 4 given s = 'I like I! I love\
    \ I!'\"\n</cell>\n<text>\nTask 3: Write a function that takes a string and returns\
    \ the number of words in the string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2gc93gnu.jl:9\nin expression starting at /tmp/tmp2gc93gnu.jl:9\n"
  stdout: ''
  timestamp: 1659747069
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = findall(S, \"^I.*\")\n    return length(boredoms)\n\
    end\n    \"\"\"\n    \n    boredoms = findall(S, \"^I.*\")\n    return length(boredoms)\n\
    </cell>\n<code language=julia-1.0>\n@time boredom_count = is_bored(boredoms)\n\
    </cell>\n<code language=julia-1.0>\n@time boredom_count = is_bored(boredoms)\n\
    </cell>\n<text>\nExercise: Write a function that counts the number of boredoms\
    \ in a given string.\n    \n    Your function should take a string as input, and\
    \ return a number.\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t\
    @test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6rofrxs7.jl:1\nin expression starting at /tmp/tmp6rofrxs7.jl:1\n"
  stdout: ''
  timestamp: 1659747069
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\
    \ then return 0\n    \n    boredoms = 0\n    \n    for w in split(S) do \n   \
    \     if w == \"I\" then boredoms += 1\n    end\n    \n    return boredoms\nend\n\
    \    \"\"\"\n    \n    boredoms = 0\n    \n    for w in split(S):\n        if\
    \ w == \"I\":\n            boredoms += 1\n    \n    return boredoms\n</cell>\n\
    <code language=julia-1.5>\n@time boredoms(boredom_sentence)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns the number of words\
    \ in the string that start with the letter 'A'.\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6du0j3ug.jl:9\nin expression starting at /tmp/tmp6du0j3ug.jl:9\n"
  stdout: ''
  timestamp: 1659747069
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_bored(S)\
    \ == 1 then 1 else 0 end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpsvevnxdf.jl:9\nin expression starting at /tmp/tmpsvevnxdf.jl:9\n"
  stdout: ''
  timestamp: 1659747067
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = findall(S, \"^I\")\n    \n    if length(boredoms)\
    \ == 0\n        return 1\n    else\n        return length(boredoms) + 1\n    end\n\
    end\n\"\"\"\n</cell>\n<cell>\n@test is_bored(\"\") == 0\n@test is_bored(\"I\"\
    ) == 1\n@test is_bored(\"I.\") == 2\n@test is_bored(\"I?\") == 3\n@test is_bored(\"\
    I!\") == 4\n@test is_bored(\"I!.\") == 5\n@test is_bored(\"I!?\") == 6\n@test\
    \ is_bored(\"I!??\") == 7\n@test is_bored(\"I!???\") == 8\n@test is_bored(\"I!????\"\
    ) == 9\n@test is_bored(\"I!?????\") == 10\n@test is_bored(\"I!??????\") == 11\n\
    @test is_bored(\"I!???????\") == 12\n@test is_bored(\"I!????????\") == 13\n@test\
    \ is_bored(\"I!?????????\") == 14\n@test is_bored(\"I!??????????\") == 15\n@test\
    \ is_bored(\"I!???????????\") == 16\n@test is_bored(\"I!????????????\") == 17\n\
    @test is_bored(\"I!?????????????\") == 18\n@test is_bored(\"I!??????????????\"\
    ) == 19\n@test is_bored(\"I!???????????????\") == 20\n@test is_bored(\"I!????????????????\"\
    ) == 21\n@test is_bored(\"I!?????????????????\") == 22\n@test is_bored(\"I!??????????????????\"\
    ) == 23\n@test is_bored(\"I!???????????????????\") == 24\n@test is_bored(\"I!????????????????????\"\
    ) == 25\n@test is_bored(\"I!?????????????????????\") == 26\n@test is_bored(\"\
    I!??????????????????????\") == 27\n@test is_bored(\"I!??????????????????????\n\
    using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello\
    \ world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfnahylcu.jl:1\nin expression starting at /tmp/tmpfnahylcu.jl:1\n"
  stdout: ''
  timestamp: 1659747069
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\
    \ == true \n        return 0 \n    else \n        boredoms = 0 \n        for word\
    \ in split(S) do \n            if word == \"I\" then \n                boredoms\
    \ += 1 \n            end \n        end \n        return boredoms \n    end \n\
    end \n\"\"\"\n</cell>\n<cell>\n# Test your code\ns = \"I\"\nassert is_bored(s)\
    \ == 0\ns = \"a boy I saw him yesterday I ate him and he saw him again\"\nassert\
    \ is_bored(s) == 2\ns = \"a boy I saw him yesterday I ate him and he saw him again\
    \ and he ate him and he ate him and he ate him and he ate him and he ate him and\
    \ he ate him and he ate him and he ate him and he ate him and he ate him and he\
    \ ate him and he ate him and he ate him and he ate him and he ate him and he ate\
    \ him and he ate him and he ate him and he ate him and he ate him and he ate him\
    \ and he ate him and he ate him and he ate him and he ate him and he ate him and\
    \ he ate him and he ate him and he ate him and he ate him and he ate him and he\
    \ ate him and he ate him and he ate him and he ate him and he ate him and he ate\
    \ him and he ate him and he ate him and he ate him and he ate him and he ate him\
    \ and he ate him and he ate him and he ate him and he ate him and he ate him and\
    \ he ate him and he ate him and he ate him and he ate him and he ate him and he\
    \ ate him and he ate him and he ate him and he ate him and he ate him and he ate\
    \ him and he ate him and he ate him and he ate him and he ate him and he ate him\
    \ and he ate him and he ate him and he ate him and he ate him and he ate him and\
    \ he ate him and he ate him and he ate him and he ate him and he ate him and he\
    \ ate him and he ate hi\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk5prxhvj.jl:1\nin expression starting at /tmp/tmpk5prxhvj.jl:1\n"
  stdout: ''
  timestamp: 1659747069
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = Dict{String,Int64}()\n    \n    for w\
    \ in split(S)\n        if w == \"I\"\n            boredoms[w] = 1\n        end\n\
    \    end\n    \n    return length(boredoms)\nend\n\"\"\"\n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsdrj45vh.jl:1\nin expression starting at /tmp/tmpsdrj45vh.jl:1\n"
  stdout: ''
  timestamp: 1659747059
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = Dict()\n    \n    for w in split(S)\n\
    \        if w == \"I\"\n            boredoms[w] = 1\n        end\n    end\n  \
    \  \n    return length(boredoms)\nend\n    \"\"\"\n    \n    boredoms = Dict()\n\
    \    \n    for w in split(S)\n        if w == \"I\"\n            boredoms[w] =\
    \ 1\n        end\n    end\n    \n    return length(boredoms)\nend\n</cell>\n<code\
    \ language=julia-1.0>\n@time is_bored(\"\"\"\n    You'll be given a string of\
    \ words, and your task is to count the number\n    of boredoms. A boredom is a\
    \ sentence that starts with the word \"I\".\n    Sentences are delimited by '.',\
    \ '?' or '!'.\n   \n    For example:\n            \"\"\")\n</cell>\n<code language=julia-1.0>\n\
    @time is_bored(\"\"\"\n    You'll be given a string of words, and your task is\
    \ to count the number\n    of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For\
    \ example:\n            \"\"\")\n</cell>\n<code language=julia-1.0>\n@time is_bored(\"\
    \"\"\n    You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n     \
    \       \"\"\")\n</cell>\n<code language=julia-1.0>\n@time is_bored(\"\"\"\n \
    \   You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n     \
    \       \"\"\")\n</cell>\n<code language=julia-1.0>\n@time is_bored(\"\"\"\n \
    \   You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n     \
    \       \"\"\")\n</cell>\n<code language=julia-1.0>\n@time is_bored(\"\"\"\n \
    \   You'll be given a string of words, and your task is to count the number\n\
    \    of bore\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmps6ls1wsj.jl:8 expected\
    \ \"end\", got \"be\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps6ls1wsj.jl:37\n\
    in expression starting at /tmp/tmps6ls1wsj.jl:37\n"
  stdout: ''
  timestamp: 1659747069
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\
    \ then return 0\n    else if S == \"I\" then return 1\n    else if S == \"!\"\
    \ then return 1\n    else if S == \"?\" then return 1\n    else return 0\nend\n\
    \    \"\"\"\n    \n    boredoms = []\n    \n    for word in words:\n        if\
    \ word == \"I\":\n            boredoms.append(1)\n        elif word == \"!\":\n\
    \            boredoms.append(1)\n        elif word == \"?\":\n            boredoms.append(1)\n\
    \        else:\n            boredoms.append(0)\n    \n    return sum(boredoms)\n\
    </cell>\n<cell>\n# Test your code\nboredoms_test(is_bored)\n</cell>\n<text>\n\
    Run the cell below to test your boredoms function. Notice that boredoms_test is\
    \ similar to what you did in is_bored, except is_bored returns the boredoms as\
    \ a list.\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_fwj0vdb.jl:9\nin expression starting at /tmp/tmp_fwj0vdb.jl:9\n"
  stdout: ''
  timestamp: 1659747069
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = Dict()\n    for word in split(S)\n   \
    \     if is_bored(word)\n            boredoms[word] = get(boredoms, word, 0) +\
    \ 1\n        end\n    end\n    return length(boredoms)\nend\n    \"\"\"\n    \n\
    \    boredoms = Dict()\n    for word in split(S)\n        if is_bored(word)\n\
    \            boredoms[word] = get(boredoms, word, 0) + 1\n        end\n    end\n\
    \    return length(boredoms)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is\
    \ the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4b_l2i7i.jl:1\nin expression starting at /tmp/tmp4b_l2i7i.jl:1\n"
  stdout: ''
  timestamp: 1659747069
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_bored(S)\
    \ == 0 then 1 else 0 end\nend\n            \"\"\"\n    \n    \n    \"\"\"\n  \
    \  Write a function that takes a string and returns the number of boredoms.\n\
    \    \n    For example:\n    \n            ```julia\n            is_bored(S::String)::Int64\n\
    \            if is_bored(S) == 0 then 1 else 0 end\n            ```\n    \n  \
    \  ```\n    \n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\")\
    \ == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpyr1xulbo.jl:9\nin expression starting at /tmp/tmpyr1xulbo.jl:9\n"
  stdout: ''
  timestamp: 1659747069
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    I = find(S, \"I\")\n    if I < 0\n        return\
    \ 0\n    \n    boredoms = length(S - I)\n    \n    return boredoms\nend\n    \"\
    \"\"\n    \n    boredoms = 0\n    \n    for word in words:\n        if word.startswith(\"\
    I\"):\n            boredoms += 1\n    \n    return boredoms\n</cell>\n<text>\n\
    Let's test your implementation\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8zdk18sb.jl:1\nin expression starting at /tmp/tmp8zdk18sb.jl:1\n"
  stdout: ''
  timestamp: 1659747069
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_bored(S)\
    \ == 0 then 1 else 0 end\nend\n\"\"\"\n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpz658jz0_.jl:9\nin expression starting at /tmp/tmpz658jz0_.jl:9\n"
  stdout: ''
  timestamp: 1659747064
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\
    \ == true then \n        return 0\n    else \n        boredoms = count_boredoms(S)\n\
    \        return boredoms\n    end\nend\n            \"\"\"\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplone3x4q.jl:16\nin expression starting at\
    \ /tmp/tmplone3x4q.jl:16\n"
  stdout: ''
  timestamp: 1659747069
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    \n    S = lower(S)\n\
    \    \n    count = 0\n    \n    for w in split(S) do \n        if w == \"i\" then\
    \ \n            count += 1\n        end\n    end\n    \n    return count\nend\n\
    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprjzcxen_.jl:1\nin expression starting at /tmp/tmprjzcxen_.jl:1\n"
  stdout: ''
  timestamp: 1659747069
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\
    \ == true \n        return 0 \n    else \n        boredoms = 0 \n        for word\
    \ in split(S) \n            if word[0] == \"I\" \n                boredoms +=\
    \ 1 \n        return boredoms \nend \n\"\"\"\n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_g_gwwi4.jl:1\nin expression starting at /tmp/tmp_g_gwwi4.jl:1\n"
  stdout: ''
  timestamp: 1659747069
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    if is_empty(S)\n\
    \        return 0\n    \n    boredoms = 0\n    \n    for w in split(S)\n     \
    \   if is_bored(w)\n            boredoms += 1\n        end\n    end\n    \n  \
    \  return boredoms\nend\n\"\"\"\n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcy_ixwbe.jl:1\nin expression starting at /tmp/tmpcy_ixwbe.jl:1\n"
  stdout: ''
  timestamp: 1659747069
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \            \"\"\"\nfunction is_bored(S::String)::Int64 \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe66xq9u0.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe66xq9u0.jl:1\n\
    in expression starting at /tmp/tmpe66xq9u0.jl:1\n"
  stdout: ''
  timestamp: 1659747059
