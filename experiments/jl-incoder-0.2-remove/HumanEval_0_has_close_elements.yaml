name: HumanEval_0_has_close_elements
language: jl
prompt: "\"\"\" Check if in given list of numbers, are any two numbers closer to each\
  \ other than\n    given threshold.\n            \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
  \ threshold::Float64)::Bool \n"
tests: "using Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\t@test(candidate([1.0,\
  \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0, 2.0, 3.9, 4.0,\
  \ 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95)\
  \ == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == false)\n\t@test(candidate([1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\t@test(candidate([1.1, 2.2, 3.1, 4.1,\
  \ 5.1], 1.0) == true)\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == false)\n\
  end\n"
completions: ["    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    distances = Vector{Float64}(undef,\
    \ length(numbers))\n    for i in 1:length(numbers)\n        distances[i] = norm(numbers[i]\
    \ - numbers[(i+1):length(numbers)])\n    end\n    \n    for i in 1:length(numbers)\n\
    \        if distances[i] > threshold\n            return false\n        end\n\
    \    end\n    return true\nend", "    \n    numbers_sorted = sort(numbers)\n \
    \   \n    index_of_closest = find_closest_index(numbers_sorted, threshold)\n \
    \   \n    return index_of_closest != length(numbers_sorted)\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    numbers_sorted = sort(numbers)\n    \n    threshold\
    \ = threshold * threshold\n    \n    has_close_elements = false\n    \n    for\
    \ index in 1:length(numbers_sorted)\n        \n        index_next = index + 1\n\
    \        \n        if index_next == length(numbers_sorted)\n            index_next\
    \ = 1\n        end\n        \n        diff = numbers_sorted[index] - numbers_sorted[index_next]\n\
    \        \n        if diff < threshold\n            has_close_elements = true\n\
    \            break\n        end\n    end\n    \n    return has_close_elements\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    numbers_sorted = sort(numbers)\n\
    \    \n    i = 0\n    while i < length(numbers_sorted)\n        if numbers_sorted[i]\
    \ == numbers_sorted[i+1]\n            i += 1\n        else\n            if abs(numbers_sorted[i]\
    \ - numbers_sorted[i+1]) < threshold\n                return true\n          \
    \  end\n        end\n    end\n    \n    return false\nend", "    \n    distances\
    \ = zeros(length(numbers), length(numbers))\n    for (i,j) in combinations(numbers,\
    \ 2)\n        distances[i,j] = norm(i - j)\n    end\n    \n    close = zeros(length(numbers),\
    \ length(numbers))\n    for (i,j) in combinations(numbers, 2)\n        if distances[i,j]\
    \ < threshold\n            close[i,j] = true\n        end\n    end\n    \n   \
    \ return close\nend", "    \n    distances = zeros(length(numbers))\n    for i=1:length(numbers)\n\
    \        distances[i] = abs(numbers[i] - threshold)\n    end\n    \n    close\
    \ = find(distances <= 1)\n    \n    return length(close) > 0\nend", "    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    numbers_sorted\
    \ = sort(numbers)\n    \n    i = 0\n    \n    while i < length(numbers_sorted)\n\
    \        \n        j = i + 1\n        \n        while j < length(numbers_sorted)\n\
    \            \n            if numbers_sorted[j] - numbers_sorted[i] < threshold\n\
    \                return true\n            \n            j += 1\n        end\n\
    \        \n        i += 1\n    end\n    \n    return false\nend\n</cell>\n<code\
    \ language=julia-1.3>", "    \n    numbers_sorted = sort(numbers)\n    \n    closest_numbers\
    \ = numbers_sorted[1:2]\n    \n    if numbers_sorted[1] < threshold\n        closest_numbers\
    \ = numbers_sorted[2:end]\n    end\n    \n    closest_numbers_sorted = sort(closest_numbers)\n\
    \    \n    if closest_numbers_sorted[1] < threshold\n        closest_numbers_sorted\
    \ = sort(closest_numbers_sorted[2:end])\n    end\n    \n    if numbers_sorted[1]\
    \ > threshold\n        closest_numbers_sorted = sort(closest_numbers_sorted[1:end-1])\n\
    \    end\n    \n    if closest_numbers_sorted[1] > threshold\n        closest_numbers_sorted\
    \ = sort(closest_numbers_sorted[1:end-1])\n    end\n    \n    if numbers_sorted[1]\
    \ < threshold && closest_numbers_sorted[1] < threshold\n        return true\n\
    \    end\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    distances = Vector{Float64}(undef, length(numbers))\n    for i in 1:length(numbers)\n\
    \        distances[i] = sqrt(numbers[i]^2 + numbers[i-1]^2)\n    end\n    \n \
    \   for i in 1:length(numbers)\n        for j in i+1:length(numbers)\n       \
    \     if distances[i] < distances[j] && distances[i] < threshold\n           \
    \     return true\n            end\n        end\n    end\n    \n    return false\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    numbers_sorted = sort(numbers)\n\
    \    \n    for index in 1:length(numbers_sorted)\n        if numbers_sorted[index]\
    \ - numbers_sorted[index-1] > threshold\n            return true\n        end\n\
    \    end\n    \n    return false\nend", "    \n    numbers_sorted = sort(numbers)\n\
    \    \n    closest_numbers = numbers_sorted[findall(numbers_sorted .< threshold)]\n\
    \    \n    return length(closest_numbers) > 1\nend\n</cell>\n<code language=julia-1.5>\n\
    @time has_close_elements(numbers, 0.2)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that checks if given vector contains any element that is closer to zero than\
    \ given threshold.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    distances = zeros(length(numbers))\n    for i = 1:length(numbers)\n \
    \       distances[i] = abs(numbers[i] - threshold)\n    end\n    \n    close =\
    \ zeros(length(numbers))\n    for i = 1:length(numbers)\n        close[i] = distances[i]\
    \ < threshold\n    end\n    \n    return close\nend", "    \n    distances = zeros(length(numbers))\n\
    \    for i=1:length(numbers)\n        distances[i] = abs(numbers[i] - threshold)\n\
    \    end\n    \n    close = any(distances <= 1)\n    \n    return close\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    closed_numbers = Vector{Float64}()\n    \n  \
    \  for number in numbers\n        if number - threshold < numbers && number +\
    \ threshold > numbers\n            push!(closed_numbers, number)\n        end\n\
    \    end\n    \n    return length(closed_numbers) > 0\nend", "    \n    numbers_sorted\
    \ = sort(numbers)\n    \n    closest = numbers_sorted[1]\n    \n    for n in numbers_sorted[2:end]\n\
    \        if abs(n - closest) < threshold\n            return true\n        else\n\
    \            closest = n\n        end\n    end\n    \n    return false\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    distances = zeros(length(numbers))\n\
    \    for i=1:length(numbers)\n        distances[i] = abs(numbers[i] - threshold)\n\
    \    end\n    \n    close = zeros(length(numbers))\n    for i=1:length(numbers)\n\
    \        if distances[i] < distances[end]\n            close[i] = true\n     \
    \   else\n            close[i] = false\n        end\n    end\n    \n    return\
    \ any(close)\nend\n</cell>\n<text>\nLet's try it out on some examples:", "   \
    \ \n    closed_numbers = Vector{Float64}()\n    \n    for number in numbers\n\
    \        if abs(number-threshold) < abs(number-closed_numbers[1])\n          \
    \  closed_numbers = [number, number]\n        else\n            closed_numbers\
    \ = [closed_numbers[1], number]\n        end\n    end\n    \n    return length(closed_numbers)>0\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    distances = zeros(Float64, length(numbers))\n\
    \    for (i,n) in enumerate(numbers)\n        distances[i] = abs(n - threshold)\n\
    \    end\n    \n    close = zeros(Bool, length(numbers))\n    for (i,n) in enumerate(numbers)\n\
    \        if distances[i] <= threshold\n            close[i] = true\n        else\n\
    \            close[i] = false\n        end\n    end\n    \n    return close\n\
    end", "    \n    distances = Vector{Float64}(undef, 0)\n    for n in numbers\n\
    \        distances = vcat(distances, get_distances(n, numbers))\n    end\n   \
    \ \n    distances = sort(distances)\n    \n    i = length(distances) - 1\n   \
    \ while i >= 0\n        if distances[i] < threshold\n            return false\n\
    \        end\n        i = i - 1\n    end\n    \n    return true\nend", "    \n\
    \    numbers = sort(numbers)\n    \n    idx = 0\n    \n    while idx < length(numbers)\n\
    \        if numbers[idx] - numbers[idx - 1] > threshold\n            return true\n\
    \        end\n        idx += 1\n    end\n    \n    return false\nend", "    \n\
    \    distances = zeros(length(numbers), length(numbers))\n    for i = 1:length(numbers)\n\
    \        for j = 1:length(numbers)\n            distances[i, j] = norm(numbers[i]\
    \ - numbers[j])\n        end\n    end\n    \n    close = zeros(length(numbers),\
    \ length(numbers))\n    for i = 1:length(numbers)\n        for j = 1:length(numbers)\n\
    \            if distances[i, j] < threshold\n                close[i, j] = true\n\
    \            else\n                close[i, j] = false\n            end\n    \
    \    end\n    end\n    \n    return any(close)\nend", "    \n    numbers_sorted\
    \ = sort(numbers)\n    \n    for n in numbers_sorted\n        if abs(n - numbers_sorted[1])\
    \ > threshold\n            return true\n        end\n    end\n    \n    return\
    \ false\nend\n</cell>\n<code language=julia-1.5>", "    \n    distances = zeros(Float64,\
    \ length(numbers))\n    for (i,n) in enumerate(numbers)\n        distances[i]\
    \ = abs(n - threshold)\n    end\n    \n    close = find(distances <= 1)\n    \n\
    \    return length(close) > 0\nend\n</cell>\n<code language=julia-1.5>", "   \
    \ \n    numbers_sorted = sort(numbers)\n    \n    idx = 0\n    while idx < length(numbers_sorted)\n\
    \        if numbers_sorted[idx] - numbers_sorted[idx - 1] < threshold\n      \
    \      return true\n        end\n        idx += 1\n    end\n    return false\n\
    end", "    \n    numbers_sorted = sort(numbers)\n    \n    closest_numbers = numbers_sorted[numbers_sorted\
    \ .< threshold]\n    \n    return length(closest_numbers) > 1\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    numbers_sorted = sort(numbers)\n    \n\
    \    i = 0\n    while i < length(numbers_sorted)\n        if numbers_sorted[i]\
    \ == numbers_sorted[i+1]\n            i += 1\n        else\n            numbers_sorted[i]\
    \ = numbers_sorted[i+1]\n            i += 1\n        end\n    end\n    \n    i\
    \ = 0\n    while i < length(numbers_sorted)\n        if numbers_sorted[i] == numbers_sorted[i-1]\n\
    \            i += 1\n        else\n            numbers_sorted[i] = numbers_sorted[i-1]\n\
    \            i += 1\n        end\n    end\n    \n    i = 0\n    while i < length(numbers_sorted)\n\
    \        if numbers_sorted[i] == numbers_sorted[i+1]\n            i += 1\n   \
    \     else\n            numbers_sorted[i] = numbers_sorted[i-1]\n            i\
    \ += 1\n        end\n    end\n    \n    i = 0\n    while i < length(numbers_sorted)\n\
    \        if numbers_sorted[i] == numbers_sorted[i-1]\n            i += 1\n   \
    \     else\n            numbers_sorted[i] = numbers_sorted[i+1]\n            i\
    \ += 1\n        end\n    end\n    \n    i = 0\n    while i < length(numbers_sorted)\n\
    \        if numbers_sorted[i] == numbers_sorted[i+1]\n            i += 1\n   \
    \     else\n            numbers_sorted[i] = numbers_sorted[i-1]\n            i\
    \ += 1\n        end\n    end\n    \n    i = 0\n    while i < length(numbers_sorted)\n\
    \        if numbers_sorted[i] == numbers_sorted[i-1]\n            i += 1\n   \
    \     else\n            numbers_sorted[i] = numbers_sorted[i+1]\n            i\
    \ += 1\n        end\n    end\n    \n    i = 0\n    while i < length(numbers_sorted)\n\
    \        if numbers_sorted[i] == numbers_sorted[i+1]\n            i += 1\n   \
    \     else\n            numbers_sorted[i] = numbers_sorted[i-1]\n            i\
    \ += 1\n        end\n    end\n    \n    i = 0\n    while i < length(numbers_sorted)\n\
    \        if numbers_sorted[i] == numbers_sorted[i-1]\n            i += 1\n   \
    \     else\n            numbers_sorted[i] = numbers_sorted[i+1]\n            i\
    \ += 1\n        end\n    end\n    \n    i = 0\n    while i < length(numbers_sorted)\n\
    \        if numbers_sorted[i] == numbers_sorted[i+1]\n            i += 1\n   \
    \     else\n            numbers_sorted[i] = numbers_sorted[i-1]\n            i\
    \ += 1\n        end\n    end\n    \n    i = 0\n    while i < length(numbers_sorted)\n\
    \        if numbers_sorted[i] == numbers_sorted[i-1]\n            i += 1\n   \
    \     else\n            numbers_sorted[i] = numbers_sorted[i+1]\n            i\
    \ += 1\n        end\n    end\n    \n    i = 0\n    while i < length(numbers_sorted)\n\
    \        if numbers_sorted[i] == numbers_sorted[i+1]\n            i += 1\n   \
    \     else\n            numbers_sorted[i] = numbers_sorted[i-1]\n            i\
    \ += 1\n        end\n    end\n    \n    i = 0\n    while ", "    \n    numbers_sorted\
    \ = sort(numbers)\n    \n    closed_numbers = numbers_sorted[numbers_sorted .<\
    \ threshold]\n    \n    return length(closed_numbers) > 1\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    distances = zeros(length(numbers))\n    for\
    \ i=1:length(numbers)\n        distances[i] = abs(numbers[i] - threshold)\n  \
    \  end\n    \n    close = any(distances <= 1)\n    \n    return close\nend\n</cell>\n\
    <text>\nThe function has_close_elements checks if any two numbers are closer to\
    \ each other than the given threshold.", "    \n    numbers_sorted = sort(numbers)\n\
    \    \n    closest_numbers = numbers_sorted[1:end-1]\n    \n    closest_numbers_sorted\
    \ = sort(closest_numbers)\n    \n    if length(closest_numbers_sorted) < 2\n \
    \       return false\n    end\n    \n    threshold = threshold * threshold\n \
    \   \n    closest_numbers_threshold = closest_numbers_sorted[1:end-1]\n    \n\
    \    if length(closest_numbers_threshold) < 2\n        return false\n    end\n\
    \    \n    closest_numbers_threshold .< threshold\nend", "    \n    numbers_sorted\
    \ = sort(numbers)\n    \n    closest_elements = numbers_sorted[findall(numbers_sorted\
    \ .< threshold)]\n    \n    return length(closest_elements) > 1\nend", "    \n\
    \    numbers_sorted = sort(numbers)\n    \n    index_of_closest = findfirst(x\
    \ -> abs(x - numbers_sorted[1]) < threshold, numbers_sorted)\n    \n    if index_of_closest\
    \ == length(numbers_sorted)\n        return false\n    else\n        return true\n\
    \    end\nend\n</cell>\n<text>\nTask 2.2: Write a function that checks if given\
    \ list of numbers is sorted or not.\nThe function should return true if the given\
    \ list is sorted and false otherwise.\nThe function should take a list of numbers\
    \ as an argument and should return true if the list is sorted and false otherwise.",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    distances\
    \ = zeros(length(numbers))\n    for i=1:length(numbers)\n        distances[i]\
    \ = abs(numbers[i] - threshold)\n    end\n    \n    has_close_elements = false\n\
    \    for i=1:length(numbers)\n        if distances[i] < distances[end]\n     \
    \       has_close_elements = true\n            break\n        end\n    end\n \
    \   \n    return has_close_elements\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    numbers_sorted = sort(numbers)\n    \n    idx = 0\n    while idx < length(numbers_sorted)\n\
    \        if numbers_sorted[idx] - numbers_sorted[idx - 1] < threshold\n      \
    \      return true\n        end\n        idx += 1\n    end\n    \n    return false\n\
    end", "    \n    numbers_sorted = sort(numbers)\n    \n    index_of_closest =\
    \ find_closest_index(numbers_sorted, threshold)\n    \n    if index_of_closest\
    \ == length(numbers_sorted)\n        return false\n    else\n        return numbers_sorted[index_of_closest]\
    \ == numbers_sorted[index_of_closest + 1]\n    end\nend", "    \n    distances\
    \ = Vector{Float64}(undef, length(numbers))\n    for i in 1:length(numbers)\n\
    \        distances[i] = norm(numbers[i] - numbers)\n    end\n    \n    close =\
    \ Vector{Bool}(undef, length(numbers))\n    for i in 1:length(numbers)\n     \
    \   if distances[i] < threshold\n            close[i] = true\n        end\n  \
    \  end\n    \n    return close\nend", "    \n    numbers_sorted = sort(numbers)\n\
    \    \n    index_of_closest = find_closest_index(numbers_sorted, threshold)\n\
    \    \n    if index_of_closest == -1\n        return false\n    else\n       \
    \ return true\n    end\nend\n</cell>\n<code language=julia-1.5>", "    \n    numbers_sorted\
    \ = sort(numbers)\n    \n    idx = 0\n    while idx < length(numbers_sorted)\n\
    \        if numbers_sorted[idx] - numbers_sorted[idx - 1] > threshold\n      \
    \      return true\n        end\n        idx += 1\n    end\n    \n    return false\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    numbers_sorted = sort(numbers)\n\
    \    \n    closest_numbers = numbers_sorted[numbers_sorted .< threshold]\n   \
    \ \n    closest_numbers_sorted = sort(closest_numbers)\n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    numbers = sort(numbers)\n\
    \    \n    idx1 = 1\n    idx2 = length(numbers)\n    \n    while idx1 < idx2\n\
    \        if abs(numbers[idx1] - numbers[idx2]) < threshold\n            return\
    \ true\n        end\n        \n        if numbers[idx1] > numbers[idx2]\n    \
    \        idx1 += 1\n        else\n            idx2 -= 1\n        end\n    end\n\
    \    \n    return false\nend", "    \n    numbers_sorted = sort(numbers)\n   \
    \ \n    idx = 0\n    while idx < length(numbers_sorted)\n        if numbers_sorted[idx]\
    \ - numbers_sorted[idx - 1] < threshold\n            return true\n        else\n\
    \            idx += 1\n        end\n    end\n    \n    return false\nend", " \
    \   \n    distances = Vector{Float64}(undef, length(numbers))\n    for n in numbers\n\
    \        distances[findfirst(isequal(n), distances)] = sqrt(sum((n-numbers)^2))\n\
    \    end\n    \n    close = findfirst(isequal(threshold), distances)\n    \n \
    \   return close != nothing\nend", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    numbers_sorted = sort(numbers)\n    \n    closed_numbers\
    \ = numbers_sorted[numbers_sorted .< threshold]\n    \n    return length(closed_numbers)\
    \ > 1\nend\n</cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    distances = Vector{Float64}(undef,\
    \ 0)\n    \n    for n in numbers\n        distances = distances + [abs(n - numbers[1])]\n\
    \    end\n    \n    distances = distances[2:end]\n    \n    distances = sort(distances)\n\
    \    \n    distances[1] = threshold\n    \n    return distances[1] > threshold\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    numbers_sorted = sort(numbers)\n\
    \    \n    closest_numbers = numbers_sorted[1..end]\n    \n    closest_numbers_sorted\
    \ = sort(closest_numbers)\n    \n    closest_numbers_diffs = closest_numbers_sorted\
    \ .- numbers_sorted\n    \n    closest_numbers_diffs_sorted = sort(closest_numbers_diffs)\n\
    \    \n    closest_numbers_diffs_sorted_diff = closest_numbers_diffs_sorted .-\
    \ closest_numbers_sorted\n    \n    closest_numbers_diffs_sorted_diff_sorted =\
    \ sort(closest_numbers_diffs_sorted_diff)\n    \n    closest_numbers_diffs_sorted_diff_sorted_diff\
    \ = closest_numbers_diffs_sorted_diff .- closest_numbers_sorted_diff\n    \n \
    \   closest_numbers_diffs_sorted_diff_sorted_diff_sorted = sort(closest_numbers_diffs_sorted_diff_sorted_diff)\n\
    \    \n    closest_numbers_diffs_sorted_diff_sorted_diff_sorted_diff = closest_numbers_diffs_sorted_diff_sorted_diff\
    \ .- closest_numbers_sorted_diff_sorted\n    \n    closest_numbers_diffs_sorted_diff_sorted_diff_sorted_diff_sorted\
    \ = sort(closest_numbers_diffs_sorted_diff_sorted_diff_sorted_diff)\n    \n  \
    \  closest_numbers_diffs_sorted_diff_sorted_diff_sorted_diff_sorted_diff = closest_numbers_diffs_sorted_diff_sorted_diff_sorted_diff\
    \ .- closest_numbers_sorted_diff_sorted_diff\n    \n    closest_numbers_diffs_sorted_diff_sorted_diff_sorted_diff_sorted_diff_sorted\
    \ = sort(closest_numbers_diffs_sorted_diff_sorted_diff_sorted_diff_sorted_diff)\n\
    \    \n    closest_numbers_diffs_sorted_diff_sorted_diff_sorted_diff_sorted_diff_sorted_diff\
    \ = closest_numbers_diffs_sorted_diff_sorted_diff_sorted_diff_sorted_diff .- closest_numbers_sorted_diff_sorted_diff_sorted\n\
    \    \n    closest_numbers_diffs_sorted_diff_sorted_diff_sorted_diff_sorted_diff_sorted_diff_sorted\
    \ = sort(closest_numbers_diffs_sorted_diff_sorted_diff_sorted_diff_sorted_diff_sorted_diff)\n\
    \    \n    closest_numbers_diffs_sorted_diff_sorted_diff_sorted_diff_sorted_diff_sorted_diff_sorted\
    \ = sort(closest_numbers_diffs_sorted_diff_sorted_diff_sorted_diff_sorted_diff_sorted_diff_sorted)\n\
    \    \n    closest_numbers_diffs_sorted_diff_sorted_diff_sorted_diff_sorted_diff_sorted_diff_sorted_diff\
    \ = closest_numbers_diffs_sorted_diff_sorted_diff_sorted_diff_sorted_diff_sorted_diff\
    \ .- closest_numbers_sorted_diff_sorted_diff_sorted_diff\n    \n    closest_numbers_diffs_sorted_diff_sorted_diff_sorted_diff_sorted_diff_sorted_diff_sorted_diff_sorted\
    \ = sort(closest_numbers_diffs_sorted_diff_sorted_diff_sorted_diff_sorted_diff_sorted_diff_sorted_diff)\n",
  "    \n    distances = Vector{Float64}(undef, length(numbers))\n    for i in 1:length(numbers)\n\
    \        distances[i] = sqrt((numbers[i] - numbers[i-1])^2)\n    end\n    \n \
    \   for i in 1:length(numbers)\n        for j in i+1:length(numbers)\n       \
    \     if distances[i] > distances[j] && distances[i] < threshold\n           \
    \     return true\n            end\n        end\n    end\n    \n    return false\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    closed_numbers = Set{Float64}()\n\
    \    for n in numbers\n        if n in closed_numbers\n            continue\n\
    \        closed_numbers.add(n)\n        closed_numbers.add(n - threshold)\n  \
    \      closed_numbers.add(n + threshold)\n    end\n    \n    return length(closed_numbers)\
    \ > 1\nend", "    \n    numbers = sort(numbers)\n    \n    idx = 0\n    while\
    \ idx < length(numbers)\n        if numbers[idx] - numbers[idx - 1] > threshold\n\
    \            return true\n        end\n        idx += 1\n    end\n    return false\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    numbers = sort(numbers)\n\
    \    \n    i = 2\n    while i < length(numbers)\n        if numbers[i] - numbers[i-1]\
    \ > threshold\n            return true\n        end\n        i += 1\n    end\n\
    \    \n    return false\nend", "    \n    numbers_sorted = sort(numbers)\n   \
    \ \n    closest_elements = numbers_sorted[numbers_sorted .< threshold]\n    \n\
    \    return length(closest_elements) > 1\nend\n</cell>\n<code language=julia-1.5>\n\
    @time has_close_elements(numbers, 0.2)\n</cell>\n<code language=julia-1.5>\n@time\
    \ has_close_elements(numbers, 0.3)\n</cell>\n<text>\nExercise: Write a function\
    \ that checks if a number is in a given list of numbers, sorted in ascending order.",
  "    \n    numbers_sorted = sort(numbers)\n    \n    index_of_closest = find_closest_index(numbers_sorted,\
    \ threshold)\n    \n    return index_of_closest != length(numbers_sorted)\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    numbers_sorted = sort(numbers)\n\
    \    \n    distances = zeros(length(numbers_sorted))\n    \n    for i = 1:length(numbers_sorted)\n\
    \        distances[i] = abs(numbers_sorted[i] - numbers_sorted[(i+1)%length(numbers_sorted)])\n\
    \    end\n    \n    close = find(distances <= threshold)\n    \n    return length(close)\
    \ > 0\nend\n</cell>\n<code language=julia-1.5>\n@time has_close_elements(numbers,\
    \ 0.01);\n</cell>\n<code language=julia-1.5>\n@time has_close_elements(numbers,\
    \ 0.05);\n</cell>\n<code language=julia-1.5>\n@time has_close_elements(numbers,\
    \ 0.01);\n</cell>\n<text>\nExercise 2\nWrite a function that returns all elements\
    \ from given vector that are closer to each other than\ngiven threshold.", " \
    \   \n    numbers_sorted = sort(numbers)\n    \n    index_of_closest = find_index(numbers_sorted,\
    \ threshold)\n    \n    if index_of_closest == length(numbers_sorted)\n      \
    \  return false\n    else\n        return true\n    end\nend\n</cell>\n<text>\n\
    Problem 4\nWrite a function that takes in a list of numbers and a threshold and\
    \ returns a list of numbers that are closer to each other than the threshold.",
  "    \n    distances = zeros(Float64, length(numbers))\n    for i = 1:length(numbers)\n\
    \        distances[i] = abs(numbers[i] - threshold)\n    end\n    \n    close\
    \ = find(distances <= 1)\n    \n    return length(close) > 0\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    numbers_sorted = sort(numbers)\n    \n    for\
    \ index in 2:length(numbers_sorted)\n        if numbers_sorted[index] - numbers_sorted[index-1]\
    \ < threshold\n            return true\n        end\n    end\n    \n    return\
    \ false\nend\n</cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    numbers = sort(numbers)\n    \n \
    \   i = 2\n    while i < length(numbers)\n        if abs(numbers[i] - numbers[i-1])\
    \ < threshold\n            return true\n        end\n        i = i + 1\n    end\n\
    \    \n    return false\nend", "    \n    numbers_sorted = sort(numbers)\n   \
    \ \n    closest_numbers = numbers_sorted[numbers_sorted .< threshold]\n    \n\
    \    return length(closest_numbers) > 1\nend\n</cell>\n<text>\nLet's test our\
    \ function with some test cases:", "    \n    numbers_sorted = sort(numbers)\n\
    \    \n    i = 0\n    \n    while i < length(numbers_sorted)\n        if numbers_sorted[i]\
    \ == numbers_sorted[i+1]\n            i += 1\n        else\n            if abs(numbers_sorted[i]\
    \ - numbers_sorted[i+1]) < threshold\n                return true\n          \
    \  end\n        end\n    end\n    \n    return false\nend", "    \n    closed_numbers\
    \ = Vector{Float64}()\n    \n    for number in numbers\n        if number - threshold\
    \ < numbers && number + threshold > numbers\n            push!(closed_numbers,\
    \ number)\n        end\n    end\n    \n    return length(closed_numbers) > 0\n\
    end\n</cell>\n<code language=julia-1.5>\n@time has_close_elements(numbers, 0.2)\n\
    </cell>\n<text>\nThe function above is very fast and can be used in a vectorized\
    \ manner as well.", "    \n    numbers_sorted = sort(numbers)\n    \n    idx =\
    \ 0\n    while idx < length(numbers_sorted)\n        if numbers_sorted[idx] -\
    \ numbers_sorted[idx - 1] < threshold\n            return true\n        end\n\
    \        idx += 1\n    end\n    \n    return false\nend", "    \n    distances\
    \ = zeros(length(numbers), length(numbers))\n    for i = 1:length(numbers)\n \
    \       for j = 1:length(numbers)\n            distances[i, j] = abs(numbers[i]\
    \ - numbers[j])\n        end\n    end\n    \n    close = zeros(length(numbers),\
    \ length(numbers))\n    for i = 1:length(numbers)\n        for j = 1:length(numbers)\n\
    \            if distances[i, j] < threshold\n                close[i, j] = true\n\
    \            end\n        end\n    end\n    \n    close\nend", "    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    numbers_sorted = sort(numbers)\n    \n\
    \    closest_numbers = numbers_sorted[findall(numbers_sorted .< threshold)]\n\
    \    \n    return length(numbers_sorted) - length(closest_numbers) > 1\nend",
  "    \n    numbers_sorted = sort(numbers)\n    \n    i = numbers_sorted.length -\
    \ 1\n    \n    while i >= 1 \n        if numbers_sorted[i] - numbers_sorted[i\
    \ - 1] < threshold \n            return true\n        end\n        \n        i\
    \ = i - 1\n    end\n    \n    return false\nend\n</cell>\n<text>\nThe function\
    \ above checks if there are any two numbers in the given list of numbers that\
    \ are closer to each other than the given threshold. If there are, it returns\
    \ true. Otherwise, it returns false.", "    \n    numbers_sorted = sort(numbers)\n\
    \    \n    index_of_first_closest = findfirst(numbers_sorted .< threshold)\n \
    \   \n    if index_of_first_closest == nothing\n        return false\n    end\n\
    \    \n    index_of_second_closest = findfirst(numbers_sorted .> threshold)\n\
    \    \n    if index_of_second_closest == nothing\n        return false\n    end\n\
    \    \n    if index_of_first_closest == index_of_second_closest\n        return\
    \ true\n    end\n    \n    return index_of_first_closest < index_of_second_closest\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    numbers_sorted = sort(numbers)\n\
    \    \n    closest_numbers = numbers_sorted[numbers_sorted .< threshold]\n   \
    \ \n    return length(closest_numbers) > 1\nend", "    \n    distances = zeros(length(numbers))\n\
    \    for (i,n) in enumerate(numbers)\n        distances[i] = abs(n - threshold)\n\
    \    end\n    \n    close = any(distances <= threshold)\n    \n    return close\n\
    end", "    \n    closed_numbers = Vector{Float64}()\n    \n    for number in numbers\n\
    \        if abs(number - numbers[1]) < threshold\n            push!(closed_numbers,\
    \ numbers[1])\n        end\n    end\n    \n    return length(closed_numbers) >\
    \ 0\nend\n</cell>\n<code language=julia-1.5>\n# Test function\n@test has_close_elements([1,\
    \ 2, 3, 4], 0.5)\n</cell>\n<text>\nExercise 2\nWrite a function that checks if\
    \ a number is in a given list of numbers, ignoring order.", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    numbers_sorted = sort(numbers)\n\
    \    \n    distances = zeros(length(numbers_sorted))\n    \n    for i = 1:length(numbers_sorted)\n\
    \        distances[i] = abs(numbers_sorted[i] - numbers_sorted[i+1])\n    end\n\
    \    \n    close = find(distances <= threshold)\n    \n    return length(close)\
    \ > 0\nend\n</cell>\n<code language=julia-1.5>", "    \n    numbers_sorted = sort(numbers)\n\
    \    \n    i = 0\n    \n    while i < length(numbers_sorted)\n        if numbers_sorted[i]\
    \ == numbers_sorted[i+1]\n            i += 1\n        else\n            if abs(numbers_sorted[i]\
    \ - numbers_sorted[i+1]) < threshold\n                return true\n          \
    \  end\n        end\n    end\n    \n    return false\nend", "    \n    numbers_sorted\
    \ = sort(numbers)\n    \n    threshold = threshold * threshold\n    \n    closed_numbers\
    \ = numbers_sorted\n    \n    for number in numbers_sorted\n        if number\
    \ - threshold < closed_numbers[1]\n            closed_numbers[1] = number\n  \
    \      end\n        if number + threshold > closed_numbers[2]\n            closed_numbers[2]\
    \ = number\n        end\n    end\n    \n    return closed_numbers[1] < closed_numbers[2]\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    closed_numbers = Set{Float64}()\n\
    \    for number in numbers\n        if number < threshold\n            closed_numbers.add(number)\n\
    \        end\n    end\n    \n    return length(closed_numbers) > 1\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    numbers_sorted = sort(numbers)\n    \n\
    \    i = 0\n    \n    while i < length(numbers_sorted)\n        \n        j =\
    \ i + 1\n        \n        while j < length(numbers_sorted)\n            \n  \
    \          if numbers_sorted[j] - numbers_sorted[i] < threshold\n            \
    \    return true\n            \n            j += 1\n        end\n        \n  \
    \      i += 1\n    end\n    \n    return false\nend", "    \n    numbers_sorted\
    \ = sort(numbers)\n    \n    i = 0\n    \n    while i < length(numbers_sorted)\n\
    \        if numbers_sorted[i] == numbers_sorted[i+1]\n            i += 1\n   \
    \     else\n            if abs(numbers_sorted[i] - numbers_sorted[i+1]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    \n  \
    \  return false\nend\n</cell>\n<code language=julia-1.5>", "    \n    numbers_sorted\
    \ = sort(numbers)\n    \n    closest_elements = numbers_sorted[numbers_sorted\
    \ .< threshold]\n    \n    return length(closest_elements) > 1\nend", "    \n\
    \    distances = zeros(Float64, length(numbers))\n    for i = 1:length(numbers)\n\
    \        distances[i] = abs(numbers[i] - threshold)\n    end\n    \n    has_close_elements\
    \ = any(distances <= threshold)\n    \n    return has_close_elements\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    distances = zeros(length(numbers))\n  \
    \  for i = 1:length(numbers)\n        distances[i] = abs(numbers[i] - threshold)\n\
    \    end\n    \n    close = any(distances .< 1e-3)\n    \n    return close\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    distances = Vector{Float64}(undef,\
    \ length(numbers))\n    for i in 1:length(numbers)\n        distances[i] = abs(numbers[i]\
    \ - threshold)\n    end\n    \n    has_close = false\n    for i in 1:length(numbers)\n\
    \        if distances[i] < distances[i - 1]\n            has_close = true\n  \
    \          break\n        end\n    end\n    \n    return has_close\nend", "  \
    \  \n    closed_numbers = Vector{Float64}()\n    for number in numbers\n     \
    \   if abs(number - numbers[1]) < threshold\n            closed_numbers = [number]\n\
    \        else\n            closed_numbers = [numbers[1], number]\n        end\n\
    \    end\n    \n    return length(closed_numbers) > 1\nend", "    \n    numbers_sorted\
    \ = sort(numbers)\n    \n    i = 0\n    \n    while i < length(numbers_sorted)\n\
    \        \n        j = i + 1\n        \n        while j < length(numbers_sorted)\n\
    \            \n            if numbers_sorted[j] - numbers_sorted[i] < threshold\n\
    \                return true\n            \n            j += 1\n            \n\
    \        end\n        \n        i += 1\n        \n    end\n    \n    return false\n\
    \    \nend\n</cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    distances = zeros(length(numbers))\n\
    \    for i=1:length(numbers)\n        distances[i] = abs(numbers[i] - threshold)\n\
    \    end\n    \n    return any(distances <= 1.0)\nend", "    \n    numbers_sorted\
    \ = sort(numbers)\n    \n    index_1 = find(numbers_sorted .< threshold)[1]\n\
    \    index_2 = find(numbers_sorted .> threshold)[1]\n    \n    if index_1 == index_2\n\
    \        return false\n    else\n        return true\n    end\nend", "    \n \
    \   numbers_sorted = sort(numbers)\n    \n    index_of_closest = findfirst(x ->\
    \ abs(x - numbers_sorted[1]) < threshold, numbers_sorted)\n    \n    if index_of_closest\
    \ == length(numbers_sorted)\n        return false\n    else\n        return true\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>", "    \n    numbers_sorted\
    \ = sort(numbers)\n    \n    index_of_closest = findfirst(x -> abs(x - numbers_sorted[1])\
    \ < threshold, numbers_sorted)\n    \n    if index_of_closest == length(numbers_sorted)\n\
    \        return false\n    else\n        return true\n    end\nend", "    \n \
    \   numbers_sorted = sort(numbers)\n    \n    closed_numbers = numbers_sorted[numbers_sorted\
    \ .< threshold]\n    \n    return length(closed_numbers) > 1\nend", "    \n  \
    \  numbers_sorted = sort(numbers)\n    \n    i = 0\n    while i < length(numbers_sorted)\n\
    \        \n        if numbers_sorted[i] == numbers_sorted[i+1]\n            i\
    \ += 1\n        else\n            \n            if abs(numbers_sorted[i] - numbers_sorted[i+1])\
    \ < threshold\n                return true\n            end\n        end\n   \
    \ end\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>", "   \
    \ \n    distances = zeros(length(numbers), length(numbers))\n    for ii in 1:length(numbers)\n\
    \        for jj in 1:length(numbers)\n            distances[ii, jj] = abs(numbers[ii]\
    \ - numbers[jj])\n        end\n    end\n    \n    close = zeros(length(numbers),\
    \ length(numbers))\n    for ii in 1:length(numbers)\n        for jj in 1:length(numbers)\n\
    \            if distances[ii, jj] < threshold\n                close[ii, jj] =\
    \ 1\n            end\n        end\n    end\n    \n    return close\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    distances = zeros(length(numbers))\n  \
    \  for i = 1:length(numbers)\n        distances[i] = abs(numbers[i] - threshold)\n\
    \    end\n    \n    close = find(distances <= 1)\n    \n    return length(close)\
    \ > 0\nend\n</cell>\n<code language=julia-1.5>", "    \n    distances = zeros(length(numbers))\n\
    \    for i=1:length(numbers)\n        distances[i] = abs(numbers[i] - threshold)\n\
    \    end\n    \n    close = zeros(length(numbers))\n    for i=1:length(numbers)\n\
    \        close[i] = distances[i] < threshold\n    end\n    \n    return close\n\
    end", "    \n    numbers_sorted = sort(numbers)\n    \n    i = numbers_sorted.length\
    \ - 1\n    j = numbers_sorted.length - 1\n    \n    while i >= 0 && j >= 0\n \
    \       if numbers_sorted[i] > numbers_sorted[j]\n            i -= 1\n       \
    \ elseif numbers_sorted[i] < numbers_sorted[j]\n            j -= 1\n        else\n\
    \            if abs(numbers_sorted[i] - numbers_sorted[j]) < threshold\n     \
    \           return true\n            else\n                i -= 1\n          \
    \      j -= 1\n            end\n        end\n    end\n    \n    return false\n\
    end", "    \n    numbers_sorted = sort(numbers)\n    \n    for index in 2:length(numbers_sorted)\n\
    \        if numbers_sorted[index] - numbers_sorted[index-1] > threshold\n    \
    \        return true\n        end\n    end\n    \n    return false\nend", "  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    distances\
    \ = zeros(length(numbers), length(numbers))\n    for (i,j) in combinations(numbers,\
    \ 2)\n        distances[i,j] = norm(i - j)\n    end\n    \n    close = zeros(length(numbers),\
    \ length(numbers))\n    for (i,j) in combinations(numbers, 2)\n        if distances[i,j]\
    \ < threshold\n            close[i,j] = true\n        end\n    end\n    \n   \
    \ return close\nend", "    \n    distances = zeros(length(numbers))\n    for n\
    \ in numbers\n        distances[find(numbers .== n)] = sqrt((numbers[find(numbers\
    \ .== n)] - n)^2)\n    end\n    \n    distances[distances > threshold] = NaN\n\
    \    \n    return any(distances .!= NaN)\nend", "    \n    numbers = sort(numbers)\n\
    \    \n    i = 2\n    \n    while i < length(numbers)\n        if numbers[i] -\
    \ numbers[i - 1] > threshold\n            return true\n        end\n        i\
    \ = i + 1\n    end\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    numbers_sorted = sort(numbers)\n    \n    closest_elements = numbers_sorted[1..end]\n\
    \    \n    closest_elements_sorted = sort(closest_elements)\n    \n    closest_elements_sorted_diff\
    \ = closest_elements_sorted - closest_elements\n    \n    closest_elements_sorted_diff_sum\
    \ = sum(closest_elements_sorted_diff)\n    \n    \n    if closest_elements_sorted_diff_sum\
    \ < threshold\n        return true\n    else\n        return false\n    end\n\
    end", "    \n    numbers_sorted = sort(numbers)\n    \n    closed_numbers = numbers_sorted[numbers_sorted\
    \ .< threshold]\n    \n    return length(closed_numbers) > 1\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time has_close_elements(numbers, 0.2)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that checks if a number is in a given list of numbers,\
    \ ignoring order.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    numbers_sorted = sort(numbers)\n    \n    close_to_threshold = false\n\
    \    \n    for number in numbers_sorted\n        if number - threshold < numbers_sorted[1]\n\
    \            close_to_threshold = true\n            break\n        end\n    end\n\
    \    \n    return close_to_threshold\nend", "    \n    numbers = sort(numbers)\n\
    \    \n    i = 2\n    while i < length(numbers)\n        if numbers[i] - numbers[i\
    \ - 1] < threshold\n            return true\n        end\n        i += 1\n   \
    \ end\n    return false\nend", "    \n    distances = zeros(length(numbers))\n\
    \    for i = 1:length(numbers)\n        distances[i] = abs(numbers[i] - threshold)\n\
    \    end\n    \n    return any(distances <= 1)\nend", "    \n    numbers_sorted\
    \ = sort(numbers)\n    \n    closest_numbers = numbers_sorted[findall(numbers_sorted\
    \ .< threshold)]\n    \n    return length(numbers_sorted) - length(closest_numbers)\
    \ > 1\nend", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    numbers_sorted = sort(numbers)\n    \n    for index in 1:length(numbers_sorted)\n\
    \        if numbers_sorted[index] - numbers_sorted[index-1] > threshold\n    \
    \        return true\n        end\n    end\n    \n    return false\nend", "  \
    \  \n    numbers = sort(numbers)\n    \n    idx = 1\n    while idx < length(numbers)\n\
    \        if numbers[idx] - numbers[idx - 1] < threshold\n            return true\n\
    \        else\n            idx += 1\n        end\n    end\n    \n    return false\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    numbers_sorted = sort(numbers)\n\
    \    \n    closest_elements = numbers_sorted[findall(numbers_sorted .< threshold)]\n\
    \    \n    return length(closest_elements) > 1\nend", "    \n    numbers_sorted\
    \ = sort(numbers)\n    \n    closest_elements = numbers_sorted[1:length(numbers_sorted)-1]\n\
    \    \n    closest_elements_sorted = sort(closest_elements)\n    \n    closest_elements_diffs\
    \ = closest_elements_sorted .- numbers_sorted\n    \n    closest_elements_diffs_sorted\
    \ = sort(closest_elements_diffs)\n    \n    closest_elements_diffs_sorted_diff\
    \ = closest_elements_diffs_sorted .- closest_elements_diffs_sorted[1]\n    \n\
    \    closest_elements_diffs_sorted_diff_sorted = sort(closest_elements_diffs_sorted_diff)\n\
    \    \n    closest_elements_diffs_sorted_diff_sorted_diff = closest_elements_diffs_sorted_diff\
    \ .- closest_elements_diffs_sorted_diff[1]\n    \n    closest_elements_diffs_sorted_diff_sorted_diff_sorted\
    \ = sort(closest_elements_diffs_sorted_diff_sorted_diff)\n    \n    closest_elements_diffs_sorted_diff_sorted_diff_sorted_diff\
    \ = closest_elements_diffs_sorted_diff_sorted_diff .- closest_elements_diffs_sorted_diff_sorted_diff[1]\n\
    \    \n    closest_elements_diffs_sorted_diff_sorted_diff_sorted_diff_sorted =\
    \ sort(closest_elements_diffs_sorted_diff_sorted_diff_sorted_diff)\n    \n   \
    \ closest_elements_diffs_sorted_diff_sorted_diff_sorted_diff_sorted_diff = closest_elements_diffs_sorted_diff_sorted_diff_sorted_diff\
    \ .- closest_elements_diffs_sorted_diff_sorted_diff_sorted_diff[1]\n    \n   \
    \ closest_elements_diffs_sorted_diff_sorted_diff_sorted_diff_sorted_diff_sorted\
    \ = sort(closest_elements_diffs_sorted_diff_sorted_diff_sorted_diff_sorted_diff)\n\
    \    \n    closest_elements_diffs_sorted_diff_sorted_diff_sorted_diff_sorted_diff_sorted_diff\
    \ = closest_elements_diffs_sorted_diff_sorted_diff_sorted_diff_sorted_diff .-\
    \ closest_elements_diffs_sorted_diff_sorted_diff_sorted_diff_sorted_diff[1]\n\
    \    \n    closest_elements_diffs_sorted_diff_sorted_diff_sorted_diff_sorted_diff_sorted_diff\
    \ = closest_elements_diffs_sorted_diff_sorted_diff_sorted_diff_sorted_diff .-\
    \ closest_elements_diffs_sorted_diff_sorted_diff_sorted_diff_sorted_diff[1]\n\
    \    \n    closest_elements_diffs_sorted_diff_sorted_diff_sorted_diff_sorted_diff_sorted_diff_sorted\
    \ = sort(closest_elements_diffs_sorted_diff_sorted_diff_sorted_diff_sorted_diff_sorted_diff)\n\
    \    \n    closest_elements_diffs_sorted_diff_sorted_diff_sorted_diff_sorted_diff_sorted_diff_sorted\
    \ = sort(closest_elements_diffs_sorted_diff_sorted_diff_sorted_diff_sorted_diff_sorted_diff)\n\
    \    \n    closest_elements_diffs_sorted_diff_sorted_diff_sorted_diff_sorted_diff_sorted_diff_",
  "    \n    distances = zeros(length(numbers))\n    for i = 1:length(numbers)\n \
    \       distances[i] = abs(numbers[i] - threshold)\n    end\n    \n    closest\
    \ = zeros(length(numbers))\n    \n    for i = 1:length(numbers)\n        closest\
    \ = copy(numbers)\n        closest = closest(i : end - 1)\n        closest = sort(closest,\
    \ by = distances)\n        \n        if length(closest) == 2 \n            return\
    \ true\n        end\n    end\n    \n    return false\nend", "    \n    numbers\
    \ = sort(numbers)\n    \n    i = 2\n    \n    while i < length(numbers)\n    \
    \    \n        if numbers[i] - numbers[i - 1] > threshold\n            return\
    \ true\n        end\n        \n        i = i + 1\n    end\n    \n    return false\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    distances = zeros(Float64,\
    \ length(numbers))\n    for (i,n) in enumerate(numbers)\n        distances[i]\
    \ = abs(n - threshold)\n    end\n    \n    return any(distances .< 1e-6)\nend",
  "    \n    numbers = sort(numbers)\n    \n    i = 2\n    while i < length(numbers)\n\
    \        if numbers[i] - numbers[i - 1] < threshold\n            return true\n\
    \        end\n        i += 1\n    end\n    \n    return false\nend", "    \n \
    \   distances = Vector{Float64}(undef, length(numbers))\n    for n in numbers\n\
    \        distances[n] = norm(n - numbers)\n    end\n    \n    close = Vector{Bool}(undef,\
    \ length(numbers))\n    for n in numbers\n        if distances[n] < threshold\n\
    \            close[n] = true\n        end\n    end\n    \n    return close\nend",
  "    \n    numbers_sorted = sort(numbers)\n    \n    index_of_closest = find_closest_index(numbers_sorted,\
    \ threshold)\n    \n    if index_of_closest == length(numbers_sorted)\n      \
    \  return false\n    else\n        return true\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    numbers = sort(numbers)\n    \n    idx = 0\n    while idx < length(numbers)\n\
    \        if numbers[idx] - numbers[idx - 1] > threshold\n            return true\n\
    \        end\n        idx += 1\n    end\n    \n    return false\nend", "    \n\
    \    numbers_sorted = sort(numbers)\n    \n    i = 0\n    \n    while i < length(numbers_sorted)\n\
    \        if numbers_sorted[i] == numbers_sorted[i+1]\n            i += 1\n   \
    \     else\n            numbers_sorted[i+1] = numbers_sorted[i]\n            i\
    \ += 1\n        end\n    end\n    \n    numbers_sorted = sort(numbers_sorted)\n\
    \    \n    i = 0\n    \n    while i < length(numbers_sorted)\n        if numbers_sorted[i]\
    \ == numbers_sorted[i+1]\n            i += 1\n        elseif numbers_sorted[i]\
    \ < threshold\n            return false\n        else\n            numbers_sorted[i+1]\
    \ = numbers_sorted[i]\n            i += 1\n        end\n    end\n    \n    return\
    \ true\nend", "    \n    numbers_sorted = sort(numbers)\n    \n    for n in numbers_sorted\n\
    \        if abs(n - numbers_sorted[1]) < threshold\n            return true\n\
    \        end\n    end\n    \n    return false\nend", "    \n    numbers = sort(numbers)\n\
    \    \n    i = 2\n    while i < length(numbers)\n        if numbers[i] - numbers[i\
    \ - 1] < threshold\n            return true\n        end\n        i += 1\n   \
    \ end\n    return false\nend", "    \n    numbers_sorted = sort(numbers)\n   \
    \ \n    for index in 2:length(numbers_sorted)\n        if numbers_sorted[index]\
    \ - numbers_sorted[index-1] < threshold\n            return true\n        end\n\
    \    end\n    \n    return false\nend", "    \n    distances = zeros(length(numbers))\n\
    \    for i = 1:length(numbers)\n        distances[i] = abs(numbers[i] - threshold)\n\
    \    end\n    \n    close = find(distances <= 1)\n    \n    return length(close)\
    \ > 0\nend", "    \n    distances = zeros(length(numbers))\n    for i=1:length(numbers)\n\
    \        distances[i] = abs(numbers[i] - threshold)\n    end\n    \n    close\
    \ = any(distances <= 1)\n    \n    return close\nend", "    \n    numbers_sorted\
    \ = sort(numbers)\n    \n    for index in 2:length(numbers_sorted)\n        if\
    \ numbers_sorted[index-1] - numbers_sorted[index] > threshold\n            return\
    \ true\n        end\n    end\n    \n    return false\nend", "    \n    numbers_sorted\
    \ = sort(numbers)\n    \n    index_of_closest = find_closest_index(numbers_sorted,\
    \ threshold)\n    \n    if index_of_closest == length(numbers_sorted)\n      \
    \  return false\n    else\n        return true\n    end\nend", "    \n    distances\
    \ = zeros(length(numbers))\n    for i=1:length(numbers)\n        distances[i]\
    \ = abs(numbers[i] - threshold)\n    end\n    \n    close = any(distances <= 1)\n\
    \    \n    return close\nend\n</cell>\n<code language=julia-1.5>", "    \n   \
    \ numbers_sorted = sort(numbers)\n    \n    for index in 1:length(numbers_sorted)\n\
    \        if numbers_sorted[index] - numbers_sorted[index-1] > threshold\n    \
    \        return true\n        end\n    end\n    \n    return false\nend", "  \
    \  \n    numbers_sorted = sort(numbers)\n    \n    index_of_closest = find_closest_index(numbers_sorted,\
    \ threshold)\n    \n    if index_of_closest == length(numbers_sorted)\n      \
    \  return false\n    else\n        return true\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    distances = zeros(length(numbers), length(numbers))\n    for i = 1:length(numbers)\n\
    \        for j = 1:length(numbers)\n            distances[i, j] = abs(numbers[i]\
    \ - numbers[j])\n        end\n    end\n    \n    close = zeros(length(numbers),\
    \ length(numbers))\n    for i = 1:length(numbers)\n        for j = 1:length(numbers)\n\
    \            if distances[i, j] < threshold\n                close[i, j] = true\n\
    \            else\n                close[i, j] = false\n            end\n    \
    \    end\n    end\n    \n    close = close.' \n    \n    return any(close)\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    numbers = sort(numbers)\n    \n\
    \    idx = 0\n    while idx < length(numbers)\n        if abs(numbers[idx] - numbers[idx\
    \ + 1]) < threshold\n            return true\n        end\n        idx += 1\n\
    \    end\n    return false\nend", "    \n    numbers_sorted = sort(numbers)\n\
    \    \n    has_close_elements = false\n    \n    for index in 1:length(numbers_sorted)\n\
    \        if numbers_sorted[index] - numbers_sorted[index-1] > threshold\n    \
    \        has_close_elements = true\n            break\n        end\n    end\n\
    \    \n    return has_close_elements\nend", "    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    numbers_sorted = sort(numbers)\n    \n\
    \    numbers_sorted.length == 2\n    \n    numbers_sorted[1] < numbers_sorted[2]\n\
    \    \n    numbers_sorted[1] < numbers_sorted[2]\n    \n    numbers_sorted[1]\
    \ < numbers_sorted[2]\n    \n    numbers_sorted[1] < numbers_sorted[2]\n    \n\
    \    numbers_sorted[1] < numbers_sorted[2]\n    \n    numbers_sorted[1] < numbers_sorted[2]\n\
    \    \n    numbers_sorted[1] < numbers_sorted[2]\n    \n    numbers_sorted[1]\
    \ < numbers_sorted[2]\n    \n    numbers_sorted[1] < numbers_sorted[2]\n    \n\
    \    numbers_sorted[1] < numbers_sorted[2]\n    \n    numbers_sorted[1] < numbers_sorted[2]\n\
    \    \n    numbers_sorted[1] < numbers_sorted[2]\n    \n    numbers_sorted[1]\
    \ < numbers_sorted[2]\n    \n    numbers_sorted[1] < numbers_sorted[2]\n    \n\
    \    numbers_sorted[1] < numbers_sorted[2]\n    \n    numbers_sorted[1] < numbers_sorted[2]\n\
    \    \n    numbers_sorted[1] < numbers_sorted[2]\n    \n    numbers_sorted[1]\
    \ < numbers_sorted[2]\n    \n    numbers_sorted[1] < numbers_sorted[2]\n    \n\
    \    numbers_sorted[1] < numbers_sorted[2]\n    \n    numbers_sorted[1] < numbers_sorted[2]\n\
    \    \n    numbers_sorted[1] < numbers_sorted[2]\n    \n    numbers_sorted[1]\
    \ < numbers_sorted[2]\n    \n    numbers_sorted[1] < numbers_sorted[2]\n    \n\
    \    numbers_sorted[1] < numbers_sorted[2]\n    \n    numbers_sorted[1] < numbers_sorted[2]\n\
    \    \n    numbers_sorted[1] < numbers_sorted[2]\n    \n    numbers_sorted[1]\
    \ < numbers_sorted[2]\n    \n    numbers_sorted[1] < numbers_sorted[2]\n    \n\
    \    numbers_sorted[1] < numbers_sorted[2]\n    \n    numbers_sorted[1] < numbers_sorted[2]\n\
    \    \n    numbers_sorted[1] < numbers_sorted[2]\n    \n    numbers_sorted[1]\
    \ < numbers_sorted[2]\n    \n    numbers_sorted[1] < numbers_sorted[2]\n    \n\
    \    numbers_sorted[1] < numbers_sorted[2]\n    \n    numbers_sorted[1] < numbers_sorted[2]\n\
    \    \n    numbers_sorted[1] < numbers_sorted[2]\n    \n    numbers_sorted[1]\
    \ < numbers_", "    \n    distances = zeros(length(numbers))\n    for i = 1:length(numbers)\n\
    \        distances[i] = abs(numbers[i] - threshold)\n    end\n    \n    return\
    \ any(distances <= 1)\nend", "    \n    numbers_sorted = sort(numbers)\n    \n\
    \    index_of_closest = find_closest_index(numbers_sorted, threshold)\n    \n\
    \    if index_of_closest == length(numbers_sorted)\n        return false\n   \
    \ else\n        return true\n    end\nend", "    \n    numbers_sorted = sort(numbers)\n\
    \    \n    i = numbers_sorted.length - 1\n    \n    while i >= 0 \n        \n\
    \        if numbers_sorted[i] == numbers_sorted[i+1] \n            \n        \
    \    if numbers_sorted[i] > threshold \n                \n                return\
    \ true\n            \n            elseif numbers_sorted[i] < threshold \n    \
    \            \n                return false\n            \n            else\n\
    \                \n                return true\n            \n            end\n\
    \            \n        else\n            \n            return true\n         \
    \   \n        end\n        \n        i = i - 1\n        \n    end\n    \n    return\
    \ false\n    \nend\n</cell>\n<code language=julia-1.4>", "    \n    numbers_sorted\
    \ = sort(numbers)\n    \n    closest_elements = numbers_sorted[numbers_sorted\
    \ .< threshold]\n    \n    closest_elements_sorted = sort(closest_elements)\n\
    \    \n    has_close_elements = length(numbers_sorted) == length(closest_elements_sorted)\n\
    \    \n    return has_close_elements\nend", "    \n    distances = Vector{Float64}(undef,\
    \ 0)\n    for n in numbers\n        distances = vcat(distances, distance(n, threshold))\n\
    \    end\n    \n    return distances.min() <= threshold\nend", "    \n    numbers_sorted\
    \ = sort(numbers)\n    \n    i = 0\n    \n    while i < length(numbers_sorted)\n\
    \        \n        j = i + 1\n        \n        while j < length(numbers_sorted)\n\
    \            \n            if numbers_sorted[j] - numbers_sorted[i] < threshold\n\
    \                return true\n            \n            j += 1\n            \n\
    \        end\n        \n        i += 1\n        \n    end\n    \n    return false\n\
    \    \nend", "    \n    numbers_sorted = sort(numbers)\n    \n    threshold =\
    \ threshold * threshold\n    \n    i = 0\n    \n    while i < length(numbers_sorted)\n\
    \        \n        j = i + 1\n        \n        while j < length(numbers_sorted)\n\
    \            \n            if abs(numbers_sorted[i] - numbers_sorted[j]) < threshold\n\
    \                return true\n            \n            j += 1\n            \n\
    \        end\n        \n        i += 1\n    end\n    \n    return false\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    numbers_sorted = sort(numbers)\n\
    \    \n    closest_elements = numbers_sorted[numbers_sorted .< threshold]\n  \
    \  \n    return length(closest_elements) > 1\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    numbers_sorted\
    \ = sort(numbers)\n    \n    for index in 1:length(numbers_sorted)\n        if\
    \ numbers_sorted[index] - numbers_sorted[index-1] > threshold\n            return\
    \ true\n        end\n    end\n    \n    return false\nend", "    \n    distances\
    \ = zeros(length(numbers))\n    for i=1:length(numbers)\n        distances[i]\
    \ = abs(numbers[i] - threshold)\n    end\n    \n    close = any(distances <= 1)\n\
    \    \n    return close\nend\n</cell>\n<code language=julia-1.5>", "    \n   \
    \ distances = Vector{Float64}(undef, length(numbers))\n    for n in numbers\n\
    \        distances[n] = abs(n - threshold)\n    end\n    \n    close = any(distances\
    \ .< distances[1:end-1])\n    \n    return close\nend", "    \n    distances =\
    \ zeros(length(numbers))\n    for i = 1:length(numbers)\n        distances[i]\
    \ = abs(numbers[i] - threshold)\n    end\n    \n    close = zeros(length(numbers))\n\
    \    for i = 1:length(numbers)\n        if distances[i] < distances[i - 1]\n \
    \           close[i] = true\n        else\n            close[i] = false\n    \
    \    end\n    end\n    \n    return any(close)\nend\n</cell>\n<code language=julia-1.4>",
  "    \n    distances = zeros(length(numbers))\n    for i=1:length(numbers)\n   \
    \     distances[i] = abs(numbers[i] - threshold)\n    end\n    \n    close = find(distances\
    \ == min(distances))\n    \n    return length(close) > 0\nend\n</cell>\n<code\
    \ language=julia-1.4>", "    \n    numbers_sorted = sort(numbers)\n    \n    has_close_elements\
    \ = false\n    \n    for index1 in 1:length(numbers_sorted)\n        for index2\
    \ in index1+1:length(numbers_sorted)\n            if abs(numbers_sorted[index1]\
    \ - numbers_sorted[index2]) < threshold\n                has_close_elements =\
    \ true\n                break\n            end\n        end\n    end\n    \n \
    \   return has_close_elements\nend\n</cell>\n<code language=julia-1.5>", "   \
    \ \n    numbers_sorted = sort(numbers)\n    \n    for index in 1:length(numbers_sorted)\n\
    \        if numbers_sorted[index] - numbers_sorted[index-1] < threshold\n    \
    \        return true\n        end\n    end\n    \n    return false\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    numbers_sorted = sort(numbers)\n    \n\
    \    i = 0\n    while i < length(numbers_sorted)\n        if numbers_sorted[i]\
    \ < threshold\n            i += 1\n        else\n            j = i\n         \
    \   while j < length(numbers_sorted)\n                if numbers_sorted[j] < threshold\n\
    \                    j += 1\n                else\n                    if numbers_sorted[j]\
    \ - numbers_sorted[i] < threshold\n                        return true\n     \
    \               else\n                        i += 1\n                    end\n\
    \                end\n            end\n        end\n    end\n    \n    return\
    \ false\nend", "    \n    closed_numbers = Vector{Float64}()\n    \n    for number\
    \ in numbers\n        if abs(number - numbers[1]) < threshold\n            push!(closed_numbers,\
    \ number)\n        end\n    end\n    \n    return length(closed_numbers) > 0\n\
    end\n</cell>\n<text>\nLet's test our function with some random numbers:", "  \
    \  \n    numbers_sorted = sort(numbers)\n    \n    i = 0\n    while i < length(numbers_sorted)\n\
    \        if numbers_sorted[i] == numbers_sorted[i+1]\n            i += 1\n   \
    \     else\n            if abs(numbers_sorted[i] - numbers_sorted[i+1]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    \n  \
    \  return false\nend", "    \n    numbers = sort(numbers)\n    \n    idx = 0\n\
    \    \n    while idx < length(numbers)\n        if numbers[idx] - numbers[idx\
    \ - 1] > threshold\n            return true\n        end\n        idx += 1\n \
    \   end\n    \n    return false\nend", "    \n    closed_numbers = Vector{Float64}()\n\
    \    \n    for number in numbers\n        if number - threshold < numbers && number\
    \ + threshold > numbers\n            push!(closed_numbers, number)\n        end\n\
    \    end\n    \n    return length(closed_numbers) > 0\nend", "    \n    numbers_sorted\
    \ = sort(numbers)\n    \n    idx = 0\n    while idx < length(numbers_sorted)\n\
    \        if numbers_sorted[idx] - numbers_sorted[idx - 1] < threshold\n      \
    \      return true\n        end\n        idx += 1\n    end\n    return false\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    numbers = sort(numbers)\n\
    \    \n    i = 2\n    while i < length(numbers)\n        if abs(numbers[i] - numbers[i-1])\
    \ < threshold\n            return true\n        end\n        i = i + 1\n    end\n\
    \    \n    return false\nend\n</cell>\n<code language=julia-1.5>", "    \n   \
    \ numbers_sorted = sort(numbers)\n    \n    i = 0\n    \n    while i < length(numbers_sorted)\n\
    \        \n        if numbers_sorted[i] == numbers_sorted[i+1]\n            \n\
    \            i += 1\n            \n        elseif abs(numbers_sorted[i] - numbers_sorted[i+1])\
    \ < threshold\n            \n            return true\n            \n        else\n\
    \            \n            i += 1\n            \n        end\n        \n    end\n\
    \    \n    return false\n    \nend\n</cell>\n<code language=julia-1.5>", "   \
    \ \n    numbers_sorted = sort(numbers)\n    \n    index_of_closest = findfirst(numbers_sorted\
    \ .< threshold)\n    \n    if index_of_closest == nothing\n        return false\n\
    \    end\n    \n    index_of_closest_previous = findfirst(numbers_sorted .> threshold)\
    \ \n    \n    if index_of_closest_previous == nothing\n        return false\n\
    \    end\n    \n    index_of_closest_next = findfirst(numbers_sorted .> threshold)\
    \ \n    \n    if index_of_closest_next == nothing\n        return false\n    end\n\
    \    \n    if index_of_closest == index_of_closest_previous\n        return false\n\
    \    end\n    \n    if index_of_closest == index_of_closest_next\n        return\
    \ false\n    end\n    \n    return true\nend", "    \n    numbers_sorted = sort(numbers)\n\
    \    \n    i = 0\n    \n    while i < length(numbers_sorted)\n        \n     \
    \   j = i + 1\n        \n        while j < length(numbers_sorted)\n          \
    \  \n            if numbers_sorted[j] - numbers_sorted[i] < threshold\n      \
    \          return true\n            \n            j += 1\n        end\n      \
    \  \n        i += 1\n    end\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    numbers = sort(numbers)\n    \n    i = 2\n    while i <= length(numbers)\n\
    \        if numbers[i] - numbers[i - 1] < threshold\n            return true\n\
    \        end\n        i += 1\n    end\n    return false\nend", "    \n    numbers_sorted\
    \ = sort(numbers)\n    \n    closest_elements = numbers_sorted[findall(numbers_sorted\
    \ .< threshold)]\n    \n    return length(closest_elements) > 1\nend", "    \n\
    \    numbers_sorted = sort(numbers)\n    \n    closest_numbers = numbers_sorted[numbers_sorted\
    \ .< threshold]\n    \n    return length(closest_numbers) > 1\nend", "    \n \
    \   distances = zeros(Float64, length(numbers))\n    for (i,n) in enumerate(numbers)\n\
    \        distances[i] = abs(n - threshold)\n    end\n    \n    has_close_elements\
    \ = distances.min < threshold\n    \n    return has_close_elements\nend\n</cell>\n\
    <code language=julia-1.4>", "    \n    numbers_sorted = sort(numbers)\n    \n\
    \    closest_numbers = numbers_sorted[numbers_sorted .< threshold]\n    \n   \
    \ return length(closest_numbers) > 1\nend", "    \n    distances = zeros(length(numbers),\
    \ length(numbers))\n    for i = 1:length(numbers)\n        for j = 1:length(numbers)\n\
    \            distances[i, j] = abs(numbers[i] - numbers[j])\n        end\n   \
    \ end\n    \n    close = zeros(length(numbers), length(numbers))\n    for i =\
    \ 1:length(numbers)\n        for j = 1:length(numbers)\n            if distances[i,\
    \ j] < threshold\n                close[i, j] = true\n            else\n     \
    \           close[i, j] = false\n            end\n        end\n    end\n    \n\
    \    close = close.' \n    \n    return any(close)\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    numbers = sort(numbers)\n    \n    i = 0\n    \n    while i < length(numbers)\n\
    \        \n        j = i + 1\n        \n        while j < length(numbers)\n  \
    \          \n            if numbers[j] - numbers[i] <= threshold\n           \
    \     return true\n            \n            j += 1\n            \n        end\n\
    \        \n        i += 1\n        \n    end\n    \n    return false\n    \nend\n\
    </cell>\n<code language=julia-1.4>", "    \n    numbers_sorted = sort(numbers)\n\
    \    \n    closest_numbers = numbers_sorted[numbers_sorted .< threshold]\n   \
    \ \n    return length(closest_numbers) > 1\nend", "    \n    numbers_sorted =\
    \ sort(numbers)\n    \n    index_of_closest = findfirst(x -> abs(x - numbers_sorted[1])\
    \ < threshold, numbers_sorted)\n    \n    if index_of_closest == length(numbers_sorted)\n\
    \        return false\n    else\n        return true\n    end\nend", "    \n \
    \   numbers_sorted = sort(numbers)\n    \n    idx = 0\n    while idx < length(numbers_sorted)\n\
    \        if numbers_sorted[idx] - numbers_sorted[idx - 1] < threshold\n      \
    \      return true\n        end\n        idx += 1\n    end\n    return false\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    numbers_sorted = sort(numbers)\n\
    \    \n    threshold = threshold * threshold\n    \n    idx = 0\n    while idx\
    \ < length(numbers_sorted)\n        if numbers_sorted[idx] - numbers_sorted[idx\
    \ - 1] > threshold\n            return true\n        end\n        idx += 1\n \
    \   end\n    \n    return false\nend", "    \n    distances = zeros(length(numbers))\n\
    \    for i=1:length(numbers)\n        distances[i] = abs(numbers[i] - threshold)\n\
    \    end\n    \n    close = find(distances <= 1)\n    \n    return length(close)\
    \ > 0\nend", "    \n    numbers_sorted = sort(numbers)\n    \n    for index in\
    \ 1:length(numbers_sorted)\n        if numbers_sorted[index] - numbers_sorted[index-1]\
    \ > threshold\n            return true\n        end\n    end\n    \n    return\
    \ false\nend\n</cell>\n<code language=julia-1.5>", "    \n    numbers_sorted =\
    \ sort(numbers)\n    \n    has_close_elements = false\n    \n    for n in numbers_sorted\n\
    \        if abs(n - threshold) < threshold\n            has_close_elements = true\n\
    \            break\n        end\n    end\n    \n    return has_close_elements\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    numbers_sorted = sort(numbers)\n\
    \    \n    i = 0\n    \n    while i < length(numbers_sorted)\n        if numbers_sorted[i]\
    \ == numbers_sorted[i+1]\n            i += 1\n        else\n            if abs(numbers_sorted[i]\
    \ - numbers_sorted[i+1]) < threshold\n                return true\n          \
    \  end\n        end\n    end\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    numbers = sort(numbers)\n    \n    i = length(numbers)\n    \n    while\
    \ i > 1\n        \n        j = i - 1\n        \n        while j > 1\n        \
    \    \n            if numbers[j] - numbers[j - 1] < threshold\n              \
    \  return true\n            end\n            \n            j = j - 1\n       \
    \ end\n        \n        i = i - 1\n    end\n    \n    return false\nend", " \
    \   \n    distances = zeros(Float64, length(numbers))\n    for n in numbers\n\
    \        distances[findfirst(isequal(n), distances)+1] = n\n    end\n    \n  \
    \  distances[distances == 0] = maximum(distances)\n    \n    distances[distances\
    \ > threshold] = NaN\n    \n    return any(distances)\nend", "    \n    numbers_sorted\
    \ = sort(numbers)\n    \n    i = numbers_sorted.length - 1\n    \n    while i\
    \ >= 0\n        if numbers_sorted[i] > threshold\n            numbers_sorted[i]\
    \ = numbers_sorted[i - 1]\n            numbers_sorted[i - 1] = threshold\n   \
    \         \n            i -= 1\n        else\n            i -= 1\n        end\n\
    \    end\n    \n    numbers_sorted = sort(numbers_sorted)\n    \n    return numbers_sorted\
    \ == numbers\nend", "    \n    numbers = sort(numbers)\n    \n    i = length(numbers)\n\
    \    \n    while i > 1\n        \n        if numbers[i-1] - numbers[i] > threshold\n\
    \            return true\n        end\n        \n        i = i - 1\n    end\n\
    \    \n    return false\nend\n</cell>\n<code language=julia-1.5>", "    \n   \
    \ distances = zeros(length(numbers))\n    for i = 1:length(numbers)\n        distances[i]\
    \ = abs(numbers[i] - threshold)\n    end\n    \n    close = find(distances ==\
    \ min(distances))\n    \n    return length(close) > 0\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    numbers_sorted = sort(numbers)\n    \n    closest_numbers = numbers_sorted[1:2]\n\
    \    \n    if numbers_sorted[1] < threshold\n        return false\n    end\n \
    \   \n    for number in numbers_sorted[2:end]\n        if number - closest_numbers[1]\
    \ > threshold\n            return true\n        end\n        closest_numbers =\
    \ [number, numbers_sorted[1]]\n    end\n    \n    return false\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    distances = zeros(length(numbers))\n  \
    \  for i=1:length(numbers)\n        distances[i] = abs(numbers[i] - threshold)\n\
    \    end\n    \n    close = any(distances <= 1)\n    \n    return close\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    numbers = sort(numbers)\n    \n\
    \    idx1 = 1\n    idx2 = length(numbers)\n    \n    while idx1 < idx2\n     \
    \   if abs(numbers[idx1] - numbers[idx2]) < threshold\n            return true\n\
    \        end\n        \n        idx1 += 1\n        idx2 -= 1\n    end\n    \n\
    \    return false\nend", "    \n    distances = zeros(length(numbers))\n    for\
    \ i = 1:length(numbers)\n        distances[i] = abs(numbers[i] - threshold)\n\
    \    end\n    \n    close = any(distances <= 1)\n    \n    return close\nend",
  "    \n    distances = zeros(length(numbers))\n    for i = 1:length(numbers)\n \
    \       distances[i] = abs(numbers[i] - threshold)\n    end\n    \n    return\
    \ any(distances <= threshold)\nend\n</cell>\n<code language=julia-1.5>", "   \
    \ \n    numbers = sort(numbers)\n    \n    i = 2\n    while i < length(numbers)\n\
    \        if numbers[i] - numbers[i-1] > threshold\n            return true\n \
    \       end\n        i += 1\n    end\n    \n    return false\nend", "    \n  \
    \  distances = zeros(length(numbers))\n    for i=1:length(numbers)\n        distances[i]\
    \ = abs(numbers[i] - threshold)\n    end\n    \n    close = any(distances <= 1)\n\
    \    \n    return close\nend\n</cell>\n<text>\nNow let's test our function with\
    \ some test cases:", "    \n    numbers_sorted = sort(numbers)\n    \n    closest_elements\
    \ = numbers_sorted[findall(numbers_sorted .< threshold)]\n    \n    return length(numbers_sorted)\
    \ == length(closest_elements)\nend\n</cell>\n<code language=julia-1.5>", "   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    numbers =\
    \ sort(numbers)\n    \n    i = 0\n    j = length(numbers)\n    \n    while i <\
    \ j\n        if numbers[i] - numbers[j] < threshold\n            return true\n\
    \        end\n        i += 1\n        j += 1\n    end\n    \n    return false\n\
    end", "    \n    numbers_sorted = sort(numbers)\n    \n    i = 0\n    \n    while\
    \ i < length(numbers_sorted)\n        \n        if numbers_sorted[i] == numbers_sorted[i+1]\n\
    \            \n            i += 1\n            \n        else\n            \n\
    \            if abs(numbers_sorted[i] - numbers_sorted[i+1]) < threshold\n   \
    \             \n                return true\n            \n            else\n\
    \                \n                i += 1\n            \n            end\n   \
    \         \n        end\n        \n    end\n    \n    return false\n    \nend\n\
    </cell>\n<code language=julia-1.5>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
