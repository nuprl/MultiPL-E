name: HumanEval_29_filter_by_prefix
language: jl
prompt: "\"\"\" Filter an input list of strings only for ones that start with a given\
  \ prefix.\n            \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
  \ prefix::String)::Vector{String} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
  \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
  , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
  ])\nend\n"
completions: ["    filter!(x -> startswith(x, prefix), strings)\nend\n</cell>\n<code\
    \ language=julia-1.4>\nfilter_by_prefix([\"foo\", \"bar\", \"baz\", \"qux\"],\
    \ \"foo\")\n</cell>\n<text>\nExercise\nWrite a function that filters a string\
    \ list by whether it starts with a given prefix.", "    \n    filtered_strings\
    \ = Vector{String}()\n    for string in strings\n        if string.starts_with(prefix)\n\
    \            push!(filtered_strings, string)\n        end\n    end\n    \n   \
    \ return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<text>\nfilter_by_prefix(L::AbstractVector,\
    \ prefix::AbstractString)", "    filter!(x -> startswith(prefix, x), strings)\n\
    end", "    \n    filtered = Vector{String}()\n    for s in strings\n        if\
    \ startswith(s,prefix)\n            push!(filtered,s)\n        end\n    end\n\
    \    \n    return filtered\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\",\"world\",\"foo\",\"bar\"],\"hello\")\n</cell>\n<text>\nfilter_by_prefix(s,prefix)\
    \ returns a new vector with all the elements of s that start with the prefix prefix.\
    \ \nIf prefix is missing, all elements of s are returned.", "    \n    filtered_strings\
    \ = Vector{String}()\n    for string in strings\n        if string.starts_with(prefix)\n\
    \            push!(filtered_strings, string)\n        end\n    end\n    \n   \
    \ return filtered_strings\nend", "    filter!(x -> startswith(prefix, x), strings)\n\
    end", "    \n    filtered_strings = Vector{String}()\n    \n    for string in\
    \ strings\n        if string.starts_with(prefix)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"bar\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"bar\")\n</cell>\n<text>\nExercise: Write a function\
    \ that filters strings by a prefix and suffix.", "    \n    filtered_strings =\
    \ Vector{String}()\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            push!(filtered_strings, string)\n        end\n    end\n    \n   \
    \ return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"hello\",\
    \ \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hello\", \"world\"], \"world\")\n</cell>\n<text>\nExercise\n\
    Write a function that takes a vector of strings and a prefix and returns a vector\
    \ of strings that start with the prefix. For example, filter_by_prefix([\"hello\"\
    , \"world\", \"hello\", \"world\"], \"hello\") should return [\"hello\", \"world\"\
    ].", "    \n    filtered_strings = Vector{String}()\n    for string in strings\n\
    \        if string.starts_with(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend", "    \n    filtered\
    \ = filter(x->startswith(x, prefix), strings)\n    \n    return filtered\nend",
  "    \n    prefix_str = prefix:gsub(\"^\", \"\")\n    \n    filtered_strings = filter(x->(x:starts_with(prefix_str)),\
    \ strings)\n    \n    return filtered_strings\nend", "    strings = filter( x\
    \ -> starts_with(x, prefix), strings)\n    return strings\nend", "    \n    filtered_strings\
    \ = Vector{String}()\n    for string in strings\n        if string.starts_with(prefix)\n\
    \            push!(filtered_strings, string)\n        end\n    end\n    \n   \
    \ return filtered_strings\nend", "    filter!(x -> startswith(prefix, x), strings)\n\
    end\n</cell>\n<code language=julia-1.4>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"foo\")\n</cell>\n<text>\nfilter!\nfilter! modifies the\
    \ input list in-place. \nfilter! returns a new list with the filtered elements.",
  "    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"fooo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"fooobar\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"foooba\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"fooobaar\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"fooobaarworld\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"fooobaarworldfoo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"fooobaarworldfoofoo\"\
    )\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"fooobaarworldfoofoofoo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"fooobaarworldfoofoofoofoo\"\
    )\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"fooobaarworldfoofoofoofoofoo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"fooobaarworldfoofoofoofoofoofoo\"\
    )\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"fooobaarworldfoofoofoofoofoofoofoofoo\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"\
    ], \"fooobaarworldfoofoofoofoofoofoofoofoofoo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"fooobaarworld", " \
    \   \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"\
    ], \"foo\")\n</cell>\n<text>\nExercise: Write a function that filters an input\
    \ list of strings only for ones that end with a given suffix.", "    strings =\
    \ filter( x -> startswith(x, prefix), strings)\n    return strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"hello\",\
    \ \"world\"], \"hello\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters\
    \ strings by a regular expression. \nFor example, filter_by_regex([\"hello\",\
    \ \"world\", \"hello\", \"world\"], \"hello\") should return [\"hello\", \"world\"\
    ].", "    filter!(x -> startswith(prefix, x), strings)\nend", "    \n    filtered_strings\
    \ = Vector{String}()\n    for string in strings\n        if string.starts_with(prefix)\n\
    \            push!(filtered_strings, string)\n        end\n    end\n    \n   \
    \ return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that filters a vector of strings based on whether they contain\
    \ a given substring.", "    \n    prefix_length = length(prefix)\n    \n    filtered_strings\
    \ = Vector{String}()\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            push!(filtered_strings, string)\n        end\n    end\n    \n   \
    \ return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hi\"], \"h\")\n</cell>\n<text>\nFiltering by substrings",
  "    \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"goodbye\"], \"hello\")\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that filters an input list of strings only for ones that end with\
    \ a given suffix.", "    \n    filtered_strings = Vector{String}()\n    for string\
    \ in strings\n        if string.starts_with(prefix)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend", "  \
    \  filter!(x -> startswith(prefix, x), strings)\nend", "    filter!(x -> startswith(x,\
    \ prefix), strings)\nend", "    filter!(x -> startswith(prefix, x), strings)\n\
    end", "    \n    filtered_strings = Vector{String}()\n    \n    for string in\
    \ strings\n        if string.starts_with(prefix)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"fooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"fooo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"foooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"fooooo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foooooo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"fooooooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foooooooo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"fooooooooo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"foooooooooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"fooooooooooo\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"\
    foo\", \"bar\"], \"foooooooooooo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"fooooooooooooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foooooooooooooo\"\
    )\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"fooooooooooooooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foooooooooooooooo\"\
    )\n</cell>\n<code language=juli", "    filter!(x -> startswith(prefix, x), strings)\n\
    end", "    \n    filtered_strings = Vector{String}()\n    for s in strings\n \
    \       if startswith(s,prefix)\n            push!(filtered_strings,s)\n     \
    \   end\n    end\n    return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\",\"world\",\"foo\",\"bar\"],\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"hello\",\"world\",\"foo\",\"bar\"],\"\
    world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\",\"world\"\
    ,\"foo\",\"bar\"],\"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\",\"world\",\"foo\",\"bar\"],\"bar\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters strings by a regular expression.", "    \n    filtered_strings\
    \ = Vector{String}()\n    for string in strings\n        if string.starts_with(prefix)\n\
    \            push!(filtered_strings, string)\n        end\n    end\n    \n   \
    \ return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"goodbye\"], \"hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"goodbye\"], \"goodbye\")\n</cell>\n\
    <text>\nExercise\nWrite a function that filters an input list of strings only\
    \ for ones that end with a given suffix.", "    filter!(x -> startswith(prefix,\
    \ x), strings)\nend", "    filter!(x -> startswith(prefix, x), strings)\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"\
    hello\", \"world\"], \"hello\")\n</cell>\n<text>\nfilter!\nfilter! modifies the\
    \ input list in-place. It returns nothing.", "    filter!(x -> startswith(prefix,\
    \ x), strings)\nend\n</cell>\n<code language=julia-1.3>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<text>\nExercise\nWrite\
    \ a function that filters an input list of strings only for ones that end with\
    \ a given suffix.", "    \n    prefix_length = length(prefix)\n    \n    filtered_strings\
    \ = Vector{String}()\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            push!(filtered_strings, string)\n        end\n    end\n    \n   \
    \ return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"goodbye\"], \"hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"goodbye\"], \"goodbye\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"goodbye\"\
    ], \"good\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"goodbye\"], \"world\")\n</cell>\n<text>\nExercise: Write a function\
    \ that filters a list of strings only for those that end with a given suffix.\n\
    Hint: Use endswith.", "    \n    prefix_length = length(prefix)\n    \n    filtered_strings\
    \ = Vector{String}()\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            push!(filtered_strings, string)\n        end\n    end\n    \n   \
    \ return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"fooo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foooo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"foooooo\")\n</cell>\n<text>\nExercise: Write\
    \ a function that filters an input list of strings only for those that end with\
    \ a given suffix.\nHint: Use ends_with() instead of starts_with()", "    filter!(x\
    \ -> startswith(prefix, x), strings)\nend", "    \n    filtered = Vector{String}()\n\
    \    for s in strings\n        if startswith(s, prefix)\n            push!(filtered,\
    \ s)\n        end\n    end\n    \n    return filtered\nend\n</cell>\n<code language=julia-1.4>\n\
    filter_by_prefix([\"foo\", \"bar\", \"baz\", \"qux\"], \"foo\")\n</cell>\n<text>\n\
    Exercise: Write a function that filters strings by a regex pattern. Test it on\
    \ a list of strings and a regex pattern. Then, write a function that filters strings\
    \ by a regex pattern and that also filters strings by a function.", "    filter!(x\
    \ -> startswith(prefix, x), strings)\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <text>\nfilter!\nfilter! modifies the input list in-place. \nIt also returns nothing.",
  "    strings = filter(x -> startswith(x, prefix), strings)\n    return strings\n\
    end", "    \n    filtered = filter(x->startswith(x,prefix), strings)\n    \n \
    \   return filtered\nend", "    \n    filtered_strings = Vector{String}()\n  \
    \  \n    for string in strings\n        if string.starts_with(prefix)\n      \
    \      push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<text>\nfilter_by_prefix(:foo,\
    \ \"foo\")", "    \n    filtered_strings = Vector{String}()\n    \n    for string\
    \ in strings\n        if string.starts_with(prefix)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"hello\",\
    \ \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"hello\",\
    \ \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"hello\",\
    \ \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"hello\",\
    \ \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"hello\",\
    \ \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"hello\",\
    \ \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world", "    filter!(x\
    \ -> startswith(prefix, x), strings)\nend", "    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end", "    \n    filtered = filter(x->startswith(prefix, x), strings)\n    \n\
    \    return filtered\nend", "    \n    filtered_strings = Vector{String}()\n \
    \   for string in strings\n        if string.starts_with(prefix)\n           \
    \ push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"fooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foooo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"fooooo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"foooooa\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foooooaa\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foooooaaa\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"foooooaaaa\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foooooaaaaa\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"\
    foo\", \"bar\"], \"foooooaaaaaa\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"foooooaaaaaaa\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foooooaaaaaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"foooooaaaaaaaaa\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foooooaaaaaaaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"foooooaaaaaaaaaaa\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foooooaaaaaaaaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello", "    \n   \
    \ filtered_strings = Vector{String}()\n    \n    for string in strings\n     \
    \   if string.starts_with(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"\
    ], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\",\
    \ \"world\", \"foo\", \"bar\"], \"fooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foooo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foooooo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"fooooooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foooooooo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foooooooooo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"fooooooooooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foooooooooooo\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"\
    foo\", \"bar\"], \"foooooooooooooo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"fooooooooooooooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foooooooooooooooo\"\
    )\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"foooooooooooooooooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"fooooooooooooooooooo\"\
    )\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"foooooooooooooooooooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foooooooooooooooooooooo\"\
    )\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"", "    filter!(x -> startswith(prefix, x), strings)\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"a\", \"b\", \"c\"\
    , \"d\"], \"b\")\n</cell>\n<text>\nfilter!\nfilter! modifies the input list in-place.\
    \ \nfilter! returns a new list with the filtered elements.", "    \n    filtered_strings\
    \ = Vector{String}()\n    for string in strings\n        if string.starts_with(prefix)\n\
    \            push!(filtered_strings, string)\n        end\n    end\n    filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"hello\", \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hello\", \"world\"], \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"hello\",\
    \ \"world\"], \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"hello\",\
    \ \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hello\", \"world\"], \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"hello\",\
    \ \"world\"], \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"hello\",\
    \ \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hello\", \"world\"], \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"hello\",\
    \ \"world\"], \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"hello\",\
    \ \"world", "    \n    filtered_strings = Vector{String}()\n    for string in\
    \ strings\n        if string.starts_with(prefix)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"hello\",\
    \ \"world\"], \"hello\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters\
    \ an input list of strings only for ones that end with a given suffix.\nHint:\
    \ use endswith() instead of ends_with()", "    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end", "    filter!(x -> startswith(prefix, x), strings)\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n\
    <text>\nfilter!\nfilter! modifies the input list in-place and returns the modified\
    \ list.", "    \n    filtered_strings = Vector{String}()\n    \n    for string\
    \ in strings\n        if string.starts_with(prefix)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend", "  \
    \  filter!(x -> startswith(prefix, x), strings)\nend\n</cell>\n<code language=julia-1.3>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <text>\nfilter!", "    \n    filtered_strings = Vector{String}()\n    \n    for\
    \ string in strings\n        if string.starts_with(prefix)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"goodbye\"\
    ], \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"goodbye\"], \"goodbye\")\n</cell>\n<text>\nExercise: Write a function\
    \ that filters an input list of strings only for those that end with a given suffix.\n\
    Hint: Use endswith", "    filter!(x -> startswith(prefix, x), strings)\nend\n\
    </cell>\n<code language=julia-1.4>\nfilter_by_prefix([\"foo\", \"bar\", \"baz\"\
    , \"quux\"], \"foo\")\n</cell>\n<text>\nfilter!", "    filter!(x -> startswith(x,\
    \ prefix), strings)\nend", "    \n    filtered = Vector{String}()\n    for string\
    \ in strings\n        if string.starts_with(prefix)\n            push!(filtered,\
    \ string)\n        end\n    end\n    \n    return filtered\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"goodbye\"], \"\
    hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"\
    world\", \"goodbye\"], \"goodbye\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that filters a list of strings based on whether they start with a given prefix.",
  "    strings = filter( x -> startswith(x, prefix), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.3>\nfilter_by_prefix([\"foo\", \"bar\", \"\
    baz\"], \"foo\")\n</cell>\n<text>\nExercise: Write a function that filters an\
    \ input list of strings only for ones that end with a given suffix.", "    \n\
    \    filtered_strings = Vector{String}()\n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            push!(filtered_strings, string)\n  \
    \      end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo", "    \n    filtered_strings =\
    \ filter((x) -> startswith(prefix, x), strings)\n    return filtered_strings\n\
    end", "    \n    filtered_strings = Vector{String}()\n    \n    for string in\
    \ strings\n        if string.starts_with(prefix)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend", "  \
    \  filter!(x -> startswith(prefix, x), strings)\nend\n</cell>\n<code language=julia-1.4>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.4>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"fooo\")\n</cell>\n<text>\nExercise: Write a function that filters a\
    \ list of strings only for those that end with a given suffix.", "    \n    filtered_strings\
    \ = filter(x->startswith(x, prefix), strings)\n    \n    return filtered_strings\n\
    end", "    \n    filtered_strings = filter((x) -> startswith(prefix, x), strings)\n\
    \    \n    return filtered_strings\nend", "    \n    filtered = Vector{String}()\n\
    \    for s in strings\n        if startswith(s,prefix)\n            push!(filtered,s)\n\
    \        end\n    end\n    return filtered\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\",\"world\"],\"hello\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a vector of strings and returns a vector of strings\
    \ with all the strings starting with a given prefix.", "    strings = filter(x->startswith(x,prefix),\
    \ strings)\n    return strings\nend\n</cell>\n<code language=julia-1.3>\nfilter_by_prefix([\"\
    hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\"\
    ,\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\"\
    ,\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\"\
    ,\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\"\
    ,\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\"\
    ,\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\"\
    ,\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\"\
    ,\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\"\
    ,\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\"\
    ,\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\"\
    ,\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\"\
    ,\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\"\
    ,\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\"\
    ,\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\"\
    ,\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\"\
    ,\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\"\
    ,\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\"\
    ,\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\"\
    ,\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\"\
    ,\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\"\
    ,\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\"\
    ,\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\"\
    ,\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\"\
    ,\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\"\
    ,\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\"\
    ,\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\"\
    ,\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\"\
    ,\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\"\
    ,\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\"\
    ,\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\"\
    ,\"", "    \n    filtered_strings = Vector{String}()\n    \n    for string in\
    \ strings\n        if string.starts_with(prefix)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foo\")\n</cell>\n<text>\nExercise: Write a function that filters strings\
    \ by a regex pattern. For example, filter_by_regex([\"hello\", \"world\", \"foo\"\
    , \"bar\"], \"^foo$\")", "    filter!(x -> startswith(prefix, x), strings)\nend\n\
    </cell>\n<code language=julia-1.4>\nfilter_by_prefix([\"hello\", \"world\", \"\
    goodbye\"], \"hello\")\n</cell>\n<text>\nFiltering by length\nWe can filter by\
    \ length as well:", "    \n    filtered_strings = Vector{String}()\n    for string\
    \ in strings\n        if string.starts_with(prefix)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"hi\"], \"\
    hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"\
    world\", \"hi\"], \"hi\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hi\"], \"he\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hi\"], \"hel\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hi\"], \"hell\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hi\"], \"helllo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"helllo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"helllo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"helllo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"helllo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"helllo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"helllo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"helllo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"helllo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"helllo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"helllo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"helllo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"helllo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"helllo\")\n</cell>", "    \n\
    \    filtered_strings = Vector{String}()\n    \n    for string in strings\n  \
    \      if string.starts_with(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend", "    \n    filtered_strings\
    \ = Vector{String}()\n    for string in strings\n        if string.starts_with(prefix)\n\
    \            push!(filtered_strings, string)\n        end\n    end\n    \n   \
    \ return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hi\"], \"hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"hi\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"he\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"hey\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"h\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"hey\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"hey\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"hey\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"hey\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"hey\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"hey\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"hey\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"hey\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"hey\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"hey\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"hey\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"hey\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"hey\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"hey\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"hey\")\n</cell>\n<code language=julia-1.5>",
  "    filter!(x -> startswith(prefix, x), strings)\nend", "    filter!(x -> startswith(x,\
    \ prefix), strings)\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n<text>\nfilter!",
  "    filter!(x -> startswith(prefix, x), strings)\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n\
    <text>\nExercise: Write a function that filters out the strings that end with\
    \ a given suffix.", "    filter!(x -> startswith(prefix, x), strings)\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foo\")\n</cell>\n<text>\nfilter!\nfilter! modifies the input list in-place.\
    \ Here is an example:", "    filter!(x -> startswith(x, prefix), strings)\nend",
  "    \n    filtered_strings = Vector{String}()\n    for string in strings\n    \
    \    if string.starts_with(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend", "    \n    filtered\
    \ = filter(x->startswith(x,prefix), strings)\n    \n    return filtered\nend",
  "    \n    filtered = Vector{String}()\n    for s in strings\n        if startswith(s,\
    \ prefix)\n            push!(filtered, s)\n        end\n    end\n    \n    return\
    \ filtered\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n<text>\nfilter_by_prefix(L::AbstractVector,\
    \ prefix::AbstractString)", "    filter!(x -> startswith(prefix, x), strings)\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"a\", \"b\", \"c\"\
    ], \"b\")\n</cell>\n<text>\nfilter!", "    \n    strings = strings[findall(x ->\
    \ startswith(prefix, x), strings)]\n    \n    return strings\nend", "    \n  \
    \  filtered = Vector{String}()\n    for s in strings\n        if startswith(prefix,\
    \ s)\n            push!(filtered, s)\n        end\n    end\n    \n    return filtered\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"fooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foooo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"fooooo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"foooooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"fooooooo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foooooooo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"fooooooooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foooooooooo\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"\
    foo\", \"bar\"], \"fooooooooooo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"foooooooooooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"fooooooooooooo\"\
    )\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"foooooooooooooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"fooooooooooooooo\"\
    )\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"foooooooooooooooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"fooooooooooooooooo\"\
    )\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"foooooooooooooooooo\")\n</cell>\n<code language=", "  \
    \  filter!(x -> startswith(x, prefix), strings)\nend", "    \n    filtered_strings\
    \ = filter(x->startswith(prefix, x), strings)\n    \n    return filtered_strings\n\
    end", "    \n    filtered = filter((x) -> startswith(prefix, x), strings)\n  \
    \  \n    return filtered\nend", "    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end", "    strings = filter( x -> startswith(x, prefix), strings )\n    return\
    \ strings\nend", "    filter!(x -> startswith(prefix, x), strings)\nend\n</cell>\n\
    <code language=julia-1.3>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"hello\")\n</cell>\n<text>\nmap", "    strings = filter(x->startswith(prefix,\
    \ x), strings)\n    return strings\nend", "    strings = filter( x -> startswith(x,prefix),\
    \ strings)\n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    a\",\"b\",\"c\",\"d\"],\"a\")\n</cell>\n<text>\nfilter_by_prefix([],\"a\")", " \
    \   \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"\
    ], \"foo\")\n</cell>\n<text>\nExercise: Write a function that filters an input\
    \ list of strings only for ones that end with a given suffix.\nHint: Use ends_with",
  "    \n    filtered_strings = Vector{String}()\n    for string in strings\n    \
    \    if string.starts_with(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.4>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"\
    ], \"foo\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of strings and returns a vector of strings that only contain words that start\
    \ with the prefix \"foo\".", "    filter!(x -> startswith(x, prefix), strings)\n\
    end", "    \n    filtered_strings = Vector{String}()\n    for s in strings\n \
    \       if startswith(s, prefix)\n            push!(filtered_strings, s)\n   \
    \     end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"goodbye\"], \"hello\")\n</cell>\n<text>\n\
    filter_by_prefix(l, p) returns a new list containing only those elements of l\
    \ that start with the prefix p. If l is empty, then the result is also empty.",
  "    \n    filtered_strings = Vector{String}()\n    for s in strings\n        if\
    \ startswith(s, prefix)\n            push!(filtered_strings, s)\n        end\n\
    \    end\n    \n    return filtered_strings\nend", "    \n    filtered_strings\
    \ = Vector{String}()\n    for string in strings\n        if string.starts_with(prefix)\n\
    \            push!(filtered_strings, string)\n        end\n    end\n    \n   \
    \ return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"bar\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo", "    strings = filter(x->startswith(x,prefix), strings)\n\
    \    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"bar\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"baz\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"bar\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"baz\")\n</cell>\n<text>\nExercise: Write a function\
    \ that filters an input list of strings only for ones that end with a given suffix.\n\
    Hint: Use endswith()", "    \n    filtered_strings = Vector{String}()\n    for\
    \ string in strings\n        if string.starts_with(prefix)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"hello\",\
    \ \"world\"], \"hello\")\n</cell>\n<text>\nfilter_by_prefix(my_strings, \"hello\"\
    )", "    strings = filter(x->startswith(prefix, x), strings)\n    return strings\n\
    end", "    \n    filtered_strings = Vector{String}()\n    for s in strings\n \
    \       if startswith(s,prefix)\n            push!(filtered_strings,s)\n     \
    \   end\n    end\n    return filtered_strings\nend", "    \n    strings = filter((x)\
    \ -> startswith(prefix, x), strings)\n    return strings\nend", "    filter!(x\
    \ -> startswith(x, prefix), strings)\nend\n</cell>\n<code language=julia-1.3>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <text>\nExercise: Write a function that filters strings by a regular expression.\
    \ \nHint: Use Regexps.jl to construct a regular expression that matches only strings\
    \ that start with a given prefix.", "    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if startswith(string, prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"foo\", \"bar\", \"baz\"], \"foo\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that filters a list of strings based\
    \ on whether they start with a given prefix.", "    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"foo\", \"bar\", \"\
    baz\", \"quux\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\", \"quux\"], \"fooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"foo\", \"bar\", \"baz\", \"quux\"], \"foooo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"foo\", \"bar\", \"baz\", \"quux\"\
    ], \"fooooo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"foo\"\
    , \"bar\", \"baz\", \"quux\"], \"foooooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"foo\", \"bar\", \"baz\", \"quux\"], \"fooooooo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"foo\", \"bar\", \"baz\", \"quux\"\
    ], \"foooooooo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"foo\"\
    , \"bar\", \"baz\", \"quux\"], \"fooooooooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"foo\", \"bar\", \"baz\", \"quux\"], \"foooooooooo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"foo\", \"bar\", \"baz\", \"quux\"\
    ], \"fooooooooooo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\", \"quux\"], \"foooooooooooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"foo\", \"bar\", \"baz\", \"quux\"], \"fooooooooooooo\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"foo\", \"bar\", \"baz\"\
    , \"quux\"], \"foooooooooooooo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\", \"quux\"], \"fooooooooooooooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"foo\", \"bar\", \"baz\", \"quux\"], \"foooooooooooooooo\"\
    )\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"foo\", \"bar\", \"\
    baz\", \"quux\"], \"foooooooooooooooo", "    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"hello\", \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hello\", \"world\"], \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"hello\",\
    \ \"world\"], \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"hello\",\
    \ \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hello\", \"world\"], \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"hello\",\
    \ \"world\"], \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"hello\",\
    \ \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hello\", \"world\"], \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"hello\",\
    \ \"world\"], \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"hello", " \
    \   filter!(x -> startswith(prefix, x), strings)\nend", "    filter!(x -> startswith(prefix,\
    \ x), strings)\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    a\", \"b\", \"c\"], \"a\")\n</cell>\n<text>\nfilter!", "    filter!(x -> startswith(x,\
    \ prefix), strings)\nend", "    \n    filtered_strings = Vector{String}()\n  \
    \  for string in strings\n        if string.starts_with(prefix)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"bar\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"baz\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"bar\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"baz\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"bar\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"baz\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo", " \
    \   \n    filtered_strings = Vector{String}()\n    for string in strings\n   \
    \     if string.starts_with(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"\
    ], \"foo\")\n</cell>\n<text>\nExercise 4\nWrite a function that filters strings\
    \ by a regular expression. \nUse filter_by_regex() to filter strings by a regular\
    \ expression.", "    \n    filtered_strings = Vector{String}()\n    for string\
    \ in strings\n        if string.starts_with(prefix)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend", "  \
    \  \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}(undef,\
    \ length(strings))\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            push!(filtered_strings, string)\n        end\n    end\n    \n   \
    \ return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hi\", \"bye\"], \"hi\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters a list of strings based on whether they start with a\
    \ given prefix.", "    \n    filtered = filter(x->startswith(x, prefix), strings)\n\
    \    \n    return filtered\nend", "    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"hello\")\n</cell>\n<text>\nExercise\nWrite a function that\
    \ filters an input list of strings only for ones that end with a given suffix.",
  "    strings = filter( x -> startswith(x, prefix), strings)\n    return strings\n\
    end", "    \n    filtered_strings = Vector{String}()\n    for string in strings\n\
    \        if string.starts_with(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"\
    ], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\",\
    \ \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo", " \
    \   \n    filtered_strings = Vector{String}()\n    for string in strings\n   \
    \     if string.starts_with(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that filters an input list of strings only\
    \ for ones that end with a given suffix.\nHint: use the function filter_by_suffix",
  "    filter!(x -> startswith(prefix, x), strings)\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"a\", \"b\", \"c\"], \"a\")\n</cell>\n<text>\nfilter!", " \
    \   \n    filtered_strings = Vector{String}()\n    for string in strings\n   \
    \     if string.starts_with(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"\
    ], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\",\
    \ \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo", " \
    \   \n    filtered = filter(x->startswith(x, prefix), strings)\n    return filtered\n\
    end", "    \n    filtered = filter(x->startswith(prefix, x), strings)\n    \n\
    \    return filtered\nend", "    strings = filter( x -> startswith(prefix, x),\
    \ strings)\n    return strings\nend", "    \n    filtered = Vector{String}()\n\
    \    \n    for s in strings\n        if startswith(s, prefix)\n            push!(filtered,\
    \ s)\n        end\n    end\n    \n    return filtered\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"foo\", \"bar\", \"baz\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"foo\", \"bar\", \"baz\"], \"bar\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"foo\", \"bar\", \"baz\"], \"baz\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"foo\", \"bar\", \"baz\"], \"quux\")\n</cell>\n<text>\nExercise:\
    \ Write a function that filters an input list of strings only for ones that end\
    \ with a given suffix.\nHint: Use endswith.", "    filter!(x -> startswith(x,\
    \ prefix), strings)\nend\n</cell>\n<code language=julia-1.3>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<text>\nmap", "    \n\
    \    filtered_strings = Vector{String}()\n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            push!(filtered_strings, string)\n  \
    \      end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <text>\nFiltering by substrings\nWe can filter by substrings by using startswith.",
  "    \n    filtered_strings = Vector{String}()\n    for string in strings\n    \
    \    if string.starts_with(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar", "    \n    strings =\
    \ strings[findall(s -> startswith(s,prefix), strings)]\n    \n    return strings\n\
    end", "    filter_by_prefix(strings, prefix, \"\")\nend", "    filter!(x -> startswith(prefix,\
    \ x), strings)\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<text>\nfilter!\nfilter!\
    \ modifies the input list in-place and returns the modified list.", "    \n  \
    \  filtered_strings = Vector{String}()\n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            push!(filtered_strings, string)\n  \
    \      end\n    end\n    \n    return filtered_strings\nend", "    filter!(x ->\
    \ startswith(prefix, x), strings)\nend", "    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"fooo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foooo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"fooooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foooooo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"fooooooo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"foooooooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"fooooooooo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foooooooooo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"fooooooooooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foooooooooooo\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"\
    foo\", \"bar\"], \"fooooooooooooo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"foooooooooooooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"fooooooooooooooo\"\
    )\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"foooooooooooooooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"fooooooooooooooooo\"\
    )\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"foooooooooooooooooo", "    filter!(x -> startswith(prefix,\
    \ x), strings)\nend", "    filter!(x -> startswith(x, prefix), strings)\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"\
    foo\", \"bar\"], \"hello\")\n</cell>\n<text>\nfilter!\nfilter! modifies the input\
    \ list in-place. \nIt also returns nothing.", "    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"hello\", \"world\"], \"hello\")\n</cell>\n<text>\nExercise 2: filter_by_prefix",
  "    \n    filtered_strings = Vector{String}()\n    for string in strings\n    \
    \    if string.starts_with(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend", "    \n    filtered_strings\
    \ = Vector{String}()\n    for string in strings\n        if string.starts_with(prefix)\n\
    \            push!(filtered_strings, string)\n        end\n    end\n    \n   \
    \ return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<text>\nExercise\nWrite\
    \ a function that filters an input list of strings only for those that end with\
    \ a given suffix.", "    \n    filtered_strings = Vector{String}()\n    for string\
    \ in strings\n        if string.starts_with(prefix)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"fooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foooo\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"fooooo\")\n</cell>\n<text>\nExercise: Write a function that filters\
    \ an input list of strings only for ones that end with a given suffix.\nHint:\
    \ Use endswith() instead of starts_with()", "    \n    filtered = Vector{String}()\n\
    \    for s in strings\n        if startswith(s,prefix)\n            push!(filtered,s)\n\
    \        end\n    end\n    \n    return filtered\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\",\"world\",\"hello\",\"world\"],\"hello\")\n</cell>\n\
    <text>\nExercise: Write a function that filters strings by a regular expression.\
    \ \nThe function should take two arguments: the list of strings and the regular\
    \ expression. \nThe function should return a list of strings that match the regular\
    \ expression. \nThe function should ignore case. \nThe function should ignore\
    \ the case of the regular expression. \nThe function should ignore the case of\
    \ the strings. \nThe function should ignore the case of the regular expression\
    \ and strings. \nThe function should ignore the case of the regular expression\
    \ and strings. \nThe function should ignore the case of the regular expression\
    \ and strings. \nThe function should ignore the case of the regular expression\
    \ and strings. \nThe function should ignore the case of the regular expression\
    \ and strings. \nThe function should ignore the case of the regular expression\
    \ and strings. \nThe function should ignore the case of the regular expression\
    \ and strings. \nThe function should ignore the case of the regular expression\
    \ and strings. \nThe function should ignore the case of the regular expression\
    \ and strings. \nThe function should ignore the case of the regular expression\
    \ and strings. \nThe function should ignore the case of the regular expression\
    \ and strings. \nThe function should ignore the case of the regular expression\
    \ and strings. \nThe function should ignore the case of the regular expression\
    \ and strings. \nThe function should ignore the case of the regular expression\
    \ and strings. \nThe function should ignore the case of the regular expression\
    \ and strings. \nThe function should ignore the case of the regular expression\
    \ and strings. \nThe function should ignore the case of the regular expression\
    \ and strings. \nThe function should ignore the case of the regular expression\
    \ and strings. \nThe function should ignore the case of the regular expression\
    \ and strings. \nThe function should ignore the case of the regular expression\
    \ and strings. \nThe function should ignore the case of the regular expression\
    \ and strings. \nThe function should ignore the case of the regular expression\
    \ and strings. \nThe function should ignore the case of the regular expression\
    \ and strings. \nThe function should ignore the case of the regular expression\
    \ and strings. \nThe function should ignore the case of the regular expression\
    \ and strings. \nThe function should ignore the case of the regular expression\
    \ and strings. \nThe function should ignore the case of the regular expression\
    \ and strings. \nThe function should ignore the case of the regular expression\
    \ and strings. \nThe function should ignore the case of the regular expression\
    \ and strings. \nThe function should ignore the case of the regular expression\
    \ and strings. \nThe function should ignore the case of the regular expression\
    \ and strings. \nThe function should ignore the ", "    \n    filtered_strings\
    \ = Vector{String}()\n    for string in strings\n        if string.starts_with(prefix)\n\
    \            push!(filtered_strings, string)\n        end\n    end\n    \n   \
    \ return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n<text>\nFiltering\
    \ by substring", "    strings = filter( x -> startswith(x,prefix), strings)\n\
    \    return strings\nend", "    filter!(x -> startswith(prefix, x), strings)\n\
    end", "    \n    filtered_strings = filter(x->startswith(x, prefix), strings)\n\
    \    \n    return filtered_strings\nend", "    filter!(x -> startswith(x, prefix),\
    \ strings)\nend", "    \n    filtered = Vector{String}()\n    for s in strings\n\
    \        if startswith(s, prefix)\n            push!(filtered, s)\n        end\n\
    \    end\n    \n    return filtered\nend", "    \n    filtered = filter((x) ->\
    \ startswith(prefix, x), strings)\n    \n    return filtered\nend", "    \n  \
    \  filtered = filter((x) -> startswith(x, prefix), strings)\n    \n    return\
    \ filtered\nend", "    filter!(x -> startswith(prefix, x), strings)\nend", " \
    \   \n    filtered = Vector{String}()\n    for s in strings\n        if startswith(s,prefix)\n\
    \            push!(filtered,s)\n        end\n    end\n    return filtered\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\",\"world\"],\"\
    hel\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters a vector of\
    \ strings based on whether they end with a given suffix.", "    filter!(x -> startswith(prefix,\
    \ x), strings)\nend\n</cell>\n<code language=julia-1.4>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<text>\nExercise: Write\
    \ a function that filters strings by a predicate that returns true if the string\
    \ starts with a given prefix.", "    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that filters an input list of strings only for ones that\
    \ end with a given suffix.", "    \n    filtered = Vector{String}()\n    for s\
    \ in strings\n        if startswith(s,prefix)\n            push!(filtered,s)\n\
    \        end\n    end\n    return filtered\nend", "    \n    strings = strings[strings[end-1:end]\
    \ .== prefix]\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <text>\nfilter_by_prefix(L, \"foo\")", "    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if string.starts_with(prefix)\n          \
    \  push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"foo\", \"bar\", \"\
    baz\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"foo\"\
    , \"bar\", \"baz\"], \"bar\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"baz\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"quux\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"quux\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"quux\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"quux\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"quux\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"quux\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"quux\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"quux\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"quux\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"quux\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"quux\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"quux\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"quux\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"quux\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"quux\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"quux\")\n", "    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"goodbye\", \"\
    hello\", \"world\"], \"hello\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that filters strings by a regular expression. \nUse a regular expression that\
    \ matches only words that start with a capital letter. \nUse a regular expression\
    \ that matches only words that end with a digit. \nUse a regular expression that\
    \ matches only words that end with a lowercase letter. \nUse a regular expression\
    \ that matches only words that end with a capital letter and a digit. \nUse a\
    \ regular expression that matches only words that end with a lowercase letter\
    \ and a digit. \nUse a regular expression that matches only words that end with\
    \ a capital letter, lowercase letter, and digit. \nUse a regular expression that\
    \ matches only words that end with a lowercase letter, digit, and capital letter.\
    \ \nUse a regular expression that matches only words that end with a lowercase\
    \ letter, digit, and lowercase letter. \nUse a regular expression that matches\
    \ only words that end with a lowercase letter, digit, and capital letter. \nUse\
    \ a regular expression that matches only words that end with a lowercase letter,\
    \ digit, and lowercase letter. \nUse a regular expression that matches only words\
    \ that end with a lowercase letter, digit, and capital letter. \nUse a regular\
    \ expression that matches only words that end with a lowercase letter, digit,\
    \ and lowercase letter. \nUse a regular expression that matches only words that\
    \ end with a lowercase letter, digit, and capital letter. \nUse a regular expression\
    \ that matches only words that end with a lowercase letter, digit, and lowercase\
    \ letter. \nUse a regular expression that matches only words that end with a lowercase\
    \ letter, digit, and capital letter. \nUse a regular expression that matches only\
    \ words that end with a lowercase letter, digit, and lowercase letter. \nUse a\
    \ regular expression that matches only words that end with a lowercase letter,\
    \ digit, and capital letter. \nUse a regular expression that matches only words\
    \ that end with a lowercase letter, digit, and lowercase letter. \nUse a regular\
    \ expression that matches only words that end with a lowercase letter, digit,\
    \ and capital letter. \nUse a regular expression that matches only words that\
    \ end with a lowercase letter, digit, and lowercase letter. \nUse a regular expression\
    \ that matches only words that end with a lowercase letter, digit", "    \n  \
    \  filtered_strings = Vector{String}()\n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            push!(filtered_strings, string)\n  \
    \      end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that filters strings by a regular expression.\
    \ For example, filter_by_regex([\"hello\", \"world\", \"hello\", \"world\"], \"\
    hello\") should return [\"hello\", \"world\"].", "    filter!(x -> startswith(prefix,\
    \ x), strings)\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<text>\nfilter_by_prefix(L::AbstractVector,\
    \ prefix::AbstractString)", "    \n    filtered_strings = Vector{String}()\n \
    \   for s in strings\n        if startswith(s, prefix)\n            push!(filtered_strings,\
    \ s)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"bar\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"baz\")\n</cell>\n<text>\nExercise: Write a function\
    \ that filters strings by a prefix and suffix.\nHint: Use filter_by_prefix and\
    \ filter_by_suffix to solve this exercise.", "    filter!(x -> startswith(prefix,\
    \ x), strings)\nend\n</cell>\n<code language=julia-1.3>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<text>\nFiltering by\
    \ substring", "    \n    strings = strings[findall(x -> startswith(prefix, x),\
    \ strings)]\n    \n    return strings\nend", "    \n    prefix_str = prefix:gsub(\"\
    ^\", \"\")\n    \n    filtered_strings = filter(x->startswith(prefix_str, x),\
    \ strings)\n    \n    return filtered_strings\nend", "    \n    prefix_length\
    \ = length(prefix)\n    \n    filtered_strings = Vector{String}()\n    \n    for\
    \ string in strings\n        if string.starts_with(prefix)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"hello\",\
    \ \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hello\", \"world\"], \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"hello\",\
    \ \"world\"], \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"hello\",\
    \ \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hello\", \"world\"], \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"hello\",\
    \ \"world\"], \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"hello\",\
    \ \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hello\", \"world\"], \"world\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"hello\",\
    \ \"world\"], \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"world\")\n</cell>\n\
    <code language=julia-1.5>", "    filter_by_prefix(strings, prefix, \"\")\nend",
  "    \n    filtered = Vector{String}()\n    for s in strings\n        if startswith(s,prefix)\n\
    \            push!(filtered, s)\n        end\n    end\n    return filtered\nend",
  "    \n    filtered = Vector{String}()\n    for s in strings\n        if startswith(prefix,\
    \ s)\n            push!(filtered, s)\n        end\n    end\n    \n    return filtered\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"foo\", \"bar\"], \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"world\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"bar\")\n</cell>\n<text>\nExercise 3\nWrite a function that filters an\
    \ input list of strings only for those that end with a given suffix.", "    \n\
    \    filtered = Vector{String}()\n    \n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            push!(filtered, string)\n        end\n\
    \    end\n    \n    return filtered\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that filters words in a given list that start\
    \ with a given prefix.\nWrite a function that filters words in a given list that\
    \ end with a given suffix.\nWrite a function that filters words in a given list\
    \ that contain given substrings.", "    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"foo\", \"bar\", \"baz\", \"qux\"],\
    \ \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"foo\", \"\
    bar\", \"baz\", \"qux\"], \"fo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\", \"qux\"], \"fooo\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"foo\", \"bar\", \"baz\", \"qux\"], \"fooox\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"foo\", \"bar\", \"baz\", \"qux\"],\
    \ \"foooxqu\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"foo\"\
    , \"bar\", \"baz\", \"qux\"], \"foooxqux\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"foo\", \"bar\", \"baz\", \"qux\"], \"foooxquxx\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"foo\", \"bar\", \"baz\", \"qux\"\
    ], \"foooxquxxbar\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\", \"qux\"], \"foooxquxxbarbaz\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"foo\", \"bar\", \"baz\", \"qux\"], \"foooxquxxbarbazqu\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"foo\", \"bar\", \"baz\"\
    , \"qux\"], \"foooxquxxbarbazqux\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\", \"qux\"], \"foooxquxxbarbazquxx\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"foo\", \"bar\", \"baz\", \"qux\"], \"foooxquxxbarbazquxxbaz\"\
    )\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"foo\", \"bar\", \"\
    baz\", \"qux\"], \"foooxquxxbarbazquxxbazqu\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"foo\", \"bar\", \"baz\", \"qux\"], \"foooxquxx", "    \n \
    \   filtered_strings = Vector{String}()\n    \n    for string in strings\n   \
    \     if string.starts_with(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"\
    ], \"foo\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters a list\
    \ of strings based on whether they start with a given prefix.", "    strings =\
    \ filter((x) -> startswith(prefix, x), strings)\n    return strings\nend", " \
    \   filter!(x -> startswith(prefix, x), strings)\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <text>\nfilter!", "    \n    filtered_strings = Vector{String}()\n    \n    for\
    \ string in strings\n        if string.starts_with(prefix)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"foo\", \"bar\", \"baz\"], \"foo\"\
    )\n</cell>\n<text>\nExercise: Write a function that filters a list of strings\
    \ only for the ones that end with a given suffix.", "    filter!(x -> startswith(prefix,\
    \ x), strings)\nend", "    \n    strings = strings[strings[end-1] \u2209 prefix]\n\
    \    \n    return strings\nend", "    \n    strings = strings[strings[2:end] .==\
    \ prefix]\n    return strings\nend", "    \n    filtered = Vector{String}()\n\
    \    for s in strings\n        if startswith(s, prefix)\n            push!(filtered,\
    \ s)\n        end\n    end\n    \n    return filtered\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"foo\", \"bar\", \"baz\", \"qux\"], \"foo\")\n</cell>\n<text>\n\
    map", "    filter!(x -> startswith(prefix, x), strings)\nend", "    filter!(x\
    \ -> startswith(prefix, x), strings)\nend", "    \n    filtered = Vector{String}()\n\
    \    for s in strings\n        if startswith(s, prefix)\n            push!(filtered,\
    \ s)\n        end\n    end\n    \n    return filtered\nend", "    \n    filtered\
    \ = Vector{String}()\n    for s in strings\n        if startswith(s,prefix)\n\
    \            push!(filtered,s)\n        end\n    end\n    \n    return filtered\n\
    end", "    filter!(x -> startswith(prefix, x), strings)\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <text>\nFiltering by substring", "    \n    filtered = filter((x) -> startswith(prefix,\
    \ x), strings)\n    \n    return filtered\nend", "    filter!(x -> startswith(prefix,\
    \ x), strings)\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<text>\nfilter!\nfilter!\
    \ modifies the input list in-place. \nIt returns the modified list.", "    \n\
    \    filtered_strings = Vector{String}()\n    for string in strings\n        if\
    \ string.starts_with(prefix)\n            push!(filtered_strings, string)\n  \
    \      end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"hello\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that filters a vector of strings based on\
    \ whether they end with a given suffix.", "    strings = filter(x->startswith(prefix,\
    \ x), strings)\n    return strings\nend", "    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if string.startswith(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"goodbye\", \"\
    hello\"], \"hello\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters\
    \ an input list of strings only for those that end with a given suffix.", "  \
    \  \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend", "    \n    filtered_strings\
    \ = Vector{String}()\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            push!(filtered_strings, string)\n        end\n    end\n    \n   \
    \ return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"goodbye\", \"hello\", \"world\"], \"hello\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that filters strings by a regular expression.\
    \ \nFor example, filter_by_regex([\"hello\", \"world\", \"goodbye\", \"hello\"\
    , \"world\"], \"hello\") should return [\"hello\", \"hello\"].", "    strings\
    \ = filter( x -> startswith(prefix, x), strings)\n    return strings\nend", " \
    \   filter!(x -> startswith(prefix, x), strings)\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"foo\", \"bar\", \"baz\"], \"foo\")\n</cell>\n<text>\nfilter!",
  "    filter!(x -> startswith(prefix, x), strings)\nend", "    \n    filtered_strings\
    \ = filter(x->startswith(prefix, x), strings)\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"hello\"], \"hello\")\n</cell>\n<text>\nfilter_by_prefix(vec)", "    filter!(x\
    \ -> startswith(prefix, x), strings)\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"a\", \"b\", \"c\", \"d\"], \"b\")\n</cell>\n<text>\nfilter!",
  "    \n    filtered_strings = Vector{String}()\n    for string in strings\n    \
    \    if string.starts_with(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.3>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"\
    ], \"foo\")\n</cell>\n<code language=julia-1.3>\nfilter_by_prefix([\"hello\",\
    \ \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.3>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.3>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foo\")\n</cell>\n<code language=julia-1.3>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.3>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.3>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foo\")\n</cell>\n<code language=julia-1.3>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.3>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.3>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foo\")\n</cell>\n<code language=julia-1.3>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.3>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.3>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foo\")\n</cell>\n<code language=julia-1.3>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.3>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.3>\nfilter_by_prefix([\"hello\", \"world\", \"foo\", \"\
    bar\"], \"foo\")\n</cell>\n<code language=julia-1.3>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<code language=julia-1.3>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <code language=julia-1.3>\nfilter_by_prefix([\"hello\", \"world\", \"foo", " \
    \   \n    filtered_strings = Vector{String}()\n    for string in strings\n   \
    \     if string.starts_with(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"hi\"], \"hello\"\
    )\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"hi\"], \"hi\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"hi\"], \"world\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hi\"], \"h\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hi\"], \"he\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hi\"], \"hel\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hi\"], \"hell\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"hi\"], \"hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"h\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"he\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"hel\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"hell\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"h\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"he\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"hel\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"hell\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"hello\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"h\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"hi\"], \"he\")\n</cell>\n<code language=juli",
  "    \n    filtered_strings = Vector{String}()\n    for string in strings\n    \
    \    if string.starts_with(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"foo\", \"bar\", \"baz\"], \"foo\")\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"foo\", \"bar\", \"baz\"\
    ], \"baz\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"foo\", \"\
    bar\", \"baz\"], \"bar\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"quux\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"baz\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"quux\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"bar\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"foo\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    foo\", \"bar\", \"baz\"], \"foo\")\n</cell>\n<code language=", "    \n    filtered\
    \ = Vector{String}()\n    for s in strings\n        if startswith(s, prefix)\n\
    \            push!(filtered, s)\n        end\n    end\n    \n    return filtered\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\"\
    , \"goodbye\"], \"hello\")\n</cell>\n<text>\nExercise\nWrite a function that filters\
    \ an input list of strings only for ones that end with a given suffix.", "   \
    \ filter!(x -> startswith(prefix, x), strings)\nend\n</cell>\n<code language=julia-1.4>\n\
    filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n\
    <text>\nFiltering by substrings\nWe can filter by substrings by using the filter\
    \ function with a predicate that checks for substrings:", "    \n    filtered_strings\
    \ = Vector{String}()\n    for string in strings\n        if string.starts_with(prefix)\n\
    \            push!(filtered_strings, string)\n        end\n    end\n    \n   \
    \ return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    hello\", \"world\", \"foo\", \"bar\"], \"foo\")\n</cell>\n<text>\nExercise 2:\
    \ filter_by_prefix", "    \n    filtered_strings = Vector{String}()\n    for string\
    \ in strings\n        if string.starts_with(prefix)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"hello\", \"world\", \"goodbye\"\
    ], \"hello\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"hello\"\
    , \"world\", \"goodbye\"], \"goodbye\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"hello\", \"world\", \"goodbye\"], \"world\")\n</cell>\n<text>\n\
    Exercise: Write a function that filters an input list of strings only for ones\
    \ that end with a given suffix.\nHint: Use endswith() instead of starts_with()",
  "    filter_by_prefix(strings, prefix, \"\")\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
