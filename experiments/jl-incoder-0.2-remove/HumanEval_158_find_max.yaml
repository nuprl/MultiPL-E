name: HumanEval_158_find_max
language: jl
prompt: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
  \ different words. Return the word with maximum number\n    of unique characters.\
  \ If multiple strings have maximum number of unique\n    characters, return the\
  \ one which comes first in lexicographical order.\n\n                \"\"\"\nfunction\
  \ find_max(words::Vector{String})::String \n"
tests: "using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
  name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
  , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"\
  aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
  play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
  we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"\
  are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\"\
  , \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\
  \t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
completions: ["    unique_chars = Set{String}()\n    unique_chars_count = Dict{String,Int}()\n\
    \    for word in words\n        for char in word\n            if !contains(unique_chars,\
    \ char)\n                unique_chars.add(char)\n                unique_chars_count[char]\
    \ = unique_chars_count[char] + 1\n            else\n                if unique_chars_count[char]\
    \ > unique_chars_count[word]\n                    return word\n              \
    \  end\n            end\n        end\n    end\n    return word\nend", "    \n\
    \    unique_chars = Set{String}()\n    \n    for word in words \n        for char\
    \ in word\n            unique_chars.add(char)\n        end\n    end\n    \n  \
    \  unique_chars = unique_chars - Set(\"_\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"_\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\".\")\n    \n    if length(unique_chars) == 0\n        return \".\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\",\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \",\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\":\")\n    \n    if length(unique_chars) == 0\n        return \":\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\";\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \";\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"(\")\n    \n    if length(unique_chars) == 0\n        return \"(\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\")\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \")\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"[\")\n    \n    if length(unique_chars) == 0\n        return \"[\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"]\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"]\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"{\")\n    \n    if length(unique_chars) == 0\n        return \"{\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"}\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"}\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"'\")\n    \n    if length(unique_chars) == 0\n        return \"'\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"!\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"!\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"?\")\n    \n    if length(unique_chars) == 0\n        return \"?\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"*\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"*\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"+\")\n    \n    if length(unique_chars) == 0\n        return \"+\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"$\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"$\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"%", "    \n    unique_chars = Set{String}()\n    \n    for word in words\n\
    \        for char in word\n            unique_chars.add(char)\n        end\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"_\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"_\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return \"a\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"A\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"A\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"0\")\n    \n    if length(unique_chars) == 0\n        return \"0\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"9\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"9\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\".\")\n    \n    if length(unique_chars) == 0\n        return \".\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"_\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"_\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return \"a\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"A\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"A\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"0\")\n    \n    if length(unique_chars) == 0\n        return \"0\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"9\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"9\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\".\")\n    \n    if length(unique_chars) == 0\n        return \".\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"_\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"_\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return \"a\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"A\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"A\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"0\")\n    \n    if length(unique_chars) == 0\n        return \"0\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"9\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"9\"\n    end\n    \n    unique_", "    unique_chars =\
    \ Set()\n    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[1]))\n    unique_chars = unique_chars.union(words.map(w => w[2]))\n   \
    \ unique_chars = unique_chars.union(words.map(w => w[3]))\n    unique_chars =\
    \ unique_chars.union(words.map(w => w[4]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[5]))\n    unique_chars = unique_chars.union(words.map(w => w[6]))\n   \
    \ unique_chars = unique_chars.union(words.map(w => w[7]))\n    unique_chars =\
    \ unique_chars.union(words.map(w => w[8]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[9]))\n    unique_chars = unique_chars.union(words.map(w => w[10]))\n  \
    \  unique_chars = unique_chars.union(words.map(w => w[11]))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w[12]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[13]))\n    unique_chars = unique_chars.union(words.map(w => w[14]))\n \
    \   unique_chars = unique_chars.union(words.map(w => w[15]))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w[16]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[17]))\n    unique_chars = unique_chars.union(words.map(w => w[18]))\n \
    \   unique_chars = unique_chars.union(words.map(w => w[19]))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w[20]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[21]))\n    unique_chars = unique_chars.union(words.map(w => w[22]))\n \
    \   unique_chars = unique_chars.union(words.map(w => w[23]))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w[24]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[25]))\n    unique_chars = unique_chars.union(words.map(w => w[26]))\n \
    \   unique_chars = unique_chars.union(words.map(w => w[27]))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w[28]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[29]))\n    unique_chars = unique_chars.union(words.map(w => w[30]))", " \
    \   unique_chars = Set()\n    unique_chars_count = Dict{Char,Int}()\n    for word\
    \ in words\n        for char in word\n            unique_chars.add(char)\n   \
    \         unique_chars_count[char] = unique_chars_count[char] + 1\n        end\n\
    \    end\n    \n    unique_chars_sorted = sort(unique_chars)\n    \n    unique_chars_count\
    \ = Dict{Char,Int}()\n    for char in unique_chars_sorted\n        unique_chars_count[char]\
    \ = unique_chars_count[char] + 1\n    end\n    \n    unique_chars_sorted = sort(unique_chars)\n\
    \    \n    unique_chars_count = Dict{Char,Int}()\n    for char in unique_chars_sorted\n\
    \        unique_chars_count[char] = unique_chars_count[char] + 1\n    end\n  \
    \  \n    unique_chars_sorted = sort(unique_chars)\n    \n    unique_chars_count\
    \ = Dict{Char,Int}()\n    for char in unique_chars_sorted\n        unique_chars_count[char]\
    \ = unique_chars_count[char] + 1\n    end\n    \n    unique_chars_sorted = sort(unique_chars)\n\
    \    \n    unique_chars_count = Dict{Char,Int}()\n    for char in unique_chars_sorted\n\
    \        unique_chars_count[char] = unique_chars_count[char] + 1\n    end\n  \
    \  \n    unique_chars_sorted = sort(unique_chars)\n    \n    unique_chars_count\
    \ = Dict{Char,Int}()\n    for char in unique_chars_sorted\n        unique_chars_count[char]\
    \ = unique_chars_count[char] + 1\n    end\n    \n    unique_chars_sorted = sort(unique_chars)\n\
    \    \n    unique_chars_count = Dict{Char,Int}()\n    for char in unique_chars_sorted\n\
    \        unique_chars_count[char] = unique_chars_count[char] + 1\n    end\n  \
    \  \n    unique_chars_sorted = sort(unique_chars)\n    \n    unique_chars_count\
    \ = Dict{Char,Int}()\n    for char in unique_chars_sorted\n        unique_chars_count[char]\
    \ = unique_chars_count[char] + 1\n    end\n    \n    unique_chars_sorted = sort(unique_chars)\n\
    \    \n    unique_chars_count = Dict{Char,Int}()\n    for char in unique_chars_sorted\n\
    \        unique_chars_count[char] = unique_chars_count[char] + 1\n    end\n  \
    \  \n    unique_chars_sorted = sort(unique_chars)\n    \n    unique_chars_count\
    \ = Dict{Char,Int}()\n    for char in unique_chars_sorted\n        unique_chars_count[char]\
    \ = unique_chars_count[char] + 1\n    end\n    \n    unique_chars_sorted = sort(unique_chars)\n\
    \    \n    unique_chars_count = Dict", "    unique_chars = Set()\n    unique_chars_count\
    \ = Dict()\n    for w in words\n        unique_chars = unique_chars + Set(w)\n\
    \        unique_chars_count[w] = length(unique_chars)\n    end\n    \n    unique_chars_count\
    \ = sort(unique_chars_count, by = x -> x[1])\n    \n    unique_chars_count[end][1]\n\
    end\n</cell>\n<code language=julia-1.5>\nfind_max([\n    \"hello\",\n    \"world\"\
    ,\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\"\
    ,\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\"\
    ,\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\"\
    ,\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\"\
    ,\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\"\
    ,\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\"\
    ,\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\"\
    ,\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\"\
    ,\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\"\
    ,\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\"\
    ,\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\"\
    ,\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\"\
    ,\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\"\
    ,\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\"\
    ,\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\"\
    ,\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\"\
    ,\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\"\
    ,\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\"\
    ,\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\"\
    ,\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\"\
    ,\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\"\
    ,", "    unique_chars = Set{Char}()\n    word_with_max_unique_chars = \"\"\n \
    \   \n    for word in words\n        for char in word\n            if !contains(unique_chars,\
    \ char)\n                unique_chars.add(char)\n                if length(unique_chars)\
    \ > length(word_with_max_unique_chars)\n                    word_with_max_unique_chars\
    \ = word\n                end\n            end\n        end\n    end\n    \n \
    \   return word_with_max_unique_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    find_max([\n    \"apple\",\n    \"banana\",\n    \"carrot\",\n    \"carrot\",\n\
    \    \"carrot\",\n    \"carrot\",\n    \"carrot\",\n    \"carrot\",\n    \"carrot\"\
    ,\n    \"carrot\",\n    \"carrot\",\n    \"carrot\",\n    \"carrot\",\n    \"\
    carrot\",\n    \"carrot\",\n    \"carrot\",\n    \"carrot\",\n    \"carrot\",\n\
    \    \"carrot\",\n    \"carrot\",\n    \"carrot\",\n    \"carrot\",\n    \"carrot\"\
    ,\n    \"carrot\",\n    \"carrot\",\n    \"carrot\",\n    \"carrot\",\n    \"\
    carrot\",\n    \"carrot\",\n    \"carrot\",\n    \"carrot\",\n    \"carrot\",\n\
    \    \"carrot\",\n    \"carrot\",\n    \"carrot\",\n    \"carrot\",\n    \"carrot\"\
    ,\n    \"carrot\",\n    \"carrot\",\n    \"carrot\",\n    \"carrot\",\n    \"\
    carrot\",\n    \"carrot\",\n    \"carrot\",\n    \"carrot\",\n    \"carrot\",\n\
    \    \"carrot\",\n    \"carrot\",\n    \"carrot\",\n    \"carrot\",\n    \"carrot\"\
    ,\n    \"carrot\",\n    \"carrot\",\n    \"carrot\",\n    \"carrot\",\n    \"\
    carrot\",\n    \"carrot\",\n    \"carrot\",\n    \"carrot\",\n    \"carrot\",\n\
    \    \"carrot\",\n    \"carrot\",\n    \"carrot\",\n    \"carrot\",\n    \"carrot\"\
    ,\n    \"carrot\",\n    \"carrot\",\n    \"carrot\",\n    \"carrot\",\n    \"\
    carrot\",\n    \"carrot\",\n    \"carrot\",\n    \"carrot\",\n    \"carrot\",\n\
    \    \"carrot\",\n    \"carrot\",\n    \"carrot\",\n    \"carrot\",\n    \"carrot\"\
    ,\n    \"carrot\",\n    \"carrot\",\n    \"carrot\",\n    \"car", "    unique_chars\
    \ = Set{Char}(\"\")\n    unique_chars = unique_chars | Set{Char}(words[1])\n \
    \   unique_chars = unique_chars | Set{Char}(words[2])\n    unique_chars = unique_chars\
    \ | Set{Char}(words[3])\n    unique_chars = unique_chars | Set{Char}(words[4])\n\
    \    unique_chars = unique_chars | Set{Char}(words[5])\n    unique_chars = unique_chars\
    \ | Set{Char}(words[6])\n    unique_chars = unique_chars | Set{Char}(words[7])\n\
    \    unique_chars = unique_chars | Set{Char}(words[8])\n    unique_chars = unique_chars\
    \ | Set{Char}(words[9])\n    unique_chars = unique_chars | Set{Char}(words[10])\n\
    \    unique_chars = unique_chars | Set{Char}(words[11])\n    unique_chars = unique_chars\
    \ | Set{Char}(words[12])\n    unique_chars = unique_chars | Set{Char}(words[13])\n\
    \    unique_chars = unique_chars | Set{Char}(words[14])\n    unique_chars = unique_chars\
    \ | Set{Char}(words[15])\n    unique_chars = unique_chars | Set{Char}(words[16])\n\
    \    unique_chars = unique_chars | Set{Char}(words[17])\n    unique_chars = unique_chars\
    \ | Set{Char}(words[18])\n    unique_chars = unique_chars | Set{Char}(words[19])\n\
    \    unique_chars = unique_chars | Set{Char}(words[20])\n    unique_chars = unique_chars\
    \ | Set{Char}(words[21])\n    unique_chars = unique_chars | Set{Char}(words[22])\n\
    \    unique_chars = unique_chars | Set{Char}(words[23])\n    unique_chars = unique_chars\
    \ | Set{Char}(words[24])\n    unique_chars = unique_chars | Set{Char}(words[25])\n\
    \    unique_chars = unique_chars | Set{Char}(words[26])\n    unique_chars = unique_chars\
    \ | Set{Char}(words[27])\n    unique_chars = unique_chars | Set{Char}(words[28])\n\
    \    unique_chars = unique_chars | Set{Char}(words[29])\n    unique_chars = unique_chars\
    \ | Set{Char}(words[30])\n    unique_chars = unique_chars | Set{Char}(words[31])\n\
    \    unique_chars = unique_chars | Set{Char}(words[32])\n    ", "    unique_chars\
    \ = Set()\n    unique_chars_count = 0\n    \n    for word in words \n        unique_chars\
    \ = unique_chars + Set(word)\n        unique_chars_count = unique_chars_count\
    \ + length(unique_chars)\n    end\n    \n    if unique_chars_count > length(unique_chars)\n\
    \        return words[1]\n    else\n        return words[end]\n    end\nend",
  "    unique_chars = Set{String}()\n    unique_chars_count = Dict{String,Int}()\n\
    \    unique_chars_count_sorted = Dict{String,Int}()\n    unique_chars_count_sorted_reverse\
    \ = Dict{String,Int}()\n    unique_chars_count_sorted_reverse = Dict{String,Int}()\n\
    \    unique_chars_count_sorted_reverse = Dict{String,Int}()\n    unique_chars_count_sorted_reverse\
    \ = Dict{String,Int}()\n    unique_chars_count_sorted_reverse = Dict{String,Int}()\n\
    \    unique_chars_count_sorted_reverse = Dict{String,Int}()\n    unique_chars_count_sorted_reverse\
    \ = Dict{String,Int}()\n    unique_chars_count_sorted_reverse = Dict{String,Int}()\n\
    \    unique_chars_count_sorted_reverse = Dict{String,Int}()\n    unique_chars_count_sorted_reverse\
    \ = Dict{String,Int}()\n    unique_chars_count_sorted_reverse = Dict{String,Int}()\n\
    \    unique_chars_count_sorted_reverse = Dict{String,Int}()\n    unique_chars_count_sorted_reverse\
    \ = Dict{String,Int}()\n    unique_chars_count_sorted_reverse = Dict{String,Int}()\n\
    \    unique_chars_count_sorted_reverse = Dict{String,Int}()\n    unique_chars_count_sorted_reverse\
    \ = Dict{String,Int}()\n    unique_chars_count_sorted_reverse = Dict{String,Int}()\n\
    \    unique_chars_count_sorted_reverse = Dict{String,Int}()\n    unique_chars_count_sorted_reverse\
    \ = Dict{String,Int}()\n    unique_chars_count_sorted_reverse = Dict{String,Int}()\n\
    \    unique_chars_count_sorted_reverse = Dict{String,Int}()\n    unique_chars_count_sorted_reverse\
    \ = Dict{String,Int}()\n    unique_chars_count_sorted_reverse = Dict{String,Int}()\n\
    \    unique_chars_count_sorted_reverse = Dict{String,Int}()\n    unique_chars_count_sorted_reverse\
    \ = Dict{String,Int}()\n    unique_chars_count_sorted_reverse = Dict{String,Int}()\n\
    \    unique_chars_count_sorted_reverse = Dict{String,Int}()\n    unique_chars_count_sorted_reverse\
    \ = Dict{String,Int}()\n    unique_chars_count_sorted_reverse = Dict{String,Int}()\n\
    \    unique_chars_count_sorted_reverse = Dict{String,Int}()\n    unique_chars_count_sorted_reverse\
    \ = Dict{String,Int}()\n    unique_chars_count_sorted_reverse = Dict{String,Int}()\n\
    \    unique_chars_count_sorted_reverse = Dict{String,Int}()\n    unique_chars_count_sorted_reverse\
    \ = Dict{String,Int}()\n    unique_", "    unique_chars = Set{String}()\n    unique_chars\
    \ = unique_chars.union(words)\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 1))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 2))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 3))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 4))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 5))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 6))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 7))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 8))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 9))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 10))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 11))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 12))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 13))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 14))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 15))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 16))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 17))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 18))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 19))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 20))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 21))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 22))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 23))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 24))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 25))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> ", "    unique_chars\
    \ = Set{String}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n", "    unique_chars = Set{String}()\n\
    \    unique_chars_count = Dict{String, Int}()\n    \n    for word in words\n \
    \       for char in word\n            if !contains(unique_chars, char)\n     \
    \           unique_chars.add(char)\n                unique_chars_count[char] =\
    \ unique_chars_count[char] + 1\n            else\n                if unique_chars_count[char]\
    \ > unique_chars_count[unique_chars.last]\n                    unique_chars_count[unique_chars.last]\
    \ = unique_chars_count[char]\n                    unique_chars.last\n        \
    \        end\n            end\n        end\n    end\n    \n    if length(unique_chars)\
    \ == length(unique_chars_count)\n        return unique_chars.last\n    else\n\
    \        return unique_chars.last\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    find_max([\n    \"apple\",\n    \"apple\",\n    \"apple\",\n    \"apple\",\n \
    \   \"apple\",\n    \"apple\",\n    \"apple\",\n    \"apple\",\n    \"apple\"\
    ,\n    \"apple\",\n    \"apple\",\n    \"apple\",\n    \"apple\",\n    \"apple\"\
    ,\n    \"apple\",\n    \"apple\",\n    \"apple\",\n    \"apple\",\n    \"apple\"\
    ,\n    \"apple\",\n    \"apple\",\n    \"apple\",\n    \"apple\",\n    \"apple\"\
    ,\n    \"apple\",\n    \"apple\",\n    \"apple\",\n    \"apple\",\n    \"apple\"\
    ,\n    \"apple\",\n    \"apple\",\n    \"apple\",\n    \"apple\",\n    \"apple\"\
    ,\n    \"apple\",\n    \"apple\",\n    \"apple\",\n    \"apple\",\n    \"apple\"\
    ,\n    \"apple\",\n    \"apple\",\n    \"apple\",\n    \"apple\",\n    \"apple\"\
    ,\n    \"apple\",\n    \"apple\",\n    \"apple\",\n    \"apple\",\n    \"apple\"\
    ,\n    \"apple\",\n    \"apple\",\n    \"apple\",\n    \"apple\",\n    \"apple\"\
    ,\n    \"apple\",\n    \"apple\",\n    \"apple\",\n    \"apple\",\n    \"apple\"\
    ,\n    \"apple\",\n    \"apple\",\n    \"apple\",\n    \"apple\",\n    \"apple\"\
    ,\n    \"apple\",\n    \"apple\",\n    \"apple\",\n    \"apple\",\n    \"apple\"\
    ,\n    \"apple\",\n    \"apple\",\n    \"apple\",\n    \"apple\",\n    \"apple\"\
    ,\n    \"apple\",\n    \"apple\",\n    \"apple\",\n    \"apple\",\n    \"apple\"\
    ,\n    \"apple\",\n    \"apple\",\n    \"apple\",\n    \"apple\",\n    \"apple\"\
    ,\n    \"apple\",\n    \"apple\",\n    \"apple\",\n    \"apple\",\n    \"apple\"\
    ,", "    unique_chars = Set{Char}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words.map(w => w[1]))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w[2]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[3]))\n    unique_chars = unique_chars.union(words.map(w => w[4]))\n   \
    \ unique_chars = unique_chars.union(words.map(w => w[5]))\n    unique_chars =\
    \ unique_chars.union(words.map(w => w[6]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[7]))\n    unique_chars = unique_chars.union(words.map(w => w[8]))\n   \
    \ unique_chars = unique_chars.union(words.map(w => w[9]))\n    unique_chars =\
    \ unique_chars.union(words.map(w => w[10]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[11]))\n    unique_chars = unique_chars.union(words.map(w => w[12]))\n \
    \   unique_chars = unique_chars.union(words.map(w => w[13]))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w[14]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[15]))\n    unique_chars = unique_chars.union(words.map(w => w[16]))\n \
    \   unique_chars = unique_chars.union(words.map(w => w[17]))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w[18]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[19]))\n    unique_chars = unique_chars.union(words.map(w => w[20]))\n \
    \   unique_chars = unique_chars.union(words.map(w => w[21]))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w[22]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[23]))\n    unique_chars = unique_chars.union(words.map(w => w[24]))\n \
    \   unique_chars = unique_chars.union(words.map(w => w[25]))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w[26]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[27]))\n    unique_chars = unique_chars.union(words.map(w => w[28]))\n \
    \   unique_chars = unique_chars.union(words.map(w => w[29]))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w", "    \n    unique_chars = Set()\n  \
    \  \n    for word in words \n        unique_chars = unique_chars + Set(word)\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"\\n\")\n    \n    if length(unique_chars)\
    \ == 0 \n        return \"\\n\"\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"\\n\")\n    \n    unique_chars = unique_chars - Set(\"\\n\")\n    \n\
    \    unique_chars = unique_chars - Set(\"\\n\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"\\n\")\n    \n    unique_chars = unique_chars - Set(\"\\n\")\n    \n\
    \    unique_chars = unique_chars - Set(\"\\n\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"\\n\")\n    \n    unique_chars = unique_chars - Set(\"\\n\")\n    \n\
    \    unique_chars = unique_chars - Set(\"\\n\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"\\n\")\n    \n    unique_chars = unique_chars - Set(\"\\n\")\n    \n\
    \    unique_chars = unique_chars - Set(\"\\n\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"\\n\")\n    \n    unique_chars = unique_chars - Set(\"\\n\")\n    \n\
    \    unique_chars = unique_chars - Set(\"\\n\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"\\n\")\n    \n    unique_chars = unique_chars - Set(\"\\n\")\n    \n\
    \    unique_chars = unique_chars - Set(\"\\n\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"\\n\")\n    \n    unique_chars = unique_chars - Set(\"\\n\")\n    \n\
    \    unique_chars = unique_chars - Set(\"\\n\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"\\n\")\n    \n    unique_chars = unique_chars - Set(\"\\n\")\n    \n\
    \    unique_chars = unique_chars - Set(\"\\n\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"\\n\")\n    \n    unique_chars = unique_chars - Set(\"\\n\")\n    \n\
    \    unique_chars = unique_chars - Set(\"\\n\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"\\n\")\n    \n    unique_chars = unique_chars - Set(\"\\n\")\n    \n\
    \    unique_chars = unique_chars - Set(\"\\n\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"\\n\")\n    \n    unique_chars = unique_chars - Set(\"\\n\")\n    \n\
    \    unique_chars = unique_chars - Set(\"\\n\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"\\n\")\n    \n    unique_chars = unique_chars - Set(\"\\n\")\n    \n\
    \    ", "    \n    unique_chars = Set{Char}()\n    \n    for word in words \n\
    \        for char in word\n            unique_chars.add(char)\n        end\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"\\n\")\n    \n    if unique_chars.size\
    \ > 1\n        \n        unique_chars = unique_chars - Set(\"\\n\")\n        \n\
    \        word_with_max_unique_chars = words[findfirst(unique_chars)]\n       \
    \ \n        return word_with_max_unique_chars\n        \n    else\n        return\
    \ words[1]\n    end\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\n   \
    \ \"Hello\",\n    \"World\",\n    \"Hello\",\n    \"World\",\n    \"Hello\",\n\
    \    \"World\",\n    \"Hello\",\n    \"World\",\n    \"Hello\",\n    \"World\"\
    ,\n    \"Hello\",\n    \"World\",\n    \"Hello\",\n    \"World\",\n    \"Hello\"\
    ,\n    \"World\",\n    \"Hello\",\n    \"World\",\n    \"Hello\",\n    \"World\"\
    ,\n    \"Hello\",\n    \"World\",\n    \"Hello\",\n    \"World\",\n    \"Hello\"\
    ,\n    \"World\",\n    \"Hello\",\n    \"World\",\n    \"Hello\",\n    \"World\"\
    ,\n    \"Hello\",\n    \"World\",\n    \"Hello\",\n    \"World\",\n    \"Hello\"\
    ,\n    \"World\",\n    \"Hello\",\n    \"World\",\n    \"Hello\",\n    \"World\"\
    ,\n    \"Hello\",\n    \"World\",\n    \"Hello\",\n    \"World\",\n    \"Hello\"\
    ,\n    \"World\",\n    \"Hello\",\n    \"World\",\n    \"Hello\",\n    \"World\"\
    ,\n    \"Hello\",\n    \"World\",\n    \"Hello\",\n    \"World\",\n    \"Hello\"\
    ,\n    \"World\",\n    \"Hello\",\n    \"World\",\n    \"Hello\",\n    \"World\"\
    ,\n    \"Hello\",\n    \"World\",\n    \"Hello\",\n    \"World\",\n    \"Hello\"\
    ,\n    \"World\",\n    \"Hello\",\n    \"World\",\n    \"Hello\",\n    \"World\"\
    ,\n    \"Hello\",\n    \"World\",\n    \"Hello\",\n    \"World\",\n    \"Hello\"\
    ,\n    \"World\",\n    \"Hello\",\n    \"World\",\n    \"Hello\",\n    \"World\"\
    ,\n    \"Hello\",\n    \"World\",\n    \"Hello\",\n    \"World\",\n    \"Hello\"\
    ,\n    \"World\",\n    \"Hello\",\n    \"World\",\n    \"Hello\",\n    \"World\"\
    ,\n    \"Hello\",\n    \"World\",\n    \"Hello\",\n    \"World\",\n    \"Hello\"\
    ,\n    \"World\",\n    \"Hello\",\n    \"World\",", "    unique_chars = Set{String}()\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_", "    unique_chars = Set()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_", " \
    \   \n    unique_chars = Set()\n    \n    for word in words \n        unique_chars\
    \ = unique_chars | Set(word)\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"\\n\")\n    \n    if length(unique_chars) > length(words)\n        return\
    \ words[end]\n    else\n        return find_max(words[1:end])\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nfind_max([\n    \"Hello\",\n    \"World\"\
    ,\n    \"Hello\",\n    \"World\",\n    \"Hello\",\n    \"World\",\n    \"Hello\"\
    ,\n    \"World\",\n    \"Hello\",\n    \"World\",\n    \"Hello\",\n    \"World\"\
    ,\n    \"Hello\",\n    \"World\",\n    \"Hello\",\n    \"World\",\n    \"Hello\"\
    ,\n    \"World\",\n    \"Hello\",\n    \"World\",\n    \"Hello\",\n    \"World\"\
    ,\n    \"Hello\",\n    \"World\",\n    \"Hello\",\n    \"World\",\n    \"Hello\"\
    ,\n    \"World\",\n    \"Hello\",\n    \"World\",\n    \"Hello\",\n    \"World\"\
    ,\n    \"Hello\",\n    \"World\",\n    \"Hello\",\n    \"World\",\n    \"Hello\"\
    ,\n    \"World\",\n    \"Hello\",\n    \"World\",\n    \"Hello\",\n    \"World\"\
    ,\n    \"Hello\",\n    \"World\",\n    \"Hello\",\n    \"World\",\n    \"Hello\"\
    ,\n    \"World\",\n    \"Hello\",\n    \"World\",\n    \"Hello\",\n    \"World\"\
    ,\n    \"Hello\",\n    \"World\",\n    \"Hello\",\n    \"World\",\n    \"Hello\"\
    ,\n    \"World\",\n    \"Hello\",\n    \"World\",\n    \"Hello\",\n    \"World\"\
    ,\n    \"Hello\",\n    \"World\",\n    \"Hello\",\n    \"World\",\n    \"Hello\"\
    ,\n    \"World\",\n    \"Hello\",\n    \"World\",\n    \"Hello\",\n    \"World\"\
    ,\n    \"Hello\",\n    \"World\",\n    \"Hello\",\n    \"World\",\n    \"Hello\"\
    ,\n    \"World\",\n    \"Hello\",\n    \"World\",\n    \"Hello\",\n    \"World\"\
    ,\n    \"Hello\",\n    \"World\",\n    \"Hello\",\n    \"World\",\n    \"Hello\"\
    ,\n    \"World\",\n    \"Hello\",\n    \"World\",\n    \"Hello\",\n    \"World\"\
    ,\n    \"Hello\",\n    \"World\",\n    \"Hello\",\n    \"World\",\n    \"Hello\"\
    ,\n    \"World\",\n    \"Hello\",\n    \"World\",\n    \"Hello\",\n    \"World\"\
    ,\n    \"Hello\",\n    \"World\",\n    \"Hello\",\n    \"World\",\n    \"Hello\"\
    ,\n    \"", "    unique_chars = Set{Char}()\n    unique_chars.update(\"$\".chars)\n\
    \    unique_chars.update(\"!\".chars)\n    unique_chars.update(\"@\".chars)\n\
    \    unique_chars.update(\"#\".chars)\n    unique_chars.update(\"$\".chars)\n\
    \    unique_chars.update(\"%\".chars)\n    unique_chars.update(\"^\".chars)\n\
    \    unique_chars.update(\"&\".chars)\n    unique_chars.update(\"*\".chars)\n\
    \    unique_chars.update(\"(\").chars\n    unique_chars.update(\")\".chars)\n\
    \    unique_chars.update(\",\".chars)\n    unique_chars.update(\":\".chars)\n\
    \    unique_chars.update(\";\".chars)\n    unique_chars.update(\"=\".chars)\n\
    \    unique_chars.update(\"?\".chars)\n    unique_chars.update(\"'\".chars)\n\
    \    unique_chars.update(\"\\\"\".chars)\n    unique_chars.update(\"{\".chars)\n\
    \    unique_chars.update(\"}\".chars)\n    unique_chars.update(\"[\").chars\n\
    \    unique_chars.update(\"]\".chars)\n    unique_chars.update(\"{\").chars\n\
    \    unique_chars.update(\"}\").chars\n    unique_chars.update(\"<\").chars\n\
    \    unique_chars.update(\">\").chars\n    unique_chars.update(\",\").chars\n\
    \    unique_chars.update(\";\").chars\n    unique_chars.update(\":\").chars\n\
    \    unique_chars.update(\"=\").chars\n    unique_chars.update(\"?\").chars\n\
    \    unique_chars.update(\"'\").chars\n    unique_chars.update(\"\\\"\").chars\n\
    \    unique_chars.update(\"{\").chars\n    unique_chars.update(\"}\").chars\n\
    \    unique_chars.update(\"<\").chars\n    unique_chars.update(\">\").chars\n\
    \    unique_chars.update(\",\").chars\n    unique_chars.update(\";\").chars\n\
    \    unique_chars.update(\":\").chars\n    unique_chars.update(\"=\").chars\n\
    \    unique_chars.update(\"?\").chars\n    unique_chars.update(\"'\").chars\n\
    \    unique_chars.update(\"\\\"\").chars\n    unique_chars.update(\"{\").chars\n\
    \    unique_chars.update(\"}\").chars", "    unique_chars = Set()\n    unique_chars_count\
    \ = Dict()\n    for word in words\n        for char in word\n            if char\
    \ in unique_chars\n                unique_chars_count[char] += 1\n           \
    \ else\n                unique_chars.add(char)\n                unique_chars_count[char]\
    \ = 1\n    end\n    \n    unique_chars_count = sort(unique_chars_count, by = x\
    \ -> x[1])\n    unique_chars_count = unique_chars_count[end]\n    \n    if unique_chars_count\
    \ > 1\n        return words[end]\n    else\n        return words[1]\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nfind_max([\"apple\", \"apple\", \"apple\"\
    , \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\"\
    , \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\"\
    , \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\"\
    , \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\"\
    , \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\"\
    , \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\"\
    , \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\"\
    , \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\"\
    , \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\"\
    , \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\"\
    , \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\"\
    , \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\"\
    , \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\"\
    , \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\"\
    , \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\"\
    , \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\"\
    , \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\"\
    , \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\"\
    , \"banana\", \"banana\", \"banana\", \"", "    unique_chars = Set{String}()\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words[1]))\n    unique_chars = unique_chars.union(Set(words[2]))\n\
    \    unique_chars = unique_chars.union(Set(words[3]))\n    unique_chars = unique_chars.union(Set(words[4]))\n\
    \    unique_chars = unique_chars.union(Set(words[5]))\n    unique_chars = unique_chars.union(Set(words[6]))\n\
    \    unique_chars = unique_chars.union(Set(words[7]))\n    unique_chars = unique_chars.union(Set(words[8]))\n\
    \    unique_chars = unique_chars.union(Set(words[9]))\n    unique_chars = unique_chars.union(Set(words[10]))\n\
    \    unique_chars = unique_chars.union(Set(words[11]))\n    unique_chars = unique_chars.union(Set(words[12]))\n\
    \    unique_chars = unique_chars.union(Set(words[13]))\n    unique_chars = unique_chars.union(Set(words[14]))\n\
    \    unique_chars = unique_chars.union(Set(words[15]))\n    unique_chars = unique_chars.union(Set(words[16]))\n\
    \    unique_chars = unique_chars.union(Set(words[17]))\n    unique_chars = unique_chars.union(Set(words[18]))\n\
    \    unique_chars = unique_chars.union(Set(words[19]))\n    unique_chars = unique_chars.union(Set(words[20]))\n\
    \    unique_chars = unique_chars.union(Set(words[21]))\n    unique_chars = unique_chars.union(Set(words[22]))\n\
    \    unique_chars = unique_chars.union(Set(words[23]))\n    unique_chars = unique_chars.union(Set(words[24]))\n\
    \    unique_chars = unique_chars.union(Set(words[25]))\n    unique_chars = unique_chars.union(Set(words[26]))\n\
    \    unique_chars = unique_chars.union(Set(words[27]))\n    unique_chars = unique_chars.union(Set(words[28]))\n\
    \    unique_chars = unique_chars.union(Set(words[29]))\n    unique_chars = unique_chars.union(Set(words[30]))\n\
    \    unique_chars = unique_chars.union(Set(words[31]))\n    unique_chars = unique_chars.union(Set(words[32]))\n\
    \    unique_chars = unique_chars.union(Set(words[33]))\n    unique_chars = unique_chars.union(Set(words[34]))\n\
    \    unique_chars = unique_chars.union(", "    \n    unique_chars = Set{String}()\n\
    \    \n    for word in words\n        for char in word\n            unique_chars.add(char)\n\
    \        end\n    end\n    \n    unique_chars = unique_chars - Set(\"\\n\")\n\
    \    \n    if length(unique_chars) == 0\n        return \"\"\n    end\n    \n\
    \    unique_chars = unique_chars - Set(\"\\t\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"\\r\")\n    \n    if length(unique_chars) == 0\n        return \"\"\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"\\f\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"\\b\")\n    \n    if length(unique_chars) == 0\n        return \"\"\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"\\v\")\n    \n    if length(unique_chars) == 0\n        return \"\"\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"\\e\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"\\a\")\n    \n    if length(unique_chars) == 0\n        return \"\"\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"\\v\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"\\e\")\n    \n    if length(unique_chars) == 0\n        return \"\"\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"\\b\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"\\f\")\n    \n    if length(unique_chars) == 0\n        return \"\"\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"\\r\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"\\t\")\n    \n    if length(unique_chars) == 0\n        return \"\"\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"\\n\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"\\v\")\n    \n    if length(unique_chars) == 0\n        return \"\"\n\
    \    end\n    ", "    \n    unique_chars = Set{Char}()\n    \n    for word in\
    \ words \n        for char in word\n            unique_chars.add(char)\n     \
    \   end\n    end\n    \n    unique_chars = unique_chars - Set(\"_\")\n    \n \
    \   if length(unique_chars) == 0 \n        return \"_\"\n    end\n    \n    unique_chars\
    \ = unique_chars - Set(\".\")\n    \n    if length(unique_chars) == 0 \n     \
    \   return \".\"\n    end\n    \n    unique_chars = unique_chars - Set(\",\")\n\
    \    \n    if length(unique_chars) == 0 \n        return \",\"\n    end\n    \n\
    \    unique_chars = unique_chars - Set(\":\")\n    \n    if length(unique_chars)\
    \ == 0 \n        return \":\"\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\";\")\n    \n    if length(unique_chars) == 0 \n        return \";\"\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"!\")\n    \n    if length(unique_chars)\
    \ == 0 \n        return \"!\"\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"?\")\n    \n    if length(unique_chars) == 0 \n        return \"?\"\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"(\")\n    \n    if length(unique_chars)\
    \ == 0 \n        return \"(\"\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\")\")\n    \n    if length(unique_chars) == 0 \n        return \")\"\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"[\")\n    \n    if length(unique_chars)\
    \ == 0 \n        return \"[\"\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"]\")\n    \n    if length(unique_chars) == 0 \n        return \"]\"\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"{\")\n    \n    if length(unique_chars)\
    \ == 0 \n        return \"{\"\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"}\")\n    \n    if length(unique_chars) == 0 \n        return \"}\"\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\":\")\n    \n    if length(unique_chars)\
    \ == 0 \n        return \":\"\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\";\")\n    \n    if length(unique_chars) == 0 \n        return \";\"\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"!\")\n    \n    if length(unique_chars)\
    \ == 0 \n        return \"!\"\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"?\")\n    \n    if length(unique_chars) == 0 \n        return \"?\"\n\
    \    end\n    \n    unique_chars = unique_chars - Set", "    \n    unique_chars\
    \ = Set{Char}(\"\")\n    \n    for word in words \n        for char in word\n\
    \            unique_chars.add(char)\n        end\n    end\n    \n    unique_chars\
    \ = unique_chars - Set{Char}(\"_\")\n    \n    if length(unique_chars) == 0 \n\
    \        return \"\"\n    end\n    \n    unique_chars = unique_chars - Set{Char}(\"\
    a\")\n    \n    if length(unique_chars) == 0 \n        return \"\"\n    end\n\
    \    \n    unique_chars = unique_chars - Set{Char}(\"A\")\n    \n    if length(unique_chars)\
    \ == 0 \n        return \"\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set{Char}(\"0\")\n    \n    if length(unique_chars) == 0 \n        return \"\
    \"\n    end\n    \n    unique_chars = unique_chars - Set{Char}(\"9\")\n    \n\
    \    if length(unique_chars) == 0 \n        return \"\"\n    end\n    \n    unique_chars\
    \ = unique_chars - Set{Char}(\".\")\n    \n    if length(unique_chars) == 0 \n\
    \        return \"\"\n    end\n    \n    unique_chars = unique_chars - Set{Char}(\"\
    _\")\n    \n    if length(unique_chars) == 0 \n        return \"\"\n    end\n\
    \    \n    unique_chars = unique_chars - Set{Char}(\"a\")\n    \n    if length(unique_chars)\
    \ == 0 \n        return \"\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set{Char}(\"A\")\n    \n    if length(unique_chars) == 0 \n        return \"\
    \"\n    end\n    \n    unique_chars = unique_chars - Set{Char}(\"0\")\n    \n\
    \    if length(unique_chars) == 0 \n        return \"\"\n    end\n    \n    unique_chars\
    \ = unique_chars - Set{Char}(\"9\")\n    \n    if length(unique_chars) == 0 \n\
    \        return \"\"\n    end\n    \n    unique_chars = unique_chars - Set{Char}(\"\
    .\")\n    \n    if length(unique_chars) == 0 \n        return \"\"\n    end\n\
    \    \n    unique_chars = unique_chars - Set{Char}(\"_\")\n    \n    if length(unique_chars)\
    \ == 0 \n        return \"\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set{Char}(\"a\")\n    \n    if length(unique_chars) == 0 \n        return \"\
    \"\n    end\n    \n    unique_chars = unique_chars - Set{Char}(\"A\")\n    \n\
    \    if length(unique_chars) == 0 \n        return \"\"\n    end\n    \n    unique_chars\
    \ = unique_chars - Set{Char}(\"0\")\n    \n    if length(unique_chars) == 0 \n",
  "    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length).filter(x -> x > 1))\n    unique_chars =\
    \ unique_chars.union(words.map(length).filter(x -> x > 2))\n    unique_chars =\
    \ unique_chars.union(words.map(length).filter(x -> x > 3))\n    unique_chars =\
    \ unique_chars.union(words.map(length).filter(x -> x > 4))\n    unique_chars =\
    \ unique_chars.union(words.map(length).filter(x -> x > 5))\n    unique_chars =\
    \ unique_chars.union(words.map(length).filter(x -> x > 6))\n    unique_chars =\
    \ unique_chars.union(words.map(length).filter(x -> x > 7))\n    unique_chars =\
    \ unique_chars.union(words.map(length).filter(x -> x > 8))\n    unique_chars =\
    \ unique_chars.union(words.map(length).filter(x -> x > 9))\n    unique_chars =\
    \ unique_chars.union(words.map(length).filter(x -> x > 10))\n    unique_chars\
    \ = unique_chars.union(words.map(length).filter(x -> x > 11))\n    unique_chars\
    \ = unique_chars.union(words.map(length).filter(x -> x > 12))\n    unique_chars\
    \ = unique_chars.union(words.map(length).filter(x -> x > 13))\n    unique_chars\
    \ = unique_chars.union(words.map(length).filter(x -> x > 14))\n    unique_chars\
    \ = unique_chars.union(words.map(length).filter(x -> x > 15))\n    unique_chars\
    \ = unique_chars.union(words.map(length).filter(x -> x > 16))\n    unique_chars\
    \ = unique_chars.union(words.map(length).filter(x -> x > 17))\n    unique_chars\
    \ = unique_chars.union(words.map(length).filter(x -> x > 18))\n    unique_chars\
    \ = unique_chars.union(words.map(length).filter(x -> x > 19))\n    unique_chars\
    \ = unique_chars.union(words.map(length).filter(x -> x > 20))\n    unique_chars\
    \ = unique_chars.union(words.map(length).filter(x -> x > 21))\n    unique_chars\
    \ = unique_chars.union(words.map(length).filter(x -> x > 22))\n    unique_chars\
    \ = unique_chars.union(words.map(length).filter(x -> x > 23))\n    unique_chars\
    \ = unique_chars.union(words.map(length).filter(x -> x > 24))\n    unique_chars\
    \ = unique_chars.union(words.map(length).filter(x -> x > 25))\n    unique_chars\
    \ = unique_chars.union(words.map(length).filter(x -> ", "    unique_chars = Set()\n\
    \    unique_chars_count = 0\n    unique_chars_index = 0\n    \n    for word in\
    \ words \n        for char in word\n            unique_chars.add(char)\n     \
    \       unique_chars_count += 1\n        end\n    end\n    \n    if unique_chars_count\
    \ > unique_chars_index\n        return words[unique_chars_index]\n    else\n \
    \       return words[unique_chars_index]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    find_max([\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"orange\",\n\
    \    \"apple\",\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"orange\"\
    ,\n    \"banana\",\n    \"orange\",\n    \"apple\",\n    \"banana\",\n    \"apple\"\
    ,\n    \"orange\",\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"orange\"\
    ,\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"orange\",\n    \"apple\"\
    ,\n    \"banana\",\n    \"apple\",\n    \"orange\",\n    \"apple\",\n    \"banana\"\
    ,\n    \"apple\",\n    \"orange\",\n    \"apple\",\n    \"banana\",\n    \"apple\"\
    ,\n    \"orange\",\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"orange\"\
    ,\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"orange\",\n    \"apple\"\
    ,\n    \"banana\",\n    \"apple\",\n    \"orange\",\n    \"apple\",\n    \"banana\"\
    ,\n    \"apple\",\n    \"orange\",\n    \"apple\",\n    \"banana\",\n    \"apple\"\
    ,\n    \"orange\",\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"orange\"\
    ,\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"orange\",\n    \"apple\"\
    ,\n    \"banana\",\n    \"apple\",\n    \"orange\",\n    \"apple\",\n    \"banana\"\
    ,\n    \"apple\",\n    \"orange\",\n    \"apple\",\n    \"banana\",\n    \"apple\"\
    ,\n    \"orange\",\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"orange\"\
    ,\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"orange\",\n    \"apple\"\
    ,\n    \"banana\",\n    \"apple\",\n    \"orange\",\n    \"apple\",\n    \"banana\"\
    ,\n    \"apple\",\n    \"orange\",\n    \"apple\",\n    \"banana\",\n    \"apple\"\
    ,\n    \"orange\",\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"orange\"\
    ,\n    \"apple\",", "    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n", "    unique_chars = Set()\n\
    \    unique_chars_count = Dict{String,Int}()\n    \n    for word in words\n  \
    \      for char in word\n            if !contains(unique_chars, char)\n      \
    \          unique_chars.add(char)\n                unique_chars_count[char] =\
    \ unique_chars_count[char] + 1\n            else\n                if unique_chars_count[char]\
    \ > unique_chars_count[unique_chars.last]\n                    unique_chars.last\n\
    \                else\n                    unique_chars_count[unique_chars.last]\n\
    \                end\n            end\n        end\n    end\nend\n</cell>\n<code\
    \ language=julia-1.4>\nfind_max([\n    \"apple\", \"banana\", \"apple\", \"apple\"\
    , \"banana\", \"banana\", \"apple\", \"apple\", \"banana\", \"banana\", \"apple\"\
    , \"apple\", \"banana\", \"banana\", \"apple\", \"apple\", \"banana\", \"banana\"\
    , \"apple\", \"apple\", \"banana\", \"banana\", \"apple\", \"apple\", \"banana\"\
    , \"banana\", \"apple\", \"apple\", \"banana\", \"banana\", \"apple\", \"apple\"\
    , \"banana\", \"banana\", \"apple\", \"apple\", \"banana\", \"banana\", \"apple\"\
    , \"apple\", \"banana\", \"banana\", \"apple\", \"apple\", \"banana\", \"banana\"\
    , \"apple\", \"apple\", \"banana\", \"banana\", \"apple\", \"apple\", \"banana\"\
    , \"banana\", \"apple\", \"apple\", \"banana\", \"banana\", \"apple\", \"apple\"\
    , \"banana\", \"banana\", \"apple\", \"apple\", \"banana\", \"banana\", \"apple\"\
    , \"apple\", \"banana\", \"banana\", \"apple\", \"apple\", \"banana\", \"banana\"\
    , \"apple\", \"apple\", \"banana\", \"banana\", \"apple\", \"apple\", \"banana\"\
    , \"banana\", \"apple\", \"apple\", \"banana\", \"banana\", \"apple\", \"apple\"\
    , \"banana\", \"banana\", \"apple\", \"apple\", \"banana\", \"banana\", \"apple\"\
    , \"apple\", \"banana\", \"banana\", \"apple\", \"apple\", \"banana\", \"banana\"\
    , \"apple\", \"apple\", \"banana\", \"banana\", \"apple\", \"apple\", \"banana\"\
    , \"banana\", \"apple\", \"apple\", \"banana\", \"banana\", \"apple\", \"apple\"\
    , \"banana\", \"banana\", \"apple\", \"apple\", \"banana\", \"banana\", \"apple\"\
    , \"apple\", \"banana\", \"banana\", \"apple\", \"apple\", \"banana\", \"banana\"\
    , \"apple\", \"apple\", \"banana\", \"banana\", \"apple\", \"apple\", \"banana\"\
    , \"banana\", \"apple\", \"apple\", \"banana\", \"banana\", \"apple\", \"apple\"\
    , \"banana\", \"banana\", \"apple\", \"apple\", \"banana\", \"banana\", \"apple\"\
    , \"apple\", \"banana\", \"banana\", \"apple\", \"apple", "    unique_chars =\
    \ Set{Char}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(&lowercase))\n\
    \    unique_chars = unique_chars.union(words.map(&uppercase))\n    unique_chars\
    \ = unique_chars.union(words.map(&digit))\n    unique_chars = unique_chars.union(words.map(&punct))\n\
    \    unique_chars = unique_chars.union(words.map(&nonascii))\n    unique_chars\
    \ = unique_chars.union(words.map(&unicode))\n    unique_chars = unique_chars.union(words.map(&nonprintable))\n\
    \    unique_chars = unique_chars.union(words.map(&whitespace))\n    unique_chars\
    \ = unique_chars.union(words.map(&nonbreakingspace))\n    unique_chars = unique_chars.union(words.map(&newline))\n\
    \    unique_chars = unique_chars.union(words.map(&tab))\n    unique_chars = unique_chars.union(words.map(&newline))\n\
    \    unique_chars = unique_chars.union(words.map(&carriage_return))\n    unique_chars\
    \ = unique_chars.union(words.map(&newline))\n    unique_chars = unique_chars.union(words.map(&newline))\n\
    \    unique_chars = unique_chars.union(words.map(&newline))\n    unique_chars\
    \ = unique_chars.union(words.map(&newline))\n    unique_chars = unique_chars.union(words.map(&newline))\n\
    \    unique_chars = unique_chars.union(words.map(&newline))\n    unique_chars\
    \ = unique_chars.union(words.map(&newline))\n    unique_chars = unique_chars.union(words.map(&newline))\n\
    \    unique_chars = unique_chars.union(words.map(&newline))\n    unique_chars\
    \ = unique_chars.union(words.map(&newline))\n    unique_chars = unique_chars.union(words.map(&newline))\n\
    \    unique_chars = unique_chars.union(words.map(&newline))\n    unique_chars\
    \ = unique_chars.union(words.map(&newline))\n    unique_chars = unique_chars.union(words.map(&newline))\n\
    \    unique_chars = unique_chars.union(words.map(&newline))\n    unique_chars\
    \ = unique_chars.union(words.map(&newline))\n    unique_chars = unique_chars.union(words.map(&newline))\n\
    \    unique_chars = unique_chars.union(words.map(&newline))\n    unique_chars\
    \ = unique_chars.union(words.map(&newline))\n    unique_chars = unique_chars.union(words.map(&newline))\n\
    \    unique_chars = unique_chars.", "    \n    unique_chars = Set()\n    \n  \
    \  for word in words \n        unique_chars = unique_chars | Set(word)\n    end\n\
    \    \n    unique_chars = unique_chars - Set(\"\\n\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\t\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\r\")\n    \n    unique_chars = unique_chars - Set(\"\\f\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\b\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\a\")\n    \n    unique_chars = unique_chars - Set(\"\\v\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\e\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\a\")\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\a\")\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\a\")\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\a\")\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\a\")\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\a\")\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\a\")\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\a\")\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\a\")\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars\
    \ = unique_char", "    \n    unique_chars = Set()\n    \n    for w in words\n\
    \        unique_chars = unique_chars + Set(w)\n    end\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\n\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\t\")\n    \n    unique_chars = unique_chars - Set(\"\\r\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\f\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\b\")\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\v\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\e\")\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\c\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\e\")\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\c\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\e\")\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\c\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\e\")\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\c\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\e\")\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\c\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\e\")\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\c\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\e\")\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\c\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\e\")\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\c\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\e\")\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\c\")\n", "    unique_chars = Set{Char}()\n    unique_chars\
    \ = unique_chars.union(words)\n    unique_chars = unique_chars.union(words[1])\n\
    \    unique_chars = unique_chars.union(words[2])\n    unique_chars = unique_chars.union(words[3])\n\
    \    unique_chars = unique_chars.union(words[4])\n    unique_chars = unique_chars.union(words[5])\n\
    \    unique_chars = unique_chars.union(words[6])\n    unique_chars = unique_chars.union(words[7])\n\
    \    unique_chars = unique_chars.union(words[8])\n    unique_chars = unique_chars.union(words[9])\n\
    \    unique_chars = unique_chars.union(words[10])\n    unique_chars = unique_chars.union(words[11])\n\
    \    unique_chars = unique_chars.union(words[12])\n    unique_chars = unique_chars.union(words[13])\n\
    \    unique_chars = unique_chars.union(words[14])\n    unique_chars = unique_chars.union(words[15])\n\
    \    unique_chars = unique_chars.union(words[16])\n    unique_chars = unique_chars.union(words[17])\n\
    \    unique_chars = unique_chars.union(words[18])\n    unique_chars = unique_chars.union(words[19])\n\
    \    unique_chars = unique_chars.union(words[20])\n    unique_chars = unique_chars.union(words[21])\n\
    \    unique_chars = unique_chars.union(words[22])\n    unique_chars = unique_chars.union(words[23])\n\
    \    unique_chars = unique_chars.union(words[24])\n    unique_chars = unique_chars.union(words[25])\n\
    \    unique_chars = unique_chars.union(words[26])\n    unique_chars = unique_chars.union(words[27])\n\
    \    unique_chars = unique_chars.union(words[28])\n    unique_chars = unique_chars.union(words[29])\n\
    \    unique_chars = unique_chars.union(words[30])\n    unique_chars = unique_chars.union(words[31])\n\
    \    unique_chars = unique_chars.union(words[32])\n    unique_chars = unique_chars.union(words[33])\n\
    \    unique_chars = unique_chars.union(words[34])\n    unique_chars = unique_chars.union(words[35])\n\
    \    unique_chars = unique_chars.union(words[36])\n    unique_chars = unique_chars.union(words[37])\n\
    \    unique_chars = unique_chars.union(words[38])\n    unique_chars = unique_chars.union(word",
  "    \n    unique_chars = Set()\n    \n    for word in words\n        unique_chars\
    \ = unique_chars + Set(word)\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"\\n\")\n    \n    if length(unique_chars) > length(words)\n        return\
    \ words[end]\n    else\n        return find_max(words[1:end])\n    end\nend",
  "    \n    unique_chars = Set{String}()\n    \n    for word in words\n        for\
    \ char in word\n            unique_chars.add(char)\n        end\n    end\n   \
    \ \n    if unique_chars.size > 1\n        \n        for word in words\n      \
    \      for char in word\n                if !unique_chars.contains(char)\n   \
    \                 unique_chars.insert(char)\n                end\n           \
    \ end\n        end\n    end\n    \n    return words[unique_chars.first]\nend\n\
    </cell>\n<code language=julia-1.5>\nfind_max([\n    \"apple\",\n    \"banana\"\
    ,\n    \"apple\",\n    \"apple\",\n    \"banana\",\n    \"banana\",\n    \"banana\"\
    ,\n    \"apple\",\n    \"apple\",\n    \"apple\",\n    \"banana\",\n    \"banana\"\
    ,\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"\
    banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n\
    \    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\"\
    ,\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"\
    banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n\
    \    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\"\
    ,\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"\
    banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n\
    \    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\"\
    ,\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"\
    banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n\
    \    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\"\
    ,\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"\
    banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n\
    \    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\"\
    ,\n    \"banana\",\n", "    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_", "    unique_chars\
    \ = Set{Char}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_", "    unique_chars\
    \ = Set()\n    unique_chars_count = Dict{String, Int}()\n    for word in words\
    \ \n        unique_chars |= Set(word)\n        for char in word\n            unique_chars_count[char]\
    \ = unique_chars_count[char] + 1 if char in unique_chars_count else 1\n    end\n\
    \    \n    unique_chars_sorted = sort(unique_chars_count.values)\n    \n    unique_chars_sorted\
    \ = unique_chars_sorted[end-1:end]\n    \n    unique_chars_sorted = unique_chars_sorted[end-1:end]\n\
    \    \n    unique_chars_sorted = unique_chars_sorted[end-1:end]\n    \n    unique_chars_sorted\
    \ = unique_chars_sorted[end-1:end]\n    \n    unique_chars_sorted = unique_chars_sorted[end-1:end]\n\
    \    \n    unique_chars_sorted = unique_chars_sorted[end-1:end]\n    \n    unique_chars_sorted\
    \ = unique_chars_sorted[end-1:end]\n    \n    unique_chars_sorted = unique_chars_sorted[end-1:end]\n\
    \    \n    unique_chars_sorted = unique_chars_sorted[end-1:end]\n    \n    unique_chars_sorted\
    \ = unique_chars_sorted[end-1:end]\n    \n    unique_chars_sorted = unique_chars_sorted[end-1:end]\n\
    \    \n    unique_chars_sorted = unique_chars_sorted[end-1:end]\n    \n    unique_chars_sorted\
    \ = unique_chars_sorted[end-1:end]\n    \n    unique_chars_sorted = unique_chars_sorted[end-1:end]\n\
    \    \n    unique_chars_sorted = unique_chars_sorted[end-1:end]\n    \n    unique_chars_sorted\
    \ = unique_chars_sorted[end-1:end]\n    \n    unique_chars_sorted = unique_chars_sorted[end-1:end]\n\
    \    \n    unique_chars_sorted = unique_chars_sorted[end-1:end]\n    \n    unique_chars_sorted\
    \ = unique_chars_sorted[end-1:end]\n    \n    unique_chars_sorted = unique_chars_sorted[end-1:end]\n\
    \    \n    unique_chars_sorted = unique_chars_sorted[end-1:end]\n    \n    unique_chars_sorted\
    \ = unique_chars_sorted[end-1:end]\n    \n    unique_chars_sorted = unique_chars_sorted[end-1:end]\n\
    \    \n    unique_chars_sorted = unique_chars_sorted[end-1:end]\n    \n    unique_chars_sorted\
    \ = unique_chars_sorted[end-1:end]\n    \n    unique_chars_sorted = unique_chars_sorted[end-1:end]\n\
    \    \n    unique_chars_sorted = unique_chars_sorted[end-1:end]\n    \n    unique_chars_sorted\
    \ = unique_chars_sorted[end-1:end]\n    \n    unique_chars_sorted = unique_chars_sorted[end-1:end]\n\
    \    \n    unique_chars_sorted = ", "    unique_chars = Set{String}()\n    unique_chars\
    \ = unique_chars.union(words)\n    unique_chars = unique_chars.union(words.map(&length))\n\
    \    unique_chars = unique_chars.union(words.map(&length))\n    unique_chars =\
    \ unique_chars.union(words.map(&length))\n    unique_chars = unique_chars.union(words.map(&length))\n\
    \    unique_chars = unique_chars.union(words.map(&length))\n    unique_chars =\
    \ unique_chars.union(words.map(&length))\n    unique_chars = unique_chars.union(words.map(&length))\n\
    \    unique_chars = unique_chars.union(words.map(&length))\n    unique_chars =\
    \ unique_chars.union(words.map(&length))\n    unique_chars = unique_chars.union(words.map(&length))\n\
    \    unique_chars = unique_chars.union(words.map(&length))\n    unique_chars =\
    \ unique_chars.union(words.map(&length))\n    unique_chars = unique_chars.union(words.map(&length))\n\
    \    unique_chars = unique_chars.union(words.map(&length))\n    unique_chars =\
    \ unique_chars.union(words.map(&length))\n    unique_chars = unique_chars.union(words.map(&length))\n\
    \    unique_chars = unique_chars.union(words.map(&length))\n    unique_chars =\
    \ unique_chars.union(words.map(&length))\n    unique_chars = unique_chars.union(words.map(&length))\n\
    \    unique_chars = unique_chars.union(words.map(&length))\n    unique_chars =\
    \ unique_chars.union(words.map(&length))\n    unique_chars = unique_chars.union(words.map(&length))\n\
    \    unique_chars = unique_chars.union(words.map(&length))\n    unique_chars =\
    \ unique_chars.union(words.map(&length))\n    unique_chars = unique_chars.union(words.map(&length))\n\
    \    unique_chars = unique_chars.union(words.map(&length))\n    unique_chars =\
    \ unique_chars.union(words.map(&length))\n    unique_chars = unique_chars.union(words.map(&length))\n\
    \    unique_chars = unique_chars.union(words.map(&length))\n    unique_chars =\
    \ unique_chars.union(words.map(&length))\n    unique_chars = unique_chars.union(words.map(&length))\n\
    \    unique_chars = unique_chars.union(words.map(&length))\n    unique_chars =\
    \ unique_chars.union(words.map(&length))\n    unique_chars = unique_chars.union(words.map(&length))\n\
    \    unique_chars = unique_chars.union(words.map(&length))\n    unique_", "  \
    \  \n    unique_chars = Set{Char}()\n    \n    for word in words \n        for\
    \ char in word\n            unique_chars.add(char)\n        end\n    end\n   \
    \ \n    if length(unique_chars) > length(words)\n        return words[end]\n \
    \   else\n        \n        unique_chars = sort(unique_chars)\n        \n    \
    \    for word in words \n            if length(unique_chars) < length(word)\n\
    \                return word\n            end\n        end\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\n    \"apple\",\n    \"banana\",\n    \"\
    apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\",\n \
    \   \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\"\
    ,\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\"\
    ,\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\"\
    ,\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\"\
    ,\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\"\
    ,\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\"\
    ,\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\"\
    ,\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\"\
    ,\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\"\
    ,\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\"\
    ,\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\"\
    ,\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\"\
    ,\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\"\
    ,\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\"\
    ,\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\"\
    ,\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\"\
    ,\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana",
  "    \n    unique_chars = Set()\n    \n    for word in words \n        unique_chars\
    \ = unique_chars | Set(word)\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"\\n\")\n    \n    unique_chars = unique_chars - Set(\"\\r\")\n    \n \
    \   unique_chars = unique_chars - Set(\"\\t\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"\\v\")\n    \n    unique_chars = unique_chars - Set(\"\\f\")\n    \n\
    \    unique_chars = unique_chars - Set(\"\\b\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"\\a\")\n    \n    unique_chars = unique_chars - Set(\"\\e\")\n    \n\
    \    unique_chars = unique_chars - Set(\"\\v\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"\\f\")\n    \n    unique_chars = unique_chars - Set(\"\\b\")\n    \n\
    \    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"\\e\")\n    \n    unique_chars = unique_chars - Set(\"\\v\")\n    \n\
    \    unique_chars = unique_chars - Set(\"\\f\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"\\b\")\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n\
    \    unique_chars = unique_chars - Set(\"\\e\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"\\v\")\n    \n    unique_chars = unique_chars - Set(\"\\f\")\n    \n\
    \    unique_chars = unique_chars - Set(\"\\b\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"\\a\")\n    \n    unique_chars = unique_chars - Set(\"\\e\")\n    \n\
    \    unique_chars = unique_chars - Set(\"\\v\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"\\f\")\n    \n    unique_chars = unique_chars - Set(\"\\b\")\n    \n\
    \    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"\\e\")\n    \n    unique_chars = unique_chars - Set(\"\\v\")\n    \n\
    \    unique_chars = unique_chars - Set(\"\\f\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"\\b\")\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n\
    \    unique_chars = unique_chars - Set(\"\\e\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"\\", "    \n    unique_chars = Set{Char}()\n    \n    for word in words\
    \ \n        for char in word\n            unique_chars.add(char)\n        end\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"_\") # remove \"_\" from\
    \ set\n    \n    if length(unique_chars) > length(words)\n        return words[end]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"_\") # remove \"_\" from\
    \ set\n    \n    if length(unique_chars) == length(words)\n        return words[end]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"_\") # remove \"_\" from\
    \ set\n    \n    if length(unique_chars) < length(words)\n        return words[end]\n\
    \    end\n    \n    return words[end]\nend\n</cell>\n<code language=julia-1.5>\n\
    find_max([\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\",\n \
    \   \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\"\
    ,\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\"\
    ,\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\"\
    ,\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\"\
    ,\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\"\
    ,\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\"\
    ,\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\"\
    ,\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\"\
    ,\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\"\
    ,\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\"\
    ,\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\"\
    ,\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\"\
    ,\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\"\
    ,\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\"\
    ,\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\"\
    ,\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\"\
    ,\n    \"hello\",\n    \"world\",\n    \"hello", "    unique_chars = Set{String}()\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_", "    \n    unique_chars = Set{Char}()\n    \n    for word in words\
    \ \n        unique_chars = unique_chars + Set{Char}(word)\n    end\n    \n   \
    \ unique_chars = unique_chars - Set{Char}(\"\\n\")\n    \n    if length(unique_chars)\
    \ > length(words)\n        return words[end]\n    end\n    \n    unique_chars\
    \ = unique_chars - Set{Char}(\"\\n\")\n    \n    if length(unique_chars) == length(words)\n\
    \        return words[1]\n    end\n    \n    unique_chars = unique_chars - Set{Char}(\"\
    \\n\")\n    \n    if length(unique_chars) == length(words)\n        return words[end]\n\
    \    end\n    \n    unique_chars = unique_chars - Set{Char}(\"\\n\")\n    \n \
    \   if length(unique_chars) == length(words)\n        return words[1]\n    end\n\
    \    \n    unique_chars = unique_chars - Set{Char}(\"\\n\")\n    \n    if length(unique_chars)\
    \ == length(words)\n        return words[end]\n    end\n    \n    unique_chars\
    \ = unique_chars - Set{Char}(\"\\n\")\n    \n    if length(unique_chars) == length(words)\n\
    \        return words[1]\n    end\n    \n    unique_chars = unique_chars - Set{Char}(\"\
    \\n\")\n    \n    if length(unique_chars) == length(words)\n        return words[end]\n\
    \    end\n    \n    unique_chars = unique_chars - Set{Char}(\"\\n\")\n    \n \
    \   if length(unique_chars) == length(words)\n        return words[1]\n    end\n\
    \    \n    unique_chars = unique_chars - Set{Char}(\"\\n\")\n    \n    if length(unique_chars)\
    \ == length(words)\n        return words[end]\n    end\n    \n    unique_chars\
    \ = unique_chars - Set{Char}(\"\\n\")\n    \n    if length(unique_chars) == length(words)\n\
    \        return words[1]\n    end\n    \n    unique_chars = unique_chars - Set{Char}(\"\
    \\n\")\n    \n    if length(unique_chars) == length(words)\n        return words[end]\n\
    \    end\n    \n    unique_chars = unique_chars - Set{Char}(\"\\n\")\n    \n \
    \   if length(unique_chars) == length(words)\n        return words[1]\n    end\n\
    \    \n    unique_chars = unique_chars - Set{Char}(\"\\n\")\n    \n    if length(unique_chars)\
    \ == length(words)\n        return words[end]\n    end\n    \n    unique_chars\
    \ = unique_chars - Set{Char}(\"\\n\")\n    \n    if length(unique_chars) == length(words)\n\
    \        return words[1]\n    end\n    \n    unique_chars = unique_chars - Set{Char}(\"\
    \\n\")\n    \n    if length(unique_chars) == length(", "    \n    unique_chars\
    \ = Set{String}()\n    \n    for word in words \n        unique_chars = unique_chars\
    \ | Set(word)\n    end\n    \n    unique_chars = unique_chars - Set(\"\\n\")\n\
    \    \n    unique_chars = unique_chars - Set(\"\\t\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\r\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\f\")\n    \n    unique_chars = unique_chars - Set(\"\\b\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\v\")\n    \n    unique_chars = unique_chars - Set(\"\\e\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\e\")\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\e\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\a\")\n    \n    unique_chars = unique_chars - Set(\"\\e\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\e\")\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\e\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\a\")\n    \n    unique_chars = unique_chars - Set(\"\\e\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\e\")\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\e\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\a\")\n    \n    unique_chars = unique_chars - Set(\"\\e\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\e\")\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\e\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\a\")\n    \n    unique_chars = unique_chars - Set(\"\\e\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_", "    unique_chars\
    \ = Set{Char}()\n    unique_chars = unique_chars.union(union(words))\n    unique_chars\
    \ = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(word", "    unique_chars = Set{String}()\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 1))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 2))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 3))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 4))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 5))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 6))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 7))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 8))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 9))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 10))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 11))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 12))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 13))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 14))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 15))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 16))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 17))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 18))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 19))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 20))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 21))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 22))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 23))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 24))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 25))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> ", "    unique_chars\
    \ = Set()\n    unique_chars_counts = Dict()\n    for word in words \n        unique_chars\
    \ = unique_chars + Set(word)\n        unique_chars_counts[word] = length(unique_chars)\n\
    \    end\n    \n    unique_chars_counts = Dict([(word, length(unique_chars)) for\
    \ word in unique_chars])\n    \n    unique_chars_counts = sort(unique_chars_counts,\
    \ by=x->x[1], rev=true)\n    \n    return unique_chars_counts[1][1]\nend", " \
    \   unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_", "    unique_chars\
    \ = Set{Char}(unique_chars(words))\n    unique_chars.sort()\n    \n    if unique_chars.size\
    \ == 0 \n        return \"\"\n    \n    unique_chars.last\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfind_max([\n    \"apple\",\n    \"banana\",\n    \"carrot\"\
    ,\n    \"dog\",\n    \"elephant\",\n    \"fish\",\n    \"goat\",\n    \"horse\"\
    ,\n    \"kangaroo\",\n    \"lion\",\n    \"monkey\",\n    \"pig\",\n    \"piglet\"\
    ,\n    \"piglet\",\n    \"piglet\",\n    \"piglet\",\n    \"piglet\",\n    \"\
    piglet\",\n    \"piglet\",\n    \"piglet\",\n    \"piglet\",\n    \"piglet\",\n\
    \    \"piglet\",\n    \"piglet\",\n    \"piglet\",\n    \"piglet\",\n    \"piglet\"\
    ,\n    \"piglet\",\n    \"piglet\",\n    \"piglet\",\n    \"piglet\",\n    \"\
    piglet\",\n    \"piglet\",\n    \"piglet\",\n    \"piglet\",\n    \"piglet\",\n\
    \    \"piglet\",\n    \"piglet\",\n    \"piglet\",\n    \"piglet\",\n    \"piglet\"\
    ,\n    \"piglet\",\n    \"piglet\",\n    \"piglet\",\n    \"piglet\",\n    \"\
    piglet\",\n    \"piglet\",\n    \"piglet\",\n    \"piglet\",\n    \"piglet\",\n\
    \    \"piglet\",\n    \"piglet\",\n    \"piglet\",\n    \"piglet\",\n    \"piglet\"\
    ,\n    \"piglet\",\n    \"piglet\",\n    \"piglet\",\n    \"piglet\",\n    \"\
    piglet\",\n    \"piglet\",\n    \"piglet\",\n    \"piglet\",\n    \"piglet\",\n\
    \    \"piglet\",\n    \"piglet\",\n    \"piglet\",\n    \"piglet\",\n    \"piglet\"\
    ,\n    \"piglet\",\n    \"piglet\",\n    \"piglet\",\n    \"piglet\",\n    \"\
    piglet\",\n    \"piglet\",\n    \"piglet\",\n    \"piglet\",\n    \"piglet\",\n\
    \    \"p", "    unique_chars = Set{Char}(\"\")\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words[1]))\n    unique_chars = unique_chars.union(Set(words[2]))\n\
    \    unique_chars = unique_chars.union(Set(words[3]))\n    unique_chars = unique_chars.union(Set(words[4]))\n\
    \    unique_chars = unique_chars.union(Set(words[5]))\n    unique_chars = unique_chars.union(Set(words[6]))\n\
    \    unique_chars = unique_chars.union(Set(words[7]))\n    unique_chars = unique_chars.union(Set(words[8]))\n\
    \    unique_chars = unique_chars.union(Set(words[9]))\n    unique_chars = unique_chars.union(Set(words[10]))\n\
    \    unique_chars = unique_chars.union(Set(words[11]))\n    unique_chars = unique_chars.union(Set(words[12]))\n\
    \    unique_chars = unique_chars.union(Set(words[13]))\n    unique_chars = unique_chars.union(Set(words[14]))\n\
    \    unique_chars = unique_chars.union(Set(words[15]))\n    unique_chars = unique_chars.union(Set(words[16]))\n\
    \    unique_chars = unique_chars.union(Set(words[17]))\n    unique_chars = unique_chars.union(Set(words[18]))\n\
    \    unique_chars = unique_chars.union(Set(words[19]))\n    unique_chars = unique_chars.union(Set(words[20]))\n\
    \    unique_chars = unique_chars.union(Set(words[21]))\n    unique_chars = unique_chars.union(Set(words[22]))\n\
    \    unique_chars = unique_chars.union(Set(words[23]))\n    unique_chars = unique_chars.union(Set(words[24]))\n\
    \    unique_chars = unique_chars.union(Set(words[25]))\n    unique_chars = unique_chars.union(Set(words[26]))\n\
    \    unique_chars = unique_chars.union(Set(words[27]))\n    unique_chars = unique_chars.union(Set(words[28]))\n\
    \    unique_chars = unique_chars.union(Set(words[29]))\n    unique_chars = unique_chars.union(Set(words[30]))\n\
    \    unique_chars = unique_chars.union(Set(words[31]))\n    unique_chars = unique_chars.union(Set(words[32]))\n\
    \    unique_chars = unique_chars.union(Set(words[33]))\n    unique_chars = unique_chars.union(Set(words[34]))\n\
    \    unique_chars = unique_chars.union(Set(words[35]))\n    unique_chars = ",
  "    unique_chars = Set()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_", " \
    \   unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.keys() \n    unique_chars = unique_chars.sort\n\
    \    unique_chars = unique_chars[1]\n    return unique_chars\nend", "    unique_chars\
    \ = Set()\n    unique_chars = unique_chars.union(Set(words))\n    unique_chars\
    \ = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    ", "    \n    unique_chars\
    \ = Set{Char}()\n    \n    for word in words \n        for char in word\n    \
    \        unique_chars.add(char)\n        end\n    end\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\n\")\n    \n    if length(unique_chars) == 0\n    \
    \    return \"\\n\"\n    end\n    \n    unique_chars = unique_chars - Set(\"\\\
    t\")\n    \n    if length(unique_chars) == 0\n        return \"\\t\"\n    end\n\
    \    \n    unique_chars = unique_chars - Set(\"\\r\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"\\r\"\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"\\f\")\n    \n    if length(unique_chars) == 0\n        return \"\\\
    f\"\n    end\n    \n    unique_chars = unique_chars - Set(\"\\b\")\n    \n   \
    \ if length(unique_chars) == 0\n        return \"\\b\"\n    end\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    \n    if length(unique_chars) == 0\n    \
    \    return \"\\a\"\n    end\n    \n    unique_chars = unique_chars - Set(\"\\\
    v\")\n    \n    if length(unique_chars) == 0\n        return \"\\v\"\n    end\n\
    \    \n    unique_chars = unique_chars - Set(\"\\e\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"\\e\"\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"\\a\")\n    \n    if length(unique_chars) == 0\n        return \"\\\
    a\"\n    end\n    \n    unique_chars = unique_chars - Set(\"\\v\")\n    \n   \
    \ if length(unique_chars) == 0\n        return \"\\v\"\n    end\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\e\")\n    \n    if length(unique_chars) == 0\n    \
    \    return \"\\e\"\n    end\n    \n    unique_chars = unique_chars - Set(\"\\\
    a\")\n    \n    if length(unique_chars) == 0\n        return \"\\a\"\n    end\n\
    \    \n    unique_chars = unique_chars - Set(\"\\v\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"\\v\"\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"\\e\")\n    \n    if length(unique_chars) == 0\n        return \"\\\
    e\"\n    end\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n   \
    \ if length(unique_chars) == 0\n        return \"\\a\"\n    end\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\v\")\n    \n    if length(unique_chars) == 0\n    \
    \    return \"\\v\"\n    end\n    \n    unique_", "    unique_chars = Set{String}()\n\
    \    unique_chars_count = 0\n    \n    for word in words \n        unique_chars\
    \ = unique_chars + Set(word)\n        unique_chars_count = unique_chars_count\
    \ + length(unique_chars)\n    end\n    \n    if unique_chars_count > length(unique_chars)\n\
    \        return words[1]\n    else\n        return words[end]\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nfind_max([\n    \"hello\",\n    \"world\"\
    ,\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\"\
    ,\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\"\
    ,\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\"\
    ,\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\"\
    ,\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\"\
    ,\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\"\
    ,\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\"\
    ,\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\"\
    ,\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\"\
    ,\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\"\
    ,\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\"\
    ,\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\"\
    ,\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\"\
    ,\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\"\
    ,\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\"\
    ,\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\"\
    ,\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\"\
    ,\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\"\
    ,\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\"\
    ,\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\"\
    ,\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"", " \
    \   \n    unique_chars = Set{String}()\n    \n    for word in words \n       \
    \ unique_chars |= Set(word)\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"\\n\")\n    \n    if length(unique_chars) > length(words)\n        return\
    \ words[end]\n    end\n    \n    unique_chars = unique_chars - Set(\"\\n\")\n\
    \    \n    unique_chars = unique_chars - Set(\"\\t\")\n    \n    if length(unique_chars)\
    \ > length(words)\n        return words[end]\n    end\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\t\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\r\")\n    \n    if length(unique_chars) > length(words)\n        return words[end]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"\\r\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\f\")\n    \n    if length(unique_chars) > length(words)\n\
    \        return words[end]\n    end\n    \n    unique_chars = unique_chars - Set(\"\
    \\f\")\n    \n    unique_chars = unique_chars - Set(\"\\b\")\n    \n    if length(unique_chars)\
    \ > length(words)\n        return words[end]\n    end\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\b\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\a\")\n    \n    if length(unique_chars) > length(words)\n        return words[end]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\v\")\n    \n    if length(unique_chars) > length(words)\n\
    \        return words[end]\n    end\n    \n    unique_chars = unique_chars - Set(\"\
    \\v\")\n    \n    unique_chars = unique_chars - Set(\"\\e\")\n    \n    if length(unique_chars)\
    \ > length(words)\n        return words[end]\n    end\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\e\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\a\")\n    \n    if length(unique_chars) > length(words)\n        return words[end]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\c\")\n    \n    if length(unique_chars) > length(words)\n\
    \        return words[end]\n    end\n    \n    unique_chars = unique_chars - Set(\"\
    \\c\")\n    \n    unique_chars = unique_chars - Set(\"\\o\")\n    \n    if length(unique_chars)\
    \ > length(words)\n        return words[end]\n    end\n", "    unique_chars =\
    \ Set{String}()\n    unique_chars_count = Set{Int}()\n    for word in words \n\
    \        for char in word\n            if !contains(unique_chars, char)\n    \
    \            unique_chars += char\n                unique_chars_count += get(unique_chars_count,\
    \ char, 0) + 1\n            end\n        end\n    end\n    \n    unique_chars\
    \ = unique_chars[unique_chars_count .== maximum(unique_chars_count)]\n    \n \
    \   if length(unique_chars) == 0\n        return \"No words have maximum number\
    \ of unique characters\"\n    end\n    \n    return unique_chars[end]\nend\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\n    \"hello\",\n    \"world\",\n    \"\
    hello\",\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\",\n   \
    \ \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\",\n\
    \    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\"\
    ,\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\"\
    ,\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\"\
    ,\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\"\
    ,\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\"\
    ,\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\"\
    ,\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\"\
    ,\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\"\
    ,\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\"\
    ,\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\"\
    ,\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\"\
    ,\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\"\
    ,\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\"\
    ,\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\"\
    ,\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\"\
    ,\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\"\
    ,\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\",", "    \n  \
    \  unique_chars = Set{Char}()\n    \n    for word in words \n        for char\
    \ in word\n            unique_chars.add(char)\n        end\n    end\n    \n  \
    \  unique_chars = unique_chars - Set(\"\\n\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"\\n\"\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"\\t\")\n    \n    if length(unique_chars) == 0\n        return \"\\\
    t\"\n    end\n    \n    unique_chars = unique_chars - Set(\"\\r\")\n    \n   \
    \ if length(unique_chars) == 0\n        return \"\\r\"\n    end\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\f\")\n    \n    if length(unique_chars) == 0\n    \
    \    return \"\\f\"\n    end\n    \n    unique_chars = unique_chars - Set(\"\\\
    b\")\n    \n    if length(unique_chars) == 0\n        return \"\\b\"\n    end\n\
    \    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"\\a\"\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"\\v\")\n    \n    if length(unique_chars) == 0\n        return \"\\\
    v\"\n    end\n    \n    unique_chars = unique_chars - Set(\"\\e\")\n    \n   \
    \ if length(unique_chars) == 0\n        return \"\\e\"\n    end\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    \n    if length(unique_chars) == 0\n    \
    \    return \"\\a\"\n    end\n    \n    unique_chars = unique_chars - Set(\"\\\
    v\")\n    \n    if length(unique_chars) == 0\n        return \"\\v\"\n    end\n\
    \    \n    unique_chars = unique_chars - Set(\"\\e\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"\\e\"\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"\\a\")\n    \n    if length(unique_chars) == 0\n        return \"\\\
    a\"\n    end\n    \n    unique_chars = unique_chars - Set(\"\\v\")\n    \n   \
    \ if length(unique_chars) == 0\n        return \"\\v\"\n    end\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\e\")\n    \n    if length(unique_chars) == 0\n    \
    \    return \"\\e\"\n    end\n    \n    unique_chars = unique_chars - Set(\"\\\
    a\")\n    \n    if length(unique_chars) == 0\n        return \"\\a\"\n    end\n\
    \    \n    unique_chars = unique_chars - Set(\"\\v\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"\\v\"\n    end\n    \n    unique_", "    \n    unique_chars\
    \ = Set{String}()\n    \n    for word in words \n        unique_chars = unique_chars\
    \ + Set(word)\n    end\n    \n    unique_chars = unique_chars - Set(\"_\")\n \
    \   \n    if length(unique_chars) == 0 \n        return \"_\"\n    end\n    \n\
    \    unique_chars = unique_chars - Set(\".\")\n    \n    if length(unique_chars)\
    \ == 0 \n        return \".\"\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\",\")\n    \n    if length(unique_chars) == 0 \n        return \",\"\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"!\")\n    \n    if length(unique_chars)\
    \ == 0 \n        return \"!\"\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"?\")\n    \n    if length(unique_chars) == 0 \n        return \"?\"\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\":\")\n    \n    if length(unique_chars)\
    \ == 0 \n        return \":\"\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\";\")\n    \n    if length(unique_chars) == 0 \n        return \";\"\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"(\")\n    \n    if length(unique_chars)\
    \ == 0 \n        return \"(\"\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\")\")\n    \n    if length(unique_chars) == 0 \n        return \")\"\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"[\")\n    \n    if length(unique_chars)\
    \ == 0 \n        return \"[\"\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"]\")\n    \n    if length(unique_chars) == 0 \n        return \"]\"\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"{\")\n    \n    if length(unique_chars)\
    \ == 0 \n        return \"{\"\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"}\")\n    \n    if length(unique_chars) == 0 \n        return \"}\"\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\":\")\n    \n    if length(unique_chars)\
    \ == 0 \n        return \":\"\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\";\")\n    \n    if length(unique_chars) == 0 \n        return \";\"\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"(\")\n    \n    if length(unique_chars)\
    \ == 0 \n        return \"(\"\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\")\")\n    \n    if length(unique_chars) == 0 \n        return \")\"\n\
    \    end\n    \n    unique_chars = unique_chars - Set", "    unique_chars = Set()\n\
    \    unique_chars_count = 0\n    \n    for word in words \n        unique_chars\
    \ = unique_chars + Set(word)\n        unique_chars_count = length(unique_chars)\n\
    \    end\n    \n    if unique_chars_count > length(words)\n        return words[1]\n\
    \    else\n        return words[end]\n    end\nend", "    \n    unique_chars =\
    \ Set{Char}()\n    \n    for word in words \n        unique_chars = unique_chars\
    \ | Set(word)\n    end\n    \n    unique_chars = unique_chars - Set(\"\\n\")\n\
    \    \n    if length(unique_chars) > length(words)\n        return words[end]\n\
    \    else\n        return find_max(words[1:end])\n    end\nend", "    unique_chars\
    \ = Set{String}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_", "    unique_chars\
    \ = Set{String}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words[1]))\n\
    \    unique_chars = unique_chars.union(Set(words[2]))\n    unique_chars = unique_chars.union(Set(words[3]))\n\
    \    unique_chars = unique_chars.union(Set(words[4]))\n    unique_chars = unique_chars.union(Set(words[5]))\n\
    \    unique_chars = unique_chars.union(Set(words[6]))\n    unique_chars = unique_chars.union(Set(words[7]))\n\
    \    unique_chars = unique_chars.union(Set(words[8]))\n    unique_chars = unique_chars.union(Set(words[9]))\n\
    \    unique_chars = unique_chars.union(Set(words[10]))\n    unique_chars = unique_chars.union(Set(words[11]))\n\
    \    unique_chars = unique_chars.union(Set(words[12]))\n    unique_chars = unique_chars.union(Set(words[13]))\n\
    \    unique_chars = unique_chars.union(Set(words[14]))\n    unique_chars = unique_chars.union(Set(words[15]))\n\
    \    unique_chars = unique_chars.union(Set(words[16]))\n    unique_chars = unique_chars.union(Set(words[17]))\n\
    \    unique_chars = unique_chars.union(Set(words[18]))\n    unique_chars = unique_chars.union(Set(words[19]))\n\
    \    unique_chars = unique_chars.union(Set(words[20]))\n    unique_chars = unique_chars.union(Set(words[21]))\n\
    \    unique_chars = unique_chars.union(Set(words[22]))\n    unique_chars = unique_chars.union(Set(words[23]))\n\
    \    unique_chars = unique_chars.union(Set(words[24]))\n    unique_chars = unique_chars.union(Set(words[25]))\n\
    \    unique_chars = unique_chars.union(Set(words[26]))\n    unique_chars = unique_chars.union(Set(words[27]))\n\
    \    unique_chars = unique_chars.union(Set(words[28]))\n    unique_chars = unique_chars.union(Set(words[29]))\n\
    \    unique_chars = unique_chars.union(Set(words[30]))\n    unique_chars = unique_chars.union(Set(words[31]))\n\
    \    unique_chars = unique_chars.union(Set(words[32]))\n    unique_chars = unique_chars.union(Set(words[33]))\n\
    \    unique_chars = unique_chars.union(Set(words[34]))\n    unique_chars = unique_chars.union(",
  "    unique_chars = Set()\n    unique_chars_count = Dict{String, Int}()\n    for\
    \ word in words\n        for char in word\n            if !contains(unique_chars,\
    \ char)\n                unique_chars.add(char)\n                unique_chars_count[char]\
    \ = unique_chars_count[char] + 1\n            else\n                if unique_chars_count[char]\
    \ > unique_chars_count[unique_chars.last]\n                    unique_chars.last\n\
    \                else\n                    unique_chars_count[unique_chars.last]\n\
    \                end\n            end\n        end\n    end\n    unique_chars.last\n\
    end\n</cell>\n<code language=julia-1.5>\nfind_max([\"hello\", \"world\", \"hello\"\
    , \"world\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"hello\", \"world\"\
    , \"hello\", \"world\", \"hello\", \"world\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"\
    hello\", \"world\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"hello\"\
    , \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"\
    , \"hello\", \"world\", \"hello\", \"world\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"\
    hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"\
    world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"\
    hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"\
    world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"\
    hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"\
    world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"\
    hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"\
    world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"\
    hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"\
    world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"\
    hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"\
    world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"\
    hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"\
    world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"\
    hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"\
    world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"\
    hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"\
    world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"\
    hello\", \"world\", \"hello\", \"", "    \n    unique_chars = Set{String}()\n\
    \    \n    for word in words \n        unique_chars = unique_chars + Set(word)\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"\\n\")\n    \n    if length(unique_chars)\
    \ > length(words)\n        return words[end]\n    end\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\n\")\n    \n    if length(unique_chars) == length(words)\n\
    \        return words[end]\n    end\n    \n    unique_chars = unique_chars - Set(\"\
    \\n\")\n    \n    if length(unique_chars) == length(words)\n        return words[end]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"\\n\")\n    \n    if length(unique_chars)\
    \ == length(words)\n        return words[end]\n    end\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\n\")\n    \n    if length(unique_chars) == length(words)\n\
    \        return words[end]\n    end\n    \n    unique_chars = unique_chars - Set(\"\
    \\n\")\n    \n    if length(unique_chars) == length(words)\n        return words[end]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"\\n\")\n    \n    if length(unique_chars)\
    \ == length(words)\n        return words[end]\n    end\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\n\")\n    \n    if length(unique_chars) == length(words)\n\
    \        return words[end]\n    end\n    \n    unique_chars = unique_chars - Set(\"\
    \\n\")\n    \n    if length(unique_chars) == length(words)\n        return words[end]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"\\n\")\n    \n    if length(unique_chars)\
    \ == length(words)\n        return words[end]\n    end\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\n\")\n    \n    if length(unique_chars) == length(words)\n\
    \        return words[end]\n    end\n    \n    unique_chars = unique_chars - Set(\"\
    \\n\")\n    \n    if length(unique_chars) == length(words)\n        return words[end]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"\\n\")\n    \n    if length(unique_chars)\
    \ == length(words)\n        return words[end]\n    end\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\n\")\n    \n    if length(unique_chars) == length(words)\n\
    \        return words[end]\n    end\n    \n    unique_chars = unique_chars - Set(\"\
    \\n\")\n    \n    if length(unique_chars) == length(words)\n        return words[end]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"\\n\")\n    \n    if length(unique_chars)\
    \ == length(words)\n        return words[end]\n    end\n    \n", "    \n    unique_chars\
    \ = Set()\n    \n    for word in words\n        unique_chars = unique_chars |\
    \ Set(word)\n    end\n    \n    unique_chars = unique_chars - Set(\"\\n\")\n \
    \   \n    unique_chars = unique_chars - Set(\"\\t\")\n    \n    unique_chars =\
    \ unique_chars - Set(\"\\r\")\n    \n    unique_chars = unique_chars - Set(\"\\\
    f\")\n    \n    unique_chars = unique_chars - Set(\"\\v\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\e\")\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\e\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\a\")\n    \n    unique_chars = unique_chars - Set(\"\\e\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\e\")\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\e\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\a\")\n    \n    unique_chars = unique_chars - Set(\"\\e\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\e\")\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\e\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\a\")\n    \n    unique_chars = unique_chars - Set(\"\\e\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\e\")\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\e\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\a\")\n    \n    unique_chars = unique_chars - Set(\"\\e\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\e\")\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\e\")\n    \n    unique_chars = unique_chars - ", " \
    \   unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.keys() \n    unique_chars = unique_chars.sort\n\
    \    unique_chars = unique_chars[1]\n    return unique_chars\nend\n</cell>\n<code\
    \ language=julia-1.0>\nfind_max(\"hello\", \"world\", \"hello\", \"world\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that accepts a list of strings and\
    \ returns the number of unique characters in each string. \nThe function should\
    \ return an Array{Int64,1}.", "    unique_chars = Set{String}()\n    unique_chars\
    \ = unique_chars.union(words)\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length).map(&String.fromCharCode))\n\
    \    unique_chars = unique_chars.union(words.map(&String.fromCharCode))\n    unique_chars\
    \ = unique_chars.union(words.map(&String.fromCharCode).map(&length))\n    unique_chars\
    \ = unique_chars.union(words.map(&String.fromCharCode).map(&length).map(&String.fromCharCode))\n\
    \    unique_chars = unique_chars.union(words.map(&String.fromCharCode).map(&length).map(&String.fromCharCode).map(&length))\n\
    \    unique_chars = unique_chars.union(words.map(&String.fromCharCode).map(&length).map(&String.fromCharCode).map(&length).map(&String.fromCharCode))\n\
    \    unique_chars = unique_chars.union(words.map(&String.fromCharCode).map(&length).map(&String.fromCharCode).map(&length).map(&String.fromCharCode).map(&length))\n\
    \    unique_chars = unique_chars.union(words.map(&String.fromCharCode).map(&length).map(&String.fromCharCode).map(&length).map(&String.fromCharCode).map(&length).map(&String.fromCharCode))\n\
    \    unique_chars = unique_chars.union(words.map(&String.fromCharCode).map(&length).map(&String.fromCharCode).map(&length).map(&String.fromCharCode).map(&length).map(&String.fromCharCode).map(&length))\n\
    \    unique_chars = unique_chars.union(words.map(&String.fromCharCode).map(&length).map(&String.fromCharCode).map(&length).map(&String.fromCharCode).map(&length).map(&String.fromCharCode).map(&length).map(&String.fromCharCode))\n\
    \    unique_chars = unique_chars.union(words.map(&String.fromCharCode).map(&length).map(&String.fromCharCode).map(&length).map(&String.fromCharCode).map(&length).map(&String.fromCharCode).map(&length).map(&String.fromCharCode).map(&length))\n\
    \    unique_chars = unique_chars.union(words.map(&String.fromCharCode).map(&length).map(&String.fromCharCode).map(&length).map(&String.fromCharCode).map(&length).map(&String.fromCharCode).",
  "    \n    unique_chars = Set{String}()\n    \n    for word in words \n        unique_chars\
    \ |= Set(word)\n    end\n    \n    unique_chars = unique_chars - Set(\"\\n\")\n\
    \    \n    if length(unique_chars) > length(words)\n        return words[end]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"\\n\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\n\")\n    \n    if length(unique_chars) > length(words)\n\
    \        return words[end]\n    end\n    \n    unique_chars = unique_chars - Set(\"\
    \\n\")\n    \n    unique_chars = unique_chars - Set(\"\\n\")\n    \n    if length(unique_chars)\
    \ > length(words)\n        return words[end]\n    end\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\n\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\n\")\n    \n    if length(unique_chars) > length(words)\n        return words[end]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"\\n\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\n\")\n    \n    if length(unique_chars) > length(words)\n\
    \        return words[end]\n    end\n    \n    unique_chars = unique_chars - Set(\"\
    \\n\")\n    \n    unique_chars = unique_chars - Set(\"\\n\")\n    \n    if length(unique_chars)\
    \ > length(words)\n        return words[end]\n    end\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\n\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\n\")\n    \n    if length(unique_chars) > length(words)\n        return words[end]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"\\n\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\n\")\n    \n    if length(unique_chars) > length(words)\n\
    \        return words[end]\n    end\n    \n    unique_chars = unique_chars - Set(\"\
    \\n\")\n    \n    unique_chars = unique_chars - Set(\"\\n\")\n    \n    if length(unique_chars)\
    \ > length(words)\n        return words[end]\n    end\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\n\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\n\")\n    \n    if length(unique_chars) > length(words)\n        return words[end]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"\\n\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\n\")\n    \n    if length(unique_chars) > length(words)\n\
    \        return words[end]\n    end\n    \n    unique_chars = unique_chars - Set(\"\
    \\n\")\n    \n    unique_chars = unique_chars - Set(\"", "    unique_chars = Set{Char}()\n\
    \    unique_chars_count = 0\n    \n    for word in words \n        for char in\
    \ word\n            unique_chars << char\n            unique_chars_count += 1\
    \ if char in unique_chars\n        end\n    end\n    \n    if unique_chars_count\
    \ > unique_chars_count\n        return words[1]\n    else\n        return words[0]\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"hello\", \"world\"\
    , \"hello\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"hello\", \"world\"\
    , \"hello\", \"world\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"hello\"\
    , \"world\", \"hello\", \"world\", \"hello\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"])\n\
    </cell>\n<code language=julia-1.5>\nfind_max([\"hello\", \"world\", \"hello\"\
    , \"world\", \"hello\", \"world\", \"hello\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"\
    hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"\
    world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"\
    hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"\
    world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"\
    hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"\
    world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"\
    hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"\
    world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"\
    hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"\
    world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"\
    hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"\
    world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"\
    hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"\
    world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"\
    hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"\
    world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"\
    hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"\
    world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"\
    hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"\
    world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"\
    hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"\
    world", "    unique_chars = Set{Char}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n", "    unique_chars = Set{String}()\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length).map(&:chars))\n    unique_chars\
    \ = unique_chars.union(words.map(&:chars).map(length))\n    unique_chars = unique_chars.union(words.map(&:chars).map(length).map(&:chars))\n\
    \    unique_chars = unique_chars.union(words.map(&:chars).map(length).map(&:chars).map(length))\n\
    \    unique_chars = unique_chars.union(words.map(&:chars).map(length).map(&:chars).map(length).map(&:chars))\n\
    \    unique_chars = unique_chars.union(words.map(&:chars).map(length).map(&:chars).map(length).map(&:chars).map(length))\n\
    \    unique_chars = unique_chars.union(words.map(&:chars).map(length).map(&:chars).map(length).map(&:chars).map(length).map(&:chars))\n\
    \    unique_chars = unique_chars.union(words.map(&:chars).map(length).map(&:chars).map(length).map(&:chars).map(length).map(&:chars).map(length))\n\
    \    unique_chars = unique_chars.union(words.map(&:chars).map(length).map(&:chars).map(length).map(&:chars).map(length).map(&:chars).map(length).map(&:chars))\n\
    \    unique_chars = unique_chars.union(words.map(&:chars).map(length).map(&:chars).map(length).map(&:chars).map(length).map(&:chars).map(length).map(&:chars).map(length))\n\
    \    unique_chars = unique_chars.union(words.map(&:chars).map(length).map(&:chars).map(length).map(&:chars).map(length).map(&:chars).map(length).map(&:chars).map(length).map(&:chars))\n\
    \    unique_chars = unique_chars.union(words.map(&:chars).map(length).map(&:chars).map(length).map(&:chars).map(length).map(&:chars).map(length).map(&:chars).map(length).map(&:chars).map(length))\n\
    \    unique_chars = unique_chars.union(words.map(&:chars).map(length).map(&:chars).map(length).map(&:chars).map(length).map(&:chars).",
  "    \n    unique_chars = Set()\n    \n    for word in words\n        unique_chars\
    \ = unique_chars | Set(word)\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"\\n\")\n    \n    unique_chars = unique_chars - Set(\"\\r\")\n    \n \
    \   unique_chars = unique_chars - Set(\"\\t\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"\\v\")\n    \n    unique_chars = unique_chars - Set(\"\\f\")\n    \n\
    \    unique_chars = unique_chars - Set(\"\\b\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"\\a\")\n    \n    unique_chars = unique_chars - Set(\"\\e\")\n    \n\
    \    unique_chars = unique_chars - Set(\"\\v\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"\\a\")\n    \n    unique_chars = unique_chars - Set(\"\\e\")\n    \n\
    \    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"\\e\")\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n\
    \    unique_chars = unique_chars - Set(\"\\e\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"\\a\")\n    \n    unique_chars = unique_chars - Set(\"\\e\")\n    \n\
    \    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"\\e\")\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n\
    \    unique_chars = unique_chars - Set(\"\\e\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"\\a\")\n    \n    unique_chars = unique_chars - Set(\"\\e\")\n    \n\
    \    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"\\e\")\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n\
    \    unique_chars = unique_chars - Set(\"\\e\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"\\a\")\n    \n    unique_chars = unique_chars - Set(\"\\e\")\n    \n\
    \    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"\\e\")\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n\
    \    unique_chars = unique_chars - Set(\"\\e\")\n    \n    unique_chars = unique_chars\
    \ - ", "    \n    unique_chars = Set()\n    \n    for word in words\n        for\
    \ char in word\n            unique_chars.add(char)\n        end\n    end\n   \
    \ \n    unique_chars = unique_chars - Set(\"a\")\n    unique_chars = unique_chars\
    \ - Set(\"A\")\n    unique_chars = unique_chars - Set(\"0\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    \n    unique_chars = unique_chars - Set(\"\
    .\")\n    unique_chars = unique_chars - Set(\",\")\n    unique_chars = unique_chars\
    \ - Set(\"!\")\n    unique_chars = unique_chars - Set(\"?\")\n    unique_chars\
    \ = unique_chars - Set(\";\")\n    unique_chars = unique_chars - Set(\":\")\n\
    \    unique_chars = unique_chars - Set(\"(\")\n    unique_chars = unique_chars\
    \ - Set(\")\")\n    unique_chars = unique_chars - Set(\"[\")\n    unique_chars\
    \ = unique_chars - Set(\"]\")\n    unique_chars = unique_chars - Set(\"{\")\n\
    \    unique_chars = unique_chars - Set(\"}\")\n    unique_chars = unique_chars\
    \ - Set(\":\")\n    unique_chars = unique_chars - Set(\";\")\n    unique_chars\
    \ = unique_chars - Set(\":\")\n    unique_chars = unique_chars - Set(\".\")\n\
    \    unique_chars = unique_chars - Set(\",\")\n    unique_chars = unique_chars\
    \ - Set(\"!\")\n    unique_chars = unique_chars - Set(\"?\")\n    unique_chars\
    \ = unique_chars - Set(\";\")\n    unique_chars = unique_chars - Set(\":\")\n\
    \    unique_chars = unique_chars - Set(\"(\")\n    unique_chars = unique_chars\
    \ - Set(\")\")\n    unique_chars = unique_chars - Set(\"[\")\n    unique_chars\
    \ = unique_chars - Set(\"]\")\n    unique_chars = unique_chars - Set(\"{\")\n\
    \    unique_chars = unique_chars - Set(\"}\")\n    unique_chars = unique_chars\
    \ - Set(\":\")\n    unique_chars = unique_chars - Set(\";\")\n    unique_chars\
    \ = unique_chars - Set(\":\")\n    unique_chars = unique_chars - Set(\".\")\n\
    \    unique_chars = unique_chars - Set(\",\")\n    unique_chars = unique_chars\
    \ - Set(\"!\")\n    unique_chars = unique_chars - Set(\"?\")\n    unique_chars\
    \ = unique_chars - Set(\";\")\n    unique_chars = unique_chars - Set(\":\")\n\
    \    unique_chars = unique_chars - Set(\"(\")\n    unique_chars = unique_chars\
    \ - Set(\")\")\n    ", "    unique_chars = Set()\n    unique_chars_count = Dict()\n\
    \    unique_chars_count[1] = words[1].length\n    unique_chars_count[2] = words[2].length\n\
    \    unique_chars_count[3] = words[3].length\n    unique_chars_count[4] = words[4].length\n\
    \    unique_chars_count[5] = words[5].length\n    unique_chars_count[6] = words[6].length\n\
    \    unique_chars_count[7] = words[7].length\n    unique_chars_count[8] = words[8].length\n\
    \    unique_chars_count[9] = words[9].length\n    unique_chars_count[10] = words[10].length\n\
    \    unique_chars_count[11] = words[11].length\n    unique_chars_count[12] = words[12].length\n\
    \    unique_chars_count[13] = words[13].length\n    unique_chars_count[14] = words[14].length\n\
    \    unique_chars_count[15] = words[15].length\n    unique_chars_count[16] = words[16].length\n\
    \    unique_chars_count[17] = words[17].length\n    unique_chars_count[18] = words[18].length\n\
    \    unique_chars_count[19] = words[19].length\n    unique_chars_count[20] = words[20].length\n\
    \    unique_chars_count[21] = words[21].length\n    unique_chars_count[22] = words[22].length\n\
    \    unique_chars_count[23] = words[23].length\n    unique_chars_count[24] = words[24].length\n\
    \    unique_chars_count[25] = words[25].length\n    unique_chars_count[26] = words[26].length\n\
    \    unique_chars_count[27] = words[27].length\n    unique_chars_count[28] = words[28].length\n\
    \    unique_chars_count[29] = words[29].length\n    unique_chars_count[30] = words[30].length\n\
    \    unique_chars_count[31] = words[31].length\n    unique_chars_count[32] = words[32].length\n\
    \    unique_chars_count[33] = words[33].length\n    unique_chars_count[34] = words[34].length\n\
    \    unique_chars_count[35] = words[35].length\n    unique_chars_count[36] = words[36].length\n\
    \    unique_chars_count[37] = words[37].length\n    unique_chars_count[38] = words[38].length\n\
    \    unique_chars_count[39] = words[39].length\n    unique_chars_count[40] = words[40].length\n\
    \    unique_chars_", "    \n    unique_chars = Set{Char}()\n    \n    for word\
    \ in words \n        unique_chars = unique_chars | Set(word)\n    end\n    \n\
    \    unique_chars = unique_chars - Set(\"_\")\n    \n    if length(unique_chars)\
    \ == 0 \n        return \"_\"\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0 \n        return \"a\"\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"A\")\n    \n    if length(unique_chars)\
    \ == 0 \n        return \"A\"\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"0\")\n    \n    if length(unique_chars) == 0 \n        return \"0\"\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"9\")\n    \n    if length(unique_chars)\
    \ == 0 \n        return \"9\"\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    \n    if length(unique_chars) == 0 \n        return \"_\"\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0 \n        return \"a\"\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"A\")\n    \n    if length(unique_chars) == 0 \n        return \"A\"\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"0\")\n    \n    if length(unique_chars)\
    \ == 0 \n        return \"0\"\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"9\")\n    \n    if length(unique_chars) == 0 \n        return \"9\"\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"_\")\n    \n    if length(unique_chars)\
    \ == 0 \n        return \"_\"\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0 \n        return \"a\"\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"A\")\n    \n    if length(unique_chars)\
    \ == 0 \n        return \"A\"\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"0\")\n    \n    if length(unique_chars) == 0 \n        return \"0\"\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"9\")\n    \n    if length(unique_chars)\
    \ == 0 \n        return \"9\"\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    \n    if length(unique_chars) == 0 \n        return \"_\"\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0 \n        return \"a\"\n    end\n    \n    unique_chars = unique_", " \
    \   unique_chars = Set()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_", " \
    \   unique_chars = Set()\n    unique_chars_count = 0\n    \n    for word in words\
    \ \n        unique_chars = unique_chars + Set(word)\n        unique_chars_count\
    \ = unique_chars_count + length(unique_chars)\n    end\n    \n    if unique_chars_count\
    \ > length(unique_chars)\n        return words[end]\n    else\n        return\
    \ words[minimum(unique_chars)]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    find_max([\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"apple\",\n\
    \    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"apple\",\n    \"apple\"\
    ,\n    \"apple\",\n    \"apple\",\n    \"banana\",\n    \"banana\",\n    \"banana\"\
    ,\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"\
    banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n\
    \    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\"\
    ,\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"\
    banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n\
    \    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\"\
    ,\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"\
    banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n\
    \    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\"\
    ,\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"\
    banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n\
    \    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\"\
    ,\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"\
    banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n\
    \    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\"\
    ,\n    \"banana\",\n    \"", "    unique_chars = Set()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words[1]))\n\
    \    unique_chars = unique_chars.union(Set(words[2]))\n    unique_chars = unique_chars.union(Set(words[3]))\n\
    \    unique_chars = unique_chars.union(Set(words[4]))\n    unique_chars = unique_chars.union(Set(words[5]))\n\
    \    unique_chars = unique_chars.union(Set(words[6]))\n    unique_chars = unique_chars.union(Set(words[7]))\n\
    \    unique_chars = unique_chars.union(Set(words[8]))\n    unique_chars = unique_chars.union(Set(words[9]))\n\
    \    unique_chars = unique_chars.union(Set(words[10]))\n    unique_chars = unique_chars.union(Set(words[11]))\n\
    \    unique_chars = unique_chars.union(Set(words[12]))\n    unique_chars = unique_chars.union(Set(words[13]))\n\
    \    unique_chars = unique_chars.union(Set(words[14]))\n    unique_chars = unique_chars.union(Set(words[15]))\n\
    \    unique_chars = unique_chars.union(Set(words[16]))\n    unique_chars = unique_chars.union(Set(words[17]))\n\
    \    unique_chars = unique_chars.union(Set(words[18]))\n    unique_chars = unique_chars.union(Set(words[19]))\n\
    \    unique_chars = unique_chars.union(Set(words[20]))\n    unique_chars = unique_chars.union(Set(words[21]))\n\
    \    unique_chars = unique_chars.union(Set(words[22]))\n    unique_chars = unique_chars.union(Set(words[23]))\n\
    \    unique_chars = unique_chars.union(Set(words[24]))\n    unique_chars = unique_chars.union(Set(words[25]))\n\
    \    unique_chars = unique_chars.union(Set(words[26]))\n    unique_chars = unique_chars.union(Set(words[27]))\n\
    \    unique_chars = unique_chars.union(Set(words[28]))\n    unique_chars = unique_chars.union(Set(words[29]))\n\
    \    unique_chars = unique_chars.union(Set(words[30]))\n    unique_chars = unique_chars.union(Set(words[31]))\n\
    \    unique_chars = unique_chars.union(Set(words[32]))\n    unique_chars = unique_chars.union(Set(words[33]))\n\
    \    unique_chars = unique_chars.union(Set(words[34]))\n    unique_chars = unique_chars.union(Set(words[",
  "    unique_chars = Set()\n    unique_chars_count = 0\n    \n    for word in words\
    \ \n        unique_chars = unique_chars + Set(word)\n        unique_chars_count\
    \ = unique_chars_count + length(unique_chars)\n    end\n    \n    if unique_chars_count\
    \ > length(unique_chars)\n        return words[1]\n    else\n        return words[end]\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\n    \"apple\",\n\
    \    \"banana\",\n    \"apple\",\n    \"apple\",\n    \"banana\",\n    \"apple\"\
    ,\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\"\
    ,\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\"\
    ,\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\"\
    ,\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\"\
    ,\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\"\
    ,\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\"\
    ,\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\"\
    ,\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\"\
    ,\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\"\
    ,\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\"\
    ,\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\"\
    ,\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\"\
    ,\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\"\
    ,\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\"\
    ,\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\"\
    ,\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\"\
    ,\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\"\
    ,\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"ban", "    unique_chars\
    \ = Set{Char}(\"\")\n    unique_chars = unique_chars | Set(words[1])\n    for\
    \ w in words[2:end]\n        unique_chars = unique_chars | Set(w)\n    end\n \
    \   unique_chars = unique_chars - Set(\"\\n\")\n    unique_chars = unique_chars\
    \ - Set(\"\\r\")\n    unique_chars = unique_chars - Set(\"\\t\")\n    unique_chars\
    \ = unique_chars - Set(\"\\v\")\n    unique_chars = unique_chars - Set(\"\\f\"\
    )\n    unique_chars = unique_chars - Set(\"\\b\")\n    unique_chars = unique_chars\
    \ - Set(\"\\a\")\n    unique_chars = unique_chars - Set(\"\\e\")\n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    unique_chars = unique_chars - Set(\"\\e\"\
    )\n    unique_chars = unique_chars - Set(\"\\a\")\n    unique_chars = unique_chars\
    \ - Set(\"\\e\")\n    unique_chars = unique_chars - Set(\"\\a\")\n    unique_chars\
    \ = unique_chars - Set(\"\\e\")\n    unique_chars = unique_chars - Set(\"\\a\"\
    )\n    unique_chars = unique_chars - Set(\"\\e\")\n    unique_chars = unique_chars\
    \ - Set(\"\\a\")\n    unique_chars = unique_chars - Set(\"\\e\")\n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    unique_chars = unique_chars - Set(\"\\e\"\
    )\n    unique_chars = unique_chars - Set(\"\\a\")\n    unique_chars = unique_chars\
    \ - Set(\"\\e\")\n    unique_chars = unique_chars - Set(\"\\a\")\n    unique_chars\
    \ = unique_chars - Set(\"\\e\")\n    unique_chars = unique_chars - Set(\"\\a\"\
    )\n    unique_chars = unique_chars - Set(\"\\e\")\n    unique_chars = unique_chars\
    \ - Set(\"\\a\")\n    unique_chars = unique_chars - Set(\"\\e\")\n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    unique_chars = unique_chars - Set(\"\\e\"\
    )\n    unique_chars = unique_chars - Set(\"\\a\")\n    unique_chars = unique_chars\
    \ - Set(\"\\e\")\n    unique_chars = unique_chars - Set(\"\\a\")\n    unique_chars\
    \ = unique_chars - Set(\"\\e\")\n    unique_chars = unique_chars - Set(\"\\a\"\
    )\n    unique_chars = unique_chars - Set(\"\\e\")\n    unique_chars = unique_chars\
    \ - Set(\"\\a\")\n    unique_chars = unique_chars - Set(\"\\e\")\n", "    unique_chars\
    \ = Set()\n    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_char", "    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_", "    unique_chars\
    \ = Set{Char}(\"\")\n    for word in words \n        for char in word\n      \
    \      unique_chars.add(char)\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    \n    if unique_chars.size > 1\n        unique_chars = unique_chars\
    \ - Set(\"a\")\n        unique_chars = unique_chars - Set(\"e\")\n        unique_chars\
    \ = unique_chars - Set(\"i\")\n        unique_chars = unique_chars - Set(\"o\"\
    )\n        unique_chars = unique_chars - Set(\"u\")\n    end\n    \n    unique_chars\
    \ = unique_chars - Set(\".\")\n    \n    if unique_chars.size > 1\n        unique_chars\
    \ = unique_chars - Set(\",\")\n        unique_chars = unique_chars - Set(\":\"\
    )\n        unique_chars = unique_chars - Set(\";\")\n        unique_chars = unique_chars\
    \ - Set(\"!\")\n        unique_chars = unique_chars - Set(\"?\")\n    end\n  \
    \  \n    unique_chars = unique_chars - Set(\"!\")\n    \n    if unique_chars.size\
    \ > 1\n        unique_chars = unique_chars - Set(\".\")\n        unique_chars\
    \ = unique_chars - Set(\"?\")\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"?\")\n    \n    if unique_chars.size > 1\n        unique_chars = unique_chars\
    \ - Set(\"!\")\n    end\n    \n    unique_chars = unique_chars - Set(\";\")\n\
    \    \n    if unique_chars.size > 1\n        unique_chars = unique_chars - Set(\"\
    :\")\n    end\n    \n    unique_chars = unique_chars - Set(\",\")\n    \n    if\
    \ unique_chars.size > 1\n        unique_chars = unique_chars - Set(\".\")\n  \
    \  end\n    \n    unique_chars = unique_chars - Set(\".\")\n    \n    if unique_chars.size\
    \ > 1\n        unique_chars = unique_chars - Set(\",\")\n    end\n    \n    unique_chars\
    \ = unique_chars - Set(\"a\")\n    unique_chars = unique_chars - Set(\"e\")\n\
    \    unique_chars = unique_chars - Set(\"i\")\n    unique_chars = unique_chars\
    \ - Set(\"o\")\n    unique_chars = unique_chars - Set(\"u\")\n    \n    if unique_chars.size\
    \ > 1\n        unique_chars = unique_chars - Set(\"_\")\n    end\n    \n    unique_chars\
    \ = unique_chars - Set(\".\")\n    \n    if unique_chars.size > 1\n        unique_chars\
    \ = unique_chars - Set(\",\")\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\":\")\n    ", "    \n    unique_chars = Set{Char}()\n    \n    for word\
    \ in words\n        for char in word\n            unique_chars.add(char)\n   \
    \     end\n    end\n    \n    unique_chars = unique_chars - Set(\"_\")\n    \n\
    \    if length(unique_chars) == 0\n        return \"_\"\n    end\n    \n    unique_chars\
    \ = unique_chars - Set(\"a\")\n    \n    if length(unique_chars) == 0\n      \
    \  return \"a\"\n    end\n    \n    unique_chars = unique_chars - Set(\"A\")\n\
    \    \n    if length(unique_chars) == 0\n        return \"A\"\n    end\n    \n\
    \    unique_chars = unique_chars - Set(\"0\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"0\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"9\")\n    \n    if length(unique_chars) == 0\n        return \"9\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\".\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \".\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"_\")\n    \n    if length(unique_chars) == 0\n        return \"_\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"a\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"A\")\n    \n    if length(unique_chars) == 0\n        return \"A\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"0\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"0\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"9\")\n    \n    if length(unique_chars) == 0\n        return \"9\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\".\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \".\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"_\")\n    \n    if length(unique_chars) == 0\n        return \"_\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"a\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"A\")\n    \n    if length(unique_chars) == 0\n        return \"A\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"0\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"0\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"9\")\n    \n    if length(unique_chars) == 0\n        return \"9\"\n \
    \   end\n    \n    unique_", "    \n    unique_chars = Set()\n    \n    for word\
    \ in words \n        for char in word\n            unique_chars.add(char)\n  \
    \      end\n    end\n    \n    unique_chars = unique_chars - Set(\"_\")\n    \n\
    \    if length(unique_chars) == 0 \n        return \"_\"\n    end\n    \n    unique_chars\
    \ = unique_chars - Set(\"a\")\n    \n    if length(unique_chars) == 0 \n     \
    \   return \"a\"\n    end\n    \n    unique_chars = unique_chars - Set(\"A\")\n\
    \    \n    if length(unique_chars) == 0 \n        return \"A\"\n    end\n    \n\
    \    unique_chars = unique_chars - Set(\"0\")\n    \n    if length(unique_chars)\
    \ == 0 \n        return \"0\"\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"1\")\n    \n    if length(unique_chars) == 0 \n        return \"1\"\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"2\")\n    \n    if length(unique_chars)\
    \ == 0 \n        return \"2\"\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"3\")\n    \n    if length(unique_chars) == 0 \n        return \"3\"\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"4\")\n    \n    if length(unique_chars)\
    \ == 0 \n        return \"4\"\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"5\")\n    \n    if length(unique_chars) == 0 \n        return \"5\"\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"6\")\n    \n    if length(unique_chars)\
    \ == 0 \n        return \"6\"\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"7\")\n    \n    if length(unique_chars) == 0 \n        return \"7\"\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"8\")\n    \n    if length(unique_chars)\
    \ == 0 \n        return \"8\"\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"9\")\n    \n    if length(unique_chars) == 0 \n        return \"9\"\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\".\")\n    \n    if length(unique_chars)\
    \ == 0 \n        return \".\"\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\",\")\n    \n    if length(unique_chars) == 0 \n        return \",\"\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\":\")\n    \n    if length(unique_chars)\
    \ == 0 \n        return \":\"\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\";\")\n    \n    if length(unique_chars) == 0 \n        return \";\"\n\
    \    end\n    \n    unique_chars = unique_char", "    \n    unique_chars = Set{Char}()\n\
    \    \n    for word in words \n        unique_chars = unique_chars + word.chars\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"_\")\n    \n    if length(unique_chars)\
    \ > length(words)\n        return words[end]\n    else\n        return find_max(words[1:end])\n\
    \    end\nend", "    unique_chars = Set()\n    unique_chars_count = 0\n    \n\
    \    for word in words \n        unique_chars = unique_chars + Set(word)\n   \
    \     unique_chars_count = unique_chars_count + length(word)\n    end\n    \n\
    \    if unique_chars_count > length(words)\n        return words[1]\n    else\n\
    \        return words[end]\n    end\nend", "    \n    unique_chars = Set{String}()\n\
    \    \n    for word in words \n        unique_chars = unique_chars + Set{String}(word)\n\
    \    end\n    \n    unique_chars = unique_chars - Set{String}()\n    \n    if\
    \ length(unique_chars) > length(words)\n        return words[end]\n    else\n\
    \        return find_max(words[1:end])\n    end\nend", "    unique_chars = Set()\n\
    \    unique_chars_count = Dict()\n    unique_chars_count_max = Dict()\n    unique_chars_count_min\
    \ = Dict()\n    unique_chars_count_min_max = Dict()\n    unique_chars_count_min_max_count\
    \ = Dict()\n    unique_chars_count_min_max_count_max = Dict()\n    unique_chars_count_min_max_count_max_min\
    \ = Dict()\n    unique_chars_count_min_max_count_max_min_max = Dict()\n    unique_chars_count_min_max_count_max_min_max_count\
    \ = Dict()\n    unique_chars_count_min_max_count_max_min_max_count_max = Dict()\n\
    \    unique_chars_count_min_max_count_max_min_max_count_max_min = Dict()\n   \
    \ unique_chars_count_min_max_count_max_min_max_count_max_min_max = Dict()\n  \
    \  unique_chars_count_min_max_count_max_min_max_count_max_min_max_count = Dict()\n\
    \    unique_chars_count_min_max_count_max_min_max_count_max_min_max_count_max\
    \ = Dict()\n    unique_chars_count_min_max_count_max_min_max_count_max_min_max_count_max_min\
    \ = Dict()\n    unique_chars_count_min_max_count_max_min_max_count_max_min_max_count_max_min_max\
    \ = Dict()\n    unique_chars_count_min_max_count_max_min_max_count_max_min_max_count_max_min_max_count\
    \ = Dict()\n    unique_chars_count_min_max_count_max_min_max_count_max_min_max_count_max_min_max_count_max\
    \ = Dict()\n    unique_chars_count_min_max_count_max_min_max_count_max_min_max_count_max_min_max_count_max_min_max\
    \ = Dict()\n    unique_chars_count_min_max_count_max_min_max_count_max_min_max_count_max_min_max_count_max_min_max_count\
    \ = Dict()\n    unique_chars_count_min_max_count_max_min_max_count_max_min_max_count_max_min_max_count_max_min_max_count_max\
    \ = Dict()\n    unique_chars_count_min_max_count_max_min_max_count_max_min_max_count_max_min_max_count_max_min_max_count_max_min_max\
    \ = Dict()\n    unique_chars_count_min_max_count_max_min_max_count_max_min_max_count_max_min_max_count_max_min_max_count_max_min_max_count_max\
    \ = Dict()\n    unique_chars_count_min_max_count_max_min_max_count_max_min_max_count_max_min_max_count_max_min_max_count_max_min_max_count_max\
    \ = Dict()\n    unique_chars_count_min_max_count_max_min_max_count_max_min_max_count_max_min_max_count_max_min_max_count_max_min_max_count_max_min\
    \ = Dict()\n    unique_chars_count_min_max_count_max_min_max_count_max_min_max_count_max_min_max_count_max_min_max_count_max_min_max_count_max_min_max\
    \ = Dict()\n    unique_chars_count_min_max_count_max_", "    unique_chars = Set{String}()\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_", "    unique_chars = Set()\n    unique_chars_counts = Dict()\n \
    \   for word in words\n        unique_chars = unique_chars + Set(word)\n     \
    \   unique_chars_counts[word] = length(unique_chars)\n    end\n    \n    unique_chars_counts\
    \ = Dict((key, val) for (key, val) in unique_chars_counts if val > 1)\n    \n\
    \    unique_chars_counts = Dict((key, val) for (key, val) in unique_chars_counts\
    \ if val > 1)\n    \n    unique_chars_counts = Dict((key, val) for (key, val)\
    \ in unique_chars_counts if val > 1)\n    \n    unique_chars_counts = Dict((key,\
    \ val) for (key, val) in unique_chars_counts if val > 1)\n    \n    unique_chars_counts\
    \ = Dict((key, val) for (key, val) in unique_chars_counts if val > 1)\n    \n\
    \    unique_chars_counts = Dict((key, val) for (key, val) in unique_chars_counts\
    \ if val > 1)\n    \n    unique_chars_counts = Dict((key, val) for (key, val)\
    \ in unique_chars_counts if val > 1)\n    \n    unique_chars_counts = Dict((key,\
    \ val) for (key, val) in unique_chars_counts if val > 1)\n    \n    unique_chars_counts\
    \ = Dict((key, val) for (key, val) in unique_chars_counts if val > 1)\n    \n\
    \    unique_chars_counts = Dict((key, val) for (key, val) in unique_chars_counts\
    \ if val > 1)\n    \n    unique_chars_counts = Dict((key, val) for (key, val)\
    \ in unique_chars_counts if val > 1)\n    \n    unique_chars_counts = Dict((key,\
    \ val) for (key, val) in unique_chars_counts if val > 1)\n    \n    unique_chars_counts\
    \ = Dict((key, val) for (key, val) in unique_chars_counts if val > 1)\n    \n\
    \    unique_chars_counts = Dict((key, val) for (key, val) in unique_chars_counts\
    \ if val > 1)\n    \n    unique_chars_counts = Dict((key, val) for (key, val)\
    \ in unique_chars_counts if val > 1)\n    \n    unique_chars_counts = Dict((key,\
    \ val) for (key, val) in unique_chars_counts if val > 1)\n    \n    unique_chars_counts\
    \ = Dict((key, val) for (key, val) in unique_chars_counts if val > 1)\n    \n\
    \    unique_chars_counts = Dict((key, val) for (key, val) in unique_chars_counts\
    \ if val > 1)\n    \n    unique_chars_counts = Dict((key, val) for (key, val)\
    \ in unique_chars_counts if val > 1)\n    \n    unique_chars_counts = Dict((key,\
    \ val) for (key, val) in unique_chars_counts if val > 1)\n    \n    unique_chars_counts\
    \ = Dict((", "    unique_chars = Set{Char}(\"\")\n    unique_chars = unique_chars.union(*words)\n\
    \    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars =\
    \ unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(char",
  "    unique_chars = Set()\n    unique_chars_count = Dict{String,Int}()\n    for\
    \ word in words \n        unique_chars = unique_chars + Set(word)\n        unique_chars_count[word]\
    \ = length(unique_chars)\n    end\n    \n    unique_chars = unique_chars - Set(\"\
    \\n\")\n    unique_chars = unique_chars - Set(\"\\r\")\n    unique_chars = unique_chars\
    \ - Set(\"\\t\")\n    unique_chars = unique_chars - Set(\"\\b\")\n    unique_chars\
    \ = unique_chars - Set(\"\\f\")\n    unique_chars = unique_chars - Set(\"\\v\"\
    )\n    unique_chars = unique_chars - Set(\"\\a\")\n    unique_chars = unique_chars\
    \ - Set(\"\\e\")\n    unique_chars = unique_chars - Set(\"\\i\")\n    unique_chars\
    \ = unique_chars - Set(\"\\o\")\n    unique_chars = unique_chars - Set(\"\\v\"\
    )\n    unique_chars = unique_chars - Set(\"\\e\")\n    unique_chars = unique_chars\
    \ - Set(\"\\a\")\n    unique_chars = unique_chars - Set(\"\\i\")\n    unique_chars\
    \ = unique_chars - Set(\"\\o\")\n    unique_chars = unique_chars - Set(\"\\b\"\
    )\n    unique_chars = unique_chars - Set(\"\\f\")\n    unique_chars = unique_chars\
    \ - Set(\"\\t\")\n    unique_chars = unique_chars - Set(\"\\n\")\n    unique_chars\
    \ = unique_chars - Set(\"\\r\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\e\")\n    unique_chars = unique_chars - Set(\"\\i\")\n    unique_chars = unique_chars\
    \ - Set(\"\\o\")\n    unique_chars = unique_chars - Set(\"\\a\")\n    unique_chars\
    \ = unique_chars - Set(\"\\v\")\n    unique_chars = unique_chars - Set(\"\\b\"\
    )\n    unique_chars = unique_chars - Set(\"\\f\")\n    unique_chars = unique_chars\
    \ - Set(\"\\t\")\n    unique_chars = unique_chars - Set(\"\\n\")\n    unique_chars\
    \ = unique_chars - Set(\"\\r\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\e\")\n    unique_chars = unique_chars - Set(\"\\i\")\n    unique_chars = unique_chars\
    \ - Set(\"\\o\")\n    unique_chars = unique_chars - Set(\"\\a\")\n    unique_chars\
    \ = unique_chars - Set(\"\\v\")\n    unique_chars = unique_chars - Set(\"\\b\"\
    )\n    unique_chars = unique_chars - Set(\"\\f\")\n    unique_", "    unique_chars\
    \ = Set{String}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(words.map(w => w))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w))\n    unique_chars = unique_chars.union(words.map(w => w))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w))\n    unique_chars = unique_chars.union(words.map(w => w))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w))\n    unique_chars = unique_chars.union(words.map(w => w))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w))\n    unique_chars = unique_chars.union(words.map(w => w))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w))\n    unique_chars = unique_chars.union(words.map(w => w))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w))\n    unique_chars = unique_chars.union(words.map(w => w))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w))\n    unique_chars = unique_chars.union(words.map(w => w))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w))\n    unique_chars = unique_chars.union(words.map(w => w))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w))\n    unique_chars = unique_chars.union(words.map(w => w))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w))\n    unique_chars = unique_chars.union(words.map(w => w))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w))\n    unique_chars = unique_chars.union(words.map(w => ", "    unique_chars\
    \ = Set()\n    unique_chars_count = Dict()\n    for word in words \n        unique_chars\
    \ = unique_chars + Set(word)\n        unique_chars_count[word] = length(unique_chars)\n\
    \    end\n    \n    unique_chars_count = sort(unique_chars_count)\n    \n    unique_chars_count\
    \ = unique_chars_count[end]\n    \n    unique_chars_count = unique_chars_count[1]\n\
    \    \n    if unique_chars_count > length(unique_chars)\n        return words[1]\n\
    \    else\n        return words[end]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    find_max([\n    \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\"\
    , \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\"\
    , \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\"\
    , \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\"\
    , \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\"\
    , \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\"\
    , \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\"\
    , \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\"\
    , \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\"\
    , \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\"\
    , \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\"\
    , \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\"\
    , \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\"\
    , \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\"\
    , \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\"\
    , \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\"\
    , \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\"\
    , \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\"\
    , \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\"\
    , \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\"\
    , \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\"\
    , \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\"\
    , \"banana\", \"apple\", \"banana\", \"apple\", \"banana", "    unique_chars =\
    \ Set()\n    unique_chars_count = Dict()\n    for word in words\n        unique_chars\
    \ = unique_chars + Set(word)\n        for char in unique_chars\n            unique_chars_count[char]\
    \ = unique_chars_count[char] + 1\n    end\n    \n    unique_chars_sorted = sort(unique_chars_count)\n\
    \    \n    if length(unique_chars_sorted) == length(unique_chars_count)\n    \
    \    return unique_chars_sorted[1]\n    else\n        return unique_chars_sorted[1]\n\
    \    end\nend", "    unique_chars = Set()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length).map(&String.fromCharCode))\n    unique_chars\
    \ = unique_chars.union(words.map(&String.fromCharCode))\n    unique_chars = unique_chars.union(words.map(&String.fromCharCode).map(&length))\n\
    \    unique_chars = unique_chars.union(words.map(&String.fromCharCode).map(&length).map(&String.fromCharCode))\n\
    \    unique_chars = unique_chars.union(words.map(&String.fromCharCode).map(&length).map(&String.fromCharCode).map(&length))\n\
    \    unique_chars = unique_chars.union(words.map(&String.fromCharCode).map(&length).map(&String.fromCharCode).map(&length).map(&String.fromCharCode))\n\
    \    unique_chars = unique_chars.union(words.map(&String.fromCharCode).map(&length).map(&String.fromCharCode).map(&length).map(&String.fromCharCode).map(&length))\n\
    \    unique_chars = unique_chars.union(words.map(&String.fromCharCode).map(&length).map(&String.fromCharCode).map(&length).map(&String.fromCharCode).map(&length).map(&String.fromCharCode))\n\
    \    unique_chars = unique_chars.union(words.map(&String.fromCharCode).map(&length).map(&String.fromCharCode).map(&length).map(&String.fromCharCode).map(&length).map(&String.fromCharCode).map(&length))\n\
    \    unique_chars = unique_chars.union(words.map(&String.fromCharCode).map(&length).map(&String.fromCharCode).map(&length).map(&String.fromCharCode).map(&length).map(&String.fromCharCode).map(&length).map(&String.fromCharCode))\n\
    \    unique_chars = unique_chars.union(words.map(&String.fromCharCode).map(&length).map(&String.fromCharCode).map(&length).map(&String.fromCharCode).map(&length).map(&String.fromCharCode).map(&length).map(&String.fromCharCode).map(&length))\n\
    \    unique_chars = unique_chars.union(words.map(&String.fromCharCode).map(&length).map(&String.fromCharCode).map(&length).map(&String.fromCharCode).map(&length).map(&String.fromCharCode).map(&length",
  "    \n    unique_chars = Set{Char}()\n    \n    for word in words \n        for\
    \ char in word\n            unique_chars.add(char)\n        end\n    end\n   \
    \ \n    unique_chars = unique_chars - Set(\"a\")\n    unique_chars = unique_chars\
    \ - Set(\"e\")\n    unique_chars = unique_chars - Set(\"i\")\n    unique_chars\
    \ = unique_chars - Set(\"o\")\n    unique_chars = unique_chars - Set(\"u\")\n\
    \    \n    unique_chars = unique_chars - Set(\"A\")\n    unique_chars = unique_chars\
    \ - Set(\"E\")\n    unique_chars = unique_chars - Set(\"I\")\n    unique_chars\
    \ = unique_chars - Set(\"O\")\n    unique_chars = unique_chars - Set(\"U\")\n\
    \    \n    unique_chars = unique_chars - Set(\"0\")\n    unique_chars = unique_chars\
    \ - Set(\"1\")\n    unique_chars = unique_chars - Set(\"2\")\n    unique_chars\
    \ = unique_chars - Set(\"3\")\n    unique_chars = unique_chars - Set(\"4\")\n\
    \    unique_chars = unique_chars - Set(\"5\")\n    unique_chars = unique_chars\
    \ - Set(\"6\")\n    unique_chars = unique_chars - Set(\"7\")\n    unique_chars\
    \ = unique_chars - Set(\"8\")\n    unique_chars = unique_chars - Set(\"9\")\n\
    \    \n    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\",\")\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars\
    \ = unique_chars - Set(\";\")\n    unique_chars = unique_chars - Set(\"!\")\n\
    \    unique_chars = unique_chars - Set(\"?\")\n    unique_chars = unique_chars\
    \ - Set(\"!\")\n    unique_chars = unique_chars - Set(\"?\")\n    unique_chars\
    \ = unique_chars - Set(\"!\")\n    unique_chars = unique_chars - Set(\"?\")\n\
    \    unique_chars = unique_chars - Set(\"!\")\n    unique_chars = unique_chars\
    \ - Set(\"?\")\n    unique_chars = unique_chars - Set(\"!\")\n    unique_chars\
    \ = unique_chars - Set(\"?\")\n    unique_chars = unique_chars - Set(\"!\")\n\
    \    unique_chars = unique_chars - Set(\"?\")\n    unique_chars = unique_chars\
    \ - Set(\"!\")\n    unique_chars = unique_chars - Set(\"?\")\n    unique_chars\
    \ = unique_chars - Set(\"!\")\n    unique_chars = unique_chars - Set(\"?\")\n\
    \    unique_chars = unique_chars - Set(\"!\")\n    unique_chars = unique_char",
  "    unique_chars = Set()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_", " \
    \   unique_chars = Set()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_", " \
    \   \n    unique_chars = Set{Char}()\n    \n    for word in words\n        for\
    \ char in word\n            unique_chars.add(char)\n        end\n    end\n   \
    \ \n    unique_chars = unique_chars - Set(\"_\")\n    \n    if length(unique_chars)\
    \ > length(words)\n        return words[end]\n    else\n        return words[findfirst(unique_chars)]\n\
    \    end\nend", "    unique_chars = Set()\n    unique_chars_count = Dict()\n \
    \   for word in words\n        unique_chars = unique_chars | Set(word)\n     \
    \   unique_chars_count[word] = length(unique_chars)\n    end\n    \n    unique_chars_count\
    \ = sort(unique_chars_count, by = x -> x[1])\n    \n    return unique_chars_count[end][1]\n\
    end", "    \n    unique_chars = Set{String}()\n    \n    for word in words \n\
    \        unique_chars = unique_chars + Set(word)\n    end\n    \n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    \n    unique_chars = unique_chars - Set(\"\
    .\")\n    \n    unique_chars = unique_chars - Set(\",\")\n    \n    unique_chars\
    \ = unique_chars - Set(\":\")\n    \n    unique_chars = unique_chars - Set(\"\
    ;\")\n    \n    unique_chars = unique_chars - Set(\"!\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"?\")\n    \n    unique_chars = unique_chars - Set(\"\
    (\")\n    \n    unique_chars = unique_chars - Set(\")\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"[\")\n    \n    unique_chars = unique_chars - Set(\"\
    ]\")\n    \n    unique_chars = unique_chars - Set(\"{\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"}\")\n    \n    unique_chars = unique_chars - Set(\"\
    :\")\n    \n    unique_chars = unique_chars - Set(\";\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"!\")\n    \n    unique_chars = unique_chars - Set(\"\
    ?\")\n    \n    unique_chars = unique_chars - Set(\"(\")\n    \n    unique_chars\
    \ = unique_chars - Set(\")\")\n    \n    unique_chars = unique_chars - Set(\"\
    [\")\n    \n    unique_chars = unique_chars - Set(\"]\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"{\")\n    \n    unique_chars = unique_chars - Set(\"\
    }\")\n    \n    unique_chars = unique_chars - Set(\":\")\n    \n    unique_chars\
    \ = unique_chars - Set(\";\")\n    \n    unique_chars = unique_chars - Set(\"\
    !\")\n    \n    unique_chars = unique_chars - Set(\"?\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"(\")\n    \n    unique_chars = unique_chars - Set(\"\
    )\")\n    \n    unique_chars = unique_chars - Set(\"[\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"]\")\n    \n    unique_chars = unique_chars - Set(\"\
    {\")\n    \n    unique_chars = unique_chars - Set(\"}\")\n    \n    unique_chars\
    \ = unique_chars - Set(\":\")\n    \n    unique_chars = unique_chars - Set(\"\
    ;\")\n    \n    unique_chars = unique_chars - Set(\"!\")\n", "    unique_chars\
    \ = Set()\n    unique_chars_count = Dict()\n    for word in words\n        unique_chars\
    \ = unique_chars + Set(word)\n        unique_chars_count[word] = length(unique_chars)\n\
    \    end\n    \n    unique_chars_sorted = sort(unique_chars_count, by=x->x[1])\n\
    \    \n    unique_chars_sorted[1]\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\n\
    \    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\"\
    ,\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\"\
    ,\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\"\
    ,\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\"\
    ,\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\"\
    ,\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\"\
    ,\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\"\
    ,\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\"\
    ,\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\"\
    ,\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\"\
    ,\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\"\
    ,\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\"\
    ,\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\"\
    ,\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\"\
    ,\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\"\
    ,\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\"\
    ,\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\"\
    ,\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\"\
    ,\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\"\
    ,\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\"\
    ,\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\"\
    ,\n    \"world\",\n    \"hello\",\n", "    unique_chars = Set{String}()\n    unique_chars\
    \ = unique_chars.union(words)\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.chars))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.chars.map(c => c.code)))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.chars.map(c => c.utf8)))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.chars.map(c => c.utf8string)))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.chars.map(c => c.utf8string)))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.chars.map(c => c.utf8string)))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.chars.map(c => c.utf8string)))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.chars.map(c => c.utf8string)))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.chars.map(c => c.utf8string)))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.chars.map(c => c.utf8string)))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.chars.map(c => c.utf8string)))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.chars.map(c => c.utf8string)))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.chars.map(c => c.utf8string)))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.chars.map(c => c.utf8string)))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.chars.map(c => c.utf8string)))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.chars.map(c => c.utf8string)))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.chars.map(c => c.utf8string)))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.chars.map(c => c.utf8string)))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.chars.map(c => c.utf8string)))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.chars.map(c => c.utf8string)))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.chars.map(c => c.utf8string)))\n    unique_chars\
    \ = unique_", "    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n", "    unique_chars = Set{Char}()\n\
    \    unique_chars.update(\"_\"..\"z\")\n    unique_chars.update(\"a\"..\"z\")\n\
    \    unique_chars.update(\"0\"..\"9\")\n    unique_chars.update(\"A\"..\"Z\")\n\
    \    unique_chars.update(\"a\"..\"z\")\n    unique_chars.update(\"0\"..\"9\")\n\
    \    unique_chars.update(\"_\"..\"z\")\n    unique_chars.update(\"a\"..\"z\")\n\
    \    unique_chars.update(\"0\"..\"9\")\n    unique_chars.update(\"_\"..\"z\")\n\
    \    unique_chars.update(\"a\"..\"z\")\n    unique_chars.update(\"0\"..\"9\")\n\
    \    unique_chars.update(\"_\"..\"z\")\n    unique_chars.update(\"a\"..\"z\")\n\
    \    unique_chars.update(\"0\"..\"9\")\n    unique_chars.update(\"_\"..\"z\")\n\
    \    unique_chars.update(\"a\"..\"z\")\n    unique_chars.update(\"0\"..\"9\")\n\
    \    unique_chars.update(\"_\"..\"z\")\n    unique_chars.update(\"a\"..\"z\")\n\
    \    unique_chars.update(\"0\"..\"9\")\n    unique_chars.update(\"_\"..\"z\")\n\
    \    unique_chars.update(\"a\"..\"z\")\n    unique_chars.update(\"0\"..\"9\")\n\
    \    unique_chars.update(\"_\"..\"z\")\n    unique_chars.update(\"a\"..\"z\")\n\
    \    unique_chars.update(\"0\"..\"9\")\n    unique_chars.update(\"_\"..\"z\")\n\
    \    unique_chars.update(\"a\"..\"z\")\n    unique_chars.update(\"0\"..\"9\")\n\
    \    unique_chars.update(\"_\"..\"z\")\n    unique_chars.update(\"a\"..\"z\")\n\
    \    unique_chars.update(\"0\"..\"9\")\n    unique_chars.update(\"_\"..\"z\")\n\
    \    unique_chars.update(\"a\"..\"z\")\n    unique_chars.update(\"0\"..\"9\")\n\
    \    unique_chars.update(\"_\"..\"z\")\n    unique_chars.update(\"a\"..\"z\")\n\
    \    unique_chars.update(\"0\"..\"9\")\n    unique_chars.update(\"_\"..\"z\")\n\
    \    unique_chars.update(\"a\"..", "    unique_chars = Set{Char}(\"\")\n    unique_chars_count\
    \ = 0\n    \n    for word in words \n        for char in word\n            if\
    \ !contains(unique_chars, char)\n                unique_chars_count += 1\n   \
    \             unique_chars += char\n            end\n        end\n    end\n  \
    \  \n    if unique_chars_count > length(unique_chars)\n        return words[end]\n\
    \    else\n        return words[findfirst(unique_chars)]\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\n    \"apple\", \"banana\", \"apple\", \"\
    apple\", \"banana\", \"banana\", \"banana\", \"apple\", \"apple\", \"apple\",\
    \ \"banana\", \"apple\", \"apple\", \"apple\", \"apple\", \"banana\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"", "    unique_chars = Set{String}()\n  \
    \  unique_chars.update!(words)\n    unique_chars.sort!()\n    unique_chars.reverse!()\n\
    \    unique_chars.last\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ accepts a string and returns a string with all the characters of the string\
    \ capitalized.", "    unique_chars = Set{Char}()\n    unique_chars_count = Dict{Char,Int}()\n\
    \    for word in words\n        for char in word\n            if !contains(unique_chars,\
    \ char)\n                unique_chars.add(char)\n                unique_chars_count[char]\
    \ = unique_chars_count[char] + 1\n            else\n                if unique_chars_count[char]\
    \ > unique_chars_count[unique_chars.last]\n                    unique_chars_count[unique_chars.last]\
    \ = unique_chars_count[char]\n                    unique_chars.last\n        \
    \        end\n            end\n        end\n    end\n    unique_chars.last\nend\n\
    </cell>\n<code language=julia-1.5>\nfind_max([\"apple\", \"banana\", \"apple\"\
    , \"apple\", \"banana\", \"banana\", \"apple\", \"apple\", \"banana\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that accepts a string and returns the number\
    \ of occurrences of the character 'a' in that string.", "    \n    unique_chars\
    \ = Set{String}()\n    \n    for word in words\n        for char in word\n   \
    \         unique_chars.add(char)\n        end\n    end\n    \n    unique_chars\
    \ = unique_chars - Set(\"a\")\n    unique_chars = unique_chars - Set(\"e\")\n\
    \    unique_chars = unique_chars - Set(\"i\")\n    unique_chars = unique_chars\
    \ - Set(\"o\")\n    unique_chars = unique_chars - Set(\"u\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"A\")\n    unique_chars = unique_chars - Set(\"E\")\n\
    \    unique_chars = unique_chars - Set(\"I\")\n    unique_chars = unique_chars\
    \ - Set(\"O\")\n    unique_chars = unique_chars - Set(\"U\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"0\")\n    unique_chars = unique_chars - Set(\"1\")\n\
    \    unique_chars = unique_chars - Set(\"2\")\n    unique_chars = unique_chars\
    \ - Set(\"3\")\n    unique_chars = unique_chars - Set(\"4\")\n    unique_chars\
    \ = unique_chars - Set(\"5\")\n    unique_chars = unique_chars - Set(\"6\")\n\
    \    unique_chars = unique_chars - Set(\"7\")\n    unique_chars = unique_chars\
    \ - Set(\"8\")\n    unique_chars = unique_chars - Set(\"9\")\n    \n    unique_chars\
    \ = unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\",\")\n\
    \    unique_chars = unique_chars - Set(\"!\")\n    unique_chars = unique_chars\
    \ - Set(\"?\")\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars\
    \ = unique_chars - Set(\";\")\n    unique_chars = unique_chars - Set(\"(\")\n\
    \    unique_chars = unique_chars - Set(\")\")\n    unique_chars = unique_chars\
    \ - Set(\"[\")\n    unique_chars = unique_chars - Set(\"]\")\n    unique_chars\
    \ = unique_chars - Set(\"{\")\n    unique_chars = unique_chars - Set(\"}\")\n\
    \    unique_chars = unique_chars - Set(\"'\")\n    unique_chars = unique_chars\
    \ - Set(\"\\\"\")\n    unique_chars = unique_chars - Set(\"`\")\n    unique_chars\
    \ = unique_chars - Set(\"~\")\n    unique_chars = unique_chars - Set(\"`\")\n\
    \    unique_chars = unique_chars - Set(\"~\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"$\")\n    unique_chars\
    \ = unique_chars - Set(\"", "    unique_chars = Set{Char}()\n    unique_chars_count\
    \ = Int64(0)\n    \n    for word in words \n        for char in word\n       \
    \     if !contains(unique_chars, char)\n                unique_chars.add(char)\n\
    \                unique_chars_count += 1 \n            end\n        end\n    end\n\
    \    \n    if unique_chars_count > length(unique_chars)\n        return words[end]\n\
    \    else\n        unique_chars_count = length(unique_chars)\n    end\n    \n\
    \    for word in words \n        for char in word\n            if contains(unique_chars,\
    \ char)\n                if unique_chars_count > length(unique_chars)\n      \
    \              return words[end]\n                else\n                    unique_chars_count\
    \ = length(unique_chars)\n                end\n            end\n        end\n\
    \    end\n    \n    return words[end]\nend\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"hello\", \"world\", \"hello\", \"world\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"hello\", \"world\", \"hello\", \"world\", \"hello\"])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_max([\"hello\", \"world\", \"hello\", \"world\", \"\
    hello\", \"world\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"hello\"\
    , \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"hello\", \"world\", \"hello\", \"world\"\
    , \"hello\", \"world\", \"hello\", \"world\", \"hello\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"\
    hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"\
    world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"\
    hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"\
    world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"\
    hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"\
    world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"\
    hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"\
    world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"\
    hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"\
    world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"\
    hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"\
    world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"\
    hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"\
    world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"\
    hello\", \"world\", \"hello\", \"world\", \"hello\", \"", "    unique_chars =\
    \ Set{String}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(words[1])\n    unique_chars = unique_chars.union(words[2])\n\
    \    unique_chars = unique_chars.union(words[3])\n    unique_chars = unique_chars.union(words[4])\n\
    \    unique_chars = unique_chars.union(words[5])\n    unique_chars = unique_chars.union(words[6])\n\
    \    unique_chars = unique_chars.union(words[7])\n    unique_chars = unique_chars.union(words[8])\n\
    \    unique_chars = unique_chars.union(words[9])\n    unique_chars = unique_chars.union(words[10])\n\
    \    unique_chars = unique_chars.union(words[11])\n    unique_chars = unique_chars.union(words[12])\n\
    \    unique_chars = unique_chars.union(words[13])\n    unique_chars = unique_chars.union(words[14])\n\
    \    unique_chars = unique_chars.union(words[15])\n    unique_chars = unique_chars.union(words[16])\n\
    \    unique_chars = unique_chars.union(words[17])\n    unique_chars = unique_chars.union(words[18])\n\
    \    unique_chars = unique_chars.union(words[19])\n    unique_chars = unique_chars.union(words[20])\n\
    \    unique_chars = unique_chars.union(words[21])\n    unique_chars = unique_chars.union(words[22])\n\
    \    unique_chars = unique_chars.union(words[23])\n    unique_chars = unique_chars.union(words[24])\n\
    \    unique_chars = unique_chars.union(words[25])\n    unique_chars = unique_chars.union(words[26])\n\
    \    unique_chars = unique_chars.union(words[27])\n    unique_chars = unique_chars.union(words[28])\n\
    \    unique_chars = unique_chars.union(words[29])\n    unique_chars = unique_chars.union(words[30])\n\
    \    unique_chars = unique_chars.union(words[31])\n    unique_chars = unique_chars.union(words[32])\n\
    \    unique_chars = unique_chars.union(words[33])\n    unique_chars = unique_chars.union(words[34])\n\
    \    unique_chars = unique_chars.union(words[35])\n    unique_chars = unique_chars.union(words[36])\n\
    \    unique_chars = unique_chars.union(words[37])\n    unique_chars = unique_chars.union(words[38])\n\
    \    unique_chars = unique_chars.union(word", "    \n    unique_chars = Set{Char}()\n\
    \    \n    for word in words \n        unique_chars = unique_chars + Set{Char}(word)\n\
    \    end\n    \n    unique_chars = unique_chars - Set{Char}(\"\\n\")\n    \n \
    \   if length(unique_chars) > length(words)\n        return words[end]\n    end\n\
    \    \n    unique_chars = unique_chars - Set{Char}(\"\\n\")\n    \n    if length(unique_chars)\
    \ == length(words)\n        return words[end]\n    end\n    \n    unique_chars\
    \ = unique_chars - Set{Char}(\"\\n\")\n    \n    if length(unique_chars) == length(words)\n\
    \        return words[end]\n    end\n    \n    unique_chars = unique_chars - Set{Char}(\"\
    \\n\")\n    \n    if length(unique_chars) == length(words)\n        return words[end]\n\
    \    end\n    \n    unique_chars = unique_chars - Set{Char}(\"\\n\")\n    \n \
    \   if length(unique_chars) == length(words)\n        return words[end]\n    end\n\
    \    \n    unique_chars = unique_chars - Set{Char}(\"\\n\")\n    \n    if length(unique_chars)\
    \ == length(words)\n        return words[end]\n    end\n    \n    unique_chars\
    \ = unique_chars - Set{Char}(\"\\n\")\n    \n    if length(unique_chars) == length(words)\n\
    \        return words[end]\n    end\n    \n    unique_chars = unique_chars - Set{Char}(\"\
    \\n\")\n    \n    if length(unique_chars) == length(words)\n        return words[end]\n\
    \    end\n    \n    unique_chars = unique_chars - Set{Char}(\"\\n\")\n    \n \
    \   if length(unique_chars) == length(words)\n        return words[end]\n    end\n\
    \    \n    unique_chars = unique_chars - Set{Char}(\"\\n\")\n    \n    if length(unique_chars)\
    \ == length(words)\n        return words[end]\n    end\n    \n    unique_chars\
    \ = unique_chars - Set{Char}(\"\\n\")\n    \n    if length(unique_chars) == length(words)\n\
    \        return words[end]\n    end\n    \n    unique_chars = unique_chars - Set{Char}(\"\
    \\n\")\n    \n    if length(unique_chars) == length(words)\n        return words[end]\n\
    \    end\n    \n    unique_chars = unique_chars - Set{Char}(\"\\n\")\n    \n \
    \   if length(unique_chars) == length(words)\n        return words[end]\n    end\n\
    \    \n    unique_chars = unique_chars - Set{Char}(\"\\n\")\n    \n    if length(unique_chars)\
    \ == length(words)\n        return words[end]\n    end\n    \n    unique_chars\
    \ = unique_chars - Set{Char}(\"\\n\")\n    ", "    unique_chars = Set{String}()\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n",
  "    unique_chars = Set()\n    unique_chars_count = Dict()\n    for word in words\n\
    \        for char in word\n            unique_chars.add(char)\n            unique_chars_count[char]\
    \ = unique_chars_count[char] + 1\n        end\n    end\n    \n    unique_chars_sorted\
    \ = sort(unique_chars_count)\n    \n    return unique_chars_sorted[1]\nend\n</cell>\n\
    <code language=julia-1.0>\nfind_max([\n    \"apple\",\n    \"banana\",\n    \"\
    apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\",\n \
    \   \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\"\
    ,\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\"\
    ,\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\"\
    ,\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\"\
    ,\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\"\
    ,\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\"\
    ,\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\"\
    ,\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\"\
    ,\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\"\
    ,\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\"\
    ,\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\"\
    ,\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\"\
    ,\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\"\
    ,\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\"\
    ,\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\"\
    ,\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\"\
    ,\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\"\
    ,\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"ban", "    unique_chars\
    \ = Set{Char}(\"\")\n    unique_chars_count = Set{Int}(0)\n    for word in words\
    \ \n        for char in word\n            if !contains(unique_chars, char)\n \
    \               unique_chars += char\n                unique_chars_count += unique_chars_count.contains(char)\
    \ ? 0 : unique_chars_count[char]\n            end\n        end\n    end\n    \n\
    \    if unique_chars_count == length(unique_chars)\n        return words[unique_chars.first]\n\
    \    end\n    \n    unique_chars_count.sort\n    \n    for char in unique_chars_count.last\n\
    \        if unique_chars_count[char] == length(unique_chars)\n            return\
    \ words[unique_chars.last]\n        end\n    end\n    \n    return words[unique_chars.first]\n\
    end\n</cell>\n<code language=julia-1.5>\nfind_max([\n    \"apple\",\n    \"banana\"\
    ,\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\"\
    ,\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\"\
    ,\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\"\
    ,\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\"\
    ,\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\"\
    ,\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\"\
    ,\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\"\
    ,\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\"\
    ,\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\"\
    ,\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\"\
    ,\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\"\
    ,\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\"\
    ,\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\"\
    ,\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\"\
    ,\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\"\
    ,\n    \"", "    unique_chars = Set()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_", " \
    \   unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(w => w.chars))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.chars.map(c => c.code)))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.chars.map(c => c.utf8)))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.chars.map(c => c.utf8string)))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.chars.map(c => c.utf8string)))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.chars.map(c => c.utf8string)))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.chars.map(c => c.utf8string)))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.chars.map(c => c.utf8string)))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.chars.map(c => c.utf8string)))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.chars.map(c => c.utf8string)))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.chars.map(c => c.utf8string)))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.chars.map(c => c.utf8string)))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.chars.map(c => c.utf8string)))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.chars.map(c => c.utf8string)))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.chars.map(c => c.utf8string)))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.chars.map(c => c.utf8string)))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.chars.map(c => c.utf8string)))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.chars.map(c => c.utf8string)))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.chars.map(c => c.utf8string)))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.chars.map(c => c.utf8string)))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.chars.map(c => c.utf8string)))\n    unique_chars = unique_", "    unique_chars\
    \ = Set{String}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words[1]))\n\
    \    unique_chars = unique_chars.union(Set(words[2]))\n    unique_chars = unique_chars.union(Set(words[3]))\n\
    \    unique_chars = unique_chars.union(Set(words[4]))\n    unique_chars = unique_chars.union(Set(words[5]))\n\
    \    unique_chars = unique_chars.union(Set(words[6]))\n    unique_chars = unique_chars.union(Set(words[7]))\n\
    \    unique_chars = unique_chars.union(Set(words[8]))\n    unique_chars = unique_chars.union(Set(words[9]))\n\
    \    unique_chars = unique_chars.union(Set(words[10]))\n    unique_chars = unique_chars.union(Set(words[11]))\n\
    \    unique_chars = unique_chars.union(Set(words[12]))\n    unique_chars = unique_chars.union(Set(words[13]))\n\
    \    unique_chars = unique_chars.union(Set(words[14]))\n    unique_chars = unique_chars.union(Set(words[15]))\n\
    \    unique_chars = unique_chars.union(Set(words[16]))\n    unique_chars = unique_chars.union(Set(words[17]))\n\
    \    unique_chars = unique_chars.union(Set(words[18]))\n    unique_chars = unique_chars.union(Set(words[19]))\n\
    \    unique_chars = unique_chars.union(Set(words[20]))\n    unique_chars = unique_chars.union(Set(words[21]))\n\
    \    unique_chars = unique_chars.union(Set(words[22]))\n    unique_chars = unique_chars.union(Set(words[23]))\n\
    \    unique_chars = unique_chars.union(Set(words[24]))\n    unique_chars = unique_chars.union(Set(words[25]))\n\
    \    unique_chars = unique_chars.union(Set(words[26]))\n    unique_chars = unique_chars.union(Set(words[27]))\n\
    \    unique_chars = unique_chars.union(Set(words[28]))\n    unique_chars = unique_chars.union(Set(words[29]))\n\
    \    unique_chars = unique_chars.union(Set(words[30]))\n    unique_chars = unique_chars.union(Set(words[31]))\n\
    \    unique_chars = unique_chars.union(Set(words[32]))\n    unique_chars = unique_chars.union(Set(words[33]))\n\
    \    unique_chars = unique_chars.union(Set(words[34]))\n    unique_chars = unique_chars.union(",
  "    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_", "    unique_chars\
    \ = Set()\n    unique_chars_count = 0\n    \n    for word in words\n        unique_chars\
    \ = unique_chars + Set(word)\n        unique_chars_count = unique_chars_count\
    \ + length(word)\n    end\n    \n    if unique_chars_count > length(words)\n \
    \       return words[1]\n    else\n        return words[end]\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\n    \"apple\",\n    \"banana\",\n    \"\
    apple\",\n    \"orange\",\n    \"apple\",\n    \"banana\",\n    \"apple\",\n \
    \   \"orange\",\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"orange\"\
    ,\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"orange\",\n    \"apple\"\
    ,\n    \"banana\",\n    \"apple\",\n    \"orange\",\n    \"apple\",\n    \"banana\"\
    ,\n    \"apple\",\n    \"orange\",\n    \"apple\",\n    \"banana\",\n    \"apple\"\
    ,\n    \"orange\",\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"orange\"\
    ,\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"orange\",\n    \"apple\"\
    ,\n    \"banana\",\n    \"apple\",\n    \"orange\",\n    \"apple\",\n    \"banana\"\
    ,\n    \"apple\",\n    \"orange\",\n    \"apple\",\n    \"banana\",\n    \"apple\"\
    ,\n    \"orange\",\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"orange\"\
    ,\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"orange\",\n    \"apple\"\
    ,\n    \"banana\",\n    \"apple\",\n    \"orange\",\n    \"apple\",\n    \"banana\"\
    ,\n    \"apple\",\n    \"orange\",\n    \"apple\",\n    \"banana\",\n    \"apple\"\
    ,\n    \"orange\",\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"orange\"\
    ,\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"orange\",\n    \"apple\"\
    ,\n    \"banana\",\n    \"apple\",\n    \"orange\",\n    \"apple\",\n    \"banana\"\
    ,\n    \"apple\",\n    \"orange\",\n    \"apple\",\n    \"banana\",\n    \"apple\"\
    ,\n    \"orange\",\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"orange\"\
    ,\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"orange\",\n    \"apple\"\
    ,\n    \"banana\",\n    \"apple\",\n    \"orange\",\n    \"apple\",\n    \"banana",
  "    unique_chars = Set()\n    unique_chars_count = Dict()\n    for word in words\n\
    \        for char in word\n            if !contains(unique_chars, char)\n    \
    \            unique_chars.add(char)\n                unique_chars_count[char]\
    \ = get(unique_chars_count, char, 0) + 1\n            else\n                if\
    \ unique_chars_count[char] > unique_chars_count[get(unique_chars_count, char,\
    \ -1)]\n                    unique_chars_count[char] = unique_chars_count[get(unique_chars_count,\
    \ char, -1)]\n                end\n            end\n        end\n    end\n   \
    \ \n    unique_chars_count = sort(unique_chars_count, by=x->x[1], rev=true)\n\
    \    unique_chars_count = unique_chars_count[end]\n    \n    if unique_chars_count\
    \ == 0\n        return \"\"\n    end\n    \n    unique_chars_count = unique_chars_count[1]\n\
    \    \n    if unique_chars_count > 1\n        return words[end]\n    end\n   \
    \ \n    return unique_chars[1]\nend", "    \n    unique_chars = Set()\n    \n\
    \    for word in words\n        unique_chars = unique_chars | Set(word)\n    end\n\
    \    \n    unique_chars = unique_chars - Set(\"a\")\n    unique_chars = unique_chars\
    \ - Set(\"e\")\n    unique_chars = unique_chars - Set(\"i\")\n    unique_chars\
    \ = unique_chars - Set(\"o\")\n    unique_chars = unique_chars - Set(\"u\")\n\
    \    \n    unique_chars = unique_chars - Set(\"A\")\n    unique_chars = unique_chars\
    \ - Set(\"E\")\n    unique_chars = unique_chars - Set(\"I\")\n    unique_chars\
    \ = unique_chars - Set(\"O\")\n    unique_chars = unique_chars - Set(\"U\")\n\
    \    \n    unique_chars = unique_chars - Set(\"a\")\n    unique_chars = unique_chars\
    \ - Set(\"e\")\n    unique_chars = unique_chars - Set(\"i\")\n    unique_chars\
    \ = unique_chars - Set(\"o\")\n    unique_chars = unique_chars - Set(\"u\")\n\
    \    \n    unique_chars = unique_chars - Set(\"A\")\n    unique_chars = unique_chars\
    \ - Set(\"E\")\n    unique_chars = unique_chars - Set(\"I\")\n    unique_chars\
    \ = unique_chars - Set(\"O\")\n    unique_chars = unique_chars - Set(\"U\")\n\
    \    \n    unique_chars = unique_chars - Set(\"a\")\n    unique_chars = unique_chars\
    \ - Set(\"e\")\n    unique_chars = unique_chars - Set(\"i\")\n    unique_chars\
    \ = unique_chars - Set(\"o\")\n    unique_chars = unique_chars - Set(\"u\")\n\
    \    \n    unique_chars = unique_chars - Set(\"A\")\n    unique_chars = unique_chars\
    \ - Set(\"E\")\n    unique_chars = unique_chars - Set(\"I\")\n    unique_chars\
    \ = unique_chars - Set(\"O\")\n    unique_chars = unique_chars - Set(\"U\")\n\
    \    \n    unique_chars = unique_chars - Set(\"a\")\n    unique_chars = unique_chars\
    \ - Set(\"e\")\n    unique_chars = unique_chars - Set(\"i\")\n    unique_chars\
    \ = unique_chars - Set(\"o\")\n    unique_chars = unique_chars - Set(\"u\")\n\
    \    \n    unique_chars = unique_chars - Set(\"A\")\n    unique_chars = unique_chars\
    \ - Set(\"E\")\n    unique_chars = unique_chars - Set(\"I\")\n    unique_chars\
    \ = unique_chars - Set(\"O\")\n    unique_chars = unique_", "    unique_chars\
    \ = Set{Char}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(words[1])\n    unique_chars = unique_chars.union(words[2])\n\
    \    unique_chars = unique_chars.union(words[3])\n    unique_chars = unique_chars.union(words[4])\n\
    \    unique_chars = unique_chars.union(words[5])\n    unique_chars = unique_chars.union(words[6])\n\
    \    unique_chars = unique_chars.union(words[7])\n    unique_chars = unique_chars.union(words[8])\n\
    \    unique_chars = unique_chars.union(words[9])\n    unique_chars = unique_chars.union(words[10])\n\
    \    unique_chars = unique_chars.union(words[11])\n    unique_chars = unique_chars.union(words[12])\n\
    \    unique_chars = unique_chars.union(words[13])\n    unique_chars = unique_chars.union(words[14])\n\
    \    unique_chars = unique_chars.union(words[15])\n    unique_chars = unique_chars.union(words[16])\n\
    \    unique_chars = unique_chars.union(words[17])\n    unique_chars = unique_chars.union(words[18])\n\
    \    unique_chars = unique_chars.union(words[19])\n    unique_chars = unique_chars.union(words[20])\n\
    \    unique_chars = unique_chars.union(words[21])\n    unique_chars = unique_chars.union(words[22])\n\
    \    unique_chars = unique_chars.union(words[23])\n    unique_chars = unique_chars.union(words[24])\n\
    \    unique_chars = unique_chars.union(words[25])\n    unique_chars = unique_chars.union(words[26])\n\
    \    unique_chars = unique_chars.union(words[27])\n    unique_chars = unique_chars.union(words[28])\n\
    \    unique_chars = unique_chars.union(words[29])\n    unique_chars = unique_chars.union(words[30])\n\
    \    unique_chars = unique_chars.union(words[31])\n    unique_chars = unique_chars.union(words[32])\n\
    \    unique_chars = unique_chars.union(words[33])\n    unique_chars = unique_chars.union(words[34])\n\
    \    unique_chars = unique_chars.union(words[35])\n    unique_chars = unique_chars.union(words[36])\n\
    \    unique_chars = unique_chars.union(words[37])\n    unique_chars = unique_chars.union(words[38])\n\
    \    unique_chars = unique_chars.union(word", "    unique_chars = Set{Char}(\"\
    \")\n    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(Set(words[1]))\n\
    \    unique_chars = unique_chars.union(Set(words[2]))\n    unique_chars = unique_chars.union(Set(words[3]))\n\
    \    unique_chars = unique_chars.union(Set(words[4]))\n    unique_chars = unique_chars.union(Set(words[5]))\n\
    \    unique_chars = unique_chars.union(Set(words[6]))\n    unique_chars = unique_chars.union(Set(words[7]))\n\
    \    unique_chars = unique_chars.union(Set(words[8]))\n    unique_chars = unique_chars.union(Set(words[9]))\n\
    \    unique_chars = unique_chars.union(Set(words[10]))\n    unique_chars = unique_chars.union(Set(words[11]))\n\
    \    unique_chars = unique_chars.union(Set(words[12]))\n    unique_chars = unique_chars.union(Set(words[13]))\n\
    \    unique_chars = unique_chars.union(Set(words[14]))\n    unique_chars = unique_chars.union(Set(words[15]))\n\
    \    unique_chars = unique_chars.union(Set(words[16]))\n    unique_chars = unique_chars.union(Set(words[17]))\n\
    \    unique_chars = unique_chars.union(Set(words[18]))\n    unique_chars = unique_chars.union(Set(words[19]))\n\
    \    unique_chars = unique_chars.union(Set(words[20]))\n    unique_chars = unique_chars.union(Set(words[21]))\n\
    \    unique_chars = unique_chars.union(Set(words[22]))\n    unique_chars = unique_chars.union(Set(words[23]))\n\
    \    unique_chars = unique_chars.union(Set(words[24]))\n    unique_chars = unique_chars.union(Set(words[25]))\n\
    \    unique_chars = unique_chars.union(Set(words[26]))\n    unique_chars = unique_chars.union(Set(words[27]))\n\
    \    unique_chars = unique_chars.union(Set(words[28]))\n    unique_chars = unique_chars.union(Set(words[29]))\n\
    \    unique_chars = unique_chars.union(Set(words[30]))\n    unique_chars = unique_chars.union(Set(words[31]))\n\
    \    unique_chars = unique_chars.union(Set(words[32]))\n    unique_chars = unique_chars.union(Set(words[33]))\n\
    \    unique_chars = unique_chars.union(Set(words[34]))\n    unique_chars = unique_chars.union(Set(words[35]))\n\
    \    unique_chars = unique_char", "    unique_chars = Set{String}()\n    unique_chars\
    \ = unique_chars.union(words)\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(x => x.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(x => x.reverse))\n    unique_chars = unique_chars.union(words.map(x\
    \ => x.reverse))\n    unique_chars = unique_chars.union(words.map(x => x.reverse))\n\
    \    unique_chars = unique_chars.union(words.map(x => x.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(x => x.reverse))\n    unique_chars = unique_chars.union(words.map(x\
    \ => x.reverse))\n    unique_chars = unique_chars.union(words.map(x => x.reverse))\n\
    \    unique_chars = unique_chars.union(words.map(x => x.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(x => x.reverse))\n    unique_chars = unique_chars.union(words.map(x\
    \ => x.reverse))\n    unique_chars = unique_chars.union(words.map(x => x.reverse))\n\
    \    unique_chars = unique_chars.union(words.map(x => x.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(x => x.reverse))\n    unique_chars = unique_chars.union(words.map(x\
    \ => x.reverse))\n    unique_chars = unique_chars.union(words.map(x => x.reverse))\n\
    \    unique_chars = unique_chars.union(words.map(x => x.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(x => x.reverse))\n    unique_chars = unique_chars.union(words.map(x\
    \ => x.reverse))\n    unique_chars = unique_chars.union(words.map(x => x.reverse))\n\
    \    unique_chars = unique_chars.union(words.map(x => x.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(x => x.reverse))\n    unique_chars = unique_chars.union(words.map(x\
    \ => x.reverse))\n    unique_chars = unique_chars.union(words.map(x => x.reverse))\n\
    \    unique_chars = unique_chars.union(words.map(x => x.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(x => x.reverse))\n    unique_chars = unique_chars.union(words.map(x\
    \ => x.reverse))\n    unique_chars = unique_chars.union(words.map(x => x.reverse))\n\
    \    unique_chars = unique_chars.union(words.map(x => x.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(x => x.reverse))", "    \n    unique_chars =\
    \ Set{String}()\n    \n    for word in words \n        unique_chars = unique_chars\
    \ | Set(word)\n    end\n    \n    unique_chars = unique_chars - Set(\"\\n\")\n\
    \    \n    unique_chars = unique_chars - Set(\"\\t\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\r\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\f\")\n    \n    unique_chars = unique_chars - Set(\"\\b\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\v\")\n    \n    unique_chars = unique_chars - Set(\"\\e\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\v\")\n    \n    unique_chars = unique_chars - Set(\"\\e\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\v\")\n    \n    unique_chars = unique_chars - Set(\"\\e\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\v\")\n    \n    unique_chars = unique_chars - Set(\"\\e\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\v\")\n    \n    unique_chars = unique_chars - Set(\"\\e\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\v\")\n    \n    unique_chars = unique_chars - Set(\"\\e\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\v\")\n    \n    unique_chars = unique_chars - Set(\"\\e\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\v\")\n    \n    unique_chars = unique_chars - Set(\"\\e\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\v\")\n    \n    unique_chars = unique_chars - Set(\"\\e\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    \n    ", "    \n    unique_chars = Set{Char}()\n\
    \    \n    for word in words \n        unique_chars = unique_chars + Set{Char}(word)\n\
    \    end\n    \n    unique_chars = unique_chars - Set{Char}(\"\\n\")\n    \n \
    \   if length(unique_chars) == 0 \n        return \"\\n\"\n    end\n    \n   \
    \ unique_chars = unique_chars - Set{Char}(\"\\t\")\n    \n    if length(unique_chars)\
    \ == 0 \n        return \"\\t\"\n    end\n    \n    unique_chars = unique_chars\
    \ - Set{Char}(\"\\r\")\n    \n    if length(unique_chars) == 0 \n        return\
    \ \"\\r\"\n    end\n    \n    unique_chars = unique_chars - Set{Char}(\"\\f\"\
    )\n    \n    if length(unique_chars) == 0 \n        return \"\\f\"\n    end\n\
    \    \n    unique_chars = unique_chars - Set{Char}(\"\\b\")\n    \n    if length(unique_chars)\
    \ == 0 \n        return \"\\b\"\n    end\n    \n    unique_chars = unique_chars\
    \ - Set{Char}(\"\\a\")\n    \n    if length(unique_chars) == 0 \n        return\
    \ \"\\a\"\n    end\n    \n    unique_chars = unique_chars - Set{Char}(\"\\v\"\
    )\n    \n    if length(unique_chars) == 0 \n        return \"\\v\"\n    end\n\
    \    \n    unique_chars = unique_chars - Set{Char}(\"\\e\")\n    \n    if length(unique_chars)\
    \ == 0 \n        return \"\\e\"\n    end\n    \n    unique_chars = unique_chars\
    \ - Set{Char}(\"\\a\")\n    \n    if length(unique_chars) == 0 \n        return\
    \ \"\\a\"\n    end\n    \n    unique_chars = unique_chars - Set{Char}(\"\\v\"\
    )\n    \n    if length(unique_chars) == 0 \n        return \"\\v\"\n    end\n\
    \    \n    unique_chars = unique_chars - Set{Char}(\"\\b\")\n    \n    if length(unique_chars)\
    \ == 0 \n        return \"\\b\"\n    end\n    \n    unique_chars = unique_chars\
    \ - Set{Char}(\"\\f\")\n    \n    if length(unique_chars) == 0 \n        return\
    \ \"\\f\"\n    end\n    \n    unique_chars = unique_chars - Set{Char}(\"\\r\"\
    )\n    \n    if length(unique_chars) == 0 \n        return \"\\r\"\n    end\n\
    \    \n    unique_chars = unique_chars - Set{Char}(\"\\t\")\n    \n    if length(unique_chars)\
    \ == 0 \n        return \"\\t\"\n    end\n    \n    unique_chars = unique_chars\
    \ - Set{Char}(\"\\n\")\n    \n    if length(unique_chars) == 0 \n        return\
    \ \"\\n\"", "    \n    unique_chars = Set()\n    \n    for word in words \n  \
    \      unique_chars = unique_chars + Set(word)\n    end\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\n\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\t\")\n    \n    unique_chars = unique_chars - Set(\"\\r\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\f\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\b\")\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\v\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\e\")\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\a\")\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\a\")\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\a\")\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\a\")\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\a\")\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\a\")\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\a\")\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\a\")\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_char", "    unique_chars\
    \ = Set()\n    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[1]))\n    unique_chars = unique_chars.union(words.map(w => w[2]))\n   \
    \ unique_chars = unique_chars.union(words.map(w => w[3]))\n    unique_chars =\
    \ unique_chars.union(words.map(w => w[4]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[5]))\n    unique_chars = unique_chars.union(words.map(w => w[6]))\n   \
    \ unique_chars = unique_chars.union(words.map(w => w[7]))\n    unique_chars =\
    \ unique_chars.union(words.map(w => w[8]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[9]))\n    unique_chars = unique_chars.union(words.map(w => w[10]))\n  \
    \  unique_chars = unique_chars.union(words.map(w => w[11]))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w[12]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[13]))\n    unique_chars = unique_chars.union(words.map(w => w[14]))\n \
    \   unique_chars = unique_chars.union(words.map(w => w[15]))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w[16]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[17]))\n    unique_chars = unique_chars.union(words.map(w => w[18]))\n \
    \   unique_chars = unique_chars.union(words.map(w => w[19]))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w[20]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[21]))\n    unique_chars = unique_chars.union(words.map(w => w[22]))\n \
    \   unique_chars = unique_chars.union(words.map(w => w[23]))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w[24]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[25]))\n    unique_chars = unique_chars.union(words.map(w => w[26]))\n \
    \   unique_chars = unique_chars.union(words.map(w => w[27]))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w[28]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[29]))\n    unique_chars = unique_chars.union(words.map(w => w[30]))", " \
    \   unique_chars = Set{String}()\n    unique_chars_count = Dict{String,Int}()\n\
    \    for word in words \n        for char in word\n            if !contains(unique_chars,\
    \ char)\n                unique_chars.add(char)\n                unique_chars_count[char]\
    \ = unique_chars_count[char] + 1\n            else\n                if unique_chars_count[char]\
    \ > unique_chars_count[unique_chars[length(unique_chars)]]\n                 \
    \   unique_chars[length(unique_chars)] = char\n                    unique_chars_count[char]\
    \ = unique_chars_count[char] + 1\n                end\n            end\n     \
    \   end\n    end\n    return unique_chars[length(unique_chars)]\nend\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\n    \"apple\",\n    \"banana\",\n    \"\
    apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\",\n \
    \   \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\"\
    ,\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\"\
    ,\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\"\
    ,\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\"\
    ,\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\"\
    ,\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\"\
    ,\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\"\
    ,\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\"\
    ,\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\"\
    ,\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\"\
    ,\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\"\
    ,\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\"\
    ,\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\"\
    ,\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\"\
    ,\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"apple\",\n    \"banana\"\
    ,\n", "    unique_chars = Set()\n    for word in words \n        unique_chars\
    \ = unique_chars | Set(word)\n    end\n    unique_chars = unique_chars - Set(\"\
    \\n\")\n    unique_chars = unique_chars - Set(\"\\r\")\n    unique_chars = unique_chars\
    \ - Set(\"\\t\")\n    unique_chars = unique_chars - Set(\"\\v\")\n    unique_chars\
    \ = unique_chars - Set(\"\\f\")\n    unique_chars = unique_chars - Set(\"\\b\"\
    )\n    unique_chars = unique_chars - Set(\"\\a\")\n    unique_chars = unique_chars\
    \ - Set(\"\\e\")\n    unique_chars = unique_chars - Set(\"\\c\")\n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    unique_chars = unique_chars - Set(\"\\a\"\
    )\n    unique_chars = unique_chars - Set(\"\\a\")\n    unique_chars = unique_chars\
    \ - Set(\"\\a\")\n    unique_chars = unique_chars - Set(\"\\a\")\n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    unique_chars = unique_chars - Set(\"\\a\"\
    )\n    unique_chars = unique_chars - Set(\"\\a\")\n    unique_chars = unique_chars\
    \ - Set(\"\\a\")\n    unique_chars = unique_chars - Set(\"\\a\")\n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    unique_chars = unique_chars - Set(\"\\a\"\
    )\n    unique_chars = unique_chars - Set(\"\\a\")\n    unique_chars = unique_chars\
    \ - Set(\"\\a\")\n    unique_chars = unique_chars - Set(\"\\a\")\n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    unique_chars = unique_chars - Set(\"\\a\"\
    )\n    unique_chars = unique_chars - Set(\"\\a\")\n    unique_chars = unique_chars\
    \ - Set(\"\\a\")\n    unique_chars = unique_chars - Set(\"\\a\")\n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    unique_chars = unique_chars - Set(\"\\a\"\
    )\n    unique_chars = unique_chars - Set(\"\\a\")\n    unique_chars = unique_chars\
    \ - Set(\"\\a\")\n    unique_chars = unique_chars - Set(\"\\a\")\n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    unique_chars = unique_chars - Set(\"\\a\"\
    )\n    unique_chars = unique_chars - Set(\"\\a\")\n    unique_chars = unique_chars\
    \ - Set(\"\\a\")\n    unique_chars = unique_chars - Set(\"\\a\")\n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    unique_chars = unique_chars - Set", "   \
    \ unique_chars = Set()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_", " \
    \   \n    unique_chars = Set{Char}()\n    \n    for word in words \n        for\
    \ char in word\n            unique_chars.add(char)\n        end\n    end\n   \
    \ \n    unique_chars = unique_chars - Set(\"\\n\")\n    \n    if length(unique_chars)\
    \ > length(words)\n        return words[end]\n    else\n        return find_max(words[1:end])\n\
    \    end\nend", "    unique_chars = Set()\n    unique_chars_count = Dict()\n \
    \   for word in words \n        unique_chars = unique_chars + Set(word)\n    \
    \    unique_chars_count[word] = length(unique_chars)\n    end\n    \n    unique_chars_count\
    \ = Dict([(word, unique_chars_count[word]) for word in unique_chars])\n    \n\
    \    sorted_unique_chars = sort(unique_chars)\n    \n    unique_chars_count =\
    \ Dict([(word, unique_chars_count[word]) for word in sorted_unique_chars])\n \
    \   \n    sorted_unique_chars_count = sort(unique_chars_count)\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    ", "    unique_chars = Set{String}()\n    unique_chars\
    \ = unique_chars.union(words)\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n",
  "    unique_chars = Set()\n    unique_chars_count = Dict()\n    unique_chars_count[1]\
    \ = words[1].length\n    for word in words\n        unique_chars = unique_chars\
    \ + Set(word)\n        unique_chars_count[length(unique_chars)] = unique_chars_count[length(unique_chars)]\
    \ + 1\n    end\n    \n    unique_chars_count[length(unique_chars)] = unique_chars_count[length(unique_chars)]\
    \ + 1\n    \n    unique_chars = unique_chars[length(unique_chars)..end]\n    \n\
    \    if length(unique_chars) == length(words[1])\n        return words[1]\n  \
    \  end\n    \n    if length(unique_chars) > length(words[1])\n        return words[1]\n\
    \    end\n    \n    if length(unique_chars) == length(words[2])\n        return\
    \ words[2]\n    end\n    \n    if length(unique_chars) > length(words[2])\n  \
    \      return words[2]\n    end\n    \n    if length(unique_chars) == length(words[3])\n\
    \        return words[3]\n    end\n    \n    if length(unique_chars) > length(words[3])\n\
    \        return words[3]\n    end\n    \n    if length(unique_chars) == length(words[4])\n\
    \        return words[4]\n    end\n    \n    if length(unique_chars) > length(words[4])\n\
    \        return words[4]\n    end\n    \n    if length(unique_chars) == length(words[5])\n\
    \        return words[5]\n    end\n    \n    if length(unique_chars) > length(words[5])\n\
    \        return words[5]\n    end\n    \n    if length(unique_chars) == length(words[6])\n\
    \        return words[6]\n    end\n    \n    if length(unique_chars) > length(words[6])\n\
    \        return words[6]\n    end\n    \n    if length(unique_chars) == length(words[7])\n\
    \        return words[7]\n    end\n    \n    if length(unique_chars) > length(words[7])\n\
    \        return words[7]\n    end\n    \n    if length(unique_chars) == length(words[8])\n\
    \        return words[8]\n    end\n    \n    if length(unique_chars) > length(words[8])\n\
    \        return words[8]\n    end\n    \n    if length(unique_chars) == length(words[9])\n\
    \        return words[9]\n    end\n    \n    if length(unique_chars) > length(words[9])\n\
    \        return words[9]\n    end\n    \n    if length(unique_chars) == length(words[10])\n\
    \        return words[10]\n    end\n    \n    if length(unique_chars) > length(words[10])\n\
    \        return words[10]\n    end\n    \n    if length(unique_chars) == length(words[11])\n\
    \        return words[11]\n    end\n    \n    if length(unique_chars) > length(words[11])\n\
    \        return word", "    \n    unique_chars = Set()\n    \n    for word in\
    \ words\n        unique_chars = unique_chars + Set(word)\n    end\n    \n    unique_chars\
    \ = unique_chars - Set(\"a\")\n    unique_chars = unique_chars - Set(\"e\")\n\
    \    unique_chars = unique_chars - Set(\"i\")\n    unique_chars = unique_chars\
    \ - Set(\"o\")\n    unique_chars = unique_chars - Set(\"u\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"A\")\n    unique_chars = unique_chars - Set(\"E\")\n\
    \    unique_chars = unique_chars - Set(\"I\")\n    unique_chars = unique_chars\
    \ - Set(\"O\")\n    unique_chars = unique_chars - Set(\"U\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"a\")\n    unique_chars = unique_chars - Set(\"e\")\n\
    \    unique_chars = unique_chars - Set(\"i\")\n    unique_chars = unique_chars\
    \ - Set(\"o\")\n    unique_chars = unique_chars - Set(\"u\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"A\")\n    unique_chars = unique_chars - Set(\"E\")\n\
    \    unique_chars = unique_chars - Set(\"I\")\n    unique_chars = unique_chars\
    \ - Set(\"O\")\n    unique_chars = unique_chars - Set(\"U\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"a\")\n    unique_chars = unique_chars - Set(\"e\")\n\
    \    unique_chars = unique_chars - Set(\"i\")\n    unique_chars = unique_chars\
    \ - Set(\"o\")\n    unique_chars = unique_chars - Set(\"u\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"A\")\n    unique_chars = unique_chars - Set(\"E\")\n\
    \    unique_chars = unique_chars - Set(\"I\")\n    unique_chars = unique_chars\
    \ - Set(\"O\")\n    unique_chars = unique_chars - Set(\"U\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"a\")\n    unique_chars = unique_chars - Set(\"e\")\n\
    \    unique_chars = unique_chars - Set(\"i\")\n    unique_chars = unique_chars\
    \ - Set(\"o\")\n    unique_chars = unique_chars - Set(\"u\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"A\")\n    unique_chars = unique_chars - Set(\"E\")\n\
    \    unique_chars = unique_chars - Set(\"I\")\n    unique_chars = unique_chars\
    \ - Set(\"O\")\n    unique_chars = unique_", "    \n    unique_chars = Set{String}()\n\
    \    \n    for word in words \n        unique_chars = unique_chars + Set(word)\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"\\n\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\t\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\r\")\n    \n    unique_chars = unique_chars - Set(\"\\f\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\b\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\a\")\n    \n    unique_chars = unique_chars - Set(\"\\v\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\e\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\a\")\n    \n    unique_chars = unique_chars - Set(\"\\c\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\e\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\a\")\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\a\")\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\a\")\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\a\")\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\a\")\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\a\")\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\a\")\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\a\")\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_",
  "    unique_chars = Set{String}()\n    unique_chars_count = Dict{String, Int}()\n\
    \    for w in words\n        unique_chars = unique_chars + Set(w)\n        unique_chars_count[w]\
    \ = length(unique_chars)\n    end\n    \n    unique_chars_sorted = sort(unique_chars_count)\n\
    \    \n    unique_chars_sorted[1]\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    apple\", \"banana\", \"apple\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    apple\", \"banana\", \"apple\", \"banana\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"apple\", \"banana\", \"apple\", \"banana\", \"banana\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"apple\", \"banana\", \"apple\", \"banana\"\
    , \"banana\", \"banana\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"apple\"\
    , \"banana\", \"apple\", \"banana\", \"banana\", \"banana\", \"banana\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"apple\", \"banana\", \"apple\", \"banana\"\
    , \"banana\", \"banana\", \"banana\", \"banana\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"apple\", \"banana\", \"apple\", \"banana\", \"banana\", \"banana\"\
    , \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\"\
    , \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\"\
    , \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\"\
    , \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\"\
    , \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\"\
    , \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\"\
    , \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\"\
    , \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\"\
    , \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\"\
    , \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\"\
    , \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\"\
    , \"banana\", \"banana\", \"banana\", \"ban", "    unique_chars = Set()\n    unique_chars_count\
    \ = Dict{String,Int}()\n    for word in words \n        unique_chars = unique_chars\
    \ + Set(word)\n        unique_chars_count[word] = length(unique_chars)\n    end\n\
    \    \n    unique_chars_count = sort(unique_chars_count, by=x->x[1], rev=true)\n\
    \    \n    unique_chars_count[unique_chars_count[end][1]][1]\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfind_max([\"hello\", \"world\", \"hello\", \"world\"])\n\
    </cell>\n<code language=julia-1.5>\nfind_max([\"hello\", \"world\", \"hello\"\
    , \"world\", \"hello\", \"world\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"\
    world\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"hello\", \"world\"\
    , \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\"\
    , \"world\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"hello\", \"world\"\
    , \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\"\
    , \"world\", \"hello\", \"world\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"\
    world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"\
    hello\", \"world\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"hello\"\
    , \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"\
    , \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\"\
    , \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"\
    , \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\"\
    , \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"\
    , \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\"\
    , \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"\
    , \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\"\
    , \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"\
    , \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\"\
    , \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"\
    , \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\"\
    , \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"\
    , \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\"\
    , \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"\
    , \"hello\", \"world\", \"hello\", \"world\", \"", "    unique_chars = Set()\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words[1]))\n    unique_chars = unique_chars.union(Set(words[2]))\n\
    \    unique_chars = unique_chars.union(Set(words[3]))\n    unique_chars = unique_chars.union(Set(words[4]))\n\
    \    unique_chars = unique_chars.union(Set(words[5]))\n    unique_chars = unique_chars.union(Set(words[6]))\n\
    \    unique_chars = unique_chars.union(Set(words[7]))\n    unique_chars = unique_chars.union(Set(words[8]))\n\
    \    unique_chars = unique_chars.union(Set(words[9]))\n    unique_chars = unique_chars.union(Set(words[10]))\n\
    \    unique_chars = unique_chars.union(Set(words[11]))\n    unique_chars = unique_chars.union(Set(words[12]))\n\
    \    unique_chars = unique_chars.union(Set(words[13]))\n    unique_chars = unique_chars.union(Set(words[14]))\n\
    \    unique_chars = unique_chars.union(Set(words[15]))\n    unique_chars = unique_chars.union(Set(words[16]))\n\
    \    unique_chars = unique_chars.union(Set(words[17]))\n    unique_chars = unique_chars.union(Set(words[18]))\n\
    \    unique_chars = unique_chars.union(Set(words[19]))\n    unique_chars = unique_chars.union(Set(words[20]))\n\
    \    unique_chars = unique_chars.union(Set(words[21]))\n    unique_chars = unique_chars.union(Set(words[22]))\n\
    \    unique_chars = unique_chars.union(Set(words[23]))\n    unique_chars = unique_chars.union(Set(words[24]))\n\
    \    unique_chars = unique_chars.union(Set(words[25]))\n    unique_chars = unique_chars.union(Set(words[26]))\n\
    \    unique_chars = unique_chars.union(Set(words[27]))\n    unique_chars = unique_chars.union(Set(words[28]))\n\
    \    unique_chars = unique_chars.union(Set(words[29]))\n    unique_chars = unique_chars.union(Set(words[30]))\n\
    \    unique_chars = unique_chars.union(Set(words[31]))\n    unique_chars = unique_chars.union(Set(words[32]))\n\
    \    unique_chars = unique_chars.union(Set(words[33]))\n    unique_chars = unique_chars.union(Set(words[34]))\n\
    \    unique_chars = unique_chars.union(Set(words[", "    unique_chars = Set()\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_char", "    unique_chars = Set()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(w => w.chars))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.chars.map(c => c.code)))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.chars.map(c => c.utf8)))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.chars.map(c => c.utf8string)))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.chars.map(c => c.utf8string)))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.chars.map(c => c.utf8string)))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.chars.map(c => c.utf8string)))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.chars.map(c => c.utf8string)))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.chars.map(c => c.utf8string)))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.chars.map(c => c.utf8string)))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.chars.map(c => c.utf8string)))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.chars.map(c => c.utf8string)))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.chars.map(c => c.utf8string)))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.chars.map(c => c.utf8string)))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.chars.map(c => c.utf8string)))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.chars.map(c => c.utf8string)))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.chars.map(c => c.utf8string)))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.chars.map(c => c.utf8string)))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.chars.map(c => c.utf8string)))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.chars.map(c => c.utf8string)))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.chars.map(c => c.utf8string)))\n    unique_chars = unique_chars.union(",
  "    unique_chars = Set()\n    word_with_max_chars = \"\"\n    for word in words\n\
    \        unique_chars = unique_chars + Set(word)\n        if length(unique_chars)\
    \ > length(word_with_max_chars)\n            word_with_max_chars = word\n    \
    \    end\n    end\n    return word_with_max_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    find_max([\n    \"apple\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n\
    \    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\"\
    ,\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"\
    banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n\
    \    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\"\
    ,\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"\
    banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n\
    \    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\"\
    ,\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"\
    banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n\
    \    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\"\
    ,\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"\
    banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n\
    \    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\"\
    ,\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"\
    banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n\
    \    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\"\
    ,\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"\
    banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"ban", "  \
    \  \n    unique_chars = Set()\n    \n    for word in words \n        unique_chars\
    \ = unique_chars + Set(word)\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"\\n\")\n    \n    unique_chars = unique_chars - Set(\"\\t\")\n    \n \
    \   unique_chars = unique_chars - Set(\"\\r\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"\\f\")\n    \n    unique_chars = unique_chars - Set(\"\\b\")\n    \n\
    \    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"\\v\")\n    \n    unique_chars = unique_chars - Set(\"\\e\")\n    \n\
    \    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"\\v\")\n    \n    unique_chars = unique_chars - Set(\"\\e\")\n    \n\
    \    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"\\v\")\n    \n    unique_chars = unique_chars - Set(\"\\e\")\n    \n\
    \    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"\\v\")\n    \n    unique_chars = unique_chars - Set(\"\\e\")\n    \n\
    \    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"\\v\")\n    \n    unique_chars = unique_chars - Set(\"\\e\")\n    \n\
    \    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"\\v\")\n    \n    unique_chars = unique_chars - Set(\"\\e\")\n    \n\
    \    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"\\v\")\n    \n    unique_chars = unique_chars - Set(\"\\e\")\n    \n\
    \    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"\\v\")\n    \n    unique_chars = unique_chars - Set(\"\\e\")\n    \n\
    \    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"\\v\")\n    \n    unique_chars = unique_chars - Set(\"\\e\")\n    \n\
    \    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars = ", " \
    \   unique_chars = Set()\n    unique_chars_count = Dict{String,Int}()\n    for\
    \ word in words\n        for char in word\n            if !contains(unique_chars,\
    \ char)\n                unique_chars = union(unique_chars, char)\n          \
    \      unique_chars_count[char] = unique_chars_count[char] + 1\n            end\n\
    \        end\n    end\n    \n    unique_chars_sorted = sort(unique_chars_count)\n\
    \    \n    unique_chars_sorted[1]\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\n\
    \    \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\"\
    , \"world\"\n])\n</cell>\n<text>\nExercise 2\nWrite a function that accepts a\
    \ list of strings and returns the string with maximum length. \nIf multiple strings\
    \ have maximum length, return the one which comes first in lexicographical order.",
  "    unique_chars = Set()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words[1]))\n\
    \    unique_chars = unique_chars.union(Set(words[2]))\n    unique_chars = unique_chars.union(Set(words[3]))\n\
    \    unique_chars = unique_chars.union(Set(words[4]))\n    unique_chars = unique_chars.union(Set(words[5]))\n\
    \    unique_chars = unique_chars.union(Set(words[6]))\n    unique_chars = unique_chars.union(Set(words[7]))\n\
    \    unique_chars = unique_chars.union(Set(words[8]))\n    unique_chars = unique_chars.union(Set(words[9]))\n\
    \    unique_chars = unique_chars.union(Set(words[10]))\n    unique_chars = unique_chars.union(Set(words[11]))\n\
    \    unique_chars = unique_chars.union(Set(words[12]))\n    unique_chars = unique_chars.union(Set(words[13]))\n\
    \    unique_chars = unique_chars.union(Set(words[14]))\n    unique_chars = unique_chars.union(Set(words[15]))\n\
    \    unique_chars = unique_chars.union(Set(words[16]))\n    unique_chars = unique_chars.union(Set(words[17]))\n\
    \    unique_chars = unique_chars.union(Set(words[18]))\n    unique_chars = unique_chars.union(Set(words[19]))\n\
    \    unique_chars = unique_chars.union(Set(words[20]))\n    unique_chars = unique_chars.union(Set(words[21]))\n\
    \    unique_chars = unique_chars.union(Set(words[22]))\n    unique_chars = unique_chars.union(Set(words[23]))\n\
    \    unique_chars = unique_chars.union(Set(words[24]))\n    unique_chars = unique_chars.union(Set(words[25]))\n\
    \    unique_chars = unique_chars.union(Set(words[26]))\n    unique_chars = unique_chars.union(Set(words[27]))\n\
    \    unique_chars = unique_chars.union(Set(words[28]))\n    unique_chars = unique_chars.union(Set(words[29]))\n\
    \    unique_chars = unique_chars.union(Set(words[30]))\n    unique_chars = unique_chars.union(Set(words[31]))\n\
    \    unique_chars = unique_chars.union(Set(words[32]))\n    unique_chars = unique_chars.union(Set(words[33]))\n\
    \    unique_chars = unique_chars.union(Set(words[34]))\n    unique_chars = unique_chars.union(Set(words[",
  "    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n", "    \n    unique_chars\
    \ = Set()\n    \n    for word in words \n        unique_chars = unique_chars |\
    \ Set(word)\n    end\n    \n    unique_chars = unique_chars - Set(\"\\n\")\n \
    \   \n    if length(unique_chars) > length(words)\n        return words[end]\n\
    \    else\n        \n        unique_chars = unique_chars - Set(\"\\n\")\n    \
    \    \n        unique_chars = unique_chars - Set(\"\\n\")\n        \n        unique_chars\
    \ = unique_chars - Set(\"\\n\")\n        \n        unique_chars = unique_chars\
    \ - Set(\"\\n\")\n        \n        unique_chars = unique_chars - Set(\"\\n\"\
    )\n        \n        unique_chars = unique_chars - Set(\"\\n\")\n        \n  \
    \      unique_chars = unique_chars - Set(\"\\n\")\n        \n        unique_chars\
    \ = unique_chars - Set(\"\\n\")\n        \n        unique_chars = unique_chars\
    \ - Set(\"\\n\")\n        \n        unique_chars = unique_chars - Set(\"\\n\"\
    )\n        \n        unique_chars = unique_chars - Set(\"\\n\")\n        \n  \
    \      unique_chars = unique_chars - Set(\"\\n\")\n        \n        unique_chars\
    \ = unique_chars - Set(\"\\n\")\n        \n        unique_chars = unique_chars\
    \ - Set(\"\\n\")\n        \n        unique_chars = unique_chars - Set(\"\\n\"\
    )\n        \n        unique_chars = unique_chars - Set(\"\\n\")\n        \n  \
    \      unique_chars = unique_chars - Set(\"\\n\")\n        \n        unique_chars\
    \ = unique_chars - Set(\"\\n\")\n        \n        unique_chars = unique_chars\
    \ - Set(\"\\n\")\n        \n        unique_chars = unique_chars - Set(\"\\n\"\
    )\n        \n        unique_chars = unique_chars - Set(\"\\n\")\n        \n  \
    \      unique_chars = unique_chars - Set(\"\\n\")\n        \n        unique_chars\
    \ = unique_chars - Set(\"\\n\")\n        \n        unique_chars = unique_chars\
    \ - Set(\"\\n\")\n        \n        unique_chars = unique_chars - Set(\"\\n\"\
    )\n        \n        unique_chars = unique_chars - Set(\"\\n\")\n        \n  \
    \      unique_chars = unique_chars - Set(\"\\n\")\n        \n        unique_chars\
    \ = unique_chars - Set(\"\\n\")\n        \n        unique_chars = unique_chars\
    \ - Set(\"\\n\")\n        \n        unique_chars = unique_chars - Set(\"\\n\"\
    )\n        \n        unique_chars = unique_chars - Set(\"\\n\")\n        \n  \
    \      unique_chars = unique_chars - Set(\"\\n\")\n        \n        unique_chars\
    \ = unique_chars - Set(\"\\n\")\n        \n        unique_chars = unique_chars\
    \ - Set(\"\\n\")\n        \n        unique_chars = unique_chars - Set(\"\\n\"\
    )\n", "    unique_chars = Set()\n    unique_chars_count = Dict()\n    for word\
    \ in words\n        for char in word\n            unique_chars << char\n     \
    \       unique_chars_count[char] = unique_chars_count[char] + 1\n        end\n\
    \    end\n    unique_chars_sorted = sort(unique_chars)\n    unique_chars_count\
    \ = sort(unique_chars_count)\n    \n    unique_chars_count = reverse(unique_chars_count)\n\
    \    \n    unique_chars_count = reverse(unique_chars_count)\n    \n    unique_chars_count\
    \ = reverse(unique_chars_count)\n    \n    unique_chars_count = reverse(unique_chars_count)\n\
    \    \n    unique_chars_count = reverse(unique_chars_count)\n    \n    unique_chars_count\
    \ = reverse(unique_chars_count)\n    \n    unique_chars_count = reverse(unique_chars_count)\n\
    \    \n    unique_chars_count = reverse(unique_chars_count)\n    \n    unique_chars_count\
    \ = reverse(unique_chars_count)\n    \n    unique_chars_count = reverse(unique_chars_count)\n\
    \    \n    unique_chars_count = reverse(unique_chars_count)\n    \n    unique_chars_count\
    \ = reverse(unique_chars_count)\n    \n    unique_chars_count = reverse(unique_chars_count)\n\
    \    \n    unique_chars_count = reverse(unique_chars_count)\n    \n    unique_chars_count\
    \ = reverse(unique_chars_count)\n    \n    unique_chars_count = reverse(unique_chars_count)\n\
    \    \n    unique_chars_count = reverse(unique_chars_count)\n    \n    unique_chars_count\
    \ = reverse(unique_chars_count)\n    \n    unique_chars_count = reverse(unique_chars_count)\n\
    \    \n    unique_chars_count = reverse(unique_chars_count)\n    \n    unique_chars_count\
    \ = reverse(unique_chars_count)\n    \n    unique_chars_count = reverse(unique_chars_count)\n\
    \    \n    unique_chars_count = reverse(unique_chars_count)\n    \n    unique_chars_count\
    \ = reverse(unique_chars_count)\n    \n    unique_chars_count = reverse(unique_chars_count)\n\
    \    \n    unique_chars_count = reverse(unique_chars_count)\n    \n    unique_chars_count\
    \ = reverse(unique_chars_count)\n    \n    unique_chars_count = reverse(unique_chars_count)\n\
    \    \n    unique_chars_count = reverse(unique_chars_count)\n    \n    unique_chars_count\
    \ = reverse(unique_chars_count)\n    \n    unique_chars_count = reverse(unique_chars_count)\n\
    \    \n    unique_chars_count = reverse(unique_chars_count)\n    \n    unique_chars_count\
    \ = reverse(unique_chars_count)\n    \n    unique_chars_count = reverse(unique_chars_count)\n\
    \    \n    unique_chars_count = reverse(unique_chars_count)\n    \n    unique_chars_count\
    \ = reverse(unique_chars_count)\n    \n    unique_chars_count = reverse(unique_chars_count)\n\
    \    \n    unique_chars_count = reverse(unique_chars_count)\n    \n    unique_chars_count\
    \ = reverse(unique_chars_count)\n    \n    unique_chars_count = reverse(unique_chars_count)\n\
    \    \n    unique_chars_", "    unique_chars = Set()\n    unique_chars_count =\
    \ 0\n    \n    for word in words\n        for char in word\n            unique_chars.add(char)\n\
    \            unique_chars_count += 1\n        end\n    end\n    \n    if unique_chars_count\
    \ > unique_chars_count\n        return words[1]\n    else\n        return words[2]\n\
    \    end\nend", "    unique_chars = Set{String}()\n    unique_chars_count = Dict{String,Int}()\n\
    \    for word in words\n        for char in word\n            if !contains(unique_chars,\
    \ char)\n                unique_chars.add(char)\n                unique_chars_count[char]\
    \ = unique_chars_count[char] + 1\n            else\n                if unique_chars_count[char]\
    \ > unique_chars_count[unique_chars.last]\n                    return unique_chars.last\n\
    \                end\n            end\n        end\n    end\n    return unique_chars.last\n\
    end\n</cell>\n<code language=julia-1.5>\nfind_max([\n    \"hello\", \"world\"\
    , \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"\n])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\n    \"hello\", \"world\", \"hello\", \"\
    world\", \"hello\", \"world\", \"hello\", \"world\"\n])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\n    \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"\
    , \"hello\", \"world\"\n])\n</cell>\n<code language=julia-1.5>\nfind_max([\n \
    \   \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\"\
    , \"world\"\n])\n</cell>\n<code language=julia-1.5>\nfind_max([\n    \"hello\"\
    , \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"\n\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\n    \"hello\", \"world\",\
    \ \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"\n])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\n    \"hello\", \"world\", \"hello\", \"\
    world\", \"hello\", \"world\", \"hello\", \"world\"\n])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\n    \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"\
    , \"hello\", \"world\"\n])\n</cell>\n<code language=julia-1.5>\nfind_max([\n \
    \   \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\"\
    , \"world\"\n])\n</cell>\n<code language=julia-1.5>\nfind_max([\n    \"hello\"\
    , \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"\n\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\n    \"hello\", \"world\",\
    \ \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"\n])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\n    \"hello\", \"world\", \"hello\", \"\
    world\", \"hello\", \"world\", \"hello\", \"world\"\n])\n</cell", "    unique_chars\
    \ = Set()\n    unique_chars_count = 0\n    \n    for word in words\n        unique_chars\
    \ = unique_chars + Set(word)\n        unique_chars_count = unique_chars_count\
    \ + length(word)\n    end\n    \n    if unique_chars_count > length(words)\n \
    \       return words[1]\n    else\n        return words[end]\n    end\nend", " \
    \   \n    unique_chars = Set{Char}()\n    \n    for word in words \n        unique_chars\
    \ = unique_chars | Set(word)\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"\\n\")\n    \n    if length(unique_chars) > length(words)\n        return\
    \ words[end]\n    else\n        return find_max(words[1:end])\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nfind_max([\n    \"Hello\",\n    \"World\"\
    ,\n    \"Hello\",\n    \"World\",\n    \"Hello\",\n    \"World\",\n    \"Hello\"\
    ,\n    \"World\",\n    \"Hello\",\n    \"World\",\n    \"Hello\",\n    \"World\"\
    ,\n    \"Hello\",\n    \"World\",\n    \"Hello\",\n    \"World\",\n    \"Hello\"\
    ,\n    \"World\",\n    \"Hello\",\n    \"World\",\n    \"Hello\",\n    \"World\"\
    ,\n    \"Hello\",\n    \"World\",\n    \"Hello\",\n    \"World\",\n    \"Hello\"\
    ,\n    \"World\",\n    \"Hello\",\n    \"World\",\n    \"Hello\",\n    \"World\"\
    ,\n    \"Hello\",\n    \"World\",\n    \"Hello\",\n    \"World\",\n    \"Hello\"\
    ,\n    \"World\",\n    \"Hello\",\n    \"World\",\n    \"Hello\",\n    \"World\"\
    ,\n    \"Hello\",\n    \"World\",\n    \"Hello\",\n    \"World\",\n    \"Hello\"\
    ,\n    \"World\",\n    \"Hello\",\n    \"World\",\n    \"Hello\",\n    \"World\"\
    ,\n    \"Hello\",\n    \"World\",\n    \"Hello\",\n    \"World\",\n    \"Hello\"\
    ,\n    \"World\",\n    \"Hello\",\n    \"World\",\n    \"Hello\",\n    \"World\"\
    ,\n    \"Hello\",\n    \"World\",\n    \"Hello\",\n    \"World\",\n    \"Hello\"\
    ,\n    \"World\",\n    \"Hello\",\n    \"World\",\n    \"Hello\",\n    \"World\"\
    ,\n    \"Hello\",\n    \"World\",\n    \"Hello\",\n    \"World\",\n    \"Hello\"\
    ,\n    \"World\",\n    \"Hello\",\n    \"World\",\n    \"Hello\",\n    \"World\"\
    ,\n    \"Hello\",\n    \"World\",\n    \"Hello\",\n    \"World\",\n    \"Hello\"\
    ,\n    \"World\",\n    \"Hello\",\n    \"World\",\n    \"Hello\",\n    \"World\"\
    ,\n    \"Hello\",\n    \"World\",\n    \"Hello\",\n    \"World\",\n    \"Hello\"\
    ,\n    \"World\",\n    \"Hello\",\n    \"World\",\n    \"Hello\",\n    \"World\"\
    ,\n    \"Hello\",\n    \"World\",\n    \"Hello\",\n    \"World\",\n    \"Hello",
  "    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length).filter(x -> x > 1))\n    unique_chars =\
    \ unique_chars.union(words.map(length).filter(x -> x > 2))\n    unique_chars =\
    \ unique_chars.union(words.map(length).filter(x -> x > 3))\n    unique_chars =\
    \ unique_chars.union(words.map(length).filter(x -> x > 4))\n    unique_chars =\
    \ unique_chars.union(words.map(length).filter(x -> x > 5))\n    unique_chars =\
    \ unique_chars.union(words.map(length).filter(x -> x > 6))\n    unique_chars =\
    \ unique_chars.union(words.map(length).filter(x -> x > 7))\n    unique_chars =\
    \ unique_chars.union(words.map(length).filter(x -> x > 8))\n    unique_chars =\
    \ unique_chars.union(words.map(length).filter(x -> x > 9))\n    unique_chars =\
    \ unique_chars.union(words.map(length).filter(x -> x > 10))\n    unique_chars\
    \ = unique_chars.union(words.map(length).filter(x -> x > 11))\n    unique_chars\
    \ = unique_chars.union(words.map(length).filter(x -> x > 12))\n    unique_chars\
    \ = unique_chars.union(words.map(length).filter(x -> x > 13))\n    unique_chars\
    \ = unique_chars.union(words.map(length).filter(x -> x > 14))\n    unique_chars\
    \ = unique_chars.union(words.map(length).filter(x -> x > 15))\n    unique_chars\
    \ = unique_chars.union(words.map(length).filter(x -> x > 16))\n    unique_chars\
    \ = unique_chars.union(words.map(length).filter(x -> x > 17))\n    unique_chars\
    \ = unique_chars.union(words.map(length).filter(x -> x > 18))\n    unique_chars\
    \ = unique_chars.union(words.map(length).filter(x -> x > 19))\n    unique_chars\
    \ = unique_chars.union(words.map(length).filter(x -> x > 20))\n    unique_chars\
    \ = unique_chars.union(words.map(length).filter(x -> x > 21))\n    unique_chars\
    \ = unique_chars.union(words.map(length).filter(x -> x > 22))\n    unique_chars\
    \ = unique_chars.union(words.map(length).filter(x -> x > 23))\n    unique_chars\
    \ = unique_chars.union(words.map(length).filter(x -> x > 24))\n    unique_chars\
    \ = unique_chars.union(words.map(length).filter(x -> x > 25))\n    unique_chars\
    \ = unique_chars.union(words.map(length).filter(x -> ", "    unique_chars = Set{String}()\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words.map(w\
    \ => w))\n    unique_chars = unique_chars.union(words.map(w => w.reverse))\n \
    \   unique_chars = unique_chars.union(words.map(w => w.reverse.chars))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse.chars.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse.chars.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse.chars.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse.chars.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse.chars.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse.chars.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse.chars.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse.chars.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse.chars.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse.chars.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse.chars.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse.chars.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse.chars.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse.chars.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse.chars.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse.chars.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse.chars.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse.chars.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse.chars.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse.chars.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse.chars.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse.chars.reverse))\n    unique_char",
  "    unique_chars = Set()\n    unique_chars = unique_chars.union(Set(words))\n \
    \   unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    ", "    unique_chars =\
    \ Set()\n    unique_chars_count = 0\n    unique_chars_index = 0\n    unique_chars_index2\
    \ = 0\n    \n    for word in words \n        unique_chars = unique_chars + Set(word)\n\
    \        unique_chars_count = length(unique_chars)\n        unique_chars_index\
    \ = length(unique_chars)\n        unique_chars_index2 = length(unique_chars)\n\
    \    end\n    \n    if unique_chars_count > unique_chars_index\n        return\
    \ words[unique_chars_index]\n    elseif unique_chars_count < unique_chars_index\n\
    \        return words[unique_chars_index2]\n    else\n        return words[unique_chars_index2]\n\
    \    end\nend", "    unique_chars = Set()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_char", "    unique_chars\
    \ = Set{String}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n", "    \n    unique_chars\
    \ = Set{String}()\n    \n    for word in words\n        for char in word\n   \
    \         unique_chars.add(char)\n        end\n    end\n    \n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    \n    if length(unique_chars) > length(words)\n\
    \        return words[end]\n    else\n        return find_max(words[1:end])\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\n    \"hello\",\n\
    \    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\"\
    ,\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\"\
    ,\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\"\
    ,\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\"\
    ,\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\"\
    ,\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\"\
    ,\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\"\
    ,\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\"\
    ,\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\"\
    ,\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\"\
    ,\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\"\
    ,\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\"\
    ,\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\"\
    ,\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\"\
    ,\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\"\
    ,\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\"\
    ,\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\"\
    ,\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\"\
    ,\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\"\
    ,\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\"\
    ,\n    \"world\",\n    \"hello\",\n    \"world\",\n    \"hello\",\n    \"world\"\
    ,\n", "    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n", "    unique_chars = Set{Char}()\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(word",
  "    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_", "    unique_chars\
    \ = Set{Char}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(words.map(w => w[1]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[2]))\n    unique_chars = unique_chars.union(words.map(w => w[3]))\n   \
    \ unique_chars = unique_chars.union(words.map(w => w[4]))\n    unique_chars =\
    \ unique_chars.union(words.map(w => w[5]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[6]))\n    unique_chars = unique_chars.union(words.map(w => w[7]))\n   \
    \ unique_chars = unique_chars.union(words.map(w => w[8]))\n    unique_chars =\
    \ unique_chars.union(words.map(w => w[9]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[10]))\n    unique_chars = unique_chars.union(words.map(w => w[11]))\n \
    \   unique_chars = unique_chars.union(words.map(w => w[12]))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w[13]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[14]))\n    unique_chars = unique_chars.union(words.map(w => w[15]))\n \
    \   unique_chars = unique_chars.union(words.map(w => w[16]))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w[17]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[18]))\n    unique_chars = unique_chars.union(words.map(w => w[19]))\n \
    \   unique_chars = unique_chars.union(words.map(w => w[20]))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w[21]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[22]))\n    unique_chars = unique_chars.union(words.map(w => w[23]))\n \
    \   unique_chars = unique_chars.union(words.map(w => w[24]))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w[25]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[26]))\n    unique_chars = unique_chars.union(words.map(w => w[27]))\n \
    \   unique_chars = unique_chars.union(words.map(w => w[28]))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w[29]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w", "    \n    unique_chars = Set()\n    \n    for w in words\n        unique_chars\
    \ = unique_chars | Set(w)\n    end\n    \n    unique_chars = unique_chars - Set(\"\
    \\n\")\n    \n    if length(unique_chars) == 0\n        return \"\\n\"\n    end\n\
    \    \n    unique_chars = unique_chars - Set(\"\\n\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"\\n\"\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"\\n\")\n    \n    if length(unique_chars) == 0\n        return \"\\\
    n\"\n    end\n    \n    unique_chars = unique_chars - Set(\"\\n\")\n    \n   \
    \ if length(unique_chars) == 0\n        return \"\\n\"\n    end\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\n\")\n    \n    if length(unique_chars) == 0\n    \
    \    return \"\\n\"\n    end\n    \n    unique_chars = unique_chars - Set(\"\\\
    n\")\n    \n    if length(unique_chars) == 0\n        return \"\\n\"\n    end\n\
    \    \n    unique_chars = unique_chars - Set(\"\\n\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"\\n\"\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"\\n\")\n    \n    if length(unique_chars) == 0\n        return \"\\\
    n\"\n    end\n    \n    unique_chars = unique_chars - Set(\"\\n\")\n    \n   \
    \ if length(unique_chars) == 0\n        return \"\\n\"\n    end\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\n\")\n    \n    if length(unique_chars) == 0\n    \
    \    return \"\\n\"\n    end\n    \n    unique_chars = unique_chars - Set(\"\\\
    n\")\n    \n    if length(unique_chars) == 0\n        return \"\\n\"\n    end\n\
    \    \n    unique_chars = unique_chars - Set(\"\\n\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"\\n\"\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"\\n\")\n    \n    if length(unique_chars) == 0\n        return \"\\\
    n\"\n    end\n    \n    unique_chars = unique_chars - Set(\"\\n\")\n    \n   \
    \ if length(unique_chars) == 0\n        return \"\\n\"\n    end\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\n\")\n    \n    if length(unique_chars) == 0\n    \
    \    return \"\\n\"\n    end\n    \n    unique_chars = unique_chars - Set(\"\\\
    n\")\n    \n    if length(unique_chars) == 0\n        return \"\\n\"\n    end\n\
    \    \n    unique_chars = unique_chars - Set(\"\\n\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"\\n\"\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"\\n\")\n    \n    if length(unique_chars) == 0\n        return \"\\\
    n\"\n    end", "    \n    unique_chars = Set{Char}()\n    \n    for word in words\
    \ \n        unique_chars |= Set(word)\n    end\n    \n    if length(unique_chars)\
    \ > length(words)\n        return words[end]\n    end\n    \n    unique_chars\
    \ = sort(unique_chars)\n    \n    unique_chars = unique_chars[end:end]\n    \n\
    \    unique_chars = unique_chars[end:end]\n    \n    unique_chars = unique_chars[end:end]\n\
    \    \n    unique_chars = unique_chars[end:end]\n    \n    unique_chars = unique_chars[end:end]\n\
    \    \n    unique_chars = unique_chars[end:end]\n    \n    unique_chars = unique_chars[end:end]\n\
    \    \n    unique_chars = unique_chars[end:end]\n    \n    unique_chars = unique_chars[end:end]\n\
    \    \n    unique_chars = unique_chars[end:end]\n    \n    unique_chars = unique_chars[end:end]\n\
    \    \n    unique_chars = unique_chars[end:end]\n    \n    unique_chars = unique_chars[end:end]\n\
    \    \n    unique_chars = unique_chars[end:end]\n    \n    unique_chars = unique_chars[end:end]\n\
    \    \n    unique_chars = unique_chars[end:end]\n    \n    unique_chars = unique_chars[end:end]\n\
    \    \n    unique_chars = unique_chars[end:end]\n    \n    unique_chars = unique_chars[end:end]\n\
    \    \n    unique_chars = unique_chars[end:end]\n    \n    unique_chars = unique_chars[end:end]\n\
    \    \n    unique_chars = unique_chars[end:end]\n    \n    unique_chars = unique_chars[end:end]\n\
    \    \n    unique_chars = unique_chars[end:end]\n    \n    unique_chars = unique_chars[end:end]\n\
    \    \n    unique_chars = unique_chars[end:end]\n    \n    unique_chars = unique_chars[end:end]\n\
    \    \n    unique_chars = unique_chars[end:end]\n    \n    unique_chars = unique_chars[end:end]\n\
    \    \n    unique_chars = unique_chars[end:end]\n    \n    unique_chars = unique_chars[end:end]\n\
    \    \n    unique_chars = unique_chars[end:end]\n    \n    unique_chars = unique_chars[end:end]\n\
    \    \n    unique_chars = unique_chars[end:end]\n    \n    unique_chars = unique_chars[end:end]\n\
    \    \n    unique_chars = unique_chars[end:end]\n    \n    unique_chars = unique_chars[end:end]\n\
    \    \n    unique_chars = unique_chars[end:end]\n", "    unique_chars = Set()\n\
    \    unique_chars_count = Set()\n    unique_chars_count_max = Set()\n    unique_chars_count_max_index\
    \ = Set()\n    unique_chars_count_max_index2 = Set()\n    unique_chars_count_max_index3\
    \ = Set()\n    unique_chars_count_max_index4 = Set()\n    unique_chars_count_max_index5\
    \ = Set()\n    unique_chars_count_max_index6 = Set()\n    unique_chars_count_max_index7\
    \ = Set()\n    unique_chars_count_max_index8 = Set()\n    unique_chars_count_max_index9\
    \ = Set()\n    unique_chars_count_max_index10 = Set()\n    unique_chars_count_max_index11\
    \ = Set()\n    unique_chars_count_max_index12 = Set()\n    unique_chars_count_max_index13\
    \ = Set()\n    unique_chars_count_max_index14 = Set()\n    unique_chars_count_max_index15\
    \ = Set()\n    unique_chars_count_max_index16 = Set()\n    unique_chars_count_max_index17\
    \ = Set()\n    unique_chars_count_max_index18 = Set()\n    unique_chars_count_max_index19\
    \ = Set()\n    unique_chars_count_max_index20 = Set()\n    unique_chars_count_max_index21\
    \ = Set()\n    unique_chars_count_max_index22 = Set()\n    unique_chars_count_max_index23\
    \ = Set()\n    unique_chars_count_max_index24 = Set()\n    unique_chars_count_max_index25\
    \ = Set()\n    unique_chars_count_max_index26 = Set()\n    unique_chars_count_max_index27\
    \ = Set()\n    unique_chars_count_max_index28 = Set()\n    unique_chars_count_max_index29\
    \ = Set()\n    unique_chars_count_max_index30 = Set()\n    unique_chars_count_max_index31\
    \ = Set()\n    unique_chars_count_max_index32 = Set()\n    unique_chars_count_max_index33\
    \ = Set()\n    unique_chars_count_max_index34 = Set()\n    unique_chars_count_max_index35\
    \ = Set()\n    unique_chars_count_max_index36 = Set()\n    unique_chars_count_max_index37\
    \ = Set()\n    unique_chars_count_max_index38 = Set()\n    unique_chars_count_max_index39\
    \ = Set()\n    unique_chars_count_max_index40 = Set()\n    unique_chars_count_max_index41\
    \ = Set()\n    unique_chars_count_max_index42 = Set()\n    unique_chars_count_max_index43\
    \ = Set()\n    unique_chars_count_max_index44 = Set()\n    unique_chars_count_max_index45\
    \ = Set()\n    unique_chars_count_max_index46 = ", "    unique_chars = Set{Char}()\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_", "    \n    unique_chars = Set{Char}(\"\")\n    \n    for word in\
    \ words\n        for char in word\n            unique_chars.add(char)\n      \
    \  end\n    end\n    \n    unique_chars = unique_chars - Set{Char}(\"\")\n   \
    \ \n    unique_chars = unique_chars - Set{Char}(\"\\n\")\n    \n    unique_chars\
    \ = unique_chars - Set{Char}(\"\\r\")\n    \n    unique_chars = unique_chars -\
    \ Set{Char}(\"\\t\")\n    \n    unique_chars = unique_chars - Set{Char}(\"\\v\"\
    )\n    \n    unique_chars = unique_chars - Set{Char}(\"\\f\")\n    \n    unique_chars\
    \ = unique_chars - Set{Char}(\"\\b\")\n    \n    unique_chars = unique_chars -\
    \ Set{Char}(\"\\\\\")\n    \n    unique_chars = unique_chars - Set{Char}(\"'\"\
    )\n    \n    unique_chars = unique_chars - Set{Char}(\"\\\"\")\n    \n    unique_chars\
    \ = unique_chars - Set{Char}(\"\\\\\")\n    \n    unique_chars = unique_chars\
    \ - Set{Char}(\"`\")\n    \n    unique_chars = unique_chars - Set{Char}(\"$\"\
    )\n    \n    unique_chars = unique_chars - Set{Char}(\"%\")\n    \n    unique_chars\
    \ = unique_chars - Set{Char}(\"&\")\n    \n    unique_chars = unique_chars - Set{Char}(\"\
    *\")\n    \n    unique_chars = unique_chars - Set{Char}(\"(\")\n    \n    unique_chars\
    \ = unique_chars - Set{Char}(\")\")\n    \n    unique_chars = unique_chars - Set{Char}(\"\
    +\")\n    \n    unique_chars = unique_chars - Set{Char}(\",\")\n    \n    unique_chars\
    \ = unique_chars - Set{Char}(\"-\")\n    \n    unique_chars = unique_chars - Set{Char}(\"\
    .\")\n    \n    unique_chars = unique_chars - Set{Char}(\":\")\n    \n    unique_chars\
    \ = unique_chars - Set{Char}(\";\")\n    \n    unique_chars = unique_chars - Set{Char}(\"\
    <\")\n    \n    unique_chars = unique_chars - Set{Char}(\">\")\n    \n    unique_chars\
    \ = unique_chars - Set{Char}(\"=\")\n    \n    unique_chars = unique_chars - Set{Char}(\"\
    ?\")\n    \n    unique_chars = unique_chars - Set{Char}(\"@\")\n    \n    ", " \
    \   unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.keys() \n    unique_chars = unique_chars.sort\n\
    \    unique_chars = unique_chars[1]\n    return unique_chars\nend", "    \n  \
    \  unique_chars = Set{String}()\n    \n    for word in words \n        unique_chars\
    \ = unique_chars + Set{String}(word)\n    end\n    \n    unique_chars = unique_chars\
    \ - Set{String}()\n    \n    if length(unique_chars) > length(words)\n       \
    \ return words[end]\n    else\n        return find_max(words[1:end])\n    end\n\
    end", "    \n    unique_chars = Set{String}()\n    \n    for word in words \n\
    \        unique_chars = unique_chars + Set(word)\n    end\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\n\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\t\")\n    \n    unique_chars = unique_chars - Set(\"\\r\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\f\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\b\")\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\v\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\e\")\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\a\")\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\a\")\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\a\")\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\a\")\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\a\")\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\a\")\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\a\")\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    \n    unique_chars = unique_chars - Set(\"\
    \\a\")\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    \n    unique_char", "    unique_chars = Set()\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(Set(words[1]))\n\
    \    unique_chars = unique_chars.union(Set(words[2]))\n    unique_chars = unique_chars.union(Set(words[3]))\n\
    \    unique_chars = unique_chars.union(Set(words[4]))\n    unique_chars = unique_chars.union(Set(words[5]))\n\
    \    unique_chars = unique_chars.union(Set(words[6]))\n    unique_chars = unique_chars.union(Set(words[7]))\n\
    \    unique_chars = unique_chars.union(Set(words[8]))\n    unique_chars = unique_chars.union(Set(words[9]))\n\
    \    unique_chars = unique_chars.union(Set(words[10]))\n    unique_chars = unique_chars.union(Set(words[11]))\n\
    \    unique_chars = unique_chars.union(Set(words[12]))\n    unique_chars = unique_chars.union(Set(words[13]))\n\
    \    unique_chars = unique_chars.union(Set(words[14]))\n    unique_chars = unique_chars.union(Set(words[15]))\n\
    \    unique_chars = unique_chars.union(Set(words[16]))\n    unique_chars = unique_chars.union(Set(words[17]))\n\
    \    unique_chars = unique_chars.union(Set(words[18]))\n    unique_chars = unique_chars.union(Set(words[19]))\n\
    \    unique_chars = unique_chars.union(Set(words[20]))\n    unique_chars = unique_chars.union(Set(words[21]))\n\
    \    unique_chars = unique_chars.union(Set(words[22]))\n    unique_chars = unique_chars.union(Set(words[23]))\n\
    \    unique_chars = unique_chars.union(Set(words[24]))\n    unique_chars = unique_chars.union(Set(words[25]))\n\
    \    unique_chars = unique_chars.union(Set(words[26]))\n    unique_chars = unique_chars.union(Set(words[27]))\n\
    \    unique_chars = unique_chars.union(Set(words[28]))\n    unique_chars = unique_chars.union(Set(words[29]))\n\
    \    unique_chars = unique_chars.union(Set(words[30]))\n    unique_chars = unique_chars.union(Set(words[31]))\n\
    \    unique_chars = unique_chars.union(Set(words[32]))\n    unique_chars = unique_chars.union(Set(words[33]))\n\
    \    unique_chars = unique_chars.union(Set(words[34]))\n    unique_chars = unique_chars.union(Set(words[35]))\n\
    \    unique_chars = unique_chars.union(Set(", "    \n    unique_chars = Set()\n\
    \    \n    for word in words \n        for char in word\n            unique_chars.add(char)\n\
    \        end\n    end\n    \n    unique_chars = unique_chars - Set(\"\\n\")\n\
    \    \n    if length(unique_chars) > length(words)\n        return words[end]\n\
    \    else\n        unique_chars = unique_chars - Set(\"\\n\")\n        \n    \
    \    unique_chars = unique_chars - Set(\"\\n\")\n        \n        unique_chars\
    \ = unique_chars - Set(\"\\n\")\n        \n        unique_chars = unique_chars\
    \ - Set(\"\\n\")\n        \n        unique_chars = unique_chars - Set(\"\\n\"\
    )\n        \n        unique_chars = unique_chars - Set(\"\\n\")\n        \n  \
    \      unique_chars = unique_chars - Set(\"\\n\")\n        \n        unique_chars\
    \ = unique_chars - Set(\"\\n\")\n        \n        unique_chars = unique_chars\
    \ - Set(\"\\n\")\n        \n        unique_chars = unique_chars - Set(\"\\n\"\
    )\n        \n        unique_chars = unique_chars - Set(\"\\n\")\n        \n  \
    \      unique_chars = unique_chars - Set(\"\\n\")\n        \n        unique_chars\
    \ = unique_chars - Set(\"\\n\")\n        \n        unique_chars = unique_chars\
    \ - Set(\"\\n\")\n        \n        unique_chars = unique_chars - Set(\"\\n\"\
    )\n        \n        unique_chars = unique_chars - Set(\"\\n\")\n        \n  \
    \      unique_chars = unique_chars - Set(\"\\n\")\n        \n        unique_chars\
    \ = unique_chars - Set(\"\\n\")\n        \n        unique_chars = unique_chars\
    \ - Set(\"\\n\")\n        \n        unique_chars = unique_chars - Set(\"\\n\"\
    )\n        \n        unique_chars = unique_chars - Set(\"\\n\")\n        \n  \
    \      unique_chars = unique_chars - Set(\"\\n\")\n        \n        unique_chars\
    \ = unique_chars - Set(\"\\n\")\n        \n        unique_chars = unique_chars\
    \ - Set(\"\\n\")\n        \n        unique_chars = unique_chars - Set(\"\\n\"\
    )\n        \n        unique_chars = unique_chars - Set(\"\\n\")\n        \n  \
    \      unique_chars = unique_chars - Set(\"\\n\")\n        \n        unique_chars\
    \ = unique_chars - Set(\"\\n\")\n        \n        unique_chars = unique_chars\
    \ - Set(\"\\n\")\n        \n        unique_chars = unique_chars - Set(\"\\n\"\
    )\n        \n        unique_chars = unique_chars - Set(\"\\n\")\n        \n  \
    \      unique_chars = unique_chars - Set(\"\\n\")\n        \n        unique_chars\
    \ = unique_chars - Set(\"\\n\")\n        \n        unique_chars = unique_chars\
    \ - Set(\"\\n\")\n        \n        unique_chars = unique_chars - Set(\"\\n\"\
    )\n", "    unique_chars = Set()\n    for word in words \n        unique_chars\
    \ = unique_chars + Set(word)\n    end\n    unique_chars = unique_chars - Set(\"\
    a\")\n    unique_chars = unique_chars - Set(\"A\")\n    unique_chars = unique_chars\
    \ - Set(\"0\")\n    unique_chars = unique_chars - Set(\"9\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\".\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_char",
  "    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_", "    unique_chars\
    \ = Set()\n    unique_chars_count = 0\n    \n    for word in words \n        unique_chars\
    \ = unique_chars + Set(word)\n        unique_chars_count = length(unique_chars)\n\
    \    end\n    \n    if unique_chars_count > length(words)\n        return words[1]\n\
    \    else\n        return words[end]\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    find_max([\n    \"apple\", \"banana\", \"apple\", \"apple\", \"banana\", \"banana\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"banana\", \"banana\", \"banana\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
    , \"apple\", \"apple\", \"apple\", \"apple\", \"apple", "    \n    unique_chars\
    \ = Set()\n    \n    for word in words\n        unique_chars = unique_chars |\
    \ Set(word)\n    end\n    \n    unique_chars = unique_chars - Set(\"\\n\")\n \
    \   \n    if length(unique_chars) > length(words)\n        \n        unique_chars\
    \ = unique_chars - Set(\"\\n\")\n        \n        unique_chars = unique_chars\
    \ - Set(\"\\n\")\n        \n        unique_chars = unique_chars - Set(\"\\n\"\
    )\n        \n        unique_chars = unique_chars - Set(\"\\n\")\n        \n  \
    \      unique_chars = unique_chars - Set(\"\\n\")\n        \n        unique_chars\
    \ = unique_chars - Set(\"\\n\")\n        \n        unique_chars = unique_chars\
    \ - Set(\"\\n\")\n        \n        unique_chars = unique_chars - Set(\"\\n\"\
    )\n        \n        unique_chars = unique_chars - Set(\"\\n\")\n        \n  \
    \      unique_chars = unique_chars - Set(\"\\n\")\n        \n        unique_chars\
    \ = unique_chars - Set(\"\\n\")\n        \n        unique_chars = unique_chars\
    \ - Set(\"\\n\")\n        \n        unique_chars = unique_chars - Set(\"\\n\"\
    )\n        \n        unique_chars = unique_chars - Set(\"\\n\")\n        \n  \
    \      unique_chars = unique_chars - Set(\"\\n\")\n        \n        unique_chars\
    \ = unique_chars - Set(\"\\n\")\n        \n        unique_chars = unique_chars\
    \ - Set(\"\\n\")\n        \n        unique_chars = unique_chars - Set(\"\\n\"\
    )\n        \n        unique_chars = unique_chars - Set(\"\\n\")\n        \n  \
    \      unique_chars = unique_chars - Set(\"\\n\")\n        \n        unique_chars\
    \ = unique_chars - Set(\"\\n\")\n        \n        unique_chars = unique_chars\
    \ - Set(\"\\n\")\n        \n        unique_chars = unique_chars - Set(\"\\n\"\
    )\n        \n        unique_chars = unique_chars - Set(\"\\n\")\n        \n  \
    \      unique_chars = unique_chars - Set(\"\\n\")\n        \n        unique_chars\
    \ = unique_chars - Set(\"\\n\")\n        \n        unique_chars = unique_chars\
    \ - Set(\"\\n\")\n        \n        unique_chars = unique_chars - Set(\"\\n\"\
    )\n        \n        unique_chars = unique_chars - Set(\"\\n\")\n        \n  \
    \      unique_chars = unique_chars - Set(\"\\n\")\n        \n        unique_chars\
    \ = unique_chars - Set(\"\\n\")\n        \n        unique_chars = unique_chars\
    \ - Set(\"\\n\")\n        \n        unique_chars = unique_chars - Set(\"\\n\"\
    )\n        \n        unique_chars = unique_chars - Set(\"\\n\")\n        \n  \
    \      unique_chars = unique_chars - Set(\"\\n\")\n        \n        unique_chars\
    \ = unique_", "    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n", "    unique_chars = Set{String}()\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words[1])\n\
    \    unique_chars = unique_chars.union(words[2])\n    unique_chars = unique_chars.union(words[3])\n\
    \    unique_chars = unique_chars.union(words[4])\n    unique_chars = unique_chars.union(words[5])\n\
    \    unique_chars = unique_chars.union(words[6])\n    unique_chars = unique_chars.union(words[7])\n\
    \    unique_chars = unique_chars.union(words[8])\n    unique_chars = unique_chars.union(words[9])\n\
    \    unique_chars = unique_chars.union(words[10])\n    unique_chars = unique_chars.union(words[11])\n\
    \    unique_chars = unique_chars.union(words[12])\n    unique_chars = unique_chars.union(words[13])\n\
    \    unique_chars = unique_chars.union(words[14])\n    unique_chars = unique_chars.union(words[15])\n\
    \    unique_chars = unique_chars.union(words[16])\n    unique_chars = unique_chars.union(words[17])\n\
    \    unique_chars = unique_chars.union(words[18])\n    unique_chars = unique_chars.union(words[19])\n\
    \    unique_chars = unique_chars.union(words[20])\n    unique_chars = unique_chars.union(words[21])\n\
    \    unique_chars = unique_chars.union(words[22])\n    unique_chars = unique_chars.union(words[23])\n\
    \    unique_chars = unique_chars.union(words[24])\n    unique_chars = unique_chars.union(words[25])\n\
    \    unique_chars = unique_chars.union(words[26])\n    unique_chars = unique_chars.union(words[27])\n\
    \    unique_chars = unique_chars.union(words[28])\n    unique_chars = unique_chars.union(words[29])\n\
    \    unique_chars = unique_chars.union(words[30])\n    unique_chars = unique_chars.union(words[31])\n\
    \    unique_chars = unique_chars.union(words[32])\n    unique_chars = unique_chars.union(words[33])\n\
    \    unique_chars = unique_chars.union(words[34])\n    unique_chars = unique_chars.union(words[35])\n\
    \    unique_chars = unique_chars.union(words[36])\n    unique_chars = unique_chars.union(words[37])\n\
    \    unique_chars = unique_chars.union(words[38])\n    unique_chars = unique_chars.union(word",
  "    \n    unique_chars = Set()\n    \n    for w in words\n        unique_chars\
    \ = unique_chars | Set(w)\n    end\n    \n    unique_chars = unique_chars - Set(\"\
    \\n\")\n    \n    if length(unique_chars) == 0\n        return \"\\n\"\n    end\n\
    \    \n    unique_chars = unique_chars - Set(\"\\t\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"\\t\"\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"\\r\")\n    \n    if length(unique_chars) == 0\n        return \"\\\
    r\"\n    end\n    \n    unique_chars = unique_chars - Set(\"\\f\")\n    \n   \
    \ if length(unique_chars) == 0\n        return \"\\f\"\n    end\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\b\")\n    \n    if length(unique_chars) == 0\n    \
    \    return \"\\b\"\n    end\n    \n    unique_chars = unique_chars - Set(\"\\\
    a\")\n    \n    if length(unique_chars) == 0\n        return \"\\a\"\n    end\n\
    \    \n    unique_chars = unique_chars - Set(\"\\v\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"\\v\"\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"\\e\")\n    \n    if length(unique_chars) == 0\n        return \"\\\
    e\"\n    end\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n   \
    \ if length(unique_chars) == 0\n        return \"\\a\"\n    end\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    \n    if length(unique_chars) == 0\n    \
    \    return \"\\a\"\n    end\n    \n    unique_chars = unique_chars - Set(\"\\\
    a\")\n    \n    if length(unique_chars) == 0\n        return \"\\a\"\n    end\n\
    \    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"\\a\"\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"\\a\")\n    \n    if length(unique_chars) == 0\n        return \"\\\
    a\"\n    end\n    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n   \
    \ if length(unique_chars) == 0\n        return \"\\a\"\n    end\n    \n    unique_chars\
    \ = unique_chars - Set(\"\\a\")\n    \n    if length(unique_chars) == 0\n    \
    \    return \"\\a\"\n    end\n    \n    unique_chars = unique_chars - Set(\"\\\
    a\")\n    \n    if length(unique_chars) == 0\n        return \"\\a\"\n    end\n\
    \    \n    unique_chars = unique_chars - Set(\"\\a\")\n    \n    if length(unique_",
  "    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words[1])\n    unique_chars = unique_chars.union(words[2])\n\
    \    unique_chars = unique_chars.union(words[3])\n    unique_chars = unique_chars.union(words[4])\n\
    \    unique_chars = unique_chars.union(words[5])\n    unique_chars = unique_chars.union(words[6])\n\
    \    unique_chars = unique_chars.union(words[7])\n    unique_chars = unique_chars.union(words[8])\n\
    \    unique_chars = unique_chars.union(words[9])\n    unique_chars = unique_chars.union(words[10])\n\
    \    unique_chars = unique_chars.union(words[11])\n    unique_chars = unique_chars.union(words[12])\n\
    \    unique_chars = unique_chars.union(words[13])\n    unique_chars = unique_chars.union(words[14])\n\
    \    unique_chars = unique_chars.union(words[15])\n    unique_chars = unique_chars.union(words[16])\n\
    \    unique_chars = unique_chars.union(words[17])\n    unique_chars = unique_chars.union(words[18])\n\
    \    unique_chars = unique_chars.union(words[19])\n    unique_chars = unique_chars.union(words[20])\n\
    \    unique_chars = unique_chars.union(words[21])\n    unique_chars = unique_chars.union(words[22])\n\
    \    unique_chars = unique_chars.union(words[23])\n    unique_chars = unique_chars.union(words[24])\n\
    \    unique_chars = unique_chars.union(words[25])\n    unique_chars = unique_chars.union(words[26])\n\
    \    unique_chars = unique_chars.union(words[27])\n    unique_chars = unique_chars.union(words[28])\n\
    \    unique_chars = unique_chars.union(words[29])\n    unique_chars = unique_chars.union(words[30])\n\
    \    unique_chars = unique_chars.union(words[31])\n    unique_chars = unique_chars.union(words[32])\n\
    \    unique_chars = unique_chars.union(words[33])\n    unique_chars = unique_chars.union(words[34])\n\
    \    unique_chars = unique_chars.union(words[35])\n    unique_chars = unique_chars.union(words[36])\n\
    \    unique_chars = unique_chars.union(words[37])\n    unique_chars = unique_chars.union(words[38])\n\
    \    unique_chars = unique_chars.union(word", "    unique_chars = Set{String}()\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words[1]))\n    unique_chars = unique_chars.union(Set(words[2]))\n\
    \    unique_chars = unique_chars.union(Set(words[3]))\n    unique_chars = unique_chars.union(Set(words[4]))\n\
    \    unique_chars = unique_chars.union(Set(words[5]))\n    unique_chars = unique_chars.union(Set(words[6]))\n\
    \    unique_chars = unique_chars.union(Set(words[7]))\n    unique_chars = unique_chars.union(Set(words[8]))\n\
    \    unique_chars = unique_chars.union(Set(words[9]))\n    unique_chars = unique_chars.union(Set(words[10]))\n\
    \    unique_chars = unique_chars.union(Set(words[11]))\n    unique_chars = unique_chars.union(Set(words[12]))\n\
    \    unique_chars = unique_chars.union(Set(words[13]))\n    unique_chars = unique_chars.union(Set(words[14]))\n\
    \    unique_chars = unique_chars.union(Set(words[15]))\n    unique_chars = unique_chars.union(Set(words[16]))\n\
    \    unique_chars = unique_chars.union(Set(words[17]))\n    unique_chars = unique_chars.union(Set(words[18]))\n\
    \    unique_chars = unique_chars.union(Set(words[19]))\n    unique_chars = unique_chars.union(Set(words[20]))\n\
    \    unique_chars = unique_chars.union(Set(words[21]))\n    unique_chars = unique_chars.union(Set(words[22]))\n\
    \    unique_chars = unique_chars.union(Set(words[23]))\n    unique_chars = unique_chars.union(Set(words[24]))\n\
    \    unique_chars = unique_chars.union(Set(words[25]))\n    unique_chars = unique_chars.union(Set(words[26]))\n\
    \    unique_chars = unique_chars.union(Set(words[27]))\n    unique_chars = unique_chars.union(Set(words[28]))\n\
    \    unique_chars = unique_chars.union(Set(words[29]))\n    unique_chars = unique_chars.union(Set(words[30]))\n\
    \    unique_chars = unique_chars.union(Set(words[31]))\n    unique_chars = unique_chars.union(Set(words[32]))\n\
    \    unique_chars = unique_chars.union(Set(words[33]))\n    unique_chars = unique_chars.union(Set(words[34]))\n\
    \    unique_chars = unique_chars.union(", "    \n    unique_chars = Set()\n  \
    \  \n    for word in words\n        for char in word\n            unique_chars.add(char)\n\
    \        end\n    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n  \
    \  unique_chars = unique_chars - Set(\"e\")\n    unique_chars = unique_chars -\
    \ Set(\"i\")\n    unique_chars = unique_chars - Set(\"o\")\n    unique_chars =\
    \ unique_chars - Set(\"u\")\n    \n    if length(unique_chars) > length(words)\n\
    \        return words[1]\n    else\n        return words[end]\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nfind_max([\n    \"apple\",\n    \"banana\"\
    ,\n    \"carrot\",\n    \"dog\",\n    \"elephant\",\n    \"fish\",\n    \"goat\"\
    ,\n    \"horse\",\n    \"kangaroo\",\n    \"lion\",\n    \"monkey\",\n    \"pig\"\
    ,\n    \"piglet\",\n    \"rabbit\",\n    \"snake\",\n    \"tiger\",\n    \"turtle\"\
    ,\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"\
    turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n\
    \    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\"\
    ,\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"\
    turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n\
    \    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\"\
    ,\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"\
    turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n\
    \    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\"\
    ,\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"\
    turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n\
    \    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\"\
    ,\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"\
    turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n\
    \    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\"\
    ,\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"turtle\",\n    \"\
    turtle\",", "    unique_chars = Set()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_", " \
    \   unique_chars = Set{Char}()\n    unique_chars_count = Counter()\n    for word\
    \ in words\n        for char in word\n            unique_chars.add(char)\n   \
    \         unique_chars_count[char] +=1\n    end\n    \n    unique_chars_count.sort!\n\
    \    \n    if unique_chars_count[unique_chars[1]] > unique_chars_count[unique_chars[2]]\n\
    \        return unique_chars[1]\n    else\n        return unique_chars[2]\n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\n    \"apple\",\n\
    \    \"apple\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\"\
    ,\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"\
    banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n\
    \    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\"\
    ,\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"\
    banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n\
    \    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\"\
    ,\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"\
    banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n\
    \    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\"\
    ,\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"\
    banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n\
    \    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\"\
    ,\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"\
    banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n\
    \    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\"\
    ,\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"banana\",\n    \"\
    banana\",\n    \"banana\",\n    \"banana", "    unique_chars = Set()\n    unique_chars_count\
    \ = Dict()\n    for word in words\n        unique_chars = unique_chars + Set(word)\n\
    \        unique_chars_count[word] = length(unique_chars)\n    end\n    \n    unique_chars_count\
    \ = sort(unique_chars_count, by=x->x[1])\n    \n    unique_chars_count[end][1]\n\
    end\n</cell>\n<code language=julia-1.5>\nfind_max([\"hello\", \"world\", \"hello\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"hello\", \"world\", \"hello\"\
    , \"hello\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"hello\", \"world\"\
    , \"hello\", \"hello\", \"hello\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    hello\", \"world\", \"hello\", \"hello\", \"hello\", \"hello\"])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_max([\"hello\", \"world\", \"hello\", \"hello\", \"\
    hello\", \"hello\", \"hello\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    hello\", \"world\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"\
    hello\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"hello\", \"world\"\
    , \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"hello\", \"world\", \"hello\"\
    , \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"hello\", \"world\", \"hello\"\
    , \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\"\
    , \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\"\
    , \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\"\
    , \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\"\
    , \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\"\
    , \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\"\
    , \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\"\
    , \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\"\
    , \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\"\
    , \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\"\
    , \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\"\
    , \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\"\
    , \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\"\
    , \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\"\
    , \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"", "    unique_chars\
    \ = Set{String}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(words[1])\n    unique_chars = unique_chars.union(words[2])\n\
    \    unique_chars = unique_chars.union(words[3])\n    unique_chars = unique_chars.union(words[4])\n\
    \    unique_chars = unique_chars.union(words[5])\n    unique_chars = unique_chars.union(words[6])\n\
    \    unique_chars = unique_chars.union(words[7])\n    unique_chars = unique_chars.union(words[8])\n\
    \    unique_chars = unique_chars.union(words[9])\n    unique_chars = unique_chars.union(words[10])\n\
    \    unique_chars = unique_chars.union(words[11])\n    unique_chars = unique_chars.union(words[12])\n\
    \    unique_chars = unique_chars.union(words[13])\n    unique_chars = unique_chars.union(words[14])\n\
    \    unique_chars = unique_chars.union(words[15])\n    unique_chars = unique_chars.union(words[16])\n\
    \    unique_chars = unique_chars.union(words[17])\n    unique_chars = unique_chars.union(words[18])\n\
    \    unique_chars = unique_chars.union(words[19])\n    unique_chars = unique_chars.union(words[20])\n\
    \    unique_chars = unique_chars.union(words[21])\n    unique_chars = unique_chars.union(words[22])\n\
    \    unique_chars = unique_chars.union(words[23])\n    unique_chars = unique_chars.union(words[24])\n\
    \    unique_chars = unique_chars.union(words[25])\n    unique_chars = unique_chars.union(words[26])\n\
    \    unique_chars = unique_chars.union(words[27])\n    unique_chars = unique_chars.union(words[28])\n\
    \    unique_chars = unique_chars.union(words[29])\n    unique_chars = unique_chars.union(words[30])\n\
    \    unique_chars = unique_chars.union(words[31])\n    unique_chars = unique_chars.union(words[32])\n\
    \    unique_chars = unique_chars.union(words[33])\n    unique_chars = unique_chars.union(words[34])\n\
    \    unique_chars = unique_chars.union(words[35])\n    unique_chars = unique_chars.union(words[36])\n\
    \    unique_chars = unique_chars.union(words[37])\n    unique_chars = unique_chars.union(words[38])\n\
    \    unique_chars = unique_chars.union(word", "    unique_chars = Set()\n    unique_chars_count\
    \ = Dict()\n    for word in words\n        for char in word\n            unique_chars\
    \ << char\n            unique_chars_count[char] = unique_chars_count[char] + 1\n\
    \        end\n    end\n    \n    unique_chars_sorted = sort(unique_chars)\n  \
    \  \n    for char in unique_chars_sorted\n        if unique_chars_count[char]\
    \ == length(words)\n            return char\n        end\n    end\nend\n</cell>\n\
    <code language=julia-1.4>\nfind_max([\n    \"apple\",\n    \"banana\",\n    \"\
    carrot\",\n    \"dog\",\n    \"elephant\",\n    \"fish\",\n    \"grape\",\n  \
    \  \"horse\",\n    \"kiwi\",\n    \"lion\",\n    \"monkey\",\n    \"pig\",\n \
    \   \"pineapple\",\n    \"python\",\n    \"rat-tail\",\n    \"rat\",\n    \"snake\"\
    ,\n    \"tiger\",\n    \"turtle\",\n    \"watermelon\",\n    \"whale\",\n    \"\
    zebra\",\n])\n</cell>\n<code language=julia-1.4>\nfind_max([\n    \"apple\",\n\
    \    \"banana\",\n    \"carrot\",\n    \"dog\",\n    \"elephant\",\n    \"fish\"\
    ,\n    \"grape\",\n    \"horse\",\n    \"kiwi\",\n    \"lion\",\n    \"monkey\"\
    ,\n    \"pig\",\n    \"pineapple\",\n    \"python\",\n    \"rat-tail\",\n    \"\
    rat\",\n    \"snake\",\n    \"tiger\",\n    \"turtle\",\n    \"watermelon\",\n\
    \    \"whale\",\n    \"zebra\",\n    \"apple\",\n    \"banana\",\n    \"carrot\"\
    ,\n    \"dog\",\n    \"elephant\",\n    \"fish\",\n    \"grape\",\n    \"horse\"\
    ,\n    \"kiwi\",\n    \"lion\",\n    \"monkey\",\n    \"pig\",\n    \"pineapple\"\
    ,\n    \"python\",\n    \"rat-tail\",\n    \"rat\",\n    \"snake\",\n    \"tiger\"\
    ,\n    \"turtle\",\n    \"watermelon\",\n    \"whale\",\n    \"zebra\",\n])\n\
    </cell>\n<code language=julia-1.4>\nfind_max([\n    \"apple\",\n    \"banana\"\
    ,\n    \"carrot\",\n    \"dog\",\n    \"elephant\",\n    \"fish\",\n    \"grape\"\
    ,\n    \"horse\",\n    \"kiwi\",\n    \"lion\",\n    \"monkey\",\n    \"pig\"\
    ,\n    \"pineapple", "    \n    unique_chars = Set{Char}()\n    \n    for word\
    \ in words \n        for char in word\n            unique_chars.add(char)\n  \
    \      end\n    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n\
    \    if length(unique_chars) > length(words)\n        return words[1]\n    else\n\
    \        return words[end]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    find_max([\n    \"apple\",\n    \"banana\",\n    \"carrot\",\n    \"dog\",\n \
    \   \"elephant\",\n    \"fish\",\n    \"grape\",\n    \"hippo\",\n    \"kiwi\"\
    ,\n    \"lemon\",\n    \"lime\",\n    \"mango\",\n    \"orange\",\n    \"pear\"\
    ,\n    \"pineapple\",\n    \"plum\",\n    \"potato\",\n    \"pumpkin\",\n    \"\
    raspberry\",\n    \"strawberry\",\n    \"watermelon\",\n    \"wintergreen\",\n\
    \    \"yogurt\",\n    \"zebra\",\n])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that accepts a string and returns a string with all the characters in lower\
    \ case. \nThe function should ignore the case of the characters.", "    unique_chars\
    \ = Set{String}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n", "    \n    unique_chars\
    \ = Set{String}()\n    \n    for word in words \n        unique_chars = unique_chars\
    \ | Set(word)\n    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n \
    \   unique_chars = unique_chars - Set(\"e\")\n    unique_chars = unique_chars\
    \ - Set(\"i\")\n    unique_chars = unique_chars - Set(\"o\")\n    unique_chars\
    \ = unique_chars - Set(\"u\")\n    \n    if length(unique_chars) > length(words)\n\
    \        return words[end]\n    else\n        return find_max(unique_chars)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\n    \"apple\",\n\
    \    \"banana\",\n    \"carrot\",\n    \"dog\",\n    \"elephant\",\n    \"fish\"\
    ,\n    \"goat\",\n    \"horse\",\n    \"kangaroo\",\n    \"lion\",\n    \"monkey\"\
    ,\n    \"pig\",\n    \"rabbit\",\n    \"sheep\",\n    \"tiger\",\n    \"whale\"\
    ,\n    \"zebra\",\n])\n</cell>\n<code language=julia-1.5>\nfind_max([\n    \"\
    apple\",\n    \"banana\",\n    \"carrot\",\n    \"dog\",\n    \"elephant\",\n\
    \    \"fish\",\n    \"goat\",\n    \"horse\",\n    \"kangaroo\",\n    \"lion\"\
    ,\n    \"monkey\",\n    \"pig\",\n    \"rabbit\",\n    \"sheep\",\n    \"tiger\"\
    ,\n    \"whale\",\n    \"zebra\",\n    \"apple\",\n    \"banana\",\n    \"carrot\"\
    ,\n    \"dog\",\n    \"elephant\",\n    \"fish\",\n    \"goat\",\n    \"horse\"\
    ,\n    \"kangaroo\",\n    \"lion\",\n    \"monkey\",\n    \"pig\",\n    \"rabbit\"\
    ,\n    \"sheep\",\n    \"tiger\",\n    \"whale\",\n    \"zebra\",\n])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\n    \"apple\",\n    \"banana\",\n    \"\
    carrot\",\n    \"dog\",\n    \"elephant\",\n    \"fish\",\n    \"goat\",\n   \
    \ \"horse\",\n    \"kangaroo\",\n    \"lion\",\n    \"monkey\",\n    \"pig\",\n\
    \    \"rabbit\",\n    \"sheep\",\n    \"tiger\",\n    \"whale\",\n    \"zebra\"\
    ,\n    \"apple\",\n    \"banana", "    unique_chars = Set{String}()\n    unique_chars.update(\"\
    $\".*unique_chars)\n    unique_chars.update(\"$\".*unique_chars)\n    unique_chars.update(\"\
    $\".*unique_chars)\n    unique_chars.update(\"$\".*unique_chars)\n    unique_chars.update(\"\
    $\".*unique_chars)\n    unique_chars.update(\"$\".*unique_chars)\n    unique_chars.update(\"\
    $\".*unique_chars)\n    unique_chars.update(\"$\".*unique_chars)\n    unique_chars.update(\"\
    $\".*unique_chars)\n    unique_chars.update(\"$\".*unique_chars)\n    unique_chars.update(\"\
    $\".*unique_chars)\n    unique_chars.update(\"$\".*unique_chars)\n    unique_chars.update(\"\
    $\".*unique_chars)\n    unique_chars.update(\"$\".*unique_chars)\n    unique_chars.update(\"\
    $\".*unique_chars)\n    unique_chars.update(\"$\".*unique_chars)\n    unique_chars.update(\"\
    $\".*unique_chars)\n    unique_chars.update(\"$\".*unique_chars)\n    unique_chars.update(\"\
    $\".*unique_chars)\n    unique_chars.update(\"$\".*unique_chars)\n    unique_chars.update(\"\
    $\".*unique_chars)\n    unique_chars.update(\"$\".*unique_chars)\n    unique_chars.update(\"\
    $\".*unique_chars)\n    unique_chars.update(\"$\".*unique_chars)\n    unique_chars.update(\"\
    $\".*unique_chars)\n    unique_chars.update(\"$\".*unique_chars)\n    unique_chars.update(\"\
    $\".*unique_chars)\n    unique_chars.update(\"$\".*unique_chars)\n    unique_chars.update(\"\
    $\".*unique_chars)\n    unique_chars.update(\"$\".*unique_chars)\n    unique_chars.update(\"\
    $\".*unique_chars)\n    unique_chars.update(\"$\".*unique_chars)\n    unique_chars.update(\"\
    $\".*unique_chars)\n    unique_chars.update(\"$\".*unique_chars)\n    unique_chars.update(\"\
    $\".*unique_chars)\n    unique_chars.update(\"$\".*unique_chars)\n    unique_chars.update(\"\
    $\".*unique_chars)\n    unique_chars.update(\"$\".*unique_chars)\n    unique_chars.update(\"\
    $\".", "    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n", "    unique_chars = Set{String}()\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words[1]))\n    unique_chars = unique_chars.union(Set(words[2]))\n\
    \    unique_chars = unique_chars.union(Set(words[3]))\n    unique_chars = unique_chars.union(Set(words[4]))\n\
    \    unique_chars = unique_chars.union(Set(words[5]))\n    unique_chars = unique_chars.union(Set(words[6]))\n\
    \    unique_chars = unique_chars.union(Set(words[7]))\n    unique_chars = unique_chars.union(Set(words[8]))\n\
    \    unique_chars = unique_chars.union(Set(words[9]))\n    unique_chars = unique_chars.union(Set(words[10]))\n\
    \    unique_chars = unique_chars.union(Set(words[11]))\n    unique_chars = unique_chars.union(Set(words[12]))\n\
    \    unique_chars = unique_chars.union(Set(words[13]))\n    unique_chars = unique_chars.union(Set(words[14]))\n\
    \    unique_chars = unique_chars.union(Set(words[15]))\n    unique_chars = unique_chars.union(Set(words[16]))\n\
    \    unique_chars = unique_chars.union(Set(words[17]))\n    unique_chars = unique_chars.union(Set(words[18]))\n\
    \    unique_chars = unique_chars.union(Set(words[19]))\n    unique_chars = unique_chars.union(Set(words[20]))\n\
    \    unique_chars = unique_chars.union(Set(words[21]))\n    unique_chars = unique_chars.union(Set(words[22]))\n\
    \    unique_chars = unique_chars.union(Set(words[23]))\n    unique_chars = unique_chars.union(Set(words[24]))\n\
    \    unique_chars = unique_chars.union(Set(words[25]))\n    unique_chars = unique_chars.union(Set(words[26]))\n\
    \    unique_chars = unique_chars.union(Set(words[27]))\n    unique_chars = unique_chars.union(Set(words[28]))\n\
    \    unique_chars = unique_chars.union(Set(words[29]))\n    unique_chars = unique_chars.union(Set(words[30]))\n\
    \    unique_chars = unique_chars.union(Set(words[31]))\n    unique_chars = unique_chars.union(Set(words[32]))\n\
    \    unique_chars = unique_chars.union(Set(words[33]))\n    unique_chars = unique_chars.union(Set(words[34]))\n\
    \    unique_chars = unique_chars.union("]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
