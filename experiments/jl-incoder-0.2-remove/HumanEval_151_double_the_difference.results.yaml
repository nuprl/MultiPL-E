language: jl
name: HumanEval_151_double_the_difference
results:
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n                   \n    If the input list is empty, return 0.\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv3k0i539.jl:18\nin expression starting at\
    \ /tmp/tmpv3k0i539.jl:18\n"
  stdout: ''
  timestamp: 1659977939
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5])\n</cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8kxy2gt5.jl:18\nin expression starting at\
    \ /tmp/tmp8kxy2gt5.jl:18\n"
  stdout: ''
  timestamp: 1659977939
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5,6,7,8,9])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of the squares of the numbers in the list that\
    \ are odd.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbbkojxh_.jl:17\nin expression starting at\
    \ /tmp/tmpbbkojxh_.jl:17\n"
  stdout: ''
  timestamp: 1659977939
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpaa8a277x.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmpaa8a277x.jl:24\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 5 == 25\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpaa8a277x.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpaa8a277x.jl:22\ntest set: Test Failed at /tmp/tmpaa8a277x.jl:27\n\
    \  Expression: candidate([-1.0, -2.0, 8.0]) == 0\n   Evaluated: -1 == 0\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaa8a277x.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaa8a277x.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpaa8a277x.jl:28\n  Expression: candidate([0.2, 3.0, 5.0]) ==\
    \ 34\n   Evaluated: 8 == 34\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaa8a277x.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaa8a277x.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpaa8a277x.jl:29\n  Expression: candidate([-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n   Evaluated: 0 == 165\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaa8a277x.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaa8a277x.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659977940
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptqvfm8dr.jl:17\nin expression starting at\
    \ /tmp/tmptqvfm8dr.jl:17\n"
  stdout: ''
  timestamp: 1659977939
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 != 0\n            sum += x\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmp2jsw6lzp.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp2jsw6lzp.jl:23\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 5 == 25\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2jsw6lzp.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp2jsw6lzp.jl:21\ntest set: Error During Test\
    \ at /tmp/tmp2jsw6lzp.jl:24\n  Test threw exception\n  Expression: candidate([0.1,\
    \ 0.2, 0.3]) == 0\n  InexactError: Int64(0.6000000000000001)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] double_the_difference(lst::Vector{Float64})\n     @ Main /tmp/tmp2jsw6lzp.jl:15\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp2jsw6lzp.jl:24 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp2jsw6lzp.jl:21\ntest set:\
    \ Test Failed at /tmp/tmp2jsw6lzp.jl:26\n  Expression: candidate([-1.0, -2.0,\
    \ 8.0]) == 0\n   Evaluated: -1 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2jsw6lzp.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2jsw6lzp.jl:21\ntest set: Error\
    \ During Test at /tmp/tmp2jsw6lzp.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([0.2, 3.0, 5.0]) == 34\n  InexactError: Int64(8.2)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] double_the_difference(lst::Vector{Float64})\n     @ Main /tmp/tmp2jsw6lzp.jl:15\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansio"
  timestamp: 1659977942
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5iorxcae.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmp5iorxcae.jl:24\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 5 == 25\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5iorxcae.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp5iorxcae.jl:22\ntest set: Test Failed at /tmp/tmp5iorxcae.jl:28\n\
    \  Expression: candidate([0.2, 3.0, 5.0]) == 34\n   Evaluated: 8 == 34\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5iorxcae.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5iorxcae.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp5iorxcae.jl:29\n  Expression: candidate([-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n   Evaluated: 25 == 165\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5iorxcae.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5iorxcae.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659977940
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum += i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n                   \n    If the input list is empty, return 0.\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphajg3mjm.jl:17\nin expression starting at\
    \ /tmp/tmphajg3mjm.jl:17\n"
  stdout: ''
  timestamp: 1659977939
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5,6])\n</cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphge8ujvi.jl:17\nin expression starting at\
    \ /tmp/tmphge8ujvi.jl:17\n"
  stdout: ''
  timestamp: 1659977939
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 != 0\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5,6])\n</cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3i19xp2g.jl:17\nin expression starting at\
    \ /tmp/tmp3i19xp2g.jl:17\n"
  stdout: ''
  timestamp: 1659977939
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n                   \n    If the input list is empty, return 0.\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnor1deo7.jl:18\nin expression starting at\
    \ /tmp/tmpnor1deo7.jl:18\n"
  stdout: ''
  timestamp: 1659977939
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpaa8a277x.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmpaa8a277x.jl:24\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 5 == 25\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpaa8a277x.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpaa8a277x.jl:22\ntest set: Test Failed at /tmp/tmpaa8a277x.jl:27\n\
    \  Expression: candidate([-1.0, -2.0, 8.0]) == 0\n   Evaluated: -1 == 0\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaa8a277x.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaa8a277x.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpaa8a277x.jl:28\n  Expression: candidate([0.2, 3.0, 5.0]) ==\
    \ 34\n   Evaluated: 8 == 34\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaa8a277x.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaa8a277x.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpaa8a277x.jl:29\n  Expression: candidate([-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n   Evaluated: 0 == 165\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaa8a277x.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaa8a277x.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659977940
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5iorxcae.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmp5iorxcae.jl:24\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 5 == 25\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5iorxcae.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp5iorxcae.jl:22\ntest set: Test Failed at /tmp/tmp5iorxcae.jl:28\n\
    \  Expression: candidate([0.2, 3.0, 5.0]) == 34\n   Evaluated: 8 == 34\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5iorxcae.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5iorxcae.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp5iorxcae.jl:29\n  Expression: candidate([-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n   Evaluated: 25 == 165\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5iorxcae.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5iorxcae.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659977940
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%2==1\n            sum += i\n \
    \       end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkfdu6xq0.jl:17\nin expression starting at\
    \ /tmp/tmpkfdu6xq0.jl:17\n"
  stdout: ''
  timestamp: 1659977939
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 != 0\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5,6])\n</cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp23n9otg0.jl:18\nin expression starting at\
    \ /tmp/tmp23n9otg0.jl:18\n"
  stdout: ''
  timestamp: 1659977939
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5iorxcae.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmp5iorxcae.jl:24\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 5 == 25\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5iorxcae.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp5iorxcae.jl:22\ntest set: Test Failed at /tmp/tmp5iorxcae.jl:28\n\
    \  Expression: candidate([0.2, 3.0, 5.0]) == 34\n   Evaluated: 8 == 34\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5iorxcae.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5iorxcae.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp5iorxcae.jl:29\n  Expression: candidate([-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n   Evaluated: 25 == 165\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5iorxcae.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5iorxcae.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659977940
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if isinteger(i)\n           \
    \ sum += i\n        else\n            sum += i * i\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,\nusing Test\n\n\
    @testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyopyeipl.jl:19\nin expression starting at\
    \ /tmp/tmpyopyeipl.jl:19\n"
  stdout: ''
  timestamp: 1659977939
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5iorxcae.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmp5iorxcae.jl:24\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 5 == 25\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5iorxcae.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp5iorxcae.jl:22\ntest set: Test Failed at /tmp/tmp5iorxcae.jl:28\n\
    \  Expression: candidate([0.2, 3.0, 5.0]) == 34\n   Evaluated: 8 == 34\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5iorxcae.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5iorxcae.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp5iorxcae.jl:29\n  Expression: candidate([-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n   Evaluated: 25 == 165\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5iorxcae.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5iorxcae.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659977940
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum += i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n                   \n    If the input list is empty, return 0.\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphajg3mjm.jl:17\nin expression starting at\
    \ /tmp/tmphajg3mjm.jl:17\n"
  stdout: ''
  timestamp: 1659977939
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7pvun_q3.jl:18\nin expression starting at\
    \ /tmp/tmp7pvun_q3.jl:18\n"
  stdout: ''
  timestamp: 1659977939
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum += i\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmrmho5ka.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpmrmho5ka.jl:23\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 5 == 25\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpmrmho5ka.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpmrmho5ka.jl:21\ntest set: Test Failed at /tmp/tmpmrmho5ka.jl:26\n\
    \  Expression: candidate([-1.0, -2.0, 8.0]) == 0\n   Evaluated: -1 == 0\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmrmho5ka.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmrmho5ka.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpmrmho5ka.jl:27\n  Expression: candidate([0.2, 3.0, 5.0]) ==\
    \ 34\n   Evaluated: 8 == 34\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmrmho5ka.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmrmho5ka.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpmrmho5ka.jl:28\n  Expression: candidate([-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n   Evaluated: 0 == 165\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmrmho5ka.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmrmho5ka.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659977940
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5,6,7,8,9])\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a list of numbers and returns the product of the numbers\
    \ in the list that are odd. Ignore numbers that are negative or not integers.\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp65c23dhq.jl:18\nin expression starting at\
    \ /tmp/tmp65c23dhq.jl:18\n"
  stdout: ''
  timestamp: 1659977939
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5,6])\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp11lzzza.jl:18\nin expression starting at\
    \ /tmp/tmpp11lzzza.jl:18\n"
  stdout: ''
  timestamp: 1659977939
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    double_the_difference([1,2,3,4,5,6])\n</cell>\n<code language=julia-1.0>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9s6d2i9m.jl:18\nin expression starting at\
    \ /tmp/tmp9s6d2i9m.jl:18\n"
  stdout: ''
  timestamp: 1659977939
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7pvun_q3.jl:18\nin expression starting at\
    \ /tmp/tmp7pvun_q3.jl:18\n"
  stdout: ''
  timestamp: 1659977939
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 != 0\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpuur4_h9a.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmpuur4_h9a.jl:24\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 5 == 25\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpuur4_h9a.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpuur4_h9a.jl:22\ntest set: Error During Test\
    \ at /tmp/tmpuur4_h9a.jl:25\n  Test threw exception\n  Expression: candidate([0.1,\
    \ 0.2, 0.3]) == 0\n  InexactError: Int64(0.6000000000000001)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] double_the_difference(lst::Vector{Float64})\n     @ Main /tmp/tmpuur4_h9a.jl:16\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpuur4_h9a.jl:25 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpuur4_h9a.jl:22\ntest set:\
    \ Test Failed at /tmp/tmpuur4_h9a.jl:27\n  Expression: candidate([-1.0, -2.0,\
    \ 8.0]) == 0\n   Evaluated: -1 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuur4_h9a.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuur4_h9a.jl:22\ntest set: Error\
    \ During Test at /tmp/tmpuur4_h9a.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([0.2, 3.0, 5.0]) == 34\n  InexactError: Int64(8.2)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] double_the_difference(lst::Vector{Float64})\n     @ Main /tmp/tmpuur4_h9a.jl:16\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansio"
  timestamp: 1659977942
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n                   \n    If the input list is empty, return 0.\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg_i0y_7_.jl:17\nin expression starting at\
    \ /tmp/tmpg_i0y_7_.jl:17\n"
  stdout: ''
  timestamp: 1659977939
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n                   \n    If the input list is empty, return 0.\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg_i0y_7_.jl:17\nin expression starting at\
    \ /tmp/tmpg_i0y_7_.jl:17\n"
  stdout: ''
  timestamp: 1659977939
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpaa8a277x.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmpaa8a277x.jl:24\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 5 == 25\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpaa8a277x.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpaa8a277x.jl:22\ntest set: Test Failed at /tmp/tmpaa8a277x.jl:27\n\
    \  Expression: candidate([-1.0, -2.0, 8.0]) == 0\n   Evaluated: -1 == 0\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaa8a277x.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaa8a277x.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpaa8a277x.jl:28\n  Expression: candidate([0.2, 3.0, 5.0]) ==\
    \ 34\n   Evaluated: 8 == 34\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaa8a277x.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaa8a277x.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpaa8a277x.jl:29\n  Expression: candidate([-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n   Evaluated: 0 == 165\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaa8a277x.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaa8a277x.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659977940
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 != 0\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpuur4_h9a.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmpuur4_h9a.jl:24\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 5 == 25\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpuur4_h9a.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpuur4_h9a.jl:22\ntest set: Error During Test\
    \ at /tmp/tmpuur4_h9a.jl:25\n  Test threw exception\n  Expression: candidate([0.1,\
    \ 0.2, 0.3]) == 0\n  InexactError: Int64(0.6000000000000001)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] double_the_difference(lst::Vector{Float64})\n     @ Main /tmp/tmpuur4_h9a.jl:16\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpuur4_h9a.jl:25 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpuur4_h9a.jl:22\ntest set:\
    \ Test Failed at /tmp/tmpuur4_h9a.jl:27\n  Expression: candidate([-1.0, -2.0,\
    \ 8.0]) == 0\n   Evaluated: -1 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuur4_h9a.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuur4_h9a.jl:22\ntest set: Error\
    \ During Test at /tmp/tmpuur4_h9a.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([0.2, 3.0, 5.0]) == 34\n  InexactError: Int64(8.2)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] double_the_difference(lst::Vector{Float64})\n     @ Main /tmp/tmpuur4_h9a.jl:16\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansio"
  timestamp: 1659977942
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%2 != 0\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.3>\n\
    double_the_difference([1,2,3,4,5])\n</cell>\n<code language=julia-1.3>\ndouble_the_difference([1,2,3,4,5,6])\n\
    </cell>\n<code language=julia-1.3>\ndouble_the_difference([1,2,3,4,5,6,7])\n</cell>\n\
    <code language=julia-1.3>\ndouble_the_difference([1,2,3,4,5,6,7,8])\n</cell>\n\
    <code language=julia-1.3>\ndouble_the_difference([1,2,3,4,5,6,7,8,9])\n</cell>\n\
    <code language=julia-1.3>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.3>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11])\n\
    </cell>\n<code language=julia-1.3>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12])\n\
    </cell>\n<code language=julia-1.3>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13])\n\
    </cell>\n<code language=julia-1.3>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\n\
    </cell>\n<code language=julia-1.3>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    </cell>\n<code language=julia-1.3>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.3>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.3>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<code language=julia-1.3>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    </cell>\n<code language=julia-1.3>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.3>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<code language=julia-1.3>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1dr7v4j_.jl:18\nin expression starting at\
    \ /tmp/tmp1dr7v4j_.jl:18\n"
  stdout: ''
  timestamp: 1659977939
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i > 0\n            sum +=\
    \ i * i\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmptvdi3do8.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmptvdi3do8.jl:24\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 41 == 25\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmptvdi3do8.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmptvdi3do8.jl:22\ntest set: Error During Test\
    \ at /tmp/tmptvdi3do8.jl:25\n  Test threw exception\n  Expression: candidate([0.1,\
    \ 0.2, 0.3]) == 0\n  InexactError: Int64(0.14)\n  Stacktrace:\n   [1] Int64\n\
    \     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7 [inlined]\n\
    \   [3] double_the_difference(lst::Vector{Float64})\n     @ Main /tmp/tmptvdi3do8.jl:16\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmptvdi3do8.jl:25 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmptvdi3do8.jl:22\ntest set:\
    \ Test Failed at /tmp/tmptvdi3do8.jl:27\n  Expression: candidate([-1.0, -2.0,\
    \ 8.0]) == 0\n   Evaluated: 64 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptvdi3do8.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptvdi3do8.jl:22\ntest set: Error\
    \ During Test at /tmp/tmptvdi3do8.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([0.2, 3.0, 5.0]) == 34\n  InexactError: Int64(34.04)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] double_the_difference(lst::Vector{Float64})\n     @ Main /tmp/tmptvdi3do8.jl:16\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /t"
  timestamp: 1659977942
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 != 0\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    double_the_difference([1,2,3,4,5])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the product of the numbers in a given list.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpumotks4r.jl:18\nin expression starting at\
    \ /tmp/tmpumotks4r.jl:18\n"
  stdout: ''
  timestamp: 1659977941
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum\
    \ += i * i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the sum of the squares of the numbers in the list that\
    \ are odd.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0o1fabj9.jl:18\nin expression starting at\
    \ /tmp/tmp0o1fabj9.jl:18\n"
  stdout: ''
  timestamp: 1659977941
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n                   \n    If the input list is empty, return 0.\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg_i0y_7_.jl:17\nin expression starting at\
    \ /tmp/tmpg_i0y_7_.jl:17\n"
  stdout: ''
  timestamp: 1659977939
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7pvun_q3.jl:18\nin expression starting at\
    \ /tmp/tmp7pvun_q3.jl:18\n"
  stdout: ''
  timestamp: 1659977939
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n                   \n    If the input list is empty, return 0.\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnor1deo7.jl:18\nin expression starting at\
    \ /tmp/tmpnor1deo7.jl:18\n"
  stdout: ''
  timestamp: 1659977939
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n                   \n    If the input list is empty, return 0.\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv3k0i539.jl:18\nin expression starting at\
    \ /tmp/tmpv3k0i539.jl:18\n"
  stdout: ''
  timestamp: 1659977939
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n                   \n    If the input list is empty, return 0.\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnor1deo7.jl:18\nin expression starting at\
    \ /tmp/tmpnor1deo7.jl:18\n"
  stdout: ''
  timestamp: 1659977939
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 != 0\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n                   \n    If the input list is empty, return 0.\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnq00glvf.jl:17\nin expression starting at\
    \ /tmp/tmpnq00glvf.jl:17\n"
  stdout: ''
  timestamp: 1659977941
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n                   \n    If the input list is empty, return 0.\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnor1deo7.jl:18\nin expression starting at\
    \ /tmp/tmpnor1deo7.jl:18\n"
  stdout: ''
  timestamp: 1659977939
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i > 0\n            sum +=\
    \ i\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpepwqmp6t.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmpepwqmp6t.jl:24\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 9 == 25\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpepwqmp6t.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpepwqmp6t.jl:22\ntest set: Error During Test\
    \ at /tmp/tmpepwqmp6t.jl:25\n  Test threw exception\n  Expression: candidate([0.1,\
    \ 0.2, 0.3]) == 0\n  InexactError: Int64(0.6000000000000001)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] double_the_difference(lst::Vector{Float64})\n     @ Main /tmp/tmpepwqmp6t.jl:16\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpepwqmp6t.jl:25 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpepwqmp6t.jl:22\ntest set:\
    \ Test Failed at /tmp/tmpepwqmp6t.jl:27\n  Expression: candidate([-1.0, -2.0,\
    \ 8.0]) == 0\n   Evaluated: 8 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpepwqmp6t.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpepwqmp6t.jl:22\ntest set: Error\
    \ During Test at /tmp/tmpepwqmp6t.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([0.2, 3.0, 5.0]) == 34\n  InexactError: Int64(8.2)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] double_the_difference(lst::Vector{Float64})\n     @ Main /tmp/tmpepwqmp6t.jl:16\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion"
  timestamp: 1659977944
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5iorxcae.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmp5iorxcae.jl:24\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 5 == 25\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5iorxcae.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp5iorxcae.jl:22\ntest set: Test Failed at /tmp/tmp5iorxcae.jl:28\n\
    \  Expression: candidate([0.2, 3.0, 5.0]) == 34\n   Evaluated: 8 == 34\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5iorxcae.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5iorxcae.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp5iorxcae.jl:29\n  Expression: candidate([-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n   Evaluated: 25 == 165\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5iorxcae.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5iorxcae.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659977940
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n                   \n    If the input list is empty, return 0.\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnor1deo7.jl:18\nin expression starting at\
    \ /tmp/tmpnor1deo7.jl:18\n"
  stdout: ''
  timestamp: 1659977939
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5])\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgklslej2.jl:17\nin expression starting at\
    \ /tmp/tmpgklslej2.jl:17\n"
  stdout: ''
  timestamp: 1659977941
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpcbbr_7q6.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpcbbr_7q6.jl:23\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 5 == 25\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpcbbr_7q6.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpcbbr_7q6.jl:21\ntest set: Test Failed at /tmp/tmpcbbr_7q6.jl:27\n\
    \  Expression: candidate([0.2, 3.0, 5.0]) == 34\n   Evaluated: 8 == 34\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcbbr_7q6.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcbbr_7q6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpcbbr_7q6.jl:28\n  Expression: candidate([-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n   Evaluated: 25 == 165\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcbbr_7q6.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcbbr_7q6.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659977942
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7pvun_q3.jl:18\nin expression starting at\
    \ /tmp/tmp7pvun_q3.jl:18\n"
  stdout: ''
  timestamp: 1659977939
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n                   \n    If the input list is empty, return 0.\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv3k0i539.jl:18\nin expression starting at\
    \ /tmp/tmpv3k0i539.jl:18\n"
  stdout: ''
  timestamp: 1659977939
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if isinteger(i)\n           \
    \ sum += i\n        else\n            sum += i * i\n        end\n    end\n   \
    \ return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmp9n8dawe_.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp9n8dawe_.jl:26\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 9 == 25\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp9n8dawe_.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp9n8dawe_.jl:24\ntest set: Error During Test\
    \ at /tmp/tmp9n8dawe_.jl:27\n  Test threw exception\n  Expression: candidate([0.1,\
    \ 0.2, 0.3]) == 0\n  InexactError: Int64(0.14)\n  Stacktrace:\n   [1] Int64\n\
    \     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7 [inlined]\n\
    \   [3] double_the_difference(lst::Vector{Float64})\n     @ Main /tmp/tmp9n8dawe_.jl:18\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp9n8dawe_.jl:27 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp9n8dawe_.jl:24\ntest set:\
    \ Test Failed at /tmp/tmp9n8dawe_.jl:28\n  Expression: candidate([-10.0, -20.0,\
    \ -30.0]) == 0\n   Evaluated: -60 == 0\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp9n8dawe_.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp9n8dawe_.jl:24\ntest set: Test Failed at /tmp/tmp9n8dawe_.jl:29\n\
    \  Expression: candidate([-1.0, -2.0, 8.0]) == 0\n   Evaluated: 5 == 0\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9n8dawe_.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9n8dawe_.jl:24\ntest set: Error\
    \ During Test at /tm"
  timestamp: 1659977944
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n                   \n    If the input list is empty, return 0.\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv2uz50n4.jl:18\nin expression starting at\
    \ /tmp/tmpv2uz50n4.jl:18\n"
  stdout: ''
  timestamp: 1659977941
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0\n            sum += i\n  \
    \      end\n    end\n    return sum * sum\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test your function with the examples below\n@test double_the_difference([1,2,3])\
    \ == 9\n@test double_the_difference([2,4,6,8]) == 42\n@test double_the_difference([3,5,7,9])\
    \ == 49\n@test double_the_difference([4,6,8,10,12]) == 70\n@test double_the_difference([5,7,9,11,13])\
    \ == 109\n@test double_the_difference([6,8,10,12,14]) == 140\n@test double_the_difference([7,9,11,13,15])\
    \ == 169\n@test double_the_difference([8,10,12,14,16]) == 200\n@test double_the_difference([9,11,13,15,17])\
    \ == 225\n@test double_the_difference([10,12,14,16,18]) == 270\n@test double_the_difference([11,13,15,17,19])\
    \ == 315\n@test double_the_difference([12,14,16,18,20]) == 360\n@test double_the_difference([13,15,17,19,21])\
    \ == 415\n@test double_the_difference([14,16,18,20,22]) == 460\n@test double_the_difference([15,17,19,21,23])\
    \ == 515\n@test double_the_difference([16,18,20,22,24]) == 560\n@test double_the_difference([17,19,21,23,25])\
    \ == 615\n@test double_the_difference([18,20,22,24,26]) == 660\n@test double_the_difference([19,21,23,25,27])\
    \ == 715\n@test double_the_difference([20,22,24,26,28]) == 760\n@test double_the_difference([21,23,25,27,29])\
    \ == 815\n@test double_the_difference([22,24,26,28,30]) == 860\n@test double_the_difference([23,25,27,29,31])\
    \ == 915\n@test double_the_difference([24,26,28,30,32]) == 960\n@test double_the_difference([25,27,29,31,33])\
    \ == 1025\n@test double_the_difference([26,28,30,32,34]) == 1060\n@test double_the_difference([27,29,31,33,35])\
    \ == 1135\n@test double_the_difference([28,30,32,34,36]) == 1180\n@test double_the_difference([29,31,33,35,37])\
    \ == 1225\n@test double_the_difference([30,32,34,36,38]) == 1260\n@test double_the_difference([31,33,35,37,39])\
    \ == 13\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t\
    @test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\
    \t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0, -30.0])\
    \ == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0,\
    \ 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2qhf83b9.jl:17\nin expression starting at\
    \ /tmp/tmp2qhf83b9.jl:17\n"
  stdout: ''
  timestamp: 1659977941
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum += i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5,6])\n</cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphdqpju2o.jl:17\nin expression starting at\
    \ /tmp/tmphdqpju2o.jl:17\n"
  stdout: ''
  timestamp: 1659977941
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the sum of the squares of the numbers in the list that\
    \ are odd. Ignore numbers that are negative or not integers.\nFor example, if\
    \ the input list is [1,2,3,4,5,6,7,8,9,10], the function should return 51.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpinyhhdw9.jl:18\nin expression starting at\
    \ /tmp/tmpinyhhdw9.jl:18\n"
  stdout: ''
  timestamp: 1659977941
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert double_the_difference([1,2,3,4,5]) == 25\n@assert double_the_difference([1,2,-3,4,5])\
    \ == 25\n@assert double_the_difference([1,2,-3,4,-5]) == 25\n@assert double_the_difference([1,2,-3,-4,-5])\
    \ == 25\n</cell>\n<text>\nExercise 3\nWrite a function that returns the product\
    \ of the numbers in the list that are odd. Ignore numbers that are negative or\
    \ not integers.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfblnbw7v.jl:18\nin expression starting at\
    \ /tmp/tmpfblnbw7v.jl:18\n"
  stdout: ''
  timestamp: 1659977941
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of the squares of the numbers in the list that\
    \ are odd. Ignore numbers that are negative or not integers.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv0_7vwkg.jl:18\nin expression starting at\
    \ /tmp/tmpv0_7vwkg.jl:18\n"
  stdout: ''
  timestamp: 1659977941
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n                   \n    If the input list is empty, return 0.\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv3k0i539.jl:18\nin expression starting at\
    \ /tmp/tmpv3k0i539.jl:18\n"
  stdout: ''
  timestamp: 1659977939
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 != 0\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5,6])\n</cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp89o6cpzo.jl:18\nin expression starting at\
    \ /tmp/tmp89o6cpzo.jl:18\n"
  stdout: ''
  timestamp: 1659977941
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n                   \n    If the input list is empty, return 0.\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv3k0i539.jl:18\nin expression starting at\
    \ /tmp/tmpv3k0i539.jl:18\n"
  stdout: ''
  timestamp: 1659977939
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if isinteger(i)\n           \
    \ sum += i\n        else\n            sum += i*i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of numbers,\
    \ return the sum of squares of the numbers\n    in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n                   \n    If\
    \ the input list is empty, return 0.\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppjccgxfq.jl:20\nin expression starting at\
    \ /tmp/tmppjccgxfq.jl:20\n"
  stdout: ''
  timestamp: 1659977941
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5iorxcae.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmp5iorxcae.jl:24\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 5 == 25\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5iorxcae.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp5iorxcae.jl:22\ntest set: Test Failed at /tmp/tmp5iorxcae.jl:28\n\
    \  Expression: candidate([0.2, 3.0, 5.0]) == 34\n   Evaluated: 8 == 34\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5iorxcae.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5iorxcae.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp5iorxcae.jl:29\n  Expression: candidate([-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n   Evaluated: 25 == 165\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5iorxcae.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5iorxcae.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659977940
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i > 0\n            sum +=\
    \ i * i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n                   \n    If the input list is empty, return 0.\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr2tomf4e.jl:18\nin expression starting at\
    \ /tmp/tmpr2tomf4e.jl:18\n"
  stdout: ''
  timestamp: 1659977941
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n                   \n    If the input list is empty, return 0.\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwoiw3kji.jl:17\nin expression starting at\
    \ /tmp/tmpwoiw3kji.jl:17\n"
  stdout: ''
  timestamp: 1659977941
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i > 0\n            sum +=\
    \ i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjwemn_j6.jl:18\nin expression starting at\
    \ /tmp/tmpjwemn_j6.jl:18\n"
  stdout: ''
  timestamp: 1659977942
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n                   \n    If the input list is empty, return 0.\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyaspbsug.jl:18\nin expression starting at\
    \ /tmp/tmpyaspbsug.jl:18\n"
  stdout: ''
  timestamp: 1659977942
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5])\n</cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4efkyj_c.jl:18\nin expression starting at\
    \ /tmp/tmp4efkyj_c.jl:18\n"
  stdout: ''
  timestamp: 1659977942
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5,6,7,8,9])\n\nusing Test\n\n@testset begin\n\n\
    candidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnkxrbp9x.jl:18\nin expression starting at\
    \ /tmp/tmpnkxrbp9x.jl:18\n"
  stdout: ''
  timestamp: 1659977943
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if isinteger(i)\n            sum +=\
    \ i\n        else\n            sum += i*i\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return the sum\
    \ of squares of the numbers\n    in the list that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpibonoa16.jl:18\nin expression starting at\
    \ /tmp/tmpibonoa16.jl:18\n"
  stdout: ''
  timestamp: 1659977943
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5,6])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the sum of the squares of the numbers in the list that are odd.\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc24jdaqt.jl:18\nin expression starting at\
    \ /tmp/tmpc24jdaqt.jl:18\n"
  stdout: ''
  timestamp: 1659977943
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i > 0\n            sum +=\
    \ i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjwemn_j6.jl:18\nin expression starting at\
    \ /tmp/tmpjwemn_j6.jl:18\n"
  stdout: ''
  timestamp: 1659977942
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpcbbr_7q6.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpcbbr_7q6.jl:23\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 5 == 25\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpcbbr_7q6.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpcbbr_7q6.jl:21\ntest set: Test Failed at /tmp/tmpcbbr_7q6.jl:27\n\
    \  Expression: candidate([0.2, 3.0, 5.0]) == 34\n   Evaluated: 8 == 34\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcbbr_7q6.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcbbr_7q6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpcbbr_7q6.jl:28\n  Expression: candidate([-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n   Evaluated: 25 == 165\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcbbr_7q6.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcbbr_7q6.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659977942
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 != 0\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @time double_the_difference([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the squares of the numbers in the\
    \ list that are odd. Ignore numbers that are negative or not integers.\nFor example,\
    \ if the input list is [1,2,3,4,5,6,7,8,9,10], the function should return 50.\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdfb6lh6i.jl:17\nin expression starting at\
    \ /tmp/tmpdfb6lh6i.jl:17\n"
  stdout: ''
  timestamp: 1659977943
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5iorxcae.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmp5iorxcae.jl:24\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 5 == 25\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5iorxcae.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp5iorxcae.jl:22\ntest set: Test Failed at /tmp/tmp5iorxcae.jl:28\n\
    \  Expression: candidate([0.2, 3.0, 5.0]) == 34\n   Evaluated: 8 == 34\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5iorxcae.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5iorxcae.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp5iorxcae.jl:29\n  Expression: candidate([-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n   Evaluated: 25 == 165\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5iorxcae.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5iorxcae.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659977940
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5iorxcae.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmp5iorxcae.jl:24\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 5 == 25\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5iorxcae.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp5iorxcae.jl:22\ntest set: Test Failed at /tmp/tmp5iorxcae.jl:28\n\
    \  Expression: candidate([0.2, 3.0, 5.0]) == 34\n   Evaluated: 8 == 34\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5iorxcae.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5iorxcae.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp5iorxcae.jl:29\n  Expression: candidate([-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n   Evaluated: 25 == 165\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5iorxcae.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5iorxcae.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659977940
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @time double_the_difference([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the squares of the numbers in the\
    \ list that are odd.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7ck3oljz.jl:18\nin expression starting at\
    \ /tmp/tmp7ck3oljz.jl:18\n"
  stdout: ''
  timestamp: 1659977943
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n                   \n    If the input list is empty, return 0.\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnor1deo7.jl:18\nin expression starting at\
    \ /tmp/tmpnor1deo7.jl:18\n"
  stdout: ''
  timestamp: 1659977939
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n                   \n    If the input list is empty, return 0.\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnor1deo7.jl:18\nin expression starting at\
    \ /tmp/tmpnor1deo7.jl:18\n"
  stdout: ''
  timestamp: 1659977939
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i > 0\n            sum +=\
    \ i * i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxrj3sja2.jl:18\nin expression starting at\
    \ /tmp/tmpxrj3sja2.jl:18\n"
  stdout: ''
  timestamp: 1659977943
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 != 0\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpuur4_h9a.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmpuur4_h9a.jl:24\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 5 == 25\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpuur4_h9a.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpuur4_h9a.jl:22\ntest set: Error During Test\
    \ at /tmp/tmpuur4_h9a.jl:25\n  Test threw exception\n  Expression: candidate([0.1,\
    \ 0.2, 0.3]) == 0\n  InexactError: Int64(0.6000000000000001)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] double_the_difference(lst::Vector{Float64})\n     @ Main /tmp/tmpuur4_h9a.jl:16\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpuur4_h9a.jl:25 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpuur4_h9a.jl:22\ntest set:\
    \ Test Failed at /tmp/tmpuur4_h9a.jl:27\n  Expression: candidate([-1.0, -2.0,\
    \ 8.0]) == 0\n   Evaluated: -1 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuur4_h9a.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuur4_h9a.jl:22\ntest set: Error\
    \ During Test at /tmp/tmpuur4_h9a.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([0.2, 3.0, 5.0]) == 34\n  InexactError: Int64(8.2)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] double_the_difference(lst::Vector{Float64})\n     @ Main /tmp/tmpuur4_h9a.jl:16\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansio"
  timestamp: 1659977942
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a list of numbers and returns the sum of the squares of\
    \ the numbers in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptuqatskv.jl:18\nin expression starting at\
    \ /tmp/tmptuqatskv.jl:18\n"
  stdout: ''
  timestamp: 1659977943
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n                   \n    If the input list is empty, return 0.\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg_i0y_7_.jl:17\nin expression starting at\
    \ /tmp/tmpg_i0y_7_.jl:17\n"
  stdout: ''
  timestamp: 1659977939
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the sum of the squares of the numbers in the list that\
    \ are odd.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpurbsgltz.jl:17\nin expression starting at\
    \ /tmp/tmpurbsgltz.jl:17\n"
  stdout: ''
  timestamp: 1659977943
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6911czpd.jl:18\nin expression starting at\
    \ /tmp/tmp6911czpd.jl:18\n"
  stdout: ''
  timestamp: 1659977943
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 != 0\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpuur4_h9a.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmpuur4_h9a.jl:24\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 5 == 25\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpuur4_h9a.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpuur4_h9a.jl:22\ntest set: Error During Test\
    \ at /tmp/tmpuur4_h9a.jl:25\n  Test threw exception\n  Expression: candidate([0.1,\
    \ 0.2, 0.3]) == 0\n  InexactError: Int64(0.6000000000000001)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] double_the_difference(lst::Vector{Float64})\n     @ Main /tmp/tmpuur4_h9a.jl:16\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpuur4_h9a.jl:25 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpuur4_h9a.jl:22\ntest set:\
    \ Test Failed at /tmp/tmpuur4_h9a.jl:27\n  Expression: candidate([-1.0, -2.0,\
    \ 8.0]) == 0\n   Evaluated: -1 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuur4_h9a.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuur4_h9a.jl:22\ntest set: Error\
    \ During Test at /tmp/tmpuur4_h9a.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([0.2, 3.0, 5.0]) == 34\n  InexactError: Int64(8.2)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] double_the_difference(lst::Vector{Float64})\n     @ Main /tmp/tmpuur4_h9a.jl:16\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansio"
  timestamp: 1659977942
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n                   \n    If the input list is empty, return 0.\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv3k0i539.jl:18\nin expression starting at\
    \ /tmp/tmpv3k0i539.jl:18\n"
  stdout: ''
  timestamp: 1659977939
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if isinteger(i)\n            sum +=\
    \ i\n        else\n            sum += i*i\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return the sum\
    \ of squares of the numbers\n    in the list that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpibonoa16.jl:18\nin expression starting at\
    \ /tmp/tmpibonoa16.jl:18\n"
  stdout: ''
  timestamp: 1659977943
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum += i\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmrmho5ka.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpmrmho5ka.jl:23\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 5 == 25\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpmrmho5ka.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpmrmho5ka.jl:21\ntest set: Test Failed at /tmp/tmpmrmho5ka.jl:26\n\
    \  Expression: candidate([-1.0, -2.0, 8.0]) == 0\n   Evaluated: -1 == 0\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmrmho5ka.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmrmho5ka.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpmrmho5ka.jl:27\n  Expression: candidate([0.2, 3.0, 5.0]) ==\
    \ 34\n   Evaluated: 8 == 34\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmrmho5ka.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmrmho5ka.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpmrmho5ka.jl:28\n  Expression: candidate([-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n   Evaluated: 0 == 165\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmrmho5ka.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmrmho5ka.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659977940
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 != 0\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5,6])\n</cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcwfz27e9.jl:17\nin expression starting at\
    \ /tmp/tmpcwfz27e9.jl:17\n"
  stdout: ''
  timestamp: 1659977943
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert double_the_difference([1,2,3,4,5]) == 25\n@assert double_the_difference([1,2,-3,4,5])\
    \ == 25\n@assert double_the_difference([1,2,3,4,-5]) == 25\n@assert double_the_difference([1,2,3,4,5,6,7,8,9,10])\
    \ == 5040\n</cell>\n<text>\nExercise 4\nWrite a function that returns the sum\
    \ of the squares of the numbers in the list that are odd.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphp2kdmtp.jl:18\nin expression starting at\
    \ /tmp/tmphp2kdmtp.jl:18\n"
  stdout: ''
  timestamp: 1659977943
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpaa8a277x.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmpaa8a277x.jl:24\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 5 == 25\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpaa8a277x.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpaa8a277x.jl:22\ntest set: Test Failed at /tmp/tmpaa8a277x.jl:27\n\
    \  Expression: candidate([-1.0, -2.0, 8.0]) == 0\n   Evaluated: -1 == 0\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaa8a277x.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaa8a277x.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpaa8a277x.jl:28\n  Expression: candidate([0.2, 3.0, 5.0]) ==\
    \ 34\n   Evaluated: 8 == 34\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaa8a277x.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaa8a277x.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpaa8a277x.jl:29\n  Expression: candidate([-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n   Evaluated: 0 == 165\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaa8a277x.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaa8a277x.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659977940
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i > 0\n            sum +=\
    \ i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n                   \n    If the input list is empty, return 0.\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5vnkyd_h.jl:18\nin expression starting at\
    \ /tmp/tmp5vnkyd_h.jl:18\n"
  stdout: ''
  timestamp: 1659977943
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i > 0\n            sum +=\
    \ i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjwemn_j6.jl:18\nin expression starting at\
    \ /tmp/tmpjwemn_j6.jl:18\n"
  stdout: ''
  timestamp: 1659977942
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5iorxcae.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmp5iorxcae.jl:24\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 5 == 25\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5iorxcae.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp5iorxcae.jl:22\ntest set: Test Failed at /tmp/tmp5iorxcae.jl:28\n\
    \  Expression: candidate([0.2, 3.0, 5.0]) == 34\n   Evaluated: 8 == 34\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5iorxcae.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5iorxcae.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp5iorxcae.jl:29\n  Expression: candidate([-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n   Evaluated: 25 == 165\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5iorxcae.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5iorxcae.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659977940
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of the squares of the numbers in the list that\
    \ are odd.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjvxeyokv.jl:18\nin expression starting at\
    \ /tmp/tmpjvxeyokv.jl:18\n"
  stdout: ''
  timestamp: 1659977943
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5iorxcae.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmp5iorxcae.jl:24\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 5 == 25\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5iorxcae.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp5iorxcae.jl:22\ntest set: Test Failed at /tmp/tmp5iorxcae.jl:28\n\
    \  Expression: candidate([0.2, 3.0, 5.0]) == 34\n   Evaluated: 8 == 34\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5iorxcae.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5iorxcae.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp5iorxcae.jl:29\n  Expression: candidate([-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n   Evaluated: 25 == 165\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5iorxcae.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5iorxcae.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659977940
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 != 0\n            sum += x\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmp2jsw6lzp.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp2jsw6lzp.jl:23\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 5 == 25\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2jsw6lzp.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp2jsw6lzp.jl:21\ntest set: Error During Test\
    \ at /tmp/tmp2jsw6lzp.jl:24\n  Test threw exception\n  Expression: candidate([0.1,\
    \ 0.2, 0.3]) == 0\n  InexactError: Int64(0.6000000000000001)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] double_the_difference(lst::Vector{Float64})\n     @ Main /tmp/tmp2jsw6lzp.jl:15\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp2jsw6lzp.jl:24 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp2jsw6lzp.jl:21\ntest set:\
    \ Test Failed at /tmp/tmp2jsw6lzp.jl:26\n  Expression: candidate([-1.0, -2.0,\
    \ 8.0]) == 0\n   Evaluated: -1 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2jsw6lzp.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2jsw6lzp.jl:21\ntest set: Error\
    \ During Test at /tmp/tmp2jsw6lzp.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([0.2, 3.0, 5.0]) == 34\n  InexactError: Int64(8.2)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] double_the_difference(lst::Vector{Float64})\n     @ Main /tmp/tmp2jsw6lzp.jl:15\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansio"
  timestamp: 1659977942
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n                   \n    If the input list is empty, return 0.\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv3k0i539.jl:18\nin expression starting at\
    \ /tmp/tmpv3k0i539.jl:18\n"
  stdout: ''
  timestamp: 1659977939
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5,6])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the sum of the squares of the numbers in the list that are odd.\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc24jdaqt.jl:18\nin expression starting at\
    \ /tmp/tmpc24jdaqt.jl:18\n"
  stdout: ''
  timestamp: 1659977943
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return a new list with the squares of \n\
    \    the numbers in the list that are odd. Ignore numbers that are negative \n\
    \    or not integers.\n    \n                   \n    If the input list is empty,\
    \ return an empty list.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp5nd8ck2.jl:18\nin expression starting at\
    \ /tmp/tmpp5nd8ck2.jl:18\n"
  stdout: ''
  timestamp: 1659977943
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i > 0\n            sum +=\
    \ i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n                   \n    If the input list is empty, return 0.\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5vnkyd_h.jl:18\nin expression starting at\
    \ /tmp/tmp5vnkyd_h.jl:18\n"
  stdout: ''
  timestamp: 1659977943
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n                   \n    If the input list is empty, return 0.\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv3k0i539.jl:18\nin expression starting at\
    \ /tmp/tmpv3k0i539.jl:18\n"
  stdout: ''
  timestamp: 1659977939
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpcbbr_7q6.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpcbbr_7q6.jl:23\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 5 == 25\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpcbbr_7q6.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpcbbr_7q6.jl:21\ntest set: Test Failed at /tmp/tmpcbbr_7q6.jl:27\n\
    \  Expression: candidate([0.2, 3.0, 5.0]) == 34\n   Evaluated: 8 == 34\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcbbr_7q6.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcbbr_7q6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpcbbr_7q6.jl:28\n  Expression: candidate([-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n   Evaluated: 25 == 165\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcbbr_7q6.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcbbr_7q6.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659977942
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the product of the numbers in the list that are odd.\
    \ Ignore numbers that are negative or not integers.\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcs4_i2hc.jl:18\nin expression starting at\
    \ /tmp/tmpcs4_i2hc.jl:18\n"
  stdout: ''
  timestamp: 1659977944
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5])\n</cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7])\n</cell>\n\
    <code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8])\n</cell>\n\
    <code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9])\n</cell>\n\
    <code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr8v6a1u0.jl:18\nin expression starting at\
    \ /tmp/tmpr8v6a1u0.jl:18\n"
  stdout: ''
  timestamp: 1659977944
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum += i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert double_the_difference([1,2,3]) == 9\n@assert double_the_difference([1,3,5])\
    \ == 10\n@assert double_the_difference([1,3,5,7,9]) == 25\n@assert double_the_difference([1,3,5,7,9,11,13,15])\
    \ == 50\n@assert double_the_difference([1,3,5,7,9,11,13,15,17,19]) == 100\n@assert\
    \ double_the_difference([1,3,5,7,9,11,13,15,17,19,23,29]) == 225\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the sum of the squares of the numbers\
    \ in the list that are odd. Ignore numbers that are negative or not integers.\n\
    For example, sum([1,2,3]) should return 9. sum([1,3,5]) should return 10. sum([1,3,5,7,9])\
    \ should return 25. sum([1,3,5,7,9,11,13,15]) should return 50. sum([1,3,5,7,9,11,13,15,17,19])\
    \ should return 100. sum([1,3,5,7,9,11,13,15,17,19,23,29]) should return 225.\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6ywvgw01.jl:17\nin expression starting at\
    \ /tmp/tmp6ywvgw01.jl:17\n"
  stdout: ''
  timestamp: 1659977944
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n                   \n    If the input list is empty, return 0.\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnor1deo7.jl:18\nin expression starting at\
    \ /tmp/tmpnor1deo7.jl:18\n"
  stdout: ''
  timestamp: 1659977939
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum += i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0p3n31k6.jl:17\nin expression starting at\
    \ /tmp/tmp0p3n31k6.jl:17\n"
  stdout: ''
  timestamp: 1659977944
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 != 0\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n                   \n    If the input list is empty, return 0.\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnq00glvf.jl:17\nin expression starting at\
    \ /tmp/tmpnq00glvf.jl:17\n"
  stdout: ''
  timestamp: 1659977941
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 != 0\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n                   \n    If the input list is empty, return 0.\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj4ex_5cv.jl:18\nin expression starting at\
    \ /tmp/tmpj4ex_5cv.jl:18\n"
  stdout: ''
  timestamp: 1659977944
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum += i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpps5o8w88.jl:17\nin expression starting at\
    \ /tmp/tmpps5o8w88.jl:17\n"
  stdout: ''
  timestamp: 1659977944
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i > 0\n            sum +=\
    \ i * i\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmptvdi3do8.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmptvdi3do8.jl:24\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 41 == 25\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmptvdi3do8.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmptvdi3do8.jl:22\ntest set: Error During Test\
    \ at /tmp/tmptvdi3do8.jl:25\n  Test threw exception\n  Expression: candidate([0.1,\
    \ 0.2, 0.3]) == 0\n  InexactError: Int64(0.14)\n  Stacktrace:\n   [1] Int64\n\
    \     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7 [inlined]\n\
    \   [3] double_the_difference(lst::Vector{Float64})\n     @ Main /tmp/tmptvdi3do8.jl:16\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmptvdi3do8.jl:25 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmptvdi3do8.jl:22\ntest set:\
    \ Test Failed at /tmp/tmptvdi3do8.jl:27\n  Expression: candidate([-1.0, -2.0,\
    \ 8.0]) == 0\n   Evaluated: 64 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptvdi3do8.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptvdi3do8.jl:22\ntest set: Error\
    \ During Test at /tmp/tmptvdi3do8.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([0.2, 3.0, 5.0]) == 34\n  InexactError: Int64(34.04)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] double_the_difference(lst::Vector{Float64})\n     @ Main /tmp/tmptvdi3do8.jl:16\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /t"
  timestamp: 1659977942
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 != 0\n            sum += x\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmp2jsw6lzp.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp2jsw6lzp.jl:23\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 5 == 25\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2jsw6lzp.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp2jsw6lzp.jl:21\ntest set: Error During Test\
    \ at /tmp/tmp2jsw6lzp.jl:24\n  Test threw exception\n  Expression: candidate([0.1,\
    \ 0.2, 0.3]) == 0\n  InexactError: Int64(0.6000000000000001)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] double_the_difference(lst::Vector{Float64})\n     @ Main /tmp/tmp2jsw6lzp.jl:15\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp2jsw6lzp.jl:24 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp2jsw6lzp.jl:21\ntest set:\
    \ Test Failed at /tmp/tmp2jsw6lzp.jl:26\n  Expression: candidate([-1.0, -2.0,\
    \ 8.0]) == 0\n   Evaluated: -1 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2jsw6lzp.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2jsw6lzp.jl:21\ntest set: Error\
    \ During Test at /tmp/tmp2jsw6lzp.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([0.2, 3.0, 5.0]) == 34\n  InexactError: Int64(8.2)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] double_the_difference(lst::Vector{Float64})\n     @ Main /tmp/tmp2jsw6lzp.jl:15\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansio"
  timestamp: 1659977942
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%2 != 0\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9_duwg5j.jl:18\nin expression starting at\
    \ /tmp/tmp9_duwg5j.jl:18\n"
  stdout: ''
  timestamp: 1659977944
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%2 != 0\n            sum += i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n                   \n    If the input list is empty, return 0.\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp79v2sn2.jl:17\nin expression starting at\
    \ /tmp/tmpp79v2sn2.jl:17\n"
  stdout: ''
  timestamp: 1659977944
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%2==1\n            sum += i\n \
    \       end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmps1ygvnh3.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmps1ygvnh3.jl:23\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 5 == 25\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmps1ygvnh3.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmps1ygvnh3.jl:21\ntest set: Test Failed at /tmp/tmps1ygvnh3.jl:27\n\
    \  Expression: candidate([0.2, 3.0, 5.0]) == 34\n   Evaluated: 8 == 34\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps1ygvnh3.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps1ygvnh3.jl:21\ntest set: Test\
    \ Failed at /tmp/tmps1ygvnh3.jl:28\n  Expression: candidate([-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n   Evaluated: 25 == 165\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps1ygvnh3.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps1ygvnh3.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659977946
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n                   \n    If the input list is empty, return 0.\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfn_80ddr.jl:18\nin expression starting at\
    \ /tmp/tmpfn_80ddr.jl:18\n"
  stdout: ''
  timestamp: 1659977945
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 != 0\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @time double_the_difference([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    @time double_the_difference([1,2,3,4,5,6,7,8,9,10,11])\n</cell>\n<code language=julia-1.5>\n\
    @time double_the_difference([1,2,3,4,5,6,7,8,9,10,11,12])\n</cell>\n<code language=julia-1.5>\n\
    @time double_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13])\n</cell>\n<code language=julia-1.5>\n\
    @time double_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\n</cell>\n<code\
    \ language=julia-1.5>\n@time double_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    </cell>\n<code language=julia-1.5>\n@time double_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.5>\n@time double_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.5>\n@time double_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<code language=julia-1.5>\n@time double_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    </cell>\n<code language=julia-1.5>\n@time double_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\n@time double_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<code language=julia-1.5>\n@time double_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    </cell>\n<code language=julia-1.5>\n@time double_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n\
    </cell>\n<code language=julia-1.5>\n@time double_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcxmgugw_.jl:18\nin expression starting at\
    \ /tmp/tmpcxmgugw_.jl:18\n"
  stdout: ''
  timestamp: 1659977945
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 != 0\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5,6])\n</cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4wonr9g0.jl:17\nin expression starting at\
    \ /tmp/tmp4wonr9g0.jl:17\n"
  stdout: ''
  timestamp: 1659977944
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 != 0\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpuur4_h9a.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmpuur4_h9a.jl:24\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 5 == 25\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpuur4_h9a.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpuur4_h9a.jl:22\ntest set: Error During Test\
    \ at /tmp/tmpuur4_h9a.jl:25\n  Test threw exception\n  Expression: candidate([0.1,\
    \ 0.2, 0.3]) == 0\n  InexactError: Int64(0.6000000000000001)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] double_the_difference(lst::Vector{Float64})\n     @ Main /tmp/tmpuur4_h9a.jl:16\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpuur4_h9a.jl:25 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpuur4_h9a.jl:22\ntest set:\
    \ Test Failed at /tmp/tmpuur4_h9a.jl:27\n  Expression: candidate([-1.0, -2.0,\
    \ 8.0]) == 0\n   Evaluated: -1 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuur4_h9a.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuur4_h9a.jl:22\ntest set: Error\
    \ During Test at /tmp/tmpuur4_h9a.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([0.2, 3.0, 5.0]) == 34\n  InexactError: Int64(8.2)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] double_the_difference(lst::Vector{Float64})\n     @ Main /tmp/tmpuur4_h9a.jl:16\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansio"
  timestamp: 1659977942
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum\
    \ += i * i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @time double_the_difference(lst)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the sum of the squares of the numbers in the list that are odd.\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1hsp7b4r.jl:18\nin expression starting at\
    \ /tmp/tmp1hsp7b4r.jl:18\n"
  stdout: ''
  timestamp: 1659977945
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n                   \n    If the input list is empty, return 0.\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpum0k4hr1.jl:17\nin expression starting at\
    \ /tmp/tmpum0k4hr1.jl:17\n"
  stdout: ''
  timestamp: 1659977945
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6911czpd.jl:18\nin expression starting at\
    \ /tmp/tmp6911czpd.jl:18\n"
  stdout: ''
  timestamp: 1659977943
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7pvun_q3.jl:18\nin expression starting at\
    \ /tmp/tmp7pvun_q3.jl:18\n"
  stdout: ''
  timestamp: 1659977939
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a list of numbers and returns the product of the numbers in the list\
    \ that are odd. Ignore numbers that are negative or not integers.\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6k87u95u.jl:18\nin expression starting at\
    \ /tmp/tmp6k87u95u.jl:18\n"
  stdout: ''
  timestamp: 1659977945
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5iorxcae.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmp5iorxcae.jl:24\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 5 == 25\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5iorxcae.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp5iorxcae.jl:22\ntest set: Test Failed at /tmp/tmp5iorxcae.jl:28\n\
    \  Expression: candidate([0.2, 3.0, 5.0]) == 34\n   Evaluated: 8 == 34\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5iorxcae.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5iorxcae.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp5iorxcae.jl:29\n  Expression: candidate([-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n   Evaluated: 25 == 165\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5iorxcae.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5iorxcae.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659977940
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 != 0\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkhjdcu1z.jl:17\nin expression starting at\
    \ /tmp/tmpkhjdcu1z.jl:17\n"
  stdout: ''
  timestamp: 1659977945
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%2==1\n            sum +=\
    \ i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of the squares of the numbers in the list that\
    \ are odd. Ignore numbers that are negative or not integers.\nFor example, sum([1,2,3,4,5,6,7,8,9,10])\
    \ should return 50.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqieznwgi.jl:18\nin expression starting at\
    \ /tmp/tmpqieznwgi.jl:18\n"
  stdout: ''
  timestamp: 1659977945
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7pvun_q3.jl:18\nin expression starting at\
    \ /tmp/tmp7pvun_q3.jl:18\n"
  stdout: ''
  timestamp: 1659977939
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%2 != 0\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n                   \n    If the input list is empty, return 0.\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm89qh2qm.jl:18\nin expression starting at\
    \ /tmp/tmpm89qh2qm.jl:18\n"
  stdout: ''
  timestamp: 1659977945
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 != 0\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwkt7448a.jl:17\nin expression starting at\
    \ /tmp/tmpwkt7448a.jl:17\n"
  stdout: ''
  timestamp: 1659977945
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 != 0\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of the squares of the numbers in the list that\
    \ are odd. Ignore numbers that are negative or not integers.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmrk8zrem.jl:18\nin expression starting at\
    \ /tmp/tmpmrk8zrem.jl:18\n"
  stdout: ''
  timestamp: 1659977945
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5iorxcae.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmp5iorxcae.jl:24\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 5 == 25\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5iorxcae.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp5iorxcae.jl:22\ntest set: Test Failed at /tmp/tmp5iorxcae.jl:28\n\
    \  Expression: candidate([0.2, 3.0, 5.0]) == 34\n   Evaluated: 8 == 34\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5iorxcae.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5iorxcae.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp5iorxcae.jl:29\n  Expression: candidate([-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n   Evaluated: 25 == 165\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5iorxcae.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5iorxcae.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659977940
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum\
    \ += i * i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7zh51x94.jl:18\nin expression starting at\
    \ /tmp/tmp7zh51x94.jl:18\n"
  stdout: ''
  timestamp: 1659977945
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n                   \n    If the input list is empty, return 0.\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv3k0i539.jl:18\nin expression starting at\
    \ /tmp/tmpv3k0i539.jl:18\n"
  stdout: ''
  timestamp: 1659977939
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @time double_the_difference([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the squares of the numbers in the\
    \ list that are odd. Ignore numbers that are negative or not integers.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ci74k56.jl:18\nin expression starting at\
    \ /tmp/tmp9ci74k56.jl:18\n"
  stdout: ''
  timestamp: 1659977946
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n                   \n    If the input list is empty, return 0.\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv3k0i539.jl:18\nin expression starting at\
    \ /tmp/tmpv3k0i539.jl:18\n"
  stdout: ''
  timestamp: 1659977939
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if isinteger(i)\n            sum +=\
    \ i\n        else\n            sum += i*i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcy01f0vj.jl:19\nin expression starting at\
    \ /tmp/tmpcy01f0vj.jl:19\n"
  stdout: ''
  timestamp: 1659977946
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpcbbr_7q6.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpcbbr_7q6.jl:23\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 5 == 25\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpcbbr_7q6.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpcbbr_7q6.jl:21\ntest set: Test Failed at /tmp/tmpcbbr_7q6.jl:27\n\
    \  Expression: candidate([0.2, 3.0, 5.0]) == 34\n   Evaluated: 8 == 34\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcbbr_7q6.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcbbr_7q6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpcbbr_7q6.jl:28\n  Expression: candidate([-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n   Evaluated: 25 == 165\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcbbr_7q6.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcbbr_7q6.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659977942
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6911czpd.jl:18\nin expression starting at\
    \ /tmp/tmp6911czpd.jl:18\n"
  stdout: ''
  timestamp: 1659977943
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if isinteger(i)\n           \
    \ sum += i\n        else\n            sum += i*i\n        end\n    end\n    return\
    \ sum\nend\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpuoiumtgt.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpuoiumtgt.jl:26\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 9 == 25\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpuoiumtgt.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpuoiumtgt.jl:24\ntest set: Error During Test\
    \ at /tmp/tmpuoiumtgt.jl:27\n  Test threw exception\n  Expression: candidate([0.1,\
    \ 0.2, 0.3]) == 0\n  InexactError: Int64(0.14)\n  Stacktrace:\n   [1] Int64\n\
    \     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7 [inlined]\n\
    \   [3] double_the_difference(lst::Vector{Float64})\n     @ Main /tmp/tmpuoiumtgt.jl:18\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpuoiumtgt.jl:27 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpuoiumtgt.jl:24\ntest set:\
    \ Test Failed at /tmp/tmpuoiumtgt.jl:28\n  Expression: candidate([-10.0, -20.0,\
    \ -30.0]) == 0\n   Evaluated: -60 == 0\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpuoiumtgt.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpuoiumtgt.jl:24\ntest set: Test Failed at /tmp/tmpuoiumtgt.jl:29\n\
    \  Expression: candidate([-1.0, -2.0, 8.0]) == 0\n   Evaluated: 5 == 0\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuoiumtgt.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuoiumtgt.jl:24\ntest set: Error\
    \ During Test at /tm"
  timestamp: 1659977948
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%2==1\n            sum +=\
    \ i\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp683x6w8l.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmp683x6w8l.jl:24\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 5 == 25\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp683x6w8l.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp683x6w8l.jl:22\ntest set: Test Failed at /tmp/tmp683x6w8l.jl:28\n\
    \  Expression: candidate([0.2, 3.0, 5.0]) == 34\n   Evaluated: 8 == 34\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp683x6w8l.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp683x6w8l.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp683x6w8l.jl:29\n  Expression: candidate([-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n   Evaluated: 25 == 165\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp683x6w8l.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp683x6w8l.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659977947
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n                   \n    If the input list is empty, return 0.\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg_i0y_7_.jl:17\nin expression starting at\
    \ /tmp/tmpg_i0y_7_.jl:17\n"
  stdout: ''
  timestamp: 1659977939
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpaa8a277x.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmpaa8a277x.jl:24\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 5 == 25\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpaa8a277x.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpaa8a277x.jl:22\ntest set: Test Failed at /tmp/tmpaa8a277x.jl:27\n\
    \  Expression: candidate([-1.0, -2.0, 8.0]) == 0\n   Evaluated: -1 == 0\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaa8a277x.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaa8a277x.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpaa8a277x.jl:28\n  Expression: candidate([0.2, 3.0, 5.0]) ==\
    \ 34\n   Evaluated: 8 == 34\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaa8a277x.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaa8a277x.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpaa8a277x.jl:29\n  Expression: candidate([-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n   Evaluated: 0 == 165\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaa8a277x.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaa8a277x.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659977940
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i > 0\n            sum +=\
    \ i\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpepwqmp6t.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmpepwqmp6t.jl:24\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 9 == 25\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpepwqmp6t.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpepwqmp6t.jl:22\ntest set: Error During Test\
    \ at /tmp/tmpepwqmp6t.jl:25\n  Test threw exception\n  Expression: candidate([0.1,\
    \ 0.2, 0.3]) == 0\n  InexactError: Int64(0.6000000000000001)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] double_the_difference(lst::Vector{Float64})\n     @ Main /tmp/tmpepwqmp6t.jl:16\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpepwqmp6t.jl:25 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpepwqmp6t.jl:22\ntest set:\
    \ Test Failed at /tmp/tmpepwqmp6t.jl:27\n  Expression: candidate([-1.0, -2.0,\
    \ 8.0]) == 0\n   Evaluated: 8 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpepwqmp6t.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpepwqmp6t.jl:22\ntest set: Error\
    \ During Test at /tmp/tmpepwqmp6t.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([0.2, 3.0, 5.0]) == 34\n  InexactError: Int64(8.2)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] double_the_difference(lst::Vector{Float64})\n     @ Main /tmp/tmpepwqmp6t.jl:16\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion"
  timestamp: 1659977944
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of the squares of the numbers in the list that\
    \ are odd.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptwozit_2.jl:18\nin expression starting at\
    \ /tmp/tmptwozit_2.jl:18\n"
  stdout: ''
  timestamp: 1659977946
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpcbbr_7q6.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpcbbr_7q6.jl:23\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 5 == 25\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpcbbr_7q6.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpcbbr_7q6.jl:21\ntest set: Test Failed at /tmp/tmpcbbr_7q6.jl:27\n\
    \  Expression: candidate([0.2, 3.0, 5.0]) == 34\n   Evaluated: 8 == 34\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcbbr_7q6.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcbbr_7q6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpcbbr_7q6.jl:28\n  Expression: candidate([-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n   Evaluated: 25 == 165\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcbbr_7q6.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcbbr_7q6.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659977942
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n                   \n    If the input list is empty, return 0.\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyaspbsug.jl:18\nin expression starting at\
    \ /tmp/tmpyaspbsug.jl:18\n"
  stdout: ''
  timestamp: 1659977942
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    double_the_difference([1,2,3,4,5])\n</cell>\n<code language=julia-1.0>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the product of the\
    \ numbers in the list that are odd.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5e34cwbw.jl:18\nin expression starting at\
    \ /tmp/tmp5e34cwbw.jl:18\n"
  stdout: ''
  timestamp: 1659977946
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpaa8a277x.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmpaa8a277x.jl:24\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 5 == 25\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpaa8a277x.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpaa8a277x.jl:22\ntest set: Test Failed at /tmp/tmpaa8a277x.jl:27\n\
    \  Expression: candidate([-1.0, -2.0, 8.0]) == 0\n   Evaluated: -1 == 0\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaa8a277x.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaa8a277x.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpaa8a277x.jl:28\n  Expression: candidate([0.2, 3.0, 5.0]) ==\
    \ 34\n   Evaluated: 8 == 34\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaa8a277x.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaa8a277x.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpaa8a277x.jl:29\n  Expression: candidate([-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n   Evaluated: 0 == 165\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaa8a277x.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaa8a277x.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659977940
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpn9kjj_i0.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmpn9kjj_i0.jl:24\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 5 == 25\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpn9kjj_i0.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpn9kjj_i0.jl:22\ntest set: Test Failed at /tmp/tmpn9kjj_i0.jl:28\n\
    \  Expression: candidate([0.2, 3.0, 5.0]) == 34\n   Evaluated: 8 == 34\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn9kjj_i0.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn9kjj_i0.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpn9kjj_i0.jl:29\n  Expression: candidate([-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n   Evaluated: 25 == 165\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn9kjj_i0.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn9kjj_i0.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659977947
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpaa8a277x.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmpaa8a277x.jl:24\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 5 == 25\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpaa8a277x.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpaa8a277x.jl:22\ntest set: Test Failed at /tmp/tmpaa8a277x.jl:27\n\
    \  Expression: candidate([-1.0, -2.0, 8.0]) == 0\n   Evaluated: -1 == 0\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaa8a277x.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaa8a277x.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpaa8a277x.jl:28\n  Expression: candidate([0.2, 3.0, 5.0]) ==\
    \ 34\n   Evaluated: 8 == 34\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaa8a277x.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaa8a277x.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpaa8a277x.jl:29\n  Expression: candidate([-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n   Evaluated: 0 == 165\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaa8a277x.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaa8a277x.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659977940
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    double_the_difference([1,2,3,4,5,6])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the product of the numbers in the list that are odd.\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpng0up2ba.jl:18\nin expression starting at\
    \ /tmp/tmpng0up2ba.jl:18\n"
  stdout: ''
  timestamp: 1659977946
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum += i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0p3n31k6.jl:17\nin expression starting at\
    \ /tmp/tmp0p3n31k6.jl:17\n"
  stdout: ''
  timestamp: 1659977944
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%2 != 0\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5,6,7,8,9])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the product of all the numbers in a given list.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfxpq_jx1.jl:18\nin expression starting at\
    \ /tmp/tmpfxpq_jx1.jl:18\n"
  stdout: ''
  timestamp: 1659977946
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5,6])\n</cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgv9nsal2.jl:17\nin expression starting at\
    \ /tmp/tmpgv9nsal2.jl:17\n"
  stdout: ''
  timestamp: 1659977946
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 != 0\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5,6,7,8,9])\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a list of numbers and returns the product of the numbers\
    \ in the list that are odd. Ignore numbers that are negative or not integers.\n\
    For example, given [1,2,3,4,5,6,7,8,9], the function should return 60.\nWrite\
    \ a function that takes a list of numbers and returns the product of the numbers\
    \ in the list that are odd. Ignore numbers that are negative or not integers.\n\
    For example, given [1,2,3,4,5,6,7,8,9], the function should return 60.\nWrite\
    \ a function that takes a list of numbers and returns the product of the numbers\
    \ in the list that are odd. Ignore numbers that are negative or not integers.\n\
    For example, given [1,2,3,4,5,6,7,8,9], the function should return 60.\nWrite\
    \ a function that takes a list of numbers and returns the product of the numbers\
    \ in the list that are odd. Ignore numbers that are negative or not integers.\n\
    For example, given [1,2,3,4,5,6,7,8,9], the function should return 60.\nWrite\
    \ a function that takes a list of numbers and returns the product of the numbers\
    \ in the list that are odd. Ignore numbers that are negative or not integers.\n\
    For example, given [1,2,3,4,5,6,7,8,9], the function should return 60.\nWrite\
    \ a function that takes a list of numbers and returns the product of the numbers\
    \ in the list that are odd. Ignore numbers that are negative or not integers.\n\
    For example, given [1,2,3,4,5,6,7,8,9], the function should return 60.\nWrite\
    \ a function that takes a list of numbers and returns the product of the numbers\
    \ in the list that are odd. Ignore numbers that are negative or not integers.\n\
    For example, given [1,2,3,4,5,6,7,8,9], the function should return 60.\nWrite\
    \ a function that takes a list of numbers and returns the product of the numbers\
    \ in the list that are odd. Ignore numbers that are negative or not integers.\n\
    For example, given [1,2,3,4,5,6,7,8,9], the function should return 60.\nWrite\
    \ a function that takes a list of numbers and returns the product of the numbers\
    \ in the list that are odd. Ignore numbers that are negative or not integers.\n\
    For example, given [1,2,3,4,5,6,7,8,9], the function should return 60.\nWrite\
    \ a function that takes a list of numbers and returns the product of the numbers\
    \ in the list that are odd. Ignore numbers that are negative or not integers.\n\
    For example, given [1,2,3,4,5,6,7,8,9], the function should return 60.\nWrite\
    \ a function that takes a list of numbers and returns the product of the numbers\
    \ in the list that are odd. Ignore numbers that are negative or not integers.\n\
    For example, given [1,2,3,4,5,6,7,8,9], the function should return \nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe7vqwoqe.jl:18\nin expression starting at\
    \ /tmp/tmpe7vqwoqe.jl:18\n"
  stdout: ''
  timestamp: 1659977947
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if isinteger(i)\n           \
    \ sum += i\n        else\n            sum += i*i\n        end\n    end\n    return\
    \ sum\nend\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpuoiumtgt.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpuoiumtgt.jl:26\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 9 == 25\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpuoiumtgt.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpuoiumtgt.jl:24\ntest set: Error During Test\
    \ at /tmp/tmpuoiumtgt.jl:27\n  Test threw exception\n  Expression: candidate([0.1,\
    \ 0.2, 0.3]) == 0\n  InexactError: Int64(0.14)\n  Stacktrace:\n   [1] Int64\n\
    \     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7 [inlined]\n\
    \   [3] double_the_difference(lst::Vector{Float64})\n     @ Main /tmp/tmpuoiumtgt.jl:18\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpuoiumtgt.jl:27 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpuoiumtgt.jl:24\ntest set:\
    \ Test Failed at /tmp/tmpuoiumtgt.jl:28\n  Expression: candidate([-10.0, -20.0,\
    \ -30.0]) == 0\n   Evaluated: -60 == 0\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpuoiumtgt.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpuoiumtgt.jl:24\ntest set: Test Failed at /tmp/tmpuoiumtgt.jl:29\n\
    \  Expression: candidate([-1.0, -2.0, 8.0]) == 0\n   Evaluated: 5 == 0\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuoiumtgt.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuoiumtgt.jl:24\ntest set: Error\
    \ During Test at /tm"
  timestamp: 1659977948
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpugh45oep.jl:18\nin expression starting at\
    \ /tmp/tmpugh45oep.jl:18\n"
  stdout: ''
  timestamp: 1659977946
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpaa8a277x.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmpaa8a277x.jl:24\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 5 == 25\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpaa8a277x.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpaa8a277x.jl:22\ntest set: Test Failed at /tmp/tmpaa8a277x.jl:27\n\
    \  Expression: candidate([-1.0, -2.0, 8.0]) == 0\n   Evaluated: -1 == 0\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaa8a277x.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaa8a277x.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpaa8a277x.jl:28\n  Expression: candidate([0.2, 3.0, 5.0]) ==\
    \ 34\n   Evaluated: 8 == 34\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaa8a277x.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaa8a277x.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpaa8a277x.jl:29\n  Expression: candidate([-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n   Evaluated: 0 == 165\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaa8a277x.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaa8a277x.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659977940
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if isinteger(i)\n           \
    \ sum += i\n        else\n            sum += i*i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of numbers,\
    \ return the sum of squares of the numbers\n    in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n                   \n    If\
    \ the input list is empty, return 0.\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppjccgxfq.jl:20\nin expression starting at\
    \ /tmp/tmppjccgxfq.jl:20\n"
  stdout: ''
  timestamp: 1659977941
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum += i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n                   \n    If the input list is empty, return 0.\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphajg3mjm.jl:17\nin expression starting at\
    \ /tmp/tmphajg3mjm.jl:17\n"
  stdout: ''
  timestamp: 1659977939
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if isinteger(i)\n            sum +=\
    \ i\n        else\n            sum += i*i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfe4qth8m.jl:19\nin expression starting at\
    \ /tmp/tmpfe4qth8m.jl:19\n"
  stdout: ''
  timestamp: 1659977946
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%2 != 0\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5])\n</cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7])\n</cell>\n\
    <code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8])\n</cell>\n\
    <code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9])\n</cell>\n\
    <code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg0t3rruc.jl:18\nin expression starting at\
    \ /tmp/tmpg0t3rruc.jl:18\n"
  stdout: ''
  timestamp: 1659977946
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpci47h505.jl:17\nin expression starting at\
    \ /tmp/tmpci47h505.jl:17\n"
  stdout: ''
  timestamp: 1659977946
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 != 0\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n                   \n    If the input list is empty, return 0.\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnq00glvf.jl:17\nin expression starting at\
    \ /tmp/tmpnq00glvf.jl:17\n"
  stdout: ''
  timestamp: 1659977941
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmeem1s6j.jl:17\nin expression starting at\
    \ /tmp/tmpmeem1s6j.jl:17\n"
  stdout: ''
  timestamp: 1659977946
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i > 0\n            sum +=\
    \ i * i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5])\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy2dfwjkp.jl:18\nin expression starting at\
    \ /tmp/tmpy2dfwjkp.jl:18\n"
  stdout: ''
  timestamp: 1659977947
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n                   \n    If the input list is empty, return 0.\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv3k0i539.jl:18\nin expression starting at\
    \ /tmp/tmpv3k0i539.jl:18\n"
  stdout: ''
  timestamp: 1659977939
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if isinteger(i)\n           \
    \ sum += i\n        else\n            sum += i*i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the squares\
    \ of the numbers in the list that are odd.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpte786ifj.jl:20\nin expression starting at\
    \ /tmp/tmpte786ifj.jl:20\n"
  stdout: ''
  timestamp: 1659977947
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5,6])\n</cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,-3,4])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,-3,4.0])\n</cell>\n\
    <code language=julia-1.5>\ndouble_the_difference([1,2,-3,4.0,\"a\"])\n</cell>\n\
    <code language=julia-1.5>\ndouble_the_difference([1,2,-3,4.0,\"a\",5])\n</cell>\n\
    <code language=julia-1.5>\ndouble_the_difference([1,2,-3,4.0,\"a\",5,6])\n</cell>\n\
    <code language=julia-1.5>\ndouble_the_difference([1,2,-3,4.0,\"a\",5,6,7])\n</cell>\n\
    <code language=julia-1.5>\ndouble_the_difference([1,2,-3,4.0,\"a\",5,6,7,8])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,-3,4.0,\"a\",5,6,7,8,9])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,-3,4.0,\"a\",5,6,7,8,9,\"\
    a\"])\n</cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,-3,4.0,\"\
    a\",5,6,7,8,9,\"a\",10])\n</cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,-3,4.0,\"\
    a\",5,6,7,8,9,\"a\",10,11])\n</cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,-3,4.0,\"\
    a\",5,6,7,8,9,\"a\",10,11,\"a\"])\n</cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,-3,4.0,\"\
    a\",5,6,7,8,9,\"a\",10,11,\"a\",12])\n</cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,-3,4.0,\"\
    a\",5,6,7,8,9,\"a\",10,11,\"a\",12,13])\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,-3,4.0,\"a\",5,6,7,8,9,\"a\",10,11,\"a\",12,13,\"a\"\
    ])\n</cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,-3,4.0,\"a\"\
    ,5,6,7,8,9,\"a\",10,11,\"a\",12,13,\"a\",14])\n</cell\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp86n1s5yr.jl:18\nin expression starting at\
    \ /tmp/tmp86n1s5yr.jl:18\n"
  stdout: ''
  timestamp: 1659977947
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n                   \n    If the input list is empty, return 0.\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv3k0i539.jl:18\nin expression starting at\
    \ /tmp/tmpv3k0i539.jl:18\n"
  stdout: ''
  timestamp: 1659977939
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n                   \n    If the input list is empty, return 0.\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv3k0i539.jl:18\nin expression starting at\
    \ /tmp/tmpv3k0i539.jl:18\n"
  stdout: ''
  timestamp: 1659977939
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5,6])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the sum of the squares of the numbers in the list that are odd.\
    \ Ignore numbers that are negative or not integers.\nFor example, if the input\
    \ list is [1,2,3,4,5,6], the output should be 310.\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvo4j66hf.jl:18\nin expression starting at\
    \ /tmp/tmpvo4j66hf.jl:18\n"
  stdout: ''
  timestamp: 1659977947
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpaa8a277x.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmpaa8a277x.jl:24\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 5 == 25\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpaa8a277x.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpaa8a277x.jl:22\ntest set: Test Failed at /tmp/tmpaa8a277x.jl:27\n\
    \  Expression: candidate([-1.0, -2.0, 8.0]) == 0\n   Evaluated: -1 == 0\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaa8a277x.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaa8a277x.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpaa8a277x.jl:28\n  Expression: candidate([0.2, 3.0, 5.0]) ==\
    \ 34\n   Evaluated: 8 == 34\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaa8a277x.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaa8a277x.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpaa8a277x.jl:29\n  Expression: candidate([-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n   Evaluated: 0 == 165\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaa8a277x.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaa8a277x.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659977940
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    double_the_difference([1,2,3,4,5])\n</cell>\n<code language=julia-1.0>\ndouble_the_difference([1,2,3,4,5,6])\n\
    </cell>\n<code language=julia-1.0>\ndouble_the_difference([1,2,3,4,5,6,7])\n</cell>\n\
    <code language=julia-1.0>\ndouble_the_difference([1,2,3,4,5,6,7,8])\n</cell>\n\
    <code language=julia-1.0>\ndouble_the_difference([1,2,3,4,5,6,7,8,9])\n</cell>\n\
    <code language=julia-1.0>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.0>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11])\n\
    </cell>\n<code language=julia-1.0>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12])\n\
    </cell>\n<code language=julia-1.0>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13])\n\
    </cell>\n<code language=julia-1.0>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\n\
    </cell>\n<code language=julia-1.0>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    </cell>\n<code language=julia-1.0>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.0>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.0>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<code language=julia-1.0>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    </cell>\n<code language=julia-1.0>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.0>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<code language=julia-1.0>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9u0qa2f_.jl:18\nin expression starting at\
    \ /tmp/tmp9u0qa2f_.jl:18\n"
  stdout: ''
  timestamp: 1659977947
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum += i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n                   \n    If the input list is empty, return 0.\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphajg3mjm.jl:17\nin expression starting at\
    \ /tmp/tmphajg3mjm.jl:17\n"
  stdout: ''
  timestamp: 1659977939
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpcbbr_7q6.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpcbbr_7q6.jl:23\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 5 == 25\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpcbbr_7q6.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpcbbr_7q6.jl:21\ntest set: Test Failed at /tmp/tmpcbbr_7q6.jl:27\n\
    \  Expression: candidate([0.2, 3.0, 5.0]) == 34\n   Evaluated: 8 == 34\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcbbr_7q6.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcbbr_7q6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpcbbr_7q6.jl:28\n  Expression: candidate([-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n   Evaluated: 25 == 165\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcbbr_7q6.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcbbr_7q6.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659977942
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7pvun_q3.jl:18\nin expression starting at\
    \ /tmp/tmp7pvun_q3.jl:18\n"
  stdout: ''
  timestamp: 1659977939
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n                   \n    If the input list is empty, return 0.\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjoq7451u.jl:18\nin expression starting at\
    \ /tmp/tmpjoq7451u.jl:18\n"
  stdout: ''
  timestamp: 1659977947
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    double_the_difference([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.0>\n\
    double_the_difference([1,2,3,4,5,6,7,8,9,10,11])\n</cell>\n<code language=julia-1.0>\n\
    double_the_difference([1,2,3,4,5,6,7,8,9,10,11,12])\n</cell>\n<code language=julia-1.0>\n\
    double_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13])\n</cell>\n<code language=julia-1.0>\n\
    double_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\n</cell>\n<code language=julia-1.0>\n\
    double_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n</cell>\n<code language=julia-1.0>\n\
    double_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n</cell>\n<code\
    \ language=julia-1.0>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.0>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<code language=julia-1.0>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    </cell>\n<code language=julia-1.0>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.0>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<code language=julia-1.0>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    </cell>\n<code language=julia-1.0>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n\
    </cell>\n<code language=julia-1.0>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\n\
    </cell>\n<code language=julia-1.0>\ndouble_the_difference([1,2,3,4,5,6,7,\nusing\
    \ Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv_i4fg0l.jl:18\nin expression starting at\
    \ /tmp/tmpv_i4fg0l.jl:18\n"
  stdout: ''
  timestamp: 1659977947
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n                   \n    If the input list is empty, return 0.\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg_i0y_7_.jl:17\nin expression starting at\
    \ /tmp/tmpg_i0y_7_.jl:17\n"
  stdout: ''
  timestamp: 1659977939
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the product of the numbers in the list that are odd.\n\
    Ignore numbers that are negative or not integers.\nIf the input list is empty,\
    \ return 1.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4mm003jy.jl:18\nin expression starting at\
    \ /tmp/tmp4mm003jy.jl:18\n"
  stdout: ''
  timestamp: 1659977947
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5iorxcae.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmp5iorxcae.jl:24\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 5 == 25\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5iorxcae.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp5iorxcae.jl:22\ntest set: Test Failed at /tmp/tmp5iorxcae.jl:28\n\
    \  Expression: candidate([0.2, 3.0, 5.0]) == 34\n   Evaluated: 8 == 34\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5iorxcae.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5iorxcae.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp5iorxcae.jl:29\n  Expression: candidate([-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n   Evaluated: 25 == 165\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5iorxcae.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5iorxcae.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659977940
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    double_the_difference([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of integers in the list that are divisible\
    \ by 3.\n    \n    \n    If the input list is empty, return 0.\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptw5wd55w.jl:18\nin expression starting at\
    \ /tmp/tmptw5wd55w.jl:18\n"
  stdout: ''
  timestamp: 1659977947
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n                   \n    If the input list is empty, return 0.\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeaffnsn7.jl:18\nin expression starting at\
    \ /tmp/tmpeaffnsn7.jl:18\n"
  stdout: ''
  timestamp: 1659977947
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5])\n</cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,-3,4])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,-3,\"a\"])\n</cell>\n\
    <code language=julia-1.5>\ndouble_the_difference([1,2,-3,\"a\",\"b\"])\n</cell>\n\
    <code language=julia-1.5>\ndouble_the_difference([1,2,-3,\"a\",\"b\",\"c\"])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,-3,\"a\",\"b\"\
    ,\"c\",\"d\"])\n</cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,-3,\"\
    a\",\"b\",\"c\",\"d\",\"e\"])\n</cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,-3,\"\
    a\",\"b\",\"c\",\"d\",\"e\",\"f\"])\n</cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,-3,\"\
    a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\"])\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,-3,\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\"\
    ])\n</cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,-3,\"a\",\"\
    b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\"])\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,-3,\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\"\
    ,\"i\",\"j\"])\n</cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,-3,\"\
    a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\"])\n</cell>\n<code\
    \ language=julia-1.5>\ndouble_the_difference([1,2,-3,\"a\",\"b\",\"c\",\"d\",\"\
    e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\"])\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,-3,\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\"\
    ,\"i\",\"j\",\"k\",\"l\",\"m\"])\n</cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,-3,\"\
    \nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd3m7eig5.jl:18\nin expression starting at\
    \ /tmp/tmpd3m7eig5.jl:18\n"
  stdout: ''
  timestamp: 1659977947
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5iorxcae.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmp5iorxcae.jl:24\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 5 == 25\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5iorxcae.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp5iorxcae.jl:22\ntest set: Test Failed at /tmp/tmp5iorxcae.jl:28\n\
    \  Expression: candidate([0.2, 3.0, 5.0]) == 34\n   Evaluated: 8 == 34\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5iorxcae.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5iorxcae.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp5iorxcae.jl:29\n  Expression: candidate([-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n   Evaluated: 25 == 165\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5iorxcae.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5iorxcae.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659977940
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if isinteger(i)\n           \
    \ sum += i\n        else\n            sum += i*i\n    end\n    return sum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp496an3v1.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp496an3v1.jl:1\n\
    in expression starting at /tmp/tmp496an3v1.jl:1\n"
  stdout: ''
  timestamp: 1659977948
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 != 0\n            sum += x\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmp2jsw6lzp.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp2jsw6lzp.jl:23\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 5 == 25\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2jsw6lzp.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp2jsw6lzp.jl:21\ntest set: Error During Test\
    \ at /tmp/tmp2jsw6lzp.jl:24\n  Test threw exception\n  Expression: candidate([0.1,\
    \ 0.2, 0.3]) == 0\n  InexactError: Int64(0.6000000000000001)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] double_the_difference(lst::Vector{Float64})\n     @ Main /tmp/tmp2jsw6lzp.jl:15\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp2jsw6lzp.jl:24 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp2jsw6lzp.jl:21\ntest set:\
    \ Test Failed at /tmp/tmp2jsw6lzp.jl:26\n  Expression: candidate([-1.0, -2.0,\
    \ 8.0]) == 0\n   Evaluated: -1 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2jsw6lzp.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2jsw6lzp.jl:21\ntest set: Error\
    \ During Test at /tmp/tmp2jsw6lzp.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([0.2, 3.0, 5.0]) == 34\n  InexactError: Int64(8.2)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] double_the_difference(lst::Vector{Float64})\n     @ Main /tmp/tmp2jsw6lzp.jl:15\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansio"
  timestamp: 1659977942
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 != 0\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.4>\n\
    double_the_difference([1,2,3,4,5,6])\n</cell>\n<code language=julia-1.4>\n\"\"\
    \"\n    Given a list of numbers, return the sum of squares of the numbers\n  \
    \  in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n                   \n    If the input list is empty, return 0.\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl90e2erg.jl:18\nin expression starting at\
    \ /tmp/tmpl90e2erg.jl:18\n"
  stdout: ''
  timestamp: 1659977948
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 != 0\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5])\n</cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp570rp5tt.jl:18\nin expression starting at\
    \ /tmp/tmp570rp5tt.jl:18\n"
  stdout: ''
  timestamp: 1659977948
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n                   \n    If the input list is empty, return 0.\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv3k0i539.jl:18\nin expression starting at\
    \ /tmp/tmpv3k0i539.jl:18\n"
  stdout: ''
  timestamp: 1659977939
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5iorxcae.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmp5iorxcae.jl:24\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 5 == 25\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5iorxcae.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp5iorxcae.jl:22\ntest set: Test Failed at /tmp/tmp5iorxcae.jl:28\n\
    \  Expression: candidate([0.2, 3.0, 5.0]) == 34\n   Evaluated: 8 == 34\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5iorxcae.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5iorxcae.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp5iorxcae.jl:29\n  Expression: candidate([-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n   Evaluated: 25 == 165\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5iorxcae.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5iorxcae.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659977940
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    double_the_difference([1,2,3,4,5,6,7,8,9])\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the sum of the squares of the numbers in the list that\
    \ are odd. Ignore numbers that are negative or not integers.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplj93xsdn.jl:18\nin expression starting at\
    \ /tmp/tmplj93xsdn.jl:18\n"
  stdout: ''
  timestamp: 1659977948
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%2==1\n            sum +=\
    \ i\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp683x6w8l.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmp683x6w8l.jl:24\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 5 == 25\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp683x6w8l.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp683x6w8l.jl:22\ntest set: Test Failed at /tmp/tmp683x6w8l.jl:28\n\
    \  Expression: candidate([0.2, 3.0, 5.0]) == 34\n   Evaluated: 8 == 34\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp683x6w8l.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp683x6w8l.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp683x6w8l.jl:29\n  Expression: candidate([-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n   Evaluated: 25 == 165\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp683x6w8l.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp683x6w8l.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659977947
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 != 0\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    double_the_difference([1,2,3,4,5,6])\n</cell>\n<code language=julia-1.0>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.0>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    </cell>\n<code language=julia-1.0>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    </cell>\n<code language=julia-1.0>\ndouble_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnbfnkj8e.jl:18\nin expression starting at\
    \ /tmp/tmpnbfnkj8e.jl:18\n"
  stdout: ''
  timestamp: 1659977948
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5,6])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the square root of a number. \nThe function should take one argument,\
    \ x, and return the square root of x.\nThe function should raise an error if the\
    \ argument is negative.\nThe function should raise an error if the argument is\
    \ not an integer.\nThe function should raise an error if the argument is zero.\n\
    The function should raise an error if the argument is NaN.\nThe function should\
    \ raise an error if the argument is infinite.\nThe function should raise an error\
    \ if the argument is infinity.\nThe function should raise an error if the argument\
    \ is NaN.\nThe function should raise an error if the argument is infinite.\nThe\
    \ function should raise an error if the argument is infinity.\nThe function should\
    \ raise an error if the argument is NaN.\nThe function should raise an error if\
    \ the argument is infinite.\nThe function should raise an error if the argument\
    \ is infinity.\nThe function should raise an error if the argument is NaN.\nThe\
    \ function should raise an error if the argument is infinite.\nThe function should\
    \ raise an error if the argument is infinity.\nThe function should raise an error\
    \ if the argument is NaN.\nThe function should raise an error if the argument\
    \ is infinite.\nThe function should raise an error if the argument is infinity.\n\
    The function should raise an error if the argument is NaN.\nThe function should\
    \ raise an error if the argument is infinite.\nThe function should raise an error\
    \ if the argument is infinity.\nThe function should raise an error if the argument\
    \ is NaN.\nThe function should raise an error if the argument is infinite.\nThe\
    \ function should raise an error if the argument is infinity.\nThe function should\
    \ raise an error if the argument is NaN.\nThe function should raise an error if\
    \ the argument is infinite.\nThe function should raise an error if the argument\
    \ is infinity.\nThe function should raise an error if the argument is NaN.\nThe\
    \ function should raise an error if the argument is infinite.\nThe function should\
    \ raise an error if the argument is infinity.\nThe function should raise an error\
    \ if the argument is NaN.\nThe function should raise an error if the argument\
    \ is infinite.\nThe function should raise an error if the argument is infinity.\n\
    The function should raise an error if the argument is NaN.\nThe function should\
    \ raise an error if the argument is infinite.\nThe function should raise an error\
    \ if the argument is infinity.\nThe function should raise an error if the argument\
    \ is NaN.\nThe function should raise an error if the argument is infinite.\nThe\
    \ function should raise an error if the argument is infinity.\nThe function should\
    \ raise an error if the argument is NaN.\nThe function should raise an error if\
    \ the argument is infinite.\nThe function should raise an error if the argument\
    \ is \nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t\
    @test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\
    \t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0, -30.0])\
    \ == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0,\
    \ 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp719iwgs2.jl:18\nin expression starting at\
    \ /tmp/tmp719iwgs2.jl:18\n"
  stdout: ''
  timestamp: 1659977948
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6911czpd.jl:18\nin expression starting at\
    \ /tmp/tmp6911czpd.jl:18\n"
  stdout: ''
  timestamp: 1659977943
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum += i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n                   \n    If the input list is empty, return 0.\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphajg3mjm.jl:17\nin expression starting at\
    \ /tmp/tmphajg3mjm.jl:17\n"
  stdout: ''
  timestamp: 1659977939
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpugh45oep.jl:18\nin expression starting at\
    \ /tmp/tmpugh45oep.jl:18\n"
  stdout: ''
  timestamp: 1659977946
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n                   \n    If the input list is empty, return\
    \ 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 != 0\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the product of the numbers in the list that are odd.\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpscprld3f.jl:18\nin expression starting at\
    \ /tmp/tmpscprld3f.jl:18\n"
  stdout: ''
  timestamp: 1659977948
