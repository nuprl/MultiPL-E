name: HumanEval_60_sum_to_n
language: jl
prompt: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n           \
  \             \"\"\"\nfunction sum_to_n(n::Int64)::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
  \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
  \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
completions: ["    if n == 1 \n        then return 1 \n        else return n + sum_to_n(n-1)\
    \ \nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the factorial of a number.", "    if n == 1\
    \ \n        then return 1\n        else return n + sum_to_n(n - 1)\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\nsum_to_n(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the factorial of a number.", "    if n == 0\
    \ \n        then return 0\n        else return n + sum_to_n(n-1)\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<text>\nExercise 4\nWrite a\
    \ function that returns the factorial of a number.", "    if n == 0 \n       \
    \ then return 0 \n        else return n + sum_to_n(n - 1)\nend", "    if n ==\
    \ 0 \n        then return 0\n    else \n        return n + sum_to_n(n-1)\nend",
  "    if n == 0 \n        then return 0\n    else \n        sum_to_n(n - 1) + n\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<text>\nExercise\n\
    Write a function that sums numbers from 1 to n but stops when it reaches n.",
  "    if n == 0 \n        then return 0\n    else \n        return n + sum_to_n(n-1)\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that sums numbers from 1 to n.", "    if n == 1 \n     \
    \   then return 1 \n        else return n*sum_to_n(n-1) \nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100000)\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(1000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100000000)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10000000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100000000000)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10000000000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10000000000001)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10000000000002)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10000000000003)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10000000000004)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10000000000005)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10000000000006)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10000000000007)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10000000000008)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10000000000009)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10000000000010)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10000000000011)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10000000000012)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10000000000013)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10000000000014)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10000000000015)\n</cell>\n<code language=julia-1.5>\n", "    if n ==\
    \ 1 \n        then return 1\n    else \n        return n + sum_to_n(n-1)\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a number.", "    if n == 1 \n \
    \       then return 1 \n        else return n*sum_to_n(n-1) \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100000)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100000000)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10000000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100000000000)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000001)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000002)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000003)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000004)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000005)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000006)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000007)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000008)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000009)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000010)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000011)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000012)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000013)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000014)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000015)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000016)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10000000000",
  "    if n == 0 \n        then return 0 \n        else return n + sum_to_n(n-1) \n\
    end\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the factorial of a number.", "    if n == 1\
    \ \n        then return 1 \n        else return n*sum_to_n(n-1) \nend\n</cell>\n\
    <code language=julia-1.0>\nsum_to_n(10)\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns the factorial of a number.", "    if n == 0 \n       \
    \ then return 0\n        else return n + sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a function that sums numbers\
    \ from 1 to n.", "    if n == 1 \n        then return 1\n        else return n*sum_to_n(n-1)\n\
    \    end\nend", "    if n == 1 \n        then return 1 \n        else return n*sum_to_n(n-1)\
    \ \nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the factorial of a number.", "    if n == 1\
    \ \n        then return 1\n    else \n        return n + sum_to_n(n-1)\nend\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1000)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10000)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100000)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(1000000)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(10000000)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100000000)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(1000000000)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(10000000000)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100000000000)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(1000000000000)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(10000000000000)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100000000000000)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100000000000000000)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(10000000000000000000)\n</cell>\n\
    <code language=julia-1.3>\nsum_to_n(100000000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(1000000000000000000000)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.3>\nsum_to_n(1000000000000000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10000000000000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100000000000000000000000000)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1000000000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(10000000000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(", "    if n == 0 \n        then\
    \ return 0\n        else return n + sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(10)\n</cell>\n<text>\nExercise\nWrite a function that sums numbers from\
    \ 1 to n and returns the sum.", "    if n == 1 \n        then return 1 \n    \
    \    else return n*sum_to_n(n-1) \nend\n</cell>\n<code language=julia-1.0>\nsum_to_n(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n == 1 \n        then return 1 \n        else return n*sum_to_n(n-1)\
    \ \nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that sums numbers from 1 to n where n is given as a parameter.\
    \ \nFor example, sum_to_n(10) should return 55.", "    if n == 0 \n        then\
    \ return 0\n    else \n        return n + sum_to_n(n - 1)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ given number.", "    if n == 1 \n        then return 1 \n        else return\
    \ n*sum_to_n(n-1) \nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that sums numbers from 1 to n where n is\
    \ given as an input argument.", "    if n == 0 \n        then return 0\n    else\
    \ \n        sum_to_n(n - 1) + n\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<text>\nExercise\nWrite a function that sums numbers from 1 to n.", " \
    \   if n == 0 \n        then return 0\n    else \n        sum_to_n(n - 1) + n\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<text>\nExercise\n\
    Write a function that sums numbers from 1 to n using recursion.", "    if n ==\
    \ 1 \n        then return 1 \n        else return n*sum_to_n(n-1) \nend", "  \
    \  if n == 0 \n        then return 0\n        else return n + sum_to_n(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1000)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(10000)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100000)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1000000)\n</cell>\n\
    <code language=julia-1.3>\nsum_to_n(10000000)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100000000)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1000000000)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(10000000000)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100000000000)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1000000000000)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(1000000000001)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(1000000000002)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1000000000003)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(1000000000004)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(1000000000005)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1000000000006)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(1000000000007)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(1000000000008)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1000000000009)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(1000000000010)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(1000000000011)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1000000000012)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(1000000000013)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(1000000000014)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1000000000015)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(1000000000016)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(10000000000", "    if n == 0 \n        then return 0\n    else \n   \
    \     return n + sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.0>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.0>\nsum_to_n(100)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a number.", "    if n == 1 \n \
    \       then return 1\n        else return n + sum_to_n(n-1)\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\nsum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the factorial of a number.", "    if n == 0 \n       \
    \ then return 0\n    else \n        return n + sum_to_n(n-1)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<text>\nThe function above is recursive,\
    \ meaning that it calls itself to compute the next number. Let's see how it works:",
  "    if n == 1 \n        then return 1 \n        else return n*sum_to_n(n-1) \n\
    end\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the factorial of a number.", "    if n == 1\
    \ \n        then return 1 \n        else return n + sum_to_n(n - 1)\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ factorial of a number.", "    if n == 0 \n        then return 0\n        else\
    \ return n + sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.0>\nsum_to_n(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n == 0 \n        then return 0 \n        else return n + sum_to_n(n-1)\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    sum_to_n_recursive(n::Int64)::Int64\n    \n    Recursive version of\
    \ sum_to_n\n    \n    Written by Antonio Ochi Hagi\n    \n    Sums numbers from\
    \ 1 to n\n    \n    Source: https://en.wikipedia.org/wiki/Recursion_(computer_science)\n\
    \"\"\"", "    if n == 0 \n        then return 0 \n        else return n + sum_to_n(n-1)\
    \ \nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the factorial of a number.", "    if n == 1\
    \ \n        then return 1\n        else return n*sum_to_n(n-1)\nend", "    if\
    \ n == 0 \n        then return 0\n    else \n        return n + sum_to_n(n - 1)\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<text>\nExercise 2\nWrite a function that sums numbers\
    \ from 1 to n inclusive.", "    if n == 1 \n        then return 1 \n        else\
    \ return n + sum_to_n(n-1) \nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10000)\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(100000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10000000)\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(100000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000001)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000002)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000003)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000004)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000005)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000006)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000007)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000008)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000009)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000010)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000011)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000012)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000013)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000014)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000015)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000016)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000017)\n", "    if n == 1\
    \ \n        then return 1 \n        else return n*sum_to_n(n-1) \nend\n</cell>\n\
    <code language=julia-1.0>\nsum_to_n(10)\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns the factorial of a number.", "    if n == 0 \n       \
    \ then return 0\n    else \n        sum_to_n(n - 1) + n\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a given number. \nThe factorial of a number $n$ is defined as:", "    if\
    \ n == 1 \n        then return 1 \n        else return n*sum_to_n(n-1) \nend\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<text>\nExercise 3\n\
    Write a function that sums numbers from 1 to n.", "    if n == 0 \n        then\
    \ return 0 \n        else return n + sum_to_n(n-1) \nend\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(10)\n</cell>\n<text>\nThe recursive function sum_to_n is called a tail\
    \ recursive function, which means that it can be easily transformed into a loop.\
    \ \nThe Julia compiler can optimize tail recursive functions by converting them\
    \ into loops. \nThe compiler will convert a tail recursive function into a loop\
    \ if it can prove that the function does not depend on the previous values of\
    \ the arguments. \nIn this case, sum_to_n does not depend on the previous values\
    \ of n. \nThe compiler can prove this by inlining the function and removing the\
    \ recursion. \nThe compiler will convert a tail recursive function into a loop\
    \ if it can prove that the function does not depend on the previous values of\
    \ the arguments. \nIn this case, sum_to_n does not depend on the previous values\
    \ of n. \nThe compiler can prove this by inlining the function and removing the\
    \ recursion. \nThe compiler will convert a tail recursive function into a loop\
    \ if it can prove that the function does not depend on the previous values of\
    \ the arguments. \nIn this case, sum_to_n does not depend on the previous values\
    \ of n. \nThe compiler can prove this by inlining the function and removing the\
    \ recursion. \nThe compiler will convert a tail recursive function into a loop\
    \ if it can prove that the function does not depend on the previous values of\
    \ the arguments. \nIn this case, sum_to_n does not depend on the previous values\
    \ of n. \nThe compiler can prove this by inlining the function and removing the\
    \ recursion. \nThe compiler will convert a tail recursive function into a loop\
    \ if it can prove that the function does not depend on the previous values of\
    \ the arguments. \nIn this case, sum_to_n does not depend on the previous values\
    \ of n. \nThe compiler can prove this by inlining the function and removing the\
    \ recursion. \nThe compiler will convert a tail recursive function into a loop\
    \ if it can prove that the function does not depend on the previous values of\
    \ the arguments. \nIn this case, sum_to_n does not depend on the previous values\
    \ of n. \nThe compiler can prove this by inlining the function and removing the\
    \ recursion. \nThe compiler will convert a tail recursive function into a loop\
    \ if it can prove that the function does not depend on the previous values of\
    \ the arguments. \nIn this case, sum_to_n does not depend on the previous values\
    \ of n. \nThe compiler can prove this by inlining the function and removing the\
    \ recursion. \nThe compiler will convert a tail recursive function into a loop\
    \ if it can prove that the function does not depend on the previous values of\
    \ the arguments. \nIn this case, sum_to_n does not depend on the previous values\
    \ of n. ", "    if n == 0 \n        then return 0\n    else \n        return n\
    \ + sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.0>\nsum_to_n(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that sums numbers from 1 to n where n is\
    \ given as an argument.", "    if n == 0 \n        then return 0 \n        else\
    \ return n + sum_to_n(n-1) \nend", "    if n == 1 \n        then return 1\n  \
    \      else return n*sum_to_n(n-1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a number.", "    if n == 1 \n        then return 1 \n        else return\
    \ n + sum_to_n(n - 1)\nend", "    if n == 0 \n        then return 0\n    else\
    \ \n        return n + sum_to_n(n - 1)\nend\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a number.", "    if n == 0 \n        then return 0\n        else return n\
    \ + sum_to_n(n - 1)\nend\n</cell>\n<code language=julia-1.0>\nsum_to_n(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the factorial of a number.",
  "    if n == 0 \n        then return 0\n        else return n + sum_to_n(n - 1)\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100000)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100000000)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10000000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100000000000)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000001)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000002)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000003)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000004)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000005)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000006)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000007)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000008)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000009)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000010)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000011)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000012)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000013)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000014)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000015)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000016)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000017)\n",
  "    if n == 1 \n        then return 1 \n        else return n*sum_to_n(n-1) \n\
    end\n</cell>\n<code language=julia-1.0>\nsum_to_n(10)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.0>\nsum_to_n(1000)\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(10000)\n</cell>\n<code language=julia-1.0>\nsum_to_n(100000)\n\
    </cell>\n<code language=julia-1.0>\nsum_to_n(1000000)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(10000000)\n</cell>\n<code language=julia-1.0>\nsum_to_n(100000000)\n\
    </cell>\n<code language=julia-1.0>\nsum_to_n(1000000000)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(10000000000)\n</cell>\n<code language=julia-1.0>\nsum_to_n(100000000000)\n\
    </cell>\n<code language=julia-1.0>\nsum_to_n(1000000000000)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(10000000000000)\n</cell>\n<code language=julia-1.0>\nsum_to_n(10000000000001)\n\
    </cell>\n<code language=julia-1.0>\nsum_to_n(10000000000002)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(10000000000003)\n</cell>\n<code language=julia-1.0>\nsum_to_n(10000000000004)\n\
    </cell>\n<code language=julia-1.0>\nsum_to_n(10000000000005)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(10000000000006)\n</cell>\n<code language=julia-1.0>\nsum_to_n(10000000000007)\n\
    </cell>\n<code language=julia-1.0>\nsum_to_n(10000000000008)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(10000000000009)\n</cell>\n<code language=julia-1.0>\nsum_to_n(10000000000010)\n\
    </cell>\n<code language=julia-1.0>\nsum_to_n(10000000000011)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(10000000000012)\n</cell>\n<code language=julia-1.0>\nsum_to_n(10000000000013)\n\
    </cell>\n<code language=julia-1.0>\nsum_to_n(10000000000014)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(10000000000015)\n</cell>\n<code language=julia-1.0>\n", "    if n ==\
    \ 1 \n        then return 1 \n        else return n*sum_to_n(n-1) \nend", "  \
    \  if n == 0 \n        then return 0 \n        else return n + sum_to_n(n - 1)\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100000)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100000000)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10000000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100000000000)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000001)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000002)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000003)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000004)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000005)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000006)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000007)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000008)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000009)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000010)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000011)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000012)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000013)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000014)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000015)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000016)\n",
  "    if n <= 0 \n        then return 0 \n        else return n + sum_to_n(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000)\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(10000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100000000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000001)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000002)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000003)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000004)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000005)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000006)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000007)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000008)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000009)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000010)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000011)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000012)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000013)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000014)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000015)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000016)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100", "    if n == 0 \n        then return 0 \n        else return n\
    \ + sum_to_n(n-1)\n    end\nend", "    if n == 1 \n        then return 1 \n  \
    \      else return n*sum_to_n(n-1) \nend\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a number.", "    if n == 1 \n        then return 1 \n        else return\
    \ n + sum_to_n(n - 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10000)\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(100000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10000000)\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(100000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000001)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000002)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000003)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000004)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000005)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000006)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000007)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000008)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000009)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000010)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000011)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000012)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000013)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000014)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000015)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000016)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10000000000", "    if n == 0 \n \
    \       then return 0\n    else \n        sum_to_n(n - 1) + n\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the factorial of a number.", "    if n == 0 \n       \
    \ then return 0 \n        else return n + sum_to_n(n - 1)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the factorial of a number.", "    if n == 1 \n       \
    \ then return 1\n        else return n + sum_to_n(n - 1)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100000)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100000000)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10000000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100000000000)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000001)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000002)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000003)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000004)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000005)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000006)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000007)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000008)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000009)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000010)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000011)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000012)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000013)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000014)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000015)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000016)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10000000000",
  "    if n == 1 \n        then return 1\n        else return n*sum_to_n(n-1)\n  \
    \  end\nend\n</cell>\n<code language=julia-1.0>\nsum_to_n(10)\n</cell>\n<text>\n\
    The function sum_to_n is recursive, meaning that it will call itself until it\
    \ reaches the base case where it returns 1.", "    if n <= 0\n        error(\"\
    n must be positive\")\n    end\n    sum = 0\n    for i in 1:n\n        sum = sum\
    \ + i\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(0)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1)\n</cell>\n<code language=julia-1.5>\nsum_to_n(2)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(3)\n</cell>\n<code language=julia-1.5>\nsum_to_n(4)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(6)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(7)\n</cell>\n<code language=julia-1.5>\nsum_to_n(8)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(9)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(11)\n</cell>\n<code language=julia-1.5>\nsum_to_n(12)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(13)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(14)\n</cell>\n<code language=julia-1.5>\nsum_to_n(15)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(16)\n</cell>\n<code language=julia-1.5>\nsum_to_n(17)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(18)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(19)\n</cell>\n<code language=julia-1.5>\nsum_to_n(20)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(21)\n</cell>\n<code language=julia-1.5>\nsum_to_n(22)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(23)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(24)\n</cell>\n<code language=julia-1.5>\nsum_to_n(25)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(26)\n</cell>\n<code language=julia-1.5>\nsum_to_n(27)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(28)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(29)\n</cell>\n<code language=juli", "    if n == 0 \n        then return\
    \ 0\n    else \n        return n + sum_to_n(n - 1)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<text>\nThe function sum_to_n is recursive, meaning that\
    \ it calls itself to compute the next number. Let's see how it works:", "    if\
    \ n == 1 \n        then return 1 \n        else return n + sum_to_n(n-1) \nend\n\
    </cell>\n<code language=julia-1.0>\nsum_to_n(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a number.", "    if n == 1 \n \
    \       then return 1 \n        else return n + sum_to_n(n - 1)\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the factorial of a number.", "    if n == 0 \n       \
    \ then return 0 \n        else return n + sum_to_n(n - 1)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a number.", "    if n == 0 \n        then return\
    \ 0 \n        else return n + sum_to_n(n - 1)\n    end\nend", "    if n == 0 \n\
    \        then return 0\n        else return n + sum_to_n(n - 1)\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<text>\nExercise\nWrite a function that returns the factorial\
    \ of a number.", "    if n == 1 \n        then return 1 \n        else return\
    \ n + sum_to_n(n - 1) \nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10000)\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(100000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10000000)\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(100000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000001)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000002)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000003)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000004)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000005)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000006)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000007)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000008)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000009)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000010)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000011)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000012)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000013)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000014)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000015)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000016)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000017)\n", "    if n == 0\
    \ \n        then return 0\n    else \n        return n + sum_to_n(n - 1)\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the factorial of a number.", "    if n == 1 \n \
    \       then return 1\n        else return n + sum_to_n(n-1)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100000)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100000000)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10000000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100000000000)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10000000000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100000000000000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(100000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000000000000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(1000000000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10000000000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100000000000000000000000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10000000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(", "    if n == 0 \n        then\
    \ return 0\n        else return n + sum_to_n(n - 1)\nend\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(10)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the factorial\
    \ of a number.", "    if n == 0 \n        then return 0\n    else \n        return\
    \ n + sum_to_n(n - 1)\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<text>\nExercise: Write a function that returns the factorial of a number.",
  "    if n == 1 \n        then return 1 \n        else return n*sum_to_n(n-1) \n\
    end\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the factorial of a number.", "    if n <= 0\n\
    \        error(\"n must be positive\")\n    else\n        sum_to_n_aux(n, 0)\n\
    end", "    if n == 1 \n        then return 1 \n        else return n*sum_to_n(n-1)\
    \ \nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes an array of numbers and returns the sum of the\
    \ squares of the numbers.", "    if n == 1 \n        then return 1 \n        else\
    \ return n*sum_to_n(n-1) \nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that sums numbers from 1 to n but\
    \ stops when the sum is greater than n.", "    if n == 1 \n        then return\
    \ 1\n        else return n + sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(10)\n</cell>\n<text>\nThe function sum_to_n has type Int64 and is defined\
    \ on line 3. The function body is indented with 4 spaces. Julia allows us to write\
    \ code in a more readable way by indenting code with 4 spaces. Julia also allows\
    \ us to write long lines with \\ to continue the line on the next line. Julia\
    \ also allows us to write long lines with \\ to continue the line on the next\
    \ line and to write long lines with \\ to continue the line on the next line and\
    \ to write long lines with \\ to continue the line on the next line and to write\
    \ long lines with \\ to continue the line on the next line and to write long lines\
    \ with \\ to continue the line on the next line and to write long lines with \\\
    \ to continue the line on the next line and to write long lines with \\ to continue\
    \ the line on the next line and to write long lines with \\ to continue the line\
    \ on the next line and to write long lines with \\ to continue the line on the\
    \ next line and to write long lines with \\ to continue the line on the next line\
    \ and to write long lines with \\ to continue the line on the next line and to\
    \ write long lines with \\ to continue the line on the next line and to write\
    \ long lines with \\ to continue the line on the next line and to write long lines\
    \ with \\ to continue the line on the next line and to write long lines with \\\
    \ to continue the line on the next line and to write long lines with \\ to continue\
    \ the line on the next line and to write long lines with \\ to continue the line\
    \ on the next line and to write long lines with \\ to continue the line on the\
    \ next line and to write long lines with \\ to continue the line on the next line\
    \ and to write long lines with \\ to continue the line on the next line and to\
    \ write long lines with \\ to continue the line on the next line and to write\
    \ long lines with \\ to continue the line on the next line and to write long lines\
    \ with \\ to continue the line on the next line and to write long lines with \\\
    \ to continue the line on the next line and to write long lines with \\ to continue\
    \ the line on the next line and to write long lines with \\ to continue the line\
    \ on the next line and to write long lines with \\ to continue the line on the\
    \ next line and to write long lines with \\ to continue the line on the next line\
    \ and to write long lines with \\ to continue the line on the next line and ",
  "    if n == 0 \n        then return 0\n    else \n        return n + sum_to_n(n-1)\n\
    end", "    if n == 1 \n        then return 1 \n        else return n*sum_to_n(n-1)\
    \ \nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<text>\nThe\
    \ function factorial is a function that multiplies numbers from 1 to n.\n\"\"\"\
    factorial is a function that multiplies numbers from 1 to n.\n\"\"\"", "    if\
    \ n == 1 \n        then return 1 \n        else return n + sum_to_n(n-1) \nend",
  "    if n == 1 \n        then return 1\n        else return n + sum_to_n(n - 1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<text>\n\
    The function sum_to_n is recursive, meaning that it will call itself until it\
    \ reaches some base case. For example, if we call sum_to_n(10), it will call itself\
    \ with n = 9 and then with n = 8 and then with n = 7 and then with n = 6 and then\
    \ with n = 5 and then with n = 4 and then with n = 3 and then with n = 2 and finally\
    \ with n = 1 and then it will return 1 because n = 1 is the base case. In the\
    \ last case, the function will return n + sum_to_n(n - 1), which is n + sum_to_n(9),\
    \ which is n + sum_to_n(8) and so on. As you can see, this function is very similar\
    \ to the function sum_to_n(n::Int64)::Int64 defined earlier.", "    if n == 0\
    \ \n        then return 0 \n        else return n + sum_to_n(n - 1)\nend\n</cell>\n\
    <code language=julia-1.0>\nsum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the factorial of a number.", "    if n == 1 \n       \
    \ then return 1 \n        else return n*sum_to_n(n-1) \nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a number.", "    if n == 0 \n        then return 0 \n        else return\
    \ n + sum_to_n(n - 1)\nend", "    if n == 1 \n        then return 1 \n       \
    \ else return n*sum_to_n(n-1) \nend", "    if n == 0 \n        then return 0 \n\
    \        else return n + sum_to_n(n - 1)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10000)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(100000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10000000)\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(100000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000001)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000002)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000003)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000004)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000005)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000006)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000007)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000008)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000009)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000010)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000011)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000012)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000013)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000014)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000015)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000016)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000017)\n", "    if n == 0\
    \ \n        then return 0 \n        else return n + sum_to_n(n-1) \nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that sums numbers from 1 to n.", "    if n == 0 \n        then return\
    \ 0\n    else \n        return n + sum_to_n(n - 1)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a function that sums numbers\
    \ from 1 to n where n is given as an input argument.", "    if n == 0 \n     \
    \   then return 0 \n        else return n + sum_to_n(n - 1)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100000)\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(1000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100000000)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10000000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100000000000)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000001)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000002)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000003)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000004)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000005)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000006)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000007)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000008)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000009)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000010)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000011)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000012)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000013)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000014)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000015)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000016)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000017)\n",
  "    if n == 0 \n        then return 0\n        else return n + sum_to_n(n - 1)\n\
    end\n</cell>\n<code language=julia-1.4>\nsum_to_n(10)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the factorial of a number.", "    if n == 0\
    \ \n        then return 0\n    else \n        return n + sum_to_n(n - 1)\nend\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a number.", "    if n == 1 \n \
    \       then return 1 \n        else return n*sum_to_n(n-1) \nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a number.", "    if n == 0 \n        then return\
    \ 0\n    else \n        return n + sum_to_n(n - 1)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a given number.", "    if n == 0 \n        then return 0\n        else return\
    \ n + sum_to_n(n - 1)\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n == 1 \n        then return 1 \n        else return n + sum_to_n(n-1)\
    \ \nend\n</cell>\n<code language=julia-1.0>\nsum_to_n(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the factorial of a number.", "    if n == 0\
    \ \n        then return 0 \n        else return n + sum_to_n(n-1) \nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the factorial of a number.", "    if n == 1 \n       \
    \ then return 1 \n        else return n*sum_to_n(n-1) \nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a number.", "    if n == 1 \n        then return 1 \n        else return\
    \ n + sum_to_n(n-1) \nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n == 1 \n        then return 1 \n        else return n*sum_to_n(n-1)\
    \ \nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the factorial of a number.", "    if n == 1\
    \ \n        then return 1 \n        else return n*sum_to_n(n-1) \nend\n</cell>\n\
    <code language=julia-1.0>\nsum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the factorial of a number.", "    if n == 1 \n       \
    \ then return 1 \n        else return n*sum_to_n(n-1) \nend\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.0>\nsum_to_n(100)\n</cell>\n<text>\n\
    Exercise: Write a function that returns the factorial of a number.", "    if n\
    \ == 0 \n        then return 0\n        else return n + sum_to_n(n - 1)\nend",
  "    if n == 1 \n        then return 1 \n        else return n + sum_to_n(n-1) \n\
    end\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the factorial of a number.", "    if n == 1\
    \ \n        then return 1\n        else return n*sum_to_n(n-1)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<text>\nExercise: Write\
    \ a function that sums numbers from 1 to n.", "    if n == 1 \n        then return\
    \ 1\n    else \n        return n + sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<text>\nExercise\nWrite a function that sums numbers from\
    \ 1 to n but stops when it reaches n.", "    if n == 0 \n        then return 0\n\
    \    else \n        return n + sum_to_n(n - 1)\nend", "    if n == 1 \n      \
    \  then return 1 \n        else return n*sum_to_n(n-1) \nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a function that sums numbers\
    \ from 1 to n. \nThe function should take n as an argument.", "    if n == 0 \n\
    \        then return 0 \n        else return n + sum_to_n(n - 1)\nend", "    if\
    \ n == 0 \n        then return 0\n        else return n + sum_to_n(n - 1)\nend\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a number.", "    if n == 1 \n \
    \       then return 1 \n        else return n*sum_to_n(n-1) \nend\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a number.", "    if n == 1 \n        then return\
    \ 1\n        else return n + sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(10)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the factorial\
    \ of a number.", "    if n == 0 \n        then return 0 \n        else return\
    \ n + sum_to_n(n - 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that sums numbers from 1 to n but\
    \ stops when the sum is greater than n.", "    if n == 0 \n        then return\
    \ 0\n    else \n        sum_to_n(n - 1) + n\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<text>\nExercise\nWrite a function that sums numbers from\
    \ 1 to n.", "    if n <= 0\n        error(\"n must be positive\")\n    else\n\
    \        return n\nend", "    if n == 0 \n        then return 0\n    else \n \
    \       return n + sum_to_n(n - 1)\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a number.", "    if n == 0 \n        then return 0\n        else return n\
    \ + sum_to_n(n - 1)\n    end\nend\n</cell>\n<code language=julia-1.0>\nsum_to_n(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n == 0 \n        then return 0\n    else \n        return\
    \ n + sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n\
    <text>\nThe function sum_to_n is recursive. It calls itself recursively until\
    \ it reaches 0. The base case is when n is 0. The function returns the sum of\
    \ 1 to n.", "    if n == 0 \n        then return 0\n    else \n        return\
    \ n + sum_to_n(n-1)\nend", "    if n == 0 \n        then return 0\n        else\
    \ return n + sum_to_n(n - 1)\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10000)\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(100000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10000000)\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(100000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10000000000000)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10000000000001)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10000000000002)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10000000000003)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10000000000004)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10000000000005)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10000000000006)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10000000000007)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10000000000008)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10000000000009)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10000000000010)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10000000000011)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10000000000012)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10000000000013)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10000000000014)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10000000000015)\n\
    </cell>\n<code language=julia-1.5>\n", "    if n == 1 \n        then return 1\
    \ \n        else return n*sum_to_n(n-1) \nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a number.", "    if n == 1 \n        then return 1\n        else return n*sum_to_n(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\nsum_to_n(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a number.", "    if\
    \ n == 1 \n        then return 1\n        else return n + sum_to_n(n-1)\nend",
  "    if n == 0 \n        then return 0 \n        else return n + sum_to_n(n - 1)\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<text>\nThe function\
    \ sum_to_n is recursive, meaning that it calls itself to compute the next number.\
    \ Let's see how it works:", "    if n == 0 \n        then return 0\n    else \n\
    \        return n + sum_to_n(n - 1)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a number.", "    if n == 0 \n        then return 0\n        else return n\
    \ + sum_to_n(n-1)\n    end\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<text>\nExercise 2\n\
    Write a function that sums numbers from 1 to n (inclusive) using recursion.",
  "    if n == 1 \n        then return 1\n        else return n*sum_to_n(n-1)\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<text>\nExercise: Write\
    \ a function that sums numbers from 1 to n but stops when it reaches n.", "  \
    \  if n == 0 \n        then return 0 \n        else return n + sum_to_n(n-1) \n\
    end\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the factorial of a number.", "    if n == 0\
    \ \n        then return 0 \n        else return n + sum_to_n(n - 1)\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100000)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100000000)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10000000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100000000000)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10000000000000)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10000000000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10000000000001)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10000000000001)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10000000000002)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10000000000002)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10000000000003)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10000000000003)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10000000000004)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10000000000004)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10000000000005)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10000000000005)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10000000000006)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10000000000006)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10000000000007)\n</cell>\n<code language=julia-1.5>\nsum", "    if n\
    \ == 0 \n        then return 0 \n        else return n + sum_to_n(n - 1)\nend",
  "    if n == 0 \n        then return 0\n        else return n + sum_to_n(n-1)\n\
    end\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<text>\nExercise:\
    \ Write a function that sums numbers from 1 to n and returns the sum.", "    if\
    \ n <= 0 \n        then return 0\n        else return n + sum_to_n(n-1)\nend\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    sum_to_n_recursive is a function that sums numbers from 1 to n.\n\"\
    \"\"", "    if n == 0 \n        then return 0\n    else \n        return n + sum_to_n(n\
    \ - 1)\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that sums numbers from 1 to n and returns the sum\
    \ of the squares of the numbers.", "    if n == 1 \n        then return 1\n  \
    \      else return n*sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a number.", "    if n == 0 \n        then return 0\n        else return n\
    \ + sum_to_n(n-1)\n    end\nend\n</cell>\n<code language=julia-1.0>\nsum_to_n(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n == 0 \n        then return 0\n    else \n        return\
    \ n + sum_to_n(n-1)\nend", "    if n == 1 \n        then return 1 \n        else\
    \ return n*sum_to_n(n-1) \nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n == 1 \n        then return 1\n        else return n*sum_to_n(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a number.", "    if\
    \ n == 1 \n        then return 1 \n        else return n*sum_to_n(n-1) \nend\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a number.", "    if n == 1 \n \
    \       then return 1 \n        else return n + sum_to_n(n - 1)\nend\n</cell>\n\
    <code language=julia-1.0>\nsum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the factorial of a number.", "    if n == 1 \n       \
    \ then return 1\n        else return n + sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a function that sums numbers\
    \ from 1 to n.", "    if n == 0 \n        then return 0 \n        else return\
    \ n + sum_to_n(n-1) \nend\n</cell>\n<code language=julia-1.4>\nsum_to_n(10)\n\
    </cell>\n<text>\nExercise\nWrite a function that sums numbers from 1 to n but\
    \ stops when it reaches n.", "    if n == 0 \n        then return 0 \n       \
    \ else return n + sum_to_n(n-1) \nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n == 0 \n        then return 0\n    else \n        return\
    \ n + sum_to_n(n - 1)\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<text>\nThe function sum_to_n is recursive, and it can be easily implemented\
    \ using recursion.", "    if n == 0 \n        then return 0\n    else \n     \
    \   sum_to_n(n - 1) + n\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n == 1 \n        then return 1\n        else return n*sum_to_n(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\nsum_to_n(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a number.", "    if\
    \ n == 1 \n        then return 1 \n        else return n + sum_to_n(n-1) \nend\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100000)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100000000)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10000000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100000000000)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000001)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000002)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000003)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000004)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000005)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000006)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000007)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000008)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000009)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000010)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000011)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000012)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000013)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000014)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000015)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000016)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000017)\n",
  "    if n == 1 \n        then return 1 \n        else return n*sum_to_n(n-1) \n\
    end\n</cell>\n<code language=julia-1.0>\nsum_to_n(10)\n</cell>\n<text>\nExercise:\
    \ Write a function that sums numbers from 1 to n.", "    if n == 0 \n        then\
    \ return 0\n    else \n        return n + sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.4>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.4>\nsum_to_n(1000)\n</cell>\n<code language=julia-1.4>\nsum_to_n(10000)\n\
    </cell>\n<code language=julia-1.4>\nsum_to_n(100000)\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(1000000)\n</cell>\n<code language=julia-1.4>\nsum_to_n(10000000)\n</cell>\n\
    <code language=julia-1.4>\nsum_to_n(100000000)\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(1000000000)\n</cell>\n<code language=julia-1.4>\nsum_to_n(10000000000)\n\
    </cell>\n<code language=julia-1.4>\nsum_to_n(100000000000)\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(1000000000000)\n</cell>\n<code language=julia-1.4>\nsum_to_n(1000000000000)\n\
    </cell>\n<code language=julia-1.4>\nsum_to_n(1000000000001)\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(1000000000002)\n</cell>\n<code language=julia-1.4>\nsum_to_n(1000000000003)\n\
    </cell>\n<code language=julia-1.4>\nsum_to_n(1000000000004)\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(1000000000005)\n</cell>\n<code language=julia-1.4>\nsum_to_n(1000000000006)\n\
    </cell>\n<code language=julia-1.4>\nsum_to_n(1000000000007)\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(1000000000008)\n</cell>\n<code language=julia-1.4>\nsum_to_n(1000000000009)\n\
    </cell>\n<code language=julia-1.4>\nsum_to_n(1000000000010)\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(1000000000011)\n</cell>\n<code language=julia-1.4>\nsum_to_n(1000000000012)\n\
    </cell>\n<code language=julia-1.4>\nsum_to_n(1000000000013)\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(1000000000014)\n</cell>\n<code language=julia-1.4>\nsum_to_n(1000000000015)\n\
    </cell>\n<code language=julia-1.4>\nsum_to_n(10000000000", "    if n == 1 \n \
    \       then return 1 \n        else return n*sum_to_n(n-1) \nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<text>\nExercise: Write a function\
    \ that sums numbers from 1 to n.", "    if n == 0 \n        then return 0\n  \
    \  else \n        return n + sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a given number. \nThe factorial of a number $n$ is defined as the product\
    \ of all the integers up to and including $n$:", "    if n == 1 \n        then\
    \ return 1 \n        else return n*sum_to_n(n-1) \nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a number.", "    if n == 1 \n        then return 1\n        else return n\
    \ + sum_to_n(n-1)\n    end\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10000)\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(100000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10000000)\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(100000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10000000000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10000000000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(100000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10000000000000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100000000000000000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(100000000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1000000000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10000000000000000000000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000000000000",
  "    if n == 1 \n        then return 1 \n        else return n*sum_to_n(n-1) \n\
    end\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the factorial of a number.", "    if n == 1\
    \ \n        then return 1 \n        else return n + sum_to_n(n - 1)\n    end\n\
    end", "    if n == 0 \n        then return 0\n    else \n        return n + sum_to_n(n-1)\n\
    end\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the factorial of a number.", "    if n == 0\
    \ \n        then return 0 \n        else return n + sum_to_n(n - 1) \nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the factorial of a number.", "    if n == 1 \n       \
    \ then return 1 \n        else return n*sum_to_n(n-1) \nend\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a number.", "    if n == 0 \n        then return 0\n    else \n        return\
    \ n + sum_to_n(n - 1)\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that sums numbers from 1 to n but\
    \ stops when the sum exceeds 10. For example, sum_to_n(10) should return 55.",
  "    if n == 1 \n        then return 1 \n        else return n*sum_to_n(n-1) \n\
    end\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<text>\nThe function\
    \ sum_to_n(n::Int64) takes one argument, n, of type Int64, and returns the sum\
    \ of the numbers from 1 to n.", "    if n == 0 \n        then return 0 \n    \
    \    else return n + sum_to_n(n - 1)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10000)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(100000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10000000)\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(100000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000001)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000002)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000003)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000004)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000005)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000006)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000007)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000008)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000009)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000010)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000011)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000012)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000013)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000014)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000015)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000016)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000017)\n", "    if n == 0\
    \ \n        then return 0\n    else \n        return n + sum_to_n(n - 1)\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a number.", "    if n == 1 \n \
    \       then return 1 \n        else return n*sum_to_n(n-1) \nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100000)\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(1000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100000000)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10000000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100000000000)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000001)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000002)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000003)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000004)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000005)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000006)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000007)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000008)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000009)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000010)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000011)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000012)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000013)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000014)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000015)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000016)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000017)\n",
  "    if n == 1 \n        then return 1\n        else return n + sum_to_n(n-1)\n\
    \    end\nend", "    if n == 0 \n        then return 0\n    else \n        return\
    \ n + sum_to_n(n - 1)\nend\n</cell>\n<code language=julia-1.0>\nsum_to_n(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n == 1 \n        then return 1 \n        else return n*sum_to_n(n-1)\
    \ \nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<text>\nExercise\n\
    Write a function that sums numbers from 1 to n and returns the sum of the numbers\
    \ from 1 to n.", "    if n == 0 \n        then return 0\n    else \n        return\
    \ n + sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10000)\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(100000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10000000)\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(100000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10000000000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10000000000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10000000000001)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10000000000001)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10000000000002)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10000000000002)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10000000000003)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10000000000003)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10000000000004)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10000000000004)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10000000000005)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10000000000005)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10000000000006)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10000000000006)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10000000000007)\n\
    </cell>\n<code language=julia-1.5>", "    if n == 0 \n        then return 0 \n\
    \        else return n + sum_to_n(n-1) \nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a number.", "    if n <= 0 \n        then return 0\n        else return n\
    \ + sum_to_n(n-1)\n    end\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10000)\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(100000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10000000)\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(100000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000001)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000002)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000003)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000004)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000005)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000006)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000007)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000008)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000009)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000010)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000011)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000012)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000013)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000014)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000015)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000016)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(100", "    if n == 0 \n        then\
    \ return 0\n    else \n        return n + sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a number.", "    if n == 0 \n        then return 0 \n        else return\
    \ n + sum_to_n(n - 1)\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ given number.", "    if n == 0 \n        then return 0\n    else \n        return\
    \ n + sum_to_n(n-1)\nend", "    if n == 1 \n        then return 1\n    else \n\
    \        return n + sum_to_n(n - 1)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<text>\nExercise 3\nWrite a function that sums numbers\
    \ from 1 to n (inclusive), but stops summing after it reaches n.", "    if n ==\
    \ 0 \n        then return 0\n    else \n        return n + sum_to_n(n-1)\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the factorial of a number.", "    if n == 0 \n     \
    \   then return 0\n    else \n        return n + sum_to_n(n - 1)\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that takes an array of numbers and returns the sum of the numbers in\
    \ the array.", "    if n == 0 \n        then return 0\n    else \n        return\
    \ n + sum_to_n(n - 1)\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n == 0 \n        then return 0 \n        else return n + sum_to_n(n\
    \ - 1)\nend", "    if n == 0 \n        then return 0 \n        else return n +\
    \ sum_to_n(n - 1)\n    end\nend\n</cell>\n<code language=julia-1.0>\nsum_to_n(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n == 1 \n        then return 1 \n        else return n + sum_to_n(n-1)\
    \ \nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the factorial of a number.", "    if n == 0\
    \ \n        then return 0 \n        else return n + sum_to_n(n-1) \nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100000)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100000000)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10000000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100000000000)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10000000000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10000000000001)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10000000000002)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10000000000003)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10000000000004)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10000000000005)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10000000000006)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10000000000007)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10000000000008)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10000000000009)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10000000000010)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10000000000011)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10000000000012)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10000000000013)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10000000000014)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10000000000015)\n</cell>\n<code language=julia-1.5>\n", "    if n ==\
    \ 1 \n        then return 1\n    else \n        return n + sum_to_n(n - 1)\nend\n\
    </cell>\n<code language=julia-1.0>\nsum_to_n(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a number.", "    if n == 0 \n \
    \       then return 0 \n        else return n + sum_to_n(n - 1)\nend", "    if\
    \ n == 1 \n        then return 1 \n        else return n*sum_to_n(n-1) \n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the factorial of a number.", "    if n == 1\
    \ \n        then return 1 \n        else return n*sum_to_n(n-1) \nend\n</cell>\n\
    <code language=julia-1.0>\nsum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the factorial of a number.", "    if n == 0 \n       \
    \ then return 0 \n        else return n + sum_to_n(n-1) \nend\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(10)\n</cell>\n<code language=julia-1.0>\nsum_to_n(100)\n\
    </cell>\n<code language=julia-1.0>\nsum_to_n(1000)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(10000)\n</cell>\n<code language=julia-1.0>\nsum_to_n(100000)\n</cell>\n\
    <code language=julia-1.0>\nsum_to_n(1000000)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(10000000)\n</cell>\n<code language=julia-1.0>\nsum_to_n(100000000)\n\
    </cell>\n<code language=julia-1.0>\nsum_to_n(1000000000)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(10000000000)\n</cell>\n<code language=julia-1.0>\nsum_to_n(100000000000)\n\
    </cell>\n<code language=julia-1.0>\nsum_to_n(1000000000000)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(10000000000000)\n</cell>\n<code language=julia-1.0>\nsum_to_n(10000000000001)\n\
    </cell>\n<code language=julia-1.0>\nsum_to_n(10000000000002)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(10000000000003)\n</cell>\n<code language=julia-1.0>\nsum_to_n(10000000000004)\n\
    </cell>\n<code language=julia-1.0>\nsum_to_n(10000000000005)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(10000000000006)\n</cell>\n<code language=julia-1.0>\nsum_to_n(10000000000007)\n\
    </cell>\n<code language=julia-1.0>\nsum_to_n(10000000000008)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(10000000000009)\n</cell>\n<code language=julia-1.0>\nsum_to_n(10000000000010)\n\
    </cell>\n<code language=julia-1.0>\nsum_to_n(10000000000011)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(10000000000012)\n</cell>\n<code language=julia-1.0>\nsum_to_n(10000000000013)\n\
    </cell>\n<code language=julia-1.0>\nsum_to_n(10000000000014)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(10000000000015)\n</cell>\n<code language=julia-1.0>\n", "    if n ==\
    \ 1 \n        then return 1 \n        else return n + sum_to_n(n-1) \nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the factorial of a number.", "    if n == 0 \n       \
    \ then return 0 \n        else return n + sum_to_n(n-1) \nend\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a number.", "    if n == 1 \n        then return\
    \ 1\n    else \n        return n + sum_to_n(n - 1)\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a given number. \nThe factorial of a number $n$ is defined as:", "    if\
    \ n == 0 \n        then return 0 \n        else return n + sum_to_n(n - 1)\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a number.", "    if\
    \ n == 1 \n        then return 1 \n        else return n + sum_to_n(n - 1) \n\
    end", "    if n == 1 \n        then return 1 \n        else return n*sum_to_n(n-1)\
    \ \nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the factorial of a given number. For example,\
    \ factorial(5) = 5 * 4 * 3 * 2 * 1 = 120", "    if n == 1 \n        then return\
    \ 1\n        else return n*sum_to_n(n-1)\n    end\nend", "    if n == 0 \n   \
    \     then return 0\n    else \n        return n + sum_to_n(n - 1)\nend\n</cell>\n\
    <code language=julia-1.0>\nsum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the factorial of a number.", "    if n == 1 \n       \
    \ then return 1\n        else return n + sum_to_n(n-1)\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\nsum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the factorial of a number.", "    if n == 0 \n       \
    \ then return 0 \n        else return n + sum_to_n(n - 1)\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the factorial of a number.", "    if n == 0 \n       \
    \ then return 0 \n        else return n + sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a number.", "    if n == 1 \n        then return 1 \n        else return\
    \ n*sum_to_n(n-1) \nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    sum_to_n_recursive(n::Int64)::Int64\n\"\
    \"\"", "    if n == 0 \n        then return 0\n    else \n        return n + sum_to_n(n\
    \ - 1)\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that sums numbers from 1 to n but stops when the\
    \ sum is greater than n.", "    if n == 1 \n        then return 1\n        else\
    \ return n + sum_to_n(n-1)\n    end\nend", "    if n == 1 \n        then return\
    \ 1 \n        else return n*sum_to_n(n-1) \nend\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    factorial_to_n is\
    \ a function that returns the factorial of n.\n\"\"\"", "    if n == 1 \n    \
    \    then return 1 \n        else return n*sum_to_n(n-1) \nend\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a number.", "    if n == 1 \n        then return\
    \ 1\n        else return n + sum_to_n(n-1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a number.", "    if n == 0 \n        then return 0\n    else \n        return\
    \ n + sum_to_n(n - 1)\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10000)\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(100000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10000000)\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(100000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000000)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000001)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000002)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000003)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000004)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000005)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000006)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000007)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000008)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000009)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000010)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000011)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000012)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000013)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1000000000014)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1000000000015)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1000000000016)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10000000000"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
