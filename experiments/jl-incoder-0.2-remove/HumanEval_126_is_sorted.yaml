name: HumanEval_126_is_sorted
language: jl
prompt: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
  \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
  \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
  \                                    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
  \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3,\
  \ 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
  \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
  \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
  \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4]) ==\
  \ false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
  \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
completions: ["    sorted = false\n    for x in lst\n        if x < lst[end] \n  \
    \          sorted = true\n            break\n        end\n    end\n    return\
    \ sorted\nend\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([1,2,2,3])\
    \ == true\n@assert is_sorted([1,2,2,3,3]) == false\n@assert is_sorted([1,2,2,3,1])\
    \ == false\n@assert is_sorted([1,2,2,3,4]) == false\n@assert is_sorted([1,2,2,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,",
  "    sorted = true\n    for x in lst\n        if x != sort(x)[1]\n            sorted\
    \ = false\n        end\n    end\n    return sorted\nend", "    sorted = sort(lst)\n\
    \    sorted.length == 1\nend", "    sorted = true\n    for x in lst\n        if\
    \ x != sort(x)\n            sorted = false\n        end\n    end\n    return sorted\n\
    end", "    sorted = sort(lst)\n    unique = unique(sorted)\n    length(unique)\
    \ == length(sorted)\nend", "    sorted = sort(lst)\n    return sorted == lst\n\
    end", "    sorted = sort(lst)\n    \n    if length(sorted) == length(lst)\n  \
    \      return true\n    else\n        return false\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@test is_sorted([1,1,2,3,5,5,5,5,6,7,8,9,10])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a number is even.", "    sorted\
    \ = true\n    for x in lst\n        if x != sort(x)\n            sorted = false\n\
    \        end\n    end\n    return sorted\nend", "    sorted = sort(lst)\n    return\
    \ sorted == lst\nend", "    sorted = sort(lst)\n    return sorted == lst\nend",
  "    sorted = sort(lst)\n    last = sorted[end]\n    first = 0\n    for x in sorted\n\
    \        if x != last && x != first\n            return false\n        first =\
    \ last + 1\n        last = last + 1\n    return true\nend", "    sorted = sort(lst)\n\
    \    last = sorted[end]\n    last = last-1\n    for x in lst\n        if x !=\
    \ last \n            return false\n        end\n    end\n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,2,3,3,3,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,7,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,",
  "    \n    sorted = sort(lst)\n    if length(sorted) == length(lst)\n        true\n\
    \    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,6,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,2",
  "    sorted = true\n    for x in lst\n        if x != sort(x)\n            sorted\
    \ = false\n        end\n    end\n    return sorted\nend", "    \n    sorted =\
    \ sort(lst)\n    \n    if length(sorted) == length(lst)\n        return true\n\
    \    else\n        return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @test is_sorted([1,2,2,3,3,4,5,6,7,8,9,9,10])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of unique elements in a given list.", " \
    \   sorted = false\n    for x in lst\n        if x != sort(x)\n            sorted\
    \ = true\n            break\n        end\n    end\n    return sorted\nend", " \
    \   lst = sort(lst)\n    return lst == lst\nend", "    lst = sort(lst)\n    last\
    \ = lst[1]\n    for x in lst[2:end]\n        if x == last\n            return\
    \ false\n        else\n            last = x\n        end\n    end\n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([1,2,2,3])\
    \ == true\n@assert is_sorted([1,2,2,3]) == false\n@assert is_sorted([1,2,2,3,3])\
    \ == false\n@assert is_sorted([1,2,2,3,4]) == false\n@assert is_sorted([1,2,2,3,5])\
    \ == false\n@assert is_sorted([1,2,2,3,5,5]) == false\n@assert is_sorted([1,2,2,3,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,",
  "    sorted_list = sort(lst)\n    \n    if length(sorted_list) == length(lst)\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_sorted([1,2,2,3]) == true\n@assert is_sorted([1,2,2,3,3]) == false\n\
    @assert is_sorted([1,2,2,3,4]) == false\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns the number of unique elements in a given list.", "   \
    \ sorted = true\n    for x in lst\n        if x != sort(x)\n            sorted\
    \ = false\n        end\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_sorted([1,2,2,3,3,4,4,5,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,35,35,36,36,37,37,38,38,39,39,40,40,41,41,42,42,43,43,44,44,45,45,46,46,47,47,48,48,49,49,50,50,51,51,52,52,53,53,54,54,55,55,56,56,57,57,58,58,59,59,60,60,61,61,62,62,63,63,64,64,65,65,66,66,67,67,68,68,69,69,70,70,71,71,72,72,73,73,74,74,75,75,76,76,77,77,78,78,79,79,80,80,81,81,82,82,83,83,84,84,85,85,86,86,87,87,88,88,89,89,90,90,91,91,92,92,93,93,94,94,95,95,96,96,97,97,98,98,99,99,100,100,101,101,102,102,103,103,104,104,105,105,106,106,107,107,108,108,109,109,110,110,111,111,112,112,113,113,114,114,115,115,116,116,117,117,118,118,119,119,120,120,121,121,122,122,123,123,124,124,125,125,126,126,127,127,128,128,129,129,130,130,131,131,132,132,133,133,134,134,135,135,136,136,137,137,138,138,139,139,140,140,141,141,",
  "    sorted = sort(lst)\n    return sorted == lst\nend", "    sorted = sort(lst)\n\
    \    uniques = unique(sorted)\n    return length(uniques) == length(sorted)\n\
    end", "    sorted = sort(lst)\n    if length(sorted) == length(lst)\n        return\
    \ true\n    else\n        return false\n    end\nend", "    lst = sort(lst)\n\
    \    \n    if length(lst) == length(unique(lst))\n        return true\n    else\n\
    \        return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ is_sorted([1,2,2,3,3,4,5,6,6,6,6,7,8,9,10])\n</cell>\n<text>\nExercise\nWrite\
    \ a function that checks if a vector is sorted in descending order. Assume no\
    \ negative numbers and only integers.", "    \n    sorted = sort(lst)\n    \n\
    \    if length(sorted) == length(lst)\n        return true\n    else\n       \
    \ return false\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,4,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,",
  "    sorted = true\n    for x in lst\n        if x != sort(x)\n            sorted\
    \ = false\n        end\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,1,2,2])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3])\n</cell>\n<code language=julia-", "    sorted = true\n  \
    \  for x in lst\n        if x != sort(x)\n            sorted = false\n       \
    \ end\n    end\n    return sorted\nend", "    sorted = true\n    for x in lst\n\
    \        if x != sort(x)\n            sorted = false\n        end\n    end\n \
    \   return sorted\nend", "    sorted = sort(lst)\n    last = sorted[end]\n   \
    \ for x in sorted\n        if x == last\n            return false\n        last\
    \ = x\n    end\n    return true\nend", "    sorted = sort(lst)\n    return sorted\
    \ == lst\nend", "    \n    sorted::Bool = is_sorted(sort(lst))\n    \n    if sorted\
    \ == true\n        return true\n    else\n        return false\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,3,4,4,4,5,5,5,5,6,6,6,6,6,6,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,",
  "    sorted = sort(lst)\n    unique = unique(sorted)\n    return length(unique)\
    \ == length(sorted)\nend", "    \n    if length(lst) == 1 \n        return true\n\
    \    end\n    \n    last = lst[1]\n    for x in lst[2:end]\n        if x != last\n\
    \            return false\n        end\n        last = x\n    end\n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([1,1,2,2])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1,2,2,3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3,3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,3,3])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1,2,2,3,3,3,3,3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3,3,3,3,3,3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,3,3,3,3,3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,3,3,3,3,3,3])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1,2,2,3,3,3,3,3,3,3,3])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1,2,2,3,3,3,3,3,3,3,3,3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3,3,3,3,3,3,3,3,3,3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,3,3,3,3,3,3,3,3,3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,3,3,3,3,3,3,3,3,3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,3,3,3,3,3,3,3,3,3,3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,3,3,3,3,3,3,3,3,3,",
  "    sorted = sort(lst)\n    length(sorted) == length(lst) && all(sorted .== lst)\n\
    end\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4,5,6,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4,5,6,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1,2,2,3,4,5,6,6,7,8,9,10])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1,2,2,3,4,5,6,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3,4,5,6,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4,5,6,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4,5,6,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1,2,2,3,4,5,6,6,7,8,9,10])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1,2,2,3,4,5,6,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3,4,5,6,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4,5,6,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4,5,6,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1,2,2,3,4,5,6,6,7,8,9,10])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1,2,2,3,4,5,6,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3,4,5,6,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4,5,6,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4,5,6,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1,2,2,3,4,5,6,6,7,8,9,10])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1,2,2,3,4,5,6,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3,4,5,6,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>", " \
    \   sorted = sort(lst)\n    return sorted == lst\nend", "    sorted = sort(lst)\n\
    \    \n    if length(sorted) == length(lst)\n        for (i,j) in zip(sorted,lst)\n\
    \            if i != j\n                return false\n            end\n      \
    \  end\n        return true\n    else\n        return false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,4,4,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,",
  "    sorted = sort(lst)\n    uniques = unique(sorted)\n    return length(uniques)\
    \ == length(sorted)\nend", "    \n    sorted = sort(lst)\n    \n    if length(sorted)\
    \ == length(lst)\n        return true\n    else\n        return false\n    end\n\
    end", "    sorted = true\n    for x in lst\n        if x != sort(x)[1]\n     \
    \       sorted = false\n        end\n    end\n    return sorted\nend", "    sorted\
    \ = sort(lst)\n    uniques = unique(sorted)\n    length(uniques) <= length(lst)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([1,1,2,3,3]) == true\n\
    @assert is_sorted([1,2,2,3,3]) == false\n@assert is_sorted([1,2,2,3,4]) == false\n\
    </cell>\n<text>\nExercise\nWrite a function that checks if a list has all unique\
    \ elements. Assume no negative numbers and only integers.", "    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \   end\n    end\n    return sorted\nend", "    sorted = sort(lst)\n    if length(sorted)\
    \ == length(lst)\n        for (i,j) in enumerate(sorted)\n            if j !=\
    \ lst[i]\n                return false\n            end\n        end\n       \
    \ return true\n    else\n        return false\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    @assert is_sorted([1,2,2,3]) == true\n@assert is_sorted([1,2,2,3]) == false\n\
    @assert is_sorted([1,2,2,3,3]) == false\n@assert is_sorted([1,2,2,3,4]) == false\n\
    @assert is_sorted([1,2,2,3,5,3]) == false\n@assert is_sorted([1,2,2,3,5,3,3])\
    \ == false\n@assert is_sorted([1,2,2,3,5,3,4]) == false\n@assert is_sorted([1,2,2,3,5,3,5,3])\
    \ == false\n@assert is_sorted([1,2,2,3,5,3,5,3,3]) == false\n@assert is_sorted([1,2,2,3,5,3,5,3,5,3])\
    \ == false\n@assert is_sorted([1,2,2,3,5,3,5,3,5,3,3]) == false\n@assert is_sorted([1,2,2,3,5,3,5,3,5,3,5,3])\
    \ == false\n@assert is_sorted([1,2,2,3,5,3,5,3,5,3,5,3,3]) == false\n@assert is_sorted([1,2,2,3,5,3,5,3,5,3,5,3,5,3])\
    \ == false\n@assert is_sorted([1,2,2,3,5,3,5,3,5,3,5,3,5,3,3]) == false\n@assert\
    \ is_sorted([1,2,2,3,5,3,5,3,5,3,5,3,5,3,5,3]) == false\n@assert is_sorted([1,2,2,3,5,3,5,3,5,3,5,3,5,3,5,3,5])\
    \ == false\n@assert is_sorted([1,2,2,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5]) == false\n\
    @assert is_sorted([1,2,2,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5]) == false\n@assert\
    \ is_sorted([1,2,2,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5]) == false\n@assert\
    \ is_sorted([1,2,2,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5]) == false\n\
    @assert is_sorted([1,2,2,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,",
  "    sorted = sort(lst)\n    if length(sorted) == length(lst)\n        return true\n\
    \    else\n        return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_sorted([1,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == true\n\
    @assert is_sorted([1,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == false\n\
    @assert is_sorted([1,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30])\
    \ == false\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of numbers and returns the sum of the numbers. Assume no negative numbers and\
    \ only integers.", "    sorted = sort(lst)\n    if length(sorted) == length(lst)\n\
    \        for (i,j) in zip(sorted, lst)\n            if i != j\n              \
    \  return false\n            end\n        end\n        return true\n    else\n\
    \        return false\n    end\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis\
    \ doesn't work for `[1,1,2,3]`, which should return `true` but returns `false`.\n\
    <|/ c |>\n<| c |>\nI guess I misunderstood the question. I'll edit my answer to\
    \ include a solution that works.\n<|/ c |>\n<| c |>\nI edited my answer to include\
    \ a solution that works.\n<|/ c |>\n<| c |>\nI edited my answer to include a solution\
    \ that works.\n<|/ c |>\n<| a tags=julia,sorting,arrays |>\nHere's a solution\
    \ using sortperm:\n<code>\njulia> a = [1,1,2,3]\n3-element Array{Int64,1}:\n 1\n\
    \ 1\n 2", "    \n    sorted = sort(lst)\n    if length(lst) == length(sorted)\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_sorted([1,2,2,3]) == true\n@assert is_sorted([1,2,2,3,3]) == false\n\
    @assert is_sorted([1,2,2,3,4]) == false\n@assert is_sorted([1,2,2,3,5,5,5]) ==\
    \ false\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number\
    \ of times a value appears in a list. Assume no duplicates.", "    sorted = true\n\
    \    for x in lst\n        if x != sort(x)[1]\n            sorted = false\n  \
    \      end\n    end\n    return sorted\nend", "    sorted = false\n    for x in\
    \ lst\n        if sorted == true\n            break\n        if x != sort(x)\n\
    \            sorted = true\n        end\n    end\n    return sorted\nend", " \
    \   \n    sorted = sort(lst)\n    \n    if length(sorted) == length(lst)\n   \
    \     true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3,3,4,5,6,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3,3,4,5,6,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3,3,4,5,6,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3,3,4,5,6,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3,3,4,5,6,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3,3,4,5,6,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3,3,4,5,6,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3,3,4,5,6,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3,3,4,5,6,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3,3,4,5,6,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3,3,4,5,6,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3,3,4,5,6,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3,3,4,5,6,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3,3,4,5,6,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3,3,4,5,6,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3,3,4,5,6,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3,3,4,5,6,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3,3,4,5,6,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3,3,4,5,6,6,7,8,9,10])\n</cell>\n<code language=juli", "    sorted\
    \ = false\n    for x in lst\n        if x != sort(x)\n            sorted = true\n\
    \            break\n        end\n    end\n    return sorted\nend", "    sorted\
    \ = true\n    for x in lst\n        if x != sort(x)\n            sorted = false\n\
    \        end\n    end\n    return sorted\nend", "    sorted = sort(lst)\n    \n\
    \    if length(sorted) == length(lst)\n        true\n    else\n        false\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([1,2,2,3])\
    \ == true\n@assert is_sorted([1,2,2,3,3]) == false\n@assert is_sorted([1,2,2,3,4])\
    \ == false\n@assert is_sorted([1,2,2,3,5,3]) == false\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers and returns the number of\
    \ unique elements in the vector. Assume no duplicates.", "    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \   end\n    end\n    return sorted\nend", "    sorted = sort(lst)\n    \n   \
    \ if length(sorted) == length(lst)\n        return true\n    else\n        return\
    \ false\n    end\nend", "    sorted = true\n    for x in lst\n        if x !=\
    \ sort(x)[1]\n            sorted = false\n            break\n        end\n   \
    \ end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([1,2,2,3])\
    \ == true\n@assert is_sorted([1,2,2,3,3]) == false\n@assert is_sorted([1,2,2,3,3,3])\
    \ == false\n@assert is_sorted([1,2,2,3,3,3,3]) == false\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of times a given number appears\
    \ in a given list.", "    sorted = sort(lst)\n    return sorted == lst\nend\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,1,2,3,4,5,5,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of times\
    \ a given value appears in a given list.", "    sorted = true\n    for x in lst\n\
    \        if x != sort(x)\n            sorted = false\n        end\n    end\n \
    \   return sorted\nend", "    \n    sorted_list = sort(lst)\n    \n    if length(sorted_list)\
    \ == length(lst)\n        return true\n    else\n        return false\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\n\
    </", "    sorted = false\n    for x in lst\n        if x != sort(x)\n        \
    \    sorted = true\n            break\n        end\n    end\n    return sorted\n\
    end", "    sorted = false\n    for x in lst\n        if sorted == true\n     \
    \       break\n        if x != sort(x)\n            sorted = true\n        end\n\
    \    end\n    return sorted\nend", "    sorted = true\n    for x in lst\n    \
    \    if x != sort(x)\n            sorted = false\n            break\n        end\n\
    \    end\n    return sorted\nend", "    \n    sorted_list = sort(lst)\n    \n\
    \    if length(sorted_list) == length(lst)\n        return true\n    else\n  \
    \      return false\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,10,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,10,10,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,10,10,10,10,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,10,10,10,10,10,10,10,10,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,",
  "    sorted = true\n    for x in lst\n        if x != sort(x)\n            sorted\
    \ = false\n            break\n    end\n    return sorted\nend", "    sorted =\
    \ sort(lst)\n    return sorted == lst\nend", "    sorted = false\n    for x in\
    \ lst\n        if x != sort(x)\n            sorted = true\n            break\n\
    \        end\n    end\n    return sorted\nend", "    sorted = sort(lst)\n    \n\
    \    if length(sorted) == length(lst)\n        return true\n    else\n       \
    \ return false\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([1,1,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,35,35,36,36,37,37,38,38,39,39,40,40,41,41,42,42,43,43,44,44,45,45,46,46,47,47,48,48,49,49,50,50,51,51,52,52,53,53,54,54,55,55,56,56,57,57,58,58,59,59,60,60,61,61,62,62,63,63,64,64,65,65,66,66,67,67,68,68,69,69,70,70,71,71,72,72,73,73,74,74,75,75,76,76,77,77,78,78,79,79,80,80,81,81,82,82,83,83,84,84,85,85,86,86,87,87,88,88,89,89,90,90,91,91,92,92,93,93,94,94,95,95,96,96,97,97,98,98,99,99,100,100,101,101,102,102,103,103,104,104,105,105,106,106,107,107,108,108,109,109,110,110,111,111,112,112,113,113,114,114,115,115,116,116,117,117,118,118,119,119,120,120,121,121,122,122,123,123,124,124,125,125,126,126,127,127,128,128,129,129,130,130,131,131,132,132,133,133,134,134,135,135,136,136,137,137,138,138,139,139,140,140,141,141,142,14",
  "    sorted = sort(lst)\n    uniques = unique(sorted)\n    return length(uniques)\
    \ == length(sorted)\nend", "    \n    sorted = sort(lst)\n    \n    if length(sorted)\
    \ == length(lst)\n        return true\n    else\n        return false\n    end\n\
    end", "    sorted = sort(lst)\n    if length(sorted) == length(lst)\n        for\
    \ ii in 1:length(lst)\n            if sorted[ii] != lst[ii]\n                return\
    \ false\n            end\n        end\n        return true\n    else\n       \
    \ return false\n    end\nend\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work if\
    \ there are duplicates in the list. For example, if `lst = [1,1,2,3]`, then `is_sorted(lst)`\
    \ returns `true` instead of `false`.\n<|/ c |>\n<| c |>\nYes, I realized that\
    \ after I posted it. I edited my answer to fix it.\n<|/ c |>\n<| c |>\nI fixed\
    \ it now. Thanks for pointing it out.\n<|/ c |>\n<| a dscore=2 |>\n<code>", " \
    \   \n    sorted = sort(lst)\n    \n    if length(sorted) == length(lst)\n   \
    \     for (i,j) in enumerate(sorted)\n            if j != lst[i]\n           \
    \     return false\n            end\n        end\n        return true\n    else\n\
    \        return false\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,5,5,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,5,5,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,5,5,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,5,5,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,5,5,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,5,5,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,5,5,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,5,5,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,5,5,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,5,5,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,5,5,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,5,5,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n", "    sorted = sort(lst)\n    if length(sorted) == length(lst)\n  \
    \      true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_sorted([1,2,2,3]) == true\n@assert is_sorted([1,2,2,3,3]) == false\n\
    @assert is_sorted([1,2,2,3,3,3]) == false\n@assert is_sorted([1,2,2,3,3,3,3])\
    \ == false\n@assert is_sorted([1,2,2,3,3,3,3]) == false\n@assert is_sorted([1,2,2,3,3,3,3])\
    \ == false\n@assert is_sorted([1,2,2,3,3,3,3]) == false\n@assert is_sorted([1,2,2,3,3,3,3])\
    \ == false\n@assert is_sorted([1,2,2,3,3,3,3]) == false\n@assert is_sorted([1,2,2,3,3,3,3])\
    \ == false\n@assert is_sorted([1,2,2,3,3,3,3]) == false\n@assert is_sorted([1,2,2,3,3,3,3])\
    \ == false\n@assert is_sorted([1,2,2,3,3,3,3]) == false\n@assert is_sorted([1,2,2,3,3,3,3])\
    \ == false\n@assert is_sorted([1,2,2,3,3,3,3]) == false\n@assert is_sorted([1,2,2,3,3,3,3])\
    \ == false\n@assert is_sorted([1,2,2,3,3,3,3]) == false\n@assert is_sorted([1,2,2,3,3,3,3])\
    \ == false\n@assert is_sorted([1,2,2,3,3,3,3]) == false\n@assert is_sorted([1,2,2,3,3,3,3])\
    \ == false\n@assert is_sorted([1,2,2,3,3,3,3]) == false\n@assert is_sorted([1,2,2,3,3,3,3])\
    \ == false\n@assert is_sorted([1,2,2,3,3,3,3]) == false\n@assert is_sorted([1,2,2,3,3,3,3])\
    \ == false\n@assert is_sorted([1,2,2,3,3,3,3]) == false\n@assert is_sorted([1,2,2,3,3,3,3])\
    \ == false\n@assert is_sorted([1,2,2,3,3,3,3]) == false\n@assert is_sorted([1,2,2,3,3,3,3])\
    \ == false\n@assert is_sorted([1,2,2,3,3,3,3]) == false\n@assert is_sorted([1,2,2,3,3,3,3])\
    \ == false\n@assert is_sorted([1,2,2,3,3,3,3]) == false\n@assert is_sorted([1,2,2,3,3,3,3])\
    \ == false\n@assert is_sorted([1,2,2,3,3,3,3]) == false\n@assert is_sorted([1,2,2,3,3,3,3])\
    \ == false\n@assert is_sorted([1,2,2,3,3,3,3]) == false\n@assert is_sorted([1,2,2,3,3,3,3])\
    \ == false\n@assert is_sorted([1,2,2,3,3,3,3]) == ", "    sorted = sort(lst)\n\
    \    return sorted == lst\nend", "    sorted = true\n    for x in lst\n      \
    \  if x != sort(x)\n            sorted = false\n            break\n        end\n\
    \    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,4,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,",
  "    sorted = sort(lst)\n    sorted.length == 1\nend", "    \n    sorted = true\n\
    \    for x in lst\n        if x != sort(x)[1]\n            sorted = false\n  \
    \      end\n    end\n    return sorted\nend", "    sorted = true\n    for x in\
    \ lst\n        if x != sort(x)[1]\n            sorted = false\n        end\n \
    \   end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([1,1,2,2])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,1,2,2])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,1,2,2])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,1,2,2])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,1,2,2])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,1,2,2])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,1,2,2])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,1,2,2])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,1,2,2])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,1,2,2])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,1,2,2])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,1,2,2])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,1,2,2])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,1,2,2])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,1,2,2])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,1,2,2])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,1,2,2])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,1,2,2])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,1,2,2])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,1,2,2])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,1,2,2])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,1,2,2])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,1,2,2])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,1,2,2])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,1,2,2])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,1,2,2])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,1,2,2])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,1,2,2])\n\
    </cell>\n<code language=juli", "    \n    sorted = true\n    for x in lst\n  \
    \      if x != sort(x)\n            sorted = false\n        end\n    end\n   \
    \ return sorted\nend", "    sorted = sort(lst)\n    \n    if length(sorted) ==\
    \ length(lst)\n        return true\n    else\n        return false\n    end\n\
    end\n</cell>\n<code language=julia-1.4>\nis_sorted([1,1,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,35,35,36,36,37,37,38,38,39,39,40,40,41,41,42,42,43,43,44,44,45,45,46,46,47,47,48,48,49,49,50,50,51,51,52,52,53,53,54,54,55,55,56,56,57,57,58,58,59,59,60,60,61,61,62,62,63,63,64,64,65,65,66,66,67,67,68,68,69,69,70,70,71,71,72,72,73,73,74,74,75,75,76,76,77,77,78,78,79,79,80,80,81,81,82,82,83,83,84,84,85,85,86,86,87,87,88,88,89,89,90,90,91,91,92,92,93,93,94,94,95,95,96,96,97,97,98,98,99,99,100,100,101,101,102,102,103,103,104,104,105,105,106,106,107,107,108,108,109,109,110,110,111,111,112,112,113,113,114,114,115,115,116,116,117,117,118,118,119,119,120,120,121,121,122,122,123,123,124,124,125,125,126,126,127,127,128,128,129,129,130,130,131,131,132,132,133,133,134,134,135,135,136,136,137,137,138,138,139,139,140,140,141,141,142,14",
  "    sorted = true\n    for x in lst\n        if x != sort(x)\n            sorted\
    \ = false\n        end\n    end\n    return sorted\nend", "    sorted = sort(lst)\n\
    \    \n    if length(sorted) == length(lst)\n        for (i,j) in zip(sorted,\
    \ lst)\n            if i != j\n                return false\n            end\n\
    \        end\n        return true\n    else\n        return false\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4,4,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,",
  "    sorted = true\n    for x in lst\n        if x != sort(x)\n            sorted\
    \ = false\n        end\n    end\n    return sorted\nend", "    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \   end\n    end\n    return sorted\nend", "    sorted = sort(lst)\n    last =\
    \ sorted[end]\n    last2 = last\n    for x in lst\n        if x == last2\n   \
    \         return false\n        last2 = x\n    end\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1,1,2,2])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3,3,3,3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,3,3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,3,3])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1,2,2,3,3,3,3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3,3,3,3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,3,3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,3,3])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1,2,2,3,3,3,3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3,3,3,3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,3,3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,3,3])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1,2,2,3,3,3,3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3,3,3,3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,3,3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,3,3])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1,2,2,3,3,3,3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3,3,3,3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,3,3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,3,3])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1,2,2,3,3,3,3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3,3,3,3])\n</cell", "    sorted = sort(lst)\n    return sorted\
    \ == lst\nend", "    sorted = false\n    for x in lst\n        if x != sort(x)\n\
    \            sorted = true\n            break\n        end\n    end\n    return\
    \ sorted\nend", "    sorted = sort(lst)\n    uniques = unique(sorted)\n    length(uniques)\
    \ == length(sorted)\nend", "    \n    if length(lst) == 0 \n        return true\n\
    \    end", "    sorted_list = sort(lst)\n    \n    if length(sorted_list) == length(lst)\n\
    \        for (i,j) in zip(sorted_list,lst)\n            if i == j\n          \
    \      return false\n            end\n        end\n        return true\n    end\n\
    \    return false\nend", "    sorted = true\n    for x in lst\n        if x !=\
    \ sort(x)\n            sorted = false\n        end\n    end\n    return sorted\n\
    end", "    sorted = sort(lst)\n    last = sorted[end]\n    for x in sorted\n \
    \       if x != last\n            return false\n        end\n    end\n    return\
    \ true\nend", "    sorted = sort(lst)\n    return sorted == lst\nend", "    sorted\
    \ = sort(lst)\n    if length(sorted) == length(lst)\n        for (i,j) in enumerate(sorted)\n\
    \            if j != lst[i]\n                return false\n            end\n \
    \       end\n        return true\n    else\n        return false\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert is_sorted([1,2,2,3]) == true\n@assert\
    \ is_sorted([1,2,2,3,3]) == false\n@assert is_sorted([1,2,2,3,4]) == false\n@assert\
    \ is_sorted([1,2,2,3,5,5]) == false\n@assert is_sorted([1,2,2,3,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,",
  "    sorted = false\n    for x in lst\n        if x != sort(x)\n            sorted\
    \ = true\n            break\n        end\n    end\n    return sorted\nend", " \
    \   sorted = sort(lst)\n    length(sorted) == length(lst) && all(sorted .== lst)\n\
    end", "    sorted = true\n    for x in lst\n        if x != sort(x)\n        \
    \    sorted = false\n        end\n    end\n    return sorted\nend", "    lst =\
    \ sort(lst)\n    return lst == lst\nend", "    sorted = false\n    seen = Set()\n\
    \    for x in lst\n        if x in seen \n            return false\n        else\
    \ if x < 0\n            return false\n        else if x in seen\n            sorted\
    \ = true\n        else\n            seen.add(x)\n        end\n    end\n    return\
    \ sorted\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1,2,2,3,4])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3,4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3,4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3,4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3,4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3,4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3,4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3,4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3,4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4])\n\
    </cell>\n<code language=juli", "    sorted = true\n    for x in lst\n        if\
    \ x != sort(x)\n            sorted = false\n        end\n    end\n    return sorted\n\
    end", "    sorted = sort(lst)\n    if length(sorted) == length(lst)\n        for\
    \ ii in 1:length(lst)\n            if lst[ii] != sorted[ii]\n                return\
    \ false\n            end\n        end\n        return true\n    else\n       \
    \ return false\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,4,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,9,10,10,10,10,10,10,11,11,11,11,11,11,12,12,12,12,12,12,12,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,31,31,31,31,31,31,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,34,34,34,34,34,34,34,34,35,35,35,35,35,35,35,35,36,36,36,36,36,36,36,36,37,37,37,37,37,37,37,37,38,38,38,38,38,38,38,38,39,39,39,39,39,39,39,39,40,40,40,40,40,40,40,40,40,41,41,41,41,41,41,41,41,42,42,42,42,42,42,42,42,43,43,43,43,43,43,43,43,43,44,44,44,44,44,44,44,44,44,45,45,45,45,45,45,45,45,45,46,46,46,46,46,46,46,46,46,47,47,47,47,47,47,47,47,47,48,48,48,48,48,48,48,48,48,49,49,49,49,49,49,49,49,49,50,50,",
  "    sorted = true\n    for x in lst\n        if x != sort(x)\n            sorted\
    \ = false\n        end\n    end\n    return sorted\nend", "    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \   end\n    end\n    return sorted\nend", "    lst = sort(lst)\n    if length(lst)\
    \ == 1 \n        return true\n    else \n        return false\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,5,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,5,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,5,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,5,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,5,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,5,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,5,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,5,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,5,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,5,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,5,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,5,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,5,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=", "    \n    sorted = sort(lst)\n    \n    if length(sorted)\
    \ == length(lst)\n        return true\n    else\n        return false\n    end\n\
    end", "    sorted = sort(lst)\n    unique = unique(sorted)\n    length(unique)\
    \ == length(sorted)\nend", "    sorted = true\n    for x in lst\n        if x\
    \ != sort(x)[1]\n            sorted = false\n            break\n        end\n\
    \    end\n    return sorted\nend", "    \n    if length(lst) == 1 \n        return\
    \ true\n    end", "    sorted = true\n    for x in lst\n        if x != sort(x)\n\
    \            sorted = false\n        end\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\n@time is_sorted([1,1,2,3,3,4,5,5,6,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,25",
  "    sorted = sort(lst)\n    if length(sorted) == length(lst)\n        return true\n\
    \    else\n        return false\n    end\nend", "    sorted = true\n    for x\
    \ in lst\n        if x != sort(x)\n            sorted = false\n            break\n\
    \        end\n    end\n    return sorted\nend", "    \n    sorted = sort(lst)\n\
    \    \n    if length(lst) == length(sorted)\n        for ii in 1:length(lst)\n\
    \            if lst[ii] != sorted[ii]\n                return false\n        \
    \    end\n        end\n        return true\n    end\n    return false\nend\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10])\n\
    </cell>", "    \n    sorted = sort(lst)\n    if length(sorted) == length(lst)\n\
    \        for ii in 1:length(lst)\n            if lst[ii] != sorted[ii]\n     \
    \           return false\n            end\n        end\n        return true\n\
    \    else\n        return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3,4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3,4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3,4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3,4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3,4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3,4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3,4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3,4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3,4])\n</cell>\n<code language=julia-1.5", "    sorted = false\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = true\n      \
    \      break\n        end\n    end\n    return sorted\nend", "    sorted = sort(lst)\n\
    \    return sorted == lst\nend\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([1,2,2,3])\
    \ == true\n@assert is_sorted([1,2,2,3,3]) == false\n@assert is_sorted([1,2,2,3,1])\
    \ == false\n@assert is_sorted([1,2,2,3,4]) == false\n@assert is_sorted([1,2,2,3,5])\
    \ == false\n@assert is_sorted([1,2,2,3,6,7]) == false\n@assert is_sorted([1,2,2,3,6,7,8])\
    \ == false\n@assert is_sorted([1,2,2,3,6,7,8,9]) == false\n@assert is_sorted([1,2,2,3,6,7,8,9,10])\
    \ == false\n@assert is_sorted([1,2,2,3,6,7,8,9,10,11]) == false\n@assert is_sorted([1,2,2,3,6,7,8,9,10,11,12])\
    \ == false\n@assert is_sorted([1,2,2,3,6,7,8,9,10,11,12,13]) == false\n@assert\
    \ is_sorted([1,2,2,3,6,7,8,9,10,11,12,13,14]) == false\n@assert is_sorted([1,2,2,3,6,7,8,9,10,11,12,13,14,15])\
    \ == false\n@assert is_sorted([1,2,2,3,6,7,8,9,10,11,12,13,14,15,16]) == false\n\
    @assert is_sorted([1,2,2,3,6,7,8,9,10,11,12,13,14,15,16,17]) == false\n@assert\
    \ is_sorted([1,2,2,3,6,7,8,9,10,11,12,13,14,15,16,17,18]) == false\n@assert is_sorted([1,2,2,3,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\
    \ == false\n@assert is_sorted([1,2,2,3,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\
    \ == false\n@assert is_sorted([1,2,2,3,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\
    \ == false\n@assert is_sorted([1,2,2,3,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\
    \ == false\n@assert is_sorted([1,2,2,3,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\
    \ == false\n@assert is_sorted([1,2,2,3,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\
    \ == false\n@assert is_sorted([1,2,2,3,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25",
  "    sorted = sort(lst)\n    unique = unique(sorted)\n    return length(unique)\
    \ == length(sorted)\nend", "    sorted = sort(lst)\n    return sorted == lst\n\
    end", "    sorted = true\n    for x in lst\n        if x != sort(x)\n        \
    \    sorted = false\n            break\n        end\n    end\n    return sorted\n\
    end", "    sorted = sort(lst)\n    uniques = unique(sorted)\n    return length(uniques)==length(sorted)\n\
    end", "    sorted = true\n    for x in lst\n        if x != sort(x)[1]\n     \
    \       sorted = false\n            break\n        end\n    end\n    return sorted\n\
    end", "    lst = sort(lst)\n    last = lst[1]\n    for i in 2:length(lst)\n  \
    \      if lst[i] != last\n            return false\n        last = lst[i]\n  \
    \  end\n    return true\nend", "    sorted = sort(lst)\n    unique = unique(sorted)\n\
    \    length(unique) == length(sorted)\nend", "    sorted = false\n    \n    for\
    \ x in lst\n        if sorted == true\n            return false\n        if x\
    \ == sorted\n            return false\n        sorted = true\n    end\n    return\
    \ true\nend", "    lst = sort(lst)\n    last = lst[1]\n    for i in 2:length(lst)\n\
    \        if lst[i] > last\n            return false\n        else\n          \
    \  last = lst[i]\n        end\n    end\n    return true\nend", "    \n    sorted\
    \ = sort(lst)\n    \n    if length(sorted) == length(lst)\n        return true\n\
    \    else\n        return false\n    end\nend", "    sorted = sort(lst)\n    \n\
    \    if length(lst) == length(sorted)\n        return true\n    else\n       \
    \ return false\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,7,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,7,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,7,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,7,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,7,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,7,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,7,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,7,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,7,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,7,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,7,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,7,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,7,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell", "    sorted = true\n    for x in lst\n        if x != sort(x)[1]\n  \
    \          sorted = false\n        end\n    end\n    return sorted\nend", "  \
    \  \n    sorted = sort(lst)\n    if length(sorted) == length(lst)\n        return\
    \ true\n    else\n        return false\n    end\nend", "    sorted = true\n  \
    \  for x in lst\n        if x != sort(x)[1]\n            sorted = false\n    \
    \    end\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_sorted([1,2,2,3,4,5,6,6,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\
    \ == true\n@assert is_sorted([1,2,2,3,4,5,6,6,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\
    \ == false\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number\
    \ is even.", "    sorted_list = sort(lst)\n    \n    if length(sorted_list) ==\
    \ length(lst)\n        return true\n    else\n        return false\n    end\n\
    end\n</cell>\n<code language=julia-1.4>\n@time is_sorted([1,2,2,3,3,4,5,6,7,8,9,9,10])\n\
    </cell>\n<text>\nExercise: Write a function that returns the number of unique\
    \ elements in a list. Assume no duplicates.", "    \n    sorted = sort(lst)\n\
    \    \n    if length(lst) == length(sorted)\n        return true\n    else\n \
    \       return false\n    end\nend", "    sorted = sort(lst)\n    uniques = unique(sorted)\n\
    \    lengths = length(uniques)\n    \n    if lengths == length(sorted)\n     \
    \   return true\n    else\n        return false\n    end\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that checks if a list has all unique elements. Assume\
    \ no negative numbers and only integers.", "    sorted = sort(lst)\n    \n   \
    \ if length(sorted) == length(lst)\n        true\n    else\n        false\n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([1,2,2,3])\
    \ == true\n@assert is_sorted([1,2,2,3,3]) == false\n@assert is_sorted([1,2,2,3,4])\
    \ == false\n@assert is_sorted([1,2,2,3,5,6,7,8,9,10]) == false\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that checks if a number is even.", "    \n    sorted::Bool\
    \ = is_sorted(sort(lst))\n    \n    if length(lst) == length(unique(lst))\n  \
    \      return sorted\n    else\n        return false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@time is_sorted(rand(1:10000,10000))\n</cell>\n<text>\n\
    Exercise: Write a function that takes a list of numbers and returns the number\
    \ of unique numbers in the list. Assume no negative numbers and only integers.",
  "    sorted = sort(lst)\n    return sorted == lst\nend", "    sorted = sort(lst)\n\
    \    uniques = unique(sorted)\n    length(uniques) == length(sorted)\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_sorted([1,2,2,3]) == true\n@assert is_sorted([1,2,2,3,3])\
    \ == false\n@assert is_sorted([1,2,2,3,3,3]) == false\n@assert is_sorted([1,2,2,3,3,3,3])\
    \ == false\n@assert is_sorted([1,2,2,3,3,3,4]) == false\n@assert is_sorted([1,2,2,3,3,3,5,3])\
    \ == false\n@assert is_sorted([1,2,2,3,3,3,5,3,3]) == false\n@assert is_sorted([1,2,2,3,3,3,5,3,5,3])\
    \ == false\n@assert is_sorted([1,2,2,3,3,3,5,3,5,3,3]) == false\n@assert is_sorted([1,2,2,3,3,3,5,3,5,3,5,3])\
    \ == false\n@assert is_sorted([1,2,2,3,3,3,5,3,5,3,5,3,3]) == false\n@assert is_sorted([1,2,2,3,3,3,5,3,5,3,5,3,5,3])\
    \ == false\n@assert is_sorted([1,2,2,3,3,3,5,3,5,3,5,3,5,3,3]) == false\n@assert\
    \ is_sorted([1,2,2,3,3,3,5,3,5,3,5,3,5,3,5,3]) == false\n@assert is_sorted([1,2,2,3,3,3,5,3,5,3,5,3,5,3,5,3,3])\
    \ == false\n@assert is_sorted([1,2,2,3,3,3,5,3,5,3,5,3,5,3,5,3,5,3]) == false\n\
    @assert is_sorted([1,2,2,3,3,3,5,3,5,3,5,3,5,3,5,3,5,3,3]) == false\n@assert is_sorted([1,2,2,3,3,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3])\
    \ == false\n@assert is_sorted([1,2,2,3,3,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5]) ==\
    \ false\n@assert is_sorted([1,2,2,3,3,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5]) ==\
    \ false\n@assert is_sorted([1,2,2,3,3,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3])\
    \ == false\n@assert is_sorted([1,2,2,3,3,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5])\
    \ == false\n@assert is_sorted([1,2,2,3,3,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3])\
    \ == false\n@assert is_sorted([1,2,2,3,3,", "    \n    sorted = sort(lst)\n  \
    \  \n    if length(sorted) == length(lst)\n        true\n    else\n        false\n\
    \    end\nend", "    sorted = sort(lst)\n    sorted.length == 1\nend", "    sorted\
    \ = true\n    for x in lst\n        if x != sort(x)\n            sorted = false\n\
    \            break\n        end\n    end\n    return sorted\nend", "    sorted\
    \ = sort(lst)\n    unique = unique(sorted)\n    return length(unique) == length(sorted)\n\
    end", "    sorted = true\n    for x in lst\n        if x != sort(x)\n        \
    \    sorted = false\n            break\n        end\n    end\n    return sorted\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([1,2,2,3,4,5,5,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\
    \ == true\n@assert is_sorted([1,2,2,3,4,5,5,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\
    \ == false\n</cell>\n<text>\nProblem 7", "    sorted_list = sort(lst)\n    \n\
    \    if length(sorted_list) == length(lst)\n        for (i,j) in enumerate(sorted_list)\n\
    \            if sorted_list[i] != lst[i]\n                return false\n     \
    \       end\n        end\n        return true\n    else\n        return false\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([1,1,2,2])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1,2,2,1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,1,1])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,1,2])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,1,3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,1,4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,1,5])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,1,6])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,1,7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,1,8])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,1,9])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,1,10])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,1,11])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,1,12])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,1,13])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,1,14])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,1,15])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,1,16])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,1,17])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,1,18])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,1,19])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,1,20])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,1,21])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,1,22])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,",
  "    sorted = true\n    for x in lst\n        if x != sort(x)\n            sorted\
    \ = false\n        end\n    end\n    return sorted\nend", "    sorted = sort(lst)\n\
    \    uniques = unique(sorted)\n    return length(uniques) == length(sorted)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([1,2,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    @assert !is_sorted([1,2,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    @assert !is_sorted([1,2,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    @assert !is_sorted([1,2,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n\
    @assert !is_sorted([1,2,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\n\
    @assert !is_sorted([1,2,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])\n\
    @assert !is_sorted([1,2,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26])\n\
    @assert !is_sorted([1,2,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27])\n\
    @assert !is_sorted([1,2,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28])\n\
    @assert !is_sorted([1,2,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29])\n\
    @assert !is_sorted([1,2,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30])\n\
    @assert !is_sorted([1,2,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31])\n\
    @assert !is_sorted([1,2,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32])\n\
    @assert !is_sorted([1,2,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33])\n\
    @assert !is_sorted([1,2,2,3,4,5,", "    sorted_list = sort(lst)\n    unique_values\
    \ = unique(sorted_list)\n    length(unique_values) == length(sorted_list) && all(unique_values\
    \ == sorted_list)\nend", "    sorted = true\n    for x in lst\n        if x !=\
    \ sort(x)\n            sorted = false\n            break\n        end\n    end\n\
    \    return sorted\nend", "    sorted = sort(lst)\n    \n    if length(sorted)\
    \ == length(lst)\n        return true\n    else\n        return false\n    end\n\
    end", "    \n    sorted_list = sort(lst)\n    \n    if length(sorted_list) ==\
    \ length(lst)\n        return true\n    else\n        return false\n    end\n\
    end", "    sorted = true\n    for x in lst\n        if x != sort(x)\n        \
    \    sorted = false\n        end\n    end\n    return sorted\nend", "    sorted\
    \ = true\n    for x in lst\n        if x != sort(x)\n            sorted = false\n\
    \        end\n    end\n    return sorted\nend", "    sorted = sort(lst)\n    sorted.length\
    \ == 1\nend", "    sorted = sort(lst)\n    length(sorted) == length(lst) && all(sorted\
    \ .== lst)\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,1,2,3,4])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,1,2,3,3,4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,1,2,3,3,4,5])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,1,2,3,3,4,5,6])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1,1,2,3,3,4,5,6,7])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,1,2,3,3,4,5,6,7,8])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,1,2,3,3,4,5,6,7,8,9])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,1,2,3,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1,1,2,3,3,4,5,6,7,8,9,10,11])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1,1,2,3,3,4,5,6,7,8,9,10,11,12])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1,1,2,3,3,4,5,6,7,8,9,10,11,12,13])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1,1,2,3,3,4,5,6,7,8,9,10,11,12,13,14])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,1,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,1,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,1,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,1,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,1,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,1,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])",
  "    sorted = sort(lst)\n    sorted.length == 1\nend", "    sorted_list = sort(lst)\n\
    \    \n    if length(sorted_list) == length(lst)\n        for (i,x) in enumerate(sorted_list)\n\
    \            if sorted_list[i] == x\n                return false\n          \
    \  end\n        end\n        return true\n    else\n        return false\n   \
    \ end\nend\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([1,2,2,3]) ==\
    \ true\n@assert is_sorted([1,2,2,3,3]) == false\n@assert is_sorted([1,2,2,3,4])\
    \ == false\n@assert is_sorted([1,2,2,3,5]) == false\n@assert is_sorted([1,2,2,3,5,5])\
    \ == false\n@assert is_sorted([1,2,2,3,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,",
  "    sorted = true\n    for x in lst\n        if x != sort(x)\n            sorted\
    \ = false\n        end\n    end\n    return sorted\nend", "    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \   end\n    end\n    return sorted\nend", "    sorted = sort(lst)\n    sorted.length\
    \ == 1\nend", "    sorted = sort(lst)\n    return sorted == lst\nend", "    lst\
    \ = sort(lst)\n    length(lst) == 1 || lst[1] == lst[end]\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert is_sorted([1,2,2,3]) == true\n@assert is_sorted([1,2,2,3,3])\
    \ == false\n@assert is_sorted([1,2,2,3,4]) == false\n@assert is_sorted([1,2,2,3,5,5])\
    \ == false\n@assert is_sorted([1,2,2,3,5,5,5]) == false\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns whether a number is even.", "    sorted = true\n\
    \    for x in lst\n        if x != sort(x)[1]\n            sorted = false\n  \
    \      end\n    end\n    return sorted\nend", "    sorted = sort(lst)\n    sorted.length\
    \ == 1\nend\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([1,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of unique\
    \ elements in a given list.", "    sorted = sort(lst)\n    length(sorted) == length(lst)\
    \ && all(sorted .== lst)\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4,5,6,6,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4,5,6,6,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4,5,6,6,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4,5,6,6,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4,5,6,6,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4,5,6,6,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4,5,6,6,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4,5,6,6,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4,5,6,6,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4,5,6,6,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4,5,6,6,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4,5,6,6,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4,5,6,6,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4,5,6,6,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4,5,6,6,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4,5,6,6,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4,5,6,6,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4,5,6,6,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4,5,6,6,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,", "    sorted = true\n   \
    \ for x in lst\n        if x != sort(x)\n            sorted = false\n        end\n\
    \    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,2,3,3,4,4,5,5,5,6,6,7,7,8,8,9,9,10,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,35,35,36,36,37,37,38,38,39,39,40,40,41,41,42,42,43,43,44,44,45,45,46,46,47,47,48,48,49,49,50,50,51,51,52,52,53,53,54,54,55,55,56,56,57,57,58,58,59,59,60,60,61,61,62,62,63,63,64,64,65,65,66,66,67,67,68,68,69,69,70,70,71,71,72,72,73,73,74,74,75,75,76,76,77,77,78,78,79,79,80,80,81,81,82,82,83,83,84,84,85,85,86,86,87,87,88,88,89,89,90,90,91,91,92,92,93,93,94,94,95,95,96,96,97,97,98,98,99,99,100,100,101,101,102,102,103,103,104,104,105,105,106,106,107,107,108,108,109,109,110,110,111,111,112,112,113,113,114,114,115,115,116,116,117,117,118,118,119,119,120,120,121,121,122,122,123,123,124,124,125,125,126,126,127,127,128,128,129,129,130,130,131,131,132,132,133,133,134,134,135,135,136,136,137,137,138,138,139,139,140,140,141,14",
  "    sorted = true\n    for x in lst\n        if sorted == false\n            sorted\
    \ = false\n        else\n            if x == sorted[1]\n                sorted\
    \ = false\n            else\n                sorted = true\n            end\n\
    \        end\n    end\n    return sorted\nend", "    sorted = true\n    sorted\
    \ = false\n    for x in lst\n        if x != sort(x)\n            sorted = false\n\
    \        end\n    end\n    return sorted\nend", "    sorted = true\n    for x\
    \ in lst\n        if x != sort(x)\n            sorted = false\n            break\n\
    \        end\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.3>\n\
    is_sorted([1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10])\n</cell>\n<code language=julia-1.3>\n\
    is_sorted([1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10])\n</cell>\n<code language=julia-1.3>\n\
    is_sorted([1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10])\n</cell>\n<code language=julia-1.3>\n\
    is_sorted([1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10])\n</cell>\n<code language=julia-1.3>\n\
    is_sorted([1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10])\n</cell>\n<code language=julia-1.3>\n\
    is_sorted([1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10])\n</cell>\n<code language=julia-1.3>\n\
    is_sorted([1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10])\n</cell>\n<code language=julia-1.3>\n\
    is_sorted([1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10])\n</cell>\n<code language=julia-1.3>\n\
    is_sorted([1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10])\n</cell>\n<code language=julia-1.3>\n\
    is_sorted([1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10])\n</cell>\n<code language=julia-1.3>\n\
    is_sorted([1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10])\n</cell>\n<code language=julia-1.3>\n\
    is_sorted([1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10])\n</cell>\n<code language=julia-1.3>\n\
    is_sorted([1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10])\n</cell>\n<code language=julia-1.3>\n\
    is_sorted([1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10])\n</cell>\n<code language=julia-1.3>\n\
    is_sorted([1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10])\n</cell>\n<code language=julia-1.3>\n\
    is_sorted([1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10])\n</", "    sorted = true\n \
    \   for x in lst\n        if x != sort(x)\n            sorted = false\n      \
    \      break\n    end\n    return sorted\nend", "    sorted = sort(lst)\n    unique\
    \ = unique(sorted)\n    lengths = countmap(unique)\n    \n    for k in keys(lengths)\n\
    \        if lengths[k] > 1\n            return false\n        end\n    end\n \
    \   return true\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([1,1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,1,2,3,3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,1,2,3,4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,1,2,3,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,1,2,3,5,6,7,8,9,10,10,10,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,1,2,3,5,6,7,8,9,10,10,10,10,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,1,2,3,5,6,7,8,9,10,10,10,10,10,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted
  "    sorted = false\n    for x in lst\n        if x != sort(x)[1]\n            sorted\
    \ = true\n            break\n        end\n    end\n    return sorted\nend", " \
    \   \n    sorted = sort(lst)\n    if length(sorted) == length(lst)\n        return\
    \ true\n    else\n        return false\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    is_sorted([1,1,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10])\n</cell>\n<text>\nExercise\n\
    Write a function that checks whether a vector is sorted in descending order. Assume\
    \ no negative numbers and only integers.", "    sorted = sort(lst)\n    \n   \
    \ if length(sorted) == length(lst)\n        return true\n    else\n        return\
    \ false\n    end\nend", "    sorted = true\n    for x in lst\n        if x !=\
    \ sort(x)[1]\n            sorted = false\n        end\n    end\n    return sorted\n\
    end", "    \n    sorted_list = sort(lst)\n    \n    if length(sorted_list) ==\
    \ length(lst)\n        return true\n    else\n        return false\n    end\n\
    end\n</cell>\n<code language=julia-1.4>\nis_sorted([1,2,2,3,4])\n</cell>\n<code\
    \ language=julia-1.4>\nis_sorted([1,2,2,3,4])\n</cell>\n<code language=julia-1.4>\n\
    is_sorted([1,2,2,3,4])\n</cell>\n<code language=julia-1.4>\nis_sorted([1,2,2,3,4])\n\
    </cell>\n<code language=julia-1.4>\nis_sorted([1,2,2,3,4])\n</cell>\n<code language=julia-1.4>\n\
    is_sorted([1,2,2,3,4])\n</cell>\n<code language=julia-1.4>\nis_sorted([1,2,2,3,4])\n\
    </cell>\n<code language=julia-1.4>\nis_sorted([1,2,2,3,4])\n</cell>\n<code language=julia-1.4>\n\
    is_sorted([1,2,2,3,4])\n</cell>\n<code language=julia-1.4>\nis_sorted([1,2,2,3,4])\n\
    </cell>\n<code language=julia-1.4>\nis_sorted([1,2,2,3,4])\n</cell>\n<code language=julia-1.4>\n\
    is_sorted([1,2,2,3,4])\n</cell>\n<code language=julia-1.4>\nis_sorted([1,2,2,3,4])\n\
    </cell>\n<code language=julia-1.4>\nis_sorted([1,2,2,3,4])\n</cell>\n<code language=julia-1.4>\n\
    is_sorted([1,2,2,3,4])\n</cell>\n<code language=julia-1.4>\nis_sorted([1,2,2,3,4])\n\
    </cell>\n<code language=julia-1.4>\nis_sorted([1,2,2,3,4])\n</cell>\n<code language=julia-1.4>\n\
    is_sorted([1,2,2,3,4])\n</cell>\n<code language=julia-1.4>\nis_sorted([1,2,2,3,4])\n\
    </cell>\n<code language=julia-1.4>\nis_sorted([1,2,2,3,4])\n</cell>\n<code language=julia-1.4>\n\
    is_sorted([1,2,2,3,4])\n</cell>\n<code language=julia-1.4>\nis_sorted([1,2,2,3,4])\n\
    </cell>\n<code language=julia-1.4>\nis_sorted([1,2,2,3,4])\n</cell>\n<code language=julia-1.4>\n\
    is_sorted([1,2,2,3,4])\n</cell>\n<code language=julia-1.4>\nis_sorted([1,2,2,3,4])\n\
    </cell>\n<code language=julia-1.4>\nis_sorted([1,2,2,3,4])\n</cell>\n<code language=julia-1.4>\n\
    is_sorted(", "    sorted = sort(lst)\n    length(sorted) == 1 && sorted[0] ==\
    \ 0\nend\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([1,2,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\
    \ == true\n@assert is_sorted([1,2,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\
    \ == false\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number\
    \ is even.", "    sorted = sort(lst)\n    last = sorted[end]\n    for x in lst\n\
    \        if x == last\n            return false\n        else\n            last\
    \ = x\n        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.3>\n\
    is_sorted([1,2,2,3,3,3,4,4,4,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,",
  "    \n    sorted = sort(lst)\n    \n    if length(sorted) == length(lst)\n    \
    \    for ii in 1:length(lst)\n            if lst[ii] != sorted[ii]\n         \
    \       return false\n            end\n        end\n        return true\n    else\n\
    \        return false\n    end\nend", "    sorted = sort(lst)\n    return sorted\
    \ == lst\nend\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([1,2,2,3])\
    \ == true\n@assert is_sorted([1,2,2,3,3]) == false\n@assert is_sorted([1,2,2,3,1])\
    \ == false\n@assert is_sorted([1,2,2,3,2]) == false\n@assert is_sorted([1,2,2,3,3])\
    \ == false\n@assert is_sorted([1,2,2,3,4]) == false\n@assert is_sorted([1,2,2,3,5])\
    \ == false\n@assert is_sorted([1,2,2,3,6]) == false\n@assert is_sorted([1,2,2,3,7])\
    \ == false\n@assert is_sorted([1,2,2,3,8]) == false\n@assert is_sorted([1,2,2,3,9])\
    \ == false\n@assert is_sorted([1,2,2,3,10]) == false\n@assert is_sorted([1,2,2,3,11])\
    \ == false\n@assert is_sorted([1,2,2,3,12]) == false\n@assert is_sorted([1,2,2,3,13])\
    \ == false\n@assert is_sorted([1,2,2,3,14]) == false\n@assert is_sorted([1,2,2,3,15])\
    \ == false\n@assert is_sorted([1,2,2,3,16]) == false\n@assert is_sorted([1,2,2,3,17])\
    \ == false\n@assert is_sorted([1,2,2,3,18]) == false\n@assert is_sorted([1,2,2,3,19])\
    \ == false\n@assert is_sorted([1,2,2,3,20]) == false\n@assert is_sorted([1,2,2,3,21])\
    \ == false\n@assert is_sorted([1,2,2,3,22]) == false\n@assert is_sorted([1,2,2,3,23])\
    \ == false\n@assert is_sorted([1,2,2,3,24]) == false\n@assert is_sorted([1,2,2,3,25])\
    \ == false\n@assert is_sorted([1,2,2,3,26]) == false\n@assert is_sorted([1,2,2,3,27])\
    \ == false\n@assert is_sorted([1,2,2,3,28]) == false\n@assert is_sorted([1,2,2,3,29])\
    \ == false\n@assert is_sorted([1,2,2,3,30]) == false\n@assert is_sorted([1,2,2,3,31])\
    \ == false\n@assert is_sorted([1,2,2,3,32]) == false\n@assert is_sorted([1,2,2,3,33])\
    \ == false\n@assert is_sorted([1,2,2,3,34]) == false\n@assert is_sorted([1,2,2,3,35])\
    \ == false\n@assert is_sorted([1,2,2,3,36]) == false\n@assert is_sorted([1,2,2,",
  "    sorted = true\n    for x in lst\n        if x != sort(x)[1]\n            sorted\
    \ = false\n        end\n    end\n    return sorted\nend", "    sorted = sort(lst)\n\
    \    if length(sorted) == length(lst)\n        return true\n    else\n       \
    \ return false\n    end\nend", "    sorted = sort(lst)\n    \n    if length(sorted)\
    \ == length(lst)\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\n@assert is_sorted([1,2,2,3]) == true\n@assert is_sorted([1,2,2,3])\
    \ == false\n@assert is_sorted([1,2,2,3,3]) == false\n@assert is_sorted([1,2,2,3,4])\
    \ == false\n@assert is_sorted([1,2,2,3,5]) == false\n@assert is_sorted([1,2,2,3,5,5])\
    \ == false\n@assert is_sorted([1,2,2,3,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,",
  "    sorted = sort(lst)\n    uniques = unique(sorted)\n    length(uniques) <= length(sorted)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,35,35,36,36,37,37,38,38,39,39,40,40,41,41,42,42,43,43,44,44,45,45,46,46,47,47,48,48,49,49,50,50,51,51,52,52,53,53,54,54,55,55,56,56,57,57,58,58,59,59,60,60,61,61,62,62,63,63,64,64,65,65,66,66,67,67,68,68,69,69,70,70,71,71,72,72,73,73,74,74,75,75,76,76,77,77,78,78,79,79,80,80,81,81,82,82,83,83,84,84,85,85,86,86,87,87,88,88,89,89,90,90,91,91,92,92,93,93,94,94,95,95,96,96,97,97,98,98,99,99,100,100,101,101,102,102,103,103,104,104,105,105,106,106,107,107,108,108,109,109,110,110,111,111,112,112,113,113,114,114,115,115,116,116,117,117,118,118,119,119,120,120,121,121,122,122,123,123,124,124,125,125,126,126,127,127,128,128,129,129,130,130,131,131,132,132,133,133,134,134,135,135,136,136,137,137,138,138,139,139,140,140,141,141,142,142,14",
  "    sorted = sort(lst)\n    if length(lst) == length(sorted)\n        return true\n\
    \    else\n        return false\n    end\nend\n</code>\n<|/ a tags=julia,sorting\
    \ |>\n<| c |>\nThis doesn't work if `lst` is an empty vector. `sort` returns an\
    \ empty vector, so `length(lst) == length(sorted)` will always be true.\n<|/ c\
    \ |>\n<| c |>\nThanks for pointing that out. I fixed the code accordingly.\n<|/\
    \ c |>\n<| a tags=julia,sorting |>\nThe most efficient way is to use Julia's built-in\
    \ sort! function, which sorts in-place:\n<code>\njulia> a = [1, 3, 2]\n3-element\
    \ Array{Int64,1}:\n 1\n 3\n 2", "    sorted = sort(lst)\n    return sorted ==\
    \ lst\nend", "    sorted = true\n    for x in lst\n        if x != sort(x)\n \
    \           sorted = false\n        end\n    end\n    return sorted\nend", " \
    \   sorted = true\n    for x in lst\n        if x != sort(x)\n            sorted\
    \ = false\n        end\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_sorted([1,2,2,3,4]) == true\n@assert is_sorted([1,2,2,3,5]) == false\n\
    @assert is_sorted([1,2,2,3,5,6,7]) == false\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector and returns the sum of the numbers in the vector.\
    \ Assume no negative numbers and only integers.", "    sorted = sort(lst)\n  \
    \  if length(sorted) == length(lst)\n        for (i,x) in enumerate(sorted)\n\
    \            if x != lst[i]\n                return false\n            end\n \
    \       end\n        return true\n    else\n        return false\n    end\nend",
  "    sorted = sort(lst)\n    uniques = unique(sorted)\n    length(uniques) == length(sorted)\n\
    end", "    sorted = true\n    for x in lst\n        if x != sort(x)[1]\n     \
    \       sorted = false\n            break\n        end\n    end\n    return sorted\n\
    end", "    \n    sorted::Bool = false\n    \n    for i in 1:length(lst)\n    \
    \    if lst[i] > lst[i+1]\n            sorted = false\n            break\n   \
    \     end\n    end\n    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3,4,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4,4,5,6,7,8,9,10,11])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4,4,5,6,7,8,9,10,11,12])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4,4,5,6,7,8,9,10,11,12,13])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4,4,5,6,7,8,9,10,11,12,13,14])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,4,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,",
  "    sorted = true\n    for x in lst\n        if x != sort(x)[1]\n            sorted\
    \ = false\n            break\n        end\n    end\n    return sorted\nend", " \
    \   sorted = true\n    \n    for x in lst\n        if x != sort(x)\n         \
    \   sorted = false\n        end\n    end\n    \n    return sorted\nend", "   \
    \ sorted = sort(lst)\n    unique = unique(sorted)\n    return length(unique) ==\
    \ length(sorted)\nend", "    sorted = sort(lst)\n    last = sorted[end]\n    for\
    \ x in sorted\n        if x == last\n            return false\n        end\n \
    \   end\n    return true\nend", "    sorted = true\n    for x in lst\n       \
    \ if x != sort(x)\n            sorted = false\n        end\n    end\n    return\
    \ sorted\nend", "    sorted = false\n    for x in lst\n        if x != sort(x)[1]\n\
    \            sorted = true\n            break\n        end\n    end\n    return\
    \ sorted\nend", "    sorted = true\n    for x in lst\n        if x != sort(x)\n\
    \            sorted = false\n        end\n    end\n    return sorted\nend", " \
    \   sorted = sort(lst)\n    uniques = unique(sorted)\n    return length(uniques)\
    \ == length(sorted)\nend", "    sorted = true\n    for x in lst\n        if x\
    \ != sort(x)\n            sorted = false\n        end\n    end\n    return sorted\n\
    end", "    sorted = sort(lst)\n    unique = unique(sorted)\n    return length(unique)\
    \ == length(sorted)\nend", "    sorted = sort(lst)\n    last = sorted[end]\n \
    \   last = last-1\n    for x in lst\n        if x == last \n            return\
    \ false\n        else\n            last = x\n        end\n    end\n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([1,2,2,3,4,4,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\
    \ == true\n@assert is_sorted([1,2,2,3,4,4,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\
    \ == false\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of times a given value appears in a given vector.", "    sorted = false\n  \
    \  \n    for x in lst\n        if x == sort(x)[1]\n            sorted = true\n\
    \            break\n        end\n    end\n    \n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_sorted([1,1,2,3]) == true\n@assert is_sorted([1,2,2,3])\
    \ == false\n@assert is_sorted([1,2,2,3]) == false\n@assert is_sorted([1,2,2,3])\
    \ == false\n@assert is_sorted([1,2,2,3]) == false\n@assert is_sorted([1,2,2,3])\
    \ == false\n@assert is_sorted([1,2,2,3]) == false\n@assert is_sorted([1,2,2,3])\
    \ == false\n@assert is_sorted([1,2,2,3]) == false\n@assert is_sorted([1,2,2,3])\
    \ == false\n@assert is_sorted([1,2,2,3]) == false\n@assert is_sorted([1,2,2,3])\
    \ == false\n@assert is_sorted([1,2,2,3]) == false\n@assert is_sorted([1,2,2,3])\
    \ == false\n@assert is_sorted([1,2,2,3]) == false\n@assert is_sorted([1,2,2,3])\
    \ == false\n@assert is_sorted([1,2,2,3]) == false\n@assert is_sorted([1,2,2,3])\
    \ == false\n@assert is_sorted([1,2,2,3]) == false\n@assert is_sorted([1,2,2,3])\
    \ == false\n@assert is_sorted([1,2,2,3]) == false\n@assert is_sorted([1,2,2,3])\
    \ == false\n@assert is_sorted([1,2,2,3]) == false\n@assert is_sorted([1,2,2,3])\
    \ == false\n@assert is_sorted([1,2,2,3]) == false\n@assert is_sorted([1,2,2,3])\
    \ == false\n@assert is_sorted([1,2,2,3]) == false\n@assert is_sorted([1,2,2,3])\
    \ == false\n@assert is_sorted([1,2,2,3]) == false\n@assert is_sorted([1,2,2,3])\
    \ == false\n@assert is_sorted([1,2,2,3]) == false\n@assert is_sorted([1,2,2,3])\
    \ == false\n@assert is_sorted([1,2,2,3]) == false\n@assert is_sorted([1,2,2,3])\
    \ == false\n@assert is_sorted([1,2,2,3]) == false\n@assert is_sorted([1,2,2,3])\
    \ == false\n@assert is_sorted([1,2,2,3]) == false\n@assert is_sorted([1,2,2,3])\
    \ == false\n@assert is_sorted([1,2,2,3]) == false\n@assert is_sorted([1,2,2,3])\
    \ == false\n@assert is_sorted([1,2,2,3]) == false\n@assert is_sorted([1,2,2,3])\
    \ == false\n@assert is_sorted([", "    \n    sorted = sort(lst)\n    \n    if\
    \ length(sorted) == length(lst)\n        return true\n    else\n        return\
    \ false\n    end\nend", "    sorted = sort(lst)\n    sorted = sorted[sorted.!=0]\n\
    \    return length(sorted) == length(lst)\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
