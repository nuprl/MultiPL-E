language: jl
name: HumanEval_98_count_upper
results:
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for x in s\n        if x % 2 == 0\n            count_upper\
    \ += 1\n        end\n    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq2by51g5.jl:15\nin expression starting at\
    \ /tmp/tmpq2by51g5.jl:15\n"
  stdout: ''
  timestamp: 1659747099
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in 2..length(s)\n        if s[i] == 'A' or\
    \ s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U'\n            count_upper\
    \ = count_upper + 1\n        end\n    end\n    return count_upper\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"s\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpy9m7_e6w.jl:9\nin expression starting at /tmp/tmpy9m7_e6w.jl:9\n"
  stdout: ''
  timestamp: 1659747099
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    \n    count_upper = 0\n    \n    for i in (2..length(s)-2) do \n     \
    \   if s[i] == 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U'\
    \ then \n            count_upper = count_upper + 1\n        end\n    end\n   \
    \ \n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    The quick brown fox jumps over the lazy dog\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the number of vowels found in\
    \ it.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_btfh06u.jl:10\nin expression starting at /tmp/tmp_btfh06u.jl:10\n"
  stdout: ''
  timestamp: 1659747099
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in 2 to length(s)\n        if s[i] == 'A' or\
    \ s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U'\n            count_upper\
    \ += 1\n        end\n    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"Hello, world!\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of vowels contained in the string.\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpfwlgmr91.jl:8 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfwlgmr91.jl:8\n\
    in expression starting at /tmp/tmpfwlgmr91.jl:8\n"
  stdout: ''
  timestamp: 1659747099
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for x in s\n        if x == 'A' or x == 'E' or x\
    \ == 'I' or x == 'O' or x == 'U'\n            count_upper += 1\n        end\n\
    \    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.3>\ncount_upper(\"\
    AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of uppercase vowels in a string.\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"x\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4ceocwwi.jl:9\nin expression starting at /tmp/tmp4ceocwwi.jl:9\n"
  stdout: ''
  timestamp: 1659747099
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in (0 .. length(s)-2) do \n        if s[i]\
    \ == 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U' then\n  \
    \          count_upper += 1\n        end\n    end\n    return count_upper\nend\n\
    </cell>\n<code language=julia-1.4>\ncount_upper(\"The quick brown fox jumps over\
    \ the lazy dog\")\n</cell>\n<text>\nExercise 2\nWrite a function that counts the\
    \ number of uppercase vowels in a string.\nWrite a function that counts the number\
    \ of uppercase vowels in a string.\nWrite a function that counts the number of\
    \ uppercase vowels in a string.\nWrite a function that counts the number of uppercase\
    \ vowels in a string.\nWrite a function that counts the number of uppercase vowels\
    \ in a string.\nWrite a function that counts the number of uppercase vowels in\
    \ a string.\nWrite a function that counts the number of uppercase vowels in a\
    \ string.\nWrite a function that counts the number of uppercase vowels in a string.\n\
    Write a function that counts the number of uppercase vowels in a string.\nWrite\
    \ a function that counts the number of uppercase vowels in a string.\nWrite a\
    \ function that counts the number of uppercase vowels in a string.\nWrite a function\
    \ that counts the number of uppercase vowels in a string.\nWrite a function that\
    \ counts the number of uppercase vowels in a string.\nWrite a function that counts\
    \ the number of uppercase vowels in a string.\nWrite a function that counts the\
    \ number of uppercase vowels in a string.\nWrite a function that counts the number\
    \ of uppercase vowels in a string.\nWrite a function that counts the number of\
    \ uppercase vowels in a string.\nWrite a function that counts the number of uppercase\
    \ vowels in a string.\nWrite a function that counts the number of uppercase vowels\
    \ in a string.\nWrite a function that counts the number of uppercase vowels in\
    \ a string.\nWrite a function that counts the number of uppercase vowels in a\
    \ string.\nWrite a function that counts the number of uppercase vowels in a string.\n\
    Write a function that counts the number of uppercase vowels in a string.\nWrite\
    \ a function that counts the number of uppercase vowels in a string.\nWrite a\
    \ function that counts the number of uppercase vowels in a string.\nWrite a function\
    \ that counts the number of uppercase vowels in a string.\nWrite a function that\
    \ counts the number of uppercase vowels in a string.\nWrite a function that counts\
    \ the number of uppercase vowels in a string.\nWrite a function that counts the\
    \ number of uppercase vowels in a string.\nWrite a function that counts the number\
    \ of uppercase vowels in a string.\nWrite a function that counts the number of\
    \ uppercase vowels in a string.\nWrite a function that counts the number of uppercase\
    \ vowels in a string.\nWrite a function that counts the number of uppercase vowels\
    \ in a string.\nWrite a function that counts the number of uppercase vowels in\
    \ a string.\nWrite a function that counts the number of uppercase vowels in a\
    \ string.\nWrite a function that \nusing Test\n\n@testset begin\n\ncandidate =\
    \ count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpuag06nl3.jl:8\nin expression starting at /tmp/tmpuag06nl3.jl:8\n"
  stdout: ''
  timestamp: 1659747099
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for x in s\n        if x == 'A' or x == 'E' or x\
    \ == 'I' or x == 'O' or x == 'U'\n            count_upper += 1\n        end\n\
    \    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.0>\ncount_upper(\"\
    AaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaA\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"x\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphbgt55el.jl:9\nin expression starting at /tmp/tmphbgt55el.jl:9\n"
  stdout: ''
  timestamp: 1659747099
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for c in s\n        if c == 'A' or c == 'E' or c\
    \ == 'I' or c == 'O' or c == 'U'\n            count_upper += 1\n        end\n\
    \    end\n    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpizjlsgi2.jl:9\nin expression starting at /tmp/tmpizjlsgi2.jl:9\n"
  stdout: ''
  timestamp: 1659747099
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for c in s\n        if c == 'A' or c == 'E' or c\
    \ == 'I' or c == 'O' or c == 'U'\n            count_upper += 1\n        end\n\
    \    end\n    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpizjlsgi2.jl:9\nin expression starting at /tmp/tmpizjlsgi2.jl:9\n"
  stdout: ''
  timestamp: 1659747099
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in 2..length(s) do \n        if s[i] == 'A'\
    \ or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U' then \n        \
    \    count_upper = count_upper + 1\n        end\n    end\n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"s\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmplejh25bi.jl:9\nin expression starting at /tmp/tmplejh25bi.jl:9\n"
  stdout: ''
  timestamp: 1659747099
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for x in s\n        if isupper(x)\n            count_upper\
    \ += 1\n            \n    return count_upper\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpan70_no8.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpan70_no8.jl:1\n\
    in expression starting at /tmp/tmpan70_no8.jl:1\n"
  stdout: ''
  timestamp: 1659747099
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for c in s\n        if c == 'A'\n            count_upper\
    \ += 1\n        elif c == 'E'\n            count_upper += 1\n        elif c ==\
    \ 'I'\n            count_upper += 1\n        elif c == 'O'\n            count_upper\
    \ += 1\n        elif c == 'U'\n            count_upper += 1\n        end\n   \
    \ end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy \nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpubu1fvko.jl:11\nin expression starting at /tmp/tmpubu1fvko.jl:11\n"
  stdout: ''
  timestamp: 1659747099
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for c in s\n        if isupper(c)\n            count_upper\
    \ += 1\n        end\n    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7uex5s53.jl:15\nin expression starting at\
    \ /tmp/tmp7uex5s53.jl:15\n"
  stdout: ''
  timestamp: 1659747099
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    \n    count_upper = 0\n    \n    for i in (2..length(s)-2) do \n     \
    \   if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'\
    \ then \n            count_upper = count_upper + 1\n        end\n    end\n   \
    \ \n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    The quick brown fox jumps over the lazy dog\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the number of vowels contained\
    \ in the string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t\
    @test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"\
    dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpl5ogi7ly.jl:10\nin expression starting at /tmp/tmpl5ogi7ly.jl:10\n"
  stdout: ''
  timestamp: 1659747099
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    \n    count_upper = 0\n    \n    for i in 2 to length(s)\n        if s[i]\
    \ == 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U'\n       \
    \     count_upper += 1\n        end\n    end\n    \n    return count_upper\nend\n\
    </cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpyw24zo5s.jl:10 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyw24zo5s.jl:10\n\
    in expression starting at /tmp/tmpyw24zo5s.jl:10\n"
  stdout: ''
  timestamp: 1659747099
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    \n    count_upper = 0\n    for i in (2..length(s)-2) do \n        if s[i]\
    \ == 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U' then \n \
    \           count_upper += 1 \n        else \n            count_upper = 0 \n \
    \       end \n    end \n    return count_upper \nend \n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns the number of vowels \nin each word in the string.\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgh7hdhju.jl:9\nin expression starting at /tmp/tmpgh7hdhju.jl:9\n"
  stdout: ''
  timestamp: 1659747099
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for x in s\n        if x % 2 == 0\n            count_upper\
    \ += 1\n        end\n    end\n    return count_upper\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpaur_vnhi.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpaur_vnhi.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"aBCdEf\") == 1\n  MethodError: no method matching rem(::Char,\
    \ ::Int64)\n  Closest candidates are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero})\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/div.jl:80\n    rem(::Any, ::Any,\
    \ !Matched::RoundingMode{:Down}) at /shared/centos7/julia/1.7.3/share/julia/base/div.jl:81\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at /shared/centos7/julia/1.7.3/share/julia/base/div.jl:82\n\
    \    ...\n  Stacktrace:\n   [1] count_upper(s::String)\n     @ Main /tmp/tmpaur_vnhi.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpaur_vnhi.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaur_vnhi.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpaur_vnhi.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdefg\") == 0\n  MethodError: no method matching rem(::Char, ::Int64)\n\
    \  Closest candidates are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero})\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/div.jl:80\n    rem(::Any, ::Any,\
    \ !Matched::RoundingMode{:Down}) at /shared/centos7/julia/1.7.3/share/julia/base/div.jl:81\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at /shared/centos7/julia/1.7.3/share/julia/base/div.jl:82\n\
    \    ...\n  Stacktrace:\n   [1] count_upper(s::String)\n     @ Main /tmp/tmpaur_vnhi.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpaur_vnhi.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaur_vnhi.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpaur_vnhi.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"dBBE\") == 0\n  MethodError: "
  timestamp: 1659747102
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for x in s\n        if isupper(x)\n            count_upper\
    \ += 1\n    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp5iqu0uzm.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5iqu0uzm.jl:1\n\
    in expression starting at /tmp/tmp5iqu0uzm.jl:1\n"
  stdout: ''
  timestamp: 1659747099
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    \n    count_upper = 0\n    for i in 0 .. s.length-1\n        if s[i] ==\
    \ 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U'\n          \
    \  count_upper += 1\n        end\n    end\n    return count_upper\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"The quick brown fox jumps over the lazy\
    \ dog\")\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of uppercase vowels in a string. \nThe function should take a string as its\
    \ argument and return the number of uppercase vowels.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"s\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgyaoilyp.jl:10\nin expression starting at /tmp/tmpgyaoilyp.jl:10\n"
  stdout: ''
  timestamp: 1659747099
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for x in s\n        if x == 'A' or x == 'E' or x\
    \ == 'I' or x == 'O' or x == 'U'\n            count_upper += 1\n    return count_upper\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"x\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpcdd7krmr.jl:9\nin expression starting at /tmp/tmpcdd7krmr.jl:9\n"
  stdout: ''
  timestamp: 1659747099
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for x in s\n        if x == 'A' or x == 'E' or x\
    \ == 'I' or x == 'O' or x == 'U'\n            count_upper += 1\n        end\n\
    \    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.3>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of vowels found in it.\nusing Test\n\n@testset begin\n\
    \ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"x\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4xfo78kw.jl:9\nin expression starting at /tmp/tmp4xfo78kw.jl:9\n"
  stdout: ''
  timestamp: 1659747099
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in 2..length(s)\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'\n            count_upper\
    \ += 1\n        end\n    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the \nusing Test\n\n@testset begin\n\
    \ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj1z9085m.jl:15\nin expression starting at\
    \ /tmp/tmpj1z9085m.jl:15\n"
  stdout: ''
  timestamp: 1659747099
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in 0 .. length(s)-1 do\n        if s[i] ==\
    \ 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U' then\n     \
    \       count_upper = count_upper + 1\n        end\n    end\n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_upper(\"The quick brown fox jumps\
    \ over the lazy dog\")\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of uppercase vowels in a string.\nusing Test\n\n@testset begin\n\n\
    candidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxfplmyih.jl:8\nin expression starting at /tmp/tmpxfplmyih.jl:8\n"
  stdout: ''
  timestamp: 1659747099
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for c in s\n        if isupper(c)\n            count_upper\
    \ += 1\n            \n    return count_upper\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmprp_a_hvc.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprp_a_hvc.jl:1\n\
    in expression starting at /tmp/tmprp_a_hvc.jl:1\n"
  stdout: ''
  timestamp: 1659747099
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in (2..length(s)-2) do \n        if s[i] ==\
    \ 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U' then \n    \
    \        count_upper = count_upper + 1\n        end\n    end\n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of vowels contained in the string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2dhwqkr5.jl:8\nin expression starting at /tmp/tmp2dhwqkr5.jl:8\n"
  stdout: ''
  timestamp: 1659747100
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    \n    count_upper = 0\n    \n    for c in s\n        if isupper(c)\n \
    \           if c == 'A'\n                count_upper += 1\n            elseif\
    \ c == 'E'\n                count_upper += 1\n            elseif c == 'I'\n  \
    \              count_upper += 1\n            elseif c == 'O'\n               \
    \ count_upper += 1\n            elseif c == 'U'\n                count_upper +=\
    \ 1\n            else\n                count_upper += 0\n        end\n    end\n\
    \    \n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    The quick brown fox jumps over the lazy dog\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the number of vowels found in\
    \ it.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnog2a6r6.jl:29\nin expression starting at\
    \ /tmp/tmpnog2a6r6.jl:29\n"
  stdout: ''
  timestamp: 1659747101
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    \n    count_upper = 0\n    for i = 1:length(s) do\n        if s[i] ==\
    \ 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U' then\n     \
    \       count_upper = count_upper + 1\n        end\n    end\n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_upper(\"Hello World\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that counts the number of uppercase vowels\
    \ in a string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"s\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmph7e8oo7g.jl:10\nin expression starting at /tmp/tmph7e8oo7g.jl:10\n"
  stdout: ''
  timestamp: 1659747100
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in 0 .. length(s)/2 do\n        if s[i] ==\
    \ 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U' then\n     \
    \       count_upper = count_upper + 1\n        end\n    end\n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAa\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_ea4ddnl.jl:8\nin expression starting at /tmp/tmp_ea4ddnl.jl:8\n"
  stdout: ''
  timestamp: 1659747100
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for x in s\n        if isupper(x)\n            count_upper\
    \ += 1\n        end\n    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"HELLO\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hELLO\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hEllO\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hEllO\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hEllO\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hEllO\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hEllO\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hEllO\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hEllO\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hEllO\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hEllO\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hEllO\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hEllO\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hEllO\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hEllO\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hEllO\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hEllO\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hEllO\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hEllO\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hEllO\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hEllO\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hEllO\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hEllO\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hEllO\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"h\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo9f5uolw.jl:15\nin expression starting at\
    \ /tmp/tmpo9f5uolw.jl:15\n"
  stdout: ''
  timestamp: 1659747100
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in (2..length(s)-2) do \n        if s[i] ==\
    \ 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U' then \n    \
    \        count_upper = count_upper + 1\n        end\n    end\n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\"\
    )\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of vowels contained in the string. \nThe vowels are \"a\", \"e\"\
    , \"i\", \"o\", and \"u\". \nThe function should ignore all non-vowel characters.\
    \ \nThe function should ignore case when counting vowels. \nThe function should\
    \ ignore punctuation marks. \nThe function should ignore spaces. \nThe function\
    \ should ignore other control characters. \nThe function should ignore all non-printable\
    \ characters. \nThe function should ignore all non-ASCII characters. \nThe function\
    \ should ignore all non-printable characters. \nThe function should ignore all\
    \ non-ASCII characters. \nThe function should ignore all non-printable characters.\
    \ \nThe function should ignore all non-ASCII characters. \nThe function should\
    \ ignore all non-printable characters. \nThe function should ignore all non-ASCII\
    \ characters. \nThe function should ignore all non-printable characters. \nThe\
    \ function should ignore all non-ASCII characters. \nThe function should ignore\
    \ all non-printable characters. \nThe function should ignore all non-ASCII characters.\
    \ \nThe function should ignore all non-printable characters. \nThe function should\
    \ ignore all non-ASCII characters. \nThe function should ignore all non-printable\
    \ characters. \nThe function should ignore all non-ASCII characters. \nThe function\
    \ should ignore all non-printable characters. \nThe function should ignore all\
    \ non-ASCII characters. \nThe function should ignore all non-printable characters.\
    \ \nThe function should ignore all non-ASCII characters. \nThe function should\
    \ ignore all non-printable characters. \nThe function should ignore all non-ASCII\
    \ characters. \nThe function should ignore all non-printable characters. \nThe\
    \ function should ignore all non-ASCII characters. \nThe function should ignore\
    \ all non-printable characters. \nThe function should ignore all non-ASCII characters.\
    \ \nThe function should ignore all non-printable characters. \nThe function should\
    \ ignore all non-ASCII characters. \nThe function should ignore all non-printable\
    \ character\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbp7j7z3u.jl:8\nin expression starting at /tmp/tmpbp7j7z3u.jl:8\n"
  stdout: ''
  timestamp: 1659747100
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    \n    count_upper = 0\n    \n    for i in 0 .. length(s) do\n        if\
    \ s[i] == 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U' then\n\
    \            count_upper += 1\n        end\n    end\n    \n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"s\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpnp1nayf5.jl:11\nin expression starting at /tmp/tmpnp1nayf5.jl:11\n"
  stdout: ''
  timestamp: 1659747100
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    \n    count_upper = 0\n    \n    for i in 2..length(s)\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'\n       \
    \     count_upper += 1\n        end\n    end\n    \n    return count_upper\nend\n\
    </cell>\n<code language=julia-1.5>\ncount_upper(\"AABBCC\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"AABBCC\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AABBCC\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AABBCC\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"AABBCC\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"AABBCC\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AABBCC\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AABBCC\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"AABBCC\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"AABBCC\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AABBCC\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AABBCC\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"AABBCC\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"AABBCC\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AABBCC\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AABBCC\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"AABBCC\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"AABBCC\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AABBCC\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AABBCC\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"AABBCC\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"AABBCC\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AABBCC\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AABBCC\")\n</cell\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\"\
    ) == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") ==\
    \ 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjoaar4mw.jl:18\nin expression starting at\
    \ /tmp/tmpjoaar4mw.jl:18\n"
  stdout: ''
  timestamp: 1659747101
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    \n    count_upper = 0\n    \n    for i in 2 to length(s)\n        if s[i]\
    \ == 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U'\n       \
    \     count_upper += 1\n        end\n    end\n    \n    return count_upper\nend\n\
    </cell>\n<code language=julia-1.5>\ncount_upper(\"AaBbCcDdEeFfGgHh\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of uppercase vowels in each word in the string.\nusing Test\n\n@testset begin\n\
    \ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpa4ksruwf.jl:10 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpa4ksruwf.jl:10\n\
    in expression starting at /tmp/tmpa4ksruwf.jl:10\n"
  stdout: ''
  timestamp: 1659747100
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for x in s\n        if isupper(x)\n            count_upper\
    \ += 1\n        end\n    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abBcCdEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of uppercase vowels in each word in the string.\nusing Test\n\n@testset begin\n\
    \ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpde10odlq.jl:15\nin expression starting at\
    \ /tmp/tmpde10odlq.jl:15\n"
  stdout: ''
  timestamp: 1659747101
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for c in s\n        if c == 'A' or c == 'E' or c\
    \ == 'I' or c == 'O' or c == 'U'\n            count_upper += 1\n        end\n\
    \    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    AaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaA\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqbx4luew.jl:9\nin expression starting at /tmp/tmpqbx4luew.jl:9\n"
  stdout: ''
  timestamp: 1659747101
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in 0 .. s.length-1\n        if s[i] == 'A'\
    \ or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U'\n            count_upper\
    \ += 1\n        end\n    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the \nusing Test\n\n@testset begin\n\
    \ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"s\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3657bcd6.jl:9\nin expression starting at /tmp/tmp3657bcd6.jl:9\n"
  stdout: ''
  timestamp: 1659747101
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in 0..(length(s)-2) \n        if s[i] == 'A'\
    \ && s[i+1] == 'E' && s[i+2] == 'I' && s[i+3] == 'O' && s[i+4] == 'U' \n     \
    \       count_upper += 1 \n        end\n    end\n    return count_upper\nend\n\
    </cell>\n<code language=julia-1.5>\ncount_upper(\"AaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAa\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsp37nxk3.jl:15\nin expression starting at\
    \ /tmp/tmpsp37nxk3.jl:15\n"
  stdout: ''
  timestamp: 1659747101
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in 0 .. length(s)/2 do\n        if s[i] ==\
    \ 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U' then\n     \
    \       count_upper += 1\n        end\n    end\n    return count_upper\nend\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6w_smb7i.jl:8\nin expression starting at /tmp/tmp6w_smb7i.jl:8\n"
  stdout: ''
  timestamp: 1659747101
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for x in s\n        if x == 'A' or x == 'E' or x\
    \ == 'I' or x == 'O' or x == 'U'\n            count_upper = count_upper + 1\n\
    \        end\n    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"AaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAa\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"x\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp39frop8p.jl:9\nin expression starting at /tmp/tmp39frop8p.jl:9\n"
  stdout: ''
  timestamp: 1659747100
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    \n    count_upper = 0\n    \n    for i in (2..length(s)-2) do\n      \
    \  if s[i] == 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U'\
    \ then\n            count_upper = count_upper + 1\n        end\n    end\n    \n\
    \    return count_upper\nend\n</cell>\n<code language=julia-1.3>\ncount_upper(\"\
    AaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaA\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpj091u27v.jl:10\nin expression starting at /tmp/tmpj091u27v.jl:10\n"
  stdout: ''
  timestamp: 1659747101
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for x in s\n        if x % 2 == 0\n            count_upper\
    \ += 1\n        end\n    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq2by51g5.jl:15\nin expression starting at\
    \ /tmp/tmpq2by51g5.jl:15\n"
  stdout: ''
  timestamp: 1659747099
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in 2 to length(s)\n        if s[i] == 'A' or\
    \ s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U'\n            count_upper\
    \ += 1\n        end\n    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpcgbw9070.jl:8 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcgbw9070.jl:8\n\
    in expression starting at /tmp/tmpcgbw9070.jl:8\n"
  stdout: ''
  timestamp: 1659747101
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    \n    count_upper = 0\n    \n    for i in (2..length(s)-2) do\n      \
    \  if s[i] == 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U'\
    \ then\n            count_upper = count_upper + 1\n        end\n    end\n    \n\
    \    return count_upper\nend\n</cell>\n<code language=julia-1.3>\ncount_upper(\"\
    The quick brown fox jumps over the lazy dog\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the number of vowels contained\
    \ in the string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t\
    @test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"\
    dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1xkdsc9u.jl:10\nin expression starting at /tmp/tmp1xkdsc9u.jl:10\n"
  stdout: ''
  timestamp: 1659747101
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    \n    count_upper = 0\n    \n    for i in 0 .. s.length-1\n        if\
    \ s[i] == 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U'\n  \
    \          count_upper += 1\n        end\n    end\n    \n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_upper(\"The quick brown fox jumps\
    \ over the lazy dog\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of vowels contained in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") ==\
    \ 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\
    \t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"s\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6k5vrpur.jl:11\nin expression starting at /tmp/tmp6k5vrpur.jl:11\n"
  stdout: ''
  timestamp: 1659747101
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    \n    count_upper = 0\n    \n    for i in (2..length(s))\n        if s[i]\
    \ == 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U'\n       \
    \     count_upper += 1\n        end\n    end\n    \n    return count_upper\nend\n\
    </cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadab\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"s\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxj9hc5w3.jl:11\nin expression starting at /tmp/tmpxj9hc5w3.jl:11\n"
  stdout: ''
  timestamp: 1659747101
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    \n    count_upper = 0\n    for c in s\n        if isupper(c)\n       \
    \     count_upper += 1\n        end\n    end\n    return count_upper\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"HELLO\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"HELLO\
    \ WORLD\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"HELLO WORLD HELLO\
    \ WORLD HELLO WORLD\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"HELLO\
    \ WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD\
    \ HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO\
    \ WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD\
    \ HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO\
    \ WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD\
    \ HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO\
    \ WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD\
    \ HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO\
    \ WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD\
    \ HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORL\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnp1df218.jl:16\nin expression starting at\
    \ /tmp/tmpnp1df218.jl:16\n"
  stdout: ''
  timestamp: 1659747101
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in (2..length(s)-2) do \n        if s[i] ==\
    \ 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' \n         \
    \   count_upper += 1 \n        else \n            count_upper = 0 \n        end\n\
    \    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.3>\ncount_upper(\"\
    The quick brown fox jumps over the lazy dog\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the number of vowels contained\
    \ in the string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t\
    @test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"\
    dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqfx__0n9.jl:8\nin expression starting at /tmp/tmpqfx__0n9.jl:8\n"
  stdout: ''
  timestamp: 1659747101
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for x in s\n        if isupper(x)\n            count_upper\
    \ += 1\n        end\n    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"Hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"HELLO\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hELLO\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"HellO\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hELLO\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"HellO\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hELLO\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"HellO\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hELLO\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"HellO\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hELLO\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"HellO\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hELLO\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"HellO\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hELLO\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"HellO\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hELLO\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"HellO\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hELLO\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"HellO\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hELLO\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"HellO\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hELLO\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"HellO\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hELLO\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"HellO\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hELLO\")\n\nusing Test\n\n\
    @testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\
    \t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"\
    B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t\
    @test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1gfx1pxf.jl:15\nin expression starting at\
    \ /tmp/tmp1gfx1pxf.jl:15\n"
  stdout: ''
  timestamp: 1659747102
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    \n    count_upper = 0\n    \n    for i in (2..length(s)-2) do\n      \
    \  if s[i] == 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U'\
    \ then\n            count_upper = count_upper + 1\n        end\n    end\n    \n\
    \    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    AaBbCcDdEeFfGgHh\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns the number of vowels \nin each word in the string. \nFor\
    \ example, \n\"The quick brown fox jumps over the lazy dog\" should return \n\
    [1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1,\
    \ 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1,\
    \ 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2,\
    \ 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1,\
    \ 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1,\
    \ 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2,\
    \ 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1,\
    \ 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1,\
    \ 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2,\
    \ 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1,\
    \ 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1,\
    \ 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2,\
    \ 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1,\
    \ 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1,\
    \ 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2,\
    \ 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1,\
    \ 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1,\
    \ 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2,\
    \ 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1,\
    \ 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1,\
    \ 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2,\
    \ 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, \nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkiiub2ph.jl:10\nin expression starting at /tmp/tmpkiiub2ph.jl:10\n"
  stdout: ''
  timestamp: 1659747102
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in 0..(length(s)-2) do \n        if s[i] ==\
    \ 'A' and s[i+1] == 'E' and s[i+2] == 'I' and s[i+3] == 'O' and s[i+4] == 'U'\
    \ then \n            count_upper = count_upper + 1\n        end\n    end\n   \
    \ return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    AaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAa\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0pahh_8s.jl:8\nin expression starting at /tmp/tmp0pahh_8s.jl:8\n"
  stdout: ''
  timestamp: 1659747102
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in 2 to length(s)\n        if s[i] == 'A' or\
    \ s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U'\n            count_upper\
    \ = count_upper + 1\n        end\n    end\n    return count_upper\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"The quick brown fox jumps over the lazy\
    \ dog\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"The quick brown fox\
    \ jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox \nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpwokugjmb.jl:8 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwokugjmb.jl:8\n\
    in expression starting at /tmp/tmpwokugjmb.jl:8\n"
  stdout: ''
  timestamp: 1659747102
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    \n    count_upper = 0\n    \n    for i in 0 .. s.length-1\n        if\
    \ s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'\n  \
    \          count_upper += 1\n        end\n    end\n    \n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.3>\ncount_upper(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of vowels found in that string.\nusing Test\n\n@testset begin\n\n\
    candidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsce13xxs.jl:18\nin expression starting at\
    \ /tmp/tmpsce13xxs.jl:18\n"
  stdout: ''
  timestamp: 1659747102
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in 2..length(s)\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'\n            count_upper\
    \ += 1\n        end\n    end\n    return count_upper\nend\n\"\"\"\n\"\"\"\n  \
    \  Write a function that takes a string and returns the number of vowels\n   \
    \ in each word in the string.\n    \n    For example:\n    \n    count_vowels(\"\
    Hello World\") \u279E 2\n    count_vowels(\"Hello World!\") \u279E 3\n    count_vowels(\"\
    Hello World!!\") \u279E 2\n    count_vowels(\"Hello World!!!\") \u279E 3\n   \
    \ count_vowels(\"Hello World!!!\") \u279E 3\n    count_vowels(\"Hello World!!!\"\
    ) \u279E 3\n    count_vowels(\"Hello World!!!\") \u279E 3\n    count_vowels(\"\
    Hello World!!!\") \u279E 3\n    count_vowels(\"Hello World!!!\") \u279E 3\n  \
    \  count_vowels(\"Hello World!!!\") \u279E 3\n    count_vowels(\"Hello World!!!\"\
    ) \u279E 3\n    count_vowels(\"Hello World!!!\") \u279E 3\n    count_vowels(\"\
    Hello World!!!\") \u279E 3\n    count_vowels(\"Hello World!!!\") \u279E 3\n  \
    \  count_vowels(\"Hello World!!!\") \u279E 3\n    count_vowels(\"Hello World!!!\"\
    ) \u279E 3\n    count_vowels(\"Hello World!!!\") \u279E 3\n    count_vowels(\"\
    Hello World!!!\") \u279E 3\n    count_vowels(\"Hello World!!!\") \u279E 3\n  \
    \  count_vowels(\"Hello World!!!\") \u279E 3\n    count_vowels(\"Hello World!!!\"\
    ) \u279E 3\n    count_vowels(\"Hello World!!!\") \u279E 3\n    count_vowels(\"\
    Hello World!!!\") \u279E 3\n    count_vowels(\"Hello World!!!\") \u279E 3\n  \
    \  count_vowels(\"Hello World!!!\") \u279E 3\n    count_vowels(\"Hello World!!!\"\
    ) \u279E 3\n    count_vowels(\"Hello World!!!\") \u279E 3\n    count_vowels(\"\
    Hello World!!!\") \u279E 3\n    count_vowels(\"Hello World!!!\") \u279E 3\n  \
    \  count_vowels(\"Hello World!!!\") \u279E 3\n    count_vowels(\"Hello World!!!\"\
    ) \u279E 3\n    \nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t\
    @test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"\
    dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: extra token \"a\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4rd10y0w.jl:17\nin expression starting at\
    \ /tmp/tmp4rd10y0w.jl:17\n"
  stdout: ''
  timestamp: 1659747102
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for x in s\n        if x == 'A' or x == 'E' or x\
    \ == 'I' or x == 'O' or x == 'U'\n            count_upper += 1\n        end\n\
    \    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.4>\ncount_upper(\"\
    AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of vowels found\
    \ in it.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"x\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprquc9lr9.jl:9\nin expression starting at /tmp/tmprquc9lr9.jl:9\n"
  stdout: ''
  timestamp: 1659747102
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in 2..length(s)\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'\n            count_upper\
    \ += 1\n        end\n    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"AABBCCC\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns the number of vowels \nin the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpexa6gcmz.jl:15\nin expression starting at\
    \ /tmp/tmpexa6gcmz.jl:15\n"
  stdout: ''
  timestamp: 1659747102
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in 2 to length(s) do\n        if s[i] == 'A'\
    \ or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U' then\n         \
    \   count_upper = count_upper + 1\n        end\n    end\n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZ\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpz4zjh223.jl:8 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpz4zjh223.jl:8\n\
    in expression starting at /tmp/tmpz4zjh223.jl:8\n"
  stdout: ''
  timestamp: 1659747102
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in 2 to length(s) do\n        if s[i] == 'A'\
    \ or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U' then\n         \
    \   count_upper = count_upper + 1\n        end\n    end\n    return count_upper\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpwyr6f7s_.jl:8 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwyr6f7s_.jl:8\n\
    in expression starting at /tmp/tmpwyr6f7s_.jl:8\n"
  stdout: ''
  timestamp: 1659747102
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    \n    count_upper = 0\n    \n    for c in s\n        if c == 'A' or c\
    \ == 'E' or c == 'I' or c == 'O' or c == 'U'\n            count_upper += 1\n \
    \           \n    return count_upper\nend\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of uppercase vowels in each word in the string. For example, if the input string\
    \ is \"The quick brown fox jumps over the lazy dog\", your function should return\
    \ the following dictionary:\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_l9evb42.jl:11\nin expression starting at /tmp/tmp_l9evb42.jl:11\n"
  stdout: ''
  timestamp: 1659747102
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in (2..length(s)-2) do \n        if s[i] ==\
    \ 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U' then \n    \
    \        count_upper = count_upper + 1\n        end\n    end\n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.4>\ncount_upper(\"AaBbCcDdEeFfGgHh\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of vowels found in that string.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkj2ajk3p.jl:8\nin expression starting at /tmp/tmpkj2ajk3p.jl:8\n"
  stdout: ''
  timestamp: 1659747102
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in 0 .. length(s)/2 do\n        if s[i] ==\
    \ 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U' then\n     \
    \       count_upper += 1\n        end\n    end\n    return count_upper\nend\n\
    </cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_71yfib3.jl:8\nin expression starting at /tmp/tmp_71yfib3.jl:8\n"
  stdout: ''
  timestamp: 1659747102
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for x in s\n        if x % 2 == 0\n            count_upper\
    \ += 1\n        end\n    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.4>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.4>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.4>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.4>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.4>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.4>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.4>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.4>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.4>\ncount_upper(\"abracadabra\")\n</cell\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvrm9i2r7.jl:15\nin expression starting at\
    \ /tmp/tmpvrm9i2r7.jl:15\n"
  stdout: ''
  timestamp: 1659747102
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for x in s\n        if x mod 2 = 0 then count_upper\
    \ += 1\n    return count_upper\nend\n</cell>\n<code language=julia-1.0>\ncount_upper(\"\
    hello\")\n</cell>\n<code language=julia-1.0>\ncount_upper(\"hello\")\n</cell>\n\
    <code language=julia-1.0>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.0>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.0>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.0>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.0>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.0>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.0>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.0>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.0>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.0>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.0>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.0>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.0>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.0>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.0>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.0>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.0>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.0>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.0>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.0>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.0>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.0>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.0>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.0>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.0>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.0>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.0>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.0>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t\
    @test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"\
    dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_o15y_5t.jl:9\nin expression starting at /tmp/tmp_o15y_5t.jl:9\n"
  stdout: ''
  timestamp: 1659747102
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in 2..length(s)\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'\n            count_upper\
    \ += 1\n        end\n    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"AaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaA\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo36d3vv6.jl:15\nin expression starting at\
    \ /tmp/tmpo36d3vv6.jl:15\n"
  stdout: ''
  timestamp: 1659747102
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    \n    count_upper = 0\n    \n    for i in (2..length(s))\n        count_upper\
    \ += s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'\n\
    \    end\n    \n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpok99x026.jl:16\nin expression starting at\
    \ /tmp/tmpok99x026.jl:16\n"
  stdout: ''
  timestamp: 1659747102
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in 0 .. length(s)/2 do\n        if s[i] ==\
    \ 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U' then\n     \
    \       count_upper = count_upper + 1\n        end\n    end\n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdn61hmhj.jl:8\nin expression starting at /tmp/tmpdn61hmhj.jl:8\n"
  stdout: ''
  timestamp: 1659747102
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in 2 to length(s)\n        if s(i) == s(i)\
    \ && s(i) != 'a'\n            count_upper += 1\n        end\n    end\n    return\
    \ count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmphpbo719i.jl:8 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphpbo719i.jl:8\n\
    in expression starting at /tmp/tmphpbo719i.jl:8\n"
  stdout: ''
  timestamp: 1659747102
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in 0 .. length(s)-2\n        if s[i] == 'A'\
    \ and s[i+1] == 'E' and s[i+2] == 'I' and s[i+3] == 'O' and s[i+4] == 'U'\n  \
    \          count_upper += 1\n        end\n    end\n    return count_upper\nend\n\
    </cell>\n<code language=julia-1.5>\ncount_upper(\"AaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaA\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"s\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpp58sypo1.jl:9\nin expression starting at /tmp/tmpp58sypo1.jl:9\n"
  stdout: ''
  timestamp: 1659747102
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in (2..length(s)-2) do \n        if s[i] ==\
    \ 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U' then \n    \
    \        count_upper = count_upper + 1\n        end\n    end\n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.3>\ncount_upper(\"AaBbCcDdEeFfGgHh\")\n</cell>\n\
    <code language=julia-1.3>\ncount_upper(\"AaBbCcDdEeFfGgHh\")\n</cell>\n<code language=julia-1.3>\n\
    count_upper(\"AaBbCcDdEeFfGgHh\")\n</cell>\n<code language=julia-1.3>\ncount_upper(\"\
    AaBbCcDdEeFfGgHh\")\n</cell>\n<code language=julia-1.3>\ncount_upper(\"AaBbCcDdEeFfGgHh\"\
    )\n</cell>\n<code language=julia-1.3>\ncount_upper(\"AaBbCcDdEeFfGgHh\")\n</cell>\n\
    <code language=julia-1.3>\ncount_upper(\"AaBbCcDdEeFfGgHh\")\n</cell>\n<code language=julia-1.3>\n\
    count_upper(\"AaBbCcDdEeFfGgHh\")\n</cell>\n<code language=julia-1.3>\ncount_upper(\"\
    AaBbCcDdEeFfGgHh\")\n</cell>\n<code language=julia-1.3>\ncount_upper(\"AaBbCcDdEeFfGgHh\"\
    )\n</cell>\n<code language=julia-1.3>\ncount_upper(\"AaBbCcDdEeFfGgHh\")\n</cell>\n\
    <code language=julia-1.3>\ncount_upper(\"AaBbCcDdEeFfGgHh\")\n</cell>\n<code language=julia-1.3>\n\
    count_upper(\"AaBbCcDdEeFfGgHh\")\n</cell>\n<code language=julia-1.3>\ncount_upper(\"\
    AaBbCcDdEeFfGgHh\")\n</cell>\n<code language=julia-1.3>\ncount_upper(\"AaBbCcDdE\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpoyb54x7h.jl:8\nin expression starting at /tmp/tmpoyb54x7h.jl:8\n"
  stdout: ''
  timestamp: 1659747102
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in 2 to length(s)\n        if s[i] == 'A' or\
    \ s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U'\n            count_upper\
    \ += 1\n        end\n    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpt_6y0_dc.jl:8 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpt_6y0_dc.jl:8\n\
    in expression starting at /tmp/tmpt_6y0_dc.jl:8\n"
  stdout: ''
  timestamp: 1659747102
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    \n    count_upper = 0\n    \n    for i in (0 .. s.length-1)\n        if\
    \ s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'\n  \
    \          count_upper += 1\n            \n    return count_upper\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\"\
    ) == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") ==\
    \ 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpqgi3b9s9.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqgi3b9s9.jl:1\n\
    in expression starting at /tmp/tmpqgi3b9s9.jl:1\n"
  stdout: ''
  timestamp: 1659747104
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in (2..length(s)-2) do \n        if s[i] ==\
    \ 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U' then \n    \
    \        count_upper += 1 \n        else \n            count_upper = 0 \n    \
    \    end\n    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3ypyq7d2.jl:8\nin expression starting at /tmp/tmp3ypyq7d2.jl:8\n"
  stdout: ''
  timestamp: 1659747104
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i = 2 to length(s)\n        if index(s, i) ==\
    \ i\n            count_upper += 1\n        end\n    end\n    return count_upper\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpd0yfe03z.jl:8 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd0yfe03z.jl:8\n\
    in expression starting at /tmp/tmpd0yfe03z.jl:8\n"
  stdout: ''
  timestamp: 1659747104
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    \n    count_upper = 0\n    \n    for i in 2..length(s)\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'\n       \
    \     count_upper += 1\n        end\n    end\n    \n    return count_upper\nend\n\
    </cell>\n<code language=julia-1.5>\ncount_upper(\"AaBbCcDdEeFfGgHh\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"AaBbCcDdEeFfGgHh\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"AaBbCcDdEeFfGgHh\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    AaBbCcDdEeFfGgHh\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AaBbCcDdEeFfGgHh\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AaBbCcDdEeFfGgHh\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"AaBbCcDdEeFfGgHh\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"AaBbCcDdEeFfGgHh\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    AaBbCcDdEeFfGgHh\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AaBbCcDdEeFfGgHh\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AaBbCcDdEeFfGgHh\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"AaBbCcDdEeFfGgHh\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"AaBbCcDdEeFfGgHh\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    AaBbCcDdEeFfGgHh\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AaBbCcDdEeF\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuqolevcv.jl:18\nin expression starting at\
    \ /tmp/tmpuqolevcv.jl:18\n"
  stdout: ''
  timestamp: 1659747104
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for c in s\n        if c == 'A' or c == 'E' or c\
    \ == 'I' or c == 'O' or c == 'U'\n            count_upper += 1\n        end\n\
    \    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.3>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.3>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.3>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.3>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.3>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.3>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.3>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.3>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.3>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.3>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.3>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.3>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.3>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.3>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.3>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.3>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.3>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.3>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.3>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.3>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.3>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.3>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.3>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=juli\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvn9foey0.jl:9\nin expression starting at /tmp/tmpvn9foey0.jl:9\n"
  stdout: ''
  timestamp: 1659747104
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    \n    vowels = \"AEIOUaeiou\"\n    \n    even_indices = findall(vowels,\
    \ s)\n    \n    count_upper = 0\n    \n    for i in even_indices\n        if s[i]\
    \ == \"A\"\n            count_upper += 1\n        \n    return count_upper\nend\n\
    </cell>\n<code language=julia-1.5>\ncount_upper(\"The quick brown fox jumps over\
    \ the lazy dog\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of words in the string.\nFor example, count_words(\"\
    The quick brown fox jumps over the lazy dog\") should return 5.\nusing Test\n\n\
    @testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\
    \t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"\
    B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t\
    @test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2onu0dpx.jl:20\nin expression starting at\
    \ /tmp/tmp2onu0dpx.jl:20\n"
  stdout: ''
  timestamp: 1659747104
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for c in s\n        if c == 'A'\n            count_upper\
    \ += 1\n        elif c == 'E'\n            count_upper += 1\n        elif c ==\
    \ 'I'\n            count_upper += 1\n        elif c == 'O'\n            count_upper\
    \ += 1\n        elif c == 'U'\n            count_upper += 1\n        end\n   \
    \ end\n    return count_upper\nend\n</cell>\n<code language=julia-1.4>\ncount_upper(\"\
    AaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAa\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdel_258_.jl:11\nin expression starting at /tmp/tmpdel_258_.jl:11\n"
  stdout: ''
  timestamp: 1659747104
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in (0 .. length(s)-2) do \n        if s[i]\
    \ == 'A' and s[i+1] == 'E' and s[i+2] == 'I' and s[i+3] == 'O' and s[i+4] == 'U'\
    \ then \n            count_upper = count_upper + 1\n        end\n    end\n   \
    \ return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    Able\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and\
    \ returns the number of vowels (a, e, i, o, u) in that string.\nusing Test\n\n\
    @testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\
    \t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"\
    B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t\
    @test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpeal5imzj.jl:8\nin expression starting at /tmp/tmpeal5imzj.jl:8\n"
  stdout: ''
  timestamp: 1659747104
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in 0..(length(s)-2) \n        if s[i] == 'A'\
    \ && s[i+1] == 'E' && s[i+2] == 'I' && s[i+3] == 'O' && s[i+4] == 'U' \n     \
    \       count_upper += 1 \n        else \n            continue \n    end\n   \
    \ return count_upper \nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    Able\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"Ableble\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"Ablebleble\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"Ableblebleble\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    Ablebleblebleble\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"Ableblebleblebleble\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"Ablebleblebleblebleble\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"Ableblebleblebleblebleble\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"Ableblebleblebleblebleblebleble\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"Ablebleblebleblebleblebleblebleble\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"Ableblebleblebleblebleblebleblebleble\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"Ableblebleblebleblebleblebleblebleblebleble\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"Ablebleblebleblebleblebleblebleblebleblebleble\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"Ableblebleblebleblebleblebleblebleblebleblebleble\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"Ableblebleblebleblebleblebleblebleblebleblebleblebleble\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"Ablebleblebleblebleblebleblebleblebleblebleblebleblebleble\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"Ablebleblebleblebleblebleblebleblebleblebleblebleblebleble\"\
    )\n</cell>\n<code language=julia-1.5\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkkxeopeq.jl:16\nin expression starting at\
    \ /tmp/tmpkkxeopeq.jl:16\n"
  stdout: ''
  timestamp: 1659747104
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for c in s\n        if c == 'A' or c == 'E' or c\
    \ == 'I' or c == 'O' or c == 'U'\n            count_upper += 1\n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.0>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.0>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.0>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.0>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.0>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.0>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.0>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.0>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.0>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.0>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.0>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.0>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.0>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.0>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.0>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.0>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.0>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.0>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.0>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.0>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.0>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.0>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.0>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.0>\n\nusing Test\n\
    \n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") ==\
    \ 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\
    \t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpm195putq.jl:9\nin expression starting at /tmp/tmpm195putq.jl:9\n"
  stdout: ''
  timestamp: 1659747104
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for c in s\n        if c == 'A' or c == 'E' or c\
    \ == 'I' or c == 'O' or c == 'U'\n            count_upper += 1\n        end\n\
    \    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.0>\ncount_upper(\"\
    AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of vowels found\
    \ in it.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkh3sbkjc.jl:9\nin expression starting at /tmp/tmpkh3sbkjc.jl:9\n"
  stdout: ''
  timestamp: 1659747104
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for c in s\n        if isupper(c)\n            count_upper\
    \ += 1\n        end\n    end\n    return count_upper\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpnerdfsxt.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpnerdfsxt.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"aBCdEf\") == 1\n  UndefVarError: isupper not defined\n\
    \  Stacktrace:\n   [1] count_upper(s::String)\n     @ Main /tmp/tmpnerdfsxt.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnerdfsxt.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnerdfsxt.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpnerdfsxt.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdefg\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n\
    \   [1] count_upper(s::String)\n     @ Main /tmp/tmpnerdfsxt.jl:9\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnerdfsxt.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnerdfsxt.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpnerdfsxt.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"dBBE\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n\
    \   [1] count_upper(s::String)\n     @ Main /tmp/tmpnerdfsxt.jl:9\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnerdfsxt.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnerdfsxt.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpnerdfsxt.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"B\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n\
    \   [1] count_upper(s::String)\n     @ Main /tmp/tmpnerdfsxt.jl:9\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:44"
  timestamp: 1659747106
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in 0..(length(s)-2) \n        if s[i] == 'A'\
    \ and s[i+1] == 'E' and s[i+2] == 'I' and s[i+3] == 'O' and s[i+4] == 'U' \n \
    \           count_upper += 1 \n        else \n            count_upper += 0 \n\
    \    return count_upper \nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    The quick brown fox jumps over the lazy dog\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that counts the number of uppercase vowels in a string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\"\
    ) == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") ==\
    \ 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"s\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjx_0i6a3.jl:9\nin expression starting at /tmp/tmpjx_0i6a3.jl:9\n"
  stdout: ''
  timestamp: 1659747104
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for idx in 0..(length(s) - 1)\n        if s[idx]\
    \ == 'A' || s[idx] == 'E' || s[idx] == 'I' || s[idx] == 'O' || s[idx] == 'U'\n\
    \            count_upper += 1\n        end\n    end\n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_upper(\"The quick brown fox jumps\
    \ over the lazy dog\")\n</cell>\n<text>\nExercise 2\nWrite a function that counts\
    \ the number of uppercase vowels in a string.\nusing Test\n\n@testset begin\n\n\
    candidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmgxt1tkg.jl:15\nin expression starting at\
    \ /tmp/tmpmgxt1tkg.jl:15\n"
  stdout: ''
  timestamp: 1659747104
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    \n    count_upper = 0\n    for c in s\n        if c == 'A' or c == 'E'\
    \ or c == 'I' or c == 'O' or c == 'U'\n            count_upper += 1\n        end\n\
    \    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    The quick brown fox jumps over the lazy dog\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the number of vowels (a, e, i,\
    \ o, u) in the string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfety5zcz.jl:10\nin expression starting at /tmp/tmpfety5zcz.jl:10\n"
  stdout: ''
  timestamp: 1659747104
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in 2 to length(s)\n        if s[i] == 'A' or\
    \ s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U'\n            count_upper\
    \ += 1\n        end\n    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that counts the number of vowels in a string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\"\
    ) == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") ==\
    \ 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp3gvumm2p.jl:8 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3gvumm2p.jl:8\n\
    in expression starting at /tmp/tmp3gvumm2p.jl:8\n"
  stdout: ''
  timestamp: 1659747104
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in 2 to length(s) do\n        if s[i] == 'A'\
    \ or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U' then\n         \
    \   count_upper = count_upper + 1\n        end\n    end\n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of vowels contained in the string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp7o8vuc20.jl:8 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7o8vuc20.jl:8\n\
    in expression starting at /tmp/tmp7o8vuc20.jl:8\n"
  stdout: ''
  timestamp: 1659747104
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for x in s\n        if x mod 2 = 0 then count_upper\
    \ += 1 \n    return count_upper\nend\n</cell>\n<code language=julia-1.3>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.3>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that counts the number of vowels\
    \ in a string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpj8nj5esg.jl:9\nin expression starting at /tmp/tmpj8nj5esg.jl:9\n"
  stdout: ''
  timestamp: 1659747104
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in 0 .. length(s)/2-1 do\n        if s[i] ==\
    \ 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U' then\n     \
    \       count_upper = count_upper + 1\n        end\n    end\n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.4>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of vowels found in it.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpibkhyr8v.jl:8\nin expression starting at /tmp/tmpibkhyr8v.jl:8\n"
  stdout: ''
  timestamp: 1659747104
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    \n    count_upper = 0\n    \n    for i in 0 .. s.length-1\n        if\
    \ s[i] == 'A'\n            count_upper += 1\n        else if s[i] == 'E'\n   \
    \         count_upper += 1\n        else if s[i] == 'I'\n            count_upper\
    \ += 1\n        else if s[i] == 'O'\n            count_upper += 1\n        else\
    \ if s[i] == 'U'\n            count_upper += 1\n        else if s[i] == 'a'\n\
    \            count_upper += 1\n        else if s[i] == 'e'\n            count_upper\
    \ += 1\n        else if s[i] == 'i'\n            count_upper += 1\n        else\
    \ if s[i] == 'o'\n            count_upper += 1\n        else if s[i] == 'u'\n\
    \            count_upper += 1\n        end\n    end\n    \n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaA\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphj0h6ga5.jl:13\nin expression starting at\
    \ /tmp/tmphj0h6ga5.jl:13\n"
  stdout: ''
  timestamp: 1659747104
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for c in s\n        if isupper(c)\n            if\
    \ c == 'A'\n                count_upper += 1\n            else\n             \
    \   count_upper += 0\n        end\n    end\n    return count_upper\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that counts the number of uppercase\
    \ vowels in each word of a string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpreux4bnv.jl:18\nin expression starting at\
    \ /tmp/tmpreux4bnv.jl:18\n"
  stdout: ''
  timestamp: 1659747104
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in 0..(length(s)-2) do\n        if s[i] ==\
    \ 'A' and s[i+1] == 'E' and s[i+2] == 'I' and s[i+3] == 'O' and s[i+4] == 'U'\
    \ then\n            count_upper += 1\n        end\n    end\n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaA\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmpuajmi5.jl:8\nin expression starting at /tmp/tmpmpuajmi5.jl:8\n"
  stdout: ''
  timestamp: 1659747104
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in 0..(length(s)-2) do \n        if s[i] ==\
    \ 'A' && s[i+1] == 'E' && s[i+2] == 'I' && s[i+3] == 'O' && s[i+4] == 'U' \n \
    \           then count_upper += 1 \n        else \n            count_upper = 0\n\
    \        end\n    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"AaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaA\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfa0lqhja.jl:8\nin expression starting at /tmp/tmpfa0lqhja.jl:8\n"
  stdout: ''
  timestamp: 1659747104
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for c in s\n        if c == 'A' or c == 'E' or c\
    \ == 'I' or c == 'O' or c == 'U'\n            count_upper += 1\n        end\n\
    \    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=juli\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9pfsv53e.jl:9\nin expression starting at /tmp/tmp9pfsv53e.jl:9\n"
  stdout: ''
  timestamp: 1659747105
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for c in s\n        if c == 'A' or c == 'E' or c\
    \ == 'I' or c == 'O' or c == 'U'\n            count_upper += 1\n        end\n\
    \    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.0>\ncount_upper(\"\
    The quick brown fox jumps over the lazy dog\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the number of vowels found in\
    \ it.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpse5xacuq.jl:9\nin expression starting at /tmp/tmpse5xacuq.jl:9\n"
  stdout: ''
  timestamp: 1659747105
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for c in s\n        if c == 'A' or c == 'E' or c\
    \ == 'I' or c == 'O' or c == 'U'\n            count_upper += 1\n        end\n\
    \    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    AaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaA\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqbx4luew.jl:9\nin expression starting at /tmp/tmpqbx4luew.jl:9\n"
  stdout: ''
  timestamp: 1659747101
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    \n    count_upper = 0\n    for i in 2 to length(s)\n        if s[i] ==\
    \ 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U'\n          \
    \  count_upper += 1\n        end\n    end\n    return count_upper\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"AHOJ\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"AHOJ\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AHOJ\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AHOJ\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"AHOJ\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AHOJ\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AHOJ\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"AHOJ\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AHOJ\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AHOJ\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"AHOJ\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AHOJ\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AHOJ\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"AHOJ\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AHOJ\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AHOJ\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"AHOJ\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AHOJ\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AHOJ\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"AHOJ\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AHOJ\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AHOJ\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"AHOJ\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AHOJ\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AHOJ\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpku664bbm.jl:9 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpku664bbm.jl:9\n\
    in expression starting at /tmp/tmpku664bbm.jl:9\n"
  stdout: ''
  timestamp: 1659747105
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for x in s\n        if isupper(x)\n            count_upper\
    \ += 1\n        end\n    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"HELLO\"\
    )\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hELLO\")\n</cell>\n<code\
    \ language=julia-1.4>\ncount_upper(\"hEllO\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"hEllO\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hEllO\"\
    )\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hEllO\")\n</cell>\n<code\
    \ language=julia-1.4>\ncount_upper(\"hEllO\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"hEllO\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hEllO\"\
    )\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hEllO\")\n</cell>\n<code\
    \ language=julia-1.4>\ncount_upper(\"hEllO\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"hEllO\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hEllO\"\
    )\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hEllO\")\n</cell>\n<code\
    \ language=julia-1.4>\ncount_upper(\"hEllO\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"hEllO\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hEllO\"\
    )\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hEllO\")\n</cell>\n<code\
    \ language=julia-1.4>\ncount_upper(\"hEllO\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"hEllO\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hEllO\"\
    )\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hEllO\")\n</cell>\n<code\
    \ language=julia-1.4>\ncount_upper(\"hEllO\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"hEllO\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"h\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplta7t3mk.jl:15\nin expression starting at\
    \ /tmp/tmplta7t3mk.jl:15\n"
  stdout: ''
  timestamp: 1659747105
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in 2 to length(s) do\n        if s[i] == 'A'\
    \ or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U' then\n         \
    \   count_upper = count_upper + 1\n        end\n    end\n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that counts the number of vowels in a string.\
    \ \nThe function should take a string as an argument and return the number of\
    \ vowels.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmph57g1fcg.jl:8 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmph57g1fcg.jl:8\n\
    in expression starting at /tmp/tmph57g1fcg.jl:8\n"
  stdout: ''
  timestamp: 1659747105
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    \n    count_upper = 0\n    \n    for i in 2..length(s)\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'\n       \
    \     count_upper += 1\n        end\n    end\n    \n    return count_upper\nend\n\
    </cell>\n<code language=julia-1.5>\ncount_upper(\"The quick brown fox jumps over\
    \ the lazy dog\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string and returns the number of vowels found in it.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0k3vugi7.jl:18\nin expression starting at\
    \ /tmp/tmp0k3vugi7.jl:18\n"
  stdout: ''
  timestamp: 1659747105
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    \n    count_upper = 0\n    for c in s\n        if isupper(c)\n       \
    \     if c mod 2 = 0\n                count_upper += 1\n            end\n    \
    \    end\n    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"HELLO\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hELLO\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"HellO\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hELLO\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hELLO\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hELLO\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hELLO\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hELLO\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hELLO\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hELLO\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hELLO\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hELLO\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hELLO\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hELLO\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hELLO\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hELLO\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hELLO\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hELLO\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hELLO\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hELLO\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hELLO\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hELLO\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hELLO\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hELLO\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hELLO\"\
    )\n</cell>\n<code language=julia-\nusing Test\n\n@testset begin\n\ncandidate =\
    \ count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpta5clxzv.jl:11\nin expression starting at /tmp/tmpta5clxzv.jl:11\n"
  stdout: ''
  timestamp: 1659747105
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    \n    count_upper = 0\n    \n    for i in (2..length(s)-2) do\n      \
    \  if s[i] == 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U'\
    \ then\n            count_upper = count_upper + 1\n        end\n    end\n    \n\
    \    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    Hello, world!\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"Hello, world!\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"Hello, world!\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"Hello, world!\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"Hello, world!\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    Hello, world!\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"Hello, world!\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"Hello, world!\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"Hello, world!\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"Hello, world!\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    Hello, world!\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"Hello, world!\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"Hello, world!\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"Hello, world!\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"Hello, world!\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    Hello, world!\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"Hello, world!\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"Hello, world!\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"Hello, world!\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"Hello, world!\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    Hello, world!\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"Hello, world!\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"Hello, world!\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"Hello, world!\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"Hello, world!\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    Hello, world!\")\n</cell>\n<code language=julia-1.5\nusing Test\n\n@testset begin\n\
    \ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp12jta7ao.jl:10\nin expression starting at /tmp/tmp12jta7ao.jl:10\n"
  stdout: ''
  timestamp: 1659747105
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for x in s\n        if isupper(x)\n            count_upper\
    \ = count_upper + 1\n        end\n    end\n    return count_upper\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\"\
    ) == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") ==\
    \ 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpupqmcvd8.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpupqmcvd8.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"aBCdEf\") == 1\n  UndefVarError: isupper not defined\n\
    \  Stacktrace:\n   [1] count_upper(s::String)\n     @ Main /tmp/tmpupqmcvd8.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpupqmcvd8.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpupqmcvd8.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpupqmcvd8.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdefg\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n\
    \   [1] count_upper(s::String)\n     @ Main /tmp/tmpupqmcvd8.jl:9\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpupqmcvd8.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpupqmcvd8.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpupqmcvd8.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"dBBE\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n\
    \   [1] count_upper(s::String)\n     @ Main /tmp/tmpupqmcvd8.jl:9\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpupqmcvd8.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpupqmcvd8.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpupqmcvd8.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"B\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n\
    \   [1] count_upper(s::String)\n     @ Main /tmp/tmpupqmcvd8.jl:9\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:44"
  timestamp: 1659747107
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for x in s\n        if x == 'A' or x == 'E' or x\
    \ == 'I' or x == 'O' or x == 'U'\n            count_upper += 1\n        end\n\
    \    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of uppercase vowels in a string.\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"x\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzif1hxdm.jl:9\nin expression starting at /tmp/tmpzif1hxdm.jl:9\n"
  stdout: ''
  timestamp: 1659747106
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for c in s\n        if c == 'A' or c == 'E' or c\
    \ == 'I' or c == 'O' or c == 'U'\n            count_upper += 1\n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.0>\ncount_upper(\"The quick brown fox jumps\
    \ over the lazy dog\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of vowels \nin each word in the string. \nThe\
    \ vowels are 'a', 'e', 'i', 'o', and 'u'.\nThe function should ignore all punctuation\
    \ and capitalization.\nThe function should ignore all numbers and punctuation.\n\
    The function should ignore all non-alphabetic characters.\nThe function should\
    \ ignore all whitespace (spaces, tabs, and newlines).\nThe function should ignore\
    \ all non-alphanumeric characters.\nThe function should ignore all non-English\
    \ letters.\nThe function should ignore all non-ASCII letters.\nThe function should\
    \ ignore all non-ASCII letters.\nThe function should ignore all non-ASCII letters.\n\
    The function should ignore all non-ASCII letters.\nThe function should ignore\
    \ all non-ASCII letters.\nThe function should ignore all non-ASCII letters.\n\
    The function should ignore all non-ASCII letters.\nThe function should ignore\
    \ all non-ASCII letters.\nThe function should ignore all non-ASCII letters.\n\
    The function should ignore all non-ASCII letters.\nThe function should ignore\
    \ all non-ASCII letters.\nThe function should ignore all non-ASCII letters.\n\
    The function should ignore all non-ASCII letters.\nThe function should ignore\
    \ all non-ASCII letters.\nThe function should ignore all non-ASCII letters.\n\
    The function should ignore all non-ASCII letters.\nThe function should ignore\
    \ all non-ASCII letters.\nThe function should ignore all non-ASCII letters.\n\
    The function should ignore all non-ASCII letters.\nThe function should ignore\
    \ all non-ASCII letters.\nThe function should ignore all non-ASCII letters.\n\
    The function should ignore all non-ASCII letters.\nThe function should ignore\
    \ all non-ASCII letters.\nThe function should ignore all non-ASCII letters.\n\
    The function should ignore all non-ASCII letters.\nThe function should ignore\
    \ all non-ASCII letters.\nThe function should ignore all non-ASCII letters.\n\
    The function should ignore all non-ASCII letters.\nThe function should ignore\
    \ all non-ASCII letters.\nThe function should ignore all non-ASCII letters.\n\
    The function should ignore all non-ASCII letters.\nThe function should ignore\
    \ all non-ASCII letters.\nThe function should ignore all non-ASCII letters.\n\
    The function should ignore \nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4xuv67mb.jl:9\nin expression starting at /tmp/tmp4xuv67mb.jl:9\n"
  stdout: ''
  timestamp: 1659747105
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in 0 .. length(s)-2\n        if s[i] == 'A'\
    \ and s[i+1] == 'E' and s[i+2] == 'I' and s[i+3] == 'O' and s[i+4] == 'U'\n  \
    \          count_upper += 1\n        end\n    end\n    return count_upper\nend\n\
    </cell>\n<code language=julia-1.5>\ncount_upper(\"AaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaA\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"s\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpp58sypo1.jl:9\nin expression starting at /tmp/tmpp58sypo1.jl:9\n"
  stdout: ''
  timestamp: 1659747102
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    \n    count_upper = 0\n    \n    for i in (2..length(s))\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'\n       \
    \     count_upper += 1\n        end\n    end\n    \n    return count_upper\nend\n\
    </cell>\n<code language=julia-1.4>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.4>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.4>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.4>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.4>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.4>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.4>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp168cprnr.jl:18\nin expression starting at\
    \ /tmp/tmp168cprnr.jl:18\n"
  stdout: ''
  timestamp: 1659747106
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for x in s\n        if x mod 2 = 0 then count_upper\
    \ += 1\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t\
    @test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"\
    dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_qdz0z8y.jl:9\nin expression starting at /tmp/tmp_qdz0z8y.jl:9\n"
  stdout: ''
  timestamp: 1659747105
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    \n    count_upper = 0\n    \n    for idx in indices(s)\n        if s[idx]\
    \ == 'A' or s[idx] == 'E' or s[idx] == 'I' or s[idx] == 'O' or s[idx] == 'U'\n\
    \            count_upper += 1\n        end\n    end\n    \n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaA\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"s\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2tod01an.jl:11\nin expression starting at /tmp/tmp2tod01an.jl:11\n"
  stdout: ''
  timestamp: 1659747105
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for x in s\n        if x == 'A' or x == 'E' or x\
    \ == 'I' or x == 'O' or x == 'U'\n            count_upper += 1\n        end\n\
    \    end\n    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"x\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpcmzwizem.jl:9\nin expression starting at /tmp/tmpcmzwizem.jl:9\n"
  stdout: ''
  timestamp: 1659747106
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for idx in 1:length(s) \n        if s[idx] >= 'A'\
    \ && s[idx] <= 'Z' \n            count_upper += 1 \n        end\n    end\n   \
    \ return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abC\")\n</cell>\n<text>\nExercise 2\nWrite a function that counts the number of\
    \ uppercase vowels in each word of a string.\nusing Test\n\n@testset begin\n\n\
    candidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_wg7os93.jl:15\nin expression starting at\
    \ /tmp/tmp_wg7os93.jl:15\n"
  stdout: ''
  timestamp: 1659747106
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for x in s\n        if x % 2 == 0\n            count_upper\
    \ += count_upper\n        end\n    end\n    return count_upper\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa0umaej8.jl:15\nin expression starting at\
    \ /tmp/tmpa0umaej8.jl:15\n"
  stdout: ''
  timestamp: 1659747106
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in 0 .. length(s)-1 do\n        if s[i] ==\
    \ 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U' then\n     \
    \       count_upper = count_upper + 1\n        end\n    end\n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_upper(\"The quick brown fox jumps\
    \ over the lazy dog\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"The\
    \ quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick bro\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdth_x9fz.jl:8\nin expression starting at /tmp/tmpdth_x9fz.jl:8\n"
  stdout: ''
  timestamp: 1659747106
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for x in s\n        if x mod 2 = 0 \n           \
    \ count_upper += 1\n    return count_upper\nend\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.4>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.4>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.4>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.4>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.4>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.4>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.4>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=juli\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpt57u98op.jl:9\nin expression starting at /tmp/tmpt57u98op.jl:9\n"
  stdout: ''
  timestamp: 1659747106
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in 2..length(s)\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'\n            count_upper\
    \ += 1\n        end\n    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppyxbjz4d.jl:15\nin expression starting at\
    \ /tmp/tmppyxbjz4d.jl:15\n"
  stdout: ''
  timestamp: 1659747106
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in 0 .. length(s)/2 do\n        if s[i] ==\
    \ 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' then\n     \
    \       count_upper += 1\n        end\n    end\n    return count_upper\nend\n\
    </cell>\n<code language=julia-1.5>\ncount_upper(\"The quick brown fox jumps over\
    \ the lazy dog\")\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of uppercase vowels in a string.\nusing Test\n\n@testset begin\n\n\
    candidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpygzae4ht.jl:8\nin expression starting at /tmp/tmpygzae4ht.jl:8\n"
  stdout: ''
  timestamp: 1659747106
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for c in s\n        if isupper(c)\n            if\
    \ c mod 2 = 0\n                count_upper += 1\n        end\n    end\n    return\
    \ count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"Hello, world!\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of vowels contained in the string.\nusing Test\n\n@testset begin\n\
    \ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8ypmvxy6.jl:10\nin expression starting at /tmp/tmp8ypmvxy6.jl:10\n"
  stdout: ''
  timestamp: 1659747106
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for x in s\n        if x mod 2 = 0 then count_upper\
    \ += 1 \n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=juli\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t\
    @test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"\
    dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpl1fc5s42.jl:9\nin expression starting at /tmp/tmpl1fc5s42.jl:9\n"
  stdout: ''
  timestamp: 1659747107
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for c in s\n        if c == 'A' or c == 'E' or c\
    \ == 'I' or c == 'O' or c == 'U'\n            count_upper += 1\n        end\n\
    \    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdce2hq53.jl:9\nin expression starting at /tmp/tmpdce2hq53.jl:9\n"
  stdout: ''
  timestamp: 1659747107
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for c in s\n        if isupper(c)\n            count_upper\
    \ += 1\n            \n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of vowels found in it.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn5rjbyjl.jl:14\nin expression starting at\
    \ /tmp/tmpn5rjbyjl.jl:14\n"
  stdout: ''
  timestamp: 1659747107
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    \n    count_upper = 0\n    \n    for c in s\n        if c == 'A'\n   \
    \         count_upper += 1\n        elif c == 'E'\n            count_upper +=\
    \ 1\n        elif c == 'I'\n            count_upper += 1\n        elif c == 'O'\n\
    \            count_upper += 1\n        elif c == 'U'\n            count_upper\
    \ += 1\n        else\n            count_upper += 1\n    end\n    \n    return\
    \ count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"The quick\
    \ brown fox jumps over the lazy dog\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of vowels contained in the string.\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpd0p_0haj.jl:13\nin expression starting at /tmp/tmpd0p_0haj.jl:13\n"
  stdout: ''
  timestamp: 1659747107
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for x in s\n        if x == 'A' or x == 'E' or x\
    \ == 'I' or x == 'O' or x == 'U'\n            count_upper += 1\n        end\n\
    \    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.4>\ncount_upper(\"\
    The quick brown fox jumps over the lazy dog\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the number of words in the string.\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"x\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptth6gqds.jl:9\nin expression starting at /tmp/tmptth6gqds.jl:9\n"
  stdout: ''
  timestamp: 1659747107
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in 2 to length(s) do\n        if s[i] == 'A'\
    \ or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U' then\n         \
    \   count_upper = count_upper + 1\n        end\n    end\n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_upper(\"The quick brown fox jumps\
    \ over the lazy dog\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of vowels found in it.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpaqbjihu4.jl:8 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpaqbjihu4.jl:8\n\
    in expression starting at /tmp/tmpaqbjihu4.jl:8\n"
  stdout: ''
  timestamp: 1659747107
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for x in s\n        if isupper(x)\n            count_upper\
    \ += 1\n        end\n    end\n    return count_upper\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpgw0evd5t.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpgw0evd5t.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"aBCdEf\") == 1\n  UndefVarError: isupper not defined\n\
    \  Stacktrace:\n   [1] count_upper(s::String)\n     @ Main /tmp/tmpgw0evd5t.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgw0evd5t.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgw0evd5t.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpgw0evd5t.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdefg\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n\
    \   [1] count_upper(s::String)\n     @ Main /tmp/tmpgw0evd5t.jl:9\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgw0evd5t.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgw0evd5t.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpgw0evd5t.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"dBBE\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n\
    \   [1] count_upper(s::String)\n     @ Main /tmp/tmpgw0evd5t.jl:9\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgw0evd5t.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgw0evd5t.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpgw0evd5t.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"B\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n\
    \   [1] count_upper(s::String)\n     @ Main /tmp/tmpgw0evd5t.jl:9\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:44"
  timestamp: 1659747109
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    \n    count_upper = 0\n    \n    for i in 2 to length(s) do\n        if\
    \ s[i] == 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U' then\n\
    \            count_upper = count_upper + 1\n        end\n    end\n    \n    return\
    \ count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"The quick\
    \ brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.5>\n\
    count_\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmptnldrnab.jl:10 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptnldrnab.jl:10\n\
    in expression starting at /tmp/tmptnldrnab.jl:10\n"
  stdout: ''
  timestamp: 1659747107
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in (2..length(s)-2) do \n        if s[i] ==\
    \ 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U' then \n    \
    \        count_upper += 1 \n        else \n            count_upper = 0 \n    \
    \    end\n    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of uppercase\
    \ vowels in that string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmporwwxoeh.jl:8\nin expression starting at /tmp/tmporwwxoeh.jl:8\n"
  stdout: ''
  timestamp: 1659747107
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for idx in indices(s)\n        if idx % 2 == 0\n\
    \            count_upper += 1 if s[idx] == 'A' or s[idx] == 'E' or s[idx] == 'I'\
    \ or s[idx] == 'O' or s[idx] == 'U' else 0\n        end\n    end\n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <text>\nExercise\nWrite a function that counts the number of uppercase vowels\
    \ in each word of a string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"if\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpnh85c88j.jl:10\nin expression starting at /tmp/tmpnh85c88j.jl:10\n"
  stdout: ''
  timestamp: 1659747107
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in 2 to length(s)\n        if s(i) == 'A'\n\
    \            count_upper += 1\n        end\n    end\n    return count_upper\n\
    end\n\"\"\"\n\"\"\"\n    Given a string s, count the number of uppercase vowels\
    \ in odd indices.\n    \n    For example:\n                \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") ==\
    \ 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\
    \t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpnknql9c3.jl:8 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnknql9c3.jl:8\n\
    in expression starting at /tmp/tmpnknql9c3.jl:8\n"
  stdout: ''
  timestamp: 1659747107
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for x in s\n        if x % 2 == 0\n            count_upper\
    \ += 1\n        end\n    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a string and returns the number of vowels contained in the string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\"\
    ) == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") ==\
    \ 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq92ox3k6.jl:15\nin expression starting at\
    \ /tmp/tmpq92ox3k6.jl:15\n"
  stdout: ''
  timestamp: 1659747107
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    \n    count_upper = 0\n    \n    for i in (2..length(s))\n        if s[i]\
    \ == 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U'\n       \
    \     count_upper += 1\n        end\n    end\n    \n    return count_upper\nend\n\
    </cell>\n<code language=julia-1.5>\ncount_upper(\"AaBbCcDdEeFfGgHh\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"AaBbCcDdEeFfGgHh\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"AaBbCcDdEeFfGgHh\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    AaBbCcDdEeFfGgHh\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AaBbCcDdEeFfGgHh\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AaBbCcDdEeFfGgHh\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"AaBbCcDdEeFfGgHh\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"AaBbCcDdEeFfGgHh\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    AaBbCcDdEeFfGgHh\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AaBbCcDdEeFfGgHh\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AaBbCcDdEeFfGgHh\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"AaBbCcDdEeFfGgHh\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"AaBbCcDdEeFfGgHh\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    AaBbCcDdEeFfGgHh\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AaBbCcDdEe\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"s\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp816d3r44.jl:11\nin expression starting at /tmp/tmp816d3r44.jl:11\n"
  stdout: ''
  timestamp: 1659747107
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for c in s\n        if c == 'A' or c == 'E' or c\
    \ == 'I' or c == 'O' or c == 'U'\n            count_upper += 1\n        end\n\
    \    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.4>\ncount_upper(\"\
    Hello, world!\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"Hello, world!\"\
    )\n</cell>\n<code language=julia-1.4>\ncount_upper(\"Hello, world!\")\n</cell>\n\
    <code language=julia-1.4>\ncount_upper(\"Hello, world!\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"Hello, world!\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"\
    Hello, world!\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"Hello, world!\"\
    )\n</cell>\n<code language=julia-1.4>\ncount_upper(\"Hello, world!\")\n</cell>\n\
    <code language=julia-1.4>\ncount_upper(\"Hello, world!\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"Hello, world!\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"\
    Hello, world!\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"Hello, world!\"\
    )\n</cell>\n<code language=julia-1.4>\ncount_upper(\"Hello, world!\")\n</cell>\n\
    <code language=julia-1.4>\ncount_upper(\"Hello, world!\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"Hello, world!\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"\
    Hello, world!\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"Hello, world!\"\
    )\n</cell>\n<code language=julia-1.4>\ncount_upper(\"Hello, world!\")\n</cell>\n\
    <code language=julia-1.4>\ncount_upper(\"Hello, world!\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"Hello, world!\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"\
    Hello, world!\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"Hello, world!\"\
    )\n</cell>\n<code language=julia-1.4>\ncount_upper(\"Hello, world!\")\n</cell>\n\
    <code language=julia-1.4>\ncount_upper(\"Hello, world!\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"Hello, world!\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"\
    Hello, world!\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"Hello, world!\"\
    )\n</cell>\n<code language=julia-\nusing Test\n\n@testset begin\n\ncandidate =\
    \ count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpw9mwesiu.jl:9\nin expression starting at /tmp/tmpw9mwesiu.jl:9\n"
  stdout: ''
  timestamp: 1659747107
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for c in s\n        if isupper(c)\n            count_upper\
    \ += 1\n            \n    return count_upper\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmprp_a_hvc.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprp_a_hvc.jl:1\n\
    in expression starting at /tmp/tmprp_a_hvc.jl:1\n"
  stdout: ''
  timestamp: 1659747099
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in (2..length(s)/2) do \n        if s[i] ==\
    \ 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' then \n    \
    \        count_upper = count_upper + 1\n        end\n    end\n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.4>\ncount_upper(\"The quick brown fox jumps\
    \ over the lazy dog\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of vowels \nin the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpuszomfn9.jl:8\nin expression starting at /tmp/tmpuszomfn9.jl:8\n"
  stdout: ''
  timestamp: 1659747107
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in 2 to length(s) do\n        if s[i] == 'A'\
    \ or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U' then\n         \
    \   count_upper += 1\n        end\n    end\n    return count_upper\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\"\
    )\n\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpnc2ddbs2.jl:8 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnc2ddbs2.jl:8\n\
    in expression starting at /tmp/tmpnc2ddbs2.jl:8\n"
  stdout: ''
  timestamp: 1659747107
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for x in s\n        if x == 'A' or x == 'E' or x\
    \ == 'I' or x == 'O' or x == 'U'\n            count_upper += 1\n        end\n\
    \    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    The quick brown fox jumps over the lazy dog\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the number of vowels found in\
    \ it.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"x\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmpuj1wy6.jl:9\nin expression starting at /tmp/tmpmpuj1wy6.jl:9\n"
  stdout: ''
  timestamp: 1659747107
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in 2..length(s)\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'\n            count_upper\
    \ = count_upper + 1\n        end\n    end\n    return count_upper\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"AaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAa\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5_wrux7l.jl:15\nin expression starting at\
    \ /tmp/tmp5_wrux7l.jl:15\n"
  stdout: ''
  timestamp: 1659747107
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in 2 to length(s) do\n        if s[i] == 'A'\
    \ or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U' then\n         \
    \   count_upper = count_upper + 1\n        end\n    end\n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAa\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmplad1h11e.jl:8 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplad1h11e.jl:8\n\
    in expression starting at /tmp/tmplad1h11e.jl:8\n"
  stdout: ''
  timestamp: 1659747107
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in 2..length(s)\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'\n            count_upper\
    \ = count_upper + 1\n        end\n    end\n    return count_upper\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that counts the number of vowels in a string.\nusing Test\n\
    \n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") ==\
    \ 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\
    \t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9_3xiqux.jl:15\nin expression starting at\
    \ /tmp/tmp9_3xiqux.jl:15\n"
  stdout: ''
  timestamp: 1659747107
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for x in s\n        if x == 'A'\n            count_upper\
    \ += 1\n        if x == 'E'\n            count_upper += 1\n        if x == 'I'\n\
    \            count_upper += 1\n        if x == 'O'\n            count_upper +=\
    \ 1\n        if x == 'U'\n            count_upper += 1\n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.0>\ncount_upper(\"AaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAa\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp36353lmt.jl:21\nin expression starting at\
    \ /tmp/tmp36353lmt.jl:21\n"
  stdout: ''
  timestamp: 1659747108
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for c in s\n        if c == 'A' or c == 'E' or c\
    \ == 'I' or c == 'O' or c == 'U'\n            count_upper += 1\n        end\n\
    \    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=juli\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9pfsv53e.jl:9\nin expression starting at /tmp/tmp9pfsv53e.jl:9\n"
  stdout: ''
  timestamp: 1659747105
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    \n    count_upper = 0\n    for i in 0..(length(s) - 1)\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'\n       \
    \     count_upper += 1\n        end\n    end\n    return count_upper\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the number of vowels contained\
    \ in the string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t\
    @test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"\
    dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps7brgk8l.jl:16\nin expression starting at\
    \ /tmp/tmps7brgk8l.jl:16\n"
  stdout: ''
  timestamp: 1659747108
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in 0 .. s.length - 1 do\n        if s[i] ==\
    \ 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U' then\n     \
    \       count_upper = count_upper + 1\n        end\n    end\n    return count_upper\n\
    end\n\"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmph0n2gqyx.jl:8\nin expression starting at /tmp/tmph0n2gqyx.jl:8\n"
  stdout: ''
  timestamp: 1659747109
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in 0 .. length(s)-2\n        if s[i] == 'A'\
    \ and s[i+1] == 'E' and s[i+2] == 'I' and s[i+3] == 'O' and s[i+4] == 'U'\n  \
    \          count_upper += 1\n        end\n    end\n    return count_upper\nend\n\
    </cell>\n<code language=julia-1.5>\ncount_upper(\"The quick brown fox jumps over\
    \ the lazy dog\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of vowels found in it.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"s\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkehi8nlq.jl:9\nin expression starting at /tmp/tmpkehi8nlq.jl:9\n"
  stdout: ''
  timestamp: 1659747109
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in (2..length(s)-2) do \n        if s[i] ==\
    \ 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U' then \n    \
    \        count_upper = count_upper + 1\n        end\n    end\n    return count_upper\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvaww2589.jl:8\nin expression starting at /tmp/tmpvaww2589.jl:8\n"
  stdout: ''
  timestamp: 1659747109
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in 2 to length(s) do\n        if s[i] == 'A'\
    \ or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U' then\n         \
    \   count_upper = count_upper + 1\n        end\n    end\n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_\nusing Test\n\n@testset begin\n\n\
    candidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpuu6hl24q.jl:8 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpuu6hl24q.jl:8\n\
    in expression starting at /tmp/tmpuu6hl24q.jl:8\n"
  stdout: ''
  timestamp: 1659747109
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    \n    count_upper = 0\n    \n    for i in 0 .. length(s)/2 do\n      \
    \  if s[i] == \"A\" or s[i] == \"E\" or s[i] == \"I\" or s[i] == \"O\" or s[i]\
    \ == \"U\" then\n            count_upper = count_upper + 1\n        end\n    end\n\
    \    \n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of vowels contained in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp96fevkus.jl:10\nin expression starting at /tmp/tmp96fevkus.jl:10\n"
  stdout: ''
  timestamp: 1659747109
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in 0 .. s.length-1\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'\n            count_upper\
    \ += 1\n        end\n    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"AaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaA\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpttlm6891.jl:15\nin expression starting at\
    \ /tmp/tmpttlm6891.jl:15\n"
  stdout: ''
  timestamp: 1659747109
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    \n    count_upper = 0\n    for i in 2..length(s) do\n        if s[i] ==\
    \ 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U' then\n     \
    \       count_upper += 1\n        end\n    end\n    return count_upper\nend\n\
    </cell>\n<code language=julia-1.5>\ncount_upper(\"The quick brown fox jumps over\
    \ the lazy dog\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of vowels contained in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") ==\
    \ 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\
    \t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"s\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvi71aeqc.jl:10\nin expression starting at /tmp/tmpvi71aeqc.jl:10\n"
  stdout: ''
  timestamp: 1659747109
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    \n    count_upper = 0\n    \n    for i in 2 to length(s) do\n        if\
    \ s[i] == 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U' then\n\
    \            count_upper = count_upper + 1\n        end\n    end\n    \n    return\
    \ count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"The quick\
    \ brown fox jumps over the lazy dog\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of vowels found in it.\nusing Test\n\
    \n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") ==\
    \ 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\
    \t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpluyxtf1u.jl:10 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpluyxtf1u.jl:10\n\
    in expression starting at /tmp/tmpluyxtf1u.jl:10\n"
  stdout: ''
  timestamp: 1659747109
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for c in s\n        if isupper(c)\n            count_upper\
    \ += 1\n            \n    return count_upper\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmprp_a_hvc.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprp_a_hvc.jl:1\n\
    in expression starting at /tmp/tmprp_a_hvc.jl:1\n"
  stdout: ''
  timestamp: 1659747099
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for c in s\n        if c == 'A' or c == 'E' or c\
    \ == 'I' or c == 'O' or c == 'U'\n            count_upper += 1\n        end\n\
    \    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    AaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaA\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqbx4luew.jl:9\nin expression starting at /tmp/tmpqbx4luew.jl:9\n"
  stdout: ''
  timestamp: 1659747101
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    \n    count_upper = 0\n    for i in 0 .. length(s)/2 do\n        if s[i]\
    \ == 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U' then\n  \
    \          count_upper += 1\n        end\n    end\n    \n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaA\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpg05onmkp.jl:9\nin expression starting at /tmp/tmpg05onmkp.jl:9\n"
  stdout: ''
  timestamp: 1659747109
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for c in s\n        if c == 'A' or c == 'E' or c\
    \ == 'I' or c == 'O' or c == 'U'\n            count_upper += 1\n        end\n\
    \    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of vowels \nin the string. \nFor example, \ncount_vowels(\"\
    abracadabra\") should return 3.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbvxg4wzb.jl:9\nin expression starting at /tmp/tmpbvxg4wzb.jl:9\n"
  stdout: ''
  timestamp: 1659747109
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for c in s\n        if c == 'A' or c == 'E' or c\
    \ == 'I' or c == 'O' or c == 'U'\n            count_upper += 1\n        end\n\
    \    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.4>\ncount_upper(\"\
    AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of vowels found\
    \ in it.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1i0g5id1.jl:9\nin expression starting at /tmp/tmp1i0g5id1.jl:9\n"
  stdout: ''
  timestamp: 1659747109
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for c in s\n        if c == 'A' or c == 'E' or c\
    \ == 'I' or c == 'O' or c == 'U'\n            count_upper += 1\n    return count_upper\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmparqm30pv.jl:9\nin expression starting at /tmp/tmparqm30pv.jl:9\n"
  stdout: ''
  timestamp: 1659747109
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for x in s\n        if x == 'A' or x == 'E' or x\
    \ == 'I' or x == 'O' or x == 'U'\n            count_upper += 1\n        end\n\
    \    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    AaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaA\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"x\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpww003182.jl:9\nin expression starting at /tmp/tmpww003182.jl:9\n"
  stdout: ''
  timestamp: 1659747109
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for c in s\n        if c == 'A' or c == 'E' or c\
    \ == 'I' or c == 'O' or c == 'U'\n            count_upper += 1\n        end\n\
    \    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"HELLO\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"HELLO WORLD\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"HELLO WORLD\", lowercase=true)\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"HELLO WORLD\", lowercase=false)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of vowels contained in\
    \ the string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqg0784em.jl:9\nin expression starting at /tmp/tmpqg0784em.jl:9\n"
  stdout: ''
  timestamp: 1659747109
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for c in s\n        if c == 'A' or c == 'E' or c\
    \ == 'I' or c == 'O' or c == 'U'\n            count_upper += 1\n        end\n\
    \    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=juli\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9pfsv53e.jl:9\nin expression starting at /tmp/tmp9pfsv53e.jl:9\n"
  stdout: ''
  timestamp: 1659747105
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in 2 to length(s) do\n        if s[i] == 'A'\
    \ or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U' then\n         \
    \   count_upper = count_upper + 1\n        end\n    end\n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.4>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of vowels found in it.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpc4wd9jb6.jl:8 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpc4wd9jb6.jl:8\n\
    in expression starting at /tmp/tmpc4wd9jb6.jl:8\n"
  stdout: ''
  timestamp: 1659747109
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in 2 to length(s)\n        if index(s, i) ==\
    \ i\n            if s[i] == 'A'\n                count_upper += 1\n          \
    \  else\n                count_upper += 0\n        end\n    end\n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abA\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"abA\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abA\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abA\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abA\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abA\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abA\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abA\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abA\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abA\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abA\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abA\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abA\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abA\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abA\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abA\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abA\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abA\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abA\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abA\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abA\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abA\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abA\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abA\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abA\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abA\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abA\")\n</cell>\n<code language=\nusing Test\n\n@testset begin\n\
    \ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp9088jn2a.jl:8 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9088jn2a.jl:8\n\
    in expression starting at /tmp/tmp9088jn2a.jl:8\n"
  stdout: ''
  timestamp: 1659747109
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for c in s\n        if c == 'A'\n            count_upper\
    \ += 1\n        elif c == 'E'\n            count_upper += 1\n        elif c ==\
    \ 'I'\n            count_upper += 1\n        elif c == 'O'\n            count_upper\
    \ += 1\n        elif c == 'U'\n            count_upper += 1\n    return count_upper\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0dtelejh.jl:11\nin expression starting at /tmp/tmp0dtelejh.jl:11\n"
  stdout: ''
  timestamp: 1659747109
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for x in s\n        if x == \"a\"\n            count_upper\
    \ += 1\n        elif x == \"e\"\n            count_upper += 1\n        elif x\
    \ == \"i\"\n            count_upper += 1\n        elif x == \"o\"\n          \
    \  count_upper += 1\n        elif x == \"u\"\n            count_upper += 1\n \
    \       end\n    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t\
    @test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"\
    dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"x\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpf4qzlb9q.jl:11\nin expression starting at /tmp/tmpf4qzlb9q.jl:11\n"
  stdout: ''
  timestamp: 1659747109
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    \n    count_upper = 0\n    for i in 0..length(s):\n        if ((i mod\
    \ 2) == 0) & (s[i] == 'A') & (s[i+1] == 'A') & (s[i+2] == 'A') \n            count_upper\
    \ += 1\n        end\n    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"AABBCC\")\n</cell>\n<text>\nExercise 2\nWrite a function that counts\
    \ the number of vowels in a string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpk7b1sqj0.jl:10\nin expression\
    \ starting at /tmp/tmpk7b1sqj0.jl:10\n"
  stdout: ''
  timestamp: 1659747109
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for c in s\n        if c == 'A' or c == 'E' or c\
    \ == 'I' or c == 'O' or c == 'U'\n            count_upper += 1\n        end\n\
    \    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.3>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of vowels found in it.\nusing Test\n\n@testset begin\n\
    \ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpb4l96l15.jl:9\nin expression starting at /tmp/tmpb4l96l15.jl:9\n"
  stdout: ''
  timestamp: 1659747109
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for c in s\n        if c == 'A'\n            count_upper\
    \ += 1\n        if c == 'E'\n            count_upper += 1\n        if c == 'I'\n\
    \            count_upper += 1\n        if c == 'O'\n            count_upper +=\
    \ 1\n        if c == 'U'\n            count_upper += 1\n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.0>\ncount_upper(\"AaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAa\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkwma_iru.jl:21\nin expression starting at\
    \ /tmp/tmpkwma_iru.jl:21\n"
  stdout: ''
  timestamp: 1659747109
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in (2..length(s)-2) do \n        if s[i] ==\
    \ 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U' then \n    \
    \        count_upper = count_upper + 1\n        end\n    end\n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of vowels found in it.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpng9qnnoc.jl:8\nin expression starting at /tmp/tmpng9qnnoc.jl:8\n"
  stdout: ''
  timestamp: 1659747109
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for x in s\n        if isupper(x)\n            count_upper\
    \ += 1\n        end\n    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"HELLO\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"HELLO WORLD\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"HELLO WORLD\", lowercase=true)\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"HELLO WORLD\", uppercase=true)\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"HELLO WORLD\", uppercase=true, lowercase=true)\n\
    </cell>\n<code language=julia-1.5>\ncount_upper(\"HELLO WORLD\", uppercase=true,\
    \ lowercase=false)\n</cell>\n<code language=julia-1.5>\ncount_upper(\"HELLO WORLD\"\
    , uppercase=false, lowercase=true)\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    HELLO WORLD\", uppercase=false, lowercase=false)\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"HELLO WORLD\", uppercase=false, lowercase=false)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"HELLO WORLD\", uppercase=false, lowercase=false)\n\
    </cell>\n<code language=julia-1.5>\ncount_upper(\"HELLO WORLD\", uppercase=false,\
    \ lowercase=false)\n</cell>\n<code language=julia-1.5>\ncount_upper(\"HELLO WORLD\"\
    , uppercase=false, lowercase=false)\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    HELLO WORLD\", uppercase=false, lowercase=false)\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"HELLO WORLD\", uppercase=false, lowercase=false)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"HELLO WORLD\", uppercase=false, lowercase=false)\n\
    </cell>\n<code language=julia-1.5>\ncount_upper(\"HELLO WORLD\", uppercase=false,\
    \ lowercase=false)\n</cell>\n<code language=julia-1.5>\ncount_upper(\"HELLO WORLD\"\
    , uppercase=false, lowercase=false)\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    HELLO WORLD\", uppercase=false, lowercase=false)\n</cell>\n<code language=julia-1.5\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgle1vlr2.jl:15\nin expression starting at\
    \ /tmp/tmpgle1vlr2.jl:15\n"
  stdout: ''
  timestamp: 1659747110
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for x in s\n        if x mod 2 = 0 then count_upper\
    \ += 1\n    return count_upper\nend\n</cell>\n<code language=julia-1.4>\ncount_upper(\"\
    hello\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hello\")\n</cell>\n\
    <code language=julia-1.4>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.4>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.4>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.4>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.4>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.4>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.4>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.4>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t\
    @test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"\
    dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_jew_t5j.jl:9\nin expression starting at /tmp/tmp_jew_t5j.jl:9\n"
  stdout: ''
  timestamp: 1659747110
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in (2..length(s)-2) do \n        if s[i] ==\
    \ 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' \n         \
    \   count_upper = count_upper + 1\n        end\n    end\n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_upper(\"The quick brown fox jumps\
    \ over the lazy dog\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of vowels \nin the string. \nFor example, count_vowels(\"\
    The quick brown fox jumps over the lazy dog\") should return 5.\nusing Test\n\n\
    @testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\
    \t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"\
    B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t\
    @test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmps05sljue.jl:8\nin expression starting at /tmp/tmps05sljue.jl:8\n"
  stdout: ''
  timestamp: 1659747110
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    \n    count_upper = 0\n    \n    for i in 2 to length(s)\n        if s(i)\
    \ == s(i) + 32\n            count_upper += 1\n        end\n    end\n    \n   \
    \ return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-\nusing Test\n\n@testset begin\n\ncandidate =\
    \ count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmplrgk0_ru.jl:10 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplrgk0_ru.jl:10\n\
    in expression starting at /tmp/tmplrgk0_ru.jl:10\n"
  stdout: ''
  timestamp: 1659747111
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in 0..(length(s)-2) do\n        if s[i] ==\
    \ 'A' and s[i+1] == 'E' and s[i+2] == 'I' and s[i+3] == 'O' and s[i+4] == 'U'\
    \ then\n            count_upper = count_upper + 1\n        end\n    end\n    return\
    \ count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcefghijklmnopqrstuvwxyz\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of vowels contained in the string.\nusing Test\n\n@testset begin\n\
    \ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpknn2d0yo.jl:8\nin expression starting at /tmp/tmpknn2d0yo.jl:8\n"
  stdout: ''
  timestamp: 1659747110
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in 2 to length(s)\n        if s[i] == 'A' or\
    \ s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U'\n            count_upper\
    \ += 1\n        end\n    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns the number of vowels\
    \ contained in the string. \nThe vowels are \"a\", \"e\", \"i\", \"o\", and \"\
    u\". \nThe function should ignore all punctuation and capitalization.\nThe function\
    \ should ignore all non-alphabetic characters (punctuation, spaces, etc.).\nThe\
    \ function should ignore all non-alphanumeric characters (punctuation, spaces,\
    \ etc.).\nThe function should ignore all non-letters (punctuation, spaces, etc.).\n\
    The function should ignore all non-ASCII characters (punctuation, spaces, etc.).\n\
    The function should ignore all non-letters (punctuation, spaces, etc.).\nThe function\
    \ should ignore all non-ASCII characters (punctuation, spaces, etc.).\nThe function\
    \ should ignore all non-letters (punctuation, spaces, etc.).\nThe function should\
    \ ignore all non-ASCII characters (punctuation, spaces, etc.).\nThe function should\
    \ ignore all non-letters (punctuation, spaces, etc.).\nThe function should ignore\
    \ all non-ASCII characters (punctuation, spaces, etc.).\nThe function should ignore\
    \ all non-letters (punctuation, spaces, etc.).\nThe function should ignore all\
    \ non-ASCII characters (punctuation, spaces, etc.).\nThe function should ignore\
    \ all non-letters (punctuation, spaces, etc.).\nThe function should ignore all\
    \ non-ASCII characters (punctuation, spaces, etc.).\nThe function should ignore\
    \ all non-letters (punctuation, spaces, etc.).\nThe function should ignore all\
    \ non-ASCII characters (punctuation, spaces, etc.).\nThe function should ignore\
    \ all non-letters (punctuation, spaces, etc.).\nThe function should ignore all\
    \ non-ASCII characters (punctuation, spaces, etc.).\nThe function should ignore\
    \ all non-letters (punctuation, spaces, etc.).\nThe function should ignore all\
    \ non-ASCII characters (punctuation, spaces, etc.).\nThe function should ignore\
    \ all non-letters (punctuation, spaces, etc.).\nThe function should ignore all\
    \ non-ASCII characters (punctuation, spaces, etc.).\nThe function should ignore\
    \ all non-letters (punctuation, spaces, etc.).\nThe function should ignore all\
    \ non-ASCII characters (punctuation, spaces, etc.).\nThe function should ignore\
    \ all non-letters (punctuation, \nusing Test\n\n@testset begin\n\ncandidate =\
    \ count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpepn0up9b.jl:8 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpepn0up9b.jl:8\n\
    in expression starting at /tmp/tmpepn0up9b.jl:8\n"
  stdout: ''
  timestamp: 1659747110
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for x in s\n        if x % 2 == 0\n            count_upper\
    \ += 1\n    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpsw955jc4.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsw955jc4.jl:1\n\
    in expression starting at /tmp/tmpsw955jc4.jl:1\n"
  stdout: ''
  timestamp: 1659747110
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for x in s\n        if x mod 2 = 0 then count_upper\
    \ += 1\n    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.0>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.0>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.0>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.0>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.0>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.0>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.0>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.0>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.0>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.0>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.0>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.0>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.0>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.0>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.0>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.0>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.0>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.0>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.0>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.0>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.0>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.0>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.0>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.0>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.0>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.0>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.0>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.0>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.0>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.0>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpywtt3w0e.jl:9\nin expression starting at /tmp/tmpywtt3w0e.jl:9\n"
  stdout: ''
  timestamp: 1659747110
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for idx in indices(s)\n        if s[idx] >= 'A' &&\
    \ s[idx] <= 'Z'\n            count_upper += 1\n        end\n    end\n    return\
    \ count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that counts the number of uppercase\
    \ vowels in each word of a given string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb9er_7te.jl:15\nin expression starting at\
    \ /tmp/tmpb9er_7te.jl:15\n"
  stdout: ''
  timestamp: 1659747110
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in 2..length(s)\n        if s[i] == 'A' or\
    \ s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U'\n            count_upper\
    \ += 1\n        end\n    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.0>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.0>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.0>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.0>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.0>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.0>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.0>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.0>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.0>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.0>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.0>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.0>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.0>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.0>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.0>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.0>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.0>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.0>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.0>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.0>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.0>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.0>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.0>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"s\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprk3g60p7.jl:9\nin expression starting at /tmp/tmprk3g60p7.jl:9\n"
  stdout: ''
  timestamp: 1659747110
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in 2..length(s)\n        if s[i] == 'A'\n \
    \           count_upper += 1\n        end\n    end\n    return count_upper\nend\n\
    </cell>\n<code language=julia-1.0>\ncount_upper(\"AaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaA\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdi_nusvc.jl:15\nin expression starting at\
    \ /tmp/tmpdi_nusvc.jl:15\n"
  stdout: ''
  timestamp: 1659747110
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for c in s\n        if c == 'A'\n            count_upper\
    \ += 1\n        elif c == 'E'\n            count_upper += 1\n        elif c ==\
    \ 'I'\n            count_upper += 1\n        elif c == 'O'\n            count_upper\
    \ += 1\n        elif c == 'U'\n            count_upper += 1\n        else\n  \
    \          count_upper += 1\n    return count_upper\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6mu4tsle.jl:11\nin expression starting at /tmp/tmp6mu4tsle.jl:11\n"
  stdout: ''
  timestamp: 1659747111
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for c in s\n        if c == 'A' or c == 'E' or c\
    \ == 'I' or c == 'O' or c == 'U'\n            count_upper += 1\n        end\n\
    \    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=juli\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9pfsv53e.jl:9\nin expression starting at /tmp/tmp9pfsv53e.jl:9\n"
  stdout: ''
  timestamp: 1659747105
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    \n    count_upper = 0\n    \n    for i in 2..length(s) do \n        if\
    \ s[i] == 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U' then\
    \ \n            count_upper += 1 \n        else \n            count_upper = 0\
    \ \n        end \n    end \n    \n    return count_upper \nend \n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of vowels contained\
    \ in the string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t\
    @test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"\
    dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"s\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbslq00xg.jl:11\nin expression starting at /tmp/tmpbslq00xg.jl:11\n"
  stdout: ''
  timestamp: 1659747111
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    \n    count_upper = 0\n    for i in 0 .. s.length-1\n        if s[i] ==\
    \ 'A'\n            count_upper += 1\n        else if s[i] == 'a'\n           \
    \ count_upper += 1\n        else if s[i] == 'E'\n            count_upper += 1\n\
    \        else if s[i] == 'e'\n            count_upper += 1\n        else if s[i]\
    \ == 'I'\n            count_upper += 1\n        else if s[i] == 'i'\n        \
    \    count_upper += 1\n        else if s[i] == 'O'\n            count_upper +=\
    \ 1\n        else if s[i] == 'o'\n            count_upper += 1\n        else if\
    \ s[i] == 'U'\n            count_upper += 1\n        else if s[i] == 'u'\n   \
    \         count_upper += 1\n        else if s[i] == 'Y'\n            count_upper\
    \ += 1\n        else if s[i] == 'y'\n            count_upper += 1\n        else\
    \ if s[i] == 'a'\n            count_upper += 1\n        else if s[i] == 'e'\n\
    \            count_upper += 1\n        else if s[i] == 'i'\n            count_upper\
    \ += 1\n        else if s[i] == 'o'\n            count_upper += 1\n        else\
    \ if s[i] == 'u'\n            count_upper += 1\n        else if s[i] == 'y'\n\
    \            count_upper += 1\n        else if s[i] == 'A'\n            count_upper\
    \ += 1\n        else if s[i] == 'a'\n            count_upper += 1\n        else\
    \ if s[i] == 'E'\n            count_upper += 1\n        else if s[i] == 'e'\n\
    \            count_upper += 1\n        else if s[i] == 'I'\n            count_upper\
    \ += 1\n        else if s[i] == 'i'\n            count_upper += 1\n        else\
    \ if s[i] == 'O'\n            count_upper += 1\n        else if s[i] == 'o'\n\
    \            count_upper += 1\n        else if s[i] == 'U'\n            count_upper\
    \ += 1\n        else if s[i] == 'u'\n            count_upper += 1\n        else\
    \ if s[i] == 'Y'\n            count_upper += 1\n        else if s[i] == 'y'\n\
    \            count_upper += 1\n        else if s[i] == 'A'\n            count_upper\
    \ += 1\n        else if s[i] == 'a'\n            count_upper += 1\n        else\
    \ if s[i] == 'E'\n            count_upper += 1\n        else if s[i] == 'e'\n\
    \            count_upper += 1\n        else if s[i] == 'I'\n            count_upper\
    \ += 1\n        else if s[i] == 'i'\n            count_upper += 1\n        else\
    \ if s[i] == 'O'\n            count_upper += 1\n        else if s[i] == 'o'\n\
    \            count_upper += 1\n        else if s[i] == 'U'\n            count_upper\
    \ += 1\n        else if s[i] == 'u'\n            count_upper += 1\n        else\
    \ if s[i] == 'Y'\n            count_upper += 1\n        else if s[i] == 'y'\n\
    \            count_upper += 1\n        else if s[i] == 'A'\n            count_upper\
    \ += 1\n        else if s[i]\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeglhrc_o.jl:12\nin expression starting at\
    \ /tmp/tmpeglhrc_o.jl:12\n"
  stdout: ''
  timestamp: 1659747111
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for x in s\n        if x % 2 == 0\n            count_upper\
    \ += 1\n        end\n    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hello\"\
    )\n</cell\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq2by51g5.jl:15\nin expression starting at\
    \ /tmp/tmpq2by51g5.jl:15\n"
  stdout: ''
  timestamp: 1659747099
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in (2..length(s))\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'\n            count_upper\
    \ += 1\n        end\n    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of vowels found in it.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp136qa5wc.jl:15\nin expression starting at\
    \ /tmp/tmp136qa5wc.jl:15\n"
  stdout: ''
  timestamp: 1659747111
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for idx in 1:length(s) do\n        if s[idx] >= 'A'\
    \ and s[idx] <= 'Z' then\n            count_upper = count_upper + 1\n        end\n\
    \    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.4>\ncount_upper(\"\
    abC\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"abC\")\n</cell>\n<code\
    \ language=julia-1.4>\ncount_upper(\"abC\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"abC\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"abC\"\
    )\n</cell>\n<code language=julia-1.4>\ncount_upper(\"abC\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"abC\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"abC\"\
    )\n</cell>\n<code language=julia-1.4>\ncount_upper(\"abC\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"abC\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"abC\"\
    )\n</cell>\n<code language=julia-1.4>\ncount_upper(\"abC\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"abC\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"abC\"\
    )\n</cell>\n<code language=julia-1.4>\ncount_upper(\"abC\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"abC\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"abC\"\
    )\n</cell>\n<code language=julia-1.4>\ncount_upper(\"abC\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"abC\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"abC\"\
    )\n</cell>\n<code language=julia-1.4>\ncount_upper(\"abC\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"abC\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"abC\"\
    )\n</cell>\n<code language=julia-1.4>\ncount_upper(\"abC\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"abC\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"abC\"\
    )\n</cell>\n<code language=julia-1.4>\ncount_upper(\"abC\")\n</cell>\n<code language=julia-1.\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"s\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwy181tu7.jl:9\nin expression starting at /tmp/tmpwy181tu7.jl:9\n"
  stdout: ''
  timestamp: 1659747111
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for c in s\n        if isupper(c)\n            count_upper\
    \ += 1\n            \n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"Hello World\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of uppercase vowels in a string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnvx1nryy.jl:14\nin expression starting at\
    \ /tmp/tmpnvx1nryy.jl:14\n"
  stdout: ''
  timestamp: 1659747111
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for c in s\n        if c == 'A' or c == 'E' or c\
    \ == 'I' or c == 'O' or c == 'U'\n            count_upper += 1\n        end\n\
    \    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abracadabra\")\n</cell>\n\
    <code language=juli\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9pfsv53e.jl:9\nin expression starting at /tmp/tmp9pfsv53e.jl:9\n"
  stdout: ''
  timestamp: 1659747105
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    \n    count_upper = 0\n    for i in 2..length(s)\n        if s[i] == 'A'\
    \ or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U'\n            count_upper\
    \ += 1\n        end\n    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"Hello, world!\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    Hello, world!\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"Hello, world!\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"Hello, world!\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"Hello, world!\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"Hello, world!\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    Hello, world!\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"Hello, world!\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"Hello, world!\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"Hello, world!\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"Hello, world!\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    Hello, world!\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"Hello, world!\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"Hello, world!\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"Hello, world!\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"Hello, world!\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    Hello, world!\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"Hello, world!\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"Hello, world!\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"Hello, world!\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"Hello, world!\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    Hello, world!\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"Hello, world!\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"Hello, world!\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"Hello, world!\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"Hello, world!\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    Hello, world!\")\n</cell>\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"s\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5klqrnkr.jl:10\nin expression starting at /tmp/tmp5klqrnkr.jl:10\n"
  stdout: ''
  timestamp: 1659747111
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    \n    count_upper = 0\n    \n    for x in s\n        if isupper(x)\n \
    \           count_upper += 1\n            \n    return count_upper\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"HELLO\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hELLO\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hEllO\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hEllO\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hEllO\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hEllO\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hEllO\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hEllO\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hEllO\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hEllO\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hEllO\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hEllO\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hEllO\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hEllO\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hEllO\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hEllO\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hEllO\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hEllO\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hEllO\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hEllO\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"hEllO\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hEllO\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"hEllO\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"hEllO\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqmj5q65a.jl:16\nin expression starting at\
    \ /tmp/tmpqmj5q65a.jl:16\n"
  stdout: ''
  timestamp: 1659747111
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for c in s\n        if c == 'A' or c == 'E' or c\
    \ == 'I' or c == 'O' or c == 'U'\n            count_upper += 1\n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.3>\ncount_upper(\"The quick brown fox jumps\
    \ over the lazy dog\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of uppercase vowels in it.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpoiqc38va.jl:9\nin expression starting at /tmp/tmpoiqc38va.jl:9\n"
  stdout: ''
  timestamp: 1659747111
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for c in s\n        if c == 'A' or c == 'E' or c\
    \ == 'I' or c == 'O' or c == 'U'\n            count_upper += 1\n        end\n\
    \    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    The quick brown fox jumps over the lazy dog\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the number of vowels in each\
    \ word in the string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpw1p2qc7g.jl:9\nin expression starting at /tmp/tmpw1p2qc7g.jl:9\n"
  stdout: ''
  timestamp: 1659747111
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for c in s\n        if c == 'A' or c == 'E' or c\
    \ == 'I' or c == 'O' or c == 'U'\n            count_upper += 1\n        end\n\
    \    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    AaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaA\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqbx4luew.jl:9\nin expression starting at /tmp/tmpqbx4luew.jl:9\n"
  stdout: ''
  timestamp: 1659747101
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for x in s\n        if isupper(x)\n            count_upper\
    \ += 1\n        end\n    end\n    return count_upper\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpgw0evd5t.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpgw0evd5t.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"aBCdEf\") == 1\n  UndefVarError: isupper not defined\n\
    \  Stacktrace:\n   [1] count_upper(s::String)\n     @ Main /tmp/tmpgw0evd5t.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgw0evd5t.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgw0evd5t.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpgw0evd5t.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdefg\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n\
    \   [1] count_upper(s::String)\n     @ Main /tmp/tmpgw0evd5t.jl:9\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgw0evd5t.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgw0evd5t.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpgw0evd5t.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"dBBE\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n\
    \   [1] count_upper(s::String)\n     @ Main /tmp/tmpgw0evd5t.jl:9\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgw0evd5t.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgw0evd5t.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpgw0evd5t.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"B\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n\
    \   [1] count_upper(s::String)\n     @ Main /tmp/tmpgw0evd5t.jl:9\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:44"
  timestamp: 1659747109
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    \n    count_upper = 0\n    \n    for i in 2 to length(s) do\n        if\
    \ s[i] == 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U' then\n\
    \            count_upper += 1\n        end\n    end\n    \n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.3>\ncount_upper(\"The quick brown fox jumps\
    \ over the lazy dog\")\n</cell>\n<code language=julia-1.3>\ncount_upper(\"The\
    \ quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.3>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.3>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.3>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.3>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.3>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.3>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.3>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.3>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.3>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.3>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.3>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.3>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.3>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.3>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.3>\n\
    count_upper(\"The quick brown fox jumps over the lazy dog\")\n</cell>\n<code language=julia-1.3>\n\
    count_upper(\"The \nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpln6f1ido.jl:10 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpln6f1ido.jl:10\n\
    in expression starting at /tmp/tmpln6f1ido.jl:10\n"
  stdout: ''
  timestamp: 1659747111
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for c in s\n        if c == 'A' or c == 'E' or c\
    \ == 'I' or c == 'O' or c == 'U'\n            count_upper += 1\n        end\n\
    \    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.4>\ncount_upper(\"\
    The quick brown fox jumps over the lazy dog\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the number of vowels found in\
    \ it.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpp_ibia1l.jl:9\nin expression starting at /tmp/tmpp_ibia1l.jl:9\n"
  stdout: ''
  timestamp: 1659747111
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in 0 .. length(s)/2 do\n        if s[i] ==\
    \ 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U' then\n     \
    \       count_upper += 1\n        end\n    end\n    return count_upper\nend\n\
    </cell>\n<code language=julia-1.4>\ncount_upper(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\"\
    )\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of vowels \nin the string. \nThe vowels are \"a\", \"e\", \"i\",\
    \ \"o\", and \"u\". \nThe function should ignore all non-vowel characters.\nFor\
    \ example, count_vowels(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\"\
    ) should return 5.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptu0hv8v6.jl:8\nin expression starting at /tmp/tmptu0hv8v6.jl:8\n"
  stdout: ''
  timestamp: 1659747112
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for idx in 0..(length(s)-2) do\n        if s[idx]\
    \ == 'A' and s[idx+1] == 'E' and s[idx+2] == 'I' and s[idx+3] == 'O' and s[idx+4]\
    \ == 'U' then\n            count_upper = count_upper + 1\n        end\n    end\n\
    \    return count_upper\nend\n</cell>\n<code language=julia-1.0>\ncount_upper(\"\
    abeiioouu\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of vowels found in it.\nusing Test\n\n@testset begin\n\
    \ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpypllhn_a.jl:8\nin expression starting at /tmp/tmpypllhn_a.jl:8\n"
  stdout: ''
  timestamp: 1659747112
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    \n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") ==\
    \ 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\
    \t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpismmg9n9.jl:1\nin expression starting at /tmp/tmpismmg9n9.jl:1\n"
  stdout: ''
  timestamp: 1659747112
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for i in 2..length(s)\n        if s[i] == 'A'\n \
    \           count_upper += 1\n        else if s[i] == 'a'\n            count_upper\
    \ += 1\n        else if s[i] == 'E'\n            count_upper += 1\n        else\
    \ if s[i] == 'e'\n            count_upper += 1\n        else if s[i] == 'I'\n\
    \            count_upper += 1\n        else if s[i] == 'i'\n            count_upper\
    \ += 1\n        else if s[i] == 'O'\n            count_upper += 1\n        else\
    \ if s[i] == 'o'\n            count_upper += 1\n        else if s[i] == 'U'\n\
    \            count_upper += 1\n        else if s[i] == 'u'\n            count_upper\
    \ += 1\n        else if s[i] == 'a'\n            count_upper += 1\n        else\
    \ if s[i] == 'A'\n            count_upper += 1\n        else if s[i] == 'E'\n\
    \            count_upper += 1\n        else if s[i] == 'e'\n            count_upper\
    \ += 1\n        else if s[i] == 'I'\n            count_upper += 1\n        else\
    \ if s[i] == 'i'\n            count_upper += 1\n        else if s[i] == 'O'\n\
    \            count_upper += 1\n        else if s[i] == 'o'\n            count_upper\
    \ += 1\n        else if s[i] == 'U'\n            count_upper += 1\n        else\
    \ if s[i] == 'u'\n            count_upper += 1\n        else if s[i] == 'A'\n\
    \            count_upper += 1\n        else if s[i] == 'E'\n            count_upper\
    \ += 1\n        else if s[i] == 'e'\n            count_upper += 1\n        else\
    \ if s[i] == 'I'\n            count_upper += 1\n        else if s[i] == 'i'\n\
    \            count_upper += 1\n        else if s[i] == 'O'\n            count_upper\
    \ += 1\n        else if s[i] == 'o'\n            count_upper += 1\n        else\
    \ if s[i] == 'U'\n            count_upper += 1\n        else if s[i] == 'u'\n\
    \            count_upper += 1\n        else if s[i] == 'A'\n            count_upper\
    \ += 1\n        else if s[i] == 'E'\n            count_upper += 1\n        else\
    \ if s[i] == 'e'\n            count_upper += 1\n        else if s[i] == 'I'\n\
    \            count_upper += 1\n        else if s[i] == 'i'\n            count_upper\
    \ += 1\n        else if s[i] == 'O'\n            count_upper += 1\n        else\
    \ if s[i] == 'o'\n            count_upper += 1\n        else if s[i] == 'U'\n\
    \            count_upper += 1\n        else if s[i] == 'u'\n            count_upper\
    \ += 1\n        else if s[i] == 'A'\n            count_upper += 1\n        else\
    \ if s[i] == 'E'\n            count_upper += 1\n        else if s[i] == 'e'\n\
    \            count_upper += 1\n        else if s[i] == 'I'\n            count_upper\
    \ += 1\n        else if s[i] == 'i'\n            count_upper += 1\n        else\
    \ if \nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcljo6vxs.jl:11\nin expression starting at\
    \ /tmp/tmpcljo6vxs.jl:11\n"
  stdout: ''
  timestamp: 1659747112
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    \n    count_upper = 0\n    for c in s\n        if c == 'A' or c == 'E'\
    \ or c == 'I' or c == 'O' or c == 'U'\n            count_upper += 1\n        end\n\
    \    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    AaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaA\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpnpnyevdt.jl:10\nin expression starting at /tmp/tmpnpnyevdt.jl:10\n"
  stdout: ''
  timestamp: 1659747112
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for x in s\n        if isupper(x)\n            count_upper\
    \ += 1\n        end\n    end\n    return count_upper\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpgw0evd5t.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpgw0evd5t.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"aBCdEf\") == 1\n  UndefVarError: isupper not defined\n\
    \  Stacktrace:\n   [1] count_upper(s::String)\n     @ Main /tmp/tmpgw0evd5t.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgw0evd5t.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgw0evd5t.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpgw0evd5t.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdefg\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n\
    \   [1] count_upper(s::String)\n     @ Main /tmp/tmpgw0evd5t.jl:9\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgw0evd5t.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgw0evd5t.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpgw0evd5t.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"dBBE\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n\
    \   [1] count_upper(s::String)\n     @ Main /tmp/tmpgw0evd5t.jl:9\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgw0evd5t.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgw0evd5t.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpgw0evd5t.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"B\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n\
    \   [1] count_upper(s::String)\n     @ Main /tmp/tmpgw0evd5t.jl:9\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:44"
  timestamp: 1659747109
- exit_code: 1
  program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n                \"\"\"\nfunction count_upper(s::String)::Int64\
    \ \n    count_upper = 0\n    for x in s\n        if x mod 2 = 0 then count_upper\
    \ += 1 \n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    abracadabra\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of vowels \nin each word in the string. \nFor example,\
    \ \nthe string \"abracadabra\" should return [1, 1, 2, 1]. \nThe string \"abracadabra\"\
    \ should return [1, 1, 2, 1]. \nThe string \"abracadabra\" should return [1, 1,\
    \ 2, 1]. \nThe string \"abracadabra\" should return [1, 1, 2, 1]. \nThe string\
    \ \"abracadabra\" should return [1, 1, 2, 1]. \nThe string \"abracadabra\" should\
    \ return [1, 1, 2, 1]. \nThe string \"abracadabra\" should return [1, 1, 2, 1].\
    \ \nThe string \"abracadabra\" should return [1, 1, 2, 1]. \nThe string \"abracadabra\"\
    \ should return [1, 1, 2, 1]. \nThe string \"abracadabra\" should return [1, 1,\
    \ 2, 1]. \nThe string \"abracadabra\" should return [1, 1, 2, 1]. \nThe string\
    \ \"abracadabra\" should return [1, 1, 2, 1]. \nThe string \"abracadabra\" should\
    \ return [1, 1, 2, 1]. \nThe string \"abracadabra\" should return [1, 1, 2, 1].\
    \ \nThe string \"abracadabra\" should return [1, 1, 2, 1]. \nThe string \"abracadabra\"\
    \ should return [1, 1, 2, 1]. \nThe string \"abracadabra\" should return [1, 1,\
    \ 2, 1]. \nThe string \"abracadabra\" should return [1, 1, 2, 1]. \nThe string\
    \ \"abracadabra\" should return [1, 1, 2, 1]. \nThe string \"abracadabra\" should\
    \ return [1, 1, 2, 1]. \nThe string \"abracadabra\" should return [1, 1, 2, 1].\
    \ \nThe string \"abracadabra\" should return [1, 1, 2, 1]. \nThe string \"abracadabra\"\
    \ should return [1, 1, 2, 1]. \nThe string \"abracadabra\" should return [1, 1,\
    \ 2, 1]. \nThe string \"abracadabra\" should return [1, 1, 2, 1]. \nThe string\
    \ \"abracadabra\" should return \nusing Test\n\n@testset begin\n\ncandidate =\
    \ count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjpiqhifq.jl:9\nin expression starting at /tmp/tmpjpiqhifq.jl:9\n"
  stdout: ''
  timestamp: 1659747112
