name: HumanEval_20_find_closest_elements
language: jl
prompt: "\"\"\" From a supplied list of numbers (of length at least two) select and\
  \ return two that are the closest to each\n    other and return them in order (smaller\
  \ number, larger number).\n            \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
  \ Float64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
  \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0,\
  \ 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0,\
  \ 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
  \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
completions: ["    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a list of numbers and\
    \ returns the sum of the squares of the numbers in the list.", "    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    closest_numbers = numbers[1]\n\
    \    closest_numbers_2 = numbers[2]\n    \n    if numbers[1] < numbers[2]\n  \
    \      closest_numbers = numbers[1]\n        closest_numbers_2 = numbers[2]\n\
    \    else\n        closest_numbers = numbers[2]\n        closest_numbers_2 = numbers[1]\n\
    \    end\n    \n    return closest_numbers, closest_numbers_2\nend", "    \n \
    \   smallest_number = numbers[1]\n    largest_number = numbers[end]\n    \n  \
    \  for number in numbers[2:end]\n        if number < smallest_number\n       \
    \     smallest_number = number\n        elseif number > largest_number\n     \
    \       largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.1,\
    \ 2.2, 3.3, 4.4, 5.5])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ in a list of numbers and returns the average of all the numbers in the list.",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    closest_numbers\
    \ = numbers[1]\n    closest_numbers_2 = numbers[2]\n    \n    \n    for number\
    \ in numbers[3:end]\n        \n        if number < closest_numbers\n         \
    \   closest_numbers = number\n        elseif number > closest_numbers\n      \
    \      closest_numbers_2 = number\n        end\n    end\n    \n    return closest_numbers,\
    \ closest_numbers_2\nend\n</cell>\n<code language=julia-1.5>", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[end]\n    \n    for number in numbers[2:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1.1, 2.2, 3.3, 4.4,\
    \ 5.5])\n</cell>\n<text>\nExercise 2\nWrite a function that takes in a list of\
    \ numbers and returns the average of all the numbers in the list. \nHint: use\
    \ the function you wrote in exercise 1.", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[end]\n    \n    for number in numbers[2:end]\n        if number <\
    \ smallest_number\n            smallest_number = number\n        elseif number\
    \ > largest_number\n            largest_number = number\n        end\n    end\n\
    \    \n    return (smallest_number, largest_number)\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n   \
    \ \n    for number in numbers[2:end]\n        if number < smallest_number\n  \
    \          smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,\
    \ 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,\
    \ 2, 3, 4.1, 5])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,\
    \ 2, 3, 4.1, 5.1])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,\
    \ 2, 3, 4.1, 5.2])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,\
    \ 2, 3, 4.1, 5.3, 5.4, 5.5])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,\
    \ 2, 3, 4.1, 5.3, 5.4, 5.5, 5.6])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,\
    \ 2, 3, 4.1, 5.3, 5.4, 5.5, 5.6, 5.7, 5.8, 5.9, 6])\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1, 2, 3, 4.1, 5.3, 5.4, 5.5, 5.6, 5.7, 5.8, 5.9, 6, 6.1,\
    \ 6.2, 6.3, 6.4, 6.5, 6.6, 6.7, 6.8, 6.9, 7, 7.1, 7.2, 7.3, 7.4, 7.5, 7.6, 7.7,\
    \ 7.8, 7.9, 8, 8.1, 8.2, 8.3, 8.4, 8.5, 8.6, 8.7, 8.8, 8.9, 9, 9.1, 9.2, 9.3,\
    \ 9.4, 9.5, 9.6, 9.7, 9.8, 9.9, 10])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,\
    \ 2, 3, 4.1, 5.3, 5.4, 5.5, 5.6, 5.7, 5.8, 5.9, 6, 6.1, 6.2, 6.3, 6.4, 6.5, 6.6,\
    \ 6.7, 6.8, 6.9, 7, 7.1, 7.2, 7.3, 7.4, 7.5, 7.6, 7.7, 7.8, 7.9, 8, 8.1, 8.2,\
    \ 8.3, 8.4, 8.5, 8.6, 8.7, 8.8, 8.9, 9, 9.1, 9.2, 9.3, 9.4, 9.5, 9.6, 9.7, 9.8,\
    \ 9.9, 10, 10.1, 10.2, 10.3, 10.4, 10.5, 10.6, 10.7, 10.8, 10.9, 11, 11.1, 11.2,\
    \ 11.3, 11.4, 11.5, 11.6, 11.7, 11.8, 11.9, 12, 12.1, 12.2, 12.3, 12.4, 12.5,\
    \ 12.6, 12.7, 12.8, 12.9, 13, ", "    \n    closest_numbers = numbers[1]\n   \
    \ \n    for number in numbers[2:end]\n        \n        if number < closest_numbers\n\
    \            closest_numbers = number\n        else\n            break\n     \
    \   end\n    end\n    \n    return closest_numbers, numbers[1]\nend\n</cell>\n\
    <code language=julia-1.5>\n# Test the function\nnumbers = [1.2, 2.3, 3.4, 4.5]\n\
    find_closest_elements(numbers)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the first element of a vector that is larger than a specified value.",
  "    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n    \n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n\
    <code language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n\
    <code language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n\
    <code language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n\
    <code language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n\
    </cell", "    \n    closest_elements = Vector{Float64}(undef, 2)\n    \n    closest_elements[1]\
    \ = numbers[1]\n    closest_elements[2] = numbers[2]\n    \n    for i = 2:length(numbers)\n\
    \        \n        if numbers[i] > closest_elements[1]\n            closest_elements[1]\
    \ = numbers[i]\n        elseif numbers[i] < closest_elements[2]\n            closest_elements[2]\
    \ = numbers[i]\n        end\n    end\n    \n    return closest_elements\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n   \
    \ \n    for number in numbers[2:end]\n        if number < smallest_number\n  \
    \          smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.1,\
    \ 2.2, 3.3, 4.4, 5.5, 6.6])\n</cell>\n<text>\nExercise: Write a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \n    \n    For example, if the vector is [1,2,3,4,5,6] then\
    \ the function should return 25.\n    \n    Use a for loop to do this.\n    \n\
    \    Use a while loop to do this.\n    \n    Use a do loop to do this.\n    \n\
    \    Use a while loop to do this.\n    \n    Use a while loop to do this.\n  \
    \  \n    Use a while loop to do this.\n    \n    Use a while loop to do this.\n\
    \    \n    Use a while loop to do this.\n    \n    Use a while loop to do this.\n\
    \    \n    Use a while loop to do this.\n    \n    Use a while loop to do this.\n\
    \    \n    Use a while loop to do this.\n    \n    Use a while loop to do this.\n\
    \    \n    Use a while loop to do this.\n    \n    Use a while loop to do this.\n\
    \    \n    Use a while loop to do this.\n    \n    Use a while loop to do this.\n\
    \    \n    Use a while loop to do this.\n    \n    Use a while loop to do this.\n\
    \    \n    Use a while loop to do this.\n    \n    Use a while loop to do this.\n\
    \    \n    Use a while loop to do this.\n    \n    Use a while loop to do this.\n\
    \    \n    Use a while loop to do this.\n    \n    Use a while loop to do this.\n\
    \    \n    Use a while loop to do this.\n    \n    Use a while loop to do this.\n\
    \    \n    Use a while loop to do this.\n    \n    Use a while loop to do this.\n\
    \    \n    Use a while loop to do this.\n    \n    Use a while loop to do this.\n\
    \    \n    Use a while loop to do this.\n    \n    Use a while loop to do this.\n\
    \    \n    Use a while ", "    \n    closest_elements = Vector{Float64}(undef,\
    \ 0)\n    closest_elements_distance = Float64(0)\n    \n    for number in numbers\n\
    \        \n        distance = abs(number - numbers[1])\n        \n        if distance\
    \ < closest_elements_distance\n            closest_elements_distance = distance\n\
    \            closest_elements = number\n        end\n    end\n    \n    return\
    \ closest_elements, closest_elements_distance\nend\n</cell>\n<code language=julia-1.5>\n\
    numbers = [1.2, 3.4, 5.6, 7.8, 9.0]\n</cell>\n<code language=julia-1.5>\nfind_closest_elements(numbers)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in a list of numbers\
    \ and returns the mean of the numbers in the list.", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[1]\n    \n    for number in numbers[2:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in a list of numbers\
    \ and returns the number of elements in the list that are less than the mean of\
    \ the list.", "    \n    smallest_number = numbers[1]\n    largest_number = numbers[2]\n\
    \    \n    for number in numbers[3:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise\nWrite a function that takes in a list of numbers and\
    \ returns the sum of the squares of the numbers in the list.", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[1]\n    \n    for number in numbers[2:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1.1, 2.1, 3.1, 4.1])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1.1, 2.1, 3.1, 4.1,\
    \ 5.1])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.1, 2.1,\
    \ 3.1, 4.1, 5.1, 6.1])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.1,\
    \ 2.1, 3.1, 4.1, 5.1, 6.1, 7.1])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.1,\
    \ 2.1, 3.1, 4.1, 5.1, 6.1, 7.1, 8.1])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.1,\
    \ 2.1, 3.1, 4.1, 5.1, 6.1, 7.1, 8.1, 9.1])\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1.1, 2.1, 3.1, 4.1, 5.1, 6.1, 7.1, 8.1, 9.1, 10.1])\n</cell>\n\
    <code language=julia-1.5>\nfind_closest_elements([1.1, 2.1, 3.1, 4.1, 5.1, 6.1,\
    \ 7.1, 8.1, 9.1, 10.1, 11.1])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.1,\
    \ 2.1, 3.1, 4.1, 5.1, 6.1, 7.1, 8.1, 9.1, 10.1, 11.1, 12.1])\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1.1, 2.1, 3.1, 4.1, 5.1, 6.1, 7.1, 8.1, 9.1, 10.1, 11.1,\
    \ 12.1, 13.1])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.1,\
    \ 2.1, 3.1, 4.1, 5.1, 6.1, 7.1, 8.1, 9.1, 10.1, 11.1, 12.1, 13.1, 14.1])\n</cell>\n\
    <code language=julia-1.5>\nfind_closest_elements([1.1, 2.1, 3.1, 4.1, 5.1, 6.1,\
    \ 7.1, 8.1, 9.1, 10.1, 11.1, 12.1, 13.1, 14.1, 15.1])\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1.1, 2.1, 3.1, 4.1, 5.1, 6.1, 7.1, 8.1, 9.1, 10.1, 11.",
  "    \n    closest_numbers = numbers[1]\n    closest_numbers_2 = numbers[2]\n  \
    \  \n    if numbers[1] < numbers[2]\n        closest_numbers = numbers[1]\n  \
    \      closest_numbers_2 = numbers[2]\n    else\n        closest_numbers = numbers[2]\n\
    \        closest_numbers_2 = numbers[1]\n    end\n    \n    return closest_numbers,\
    \ closest_numbers_2\nend\n</cell>\n<code language=julia-1.5>", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[1]\n    \n    for number in numbers[2:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a list of numbers and\
    \ returns the mean of the numbers in the list. \nHint: use mean.", "    \n   \
    \ smallest_number = numbers[1]\n    largest_number = numbers[end]\n    \n    for\
    \ number in numbers[2:end]\n        if number < smallest_number\n            smallest_number\
    \ = number\n        elseif number > largest_number\n            largest_number\
    \ = number\n        end\n    end\n    \n    return (smallest_number, largest_number)\n\
    end\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise: Write a function that takes in a list of numbers and\
    \ returns the number of numbers in the list that are less than the average of\
    \ the list.", "    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers in the list.", "    \n   \
    \ closest_numbers = numbers[numbers .< numbers[1]]\n    closest_numbers[1] = numbers[1]\n\
    \    closest_numbers[2] = numbers[2]\n    return closest_numbers\nend\n</cell>\n\
    <code language=julia-1.5>\n# Test it out\nnumbers = [1.1, 2.1, 3.1, 4.1, 5.1,\
    \ 6.1, 7.1, 8.1, 9.1, 10.1, 11.1, 12.1, 13.1, 14.1, 15.1, 16.1, 17.1, 18.1, 19.1,\
    \ 20.1, 21.1, 22.1, 23.1, 24.1, 25.1, 26.1, 27.1, 28.1, 29.1, 30.1, 31.1, 32.1,\
    \ 33.1, 34.1, 35.1, 36.1, 37.1, 38.1, 39.1, 40.1, 41.1, 42.1, 43.1, 44.1, 45.1,\
    \ 46.1, 47.1, 48.1, 49.1, 50.1, 51.1, 52.1, 53.1, 54.1, 55.1, 56.1, 57.1, 58.1,\
    \ 59.1, 60.1, 61.1, 62.1, 63.1, 64.1, 65.1, 66.1, 67.1, 68.1, 69.1, 70.1, 71.1,\
    \ 72.1, 73.1, 74.1, 75.1, 76.1, 77.1, 78.1, 79.1, 80.1, 81.1, 82.1, 83.1, 84.1,\
    \ 85.1, 86.1, 87.1, 88.1, 89.1, 90.1, 91.1, 92.1, 93.1, 94.1, 95.1, 96.1, 97.1,\
    \ 98.1, 99.1, 100.1, 101.1, 102.1, 103.1, 104.1, 105.1, 106.1, 107.1, 108.1, 109.1,\
    \ 110.1, 111.1, 112.1, 113.1, 114.1, 115.1, 116.1, 117.1, 118.1, 119.1, 120.1,\
    \ 121.1, 122.1, 123.1, 124.1, 125.1, 126.1, 127.1, 128.1, 129.1, 130.1, 131.1,\
    \ 132.1, 133.1, 134.1, 135.1, 136.1, 137.1, 138.1, 139.1, 140.1, 141.1, 142.1,\
    \ 143.1, 144.1, 145.1, 146.1, 147.1, 148.1, 149.1, 150.1, 151.1, 152.1, 153.1,\
    \ 154.1, 155.1, 156.1, 157.1, 158.1, 159.1, 160.1, 161.1, 162.1, 163.1, 164.1,\
    \ 165.1, 166.1, 167.1, 168.1, 169.1, 170.1, 171.1, 172.1, 173.", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[end]\n    \n    for number in numbers[2:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of elements\
    \ in a vector that are less than a given number. For example, if the input is\
    \ [1,2,3,4,5,6,7,8,9,10] and the number given is 3, the function should return\
    \ 5.", "    \n    closest_numbers = numbers[1]\n    closest_numbers_2 = numbers[2]\n\
    \    \n    if numbers[1] < numbers[2]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[2]\n    else\n        closest_numbers = numbers[2]\n\
    \        closest_numbers_2 = numbers[1]\n    end\n    \n    return closest_numbers,\
    \ closest_numbers_2\nend\n</cell>\n<code language=julia-1.5>", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[end]\n    \n    for number in numbers[2:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes two numbers and returns the sum\
    \ of the squares of the two numbers.", "    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[end]\n    \n    for number in numbers[2:end]\n        if number <\
    \ smallest_number\n            smallest_number = number\n        elseif number\
    \ > largest_number\n            largest_number = number\n        end\n    end\n\
    \    \n    return (smallest_number, largest_number)\nend\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n\
    <code language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n\
    <code language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n\
    <code language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n\
    <code language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1,3,5,7,9])\n</", "    \n    closest_numbers = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        \n        if number < closest_numbers\n\
    \            closest_numbers = number\n        else\n            break\n     \
    \   end\n    end\n    \n    return closest_numbers, numbers[1]\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    closest_elements = Vector{Float64}(undef,\
    \ 0)\n    \n    closest_elements[1] = numbers[1]\n    closest_elements[2] = numbers[2]\n\
    \    \n    for index in 3:length(numbers)\n        \n        diff = numbers[index]\
    \ - closest_elements[1]\n        \n        if diff < closest_elements[2]\n   \
    \         closest_elements[1] = numbers[index]\n        elseif diff > closest_elements[2]\n\
    \            closest_elements[2] = numbers[index]\n        end\n    end\n    \n\
    \    return closest_elements\nend", "    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[2]\n    \n    smallest_index = 1\n    largest_index\
    \ = 2\n    \n    while smallest_index < length(numbers)\n        if numbers[smallest_index]\
    \ < smallest_number\n            smallest_number = numbers[smallest_index]\n \
    \           smallest_index = smallest_index + 1\n        elseif numbers[largest_index]\
    \ > largest_number\n            largest_number = numbers[largest_index]\n    \
    \        largest_index = largest_index + 1\n        else\n            smallest_index\
    \ = smallest_index + 1\n            largest_index = largest_index + 1\n      \
    \  end\n    end\n    \n    return (smallest_number, largest_number)\nend", " \
    \   \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n    \n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of numbers and\
    \ returns the sum of the squares of the numbers in the vector. \nThe function\
    \ should return nothing but should print a message to the screen if the vector\
    \ is empty or has only one element.", "    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[1]\n    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.2,\
    \ 2.3, 3.4, 4.5])\n</cell>\n<text>\nExercise 3\nWrite a function that takes in\
    \ a vector of numbers and returns the sum of the squares of the numbers in the\
    \ vector. \nThe function should only take in vectors of numbers and return a single\
    \ number.", "    \n    smallest_number = numbers[1]\n    largest_number = numbers[2]\n\
    \    \n    for i in 2:length(numbers)\n        if numbers[i] < smallest_number\n\
    \            smallest_number = numbers[i]\n        elseif numbers[i] > largest_number\n\
    \            largest_number = numbers[i]\n        end\n    end\n    \n    return\
    \ (smallest_number, largest_number)\nend\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1,2,3,4,5,6])\n</cell>\n<text>\nExercise\nWrite a function\
    \ that takes in a list of numbers and returns the average of all the numbers in\
    \ the list. \nWrite a function that takes in a list of numbers and returns the\
    \ median of all the numbers in the list. \nWrite a function that takes in a list\
    \ of numbers and returns the mode of all the numbers in the list. \nWrite a function\
    \ that takes in a list of numbers and returns the variance of all the numbers\
    \ in the list. \nWrite a function that takes in a list of numbers and returns\
    \ the standard deviation of all the numbers in the list. \nWrite a function that\
    \ takes in a list of numbers and returns the sum of all the numbers in the list.\
    \ \nWrite a function that takes in a list of numbers and returns the minimum of\
    \ all the numbers in the list. \nWrite a function that takes in a list of numbers\
    \ and returns the maximum of all the numbers in the list. \nWrite a function that\
    \ takes in a list of numbers and returns the number of numbers in the list that\
    \ are less than the number in the list. \nWrite a function that takes in a list\
    \ of numbers and returns the number of numbers in the list that are greater than\
    \ the number in the list. \nWrite a function that takes in a list of numbers and\
    \ returns the number of numbers in the list that are equal to the number in the\
    \ list. \nWrite a function that takes in a list of numbers and returns the number\
    \ of numbers in the list that are less than or equal to the number in the list.\
    \ \nWrite a function that takes in a list of numbers and returns the number of\
    \ numbers in the list that are greater than or equal to the number in the list.\
    \ \nWrite a function that takes in a list of numbers and returns the number of\
    \ numbers in the list that are evenly divisible by the number in the list. \n\
    Write a function that takes in a list of numbers and returns the number of numbers\
    \ in the list that are odd. \nWrite a function that takes in a list of numbers\
    \ and returns the number of numbers in the list that are divisible by 2 or 3.\
    \ \nWrite a function that takes in a list of numbers and returns the number of\
    \ numbers in the list that are divisible by 5 or 7. \nWrite a function that takes\
    \ in a list of numbers and returns the number of numbers in the list that are\
    \ divisible by both 2 and 5. \nWrite a function that takes in a list of numbers\
    \ and returns the number of numbers in the list that are divisible by both 2 and\
    \ 7. \nWrite a function that takes in a list of numbers and returns the number\
    \ of numbers in the list that are divisible by both 3 and 5. \nWrite a function\
    \ that takes in a list of numbers and returns the number of numbers in the list\
    \ that are divisible by both 3 and 7. \nWrite a function that ", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    closest_numbers = numbers[numbers\
    \ .< numbers[1]]\n    \n    closest_numbers[1] = numbers[1]\n    \n    closest_numbers[2]\
    \ = numbers[2]\n    \n    return closest_numbers\nend\n</cell>\n<code language=julia-1.4>",
  "    \n    closest_numbers = numbers[numbers .< numbers[end]]\n    closest_numbers\
    \ = numbers[numbers .> numbers[end]]\n    \n    closest_numbers = sort(closest_numbers)\n\
    \    \n    return closest_numbers[1], closest_numbers[2]\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    closest_numbers = numbers[numbers .< numbers[1]]\n    \n    if length(closest_numbers)\
    \ == 0\n        return (numbers[1], numbers[1])\n    end\n    \n    closest_numbers\
    \ = numbers[numbers .> numbers[1]]\n    \n    if length(closest_numbers) == 0\n\
    \        return (numbers[1], numbers[1])\n    end\n    \n    return (numbers[1],\
    \ numbers[2])\nend\n</cell>\n<code language=julia-1.3>", "    \n    closest_numbers\
    \ = numbers[numbers .< numbers[end]]\n    closest_numbers = numbers[numbers .>\
    \ numbers[end]]\n    \n    closest_numbers = sort(closest_numbers)\n    \n   \
    \ return closest_numbers[1], closest_numbers[2]\nend\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1.1, 2.2, 3.3, 4.4, 5.5])\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1.1, 2.2, 3.3, 4.4, 5.5, 6.6])\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9])\n</cell>\n\
    <text>\nExercise\nWrite a function called find_closest_elements that, given a\
    \ list of numbers, returns the two numbers that are closest to each other and\
    \ in order (smaller number, larger number).", "    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[1]\n    \n    for number in numbers[2:end]\n   \
    \     if number < smallest_number\n            smallest_number = number\n    \
    \    elseif number > largest_number\n            largest_number = number\n   \
    \     end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1, 2, 3, 4, 5])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes two numbers as inputs and returns\
    \ the sum of the squares of the two numbers.", "    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[end]\n    \n    smallest_index = 1\n    largest_index\
    \ = end\n    \n    while smallest_index <= largest_index\n        \n        smaller_number\
    \ = numbers[smallest_index]\n        larger_number = numbers[largest_index]\n\
    \        \n        if smaller_number < larger_number\n            smallest_index\
    \ += 1\n        elseif smaller_number > larger_number\n            largest_index\
    \ -= 1\n        else\n            return (smallest_number, larger_number)\n  \
    \      end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1.1, 2.2, 3.3, 4.4,\
    \ 5.5])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.1, 2.2,\
    \ 3.3, 4.4, 5.5, 6.6])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.1,\
    \ 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9])\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9, 10.0])\n</cell>\n\
    <code language=julia-1.5>\nfind_closest_elements([1.1, 2.2, 3.3, 4.4, 5.5, 6.6,\
    \ 7.7, 8.8, 9.9, 10.0, 11.1])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.1,\
    \ 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9, 10.0, 11.1, 12.2, 13.3, 14.4, 15.5,\
    \ 16.6, 17.7, 18.8, 19.9, 20.0])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.1,\
    \ 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9, 10.0, 11.1, 12.2, 13.3, 14.4, 15.5,\
    \ 16.6, 17.7, 18.8, 19.9, 20.0, 21.1])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.1,\
    \ 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9, 10.0, 11.1, 12.2, 13.3, 14.4, 15.5,\
    \ 16.6, 17.7, 18.8, 19.9, 20.0, 21.1, 22.2])\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9, 10.0, 11.1,\
    \ 12.2, 13.3, 14.4, 15.5, 16.6, 17.7, 18.8, 19.9, 20.0, 21.1, 22.2, 23.3])", " \
    \   \n    smallest_number = numbers[1]\n    largest_number = numbers[2]\n    \n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.4>\nfind_closest_elements([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.4>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n\
    <code language=julia-1.4>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.4>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n<code language=julia-1.4>\n\
    find_closest_elements([1,3,5,7,9])\n</cell>\n<code language=julia-1.4>\nfind_closest_elements([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.4>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n\
    <code language=julia-1.4>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.4>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n<code language=julia-1.4>\n\
    find_closest_elements([1,3,5,7,9])\n</cell>\n<code language=julia-1.4>\nfind_closest_elements([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.4>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n\
    <code language=julia-1.4>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.4>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n<code language=julia-1.4>\n\
    find_closest_elements([1,3,5,7,9])\n</cell>\n<code language=julia-1.4>\nfind_closest_elements([1,3,5,7,9])\n\
    </cell>\n<code language=julia-1.4>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n\
    <code language=julia-1.4>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n<code\
    \ language=julia-1.4>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n<code language=julia-1.4>\n\
    find_closest_elements([1,3,5,7,9])\n</cell>\n<code language=julia-1.4>\nfind_closest_elements([1,3,5,7,9])\n\
    </cell", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    smallest_number = numbers[1]\n    largest_number = numbers[2]\n    \n   \
    \ for number in numbers[2:end]\n        if number < smallest_number\n        \
    \    smallest_number = number\n        elseif number > largest_number\n      \
    \      largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46",
  "    \n    closest_numbers = numbers[1]\n    closest_numbers_2 = numbers[2]\n  \
    \  \n    if numbers[1] < numbers[2]\n        closest_numbers = numbers[1]\n  \
    \      closest_numbers_2 = numbers[2]\n    else\n        closest_numbers = numbers[2]\n\
    \        closest_numbers_2 = numbers[1]\n    end\n    \n    return (closest_numbers,\
    \ closest_numbers_2)\nend", "    \n    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[end]\n    \n    for number in numbers[2:end]\n        if number <\
    \ smallest_number\n            smallest_number = number\n        elseif number\
    \ > largest_number\n            largest_number = number\n        end\n    end\n\
    \    \n    return (smallest_number, largest_number)\nend\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\nExercise\nWrite\
    \ a function that takes two numbers and returns the sum of the squares of the\
    \ two numbers. Test it on $x$ and $y$ and $z$. Test it on $x$ and $y$ and $z$\
    \ and $w$. Test it on $x$ and $y$ and $z$ and $w$ and $x$ and $y$ and $z$ and\
    \ $w$. Test it on $x$ and $y$ and $z$ and $w$ and $x$ and $y$ and $z$ and $w$\
    \ and $x$ and $y$ and $z$ and $w$ and $x$ and $y$ and $z$ and $w$ and $x$ and\
    \ $y$ and $z$ and $w$ and $x$ and $y$ and $z$ and $w$ and $x$ and $y$ and $z$\
    \ and $w$ and $x$ and $y$ and $z$ and $w$ and $x$ and $y$ and $z$ and $w$ and\
    \ $x$ and $y$ and $z$ and $w$ and $x$ and $y$ and $z$ and $w$ and $x$ and $y$\
    \ and $z$ and $w$ and $x$ and $y$ and $z$ and $w$ and $x$ and $y$ and $z$ and\
    \ $w$ and $x$ and $y$ and $z$ and $w$ and $x$ and $y$ and $z$ and $w$ and $x$\
    \ and $y$ and $z$ and $w$ and $x$ and $y$ and $z$ and $w$ and $x$ and $y$ and\
    \ $z$ and $w$ and $x$ and $y$ and $z$ and $w$ and $x$", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[2]\n    \n    for number in numbers[3:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1.1, 2.1, 3.1, 4.1])\n\
    </cell>\n<text>\nExercise\nWrite a function that takes in a list of numbers and\
    \ returns the numbers that are closest to each other (smaller number, larger number).",
  "    \n    closest_numbers = numbers[numbers .< numbers[end]]\n    closest_numbers\
    \ = closest_numbers[closest_numbers .> numbers[end]]\n    closest_numbers = closest_numbers[closest_numbers\
    \ .< numbers[end]]\n    \n    return closest_numbers[1], closest_numbers[2]\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    closest_numbers = Vector{Float64}(undef,\
    \ 0)\n    closest_numbers_distance = Float64(0)\n    \n    for number in numbers\n\
    \        \n        distance = abs(number - numbers[1])\n        \n        if closest_numbers_distance\
    \ > distance\n            closest_numbers_distance = distance\n            closest_numbers\
    \ = [numbers[1], number]\n        else\n            closest_numbers = [number,\
    \ numbers[1]]\n        end\n    end\n    \n    return closest_numbers\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    closest_numbers = Vector{Float64}(undef,\
    \ 2)\n    \n    closest_numbers[1] = numbers[1]\n    closest_numbers[2] = numbers[2]\n\
    \    \n    for number in numbers[2:end]\n        \n        diff = closest_numbers[1]\
    \ - number\n        \n        if diff < closest_numbers[1]\n            closest_numbers[1]\
    \ = diff\n        elseif diff > closest_numbers[2]\n            closest_numbers[2]\
    \ = diff\n        end\n    end\n    \n    return closest_numbers\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    closest_numbers = numbers[1]\n    closest_numbers_2\
    \ = numbers[2]\n    \n    if numbers[1] < numbers[2]\n        closest_numbers\
    \ = numbers[1]\n        closest_numbers_2 = numbers[2]\n    end\n    \n    if\
    \ numbers[1] > numbers[2]\n        closest_numbers = numbers[1]\n        closest_numbers_2\
    \ = numbers[2]\n    end\n    \n    if numbers[1] == numbers[2]\n        closest_numbers\
    \ = numbers[1]\n        closest_numbers_2 = numbers[2]\n    end\n    \n    if\
    \ numbers[1] < numbers[2]\n        closest_numbers = numbers[1]\n        closest_numbers_2\
    \ = numbers[2]\n    end\n    \n    if numbers[1] > numbers[2]\n        closest_numbers\
    \ = numbers[1]\n        closest_numbers_2 = numbers[2]\n    end\n    \n    if\
    \ numbers[1] == numbers[2]\n        closest_numbers = numbers[1]\n        closest_numbers_2\
    \ = numbers[2]\n    end\n    \n    if numbers[1] < numbers[2]\n        closest_numbers\
    \ = numbers[1]\n        closest_numbers_2 = numbers[2]\n    end\n    \n    if\
    \ numbers[1] > numbers[2]\n        closest_numbers = numbers[1]\n        closest_numbers_2\
    \ = numbers[2]\n    end\n    \n    if numbers[1] == numbers[2]\n        closest_numbers\
    \ = numbers[1]\n        closest_numbers_2 = numbers[2]\n    end\n    \n    if\
    \ numbers[1] < numbers[2]\n        closest_numbers = numbers[1]\n        closest_numbers_2\
    \ = numbers[2]\n    end\n    \n    if numbers[1] > numbers[2]\n        closest_numbers\
    \ = numbers[1]\n        closest_numbers_2 = numbers[2]\n    end\n    \n    if\
    \ numbers[1] == numbers[2]\n        closest_numbers = numbers[1]\n        closest_numbers_2\
    \ = numbers[2]\n    end\n    \n    if numbers[1] < numbers[2]\n        closest_numbers\
    \ = numbers[1]\n        closest_numbers_2 = numbers[2]\n    end\n    \n    if\
    \ numbers[1] > numbers[2]\n        closest_numbers = numbers[1]\n        closest_numbers_2\
    \ = numbers[2]\n    end\n    \n    if numbers[1] == numbers[2]\n        closest_numbers\
    \ = numbers[1]\n        closest_numbers_2 = numbers[2]\n    end\n    \n    if\
    \ numbers[1] < numbers[2]\n        closest_numbers = numbers[1]\n        closest_numbers_2\
    \ = numbers[2]\n    end\n    \n    if numbers[1] > numbers[2]\n        closest_numbers\
    \ = numbers[1]\n        closest_numbers_2 = numbers[2]\n    end\n    \n    if\
    \ numbers[1] == numbers[2]\n        closest_numbers = numbers[1]\n        closest_numbers_2\
    \ = numbers[2]\n    end\n    \n    if numbers[1] < numbers[2]\n        closest_numbers\
    \ = numbers[1]\n        closest_numbers_2 = numbers[2]\n    end\n    ", "    \n\
    \    closest_numbers = Vector{Float64}(undef, 0)\n    closest_numbers_distance\
    \ = Float64(0)\n    \n    closest_numbers[1] = numbers[1]\n    closest_numbers_distance\
    \ = numbers[1]\n    \n    for number in numbers[2:end]\n        \n        distance\
    \ = abs(closest_numbers_distance - number)\n        \n        if distance < closest_numbers_distance\n\
    \            closest_numbers_distance = distance\n            closest_numbers\
    \ = closest_numbers\n        else\n            closest_numbers_distance = closest_numbers_distance\n\
    \            closest_numbers[1] = number\n        end\n    end\n    \n    return\
    \ closest_numbers\nend\n</cell>\n<code language=julia-1.5>", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[1]\n    \n    for number in numbers[2:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,5,3,7,9])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes in a list of numbers and returns\
    \ the number of times the number 3 appears in the list. \nHint: Use a for loop\
    \ and a counter.", "    \n    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[1]\n    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,5,2,4,6,3])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers in the list.", "    \n   \
    \ smallest_number = numbers[1]\n    largest_number = numbers[2]\n    \n    for\
    \ number in numbers[3:end]\n        if number < smallest_number\n            smallest_number\
    \ = number\n        elseif number > largest_number\n            largest_number\
    \ = number\n        end\n    end\n    \n    return (smallest_number, largest_number)\n\
    end", "    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for i in 2:length(numbers)\n        if numbers[i] < smallest_number\n\
    \            smallest_number = numbers[i]\n        elseif numbers[i] > largest_number\n\
    \            largest_number = numbers[i]\n        end\n    end\n    \n    return\
    \ (smallest_number, largest_number)\nend\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1,3,5,7,9])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.", "    \n    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[end]\n    \n    for number in numbers[2:end]\n        if number <\
    \ smallest_number\n            smallest_number = number\n        elseif number\
    \ > largest_number\n            largest_number = number\n        end\n    end\n\
    \    \n    return (smallest_number, largest_number)\nend\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of numbers and returns the sum of the squares\
    \ of the numbers in the vector. \nHint: use map() to apply the function elementwise.",
  "    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n   \
    \ \n    for number in numbers[2:end]\n        if number < smallest_number\n  \
    \          smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>", "    \n    closest_numbers\
    \ = Vector{Float64}(undef, 2)\n    \n    closest_numbers[1] = numbers[1]\n   \
    \ closest_numbers[2] = numbers[2]\n    \n    for number in numbers[2:end]\n  \
    \      \n        if number < closest_numbers[1]\n            closest_numbers[1]\
    \ = number\n        elseif number > closest_numbers[2]\n            closest_numbers[2]\
    \ = number\n        end\n    end\n    \n    return closest_numbers\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    closest_numbers = numbers[numbers .< numbers[1]]\n\
    \    \n    closest_numbers[1] = numbers[1]\n    \n    closest_numbers[2] = numbers[2]\n\
    \    \n    return closest_numbers\nend", "    \n    closest_numbers = numbers[1]\n\
    \    closest_numbers = numbers[1]\n    \n    for number in numbers[2:end]\n  \
    \      if number < closest_numbers\n            closest_numbers = number\n   \
    \     elseif number > closest_numbers\n            closest_numbers = number\n\
    \        end\n    end\n    \n    return closest_numbers, closest_numbers\nend\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes in a list of numbers\
    \ and returns the mean of the numbers. If the list is empty return NaN.", "  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    closest_numbers\
    \ = numbers[1]\n    closest_numbers_index = 2\n    \n    for number in numbers[2:end]\n\
    \        if abs(number - closest_numbers) < abs(closest_numbers - number)\n  \
    \          closest_numbers = number\n            closest_numbers_index = closest_numbers_index\
    \ + 1\n        end\n    end\n    \n    return (numbers[1], numbers[closest_numbers_index])\n\
    end\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.2, 2.3, 3.4,\
    \ 4.5])\n</cell>\n<text>\nExercise: Write a function that takes a list of numbers\
    \ and returns the index of the number that is closest to each of the numbers in\
    \ the list.", "    \n    closest_numbers = numbers[numbers .< numbers[end]]\n\
    \    \n    return closest_numbers[1], closest_numbers[2]\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes in a list of numbers and returns the sum of the\
    \ squares of the numbers in that list. \nHint: Use map() to apply the function\
    \ elementwise.", "    \n    smallest_number = numbers[1]\n    largest_number =\
    \ numbers[end]\n    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.1,\
    \ 2.2, 3.3, 4.4, 5.5])\n</cell>\n<text>\nExercise\nWrite a function called find_closest_elements\
    \ that, given a list of numbers, returns the two numbers that are closest to each\
    \ other in order (smaller number, larger number).", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[end]\n    \n    for number in numbers[2:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1.2, 2.3, 3.4, 4.5])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in a list of numbers\
    \ and returns the mean of the numbers in the list.", "    \n    closest_numbers\
    \ = numbers[1]\n    \n    for number in numbers[2:end]\n        \n        if number\
    \ < closest_numbers\n            closest_numbers = number\n        else\n    \
    \        break\n        end\n    end\n    \n    return closest_numbers, closest_numbers\n\
    end", "    \n    closest_numbers = numbers[1]\n    closest_numbers_2 = numbers[2]\n\
    \    \n    for number in numbers[2:end]\n        if number < closest_numbers_2\n\
    \            closest_numbers_2 = number\n        elseif number > closest_numbers_2\n\
    \            closest_numbers = number\n        end\n    end\n    \n    return\
    \ closest_numbers, closest_numbers_2\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    closest_numbers = numbers[numbers .< numbers[1]]\n    closest_numbers[1]\
    \ = numbers[1]\n    closest_numbers[2] = numbers[2]\n    \n    return closest_numbers\n\
    end", "    \n    smallest_number = numbers[1]\n    largest_number = numbers[2]\n\
    \    \n    smallest_number = numbers[1]\n    largest_number = numbers[2]\n   \
    \ \n    smallest_number = numbers[1]\n    largest_number = numbers[2]\n    \n\
    \    smallest_number = numbers[1]\n    largest_number = numbers[2]\n    \n   \
    \ smallest_number = numbers[1]\n    largest_number = numbers[2]\n    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[2]\n    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[2]\n    \n    smallest_number = numbers[1]\n   \
    \ largest_number = numbers[2]\n    \n    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[2]\n    \n    smallest_number = numbers[1]\n    largest_number = numbers[2]\n\
    \    \n    smallest_number = numbers[1]\n    largest_number = numbers[2]\n   \
    \ \n    smallest_number = numbers[1]\n    largest_number = numbers[2]\n    \n\
    \    smallest_number = numbers[1]\n    largest_number = numbers[2]\n    \n   \
    \ smallest_number = numbers[1]\n    largest_number = numbers[2]\n    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[2]\n    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[2]\n    \n    smallest_number = numbers[1]\n   \
    \ largest_number = numbers[2]\n    \n    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[2]\n    \n    smallest_number = numbers[1]\n    largest_number = numbers[2]\n\
    \    \n    smallest_number = numbers[1]\n    largest_number = numbers[2]\n   \
    \ \n    smallest_number = numbers[1]\n    largest_number = numbers[2]\n    \n\
    \    smallest_number = numbers[1]\n    largest_number = numbers[2]\n    \n   \
    \ smallest_number = numbers[1]\n    largest_number = numbers[2]\n    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[2]\n    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[2]\n    \n    smallest_number = numbers[1]\n   \
    \ largest_number = numbers[2]\n    \n    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[2]\n    \n    smallest_number = numbers[1]\n    largest_number = numbers[2]\n\
    \    \n    smallest_number = numbers[1]\n    largest_number = numbers[2]\n   \
    \ \n    smallest_number = numbers[1]\n    largest_number = numbers[2]\n    \n\
    \    smallest_number = numbers[1]\n    largest_number = numbers[2]\n    \n   \
    \ smallest_number = numbers[1]\n    largest_number = numbers[2]\n", "    \n  \
    \  smallest_number = numbers[1]\n    largest_number = numbers[2]\n    \n    for\
    \ number in numbers[3:end]\n        if number < smallest_number\n            smallest_number\
    \ = number\n        elseif number > largest_number\n            largest_number\
    \ = number\n        end\n    end\n    \n    return (smallest_number, largest_number)\n\
    end", "    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend", "    \n    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[end]\n    \n    for number in numbers[2:end]\n        if number <\
    \ smallest_number\n            smallest_number = number\n        elseif number\
    \ > largest_number\n            largest_number = number\n        end\n    end\n\
    \    \n    return (smallest_number, largest_number)\nend\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1.1, 2.2, 3.3, 4.4, 5.5])\n</cell>\n<text>\nExercise\n\
    Write a function that takes in a list of numbers and returns the two numbers that\
    \ are closest to each other. Test it by calling it on the list [2.1, 2.2, 2.3,\
    \ 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9,\
    \ 4.0, 4.1, 4.2, 4.3, 4.4, 4.5, 4.6, 4.7, 4.8, 4.9, 5.0, 5.1, 5.2, 5.3, 5.4, 5.5,\
    \ 5.6, 5.7, 5.8, 5.9, 6.0, 6.1, 6.2, 6.3, 6.4, 6.5, 6.6, 6.7, 6.8, 6.9, 7.0, 7.1,\
    \ 7.2, 7.3, 7.4, 7.5, 7.6, 7.7, 7.8, 7.9, 8.0, 8.1, 8.2, 8.3, 8.4, 8.5, 8.6, 8.7,\
    \ 8.8, 8.9, 9.0, 9.1, 9.2, 9.3, 9.4, 9.5, 9.6, 9.7, 9.8, 9.9, 10.0, 10.1, 10.2,\
    \ 10.3, 10.4, 10.5, 10.6, 10.7, 10.8, 10.9, 11.0, 11.1, 11.2, 11.3, 11.4, 11.5,\
    \ 11.6, 11.7, 11.8, 11.9, 12.0, 12.1, 12.2, 12.3, 12.4, 12.5, 12.6, 12.7, 12.8,\
    \ 12.9, 13.0, 13.1, 13.2, 13.3, 13.4, 13.5, 13.6, 13.7, 13.8, 13.9, 14.0, 14.1,\
    \ 14.2, 14.3, 14.4, 14.5, 14.6, 14.7, 14.8, 14.9, 15.0, 15.1, 15.2, 15.3, 15.4,\
    \ 15.5, 15.6, 15.7, 15.8, 15.9, 16.0, 16.1, 16.2, 16.3, 16.4, 16.5, 16.6, 16.7,\
    \ 16.8, 16.9, 17.0, 17.1, 17.2, 17.3, 17.4, 17.5, 17.6, 17.7, 17.8, 17.9, 18.0,\
    \ 18.1, 18.2, 18.3, 18.4, 18.5, 18.6, 18.7, 18.8, 18.9, 19.0, 19.1, 19.2, 19.3,\
    \ 19.4, 19.5, 19.6, 19.7, 19.8, 19.9, 20.0, 20.1, 20.2, 20.3, 20.4, 20.5, 20.6,\
    \ 20.7, 20.8, 20.9, 21.0, 22.0, 22.1, 22.", "    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[end]\n    \n    for number in numbers[2:end]\n \
    \       if number < smallest_number\n            smallest_number = number\n  \
    \      elseif number > largest_number\n            largest_number = number\n \
    \       end\n    end\n    \n    return (smallest_number, largest_number)\nend",
  "    \n    closest_elements = numbers[1]\n    \n    for element in numbers[2:end]\n\
    \        if element < closest_elements\n            closest_elements = element\n\
    \        else\n            break\n        end\n    end\n    \n    return closest_elements,\
    \ closest_elements\nend", "    \n    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[1]\n    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of numbers and\
    \ returns the sum of the squares of the numbers in that vector. \nThe function\
    \ should work for vectors of any length.", "    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[end]\n    \n    for number in numbers[2:end]\n \
    \       if number < smallest_number\n            smallest_number = number\n  \
    \      elseif number > largest_number\n            largest_number = number\n \
    \       end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6])\n</cell>\n\
    <text>\nExercise\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. Test it on some vectors.",
  "    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n    \n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6])\n\
    </cell>\n<text>\nExercise: Write a function that takes in a list of numbers and\
    \ returns the sum of the squares of the numbers in the list. Make sure to handle\
    \ empty lists gracefully.", "    \n    smallest = numbers[1]\n    largest = numbers[1]\n\
    \    \n    for n in numbers[2:end]\n        if n < smallest\n            smallest\
    \ = n\n        elseif n > largest\n            largest = n\n        end\n    end\n\
    \    \n    return (smallest, largest)\nend\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1, 2, 3, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the first element of a vector that is greater than a given value.",
  "    \n    closest_elements = Vector{Float64}(undef, 2)\n    \n    closest_elements[1]\
    \ = numbers[1]\n    closest_elements[2] = numbers[2]\n    \n    for n in numbers[2:end]\n\
    \        \n        diff = closest_elements[1] - n\n        if diff < closest_elements[1]\n\
    \            closest_elements[1] = n\n        elseif diff > closest_elements[2]\n\
    \            closest_elements[2] = n\n        end\n    end\n    \n    return closest_elements\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[2]\n    \n    for number in numbers[3:end]\n   \
    \     if number < smallest_number\n            smallest_number = number\n    \
    \    elseif number > largest_number\n            largest_number = number\n   \
    \     end\n    end\n    \n    return (smallest_number, largest_number)\nend",
  "    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n   \
    \ \n    for number in numbers[2:end]\n        if number < smallest_number\n  \
    \          smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers in the list. \nThe function\
    \ should only take in numbers that are greater than 0.", "    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[2]\n    \n    smallest_index = find_index(numbers,\
    \ smallest_number)\n    largest_index = find_index(numbers, largest_number)\n\
    \    \n    return (numbers[smallest_index], numbers[largest_index])\nend", " \
    \   \n    closest_numbers = numbers[1]\n    \n    for number in numbers[2:end]\n\
    \        if number < closest_numbers\n            closest_numbers = number\n \
    \       else\n            break\n        end\n    end\n    \n    return closest_numbers,\
    \ closest_numbers\nend\n</cell>\n<code language=julia-1.5>", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[end]\n    \n    for number in numbers[2:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a list of numbers\
    \ and return the sum of the squares of the numbers in the list. \nThe function\
    \ should take a list of numbers of any length.\nThe function should return a single\
    \ number.", "    \n    closest_number = numbers[1]\n    closest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < closest_number\n\
    \            closest_number = number\n        elseif number > closest_number\n\
    \            closest_number = number\n        end\n    end\n    \n    return closest_number,\
    \ closest_number\nend\n</cell>\n<code language=julia-1.5>", "    \n    smallest\
    \ = numbers[1]\n    largest = numbers[1]\n    for number in numbers[2:end]\n \
    \       if number < smallest\n            smallest = number\n        elseif number\
    \ > largest\n            largest = number\n        end\n    end\n    return (smallest,\
    \ largest)\nend", "    \n    closest_elements = numbers[1]\n    closest_elements_index\
    \ = 2\n    \n    for index in 2:length(numbers)\n        if numbers[index] < closest_elements\n\
    \            closest_elements = numbers[index]\n            closest_elements_index\
    \ = index\n        else\n            break\n        end\n    end\n    \n    return\
    \ closest_elements, closest_elements_index\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    closest_numbers = numbers[numbers .< numbers[1]]\n    closest_numbers\
    \ = closest_numbers[closest_numbers .> numbers[end]]\n    \n    return closest_numbers[1],\
    \ closest_numbers[end]\nend\n</cell>\n<code language=julia-1.5>", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[1]\n    \n    for number in numbers[2:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[end]\n    \n    for number in numbers[2:end]\n \
    \       if number < smallest_number\n            smallest_number = number\n  \
    \      elseif number > largest_number\n            largest_number = number\n \
    \       end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1.2, 2.3, 3.4, 4.5])\n\
    </cell>\n<text>\nExercise\nWrite a function that takes in a vector of numbers\
    \ and returns the index of the two numbers that are closest to each other. Test\
    \ your function with some test cases.", "    \n    smallest = numbers[1]\n   \
    \ largest = numbers[1]\n    \n    for number in numbers[2:end]\n        if number\
    \ < smallest\n            smallest = number\n        elseif number > largest\n\
    \            largest = number\n        end\n    end\n    \n    return (smallest,\
    \ largest)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,3,5,7,9])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in a vector of numbers\
    \ and returns the sum of the squares of the numbers in the vector.", "    \n \
    \   smallest_number = numbers[1]\n    largest_number = numbers[end]\n    \n  \
    \  for number in numbers[2:end]\n        if number < smallest_number\n       \
    \     smallest_number = number\n        elseif number > largest_number\n     \
    \       largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6])\n\
    </cell>\n<text>\nExercise\nWrite a function that takes in a list of numbers and\
    \ returns the average of all the numbers in the list. \nWrite a function that\
    \ takes in a list of numbers and returns the average of all the numbers in the\
    \ list that are greater than the average of the numbers in the list. \nWrite a\
    \ function that takes in a list of numbers and returns the average of all the\
    \ numbers in the list that are less than the average of the numbers in the list.\
    \ \nWrite a function that takes in a list of numbers and returns the average of\
    \ all the numbers in the list that are greater than the average of the numbers\
    \ in the list that are less than the average of the numbers in the list. \nWrite\
    \ a function that takes in a list of numbers and returns the average of all the\
    \ numbers in the list that are greater than the average of the numbers in the\
    \ list that are less than the average of the numbers in the list that are greater\
    \ than the average of the numbers in the list. ", "    \n    closest_numbers =\
    \ Vector{Float64}(undef, 2)\n    closest_numbers[1] = numbers[1]\n    closest_numbers[2]\
    \ = numbers[2]\n    \n    for n in numbers[2:end]\n        if abs(closest_numbers[1]\
    \ - n) < abs(closest_numbers[2] - n)\n            closest_numbers[1] = n\n   \
    \     else\n            closest_numbers[2] = n\n        end\n    end\n    \n \
    \   return closest_numbers\nend\n</cell>\n<code language=julia-1.5>", "    \n\
    \    smallest_number = numbers[1]\n    largest_number = numbers[2]\n    \n   \
    \ for number in numbers[3:end]\n        if number < smallest_number\n        \
    \    smallest_number = number\n        elseif number > largest_number\n      \
    \      largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise\nWrite a function that takes in a list of numbers and\
    \ returns the average of the two numbers that are closest to each other.", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    closest_numbers\
    \ = numbers[1]\n    closest_numbers_index = numbers[1]\n    \n    for number in\
    \ numbers[2:end]\n        \n        if number < closest_numbers\n            closest_numbers\
    \ = number\n            closest_numbers_index = number\n        end\n    end\n\
    \    \n    return closest_numbers, closest_numbers_index\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    closest_elements = numbers[1]\n    closest_elements_index\
    \ = 2\n    \n    for index in 3:length(numbers)\n        if numbers[index] < closest_elements[closest_elements_index]\n\
    \            closest_elements_index = index\n            closest_elements = numbers[index]\n\
    \        end\n    end\n    \n    return closest_elements, closest_elements_index\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[2]\n    \n    smallest_index = 2\n    largest_index\
    \ = 1\n    \n    while smallest_index < length(numbers)\n        if numbers[smallest_index]\
    \ < smallest_number\n            smallest_number = numbers[smallest_index]\n \
    \           smallest_index = smallest_index + 1\n        elseif numbers[smallest_index]\
    \ > smallest_number\n            largest_number = numbers[smallest_index]\n  \
    \          largest_index = smallest_index + 1\n        else\n            break\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,4,5,7,9,11])\n</cell>\n\
    <code language=julia-1.5>\nfind_closest_elements([1,4,5,7,9,11])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_closest_elements([1,4,5,7,9,11])\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1,4,5,7,9,11])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,4,5,7,9,11])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,4,5,7,9,11])\n</cell>\n\
    <code language=julia-1.5>\nfind_closest_elements([1,4,5,7,9,11])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_closest_elements([1,4,5,7,9,11])\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1,4,5,7,9,11])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,4,5,7,9,11])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,4,5,7,9,11])\n</cell>\n\
    <code language=julia-1.5>\nfind_closest_elements([1,4,5,7,9,11])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_closest_elements([1,4,5,7,9,11])\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1,4,5,7,9,11])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,4,5,7,9,11])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,4,5,7,9,11])\n</cell>\n\
    <code language=julia-1.5>\nfind_closest_elements([1,4,5,7,9,11])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_closest_elements([1,4,5,", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[2]\n    \n    for i in 2:length(numbers)\n\
    \        if numbers[i] < smallest_number\n            smallest_number = numbers[i]\n\
    \        end\n        if numbers[i] > largest_number\n            largest_number\
    \ = numbers[i]\n        end\n    end\n    \n    return (smallest_number, largest_number)\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    closest_numbers = numbers[1]\n    closest_numbers_2\
    \ = numbers[2]\n    \n    closest_numbers_diff = abs(closest_numbers - closest_numbers_2)\n\
    \    \n    if closest_numbers_diff < closest_numbers[1]\n        closest_numbers\
    \ = closest_numbers_2\n    end\n    \n    if closest_numbers_diff < closest_numbers[2]\n\
    \        closest_numbers = closest_numbers_2\n    end\n    \n    return closest_numbers\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    closest_numbers = Vector{Float64}(undef,\
    \ 0)\n    closest_numbers_distance = Float64(0)\n    \n    for number in numbers\n\
    \        \n        distance = abs(number - numbers[1])\n        \n        if distance\
    \ < closest_numbers_distance\n            closest_numbers_distance = distance\n\
    \            closest_numbers = [numbers[1], number]\n        elseif distance ==\
    \ closest_numbers_distance\n            closest_numbers = [number, numbers[1]]\n\
    \        end\n    end\n    \n    return closest_numbers\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    smallest = numbers[1]\n    largest = numbers[1]\n    \n    for n in numbers[2:end]\n\
    \        if n < smallest\n            smallest = n\n        elseif n > largest\n\
    \            largest = n\n        end\n    end\n    \n    return (smallest, largest)\n\
    end\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of numbers and\
    \ returns the sum of the squares of the numbers in that vector. Test it on some\
    \ vectors.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n  \
    \  \n    for number in numbers[2:end]\n        if number < smallest_number\n \
    \           smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,",
  "    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n   \
    \ \n    for number in numbers[2:end]\n        if number < smallest_number\n  \
    \          smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in a list of numbers\
    \ and returns the average of all the numbers in the list.\nHint: Use a for loop\
    \ to iterate through the list.", "    \n    smallest_number = numbers[1]\n   \
    \ largest_number = numbers[end]\n    \n    for number in numbers[2:end]\n    \
    \    if number < smallest_number\n            smallest_number = number\n     \
    \   elseif number > largest_number\n            largest_number = number\n    \
    \    end\n    end\n    \n    return (smallest_number, largest_number)\nend\n</cell>\n\
    <code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9])\n</cell>\n\
    <text>\nExercise\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in ", "    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[1]\n    \n    for number in numbers[2:end]\n   \
    \     if number < smallest_number\n            smallest_number = number\n    \
    \    elseif number > largest_number\n            largest_number = number\n   \
    \     end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[end]\n    \n    for number in numbers[2:end]\n \
    \       if number < smallest_number\n            smallest_number = number\n  \
    \      elseif number > largest_number\n            largest_number = number\n \
    \       end\n    end\n    \n    return (smallest_number, largest_number)\nend",
  "    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n   \
    \ \n    for i in 2:length(numbers)\n        if numbers[i] < smallest_number\n\
    \            smallest_number = numbers[i]\n        end\n        if numbers[i]\
    \ > largest_number\n            largest_number = numbers[i]\n        end\n   \
    \ end\n    \n    return (smallest_number, largest_number)\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    closest_numbers = numbers[1]\n    closest_numbers_2\
    \ = numbers[2]\n    \n    for number in numbers[2:end]\n        if number < closest_numbers_2\n\
    \            closest_numbers_2 = number\n        elseif number > closest_numbers_2\n\
    \            closest_numbers = number\n        end\n    end\n    \n    return\
    \ closest_numbers, closest_numbers_2\nend", "    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[end]\n    \n    for number in numbers[2:end]\n \
    \       if number < smallest_number\n            smallest_number = number\n  \
    \      elseif number > largest_number\n            largest_number = number\n \
    \       end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes in a list of numbers and returns\
    \ the sum of the squares of the numbers in the list.", "    \n    closest_numbers\
    \ = numbers[2:end]\n    closest_numbers[1] = numbers[1]\n    closest_numbers[2]\
    \ = numbers[2]\n    \n    return closest_numbers\nend", "    \n    closest_number\
    \ = numbers[1]\n    closest_distance = numbers[1]\n    \n    for number in numbers[2:end]\n\
    \        distance = abs(closest_number - number)\n        if distance < closest_distance\n\
    \            closest_number = number\n            closest_distance = distance\n\
    \        end\n    end\n    \n    return (closest_number, closest_distance)\nend\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1, 2, 3, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nfind_closest_elements([1, 2, 3, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_closest_elements([1, 2, 3, 5])\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1, 2, 3, 5])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,\
    \ 2, 3, 5])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1, 2,\
    \ 3, 5])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1, 2, 3,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1, 2, 3, 5])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1, 2, 3, 5])\n</cell>\n\
    <code language=julia-1.5>\nfind_closest_elements([1, 2, 3, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_closest_elements([1, 2, 3, 5])\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1, 2, 3, 5])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,\
    \ 2, 3, 5])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1, 2,\
    \ 3, 5])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1, 2, 3,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1, 2, 3, 5])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1, 2, 3, 5])\n</cell>\n\
    <code language=julia-1.5>\nfind_closest_elements([1, 2, 3, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_closest_elements([1, 2, 3, 5])\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1, 2, 3, 5])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,\
    \ 2, 3, 5])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1, 2,\
    \ 3, 5])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1, 2, 3,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1, 2, 3, 5])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1, 2, 3, 5])", "  \
    \  \n    closest_numbers = numbers[1]\n    closest_numbers_2 = numbers[2]\n  \
    \  \n    \n    for number in numbers[3:end]\n        \n        if number < closest_numbers_2\n\
    \            closest_numbers_2 = number\n        elseif number > closest_numbers_2\n\
    \            closest_numbers = number\n        end\n    end\n    \n    return\
    \ closest_numbers, closest_numbers_2\nend", "    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[2]\n    \n    for number in numbers[3:end]\n   \
    \     if number < smallest_number\n            smallest_number = number\n    \
    \    elseif number > largest_number\n            largest_number = number\n   \
    \     end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,4,5,6,7,8,9])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes in a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[2]\n    \n    for number in numbers[3:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a list of numbers and returns\
    \ the sum of the squares of the numbers in that list.", "    \n    closest_numbers\
    \ = numbers[numbers .< numbers[1]]\n    \n    closest_numbers[1] = numbers[1]\n\
    \    \n    closest_numbers[2] = numbers[2]\n    \n    return closest_numbers\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    closest_numbers = numbers[1]\n    closest_numbers_index\
    \ = 2\n    \n    for index in 2:length(numbers)\n        if numbers[index] < closest_numbers[closest_numbers_index]\n\
    \            closest_numbers_index = index\n            closest_numbers = numbers[index]\n\
    \        end\n    end\n    \n    return closest_numbers, closest_numbers_index\n\
    end\n</cell>\n<code language=julia-1.5>\nnumbers = [1.1, 2.1, 3.1, 4.1, 5.1, 6.1,\
    \ 7.1, 8.1, 9.1, 10.1, 11.1, 12.1, 13.1, 14.1, 15.1, 16.1, 17.1, 18.1, 19.1, 20.1,\
    \ 21.1, 22.1, 23.1, 24.1, 25.1, 26.1, 27.1, 28.1, 29.1, 30.1, 31.1, 32.1, 33.1,\
    \ 34.1, 35.1, 36.1, 37.1, 38.1, 39.1, 40.1, 41.1, 42.1, 43.1, 44.1, 45.1, 46.1,\
    \ 47.1, 48.1, 49.1, 50.1, 51.1, 52.1, 53.1, 54.1, 55.1, 56.1, 57.1, 58.1, 59.1,\
    \ 60.1, 61.1, 62.1, 63.1, 64.1, 65.1, 66.1, 67.1, 68.1, 69.1, 70.1, 71.1, 72.1,\
    \ 73.1, 74.1, 75.1, 76.1, 77.1, 78.1, 79.1, 80.1, 81.1, 82.1, 83.1, 84.1, 85.1,\
    \ 86.1, 87.1, 88.1, 89.1, 90.1, 91.1, 92.1, 93.1, 94.1, 95.1, 96.1, 97.1, 98.1,\
    \ 99.1, 100.1, 101.1, 102.1, 103.1, 104.1, 105.1, 106.1, 107.1, 108.1, 109.1,\
    \ 110.1, 111.1, 112.1, 113.1, 114.1, 115.1, 116.1, 117.1, 118.1, 119.1, 120.1,\
    \ 121.1, 122.1, 123.1, 124.1, 125.1, 126.1, 127.1, 128.1, 129.1, 130.1, 131.1,\
    \ 132.1, 133.1, 134.1, 135.1, 136.1, 137.1, 138.1, 139.1, 140.1, 141.1, 142.1,\
    \ 143.1, 144.1, 145.1, 146.1, 147.1, 148.1, 149.1, 150.1, 151.1, 152.1, 153.1,\
    \ 154.1, 155.1, 156.1, 157.1, 158.1, 159.1, 160.1, 161.1, 162.1, 163.1, 16", " \
    \   \n    closest_numbers = numbers[1]\n    \n    for number in numbers[2:end]\n\
    \        if number < closest_numbers\n            closest_numbers = number\n \
    \       else\n            break\n        end\n    end\n    \n    return closest_numbers,\
    \ numbers[1]\nend\n</cell>\n<code language=julia-1.5>", "    \n    closest_numbers\
    \ = numbers[numbers .< numbers[end]]\n    closest_numbers = closest_numbers[closest_numbers\
    \ .> numbers[end]]\n    \n    closest_numbers = sort(closest_numbers)\n    \n\
    \    return closest_numbers[1], closest_numbers[2]\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    smallest_number = numbers[1]\n    largest_number = numbers[2]\n    \n\
    \    for number in numbers[3:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,4,5,7,9])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of elements\
    \ in a vector that are greater than a given number. For example, if the vector\
    \ is [1,2,3,4,5,6,7,8,9] and the number is 3, the function should return 5.",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[end]\n    \n    for number in numbers[2:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,",
  "    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n    \n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,4,6,8,10])\n\
    </cell>\n<text>\nExercise\nWrite a function that takes in a list of numbers and\
    \ returns the sum of the squares of the numbers in the list.", "    \n    closest_numbers\
    \ = numbers[1]\n    closest_numbers_2 = numbers[2]\n    \n    if numbers[1] <\
    \ numbers[2]\n        closest_numbers = numbers[1]\n        closest_numbers_2\
    \ = numbers[2]\n    else\n        closest_numbers = numbers[2]\n        closest_numbers_2\
    \ = numbers[1]\n    end\n    \n    return (closest_numbers, closest_numbers_2)\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[end]\n    \n    for number in numbers[2:end]\n        if number <\
    \ smallest_number\n            smallest_number = number\n        elseif number\
    \ > largest_number\n            largest_number = number\n        end\n    end\n\
    \    \n    return (smallest_number, largest_number)\nend\n</cell>\n<code language=julia-1.3>\n\
    find_closest_elements([1, 2, 3, 4, 5])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector. \nUse this function to find the sum of the squares of the numbers\
    \ in the vector $[1,2,3,4,5]$. \nUse this function to find the sum of the squares\
    \ of the numbers in the vector $[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]$.\
    \ \nUse this function to find the sum of the squares of the numbers in the vector\
    \ $[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]$.\
    \ \nUse this function to find the sum of the squares of the numbers in the vector\
    \ $[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]$.\
    \ \nUse this function to find the sum of the squares of the numbers in the vector\
    \ $[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,8",
  "    \n    smallest_number = numbers[1]\n    largest_number = numbers[2]\n    \n\
    \    for number in numbers[3:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.4>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of numbers and\
    \ returns the sum of the squares of the numbers in the vector.", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[1]\n    \n    for number in numbers[2:end]\n   \
    \     if number < smallest_number\n            smallest_number = number\n    \
    \    elseif number > largest_number\n            largest_number = number\n   \
    \     end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in a vector of numbers\
    \ and returns the sum of the squares of the numbers in that vector. \nHint: use\
    \ the sum function.", "    \n    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[2]\n    \n    for number in numbers[3:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise\nWrite a function that takes in a list of numbers and\
    \ returns the index of the two numbers that are closest to each other.", "   \
    \ \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n    \n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a list of numbers and\
    \ returns the number of elements in the list that are greater than the mean of\
    \ the list.", "    \n    smallest_number = numbers[1]\n    largest_number = numbers[2]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise: Write a function that takes a list of numbers and returns\
    \ the average of those numbers. If the list is empty return 0.", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[2]\n    \n    for number in numbers[3:end]\n   \
    \     if number < smallest_number\n            smallest_number = number\n    \
    \    elseif number > largest_number\n            largest_number = number\n   \
    \     end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[end]\n    \n    for number in numbers[2:end]\n        if number <\
    \ smallest_number\n            smallest_number = number\n        elseif number\
    \ > largest_number\n            largest_number = number\n        end\n    end\n\
    \    \n    return (smallest_number, largest_number)\nend\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1.1, 2.2, 3.3, 4.4, 5.5])\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a vector of numbers and returns the sum of the squares\
    \ of the numbers in the vector.", "    \n    closest_numbers = numbers[numbers\
    \ .< numbers[end]]\n    closest_numbers = closest_numbers[closest_numbers .> numbers[end]]\n\
    \    \n    closest_numbers = sort(closest_numbers)\n    \n    return closest_numbers[1],\
    \ closest_numbers[2]\nend\n</cell>\n<code language=julia-1.5>", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[2]\n    \n    for number in numbers[3:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,5,7,9,11])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nThe function should\
    \ take an input vector of numbers and return an output vector of numbers.", " \
    \   \n    smallest_number = numbers[1]\n    largest_number = numbers[2]\n    \n\
    \    for number in numbers[3:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[end]\n    \n    smallest_index =\
    \ 1\n    largest_index = end\n    \n    while smallest_index < end && largest_index\
    \ > 1\n        if numbers[smallest_index] < numbers[largest_index]\n         \
    \   largest_number = numbers[largest_index]\n            largest_index = largest_index\
    \ - 1\n        else\n            smallest_number = numbers[smallest_index]\n \
    \           smallest_index = smallest_index + 1\n        end\n    end\n    \n\
    \    return smallest_number, largest_number\nend\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of numbers and returns the sum of the squares\
    \ of the numbers in that vector. Test it on some vectors.", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[end]\n    \n    for number in numbers[2:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.4>", "    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[1]\n    \n    for number in numbers[2:end]\n   \
    \     if number < smallest_number\n            smallest_number = number\n    \
    \    elseif number > largest_number\n            largest_number = number\n   \
    \     end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1.1, 2.2, 3.3, 4.4,\
    \ 5.5])\n</cell>\n<text>\nExercise 3\nWrite a function that takes in a vector\
    \ of numbers and returns the sum of the squares of the numbers in the vector.\
    \ \nHint: use the function you wrote in exercise 2", "    \n    closest_numbers\
    \ = numbers[1]\n    closest_numbers_2 = numbers[2]\n    \n    if numbers[1] <\
    \ numbers[2]\n        closest_numbers = numbers[1]\n        closest_numbers_2\
    \ = numbers[2]\n    end\n    \n    if numbers[1] > numbers[2]\n        closest_numbers\
    \ = numbers[1]\n        closest_numbers_2 = numbers[2]\n    end\n    \n    if\
    \ numbers[1] == numbers[2]\n        closest_numbers = numbers[1]\n        closest_numbers_2\
    \ = numbers[1]\n    end\n    \n    if numbers[1] < numbers[1]\n        closest_numbers\
    \ = numbers[1]\n        closest_numbers_2 = numbers[1]\n    end\n    \n    if\
    \ numbers[1] > numbers[1]\n        closest_numbers = numbers[1]\n        closest_numbers_2\
    \ = numbers[1]\n    end\n    \n    if numbers[1] == numbers[1]\n        closest_numbers\
    \ = numbers[1]\n        closest_numbers_2 = numbers[1]\n    end\n    \n    if\
    \ numbers[1] < numbers[1]\n        closest_numbers = numbers[1]\n        closest_numbers_2\
    \ = numbers[1]\n    end\n    \n    if numbers[1] > numbers[1]\n        closest_numbers\
    \ = numbers[1]\n        closest_numbers_2 = numbers[1]\n    end\n    \n    if\
    \ numbers[1] == numbers[1]\n        closest_numbers = numbers[1]\n        closest_numbers_2\
    \ = numbers[1]\n    end\n    \n    if numbers[1] < numbers[1]\n        closest_numbers\
    \ = numbers[1]\n        closest_numbers_2 = numbers[1]\n    end\n    \n    if\
    \ numbers[1] > numbers[1]\n        closest_numbers = numbers[1]\n        closest_numbers_2\
    \ = numbers[1]\n    end\n    \n    if numbers[1] == numbers[1]\n        closest_numbers\
    \ = numbers[1]\n        closest_numbers_2 = numbers[1]\n    end\n    \n    if\
    \ numbers[1] < numbers[1]\n        closest_numbers = numbers[1]\n        closest_numbers_2\
    \ = numbers[1]\n    end\n    \n    if numbers[1] > numbers[1]\n        closest_numbers\
    \ = numbers[1]\n        closest_numbers_2 = numbers[1]\n    end\n    \n    if\
    \ numbers[1] == numbers[1]\n        closest_numbers = numbers[1]\n        closest_numbers_2\
    \ = numbers[1]\n    end\n    \n    if numbers[1] < numbers[1]\n        closest_numbers\
    \ = numbers[1]\n        closest_numbers_2 = numbers[1]\n    end\n    \n    if\
    \ numbers[1] > numbers[1]\n        closest_numbers = numbers[1]\n        closest_numbers_2\
    \ = numbers[1]\n    end\n    \n    if numbers[1] == numbers[1]\n        closest_numbers\
    \ = numbers[1]\n        closest_numbers_2 = numbers[1]\n    end\n    \n    if\
    \ numbers[1] < numbers[1]\n        closest_numbers = numbers[1]\n        closest_numbers_2\
    \ = numbers[1]\n    end\n    ", "    \n    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[2]\n    \n    for i in 1:length(numbers)\n        if numbers[i] <\
    \ smallest_number\n            smallest_number = numbers[i]\n        end\n   \
    \     if numbers[i] > largest_number\n            largest_number = numbers[i]\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>\n# Test our function\nfind_closest_elements([1.1,\
    \ 2.2, 3.3, 4.4, 5.5])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a list of numbers and returns the number of elements in the list that are greater\
    \ than or equal to each other.", "    \n    smallest = numbers[1]\n    largest\
    \ = numbers[1]\n    \n    for n in numbers[2:end]\n        if n < smallest\n \
    \           smallest = n\n        elseif n > largest\n            largest = n\n\
    \        end\n    end\n    \n    return (smallest, largest)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfind_closest_elements([1.1, 2.2, 3.3, 4.4, 5.5])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes in a list of numbers and returns\
    \ the average of all the numbers in the list. \nHint: use the function you wrote\
    \ in the previous exercise.", "    \n    smallest = numbers[1]\n    largest =\
    \ numbers[1]\n    \n    for n in numbers[2:end]\n        if n < smallest\n   \
    \         smallest = n\n        elseif n > largest\n            largest = n\n\
    \        end\n    end\n    \n    return (smallest, largest)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfind_closest_elements([1.1, 2.2, 3.3, 4.4, 5.5])\n</cell>\n\
    <text>\nExercise\nWrite a function called find_closest_elements that, given a\
    \ list of numbers (of length at least two) select and return two that are the\
    \ closest to each other and return them in order (smaller number, larger number).",
  "    \n    closest_numbers = numbers[numbers .< numbers[end]]\n    closest_numbers\
    \ = closest_numbers[closest_numbers .> numbers[end]]\n    closest_numbers = closest_numbers[closest_numbers\
    \ .< numbers[end]]\n    \n    closest_numbers = numbers[numbers .> numbers[end]]\n\
    \    closest_numbers = closest_numbers[closest_numbers .> numbers[end]]\n    closest_numbers\
    \ = closest_numbers[closest_numbers .< numbers[end]]\n    \n    closest_numbers\
    \ = numbers[numbers .< numbers[end]]\n    closest_numbers = closest_numbers[closest_numbers\
    \ .> numbers[end]]\n    closest_numbers = closest_numbers[closest_numbers .< numbers[end]]\n\
    \    \n    closest_numbers = numbers[numbers .> numbers[end]]\n    closest_numbers\
    \ = closest_numbers[closest_numbers .> numbers[end]]\n    closest_numbers = closest_numbers[closest_numbers\
    \ .< numbers[end]]\n    \n    closest_numbers = numbers[numbers .< numbers[end]]\n\
    \    closest_numbers = closest_numbers[closest_numbers .> numbers[end]]\n    closest_numbers\
    \ = closest_numbers[closest_numbers .< numbers[end]]\n    \n    closest_numbers\
    \ = numbers[numbers .> numbers[end]]\n    closest_numbers = closest_numbers[closest_numbers\
    \ .> numbers[end]]\n    closest_numbers = closest_numbers[closest_numbers .< numbers[end]]\n\
    \    \n    closest_numbers = numbers[numbers .< numbers[end]]\n    closest_numbers\
    \ = closest_numbers[closest_numbers .> numbers[end]]\n    closest_numbers = closest_numbers[closest_numbers\
    \ .< numbers[end]]\n    \n    closest_numbers = numbers[numbers .> numbers[end]]\n\
    \    closest_numbers = closest_numbers[closest_numbers .> numbers[end]]\n    closest_numbers\
    \ = closest_numbers[closest_numbers .< numbers[end]]\n    \n    closest_numbers\
    \ = numbers[numbers .< numbers[end]]\n    closest_numbers = closest_numbers[closest_numbers\
    \ .> numbers[end]]\n    closest_numbers = closest_numbers[closest_numbers .< numbers[end]]\n\
    \    \n    closest_numbers = numbers[numbers .> numbers[end]]\n    closest_numbers\
    \ = closest_numbers[closest_numbers .> numbers[end]]\n    closest_numbers = closest_numbers[closest_numbers\
    \ .< numbers[end]]\n    \n    closest_numbers = numbers[numbers .< numbers[end]]\n\
    \    closest_numbers = closest_numbers[closest_numbers .> numbers[end]]\n", " \
    \   \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n    \n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1, 2, 3,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1, 2, 3, 5])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1, 2, 3, 5])\n</cell>\n\
    <code language=julia-1.5>\nfind_closest_elements([1, 2, 3, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_closest_elements([1, 2, 3, 5])\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1, 2, 3, 5])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,\
    \ 2, 3, 5])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1, 2,\
    \ 3, 5])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1, 2, 3,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1, 2, 3, 5])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1, 2, 3, 5])\n</cell>\n\
    <code language=julia-1.5>\nfind_closest_elements([1, 2, 3, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_closest_elements([1, 2, 3, 5])\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1, 2, 3, 5])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,\
    \ 2, 3, 5])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1, 2,\
    \ 3, 5])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1, 2, 3,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1, 2, 3, 5])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1, 2, 3, 5])\n</cell>\n\
    <code language=julia-1.5>\nfind_closest_elements([1, 2, 3, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_closest_elements([1, 2, 3, 5])\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1, 2, 3, 5])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,\
    \ 2, 3, 5])\n</cell>\n<code language=julia-1.5>\nfind_closest_", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[2]\n    \n    for number in numbers[3:end]\n   \
    \     if number < smallest_number\n            smallest_number = number\n    \
    \    elseif number > largest_number\n            largest_number = number\n   \
    \     end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers in the list. \nHint: Use map()",
  "    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n    \n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.1,\
    \ 2.2, 3.3, 4.4, 5.5])\n</cell>\n<text>\nExercise 3\nWrite a function that will\
    \ find the closest element in a vector to a supplied number. \n    \n    For example,\
    \ if the vector is [2.1, 3.2, 4.3, 5.4, 6.5] and the supplied number is 2.5, \n\
    \    then the function should return 4.3\n    \n    Your function should take\
    \ one argument, an array of numbers. \n    \n    Your function should return a\
    \ Float64\n    \n    Your function should return nothing but should print a message\
    \ to the screen to let you know if it worked correctly\n    \n    Your function\
    \ should use find_closest_elements to find the closest element in the vector to\
    \ the supplied number\n    \n    Your function should return nothing but should\
    \ print a message to the screen to let you know if it worked correctly\n    \n\
    \    Your function should return nothing but should print a message to the screen\
    \ to let you know if it worked correctly\n    \n    Your function should return\
    \ nothing but should print a message to the screen to let you know if it worked\
    \ correctly\n    \n    Your function should return nothing but should print a\
    \ message to the screen to let you know if it worked correctly\n    \n    Your\
    \ function should return nothing but should print a message to the screen to let\
    \ you know if it worked correctly\n    \n    Your function should return nothing\
    \ but should print a message to the screen to let you know if it worked correctly\n\
    \    \n    Your function should return nothing but should print a message to the\
    \ screen to let you know if it worked correctly\n    \n    Your function should\
    \ return nothing but should print a message to the screen to let you know if it\
    \ worked correctly\n    \n    Your function should return nothing but should print\
    \ a message to the screen to let you know if it worked correctly\n    \n    Your\
    \ function should return nothing but should print a message to the screen to let\
    \ you know if it worked correctly\n    \n    Your function should return nothing\
    \ but should print a message to the screen to let you know if it worked correctly\n\
    \    \n    Your function should return nothing but should print a message to the\
    \ screen to let you know if it worked correctly\n    \n    Your function should\
    \ return nothing but should print a message to the screen to let you ", "    \n\
    \    smallest_number = numbers[1]\n    largest_number = numbers[2]\n    \n   \
    \ for number in numbers[3:end]\n        if number < smallest_number\n        \
    \    smallest_number = number\n        elseif number > largest_number\n      \
    \      largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers in that list.\nHint: You can\
    \ use the sum function.", "    \n    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[1]\n    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.2,\
    \ 2.3, 3.4, 4.5])\n</cell>\n<text>\nExercise 2\nWrite a function that takes in\
    \ a list of numbers and returns the number of elements that are greater than the\
    \ average of the list.", "    \n    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[end]\n    \n    smallest_index = find(numbers .< smallest_number)\n\
    \    largest_index = find(numbers .> largest_number)\n    \n    smallest_number\
    \ = numbers[smallest_index]\n    largest_number = numbers[largest_index]\n   \
    \ \n    return (smallest_number, largest_number)\nend\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1.1, 2.1, 3.1, 4.1])\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector of numbers and returns the sum of the squares\
    \ of the numbers in the vector. \n    \n    For example, if the vector is [1,2,3]\
    \ the function should return 9\n    \n    Your function should work for vectors\
    \ of any length.\n    \n    Your function should work for vectors of any type.\
    \ \n    \n    Your function should work for vectors of any length.\n    \n   \
    \ Your function should work for vectors of any type.\n    \n    Your function\
    \ should work for vectors of any length.\n    \n    Your function should work\
    \ for vectors of any type.\n    \n    Your function should work for vectors of\
    \ any length.\n    \n    Your function should work for vectors of any type.\n\
    \    \n    Your function should work for vectors of any length.\n    \n    Your\
    \ function should work for vectors of any type.\n    \n    Your function should\
    \ work for vectors of any length.\n    \n    Your function should work for vectors\
    \ of any type.\n    \n    Your function should work for vectors of any length.\n\
    \    \n    Your function should work for vectors of any type.\n    \n    Your\
    \ function should work for vectors of any length.\n    \n    Your function should\
    \ work for vectors of any type.\n    \n    Your function should work for vectors\
    \ of any length.\n    \n    Your function should work for vectors of any type.\n\
    \    \n    Your function should work for vectors of any length.\n    \n    Your\
    \ function should work for vectors of any type.\n    \n    Your function should\
    \ work for vectors of any length.\n    \n    Your function should work for vectors\
    \ of any type.\n    \n    Your function should work for vectors of any length.\n\
    \    \n    Your function should work for vectors of any type.\n    \n    Your\
    \ function should work for vectors of any length.\n    \n    Your function should\
    \ work for vectors of any type.\n    \n    Your function should work for vectors\
    \ of any length.\n    \n    Your function should work for vectors of any type.\n\
    \    \n    Your function should work for vectors of any length.\n    \n    Your\
    \ function should work for vectors of any type.\n    \n    Your function should\
    \ work for vector", "    \n    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[2]\n    \n    for i in 1:length(numbers)\n        if numbers[i] <\
    \ smallest_number\n            smallest_number = numbers[i]\n        end\n   \
    \     if numbers[i] > largest_number\n            largest_number = numbers[i]\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    closest_numbers = numbers[1]\n\
    \    closest_numbers_2 = numbers[2]\n    \n    for number in numbers[3:end]\n\
    \        if number < closest_numbers_2\n            closest_numbers_2 = number\n\
    \        elseif number > closest_numbers_2\n            closest_numbers = number\n\
    \        end\n    end\n    \n    return closest_numbers, closest_numbers_2\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[2]\n    \n    for number in numbers[2:end]\n   \
    \     if number < smallest_number\n            smallest_number = number\n    \
    \    elseif number > largest_number\n            largest_number = number\n   \
    \     end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes two numbers as inputs and returns\
    \ the sum of the squares of the two numbers. \nThe function should only take two\
    \ numbers as inputs and return one number.", "    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[end]\n    \n    for i in 2:length(numbers)\n   \
    \     if numbers[i] < smallest_number\n            smallest_number = numbers[i]\n\
    \        elseif numbers[i] > largest_number\n            largest_number = numbers[i]\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,5,6,8,9,10])\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes in a list of numbers and returns\
    \ the average of all the numbers in the list. \nHint: use the function you wrote\
    \ in the last exercise.", "    \n    closest_elements = numbers[1]\n    closest_elements_2\
    \ = numbers[2]\n    \n    for element in numbers[2:end]\n        if element <\
    \ closest_elements\n            closest_elements = element\n        elseif element\
    \ > closest_elements_2\n            closest_elements_2 = element\n        end\n\
    \    end\n    \n    return closest_elements, closest_elements_2\nend\n</cell>\n\
    <code language=julia-1.5>\nfind_closest_elements([1.1, 2.2, 3.3, 4.4, 5.5])\n\
    </cell>\n<text>\nExercise: Write a function that takes in a list of numbers and\
    \ returns the mean of the numbers in that list. \nHint: Use a for loop to iterate\
    \ through the list and calculate the mean of the numbers in the list.", "    \n\
    \    smallest_number = numbers[1]\n    largest_number = numbers[end]\n    \n \
    \   for number in numbers[2:end]\n        if number < smallest_number\n      \
    \      smallest_number = number\n        elseif number > largest_number\n    \
    \        largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6])\n\
    </cell>\n<text>\nExercise\nWrite a function that takes a list of numbers and returns\
    \ the average of the numbers in the list. \nWrite a function that takes a list\
    \ of numbers and returns the average of the numbers in the list but ignores any\
    \ numbers that are less than zero.\nWrite a function that takes a list of numbers\
    \ and returns the average of the numbers in the list but ignores any numbers that\
    \ are greater than 100.\nWrite a function that takes a list of numbers and returns\
    \ the average of the numbers in the list but ignores any numbers that are less\
    \ than zero or greater than 100.", "    \n    smallest_number = numbers[1]\n \
    \   largest_number = numbers[1]\n    \n    for number in numbers[2:end]\n    \
    \    if number < smallest_number\n            smallest_number = number\n     \
    \   elseif number > largest_number\n            largest_number = number\n    \
    \    end\n    end\n    \n    return (smallest_number, largest_number)\nend\n</cell>\n\
    <code language=julia-1.5>\nfind_closest_elements([1.1, 2.2, 3.3, 4.4, 5.5])\n\
    </cell>\n<text>\nExercise\nWrite a function that takes a list of numbers and returns\
    \ the elements that are closest to each other (smaller number, larger number).",
  "    \n    closest_numbers = numbers[1]\n    \n    for number in numbers[2:end]\n\
    \        \n        if number < closest_numbers\n            closest_numbers =\
    \ number\n        else\n            break\n        end\n    end\n    \n    return\
    \ closest_numbers, closest_numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1.1, 2.1, 3.1, 4.1, 5.1])\n</cell>\n<text>\nExercise 4\n\
    Write a function that takes a vector of numbers and returns the sum of the squares\
    \ of the numbers in that vector.", "    \n    smallest_number = numbers[1]\n \
    \   largest_number = numbers[2]\n    \n    for number in numbers[2:end]\n    \
    \    if number < smallest_number\n            smallest_number = number\n     \
    \   elseif number > largest_number\n            largest_number = number\n    \
    \    end\n    end\n    \n    return (smallest_number, largest_number)\nend\n</cell>\n\
    <code language=julia-1.5>\nfind_closest_elements([1.2, 2.3, 3.4, 4.5])\n</cell>\n\
    <text>\nExercise\nWrite a function that takes a list of numbers and returns the\
    \ mean of the numbers in that list. Test it on a list of numbers that you generated\
    \ in the previous exercise.", "    \n    closest_numbers = Vector{Float64}(undef,\
    \ 0)\n    closest_numbers_distance = Float64(0)\n    \n    for number in numbers\n\
    \        \n        distance = abs(number - numbers[1])\n        \n        if closest_numbers_distance\
    \ > distance\n            closest_numbers_distance = distance\n            closest_numbers\
    \ = [numbers[1], number]\n        elseif closest_numbers_distance == distance\n\
    \            closest_numbers = [number, numbers[1]]\n        end\n    end\n  \
    \  \n    return closest_numbers\nend", "    \n    closest_elements = Vector{Float64}(undef,\
    \ 0)\n    \n    closest_elements[1] = numbers[1]\n    closest_elements[2] = numbers[2]\n\
    \    \n    for i = 2:length(numbers)\n        \n        if numbers[i] > closest_elements[1]\n\
    \            closest_elements[1] = numbers[i]\n        end\n        \n       \
    \ if numbers[i] < closest_elements[2]\n            closest_elements[2] = numbers[i]\n\
    \        end\n    end\n    \n    return closest_elements\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[end]\n    \n    for number in numbers[2:end]\n        if number <\
    \ smallest_number\n            smallest_number = number\n        elseif number\
    \ > largest_number\n            largest_number = number\n        end\n    end\n\
    \    \n    return (smallest_number, largest_number)\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    smallest = numbers[1]\n    largest = numbers[1]\n    \n    for n in numbers[2:end]\n\
    \        if n < smallest\n            smallest = n\n        elseif n > largest\n\
    \            largest = n\n        end\n    end\n    \n    return (smallest, largest)\n\
    end\n</cell>\n<code language=julia-1.4>\nfind_closest_elements([1,2,3,4,5])\n\
    </cell>\n<text>\nExercise\nWrite a function that takes in a list of numbers and\
    \ returns the sum of the squares of the numbers in the list.", "    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    smallest_number = numbers[1]\n\
    \    largest_number = numbers[1]\n    \n    for number in numbers[2:end]\n   \
    \     if number < smallest_number\n            smallest_number = number\n    \
    \    elseif number > largest_number\n            largest_number = number\n   \
    \     end\n    end\n    \n    return (smallest_number, largest_number)\nend",
  "    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n   \
    \ \n    smallest_index = find(numbers .< smallest_number)\n    largest_index =\
    \ find(numbers .> largest_number)\n    \n    smallest_number = numbers[smallest_index]\n\
    \    largest_number = numbers[largest_index]\n    \n    return (smallest_number,\
    \ largest_number)\nend", "    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6])\n\
    </cell>\n<text>\nExercise\nWrite a function that takes a vector of numbers and\
    \ returns the sum of the squares of the numbers in that vector. Test it on some\
    \ vectors.", "    \n    closest_numbers = numbers[numbers .< numbers[1]]\n   \
    \ \n    closest_numbers[1] = numbers[1]\n    \n    closest_numbers[2] = numbers[2]\n\
    \    \n    return closest_numbers\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    closest_elements\
    \ = Vector{Float64}(undef, 2)\n    \n    closest_elements[1] = numbers[1]\n  \
    \  closest_elements[2] = numbers[2]\n    \n    for n in numbers[3:end]\n     \
    \   \n        if abs(closest_elements[1] - n) < abs(closest_elements[2] - n)\n\
    \            closest_elements[1] = n\n        else\n            closest_elements[2]\
    \ = n\n        end\n        \n    end\n    \n    return closest_elements\nend",
  "    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n   \
    \ \n    for number in numbers[2:end]\n        if number < smallest_number\n  \
    \          smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a list of numbers and\
    \ returns the sum of the squares of the numbers in the list.", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[1]\n    \n    for number in numbers[2:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1, 2, 3, 4, 5])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes two numbers as inputs and returns\
    \ the sum of the squares of the two numbers. Test it on $x^2 + y^2 = z^2$ for\
    \ $x=1, y=2, z=3$.", "    \n    smallest_number = numbers[1]\n    largest_number\
    \ = numbers[2]\n    \n    smallest_index = 2\n    largest_index = 1\n    \n  \
    \  while smallest_index < length(numbers)\n        if numbers[smallest_index]\
    \ < smallest_number\n            smallest_number = numbers[smallest_index]\n \
    \           smallest_index = smallest_index + 1\n        elseif numbers[largest_index]\
    \ > largest_number\n            largest_number = numbers[largest_index]\n    \
    \        largest_index = largest_index + 1\n        else\n            break\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    closest_numbers = Vector{Float64}(undef,\
    \ 2)\n    closest_numbers[1] = numbers[1]\n    closest_numbers[2] = numbers[2]\n\
    \    \n    for n in numbers[2:end]\n        if abs(n - closest_numbers[1]) < abs(n\
    \ - closest_numbers[2])\n            closest_numbers[1] = n\n        else\n  \
    \          closest_numbers[2] = n\n        end\n    end\n    \n    return closest_numbers\n\
    end", "    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    smallest_index = 1\n    largest_index = end\n    \n    while smallest_index\
    \ < largest_index\n        \n        smaller_number = numbers[smallest_index]\n\
    \        larger_number = numbers[largest_index]\n        \n        if smaller_number\
    \ < larger_number\n            smallest_index += 1\n        elseif smaller_number\
    \ > larger_number\n            largest_index -= 1\n        else\n            smallest_index\
    \ += 1\n            largest_index += 1\n        end\n    end\n    \n    return\
    \ (smallest_number, largest_number)\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n   \
    \ \n    smallest_index = 1\n    largest_index = end\n    \n    while smallest_index\
    \ <= largest_index\n        \n        smallest_number = numbers[smallest_index]\n\
    \        largest_number = numbers[largest_index]\n        \n        if smallest_number\
    \ < largest_number\n            \n            smallest_index += 1\n          \
    \  \n        elseif smallest_number > largest_number\n            \n         \
    \   largest_index -= 1\n            \n        else\n            \n           \
    \ return smallest_number, largest_number\n            \n        end\n        \n\
    \    end\n    \n    return smallest_number, largest_number\nend", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[end]\n    \n    for number in numbers[2:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10,11])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12,13])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,",
  "    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n   \
    \ \n    for number in numbers[2:end]\n        if number < smallest_number\n  \
    \          smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[end]\n    \n    for number in numbers[2:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>\n@time find_closest_elements(numbers)\n</cell>\n\
    <text>\nExercise: Write a function that takes in a list of numbers and returns\
    \ the sum of the squares of the numbers in the list. Test it on a small list of\
    \ numbers and compare it to the built in sum function.", "    \n    closest_numbers\
    \ = numbers[numbers .< numbers[end]]\n    \n    closest_numbers = sort(closest_numbers)\n\
    \    \n    return closest_numbers[1], closest_numbers[2]\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    closest_number = numbers[1]\n    closest_distance\
    \ = numbers[1]\n    \n    for number in numbers[2:end]\n        distance = abs(number\
    \ - closest_number)\n        if distance < closest_distance\n            closest_number\
    \ = number\n            closest_distance = distance\n        end\n    end\n  \
    \  \n    return (closest_number, closest_distance)\nend\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements(numbers)\n</cell>\n<text>\nExercise: Write a function that\
    \ takes in a list of numbers and returns the list with the numbers that have the\
    \ smallest absolute difference between them. For example, if the input was [4,\
    \ 2, 6, 1, 3], the output would be [4, 2, 3]. Hint: Use find_closest_elements\
    \ to find the two numbers that are closest to each other.", "    \n    smallest_number\
    \ = numbers[1]\n    largest_number = numbers[2]\n    \n    for number in numbers[3:end]\n\
    \        if number < smallest_number\n            smallest_number = number\n \
    \       elseif number > largest_number\n            largest_number = number\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<code language=julia-1.5>\nfind_closest_elements([1.1, 2.2, 3.3, 4.4,\
    \ 5.5])\n</cell>\n<text>\nExercise\nWrite a function that takes a list of numbers\
    \ and returns the list with the smallest and largest number in it (without modifying\
    \ the original list).", "    \n    smallest = numbers[1]\n    largest = numbers[1]\n\
    \    \n    for n in numbers[2:end]\n        if n < smallest\n            smallest\
    \ = n\n        elseif n > largest\n            largest = n\n        end\n    end\n\
    \    \n    return (smallest, largest)\nend\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1,4,5,7,9])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes in a list of numbers and returns the number of elements that are\
    \ greater than the average of the list.", "    \n    closest_numbers = Vector{Float64}(undef,\
    \ 0)\n    closest_numbers_distance = Float64(0)\n    \n    for number in numbers\n\
    \        \n        distance = abs(number - numbers[1])\n        \n        if closest_numbers_distance\
    \ == 0 || distance < closest_numbers_distance\n            closest_numbers_distance\
    \ = distance\n            closest_numbers = [number]\n        else\n         \
    \   closest_numbers_distance = closest_numbers_distance\n            closest_numbers\
    \ = [number, closest_numbers[1]]\n        end\n    end\n    \n    return closest_numbers\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    closest_numbers = numbers[numbers\
    \ .< numbers[1]]\n    \n    if length(closest_numbers) < 2\n        return numbers[1],\
    \ numbers[1]\n    end\n    \n    closest_numbers = numbers[numbers .> numbers[1]]\n\
    \    \n    if length(closest_numbers) < 2\n        return numbers[1], numbers[1]\n\
    \    end\n    \n    return closest_numbers[1], closest_numbers[2]\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    closest_numbers = Vector{Float64}(undef,\
    \ 0)\n    closest_numbers_distance = Float64(0)\n    \n    for number in numbers\n\
    \        \n        distance = abs(number - numbers[1])\n        \n        if closest_numbers_distance\
    \ > distance\n            closest_numbers_distance = distance\n            closest_numbers\
    \ = [numbers[1], number]\n        elseif closest_numbers_distance == distance\n\
    \            closest_numbers = [number, numbers[1]]\n        end\n    end\n  \
    \  \n    return closest_numbers\nend\n</cell>\n<code language=julia-1.5>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
