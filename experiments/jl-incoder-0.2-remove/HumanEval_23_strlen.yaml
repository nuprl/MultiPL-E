name: HumanEval_23_strlen
language: jl
prompt: "\"\"\" Return length of given string\n            \"\"\"\nfunction strlen(string::String)::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\"\
  ) == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
  end\n"
completions: ["    local len::Int64 = 0\n    for char in string\n        len = len\
    \ + 1\n    end\n    return len\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"\
    Hello World\")\n</cell>\n<text>\nExercise\nWrite a function that returns the number\
    \ of characters in a string that are not spaces.", "    Int64(string.len())\n\
    end", "    Int64(string.length)\nend", "    local len::Int64 = 0\n    for char\
    \ in string\n        len = len + 1\n    end\n    return len\nend", "    local\
    \ len::Int64 = 0\n    for char in string\n        len = len + 1\n    end\n   \
    \ return len\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"hello\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns true if the given string has\
    \ at least two vowels in it.", "    local len = 0\n    for char in string\n  \
    \      len = len + 1\n    end\n    return len\nend\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"Hello\")\n</cell>\n<code language=julia-1.3>", "    local len::Int64\
    \ = 0\n    for char in string\n        len = len + 1\n    end\n    return len\n\
    end\n</cell>\n<code language=julia-1.5>", "    local len = string.len()\n    return\
    \ len\nend\n</cell>\n<code language=julia-1.4>", "    local len::Int64 = 0\n \
    \   for char in string:gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"", "    local len::Int64 = 0\n  \
    \  for char in string:gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"", "    local i\n    local len = 0\n\
    \    for i = 1, #string do\n        len = len + 1\n    end\n    return len\nend\n\
    </cell>\n<code language=julia-1.5>\nstrlen(\"hello\")\n</cell>\n<text>\nStrings\
    \ are immutable in Julia", "    local length = 0\n    for char in string:gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):", "    string::String\n    Int64(0)\nend\n</cell>\n<code language=julia-1.4>\n\
    strlen(string = \"Hello\")\n</cell>\n<code language=julia-1.4>\nstrlen(string\
    \ = \"Hello\", start = 1, stop = 10)\n</cell>\n<code language=julia-1.4>\nstrlen(string\
    \ = \"Hello\", start = 1, stop = 10, step = 2)\n</cell>\n<code language=julia-1.4>\n\
    strlen(string = \"Hello\", start = 1, stop = 10, step = 2, pad = false)\n</cell>\n\
    <code language=julia-1.4>\nstrlen(string = \"Hello\", start = 1, stop = 10, step\
    \ = 2, pad = true)\n</cell>\n<code language=julia-1.4>\nstrlen(string = \"Hello\"\
    , start = 1, stop = 10, step = 2, pad = true, fill = \"0\")\n</cell>\n<code language=julia-1.4>\n\
    strlen(string = \"Hello\", start = 1, stop = 10, step = 2, pad = true, fill =\
    \ \"0\")\n</cell>\n<code language=julia-1.4>\nstrlen(string = \"Hello\", start\
    \ = 1, stop = 10, step = 2, pad = true, fill = \"0\")\n</cell>\n<code language=julia-1.4>\n\
    strlen(string = \"Hello\", start = 1, stop = 10, step = 2, pad = true, fill =\
    \ \"0\")\n</cell>\n<code language=julia-1.4>\nstrlen(string = \"Hello\", start\
    \ = 1, stop = 10, step = 2, pad = true, fill = \"0\")\n</cell>\n<code language=julia-1.4>\n\
    strlen(string = \"Hello\", start = 1, stop = 10, step = 2, pad = true, fill =\
    \ \"0\")\n</cell>\n<code language=julia-1.4>\nstrlen(string = \"Hello\", start\
    \ = 1, stop = 10, step = 2, pad = true, fill = \"0\")\n</cell>\n<code language=julia-1.4>\n\
    strlen(string = \"Hello\", start = 1, stop = 10, step = 2, pad = true, fill =\
    \ \"0\")\n</cell>\n<code language=julia-1.4>\nstrlen(string = \"Hello\", start\
    \ = 1, stop = 10, step = 2, pad = true, fill = \"0\")\n</cell>\n<code language=julia-1.4>\n\
    strlen(string = \"Hello\", start = 1, stop = 10, step = 2, pad = true, fill =\
    \ \"0\")\n</cell>\n<code language=julia-1.4>\nstrlen(string = \"Hello\", start\
    \ = 1, stop = 10, step = 2, pad = true, fill = \"0\")\n</cell>\n<code language=julia-1.4>\n\
    strlen(string = \"Hello\", start = 1, stop = 10, step = 2, pad = true, fill =\
    \ \"0\")\n</cell>\n<code language=julia-1.4>\nstrlen(string = \"Hello\", start\
    \ = 1, stop = 10, step = 2, pad = true, fill = \"0\")\n</cell>\n<code language=julia-1.4>\n",
  "    local len = #string\n    return len\nend", "    local len::Int64 = 0\n    for\
    \ char in string:gmatch(\"[%z\\1-\\127\\255-\\327\\331-\\377]\"):gmatch(\"%z\"\
    ):gmatch(\"%1\"):gmatch(\"%1\"):gmatch(\"%1\"):gmatch(\"%1\"):gmatch(\"%1\"):gmatch(\"\
    %1\"):gmatch(\"%1\"):gmatch(\"%1\"):gmatch(\"%1\"):gmatch(\"%1\"):gmatch(\"%1\"\
    ):gmatch(\"%1\"):gmatch(\"%1\"):gmatch(\"%1\"):gmatch(\"%1\"):gmatch(\"%1\"):gmatch(\"\
    %1\"):gmatch(\"%1\"):gmatch(\"%1\"):gmatch(\"%1\"):gmatch(\"%1\"):gmatch(\"%1\"\
    ):gmatch(\"%1\"):gmatch(\"%1\"):gmatch(\"%1\"):gmatch(\"%1\"):gmatch(\"%1\"):gmatch(\"\
    %1\"):gmatch(\"%1\"):gmatch(\"%1\"):gmatch(\"%1\"):gmatch(\"%1\"):gmatch(\"%1\"\
    ):gmatch(\"%1\"):gmatch(\"%1\"):gmatch(\"%1\"):gmatch(\"%1\"):gmatch(\"%1\"):gmatch(\"\
    %1\"):gmatch(\"%1\"):gmatch(\"%1\"):gmatch(\"%1\"):gmatch(\"%1\"):gmatch(\"%1\"\
    ):gmatch(\"%1\"):gmatch(\"%1\"):gmatch(\"%1\"):gmatch(\"%1\"):gmatch(\"%1\"):gmatch(\"\
    %1\"):gmatch(\"%1\"):gmatch(\"%1\"):gmatch(\"%1\"):gmatch(\"%1\"):gmatch(\"%1\"\
    ):gmatch(\"%1\"):gmatch(\"%1\"):gmatch(\"%1\"):gmatch(\"%1\"):gmatch(\"%1\"):gmatch(\"\
    %1\"):gmatch(\"%1\"):gmatch(\"%1\"):gmatch(\"%1\"):gmatch(\"%1\"):gmatch(\"%1\"\
    ):gmatch(\"%1\"):gmatch(\"%1\"):gmatch(\"%1\"):gmatch(\"%1\"):gmatch(\"%1\"):gmatch(\"\
    %1\"):gmatch(\"%1\"):gmatch(\"%1\"):gmatch(\"%1\"):gmatch(\"%1\"):gmatch(\"%1\"\
    ):gmatch(\"%1\"):gmatch(\"%1", "    Int64(string.len())\nend", "    local len::Int64\
    \ = 0\n    for char in string do \n        len = len + 1\n    end\n    return\
    \ len\nend\n</cell>\n<code language=julia-1.5>", "    local len::Int64 = 0\n \
    \   for char in string:gmatch(\"[%z\\1-\\127\\255-\\327\\375-\\377]\") do\n  \
    \      len = len + 1\n    end\n    return len\nend\n</cell>\n<code language=julia-1.5>",
  "    str = string\n    return length(str)\nend", "    local len::Int64 = 0\n   \
    \ for char in string\n        len = len + 1\n    end\n    return len\nend\n</cell>\n\
    <code language=julia-1.5>", "    local _len = #string\n    return _len\nend",
  "    Int64(string.len())\nend\n</cell>\n<code language=julia-1.5>\nstrlen(\"hello\"\
    )\n</cell>\n<text>\nStrings are immutable", "    local length = 0\n    for char\
    \ in string:gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):", "    local len::Int64 = 0\n    for char\
    \ in string:gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"", "    local length = 0\n    for char in string:gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):", "    local length = 0\n    for char in string:gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):", "    local len::Int64 = 0\n    for char in string\n        len = len\
    \ + 1\n    end\n    return len\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"\
    Hello\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as\
    \ input and returns the number of characters in the string. \nWrite a function\
    \ that takes a string as input and returns the number of words in the string.\
    \ \nWrite a function that takes a string as input and returns the number of sentences\
    \ in the string. \nWrite a function that takes a string as input and returns the\
    \ number of characters in the string that are not spaces. \nWrite a function that\
    \ takes a string as input and returns the number of words in the string that are\
    \ not spaces. \nWrite a function that takes a string as input and returns the\
    \ number of sentences in the string that are not spaces. \nWrite a function that\
    \ takes a string as input and returns the number of characters in the string that\
    \ are not spaces and words. \nWrite a function that takes a string as input and\
    \ returns the number of words in the string that are not spaces and words. \n\
    Write a function that takes a string as input and returns the number of sentences\
    \ in the string that are not spaces and words. ", "    local _len = string.len()\n\
    \    return _len\nend", "    local len::Int64 = 0\n    for char in string:gmatch(\"\
    [^\\n\\r]+\") do len = len + 1 end\n    return len\nend\n</cell>\n<code language=julia-1.3>",
  "    local len = string.len()\n    return len\nend", "    local len::Int64 = 0\n\
    \    for char in string\n        len = len + 1\n    end\n    return len\nend\n\
    </cell>\n<code language=julia-1.4>", "    local len = #string\n    return len\n\
    end", "    local len::Int64 = 0\n    for char in string\n        len = len + 1\n\
    \    end\n    return len\nend\n</cell>\n<code language=julia-1.5>\nstrlen(\"Hello\
    \ World\")\n</cell>\n<code language=julia-1.5>", "    local len::Int64 = 0\n \
    \   for char in string\n        len = len + 1\n    end\n    return len\nend\n\
    </cell>\n<code language=julia-1.4>", "    string.length\nend", "    Int64(string.len())\n\
    end", "    local len::Int64 = 0\n    for char in string\n        len = len + 1\n\
    \    end\n    return len\nend\n</cell>\n<code language=julia-1.5>\nstrlen(\"hello\"\
    )\n</cell>\n<text>\nStrings in Julia\nStrings are immutable in Julia. Strings\
    \ are represented as a vector of characters. Strings are indexed by integers starting\
    \ from 1. Thus, the first character is at index 1, the second at index 2, and\
    \ so on.", "    local strlen = 0\n    for char in string:gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S",
  "    Int64(string.len())\nend", "    local string\n    local len\n    len = 0\n\
    \    for char in string:gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S", "    str = string\n    len = 0\n    for c in\
    \ str:\n        len += 1\n    return len\n</code>\n<|/ a dscore=1 |>\n<| a |>\n\
    <code>", "    Int64(string.length)\nend\n</cell>\n<code language=julia-1.4>",
  "    local i\n    local len = 0\n    for i = 1, #string do\n        len = len +\
    \ 1\n    end\n    return len\nend\n</cell>\n<code language=julia-1.4>", "    Int64(string.len())\n\
    end", "    Int64(string.len())\nend", "    Int64(string.len())\nend", "    local\
    \ len::Int64 = 0\n    for char in string\n        len = len + 1\n    end\n   \
    \ return len\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"hello\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ the number of characters in the string that are uppercase letters.", "    local\
    \ len::Int64 = 0\n    for char in string\n        len = len + 1\n    end\n   \
    \ return len\nend\n</cell>\n<code language=julia-1.5>", "    local string\n  \
    \  local length\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n", "    local strlen = #string\n    return strlen\nend\n</cell>\n\
    <code language=julia-1.5>\nstrlen(\"Hello\")\n</cell>\n<text>\nStrings in Julia\n\
    Strings are immutable in Julia. Strings are represented as a vector of characters.\
    \ Strings are indexed by integers starting from 1. Strings are written with single\
    \ quotes ('). Strings are written with double quotes (\").", "    Int64(string)\n\
    end", "    local result = 0\n    for char in string\n        result += char:len()\n\
    \    end\n    return result\nend\n</cell>\n<code language=julia-1.5>\nstrlen(\"\
    hello\")\n</cell>\n<text>\nStrings", "    local len = #string\n    return len\n\
    end", "    local len::Int64 = 0\n    for char in string\n        len = len + 1\n\
    \    end\n    return len\nend\n</cell>\n<code language=julia-1.5>\nstrlen(\"hello\"\
    )\n</cell>\n<text>\nJulia has many built in functions to help us manipulate strings.\
    \ Here are some of them:", "    Int64(string.length)\nend", "    string.length\n\
    end", "    local i\n    i=0\n    while string[i]~=nil do\n        i=i+1\n    end\n\
    \    return i\nend\n</cell>\n<code language=julia-1.3>", "    local len::Int64\
    \ = 0\n    for char in string\n        len = len + 1\n    end\n    return len\n\
    end\n</cell>\n<code language=julia-1.5>", "    Int64(string.len())\nend", "  \
    \  local strlen = Int64(0)\n    for char in string:gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"", "  \
    \  local len = 0\n    for char in string\n        len = len + 1\n    end\n   \
    \ return len\nend\n</cell>\n<code language=julia-1.3>", "    str = string\n  \
    \  len = length(str)\n    return len\nend", "    local i\n    i=0\n    while string[i]~=nil\
    \ do\n        i=i+1\n    end\n    return i\nend\n\"\"\"", "    local len::Int64\
    \ = 0\n    for char in string:gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"", "    Int64(string.len())\nend",
  "    local string\n    local length\n    local i\n    local j\n    local k\n   \
    \ local l\n    local m\n    local n\n    local o\n    local p\n    local q\n \
    \   local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n", "    string.length\nend\n</cell>\n\
    <code language=julia-1.3>\nstrlen(\"Hello\")\n</cell>\n<text>\nStrings are immutable",
  "    Int64(string.length)\nend", "    local len::Int64 = 0\n    for char in string\n\
    \        len = len + 1\n    end\n    return len\nend\n</cell>\n<code language=julia-1.3>",
  "    local result = 1\n    for char in string:gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):", "    string.length\n\
    end", "    local len::Int64 = 0\n    for char in string\n        len = len + 1\n\
    \    end\n    return len\nend\n</cell>\n<code language=julia-1.3>", "    Int64(string.len())\n\
    end", "    string.length\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n  \
    \  string.replace(string::String, string::String)::String\n    \n    Replace all\
    \ occurrences of `string` with `string2`.\n    \n    ```julia\n    julia> string\
    \ = \"Hello World\"\n    \"Hello World\"\n    julia> string.replace(string, \"\
    o\")\n    \"Hlo World\"\n    ```\n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    local len::Int64\
    \ = 0\n    for char in string\n        len = len + 1\n    end\n    return len\n\
    end\n</cell>\n<code language=julia-1.3>", "    local length = 0\n    for char\
    \ in string:gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):", "    Int64(string.len())\nend", "    local\
    \ len::Int64 = 0\n    for char in string:gmatch(\"[%z\\1-\\127\\255-\\327\\331-\\\
    377]\") do\n        len = len + 1\n    end\n    return len\nend\n</cell>\n<code\
    \ language=julia-1.3>\nstrlen(\"Hello\")\n</cell>\n<text>\nString concatenation",
  "    local string\n    local length\n    local i\n    local j\n    local k\n   \
    \ local l\n    local m\n    local n\n    local o\n    local p\n    local q\n \
    \   local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n", "    Int64(string.len())\nend\n</cell>\n\
    <code language=julia-1.3>\n@code_warntype strlen(string = \"Hello\")\n</cell>\n\
    <code language=julia-1.3>\n@code_warntype strlen(string = \"Hello\", start = 1,\
    \ stop = 10)\n</cell>\n<code language=julia-1.3>\n@code_warntype strlen(string\
    \ = \"Hello\", start = 1, stop = 10, step = 2)\n</cell>\n<text>\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia. Strings are immutable because they\
    \ cannot be changed. Strings are immutable because they cannot be changed. Strings\
    \ are immutable because they cannot be changed. Strings are immutable because\
    \ they cannot be changed. Strings are immutable because they cannot be changed.\
    \ Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are im",
  "    local len::Int64 = 0\n    for char in string:gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"", "    local len::Int64\
    \ = 0\n    for char in string\n        len = len + 1\n    end\n    return len\n\
    end\n</cell>\n<code language=julia-1.4>", "    local len = 0\n    for char in\
    \ string:gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):", "    str = string\n    len = length(str)\n\
    \    return len\nend", "    Int64(string.length)\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"Hello\")\n</cell>\n<text>\nStrings are immutable in Julia\nStrings are\
    \ immutable in Julia. Strings are immutable because they cannot be changed. Strings\
    \ are immutable because they cannot be changed. Strings are immutable because\
    \ they cannot be changed. Strings are immutable because they cannot be changed.\
    \ Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they ", "    local\
    \ len::Int64 = 0\n    for char in string:gmatch(\"[%z\\1-\\127\\194-\\244\\377\\\
    370-\\377\\377]\") do \n        len = len + 1\n    end\n    return len\nend\n\
    </cell>\n<code language=julia-1.5>", "    Int64(string.len())\nend", "    Int64(string.len())\n\
    end", "    Int64(string.length)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\
    \"\n    replaceall(string::String, find::String, replace::String)::String\n  \
    \  \n    Replace all occurrences of `find` with `replace` in `string`.\n    \n\
    \    ```julia\n    julia> replaceall(\"hello world\", \"o\", \"x\")\n    \"xllx\
    \ wxxrld\"\n    ```\n    \n    ```julia\n    julia> replaceall(\"hello world\"\
    , \"o\", \"x\")\n    \"xllx wxxrld\"\n    ```\n    \n    ```julia\n    julia>\
    \ replaceall(\"hello world\", \"o\", \"x\")\n    \"xllx wxxrld\"\n    ```\n  \
    \  \n    ```julia\n    julia> replaceall(\"hello world\", \"o\", \"x\")\n    \"\
    xllx wxxrld\"\n    ```\n    \n    ```julia\n    julia> replaceall(\"hello world\"\
    , \"o\", \"x\")\n    \"xllx wxxrld\"\n    ```\n    \n    ```julia\n    julia>\
    \ replaceall(\"hello world\", \"o\", \"x\")\n    \"xllx wxxrld\"\n    ```\n  \
    \  \n    ```julia\n    julia> replaceall(\"hello world\", \"o\", \"x\")\n    \"\
    xllx wxxrld\"\n    ```\n    \n    ```julia\n    julia> replaceall(\"hello world\"\
    , \"o\", \"x\")\n    \"xllx wxxrld\"\n    ```\n    \n    ```julia\n    julia>\
    \ replaceall(\"hello world\", \"o\", \"x\")\n    \"xllx wxxrld\"\n    ```\n  \
    \  \n    ```julia\n    julia> replaceall(\"hello world\", \"o\", \"x\")\n    \"\
    xllx wxxrld\"\n    ```\n    \n    ```julia\n    julia> replaceall(\"hello world\"\
    , \"o\", \"x\")\n    \"xllx wxxrld\"\n    ```\n    \n    ```julia\n    julia>\
    \ replaceall(\"hello world\", \"o\", \"x\")\n    \"xllx wxxrld\"\n    ```\n  \
    \  \n    ```julia\n    julia> replaceall(\"hello world\", \"o\", \"x\")\n    \"\
    xllx wxxrld\"\n    ```\n    \n    ", "    Int64(string::String)\nend", "    Int64(string.len())\n\
    end", "    local len::Int64 = 0\n    for char in string:gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"",
  "    Int64(string.len())\nend", "    local len::Int64 = 0\n    for char in string\n\
    \        len = len + 1\n    end\n    return len\nend\n</cell>\n<code language=julia-1.4>",
  "    Int64(string.len())\nend", "    local len::Int64 = 0\n    for char in string\n\
    \        len = len + 1\n    end\n    return len\nend\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"hello\")\n</cell>\n<code language=julia-1.3>\nstrlen(\"hello\")\n</cell>\n\
    <code language=julia-1.3>\nstrlen(\"hello\")\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"hello\")\n</cell>\n<code language=julia-1.3>\nstrlen(\"hello\")\n</cell>\n\
    <code language=julia-1.3>\nstrlen(\"hello\")\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"hello\")\n</cell>\n<code language=julia-1.3>\nstrlen(\"hello\")\n</cell>\n\
    <code language=julia-1.3>\nstrlen(\"hello\")\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"hello\")\n</cell>\n<code language=julia-1.3>\nstrlen(\"hello\")\n</cell>\n\
    <code language=julia-1.3>\nstrlen(\"hello\")\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"hello\")\n</cell>\n<code language=julia-1.3>\nstrlen(\"hello\")\n</cell>\n\
    <code language=julia-1.3>\nstrlen(\"hello\")\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"hello\")\n</cell>\n<code language=julia-1.3>\nstrlen(\"hello\")\n</cell>\n\
    <code language=julia-1.3>\nstrlen(\"hello\")\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"hello\")\n</cell>\n<code language=julia-1.3>\nstrlen(\"hello\")\n</cell>\n\
    <code language=julia-1.3>\nstrlen(\"hello\")\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"hello\")\n</cell>\n<code language=julia-1.3>\nstrlen(\"hello\")\n</cell>\n\
    <code language=julia-1.3>\nstrlen(\"hello\")\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"hello\")\n</cell>\n<code language=julia-1.3>\nstrlen(\"hello\")\n</cell>\n\
    <code language=julia-1.3>\nstrlen(\"hello\")\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"hello\")\n</cell>\n<code language=julia-1.3>\nstrlen(\"hello\")\n</cell>\n\
    <code language=julia-1.3>\nstrlen(\"hello\")\n</cell>\n<code language=julia-1.",
  "    Int64(string.length)\nend", "    local len::Int64 = 0\n    for char in string\n\
    \        len = len + 1\n    end\n    return len\nend\n</cell>\n<code language=julia-1.4>\n\
    strlen(\"hello\")\n</cell>\n<text>\nStrings are immutable\nStrings are immutable\
    \ in Julia. Unlike other languages, strings are immutable in Julia. Strings are\
    \ immutable because strings are immutable in Julia. Strings are immutable because\
    \ strings are immutable in Julia.", "    local len::Int64 = 0\n    for char in\
    \ string\n        len = len + 1\n    end\n    return len\nend", "    Int64(string.len())\n\
    end", "    str = string\n    len = length(str)\n    return len\nend", "    local\
    \ strlen::Int64 = 0\n    for char in string\n        strlen::Int64 = strlen::Int64\
    \ + 1\n    end\n    return strlen::Int64\nend\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"hello\")\n</cell>\n<text>\nStrings in Julia\nStrings are immutable in\
    \ Julia. Strings are represented as a vector of characters. Strings are indexed\
    \ by integers starting from 1. Unlike Python, Julia uses 1-based indexing.", " \
    \   local len::Int64 = 0\n    for char in string:gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"", "  \
    \  Int64(string.len())\nend", "    local strlen = Int64(0)\n    for char in string:gmatch(\"\
    [%z\\1-\\127\\194-\\244\\377\\370-\\377\\376\\377\\377]\") do \n        strlen\
    \ = strlen + Int64(ord(char))\n    end\n    return strlen\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    Int64(string.len())\nend", "    local len::Int64\
    \ = 0\n    for char in string\n        len = len + 1\n    end\n    return len\n\
    end\n</cell>\n<code language=julia-1.5>", "    Int64(string.len())\nend\n</cell>\n\
    <code language=julia-1.5>", "    local _len = string.length\n    return _len\n\
    end", "    string::String\n    Int64\nend", "    string.length\nend\n</cell>\n\
    <code language=julia-1.5>\nstrlen(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"hello\")\n</cell>\n<code language=julia-1.5>\nstrlen(\"hello\")\n</cell>\n\
    <code language=julia-1.5>\nstrlen(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"hello\")\n</cell>\n<code language=julia-1.5>\nstrlen(\"hello\")\n</cell>\n\
    <code language=julia-1.5>\nstrlen(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"hello\")\n</cell>\n<code language=julia-1.5>\nstrlen(\"hello\")\n</cell>\n\
    <code language=julia-1.5>\nstrlen(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"hello\")\n</cell>\n<code language=julia-1.5>\nstrlen(\"hello\")\n</cell>\n\
    <code language=julia-1.5>\nstrlen(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"hello\")\n</cell>\n<code language=julia-1.5>\nstrlen(\"hello\")\n</cell>\n\
    <code language=julia-1.5>\nstrlen(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"hello\")\n</cell>\n<code language=julia-1.5>\nstrlen(\"hello\")\n</cell>\n\
    <code language=julia-1.5>\nstrlen(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"hello\")\n</cell>\n<code language=julia-1.5>\nstrlen(\"hello\")\n</cell>\n\
    <code language=julia-1.5>\nstrlen(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"hello\")\n</cell>\n<code language=julia-1.5>\nstrlen(\"hello\")\n</cell>\n\
    <code language=julia-1.5>\nstrlen(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"hello\")\n</cell>\n<code language=julia-1.5>\nstrlen(\"hello\")\n</cell>\n\
    <code language=julia-1.5>\nstrlen(\"hello\")\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"hello\")\n</cell>\n<code language=julia-1.5>\nstrlen(\"hello\")\n</cell>\n\
    <code language=julia-1.5>\nstrlen(\"hello\")\n</cell>\n<code language=julia-1.5>\n",
  "    local length = 0\n    for char in string:gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):", "    local\
    \ len::Int64 = 0\n    for char in string\n        len = len + 1\n    end\n   \
    \ return len\nend\n</cell>\n<code language=julia-1.3>", "    Int64(string.len())\n\
    end\n</cell>\n<code language=julia-1.3>\nstrlen(\"hello\")\n</cell>\n<text>\n\
    Strings\nStrings are immutable and are represented as a vector of characters.\
    \ Strings are created using the quote function and are enclosed in single quotes.",
  "    Int64(string.length)\nend", "    Int64(string.len())\nend", "    local len::Int64\
    \ = 0\n    for char in string:gmatch(\"[%z]\") do len = len + 1 end\n    return\
    \ len\nend\n</cell>\n<code language=julia-1.5>", "    str = string\n    len =\
    \ length(str)\n    return len\nend", "    Int64(string.len())\nend", "    local\
    \ result = 0\n    for char in string:gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):", "    local len::Int64\
    \ = 0\n    for char in string\n        len = len + 1\n    end\n    return len\n\
    end\n</cell>\n<code language=julia-1.4>", "    local len::Int64 = 0\n    for char\
    \ in string\n        len = len + 1\n    end\n    return len\nend", "    Int64(string.len())\n\
    end", "    local len = #string\n    return len\nend", "    local length = 0\n\
    \    for char in string:gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):", "    str = string\n    len\
    \ = length(str)\n    return len\nend", "    Int64(string.len())\nend\n</cell>\n\
    <code language=julia-1.5>", "    str = string\n    len = length(string)\n    return\
    \ len\nend\n</cell>\n<code language=julia-1.4>", "    local len::Int64 = 0\n \
    \   for char in string\n        len = len + 1\n    end\n    return len\nend\n\
    </cell>\n<code language=julia-1.5>\nstrlen(\"Hello World\")\n</cell>\n<text>\n\
    Strings in Julia\nStrings are immutable data types. That means they cannot be\
    \ changed once they are created. Strings are created using single quotes (').\
    \ They are also called character arrays. Strings are used to store text data.",
  "    local len::Int64 = 0\n    for char in string\n        len = len + 1\n    end\n\
    \    return len\nend\n</cell>\n<code language=julia-1.5>", "    local strlen::Int64\
    \ = 0\n    for char in string\n        strlen = strlen + 1\n    end\n    return\
    \ strlen\nend\n</cell>\n<code language=julia-1.5>\nstrlen(\"Hello\")\n</cell>\n\
    <text>\nFunctions returning multiple values", "    string.length\nend\n</cell>\n\
    <code language=julia-1.5>", "    local len::Int64 = 0\n    for char in string\n\
    \        len = len + 1\n    end\n    return len\nend\n</cell>\n<code language=julia-1.3>",
  "    string::String\nend", "    Int64(string.length)\nend", "    Int64(string.len())\n\
    end", "    local len::Int64 = 0\n    for char in string\n        len = len + 1\n\
    \    end\n    return len\nend\n</cell>\n<code language=julia-1.5>", "    string.length()\n\
    end\n</cell>\n<code language=julia-1.5>", "    local len::Int64 = 0\n    for char\
    \ in string do \n        len = len + 1\n    end\n    return len\nend\n</cell>\n\
    <code language=julia-1.5>", "    str = string\n    len = length(str)\n    return\
    \ len\nend", "    Int64(string.length)\nend\n</cell>\n<code language=julia-1.3>",
  "    local len::Int64 = 0\n    for char in string\n        len = len + 1\n    end\n\
    \    return len\nend", "    local length = 0\n    for char in string:gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):", "    local len::Int64 = 0\n    for char in string\n      \
    \  len = len + 1\n    end\n    return len\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"hello\")\n</cell>\n<code language=julia-1.5>", "    local len::Int64\
    \ = 0\n    for char in string\n        len = len + 1\n    end\n    return len\n\
    end\n</cell>\n<code language=julia-1.5>", "    local string::String\n    local\
    \ length::Int64\n    \n    local string::String\n    local length::Int64\n   \
    \ \n    local string::String\n    local length::Int64\n    \n    local string::String\n\
    \    local length::Int64\n    \n    local string::String\n    local length::Int64\n\
    \    \n    local string::String\n    local length::Int64\n    \n    local string::String\n\
    \    local length::Int64\n    \n    local string::String\n    local length::Int64\n\
    \    \n    local string::String\n    local length::Int64\n    \n    local string::String\n\
    \    local length::Int64\n    \n    local string::String\n    local length::Int64\n\
    \    \n    local string::String\n    local length::Int64\n    \n    local string::String\n\
    \    local length::Int64\n    \n    local string::String\n    local length::Int64\n\
    \    \n    local string::String\n    local length::Int64\n    \n    local string::String\n\
    \    local length::Int64\n    \n    local string::String\n    local length::Int64\n\
    \    \n    local string::String\n    local length::Int64\n    \n    local string::String\n\
    \    local length::Int64\n    \n    local string::String\n    local length::Int64\n\
    \    \n    local string::String\n    local length::Int64\n    \n    local string::String\n\
    \    local length::Int64\n    \n    local string::String\n    local length::Int64\n\
    \    \n    local string::String\n    local length::Int64\n    \n    local string::String\n\
    \    local length::Int64\n    \n    local string::String\n    local length::Int64\n\
    \    \n    local string::String\n    local length::Int64\n    \n    local string::String\n\
    \    local length::Int64\n    \n    local string::String\n    local length::Int64\n\
    \    \n    local string::String\n    local length::Int64\n    \n    local string::String\n\
    \    local length::Int64\n    \n    local string::String\n    local length::Int64\n\
    \    \n    local string::String\n    local length::Int64\n    \n    local string::String\n\
    \    local length::Int64\n    \n    local ", "    Int64(string.len())\nend\n</cell>\n\
    <code language=julia-1.3>\nstrlen(\"hello\")\n</cell>\n<text>\nStrings are immutable",
  "    local len::Int64 = 0\n    for char in string\n        len = len + 1\n    end\n\
    \    return len\nend", "    local strlen\n    strlen = string.len\n    return\
    \ strlen\nend", "    local len::Int64 = 0\n    for char in string\n        len\
    \ = len + 1\n    end\n    return len\nend\n</cell>\n<code language=julia-1.3>",
  "    Int64(string.len())\nend\n</cell>\n<code language=julia-1.4>", "    Int64(string)\n\
    end", "    Int64(string.length)\nend", "    Int64(string)\nend", "    local len\
    \ = string.len()\n    return len\nend", "    local len::Int64 = 0\n    for char\
    \ in string:gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"", "    Int64(string)\nend", "    string.length\n\
    end\n</cell>\n<code language=julia-1.3>\nstrlen(\"hello\")\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"hello\") == 0\n</cell>\n<code language=julia-1.3>\nstrlen(\"hello\")\
    \ != 0\n</cell>\n<code language=julia-1.3>\nstrlen(\"hello\") != 1\n</cell>\n\
    <code language=julia-1.3>\nstrlen(\"hello\") != 2\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"hello\") != 3\n</cell>\n<code language=julia-1.3>\nstrlen(\"hello\")\
    \ != 4\n</cell>\n<code language=julia-1.3>\nstrlen(\"hello\") != 5\n</cell>\n\
    <code language=julia-1.3>\nstrlen(\"hello\") != 6\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"hello\") != 7\n</cell>\n<code language=julia-1.3>\nstrlen(\"hello\")\
    \ != 8\n</cell>\n<code language=julia-1.3>\nstrlen(\"hello\") != 9\n</cell>\n\
    <code language=julia-1.3>\nstrlen(\"hello\") != 10\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"hello\") != 11\n</cell>\n<code language=julia-1.3>\nstrlen(\"hello\"\
    ) != 12\n</cell>\n<code language=julia-1.3>\nstrlen(\"hello\") != 13\n</cell>\n\
    <code language=julia-1.3>\nstrlen(\"hello\") != 14\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"hello\") != 15\n</cell>\n<code language=julia-1.3>\nstrlen(\"hello\"\
    ) != 16\n</cell>\n<code language=julia-1.3>\nstrlen(\"hello\") != 17\n</cell>\n\
    <code language=julia-1.3>\nstrlen(\"hello\") != 18\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"hello\") != 19\n</cell>\n<code language=julia-1.3>\nstrlen(\"hello\"\
    ) != 20\n</cell>\n<code language=julia-1.3>\nstrlen(\"hello\") != 21\n</cell>\n\
    <code language=julia-1.3>\nstrlen(\"hello\") != 22\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"hello\") != 23\n</cell>\n<code language=julia-1.3>\nstrlen(\"hello\"\
    ) != 24\n</cell>\n<code language=julia-1.3>\nstrlen(\"hello\") != 25\n</cell>\n\
    <code language=", "    str = string\n    len = length(str)\n    return len\nend",
  "    Int64(string.len())\nend", "    string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"Hello World\")\n</cell>\n<text>\nStrings are immutable in Julia\nStrings\
    \ are immutable in Julia. This means that once a string is created, it cannot\
    \ be changed. However, you can create new strings by concatenating two strings.\
    \ For example:", "    Int64(string.len())\nend", "    local len::Int64 = 0\n \
    \   for char in string\n        len = len + 1\n    end\n    return len\nend\n\
    </cell>\n<code language=julia-1.4>", "    local len::Int64 = 0\n    for char in\
    \ string\n        len = len + 1\n    end\n    return len\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstrlen(\"hello\")\n</cell>\n<text>\nStrings in Julia\n\
    Strings are immutable in Julia. Strings are also called Unicode strings. Strings\
    \ are used to represent Unicode characters. Strings are written between double\
    \ quotes \"\".", "    Int64(string.len())\nend", "    local len::Int64 = 0\n \
    \   for char in string\n        len = len + 1\n    end\n    return len\nend\n\
    </cell>\n<code language=julia-1.5>", "    string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    split(string::String, separator::AbstractString; maxsplit::Int64 =\
    \ Inf)\n    Split string into substrings separated by separator. \n    \n    Splitting\
    \ is done by breaking string into substrings separated by separator. \n    \n\
    \    Splitting is done by breaking string into substrings separated by separator.\
    \ \n    \n    Splitting is done by breaking string into substrings separated by\
    \ separator. \n    \n    Splitting is done by breaking string into substrings\
    \ separated by separator. \n    \n    Splitting is done by breaking string into\
    \ substrings separated by separator. \n    \n    Splitting is done by breaking\
    \ string into substrings separated by separator. \n    \n    Splitting is done\
    \ by breaking string into substrings separated by separator. \n    \n    Splitting\
    \ is done by breaking string into substrings separated by separator. \n    \n\
    \    Splitting is done by breaking string into substrings separated by separator.\
    \ \n    \n    Splitting is done by breaking string into substrings separated by\
    \ separator. \n    \n    Splitting is done by breaking string into substrings\
    \ separated by separator. \n    \n    Splitting is done by breaking string into\
    \ substrings separated by separator. \n    \n    Splitting is done by breaking\
    \ string into substrings separated by separator. \n    \n    Splitting is done\
    \ by breaking string into substrings separated by separator. \n    \n    Splitting\
    \ is done by breaking string into substrings separated by separator. \n    \n\
    \    Splitting is done by breaking string into substrings separated by separator.\
    \ \n    \n    Splitting is done by breaking string into substrings separated by\
    \ separator. \n    \n    Splitting is done by breaking string into substrings\
    \ separated by separator. \n    \n    Splitting is done by breaking string into\
    \ substrings separated by separator. \n    \n    Splitting is done by breaking\
    \ string into substrings separated by separator. \n    \n    Splitting is done\
    \ by breaking string into substrings separated by separator. \n    \n    Splitting\
    \ is done by breaking string into substrings separated by separator. \n    \n\
    \    Splitting is done by breaking string into substrings separated by separator.\
    \ \n    \n    Splitting is done by breaking string into substrings separated by\
    \ separator. \n    \n    Splitting is done by ", "    Int64(string.length)\nend",
  "    Int64(string.len())\nend", "    local len::Int64 = 0\n    for char in string\
    \ do \n        len = len + 1\n    end\n    return len\nend\n</cell>\n<code language=julia-1.3>",
  "    Int64(string.len())\nend", "    Int64(string.len())\nend\n</cell>\n<code language=julia-1.5>",
  "    local len::Int64 = 0\n    for char in string\n        len = len + 1\n    end\n\
    \    return len\nend\n</cell>\n<code language=julia-1.5>", "    Int64(string.len())\n\
    end", "    Int64(string.len())\nend", "    string.length\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstrlen(\"Hello\")\n</cell>\n<text>\nStrings are immutable",
  "    local len::Int64 = 0\n    for char in string\n        len = len + 1\n    end\n\
    \    return len\nend\n</cell>\n<code language=julia-1.3>", "    local len::Int64\
    \ = 0\n    for char in string:gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"", "    string.length\nend", "  \
    \  Int64(string.len())\nend\n</cell>\n<code language=julia-1.5>", "    local len\
    \ = #string\n    return len\nend", "    local len::Int64 = 0\n    for char in\
    \ string:gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"\
    ):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"%S\"):gmatch(\"\
    %S\"):gmatch(\"%S\"):gmatch(\"", "    local len = 0\n    for char in string:gmatch(\"\
    %S\") do len = len + 1 end\n    return len\nend", "    local len::Int64 = 0\n\
    \    for char in string\n        len = len + 1\n    end\n    return len\nend\n\
    </cell>\n<code language=julia-1.5>", "    local i::Int64 = 0\n    for char in\
    \ string\n        i += 1\n    end\n    return i\nend\n</cell>\n<code language=julia-1.3>",
  "    Int64(string.len())\nend", "    str = string\n    len = length(string)\n  \
    \  return len\nend", "    local len::Int64 = 0\n    for char in string:gmatch(\"\
    [^\\n\\r]+\") do \n        len = len + 1\n    end\n    return len\nend\n</cell>\n\
    <code language=julia-1.5>\nstrlen(\"hello\")\n</cell>\n<text>\nStrings are immutable",
  "    Int64(string)\nend", "    Int64(string::String)\nend", "    local length =\
    \ 0\n    for char in string:gmatch(\"[%z\\1-\\127\\194-\\244\\377\\370-\\377]\"\
    ) do \n        length = length + 1\n    end\n    return length\nend\n</cell>\n\
    <code language=julia-1.5>", "    local len::Int64 = 0\n    for char in string\n\
    \        len = len + 1\n    end\n    return len\nend\n</cell>\n<code language=julia-1.3>",
  "    Int64(string.len())\nend\n</cell>\n<code language=julia-1.3>\n@code_native\
    \ strlen(\"hello\")\n</cell>\n<text>\nStrings are immutable", "    local len::Int64\
    \ = 0\n    for char in string\n        len = len + 1\n    end\n    return len\n\
    end\n</cell>\n<code language=julia-1.4>", "    local len::Int64 = 0\n    for char\
    \ in string\n        len = len + 1\n    end\n    return len\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    local string\n    local length\n    local i\n   \
    \ local j\n    local k\n    local l\n    local m\n    local n\n    local o\n \
    \   local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n", "    local\
    \ strlen::Int64 = 0\n    for char in string\n        strlen = strlen + 1\n   \
    \ end\n    return strlen\nend\n</cell>\n<code language=julia-1.4>\nstrlen(\"hello\"\
    )\n</cell>\n<text>\nStrings are immutable", "    Int64(string.len())\nend", " \
    \   str = string\n    len = length(string)\n    return len\nend", "    string.length()\n\
    end\n</cell>\n<code language=julia-1.5>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
