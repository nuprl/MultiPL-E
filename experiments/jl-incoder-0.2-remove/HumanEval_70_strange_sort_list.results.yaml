language: jl
name: HumanEval_70_strange_sort_list
results:
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpllrds_r3.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpllrds_r3.jl:1\n\
    in expression starting at /tmp/tmpllrds_r3.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpllrds_r3.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpllrds_r3.jl:1\n\
    in expression starting at /tmp/tmpllrds_r3.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    lst = sort(lst)\n\
    \    lst = lst.map(x -> if x == minimum then maximum else x)\n    return lst\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like your solution, but I wonder if\
    \ it can be done without `map`? I mean, `sort` returns a new vector, so it seems\
    \ like a waste to map it back into a new vector.\n<|/ c |>\n<| c |>\nYes, it can\
    \ be done without `map`, but then it would be a one-liner `minimum(sort(lst))`\n\
    <|/ c |>\n<| a |>\nI came up with this solution:\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"maximum\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0wkrn6n5.jl:12\nin expression starting at /tmp/tmp0wkrn6n5.jl:12\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    \n    lst = sort(lst)\n    \n    i = 0\n    \n    while i < length(lst)\n\
    \        \n        if lst[i] > lst[i+1]\n            \n            lst[i], lst[i+1]\
    \ = lst[i+1], lst[i]\n            \n        end\n        \n        i += 1\n  \
    \      \n    end\n    \n    return lst\nend\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([1,2,3])\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([1,3,2])\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list([1,2,4])\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list([1,4,2])\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([1,4,3])\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([1,4,5])\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list([1,4,6])\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list([1,4,7])\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([1,4,8])\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([1,4,9])\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list([1,4,10])\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list([1,4,11])\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([1,4,12])\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([1,4,13])\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list([1,4,14])\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list([1,4,15])\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([1,4,16])\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([1,4,17])\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list([1,4,18])\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list([1,4,19])\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([1,4,20])\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([1,\n\
    using Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpei8jnw_p.jl:28\nin expression starting at\
    \ /tmp/tmpei8jnw_p.jl:28\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpllrds_r3.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpllrds_r3.jl:1\n\
    in expression starting at /tmp/tmpllrds_r3.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpllrds_r3.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpllrds_r3.jl:1\n\
    in expression starting at /tmp/tmpllrds_r3.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    lst = sort(lst)\n\
    \    lst = lst.*(minimum < lst)\n    lst = lst.*(lst<maximum)\n    lst = lst.*(minimum\
    \ > lst)\n    lst = lst.*(maximum < lst)\n    lst = lst.*(minimum < maximum)\n\
    \    lst = lst.*(minimum > maximum)\n    lst = lst.*(maximum < minimum)\n    lst\
    \ = lst.*(maximum > minimum)\n    return lst\nend\n</code>\n<|/ a tags=sorting,julia\
    \ |>\n<| a dscore=1 |>\nThe answer by is very good, but I thought I'd add my own\
    \ solution, which is based on a similar idea to that of Benjamin W. but which\
    \ I believe is more efficient (at least in terms of memory usage).\n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp35w92wwu.jl:22\nin expression starting at\
    \ /tmp/tmp35w92wwu.jl:22\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    lst\
    \ = sort(lst)\n    \n    lst = lst.map(x -> if x == minimum then maximum else\
    \ x)\n    \n    return lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector and returns\
    \ a vector with its elements reversed.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\
    \t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"maximum\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpx7v5umun.jl:15\nin expression starting at /tmp/tmpx7v5umun.jl:15\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=sorting,julia |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp22eqzerv.jl:13\nin expression starting at\
    \ /tmp/tmp22eqzerv.jl:13\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n\
    <|/ a tags=sorting,julia |>\n<| c |>\n`sort!` modifies the input array, so this\
    \ doesn't work. `sort!` returns a new array and leaves the input untouched.\n\
    <|/ c |>\n<| c |>\nThanks for pointing that out. I fixed the code accordingly.\n\
    <|/ c |>\n<| a dscore=2 |>\nThe most efficient way is to use sortperm:\n<code>\n\
    julia> sortperm([1,3,2])\n2-element Array{Int64,1}:\n 2\n 1\n</code>\n<|/ a tags=sorting,julia\
    \ |>\n<| a tags=sorting,julia |>\nThe most efficient way is to use sortperm:\n\
    <code>\njulia> sortperm([1,3,2])\n2-element Array{Int64,1}:\n 2\n 1\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\nThe most efficient way is to use sortperm:\n\
    <code>\njulia> sortperm([1,3,2])\n2-element Array{Int64,1}:\n 2\n 1\n</code>\n\
    <|/ a tags=sorting,julia |>\n<| a tags=sorting,julia |>\nThe most efficient way\
    \ is to use sortperm:\n<code>\njulia> sortperm([1,3,2])\n2-element Array{Int64,1}:\n\
    \ 2\n 1\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\nThe most efficient way\
    \ is to use sortperm:\n<code>\njulia> sortperm([1,3,2])\n2-element Array{Int64,1}:\n\
    \ 2\n 1\n</code>\n<|/ a tags=sorting,julia |>\n<| a |>\n<code>\njulia> sortperm([1,3,2])\n\
    2-element Array{Int64,1}:\n 2\n 1\n</code>\n<|/ a dscore=1 tags=sorting,julia\
    \ |>\n<| a tags=sorting,julia |>\n<code>\njulia> sortperm([1,3,2])\n2-element\
    \ Array{Int64,1}:\n 2\n 1\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    julia> sortperm([1,3,2])\n2-element Array{Int64,1}:\n 2\n 1\n</code>\n<|/ a tags=\n\
    using Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0bojl706.jl:13\nin expression starting at\
    \ /tmp/tmp0bojl706.jl:13\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpllrds_r3.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpllrds_r3.jl:1\n\
    in expression starting at /tmp/tmpllrds_r3.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    lst = sort(lst)\n\
    \    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n\
    \    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n\
    \    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n\
    \    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n\
    \    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n\
    \    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n\
    \    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n\
    \    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n\
    \    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n\
    \    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n\
    \    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n\
    \    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n\
    \    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n\
    \    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n\
    \    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n\
    \    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n\
    \    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n    lst = sort(lst)\n\
    \    lst = sort(lst)\n    lst = sort(lst)\n\nusing Test\n\n@testset begin\n\n\
    candidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    \t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjcjr4f2a.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjcjr4f2a.jl:1\n\
    in expression starting at /tmp/tmpjcjr4f2a.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqntca9qv.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpqntca9qv.jl:18\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [4, 3, 2, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:19\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 8, 7, 6, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:20\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 4, 3, 2, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:21\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [9, 8, 7, 6, 5, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:24\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) == [1,"
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpllrds_r3.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpllrds_r3.jl:1\n\
    in expression starting at /tmp/tmpllrds_r3.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n\
    <|/ a tags=sorting,julia,arrays |>\n<| a tags=sorting,julia,arrays |>\nIn Julia\
    \ 1.5 you can use the function sort!:\n<code>\njulia> sort!([1,2,3,4,5,6,7,8,9,10])\n\
    10-element Array{Int64,1}:\n 10\n 9\n 8\n 7\n 6\n 5\n 4\n 3\n 2\n 1\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=sorting,julia,arrays |>\nIn Julia 1.5 you can use\
    \ the function sort!:\n<code>\njulia> sort!([1,2,3,4,5,6,7,8,9,10])\n10-element\
    \ Array{Int64,1}:\n 10\n 9\n 8\n 7\n 6\n 5\n 4\n 3\n 2\n 1\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=sorting,julia,arrays |>\nIn Julia 1.5 you can use the function\
    \ sort!:\n<code>\njulia> sort!([1,2,3,4,5,6,7,8,9,10])\n10-element Array{Int64,1}:\n\
    \ 10\n 9\n 8\n 7\n 6\n 5\n 4\n 3\n 2\n 1\n</code>\n<|/ a dscore=1 |>\n<| a tags=sorting,julia,arrays\
    \ |>\nIn Julia 1.5 you can use the function sort!:\n<code>\njulia> sort!([1,2,3,4,5,6,7,8,9,10])\n\
    10-element Array{Int64,1}:\n 10\n 9\n 8\n 7\n 6\n 5\n 4\n 3\n 2\n 1\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\nIn Julia 1.5 you can use the function sort!:\n\
    <code>\njulia> sort!([1,2,3,4,5,6,7,8,9,10])\n10-element Array{Int64,1}:\n 10\n\
    \ 9\n 8\n 7\n 6\n 5\n 4\n 3\n 2\n 1\n</code>\n<|/ a tags=sorting,julia,arrays\
    \ |>\n<| a dscore=0 |>\nIn Julia 1.5 you can use the function sort!:\n<code>\n\
    julia> sort!([1,2,3,4,5,6,7,8,9,10])\n10-element Array{Int64,1}\nusing Test\n\n\
    @testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzza4c36l.jl:13\nin expression starting at\
    \ /tmp/tmpzza4c36l.jl:13\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqntca9qv.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpqntca9qv.jl:18\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [4, 3, 2, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:19\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 8, 7, 6, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:20\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 4, 3, 2, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:21\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [9, 8, 7, 6, 5, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:24\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) == [1,"
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</cell>\n\
    <code language=julia-1.5>\nstrange_sort_list([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector as input and returns\
    \ a vector of the same length where each element is the sum of the elements in\
    \ the input vector. For example, if the input vector is [1,2,3,4,5], then the\
    \ output vector should be [2,3,4,5,6].\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\
    \t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm3__svqc.jl:13\nin expression starting at\
    \ /tmp/tmpm3__svqc.jl:13\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n\
    <|/ a tags=sorting,julia |>\n<| c |>\nThis doesn't work for me. `sort(lst)` returns\
    \ `ERROR: MethodError: no method matching sort(::Array{Int64,1})`. `sort(lst,\
    \ dims=1)` returns `ERROR: MethodError: no method matching sort(::Array{Int64,1},\
    \ ::Int64)`. `sort(lst, dims=2)` returns `ERROR: MethodError: no method matching\
    \ sort(::Array{Int64,2}, ::Int64)`. `sort(lst, dims=3)` returns `ERROR: MethodError:\
    \ no method matching sort(::Array{Int64,3}, ::Int64)`. `sort(lst, dims=4)` returns\
    \ `ERROR: MethodError: no method matching sort(::Array{Int64,4}, ::Int64)`. `sort(lst,\
    \ dims=5)` returns `ERROR: MethodError: no method matching sort(::Array{Int64,5},\
    \ ::Int64)`. `sort(lst, dims=6)` returns `ERROR: MethodError: no method matching\
    \ sort(::Array{Int64,6}, ::Int64)`. `sort(lst, dims=7)` returns `ERROR: MethodError:\
    \ no method matching sort(::Array{Int64,7}, ::Int64)`. `sort(lst, dims=8)` returns\
    \ `ERROR: MethodError: no method matching sort(::Array{Int64,8}, ::Int64)`. `sort(lst,\
    \ dims=9)` returns `ERROR: MethodError: no method matching sort(::Array{Int64,9},\
    \ ::Int64)`. `sort(lst, dims=10)` returns `ERROR: MethodError: no method matching\
    \ sort(::Array{Int64,10}, ::Int64)`. `sort(lst, dims=11)` returns `ERROR: MethodError:\
    \ no method matching sort(::Array{Int64,11}, ::Int64)`. `sort(lst, dims=12)` returns\
    \ `ERROR: MethodError: no method matching sort(::Array{Int64,12}, ::Int64)`. `sort(lst,\
    \ dims=13)` returns `ERROR: MethodError: no method matching sort(::Array{Int64,13},\
    \ ::Int64)`. `sort(lst, dims=14)` returns `ERROR: MethodError: no method matching\
    \ sort(::Array{Int64,14}, ::Int64)`. `sort(lst, dims=15)` returns `ERROR: MethodError:\
    \ no method matching sort(::Array{Int64,15}, ::Int64)`. `sort(lst, dims=16)` returns\
    \ `ERROR: MethodError: no method matching sort(::Array{Int64,16}, ::Int64)`. `sort(\n\
    using Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsr1xda26.jl:13\nin expression starting at\
    \ /tmp/tmpsr1xda26.jl:13\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThis is not the correct answer. `sort` sorts lexicographically,\
    \ not numerically.\n<|/ c |>\n<| c |>\n`sort` sorts lexicographically by default.\
    \ `sort([3,2,1])` returns `[1,2,3]`.\n<|/ c |>\n<| c |>\nYes, but `sort` sorts\
    \ lexicographically by default, not numerically. `sort([3,2,1])` returns `[1,2,3]`,\
    \ not `[3,2,1]`.\n<|/ c |>\n<| c |>\n`sort` sorts lexicographically by default.\
    \ `sort([3,2,1])` returns `[1,2,3]`.\n<|/ c |>\n<| c |>\nYes, but `sort` sorts\
    \ lexicographically by default, not numerically. `sort([3,2,1])` returns `[1,2,3]`,\
    \ not `[3,2,1]`.\n<|/ c |>\n<| a tags=sorting,julia |>\n<code>\njulia> function\
    \ strange_sort_list(lst::Vector{Int64})::Vector{Int64}\n           return sort(lst)\n\
    \       end\nstrange_sort_list (generic function with 1 method)\nusing Test\n\n\
    @testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfougnqwm.jl:13\nin expression starting at\
    \ /tmp/tmpfougnqwm.jl:13\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n\
    <|/ a tags=sorting,julia |>\n<| a dscore=2 |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqyom7xs3.jl:13\nin expression starting at\
    \ /tmp/tmpqyom7xs3.jl:13\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=sorting,julia |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp22eqzerv.jl:13\nin expression starting at\
    \ /tmp/tmp22eqzerv.jl:13\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n\
    <|/ a tags=julia,sorting,arrays |>\n<| c |>\nThis doesn't work if you have a vector\
    \ of strings. `sort` will sort lexicographically instead of numerically.\n<|/\
    \ c |>\n<| c |>\n`sort` will sort lexicographically if you give it a vector of\
    \ strings. `sort!` will sort numerically if you give it a vector of strings. `sort!`\
    \ will sort numerically if you give it a vector of numbers. `sort!` will sort\
    \ numerically if you give it a vector of booleans. `sort!` will sort numerically\
    \ if you give it a vector of tuples. `sort!` will sort numerically if you give\
    \ it a vector of arrays. `sort!` will sort numerically if you give it a vector\
    \ of dictionaries. `sort!` will sort numerically if you give it a vector of dates.\
    \ `sort!` will sort numerically if you give it a vector of datetimes. `sort!`\
    \ will sort numerically if you give it a vector of vectors. `sort!` will sort\
    \ numerically if you give it a vector of matrices. `sort!` will sort numerically\
    \ if you give it a vector of arrays of numbers. `sort!` will sort numerically\
    \ if you give it a vector of arrays of strings. `sort!` will sort numerically\
    \ if you give it a vector of arrays of booleans. `sort!` will sort numerically\
    \ if you give it a vector of arrays of tuples. `sort!` will sort numerically if\
    \ you give it a vector of arrays of arrays. `sort!` will sort numerically if you\
    \ give it a vector of arrays of dictionaries. `sort!` will sort numerically if\
    \ you give it a vector of arrays of dates. `sort!` will sort numerically if you\
    \ give it a vector of arrays of datetimes. `sort!` will sort numerically if you\
    \ give it a vector of arrays of vectors. `sort!` will sort numerically if you\
    \ give it a vector of arrays of matrices. `sort!` will sort numerically if you\
    \ give it a vector of arrays of arrays of numbers. `sort!` will sort numerically\
    \ if you give it a vector of arrays of arrays of strings. `sort!` will sort numerically\
    \ if you give it a vector of arrays of arrays of booleans. `sort!` will sort numerically\
    \ if you give it a vector of arrays of arrays of tuples. `sort!` will sort numerically\
    \ if you give it a vector of arrays of arrays of arrays. `sort!` will sort numerically\
    \ if you give it \nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpypmtakwq.jl:13\nin expression starting at\
    \ /tmp/tmpypmtakwq.jl:13\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    using Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwcescad7.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwcescad7.jl:1\n\
    in expression starting at /tmp/tmpwcescad7.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</cell>\n\
    <code language=julia-1.4>\nstrange_sort_list([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    strange_sort_list([2,1,3])\n</cell>\n<code language=julia-1.4>\nstrange_sort_list([3,2,1])\n\
    </cell>\n<code language=julia-1.4>\nstrange_sort_list([2,3,1])\n</cell>\n<code\
    \ language=julia-1.4>\nstrange_sort_list([2,1,3])\n</cell>\n<code language=julia-1.4>\n\
    strange_sort_list([3,2,1])\n</cell>\n<code language=julia-1.4>\nstrange_sort_list([2,3,1])\n\
    </cell>\n<code language=julia-1.4>\nstrange_sort_list([2,1,3])\n</cell>\n<code\
    \ language=julia-1.4>\nstrange_sort_list([3,2,1])\n</cell>\n<code language=julia-1.4>\n\
    strange_sort_list([2,3,1])\n</cell>\n<code language=julia-1.4>\nstrange_sort_list([2,1,3])\n\
    </cell>\n<code language=julia-1.4>\nstrange_sort_list([3,2,1])\n</cell>\n<code\
    \ language=julia-1.4>\nstrange_sort_list([2,3,1])\n</cell>\n<code language=julia-1.4>\n\
    strange_sort_list([2,1,3])\n</cell>\n<code language=julia-1.4>\nstrange_sort_list([3,2,1])\n\
    </cell>\n<code language=julia-1.4>\nstrange_sort_list([2,3,1])\n</cell>\n<code\
    \ language=julia-1.4>\nstrange_sort_list([2,1,3])\n</cell>\n<code language=julia-1.4>\n\
    strange_sort_list([3,2,1])\n</cell>\n<code language=julia-1.4>\nstrange_sort_list([2,3,1])\n\
    </cell>\n<code language=julia-1.4>\nstrange_sort_list([2,1,3])\n</cell>\n<code\
    \ language=julia-1.4>\nstrange_sort_list([3,2,1])\n</cell>\n<code language=julia-1.4>\n\
    strange_sort_list([2,3,1])\n</cell>\n<code language=julia-1.4>\nstrange_sort_list([2,1,3])\n\
    </cell>\n<code language=julia-1.4>\nstrange_sort_list([3,2,1])\n</cell>\n<code\
    \ language=julia-1.4>\nstrange_sort_list([2,3,1])\n</cell\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuad9y73f.jl:13\nin expression starting at\
    \ /tmp/tmpuad9y73f.jl:13\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n\
    <|/ a tags=julia |>\n<| a tags=julia |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcdqvskrw.jl:13\nin expression starting at\
    \ /tmp/tmpcdqvskrw.jl:13\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThis doesn't seem to work. `strange_sort_list([1,2,3,4,5,6,7,8,9,10])`\
    \ returns `[10,9,8,7,6,5,4,3,2,1]`.\n<|/ c |>\n<| c |>\nYes, it does. I tested\
    \ it before posting. Maybe you missed something.\n<|/ c |>\n<| c |>\nOh, I see.\
    \ Sorry, I missed the fact that you were using `sort` instead of `sort!`. Thanks\
    \ for pointing that out.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoet8cmfx.jl:13\nin expression starting at\
    \ /tmp/tmpoet8cmfx.jl:13\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    minimum_index\
    \ = findfirst(i->i==minimum, lst)\n    maximum_index = findfirst(i->i==maximum,\
    \ lst)\n    \n    lst[minimum_index], lst[maximum_index] = lst[maximum_index],\
    \ lst[minimum_index]\n    \n    return lst\nend\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector and returns the number of unique elements in\
    \ the vector.\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9eu0rb3b.jl:18\nin expression starting at\
    \ /tmp/tmp9eu0rb3b.jl:18\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqntca9qv.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpqntca9qv.jl:18\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [4, 3, 2, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:19\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 8, 7, 6, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:20\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 4, 3, 2, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:21\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [9, 8, 7, 6, 5, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:24\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) == [1,"
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</cell>\n\
    <code language=julia-1.5>\nstrange_sort_list(1:10)\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list(1:10)\n</cell>\n<code language=julia-1.5>\nstrange_sort_list(1:10)\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list(1:10)\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list(1:10)\n</cell>\n<code language=julia-1.5>\nstrange_sort_list(1:10)\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list(1:10)\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list(1:10)\n</cell>\n<code language=julia-1.5>\nstrange_sort_list(1:10)\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list(1:10)\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list(1:10)\n</cell>\n<code language=julia-1.5>\nstrange_sort_list(1:10)\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list(1:10)\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list(1:10)\n</cell>\n<code language=julia-1.5>\nstrange_sort_list(1:10)\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list(1:10)\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list(1:10)\n</cell>\n<code language=julia-1.5>\nstrange_sort_list(1:10)\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list(1:10)\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list(1:10)\n</cell>\n<code language=julia-1.5>\nstrange_sort_list(1:10)\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list(1:10)\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list(1:10)\n</cell>\n<code language=julia-1.5>\nstrange_sort_list(1:10)\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list(1:10)\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list(1:10)\n</cell>\n<code language=julia-1.5>\nstrange_sort_list(1:10)\n\
    </cell>\n<code language=julia-\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps8umo3bh.jl:13\nin expression starting at\
    \ /tmp/tmps8umo3bh.jl:13\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    lst\
    \ = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsj7kqrcj.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsj7kqrcj.jl:1\n\
    in expression starting at /tmp/tmpsj7kqrcj.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqntca9qv.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpqntca9qv.jl:18\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [4, 3, 2, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:19\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 8, 7, 6, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:20\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 4, 3, 2, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:21\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [9, 8, 7, 6, 5, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:24\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) == [1,"
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpllrds_r3.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpllrds_r3.jl:1\n\
    in expression starting at /tmp/tmpllrds_r3.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    lst\
    \ = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsj7kqrcj.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsj7kqrcj.jl:1\n\
    in expression starting at /tmp/tmpsj7kqrcj.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</cell>\n\
    <code language=julia-1.5>\nstrange_sort_list([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes in a list of integers and returns\
    \ the sum of the integers in the list.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\
    \t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy27_3mbx.jl:13\nin expression starting at\
    \ /tmp/tmpy27_3mbx.jl:13\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqntca9qv.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpqntca9qv.jl:18\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [4, 3, 2, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:19\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 8, 7, 6, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:20\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 4, 3, 2, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:21\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [9, 8, 7, 6, 5, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:24\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) == [1,"
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqntca9qv.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpqntca9qv.jl:18\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [4, 3, 2, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:19\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 8, 7, 6, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:20\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 4, 3, 2, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:21\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [9, 8, 7, 6, 5, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:24\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) == [1,"
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp22dixz43.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp22dixz43.jl:1\n\
    in expression starting at /tmp/tmp22dixz43.jl:1\n"
  stdout: ''
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpllrds_r3.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpllrds_r3.jl:1\n\
    in expression starting at /tmp/tmpllrds_r3.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqntca9qv.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpqntca9qv.jl:18\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [4, 3, 2, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:19\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 8, 7, 6, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:20\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 4, 3, 2, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:21\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [9, 8, 7, 6, 5, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:24\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) == [1,"
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpllrds_r3.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpllrds_r3.jl:1\n\
    in expression starting at /tmp/tmpllrds_r3.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqntca9qv.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpqntca9qv.jl:18\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [4, 3, 2, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:19\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 8, 7, 6, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:20\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 4, 3, 2, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:21\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [9, 8, 7, 6, 5, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:24\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) == [1,"
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqntca9qv.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpqntca9qv.jl:18\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [4, 3, 2, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:19\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 8, 7, 6, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:20\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 4, 3, 2, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:21\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [9, 8, 7, 6, 5, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:24\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) == [1,"
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n\
    <|/ a |>\n<| c |>\nThis doesn't work if you have a list of strings and want to\
    \ sort them alphabetically. `sort` will sort them lexicographically, not alphabetically.\n\
    <|/ c |>\n<| c |>\nThis doesn't work for me in Julia 1.5.1. I get the following\
    \ error: `MethodError: no method matching sort(::Array{String,1})`\n<|/ c |>\n\
    <| c |>\nThis doesn't work for me in Julia 1.5.1. I get the following error: `MethodError:\
    \ no method matching sort(::Array{String,1})`\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work for me in Julia 1.5.1. I get the following error: `MethodError: no method\
    \ matching sort(::Array{String,1})`\n<|/ c |>\n<| c |>\nThis doesn't work for\
    \ me in Julia 1.5.1. I get the following error: `MethodError: no method matching\
    \ sort(::Array{String,1})`\n<|/ c |>\n<| a tags=julia |>\nI wrote a package that\
    \ does this for you:\nhttps://github.com/jmhoffman/sorting.jl\n<code>\nusing Sorting\n\
    using Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqkoo9wfo.jl:13\nin expression starting at\
    \ /tmp/tmpqkoo9wfo.jl:13\n"
  stdout: ''
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=sorting,julia |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp22eqzerv.jl:13\nin expression starting at\
    \ /tmp/tmp22eqzerv.jl:13\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpllrds_r3.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpllrds_r3.jl:1\n\
    in expression starting at /tmp/tmpllrds_r3.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqntca9qv.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpqntca9qv.jl:18\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [4, 3, 2, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:19\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 8, 7, 6, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:20\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 4, 3, 2, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:21\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [9, 8, 7, 6, 5, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:24\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) == [1,"
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqntca9qv.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpqntca9qv.jl:18\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [4, 3, 2, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:19\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 8, 7, 6, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:20\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 4, 3, 2, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:21\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [9, 8, 7, 6, 5, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:24\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) == [1,"
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n\
    <|/ a tags=sorting,julia |>\n<| c |>\nThis doesn't work. `sort` returns a `Vector{Int64}`,\
    \ not a `Vector{Int}`.\n<|/ c |>\n<| c |>\nI fixed the code. Thanks for pointing\
    \ out.\n<|/ c |>\n<| a tags=sorting,julia |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp16c2_ufz.jl:13\nin expression starting at\
    \ /tmp/tmp16c2_ufz.jl:13\n"
  stdout: ''
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum2\
    \ = minimum(lst)\n    maximum2 = maximum(lst)\n    \n    minimum3 = minimum(lst)\n\
    \    maximum3 = maximum(lst)\n    \n    minimum4 = minimum(lst)\n    maximum4\
    \ = maximum(lst)\n    \n    minimum5 = minimum(lst)\n    maximum5 = maximum(lst)\n\
    \    \n    minimum6 = minimum(lst)\n    maximum6 = maximum(lst)\n    \n    minimum7\
    \ = minimum(lst)\n    maximum7 = maximum(lst)\n    \n    minimum8 = minimum(lst)\n\
    \    maximum8 = maximum(lst)\n    \n    minimum9 = minimum(lst)\n    maximum9\
    \ = maximum(lst)\n    \n    minimum10 = minimum(lst)\n    maximum10 = maximum(lst)\n\
    \    \n    minimum11 = minimum(lst)\n    maximum11 = maximum(lst)\n    \n    minimum12\
    \ = minimum(lst)\n    maximum12 = maximum(lst)\n    \n    minimum13 = minimum(lst)\n\
    \    maximum13 = maximum(lst)\n    \n    minimum14 = minimum(lst)\n    maximum14\
    \ = maximum(lst)\n    \n    minimum15 = minimum(lst)\n    maximum15 = maximum(lst)\n\
    \    \n    minimum16 = minimum(lst)\n    maximum16 = maximum(lst)\n    \n    minimum17\
    \ = minimum(lst)\n    maximum17 = maximum(lst)\n    \n    minimum18 = minimum(lst)\n\
    \    maximum18 = maximum(lst)\n    \n    minimum19 = minimum(lst)\n    maximum19\
    \ = maximum(lst)\n    \n    minimum20 = minimum(lst)\n    maximum20 = maximum(lst)\n\
    \    \n    minimum21 = minimum(lst)\n    maximum21 = maximum(lst)\n    \n    minimum22\
    \ = minimum(lst)\n    maximum22 = maximum(lst)\n    \n    minimum23 = minimum(lst)\n\
    \    maximum23 = maximum(lst)\n    \n    minimum24 = minimum(lst)\n    maximum24\
    \ = maximum(lst)\n    \n    minimum25 = minimum(lst)\n    maximum25 = maximum(lst)\n\
    \    \n    minimum26 = minimum(lst)\n    maximum26 = maximum(lst)\n    \n    minimum27\
    \ = minimum(lst)\n    maximum27 = maximum(lst)\n    \n    minimum28 = minimum(lst)\n\
    \    maximum28 = maximum(lst)\n    \n    minimum\nusing Test\n\n@testset begin\n\
    \ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppqrrfa7b.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppqrrfa7b.jl:1\n\
    in expression starting at /tmp/tmppqrrfa7b.jl:1\n"
  stdout: ''
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n\
    <|/ a tags=julia |>\n<| c |>\nThis doesn't seem to work. `julia> strange_sort_list(1:10)\n\
    10-element Array{Int64,1}:\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n 10\n 11\n 12\n 13\n\
    \ 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n\
    \ 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n\
    \ 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n\
    \ 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n\
    \ 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n\
    \ 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n\
    110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n\
    126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n\
    142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n\
    158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n\
    using Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo4kq9x8q.jl:13\nin expression starting at\
    \ /tmp/tmpo4kq9x8q.jl:13\n"
  stdout: ''
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=sorting,julia |>\nI wrote a package for this:\nhttps://github.com/sjl/sorting.jl\n\
    <code>\njulia> using Sorting\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt8lue73c.jl:13\nin expression starting at\
    \ /tmp/tmpt8lue73c.jl:13\n"
  stdout: ''
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqntca9qv.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpqntca9qv.jl:18\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [4, 3, 2, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:19\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 8, 7, 6, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:20\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 4, 3, 2, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:21\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [9, 8, 7, 6, 5, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:24\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) == [1,"
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpllrds_r3.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpllrds_r3.jl:1\n\
    in expression starting at /tmp/tmpllrds_r3.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqntca9qv.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpqntca9qv.jl:18\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [4, 3, 2, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:19\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 8, 7, 6, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:20\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 4, 3, 2, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:21\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [9, 8, 7, 6, 5, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:24\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) == [1,"
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpllrds_r3.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpllrds_r3.jl:1\n\
    in expression starting at /tmp/tmpllrds_r3.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n\
    <|/ a tags=sorting,julia |>\n<| c |>\nThis doesn't work for me. `sort(lst)` returns\
    \ `ERROR: MethodError: no method matching sort(::Array{Int64,1})`\n<|/ c |>\n\
    <| c |>\nThis doesn't work for me either. `sort(lst)` returns `ERROR: MethodError:\
    \ no method matching sort(::Array{Int64,1})`\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work for me either. `sort(lst)` returns `ERROR: MethodError: no method matching\
    \ sort(::Array{Int64,1})`\n<|/ c |>\n<| c |>\nThis doesn't work for me either.\
    \ `sort(lst)` returns `ERROR: MethodError: no method matching sort(::Array{Int64,1})`\n\
    <|/ c |>\n<| c |>\nThis doesn't work for me either. `sort(lst)` returns `ERROR:\
    \ MethodError: no method matching sort(::Array{Int64,1})`\n<|/ c |>\n<| a |>\n\
    I believe that this is what you want:\n<code>\njulia> function strange_sort_list(lst::Vector{Int64})::Vector{Int64}\n\
    \           lst = sort(lst)\n           lst = reverse(lst)\n           return\
    \ lst\n       end\nstrange_sort_list (generic function with 1 method)\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmf9lu9xg.jl:13\nin expression starting at\
    \ /tmp/tmpmf9lu9xg.jl:13\n"
  stdout: ''
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpllrds_r3.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpllrds_r3.jl:1\n\
    in expression starting at /tmp/tmpllrds_r3.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpllrds_r3.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpllrds_r3.jl:1\n\
    in expression starting at /tmp/tmpllrds_r3.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqntca9qv.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpqntca9qv.jl:18\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [4, 3, 2, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:19\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 8, 7, 6, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:20\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 4, 3, 2, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:21\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [9, 8, 7, 6, 5, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:24\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) == [1,"
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n\
    <|/ a |>\n<| c |>\n`sort!` modifies the original array. `sort!` should be avoided\
    \ if possible. `sort!` should be used only when it is absolutely necessary.\n\
    <|/ c |>\n<| c |>\nI agree with you, but in this case it seems that `sort!` does\
    \ not modify the original array. `sort!` modifies the original array only if the\
    \ original array is mutable and `sort!` returns a new array.\n<|/ c |>\n<| c |>\n\
    `sort!` modifies the original array only if the original array is mutable and\
    \ `sort!` returns a new array. `sort!` modifies the original array only if the\
    \ original array is mutable and `sort!` returns a new array. `sort!` modifies\
    \ the original array only if the original array is mutable and `sort!` returns\
    \ a new array. `sort!` modifies the original array only if the original array\
    \ is mutable and `sort!` returns a new array. `sort!` modifies the original array\
    \ only if the original array is mutable and `sort!` returns a new array. `sort!`\
    \ modifies the original array only if the original array is mutable and `sort!`\
    \ returns a new array. `sort!` modifies the original array only if the original\
    \ array is mutable and `sort!` returns a new array. `sort!` modifies the original\
    \ array only if the original array is mutable and `sort!` returns a new array.\
    \ `sort!` modifies the original array only if the original array is mutable and\
    \ `sort!` returns a new array. `sort!` modifies the original array only if the\
    \ original array is mutable and `sort!` returns a new array. `sort!` modifies\
    \ the original array only if the original array is mutable and `sort!` returns\
    \ a new array. `sort!` modifies the original array only if the original array\
    \ is mutable and `sort!` returns a new array. `sort!` modifies the original array\
    \ only if the original array is mutable and `sort!` returns a new array. `sort!`\
    \ modifies the original array only if the original array is mutable and `sort!`\
    \ returns a new array. `sort!` modifies the original array only if the original\
    \ array is mutable and `sort!` returns a new array. `sort!` modifies the original\
    \ array only if the original array is mutable and `sort!` returns a new array.\
    \ `sort!` modifies the original array only if the original array is mutable and\
    \ `sort!\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplvic53eb.jl:13\nin expression starting at\
    \ /tmp/tmplvic53eb.jl:13\n"
  stdout: ''
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n\
    <|/ a tags=julia,sorting,arrays |>\n<| c |>\nThis doesn't work for me. `sort`\
    \ returns a `Vector{Int64}`, not a `Vector{Int}`.\n<|/ c |>\n<| c |>\nIt works\
    \ for me on Julia 0.6.2\n<|/ c |>\n<| c |>\nIt works for me on Julia 0.6.2\n<|/\
    \ c |>\n<| c |>\nIt works for me on Julia 0.6.2\n<|/ c |>\n<| c |>\nIt works for\
    \ me on Julia 0.6.2\n<|/ c |>\n<| a dscore=5 |>\nIn Julia 0.6.2 you can use the\
    \ sort function on any array and it will return a sorted array:\n<code>\njulia>\
    \ sort([1,2,3])\n3-element Array{Int64,1}:\n 1\n 2\n 3\n</code>\n<|/ a tags=julia,sorting,arrays\
    \ |>\n<| c |>\nIt works for me on Julia 0.6.2\n<|/ c |>\n<| c |>\nIt works for\
    \ me on Julia 0.6.2\n<|/ c |>\n<| c |>\nIt works for me on Julia 0.6.2\n<|/ c\
    \ |>\n<| c |>\nIt works for me on Julia 0.6.2\n<|/ c |>\n<| c |>\nIt works for\
    \ me on Julia 0.6.2\n<|/ c |>\n<| a tags=julia,sorting,arrays |>\nIn Julia 0.6.2\
    \ you can use the sort function on any array and it will return a sorted array:\n\
    <code>\njulia> sort([1,2,3])\n3-element Array{Int64,1}:\n 1\n 2\n 3\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nIt works for me on Julia 0.6.2\n<|/ c |>\n<| c |>\n\
    It works for me on Julia 0.6.2\n<|/ c |>\n<| c |>\nIt works for me on Julia 0.6.2\n\
    <|/ c |>\n<| a tags=julia,sorting,arrays |>\nIn Julia 0.6.2 you can use the sort\
    \ function on any array and it will return a sorted array:\n<code>\njulia> sort([1,2,3])\n\
    3-element Array{Int64,1}:\n 1\n 2\n 3\n</code>\n<|/ a dscore=5 \nusing Test\n\n\
    @testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8uc2pqcq.jl:13\nin expression starting at\
    \ /tmp/tmp8uc2pqcq.jl:13\n"
  stdout: ''
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpllrds_r3.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpllrds_r3.jl:1\n\
    in expression starting at /tmp/tmpllrds_r3.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqntca9qv.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpqntca9qv.jl:18\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [4, 3, 2, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:19\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 8, 7, 6, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:20\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 4, 3, 2, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:21\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [9, 8, 7, 6, 5, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:24\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) == [1,"
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpllrds_r3.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpllrds_r3.jl:1\n\
    in expression starting at /tmp/tmpllrds_r3.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqntca9qv.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpqntca9qv.jl:18\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [4, 3, 2, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:19\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 8, 7, 6, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:20\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 4, 3, 2, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:21\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [9, 8, 7, 6, 5, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:24\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) == [1,"
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpllrds_r3.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpllrds_r3.jl:1\n\
    in expression starting at /tmp/tmpllrds_r3.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    lst\
    \ = sort(lst)\n    \n    lst = lst.map(x -> if x == minimum then maximum else\
    \ x)\n    \n    return lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([1,2,3,4,5,6,7,8,9])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector and returns\
    \ a vector where each element is the sum of the elements in the original vector\
    \ except the element at position i.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\
    \t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"maximum\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpe_mmkgsp.jl:15\nin expression starting at /tmp/tmpe_mmkgsp.jl:15\n"
  stdout: ''
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpllrds_r3.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpllrds_r3.jl:1\n\
    in expression starting at /tmp/tmpllrds_r3.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    using Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwcescad7.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwcescad7.jl:1\n\
    in expression starting at /tmp/tmpwcescad7.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqntca9qv.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpqntca9qv.jl:18\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [4, 3, 2, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:19\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 8, 7, 6, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:20\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 4, 3, 2, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:21\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [9, 8, 7, 6, 5, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:24\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) == [1,"
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n\
    <|/ a tags=julia |>\n<| c |>\nThis doesn't seem to work. `sort(lst)` returns `ERROR:\
    \ MethodError: no method matching sort(::Array{Int64,1})`\n<|/ c |>\n<| c |>\n\
    I tested it on Julia 0.4.0 and it works. What version are you using?\n<|/ c |>\n\
    <| c |>\nI'm on 0.4.0 as well. I'm on 0.4.1 as well. I'm on 0.4.2 as well. I'm\
    \ on 0.4.3 as well. I'm on 0.4.4 as well. I'm on 0.4.5 as well. I'm on 0.4.6 as\
    \ well. I'm on 0.4.7 as well. I'm on 0.4.8 as well. I'm on 0.4.9 as well. I'm\
    \ on 0.5.0. I'm on 0.5.1\n<|/ c |>\n<| c |>\nI'm on 0.4.9 as well. I'm on 0.5.0.\
    \ I'm on 0.5.1\n<|/ c |>\n<| c |>\nI'm on 0.4.9 as well. I'm on 0.5.0. I'm on\
    \ 0.5.1\n<|/ c |>\n<| a dscore=3 |>\nThe function sort() sorts arrays in place,\
    \ so it modifies the original array. \nTo avoid this, you can use the function\
    \ copy() which creates a copy of an array:\n<code>\njulia> sort([1,2,3])\n3-element\
    \ Array{Int64,1}:\n 1\n 2\n 3\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8y2vnevk.jl:13\nin expression starting at\
    \ /tmp/tmp8y2vnevk.jl:13\n"
  stdout: ''
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    lst = sort(lst)\n\
    \    lst = lst.map(x -> minimum < x ? minimum : x < maximum ? x : maximum)\n \
    \   return lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a list of integers and\
    \ returns the list sorted in descending order. \nThe function should return a\
    \ new list and not modify the original list.\nusing Test\n\n@testset begin\n\n\
    candidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    \t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprsxm0r3x.jl:15\nin expression starting at\
    \ /tmp/tmprsxm0r3x.jl:15\n"
  stdout: ''
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpllrds_r3.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpllrds_r3.jl:1\n\
    in expression starting at /tmp/tmpllrds_r3.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n\
    <|/ a tags=julia |>\n<| c |>\nThis does not provide an answer to the question.\
    \ To critique or request clarification from an author, leave a comment below their\
    \ post. - [From Review](/review/low-quality-posts/27827814)\n<|/ c |>\n<| c |>\n\
    I believe it does answer the question. He asked how to sort a list of integers\
    \ in Julia, and I provided a solution that does exactly that. He also asked how\
    \ to reverse the order of the list, and I provided a solution that does exactly\
    \ that. He also asked how to sort a list in a strange order, and I provided a\
    \ solution that does exactly that. He also asked how to sort a list in a strange\
    \ order, and I provided a solution that does exactly that. He also asked how to\
    \ sort a list in a strange order, and I provided a solution that does exactly\
    \ that. He also asked how to sort a list in a strange order, and I provided a\
    \ solution that does exactly that. He also asked how to sort a list in a strange\
    \ order, and I provided a solution that does exactly that. He also asked how to\
    \ sort a list in a strange order, and I provided a solution that does exactly\
    \ that. He also asked how to sort a list in a strange order, and I provided a\
    \ solution that does exactly that.\n<|/ c |>\n<| c |>\nI believe this answer does\
    \ answer the question. He asked how to sort a list of integers in Julia, and I\
    \ provided a solution that does exactly that. He also asked how to reverse the\
    \ order of the list, and I provided a solution that does exactly that. He also\
    \ asked how to sort a list in a strange order, and I provided a solution that\
    \ does exactly that. He also asked how to sort a list in a strange order, and\
    \ I provided a solution that does exactly that. He also asked how to sort a list\
    \ in a strange order, and I provided a solution that does exactly that. He also\
    \ asked how to sort a list in a strange order, and I provided a solution that\
    \ does exactly that. He also asked how to sort a list in a strange order, and\
    \ I provided a solution that does exactly that. He also asked how to sort a list\
    \ in a strange order, and I provided a solution that does exactly that. He also\
    \ asked how to sort a list in a str\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\
    \t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ni6d3hj.jl:13\nin expression starting at\
    \ /tmp/tmp9ni6d3hj.jl:13\n"
  stdout: ''
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqntca9qv.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpqntca9qv.jl:18\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [4, 3, 2, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:19\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 8, 7, 6, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:20\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 4, 3, 2, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:21\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [9, 8, 7, 6, 5, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:24\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) == [1,"
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    lst = sort(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum\nusing Test\n\n@testset begin\n\
    \ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy9zuo4yy.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy9zuo4yy.jl:1\n\
    in expression starting at /tmp/tmpy9zuo4yy.jl:1\n"
  stdout: ''
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    lst\
    \ = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsj7kqrcj.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsj7kqrcj.jl:1\n\
    in expression starting at /tmp/tmpsj7kqrcj.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp22dixz43.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp22dixz43.jl:1\n\
    in expression starting at /tmp/tmp22dixz43.jl:1\n"
  stdout: ''
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    using Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwcescad7.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwcescad7.jl:1\n\
    in expression starting at /tmp/tmpwcescad7.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqntca9qv.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpqntca9qv.jl:18\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [4, 3, 2, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:19\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 8, 7, 6, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:20\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 4, 3, 2, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:21\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [9, 8, 7, 6, 5, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:24\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) == [1,"
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqntca9qv.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpqntca9qv.jl:18\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [4, 3, 2, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:19\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 8, 7, 6, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:20\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 4, 3, 2, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:21\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [9, 8, 7, 6, 5, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:24\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) == [1,"
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpllrds_r3.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpllrds_r3.jl:1\n\
    in expression starting at /tmp/tmpllrds_r3.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    lst\
    \ = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsj7kqrcj.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsj7kqrcj.jl:1\n\
    in expression starting at /tmp/tmpsj7kqrcj.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    lst = sort(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum\nusing Test\n\n@testset begin\n\
    \ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy9zuo4yy.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy9zuo4yy.jl:1\n\
    in expression starting at /tmp/tmpy9zuo4yy.jl:1\n"
  stdout: ''
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqntca9qv.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpqntca9qv.jl:18\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [4, 3, 2, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:19\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 8, 7, 6, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:20\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 4, 3, 2, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:21\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [9, 8, 7, 6, 5, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:24\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) == [1,"
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    \t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4wj0jlv2.jl:13\nin expression starting at\
    \ /tmp/tmp4wj0jlv2.jl:13\n"
  stdout: ''
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum_index\
    \ = findfirst(i->i<=minimum, lst)\n    maximum_index = findfirst(i->i>=maximum,\
    \ lst)\n    \n    minimum_value = minimum(lst[minimum_index:maximum_index])\n\
    \    maximum_value = maximum(lst[minimum_index:maximum_index])\n    \n    minimum_index\
    \ = findfirst(i->i<=minimum, lst)\n    maximum_index = findfirst(i->i>=maximum,\
    \ lst)\n    \n    minimum_value = minimum(lst[minimum_index:maximum_index])\n\
    \    maximum_value = maximum(lst[minimum_index:maximum_index])\n    \n    minimum_index\
    \ = findfirst(i->i<=minimum, lst)\n    maximum_index = findfirst(i->i>=maximum,\
    \ lst)\n    \n    minimum_value = minimum(lst[minimum_index:maximum_index])\n\
    \    maximum_value = maximum(lst[minimum_index:maximum_index])\n    \n    minimum_index\
    \ = findfirst(i->i<=minimum, lst)\n    maximum_index = findfirst(i->i>=maximum,\
    \ lst)\n    \n    minimum_value = minimum(lst[minimum_index:maximum_index])\n\
    \    maximum_value = maximum(lst[minimum_index:maximum_index])\n    \n    minimum_index\
    \ = findfirst(i->i<=minimum, lst)\n    maximum_index = findfirst(i->i>=maximum,\
    \ lst)\n    \n    minimum_value = minimum(lst[minimum_index:maximum_index])\n\
    \    maximum_value = maximum(lst[minimum_index:maximum_index])\n    \n    minimum_index\
    \ = findfirst(i->i<=minimum, lst)\n    maximum_index = findfirst(i->i>=maximum,\
    \ lst)\n    \n    minimum_value = minimum(lst[minimum_index:maximum_index])\n\
    \    maximum_value = maximum(lst[minimum_index:maximum_index])\n    \n    minimum_index\
    \ = findfirst(i->i<=minimum, lst)\n    maximum_index = findfirst(i->i>=maximum,\
    \ lst)\n    \n    minimum_value = minimum(lst[minimum_index:maximum_index])\n\
    \    maximum_value = maximum(lst[minimum_index:maximum_index])\n    \n    minimum_index\
    \ = findfirst(i->i<=minimum, lst)\n    maximum_index = findfirst(i->i>=maximum,\
    \ lst)\n    \n    minimum_value = minimum(lst[minimum_index:maximum_index])\n\
    \    maximum_value = maximum(lst[minimum_index:maximum_index])\n    \n    minimum_index\
    \ = findfirst(i->i<=minimum, lst)\n    maximum_index = findfirst(i->\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuh01c2lm.jl:65\nin expression starting at\
    \ /tmp/tmpuh01c2lm.jl:65\n"
  stdout: ''
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpllrds_r3.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpllrds_r3.jl:1\n\
    in expression starting at /tmp/tmpllrds_r3.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    minimum2 = minimum(lst)\n\
    \    maximum2 = maximum(lst)\n    minimum3 = minimum(lst)\n    maximum3 = maximum(lst)\n\
    \    minimum4 = minimum(lst)\n    maximum4 = maximum(lst)\n    minimum5 = minimum(lst)\n\
    \    maximum5 = maximum(lst)\n    minimum6 = minimum(lst)\n    maximum6 = maximum(lst)\n\
    \    minimum7 = minimum(lst)\n    maximum7 = maximum(lst)\n    minimum8 = minimum(lst)\n\
    \    maximum8 = maximum(lst)\n    minimum9 = minimum(lst)\n    maximum9 = maximum(lst)\n\
    \    minimum10 = minimum(lst)\n    maximum10 = maximum(lst)\n    minimum11 = minimum(lst)\n\
    \    maximum11 = maximum(lst)\n    minimum12 = minimum(lst)\n    maximum12 = maximum(lst)\n\
    \    minimum13 = minimum(lst)\n    maximum13 = maximum(lst)\n    minimum14 = minimum(lst)\n\
    \    maximum14 = maximum(lst)\n    minimum15 = minimum(lst)\n    maximum15 = maximum(lst)\n\
    \    minimum16 = minimum(lst)\n    maximum16 = maximum(lst)\n    minimum17 = minimum(lst)\n\
    \    maximum17 = maximum(lst)\n    minimum18 = minimum(lst)\n    maximum18 = maximum(lst)\n\
    \    minimum19 = minimum(lst)\n    maximum19 = maximum(lst)\n    minimum20 = minimum(lst)\n\
    \    maximum20 = maximum(lst)\n    minimum21 = minimum(lst)\n    maximum21 = maximum(lst)\n\
    \    minimum22 = minimum(lst)\n    maximum22 = maximum(lst)\n    minimum23 = minimum(lst)\n\
    \    maximum23 = maximum(lst)\n    minimum24 = minimum(lst)\n    maximum24 = maximum(lst)\n\
    \    minimum25 = minimum(lst)\n    maximum25 = maximum(lst)\n    minimum26 = minimum(lst)\n\
    \    maximum26 = maximum(lst)\n    minimum27 = minimum(lst)\n    maximum27 = maximum(lst)\n\
    \    minimum28 = minimum(lst)\n    maximum28 = maximum(lst)\n    minimum29 = minimum(lst)\n\
    \    maximum29 = maximum(lst)\n    minimum30 = minimum(lst)\n    maximum30 = maximum(lst)\n\
    \    minimum31 = minimum(lst)\n    maximum31 = maximum(lst)\n    minimum32 = minimum(lst)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7d6liuiu.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7d6liuiu.jl:1\n\
    in expression starting at /tmp/tmp7d6liuiu.jl:1\n"
  stdout: ''
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n\
    <|/ a tags=sorting,julia |>\n<| c |>\nThis doesn't work if you have a vector of\
    \ strings. `sort` will sort lexicographically and `reverse` will reverse the order\
    \ of the strings. So `sort` will sort `[\"a\", \"b\", \"c\"]` into `[\"c\", \"\
    b\", \"a\"]` and `reverse` will reverse that to `[\"a\", \"b\", \"c\"]`.\n<|/\
    \ c |>\n<| a dscore=2 |>\nI came up with a solution which I believe is more efficient\
    \ than sorting the entire vector and then reversing it (as suggested in other\
    \ answers). \n<code>\njulia> function strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n           return [lst[end-i] for i in 1:length(lst)] \n       end\nstrange_sort_list\
    \ (generic function with 1 method)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\
    \t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwba6y7wr.jl:13\nin expression starting at\
    \ /tmp/tmpwba6y7wr.jl:13\n"
  stdout: ''
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n\
    <|/ a tags=sorting,julia |>\n<| c |>\nI like your answer, but I think it would\
    \ be more helpful if you explained what your code does.\n<|/ c |>\n<| c |>\nI\
    \ added some comments to explain my code. Hope it helps.\n<|/ c |>\n<| c |>\n\
    I added some comments to explain my code. Hope it helps.\n<|/ c |>\n<| a dscore=1\
    \ |>\nI like answers above but I think they can be improved.\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyxn6wzht.jl:13\nin expression starting at\
    \ /tmp/tmpyxn6wzht.jl:13\n"
  stdout: ''
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n\
    <|/ a tags=sorting,julia,arrays |>\n<| c |>\nThis does not answer the question.\
    \ The question was about sorting an array of integers, not an array of strings.\
    \ Your answer does not sort the array of integers either.\n<|/ c |>\n<| c |>\n\
    The question was about sorting an array of integers, not an array of strings.\
    \ Your answer does not sort the array of integers either.\n<|/ c |>\n<| a tags=sorting,julia,arrays\
    \ |>\nThe answer by is correct but can be simplified a bit:\n<code>\njulia> function\
    \ strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n           return sort(lst)\n\
    \       end\nstrange_sort_list (generic function with 1 method)\nusing Test\n\n\
    @testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplhdpfpne.jl:13\nin expression starting at\
    \ /tmp/tmplhdpfpne.jl:13\n"
  stdout: ''
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</cell>\n\
    <code language=julia-1.5>\nstrange_sort_list([1,5,2,3,4])\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([1,5,2,3,4])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector and returns a new vector where each element is the product\
    \ of all the elements in the original vector. For example, given [1,2,3], the\
    \ function should return [1,2,3].\nusing Test\n\n@testset begin\n\ncandidate =\
    \ strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\
    \t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwih24_j6.jl:13\nin expression starting at\
    \ /tmp/tmpwih24_j6.jl:13\n"
  stdout: ''
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n\
    <|/ a tags=sorting,julia |>\n<| c |>\nThis doesn't seem to work. `sort([1,2,3])`\
    \ gives `[1,2,3]`, but `sort([3,2,1])` gives `[1,2,3]`.\n<|/ c |>\n<| c |>\nIt\
    \ does work. `sort([3,2,1])` gives `[1,2,3]`. `sort([1,2,3])` gives `[1,2,3]`.\n\
    <|/ c |>\n<| c |>\nYes, it does work. `sort([3,2,1])` gives `[1,2,3]`. `sort([1,2,3])`\
    \ gives `[1,2,3]`.\n<|/ c |>\n<| c |>\nYes, it does work. `sort([3,2,1])` gives\
    \ `[1,2,3]`. `sort([1,2,3])` gives `[1,2,3]`.\n<|/ c |>\n<| c |>\nIt does work.\
    \ `sort([3,2,1])` gives `[1,2,3]`. `sort([1,2,3])` gives `[1,2,3]`.\n<|/ c |>\n\
    <| a dscore=3 |>\nI like using sortperm:\n<code>\njulia> sortperm([3,2,1])\n3-element\
    \ Array{Int64,1}:\n 3\n 1\n 2\n</code>\n<|/ a tags=sorting,julia |>\n<| a tags=sorting,julia\
    \ |>\nThe function sortperm() will do what you want, but it will not do what you\
    \ think it does. sortperm() will sort the array in lexicographical order (i.e.\
    \ it will sort it alphabetically), not numerical order (i.e. it will sort it numerically).\n\
    <code>\njulia> sortperm([3,2,1])\n3-element Array{Int64,1}:\n 3\n 1\n 2\n</code>\n\
    <|/ a dscore=3 |>\n<| a dscore=3 |>\nThe function sortperm() will do what you\
    \ want, but it will not do what you think it does. sortperm() will sort the array\
    \ in lexicographical order (i.e. it will sort it alphabetically), not numerical\
    \ order (i.e. it will sort it numerically).\n<code>\njulia> sortperm([3,2,1])\n\
    3-element Array{Int64,1}:\n 3\n 1\n 2\n</code>\n<|/ a tags=sorting,julia |>\n\
    <| a dscore=3 |>\nThe function sortperm() will do what you wan\nusing Test\n\n\
    @testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpapg4796b.jl:13\nin expression starting at\
    \ /tmp/tmpapg4796b.jl:13\n"
  stdout: ''
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqntca9qv.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpqntca9qv.jl:18\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [4, 3, 2, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:19\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 8, 7, 6, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:20\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 4, 3, 2, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:21\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [9, 8, 7, 6, 5, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:24\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) == [1,"
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpllrds_r3.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpllrds_r3.jl:1\n\
    in expression starting at /tmp/tmpllrds_r3.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpllrds_r3.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpllrds_r3.jl:1\n\
    in expression starting at /tmp/tmpllrds_r3.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=sorting,julia |>\nThe other answers here are great,\
    \ but I thought I'd add my own solution, which is more general:\n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9oras_8p.jl:13\nin expression starting at\
    \ /tmp/tmp9oras_8p.jl:13\n"
  stdout: ''
  timestamp: 1660014840
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n\
    <|/ a tags=sorting,julia |>\n<| c |>\nThis doesn't work for me. `sort` returns\
    \ `ERROR: MethodError: no method matching sort(::Array{Int64,1})`\n<|/ c |>\n\
    <| c |>\n`sort` works for me on Julia 0.6.2\n<|/ c |>\n<| c |>\nIt works for me\
    \ on Julia 0.6.2\n<|/ c |>\n<| c |>\nIt works for me on Julia 0.6.2\n<|/ c |>\n\
    <| c |>\nIt works for me on Julia 0.6.2\n<|/ c |>\n<| a tags=sorting,julia |>\n\
    <code>\njulia> sort([3,2,1])\n3-element Array{Int64,1}:\n 1\n 2\n 3\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgeb8mjxy.jl:13\nin expression starting at\
    \ /tmp/tmpgeb8mjxy.jl:13\n"
  stdout: ''
  timestamp: 1660014841
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    lst\
    \ = sort(lst)\n    \n    lst = lst.map(x -> if x == minimum then maximum else\
    \ x)\n    \n    return lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a list of integers and\
    \ returns the sum of all integers in the list.\nusing Test\n\n@testset begin\n\
    \ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"maximum\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9gmej7iu.jl:15\nin expression starting at /tmp/tmp9gmej7iu.jl:15\n"
  stdout: ''
  timestamp: 1660014841
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    \t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2c9o71g1.jl:13\nin expression starting at\
    \ /tmp/tmp2c9o71g1.jl:13\n"
  stdout: ''
  timestamp: 1660014841
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</cell>\n\
    <code language=julia-1.5>\nstrange_sort_list(1:10)\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list(1:100)\n</cell>\n<code language=julia-1.5>\nstrange_sort_list(1:1000)\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list(1:10000)\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list(1:100000)\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list(1:1000000)\n</cell>\n<code language=julia-1.5>\nstrange_sort_list(1:10000000)\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list(1:100000000)\n</cell>\n\
    <code language=julia-1.5>\nstrange_sort_list(1:1000000000)\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list(1:10000000000)\n</cell>\n<code language=julia-1.5>\nstrange_sort_list(1:100000000000)\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list(1:1000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstrange_sort_list(1:10000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list(1:100000000000000)\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list(1:1000000000000000)\n</cell>\n<code language=julia-1.5>\nstrange_sort_list(1:10000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list(1:100000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list(1:1000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list(1:10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list(1:100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list(1:1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list(1:10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list(1:100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list(1:1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list(1:\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp74b82boa.jl:13\nin expression starting at\
    \ /tmp/tmp74b82boa.jl:13\n"
  stdout: ''
  timestamp: 1660014841
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqntca9qv.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpqntca9qv.jl:18\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [4, 3, 2, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:19\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 8, 7, 6, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:20\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 4, 3, 2, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:21\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [9, 8, 7, 6, 5, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:24\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) == [1,"
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqntca9qv.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpqntca9qv.jl:18\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [4, 3, 2, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:19\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 8, 7, 6, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:20\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 4, 3, 2, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:21\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [9, 8, 7, 6, 5, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:24\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) == [1,"
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n\
    <|/ a tags=sorting,julia,arrays |>\n<| a dscore=2 |>\nI came up with a solution\
    \ that is more efficient than sorting the array twice. \n<code>\nusing Test\n\n\
    @testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo0ha5doi.jl:13\nin expression starting at\
    \ /tmp/tmpo0ha5doi.jl:13\n"
  stdout: ''
  timestamp: 1660014841
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqntca9qv.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpqntca9qv.jl:18\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [4, 3, 2, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:19\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 8, 7, 6, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:20\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 4, 3, 2, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:21\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [9, 8, 7, 6, 5, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:24\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) == [1,"
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    lst\
    \ = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsj7kqrcj.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsj7kqrcj.jl:1\n\
    in expression starting at /tmp/tmpsj7kqrcj.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpllrds_r3.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpllrds_r3.jl:1\n\
    in expression starting at /tmp/tmpllrds_r3.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    lst = sort(lst)\n\
    \    lst = lst.map(x -> if x == minimum then maximum else x)\n    return lst\n\
    end\n</code>\n<|/ a tags=julia,sorting,arrays |>\n<| c |>\nThis is not the correct\
    \ solution. `sort` sorts lexicographically, not numerically. `sort!` will sort\
    \ numerically, but will also change the order of the elements in the original\
    \ array. `sort!` also has some performance issues, see [here](https://stackoverflow.com/questions/47702922/julia-sort-performance-issue).\n\
    <|/ c |>\n<| c |>\nI agree with you, `sort!` will change the order of the elements\
    \ in the original array. `sort!` also has some performance issues, see [here](https://stackoverflow.com/questions/47702922/julia-sort-performance-issue).\n\
    <|/ c |>\n<| c |>\nI agree with you, `sort!` will change the order of the elements\
    \ in the original array. `sort!` also has some performance issues, see [here](https://stackoverflow.com/questions/47702922/julia-sort-performance-issue).\n\
    <|/ c |>\n<| c |>\nI agree with you, `sort!` will change the order of the elements\
    \ in the original array. `sort!` also has some performance issues, see [here](https://stackoverflow.com/questions/47702922/julia-sort-performance-issue).\n\
    <|/ c |>\n<| c |>\nI agree with you, `sort!` will change the order of the elements\
    \ in the original array. `sort!` also has some performance issues, see [here](https://stackoverflow.com/questions/47702922/julia-sort-performance-issue).\n\
    <|/ c |>\n<| a |>\nThe answer by is correct, but I thought I'd add some explanation\
    \ as to why it works.\nThe key point is that sort sorts lexicographically, not\
    \ numerically. sort! will sort numerically, but will also change the order of\
    \ the elements in the original array. sort! also has some performance issues,\
    \ see here.\nThe key point is that sort sorts lexicographically, not numerically.\
    \ sort! will sort numerically, but will also change the order of the elements\
    \ in the original array. sort! also has some performance issues, see here.\nThe\
    \ key point is that sort sorts lexicographically, not numerically. sort! will\
    \ sort numerically, but will also change the order of the elements in the original\
    \ array\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"maximum\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4rtfn6u7.jl:12\nin expression starting at /tmp/tmp4rtfn6u7.jl:12\n"
  stdout: ''
  timestamp: 1660014841
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqntca9qv.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpqntca9qv.jl:18\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [4, 3, 2, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:19\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 8, 7, 6, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:20\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 4, 3, 2, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:21\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [9, 8, 7, 6, 5, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:24\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) == [1,"
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqntca9qv.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpqntca9qv.jl:18\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [4, 3, 2, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:19\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 8, 7, 6, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:20\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 4, 3, 2, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:21\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [9, 8, 7, 6, 5, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:24\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) == [1,"
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n\
    <|/ a tags=sorting,julia |>\n<| c |>\nThis doesn't work for me. `sort` returns\
    \ a `Vector{Int64}`, but `reverse` expects a `Vector{Int}`. `reverse(sort(lst))`\
    \ works, but `reverse(sort(lst))[1]` throws an error.\n<|/ c |>\n<| c |>\n`sort`\
    \ returns a `Vector{Int64}`, but `reverse` expects a `Vector{Int}`. `reverse(sort(lst))`\
    \ works, but `reverse(sort(lst))[1]` throws an error.\n<|/ c |>\n<| c |>\n`reverse(sort(lst))[1]`\
    \ throws an error because `sort` returns a `Vector{Int64}`, but `reverse` expects\
    \ a `Vector{Int}`. `reverse(sort(lst))[1]` throws an error because `sort` returns\
    \ a `Vector{Int64}`, but `reverse` expects a `Vector{Int}`. `reverse(sort(lst))[1]`\
    \ throws an error because `sort` returns a `Vector{Int64}`, but `reverse` expects\
    \ a `Vector{Int}`. `reverse(sort(lst))[1]` throws an error because `sort` returns\
    \ a `Vector{Int64}`, but `reverse` expects a `Vector{Int}`. `reverse(sort(lst))[1]`\
    \ throws an error because `sort` returns a `Vector{Int64}`, but `reverse` expects\
    \ a `Vector{Int}`. `reverse(sort(lst))[1]` throws an error because `sort` returns\
    \ a `Vector{Int64}`, but `reverse` expects a `Vector{Int}`. `reverse(sort(lst))[1]`\
    \ throws an error because `sort` returns a `Vector{Int64}`, but `reverse` expects\
    \ a `Vector{Int}`. `reverse(sort(lst))[1]` throws an error because `sort` returns\
    \ a `Vector{Int64}`, but `reverse` expects a `Vector{Int}`. `reverse(sort(lst))[1]`\
    \ throws an error because `sort` returns a `Vector{Int64}`, but `reverse` expects\
    \ a `Vector{Int}`. `reverse(sort(lst))[1]` throws an error because `sort` returns\
    \ a `Vector{Int64}`, but `reverse` expects a `Vector{Int}`. `reverse(sort(lst))[1]`\
    \ throws an error because `sort` returns a `Vector{Int64}`, but `reverse` \nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx6juv7gb.jl:13\nin expression starting at\
    \ /tmp/tmpx6juv7gb.jl:13\n"
  stdout: ''
  timestamp: 1660014841
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    using Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwcescad7.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwcescad7.jl:1\n\
    in expression starting at /tmp/tmpwcescad7.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpllrds_r3.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpllrds_r3.jl:1\n\
    in expression starting at /tmp/tmpllrds_r3.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqntca9qv.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpqntca9qv.jl:18\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [4, 3, 2, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:19\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 8, 7, 6, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:20\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 4, 3, 2, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:21\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [9, 8, 7, 6, 5, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:24\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) == [1,"
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqntca9qv.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpqntca9qv.jl:18\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [4, 3, 2, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:19\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 8, 7, 6, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:20\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 4, 3, 2, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:21\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [9, 8, 7, 6, 5, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:24\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) == [1,"
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</cell>\n\
    <code language=julia-1.5>\nstrange_sort_list([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ the sum of the squares of the integers in the vector.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_0m9j6at.jl:13\nin expression starting at\
    \ /tmp/tmp_0m9j6at.jl:13\n"
  stdout: ''
  timestamp: 1660014841
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    minimum2 = minimum(lst)\n\
    \    maximum2 = maximum(lst)\n    minimum3 = minimum(lst)\n    maximum3 = maximum(lst)\n\
    \    minimum4 = minimum(lst)\n    maximum4 = maximum(lst)\n    minimum5 = minimum(lst)\n\
    \    maximum5 = maximum(lst)\n    minimum6 = minimum(lst)\n    maximum6 = maximum(lst)\n\
    \    minimum7 = minimum(lst)\n    maximum7 = maximum(lst)\n    minimum8 = minimum(lst)\n\
    \    maximum8 = maximum(lst)\n    minimum9 = minimum(lst)\n    maximum9 = maximum(lst)\n\
    \    minimum10 = minimum(lst)\n    maximum10 = maximum(lst)\n    minimum11 = minimum(lst)\n\
    \    maximum11 = maximum(lst)\n    minimum12 = minimum(lst)\n    maximum12 = maximum(lst)\n\
    \    minimum13 = minimum(lst)\n    maximum13 = maximum(lst)\n    minimum14 = minimum(lst)\n\
    \    maximum14 = maximum(lst)\n    minimum15 = minimum(lst)\n    maximum15 = maximum(lst)\n\
    \    minimum16 = minimum(lst)\n    maximum16 = maximum(lst)\n    minimum17 = minimum(lst)\n\
    \    maximum17 = maximum(lst)\n    minimum18 = minimum(lst)\n    maximum18 = maximum(lst)\n\
    \    minimum19 = minimum(lst)\n    maximum19 = maximum(lst)\n    minimum20 = minimum(lst)\n\
    \    maximum20 = maximum(lst)\n    minimum21 = minimum(lst)\n    maximum21 = maximum(lst)\n\
    \    minimum22 = minimum(lst)\n    maximum22 = maximum(lst)\n    minimum23 = minimum(lst)\n\
    \    maximum23 = maximum(lst)\n    minimum24 = minimum(lst)\n    maximum24 = maximum(lst)\n\
    \    minimum25 = minimum(lst)\n    maximum25 = maximum(lst)\n    minimum26 = minimum(lst)\n\
    \    maximum26 = maximum(lst)\n    minimum27 = minimum(lst)\n    maximum27 = maximum(lst)\n\
    \    minimum28 = minimum(lst)\n    maximum28 = maximum(lst)\n    minimum29 = minimum(lst)\n\
    \    maximum29 = maximum(lst)\n    minimum30 = minimum(lst)\n    maximum30 = maximum(lst)\n\
    \    minimum31 = minimum(lst)\n    maximum31 = maximum(lst)\n    minimum32 = minimum(lst)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7d6liuiu.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7d6liuiu.jl:1\n\
    in expression starting at /tmp/tmp7d6liuiu.jl:1\n"
  stdout: ''
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqntca9qv.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpqntca9qv.jl:18\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [4, 3, 2, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:19\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 8, 7, 6, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:20\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 4, 3, 2, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:21\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [9, 8, 7, 6, 5, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:24\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) == [1,"
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n\
    <|/ a |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\
    \t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkkip2jfq.jl:13\nin expression starting at\
    \ /tmp/tmpkkip2jfq.jl:13\n"
  stdout: ''
  timestamp: 1660014841
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqntca9qv.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpqntca9qv.jl:18\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [4, 3, 2, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:19\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 8, 7, 6, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:20\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 4, 3, 2, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:21\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [9, 8, 7, 6, 5, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:24\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) == [1,"
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqntca9qv.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpqntca9qv.jl:18\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [4, 3, 2, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:19\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 8, 7, 6, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:20\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 4, 3, 2, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:21\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [9, 8, 7, 6, 5, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:24\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) == [1,"
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpllrds_r3.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpllrds_r3.jl:1\n\
    in expression starting at /tmp/tmpllrds_r3.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    lst\
    \ = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\nusing Test\n\n\
    @testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp234oplvr.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp234oplvr.jl:1\n\
    in expression starting at /tmp/tmp234oplvr.jl:1\n"
  stdout: ''
  timestamp: 1660014841
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    lst = sort(lst)\n\
    \    lst = lst.map(x -> if x == minimum then maximum else x)\n    return lst\n\
    end\n</code>\n<|/ a tags=sorting,julia |>\n<| c |>\nThis doesn't work if you have\
    \ negative numbers in the list\n<|/ c |>\n<| a tags=sorting,julia |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"maximum\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpohpvkddh.jl:12\nin expression starting at /tmp/tmpohpvkddh.jl:12\n"
  stdout: ''
  timestamp: 1660014841
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n\
    <|/ a |>\n<| c |>\nThis doesn't seem to work. `strange_sort_list([1,2,3,4,5,6,7,8,9,10])`\
    \ returns `[10,9,8,7,6,5,4,3,2,1]`.\n<|/ c |>\n<| c |>\nIt does work. `strange_sort_list([1,2,3,4,5,6,7,8,9,10])`\
    \ returns `[10,9,8,7,6,5,4,3,2,1]`. What do you mean by \"doesn't work\"?\n<|/\
    \ c |>\n<| c |>\nIt doesn't sort the list as expected. `strange_sort_list([1,2,3,4,5,6,7,8,9,10])`\
    \ returns `[10,9,8,7,6,5,4,3,2,1]`.\n<|/ c |>\n<| c |>\nIt does work. `strange_sort_list([1,2,3,4,5,6,7,8,9,10])`\
    \ returns `[10,9,8,7,6,5,4,3,2,1]`. What do you mean by \"doesn't work\"?\n<|/\
    \ c |>\n<| c |>\nIt doesn't sort the list as expected. `strange_sort_list([1,2,3,4,5,6,7,8,9,10])`\
    \ returns `[10,9,8,7,6,5,4,3,2,1]`.\n<|/ c |>\n<| a dscore=2 |>\nThe easiest way\
    \ is to use sort!\n<code>\njulia> sort!([1,2,3,4,5,6,7,8,9,10])\n10-element Array{Int64,1}:\n\
    \ 10\n 9\n 8\n 7\n 6\n 5\n 4\n 3\n 2\n 1\n</code>\n<|/ a tags=julia,sorting |>\n\
    <| a tags=julia,sorting |>\n<code>\njulia> function strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n           return sort(lst)\n       end\nstrange_sort_list (generic function\
    \ with 1 method)\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7gidqot7.jl:13\nin expression starting at\
    \ /tmp/tmp7gidqot7.jl:13\n"
  stdout: ''
  timestamp: 1660014841
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpllrds_r3.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpllrds_r3.jl:1\n\
    in expression starting at /tmp/tmpllrds_r3.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    lst = sort(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum\nusing Test\n\n@testset begin\n\
    \ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy9zuo4yy.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy9zuo4yy.jl:1\n\
    in expression starting at /tmp/tmpy9zuo4yy.jl:1\n"
  stdout: ''
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqntca9qv.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpqntca9qv.jl:18\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [4, 3, 2, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:19\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 8, 7, 6, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:20\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 4, 3, 2, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:21\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [9, 8, 7, 6, 5, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:24\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) == [1,"
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=sorting,julia,list |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4wxpms11.jl:13\nin expression starting at\
    \ /tmp/tmp4wxpms11.jl:13\n"
  stdout: ''
  timestamp: 1660014841
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    \n    lst = sort(lst)\n    \n    i = 0\n    \n    while i < length(lst)\n\
    \        \n        if lst[i] < lst[i-1]\n            \n            lst[i], lst[i-1]\
    \ = lst[i-1], lst[i]\n            \n            i += 1\n            \n       \
    \ elseif lst[i] > lst[i-1]\n            \n            lst[i], lst[i-1] = lst[i-1],\
    \ lst[i]\n            \n            i += 1\n            \n        else\n     \
    \       \n            i += 1\n            \n        end\n        \n    end\n \
    \   \n    return lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([1,2,3,4,5,6,7,8,9])\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list([2,1,3,4,5,6,7,8,9])\n</cell>\n\
    <code language=julia-1.5>\nstrange_sort_list([2,1,3,4,5,6,7,8,9])\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list([2,1,3,4,5,6,7,8,9])\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list([2,1,3,4,5,6,7,8,9])\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list([2,1,3,4,5,6,7,8,9])\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list([2,1,3,4,5,6,7,8,9])\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list([2,1,3,4,5,6,7,8,9])\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list([2,1,3,4,5,6,7,8,9])\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list([2,1,3,4,5,6,7,8,9])\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list([2,1,3,4,5,6,7,8,9])\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list([2,1,3,4,5,6,7,8,9])\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list([2,1,3,4,5,6,7,8,9])\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list([2,1,3,4,5,6,7,8,9])\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list([2,1,3,4,5,6,7,8,9])\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list([2,1,3,4,5,\nusing Test\n\n@testset begin\n\
    \ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt1pk4p17.jl:38\nin expression starting at\
    \ /tmp/tmpt1pk4p17.jl:38\n"
  stdout: ''
  timestamp: 1660014841
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpllrds_r3.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpllrds_r3.jl:1\n\
    in expression starting at /tmp/tmpllrds_r3.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    lst\
    \ = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\nusing Test\n\n\
    @testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp234oplvr.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp234oplvr.jl:1\n\
    in expression starting at /tmp/tmp234oplvr.jl:1\n"
  stdout: ''
  timestamp: 1660014841
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpllrds_r3.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpllrds_r3.jl:1\n\
    in expression starting at /tmp/tmpllrds_r3.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n\
    <|/ a tags=sorting,julia |>\n<| c |>\nThis doesn't work if you have negative numbers.\
    \ `sort` will sort them in descending order. `reverse` will reverse the order\
    \ of the numbers. `sort!` will sort them in ascending order. `reverse!` will reverse\
    \ the order of the numbers. `sort!` will sort them in ascending order. `reverse!`\
    \ will reverse the order of the numbers. `sort!` will sort them in ascending order.\
    \ `reverse!` will reverse the order of the numbers. `sort!` will sort them in\
    \ ascending order. `reverse!` will reverse the order of the numbers. `sort!` will\
    \ sort them in ascending order. `reverse!` will reverse the order of the numbers.\
    \ `sort!` will sort them in ascending order. `reverse!` will reverse the order\
    \ of the numbers. `sort!` will sort them in ascending order. `reverse!` will reverse\
    \ the order of the numbers. `sort!` will sort them in ascending order. `reverse!`\
    \ will reverse the order of the numbers. `sort!` will sort them in ascending order.\
    \ `reverse!` will reverse the order of the numbers. `sort!` will sort them in\
    \ ascending order. `reverse!` will reverse the order of the numbers. `sort!` will\
    \ sort them in ascending order. `reverse!` will reverse the order of the numbers.\
    \ `sort!` will sort them in ascending order. `reverse!` will reverse the order\
    \ of the numbers. `sort!` will sort them in ascending order. `reverse!` will reverse\
    \ the order of the numbers. `sort!` will sort them in ascending order. `reverse!`\
    \ will reverse the order of the numbers. `sort!` will sort them in ascending order.\
    \ `reverse!` will reverse the order of the numbers. `sort!` will sort them in\
    \ ascending order. `reverse!` will reverse the order of the numbers. `sort!` will\
    \ sort them in ascending order. `reverse!` will reverse the order of the numbers.\
    \ `sort!` will sort them in ascending order. `reverse!` will reverse the order\
    \ of the numbers. `sort!` will sort them in ascending order. `reverse!` will reverse\
    \ the order of the numbers. `sort!` will sort them in asc\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqp7fyf18.jl:13\nin expression starting at\
    \ /tmp/tmpqp7fyf18.jl:13\n"
  stdout: ''
  timestamp: 1660014841
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqntca9qv.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpqntca9qv.jl:18\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [4, 3, 2, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:19\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 8, 7, 6, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:20\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 4, 3, 2, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:21\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [9, 8, 7, 6, 5, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:24\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) == [1,"
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpllrds_r3.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpllrds_r3.jl:1\n\
    in expression starting at /tmp/tmpllrds_r3.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpllrds_r3.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpllrds_r3.jl:1\n\
    in expression starting at /tmp/tmpllrds_r3.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    minimum2 = minimum(lst)\n\
    \    maximum2 = maximum(lst)\n    minimum3 = minimum(lst)\n    maximum3 = maximum(lst)\n\
    \    minimum4 = minimum(lst)\n    maximum4 = maximum(lst)\n    minimum5 = minimum(lst)\n\
    \    maximum5 = maximum(lst)\n    minimum6 = minimum(lst)\n    maximum6 = maximum(lst)\n\
    \    minimum7 = minimum(lst)\n    maximum7 = maximum(lst)\n    minimum8 = minimum(lst)\n\
    \    maximum8 = maximum(lst)\n    minimum9 = minimum(lst)\n    maximum9 = maximum(lst)\n\
    \    minimum10 = minimum(lst)\n    maximum10 = maximum(lst)\n    minimum11 = minimum(lst)\n\
    \    maximum11 = maximum(lst)\n    minimum12 = minimum(lst)\n    maximum12 = maximum(lst)\n\
    \    minimum13 = minimum(lst)\n    maximum13 = maximum(lst)\n    minimum14 = minimum(lst)\n\
    \    maximum14 = maximum(lst)\n    minimum15 = minimum(lst)\n    maximum15 = maximum(lst)\n\
    \    minimum16 = minimum(lst)\n    maximum16 = maximum(lst)\n    minimum17 = minimum(lst)\n\
    \    maximum17 = maximum(lst)\n    minimum18 = minimum(lst)\n    maximum18 = maximum(lst)\n\
    \    minimum19 = minimum(lst)\n    maximum19 = maximum(lst)\n    minimum20 = minimum(lst)\n\
    \    maximum20 = maximum(lst)\n    minimum21 = minimum(lst)\n    maximum21 = maximum(lst)\n\
    \    minimum22 = minimum(lst)\n    maximum22 = maximum(lst)\n    minimum23 = minimum(lst)\n\
    \    maximum23 = maximum(lst)\n    minimum24 = minimum(lst)\n    maximum24 = maximum(lst)\n\
    \    minimum25 = minimum(lst)\n    maximum25 = maximum(lst)\n    minimum26 = minimum(lst)\n\
    \    maximum26 = maximum(lst)\n    minimum27 = minimum(lst)\n    maximum27 = maximum(lst)\n\
    \    minimum28 = minimum(lst)\n    maximum28 = maximum(lst)\n    minimum29 = minimum(lst)\n\
    \    maximum29 = maximum(lst)\n    minimum30 = minimum(lst)\n    maximum30 = maximum(lst)\n\
    \    minimum31 = minimum(lst)\n    maximum31 = maximum(lst)\n    minimum32 = minimum(lst)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7d6liuiu.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7d6liuiu.jl:1\n\
    in expression starting at /tmp/tmp7d6liuiu.jl:1\n"
  stdout: ''
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqntca9qv.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpqntca9qv.jl:18\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [4, 3, 2, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:19\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 8, 7, 6, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:20\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 4, 3, 2, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:21\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [9, 8, 7, 6, 5, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:24\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) == [1,"
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqntca9qv.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpqntca9qv.jl:18\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [4, 3, 2, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:19\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 8, 7, 6, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:20\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 4, 3, 2, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:21\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [9, 8, 7, 6, 5, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:24\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) == [1,"
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqntca9qv.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpqntca9qv.jl:18\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [4, 3, 2, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:19\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 8, 7, 6, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:20\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 4, 3, 2, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:21\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [9, 8, 7, 6, 5, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:24\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) == [1,"
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    \t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmputbk4x2b.jl:13\nin expression starting at\
    \ /tmp/tmputbk4x2b.jl:13\n"
  stdout: ''
  timestamp: 1660014841
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqntca9qv.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpqntca9qv.jl:18\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [4, 3, 2, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:19\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 8, 7, 6, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:20\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 4, 3, 2, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:21\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [9, 8, 7, 6, 5, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:24\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) == [1,"
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    lst = sort(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum\nusing Test\n\n@testset begin\n\
    \ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy9zuo4yy.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy9zuo4yy.jl:1\n\
    in expression starting at /tmp/tmpy9zuo4yy.jl:1\n"
  stdout: ''
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=sorting,julia |>\n<code>\njulia> function strange_sort(lst::Vector{Int64})\n\
    \           return sort(lst)\n       end\nstrange_sort (generic function with\
    \ 1 method)\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8,\
    \ 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp4ktov8p.jl:13\nin expression starting at\
    \ /tmp/tmpp4ktov8p.jl:13\n"
  stdout: ''
  timestamp: 1660014841
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpllrds_r3.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpllrds_r3.jl:1\n\
    in expression starting at /tmp/tmpllrds_r3.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    lst\
    \ = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsj7kqrcj.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsj7kqrcj.jl:1\n\
    in expression starting at /tmp/tmpsj7kqrcj.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpllrds_r3.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpllrds_r3.jl:1\n\
    in expression starting at /tmp/tmpllrds_r3.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    minimum, maximum\
    \ = minimum, maximum\n    minimum, maximum = minimum + maximum, minimum + maximum\n\
    \    minimum, maximum = minimum - maximum, minimum - maximum\n    minimum, maximum\
    \ = minimum + maximum, minimum + maximum\n    minimum, maximum = minimum - maximum,\
    \ minimum - maximum\n    minimum, maximum = minimum + maximum, minimum + maximum\n\
    \    minimum, maximum = minimum - maximum, minimum - maximum\n    minimum, maximum\
    \ = minimum + maximum, minimum + maximum\n    minimum, maximum = minimum - maximum,\
    \ minimum - maximum\n    minimum, maximum = minimum + maximum, minimum + maximum\n\
    \    minimum, maximum = minimum - maximum, minimum - maximum\n    minimum, maximum\
    \ = minimum + maximum, minimum + maximum\n    minimum, maximum = minimum - maximum,\
    \ minimum - maximum\n    minimum, maximum = minimum + maximum, minimum + maximum\n\
    \    minimum, maximum = minimum - maximum, minimum - maximum\n    minimum, maximum\
    \ = minimum + maximum, minimum + maximum\n    minimum, maximum = minimum - maximum,\
    \ minimum - maximum\n    minimum, maximum = minimum + maximum, minimum + maximum\n\
    \    minimum, maximum = minimum - maximum, minimum - maximum\n    minimum, maximum\
    \ = minimum + maximum, minimum + maximum\n    minimum, maximum = minimum - maximum,\
    \ minimum - maximum\n    minimum, maximum = minimum + maximum, minimum + maximum\n\
    \    minimum, maximum = minimum - maximum, minimum - maximum\n    minimum, maximum\
    \ = minimum + maximum, minimum + maximum\n    minimum, maximum = minimum - maximum,\
    \ minimum - maximum\n    minimum, maximum = minimum + maximum, minimum + maximum\n\
    \    minimum, maximum = minimum - maximum, minimum - maximum\n    minimum, maximum\
    \ = minimum + maximum, minimum + maximum\n    minimum, maximum = minimum - maximum,\
    \ minimum - maximum\n    minimum, maximum = minimum + maximum, minimum + maximum\n\
    \    minimum, maximum = minimum - maximum, minimum - maximum\n    minimum, maximum\
    \ = minimum + maximum, minimum + maximum\n    minimum, maximum = minimum - maximum,\
    \ minimum - maximum\n    minimum, maximum = minimum + maximum, minimum + maximum\n\
    \    minimum, maximum = minimum - maximum, minimum - maximum\n    minimum, maximum\
    \ = minimum + maximum, minimum + maximum\n    minimum, maximum = minimum - maximum,\
    \ minimum - maximum\n    minimum, maximum = minimum + maximum, minimum + maximum\n\
    \    minimum, maximum = minimum - \nusing Test\n\n@testset begin\n\ncandidate\
    \ = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\
    \t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsid1tpud.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsid1tpud.jl:1\n\
    in expression starting at /tmp/tmpsid1tpud.jl:1\n"
  stdout: ''
  timestamp: 1660014841
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpllrds_r3.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpllrds_r3.jl:1\n\
    in expression starting at /tmp/tmpllrds_r3.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</cell>\n\
    <code language=julia-1.5>\nstrange_sort_list(Int64[1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of integers and returns\
    \ a vector of strings in alphabetical order.\nusing Test\n\n@testset begin\n\n\
    candidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    \t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvivpmqz7.jl:13\nin expression starting at\
    \ /tmp/tmpvivpmqz7.jl:13\n"
  stdout: ''
  timestamp: 1660014841
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpllrds_r3.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpllrds_r3.jl:1\n\
    in expression starting at /tmp/tmpllrds_r3.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgtjnhwfc.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgtjnhwfc.jl:1\n\
    in expression starting at /tmp/tmpgtjnhwfc.jl:1\n"
  stdout: ''
  timestamp: 1660014841
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't answer the question. `strange_sort_list([2,4,6,8,10,12,14,16,18,20])`\
    \ returns `[2,4,6,8,10,12,14,16,18,20]`, not `[2,4,6,8,10,14,16,18,20,12]`.\n\
    <|/ c |>\n<| c |>\nI thought the question was about sorting in general. I'll edit\
    \ the answer to include a general solution.\n<|/ c |>\n<| c |>\nI edited the answer\
    \ to include a general solution. Hope it helps.\n<|/ c |>\n<| a tags=sorting,julia\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq0luqy47.jl:13\nin expression starting at\
    \ /tmp/tmpq0luqy47.jl:13\n"
  stdout: ''
  timestamp: 1660014841
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpllrds_r3.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpllrds_r3.jl:1\n\
    in expression starting at /tmp/tmpllrds_r3.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n\
    <|/ a tags=julia,sorting |>\n<| a tags=julia,sorting |>\n<code>\nusing Test\n\n\
    @testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcrtso6mj.jl:13\nin expression starting at\
    \ /tmp/tmpcrtso6mj.jl:13\n"
  stdout: ''
  timestamp: 1660014841
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqntca9qv.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpqntca9qv.jl:18\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [4, 3, 2, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:19\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 8, 7, 6, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:20\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 4, 3, 2, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:21\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [9, 8, 7, 6, 5, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:24\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) == [1,"
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum_index\
    \ = findfirst(i->lst[i]==minimum, lst)\n    maximum_index = findfirst(i->lst[i]==maximum,\
    \ lst)\n    \n    minimum_index == maximum_index ? \n        lst[minimum_index]\
    \ : \n        lst[minimum_index] .. lst[maximum_index]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,
    0 broken.

    in expression starting at /tmp/tmpm486ft_8.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmpm486ft_8.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  UndefVarError: minimum\
    \ not defined\n  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n \
    \    @ Main /tmp/tmpm486ft_8.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm486ft_8.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpm486ft_8.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpm486ft_8.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n  UndefVarError: minimum not\
    \ defined\n  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmpm486ft_8.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm486ft_8.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpm486ft_8.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpm486ft_8.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n  UndefVarError: minimum not\
    \ defined\n  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n     @\
    \ Main /tmp/tmpm486ft_8.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm486ft_8.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpm486ft_8.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpm486ft_8.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n  UndefVarError: minimum\
    \ not defined\n  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n \
    \    @ Main "
  timestamp: 1660014844
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    using Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwcescad7.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwcescad7.jl:1\n\
    in expression starting at /tmp/tmpwcescad7.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqntca9qv.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpqntca9qv.jl:18\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [4, 3, 2, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:19\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 8, 7, 6, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:20\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 4, 3, 2, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:21\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [9, 8, 7, 6, 5, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:24\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) == [1,"
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqntca9qv.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpqntca9qv.jl:18\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [4, 3, 2, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:19\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 8, 7, 6, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:20\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 4, 3, 2, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:21\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [9, 8, 7, 6, 5, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:24\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) == [1,"
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    using Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwcescad7.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwcescad7.jl:1\n\
    in expression starting at /tmp/tmpwcescad7.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqntca9qv.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpqntca9qv.jl:18\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [4, 3, 2, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:19\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 8, 7, 6, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:20\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 4, 3, 2, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:21\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [9, 8, 7, 6, 5, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:24\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) == [1,"
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    \t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2c9o71g1.jl:13\nin expression starting at\
    \ /tmp/tmp2c9o71g1.jl:13\n"
  stdout: ''
  timestamp: 1660014841
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    lst\
    \ = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsj7kqrcj.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsj7kqrcj.jl:1\n\
    in expression starting at /tmp/tmpsj7kqrcj.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqntca9qv.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpqntca9qv.jl:18\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [4, 3, 2, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:19\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 8, 7, 6, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:20\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 4, 3, 2, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:21\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [9, 8, 7, 6, 5, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:24\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) == [1,"
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis doesn't seem to work. `strange_sort_list([1,2,3])`\
    \ returns `[3,2,1]`.\n<|/ c |>\n<| c |>\nIt does work. `strange_sort_list([1,2,3])`\
    \ returns `[3,2,1]`\n<|/ c |>\n<| c |>\nI guess you meant `strange_sort_list(sort([1,2,3]))`\n\
    <|/ c |>\n<| c |>\nYes, I meant `strange_sort_list(sort([1,2,3]))`\n<|/ c |>\n\
    <| a dscore=1 |>\nThe function below will sort a vector in descending order and\
    \ return the sorted vector. \n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\
    \t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpznmtxoif.jl:13\nin expression starting at\
    \ /tmp/tmpznmtxoif.jl:13\n"
  stdout: ''
  timestamp: 1660014843
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpllrds_r3.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpllrds_r3.jl:1\n\
    in expression starting at /tmp/tmpllrds_r3.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgtjnhwfc.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgtjnhwfc.jl:1\n\
    in expression starting at /tmp/tmpgtjnhwfc.jl:1\n"
  stdout: ''
  timestamp: 1660014841
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpllrds_r3.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpllrds_r3.jl:1\n\
    in expression starting at /tmp/tmpllrds_r3.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpllrds_r3.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpllrds_r3.jl:1\n\
    in expression starting at /tmp/tmpllrds_r3.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = reverse(lst)\n    \n    lst = sort(lst)\n\
    using Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwcescad7.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwcescad7.jl:1\n\
    in expression starting at /tmp/tmpwcescad7.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</cell>\n\
    <code language=julia-1.5>\nstrange_sort_list([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ the sum of the squares of the integers in the vector.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_0m9j6at.jl:13\nin expression starting at\
    \ /tmp/tmp_0m9j6at.jl:13\n"
  stdout: ''
  timestamp: 1660014841
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqntca9qv.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpqntca9qv.jl:18\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [4, 3, 2, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:19\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 8, 7, 6, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:20\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 4, 3, 2, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:21\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [9, 8, 7, 6, 5, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:24\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) == [1,"
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    \n    lst = sort(lst)\n    \n    i = 0\n    \n    while i < length(lst)\n\
    \        \n        if lst[i] > lst[i+1]\n            \n            lst[i], lst[i+1]\
    \ = lst[i+1], lst[i]\n            \n            i += 1\n            \n       \
    \ end\n        \n    end\n    \n    return lst\nend\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([1,5,3,2])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector and returns a vector where each element is the product of all\
    \ the elements in the original vector. For example, if the vector is [1,2,3],\
    \ the function should return [1,2,6].\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\
    \t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9az2cgz3.jl:28\nin expression starting at\
    \ /tmp/tmp9az2cgz3.jl:28\n"
  stdout: ''
  timestamp: 1660014843
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    \n    lst = sort(lst)\n    \n    i = 0\n    while i < length(lst)\n  \
    \      if lst[i] < lst[i-1]\n            lst[i] = lst[i-1]\n            lst[i-1]\
    \ = lst[i]\n            lst[i] = lst[i-1]\n        end\n        i += 1\n    end\n\
    \    \n    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp7ue15umw.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmp7ue15umw.jl:29\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  BoundsError: attempt\
    \ to access 4-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] strange_sort_list(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmp7ue15umw.jl:14\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7ue15umw.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7ue15umw.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp7ue15umw.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] strange_sort_list(lst::Vector{Int64})\n   \
    \  @ Main /tmp/tmp7ue15umw.jl:14\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7ue15umw.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7ue15umw.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp7ue15umw.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] strange_sort_list(lst::Vector{Int64})\n   \
    \  @ Main /tmp/tmp7ue15umw.jl:14\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7ue15umw.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7ue15umw.jl:28\ntest set"
  timestamp: 1660014844
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpllrds_r3.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpllrds_r3.jl:1\n\
    in expression starting at /tmp/tmpllrds_r3.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqntca9qv.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpqntca9qv.jl:18\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [4, 3, 2, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:19\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 8, 7, 6, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:20\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 4, 3, 2, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:21\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [9, 8, 7, 6, 5, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:24\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) == [1,"
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqntca9qv.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpqntca9qv.jl:18\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [4, 3, 2, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:19\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 8, 7, 6, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:20\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 4, 3, 2, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:21\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [9, 8, 7, 6, 5, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:24\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) == [1,"
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpllrds_r3.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpllrds_r3.jl:1\n\
    in expression starting at /tmp/tmpllrds_r3.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqntca9qv.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpqntca9qv.jl:18\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [4, 3, 2, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:19\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 8, 7, 6, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:20\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 4, 3, 2, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:21\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [9, 8, 7, 6, 5, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:24\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) == [1,"
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    lst\
    \ = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsj7kqrcj.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsj7kqrcj.jl:1\n\
    in expression starting at /tmp/tmpsj7kqrcj.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    lst = sort(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum\nusing Test\n\n@testset begin\n\
    \ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy9zuo4yy.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy9zuo4yy.jl:1\n\
    in expression starting at /tmp/tmpy9zuo4yy.jl:1\n"
  stdout: ''
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpllrds_r3.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpllrds_r3.jl:1\n\
    in expression starting at /tmp/tmpllrds_r3.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\n`sort!` modifies the original array. `sort!` should\
    \ be avoided if possible.\n<|/ c |>\n<| c |>\nI agree with you, but I wanted to\
    \ show that `sort!` can be used in this case. `sort!` modifies the original array\
    \ in place, so it can be used in this case. `sort!` can be avoided if possible,\
    \ but in this case it can be used.\n<|/ c |>\n<| c |>\nI agree with you, but I\
    \ wanted to show that `sort!` can be used in this case. `sort!` modifies the original\
    \ array in place, so it can be used in this case. `sort!` can be avoided if possible,\
    \ but in this case it can be used.\n<|/ c |>\n<| c |>\nI agree with you, but I\
    \ wanted to show that `sort!` can be used in this case. `sort!` modifies the original\
    \ array in place, so it can be used in this case. `sort!` can be avoided if possible,\
    \ but in this case it can be used.\n<|/ c |>\n<| c |>\nI agree with you, but I\
    \ wanted to show that `sort!` can be used in this case. `sort!` modifies the original\
    \ array in place, so it can be used in this case. `sort!` can be avoided if possible,\
    \ but in this case it can be used.\n<|/ c |>\n<| a dscore=2 |>\nI came up with\
    \ a solution that uses only a single pass over the input array:\n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1zz5bqz7.jl:13\nin expression starting at\
    \ /tmp/tmp1zz5bqz7.jl:13\n"
  stdout: ''
  timestamp: 1660014843
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n\
    <|/ a tags=sorting,julia |>\n<| a |>\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    \t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfaedymrj.jl:13\nin expression starting at\
    \ /tmp/tmpfaedymrj.jl:13\n"
  stdout: ''
  timestamp: 1660014843
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpllrds_r3.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpllrds_r3.jl:1\n\
    in expression starting at /tmp/tmpllrds_r3.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n\
    <|/ a |>\n<| c |>\nThis doesn't work if you have a list of strings. You will get\
    \ `ERROR: MethodError: no method matching reverse(::Array{String,1})`\n<|/ c |>\n\
    <| c |>\nThis doesn't work if you have a list of strings. You will get `ERROR:\
    \ MethodError: no method matching reverse(::Array{String,1})`\n<|/ c |>\n<| c\
    \ |>\nThis doesn't work if you have a list of strings. You will get `ERROR: MethodError:\
    \ no method matching reverse(::Array{String,1})`\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if you have a list of strings. You will get `ERROR: MethodError: no method\
    \ matching reverse(::Array{String,1})`\n<|/ c |>\n<| c |>\nThis doesn't work if\
    \ you have a list of strings. You will get `ERROR: MethodError: no method matching\
    \ reverse(::Array{String,1})`\n<|/ c |>\n<| a dscore=5 |>\nIn Julia 1.3, you can\
    \ use the function sortperm:\n<code>\njulia> sortperm([1,2,3])\n3-element Array{Int64,1}:\n\
    \ 3\n 1\n 2\n</code>\n<|/ a tags=julia,sorting |>\n<| c |>\nThis doesn't work\
    \ if you have a list of strings. You will get `ERROR: MethodError: no method matching\
    \ reverse(::Array{String,1})`\n<|/ c |>\n<| c |>\nThis doesn't work if you have\
    \ a list of strings. You will get `ERROR: MethodError: no method matching reverse(::Array{String,1})`\n\
    <|/ c |>\n<| c |>\nThis doesn't work if you have a list of strings. You will get\
    \ `ERROR: MethodError: no method matching reverse(::Array{String,1})`\n<|/ c |>\n\
    <| c |>\nThis doesn't work if you have a list of strings. You will get `ERROR:\
    \ MethodError: no method matching reverse(::Array{String,1})`\n<|/ c |>\n<| c\
    \ |>\nThis doesn't work if you have a list of strings. You will get `ERROR: MethodError:\
    \ no method matching reverse(::Array{String,1})`\n<|/ c |>\n<| a tags=julia,sorting\
    \ |>\nIn Julia 1.3, you can use the function sortperm:\n<code>\njulia> sortperm([1,2,3])\n\
    3-element Array{Int64,1}:\n 3\n 1\n 2\n</code>\n<|/ a dscore=5 |>\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp54awvl0f.jl:13\nin expression starting at\
    \ /tmp/tmp54awvl0f.jl:13\n"
  stdout: ''
  timestamp: 1660014843
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpllrds_r3.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpllrds_r3.jl:1\n\
    in expression starting at /tmp/tmpllrds_r3.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpllrds_r3.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpllrds_r3.jl:1\n\
    in expression starting at /tmp/tmpllrds_r3.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpllrds_r3.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpllrds_r3.jl:1\n\
    in expression starting at /tmp/tmpllrds_r3.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    lst\
    \ = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum = minimum(lst)\n\nusing Test\n\n\
    @testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp234oplvr.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp234oplvr.jl:1\n\
    in expression starting at /tmp/tmp234oplvr.jl:1\n"
  stdout: ''
  timestamp: 1660014841
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    lst\
    \ = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsj7kqrcj.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsj7kqrcj.jl:1\n\
    in expression starting at /tmp/tmpsj7kqrcj.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqntca9qv.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpqntca9qv.jl:18\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [4, 3, 2, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:19\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 8, 7, 6, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:20\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 4, 3, 2, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:21\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [9, 8, 7, 6, 5, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:24\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) == [1,"
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpllrds_r3.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpllrds_r3.jl:1\n\
    in expression starting at /tmp/tmpllrds_r3.jl:1\n"
  stdout: ''
  timestamp: 1660014836
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    lst\
    \ = sort(lst)\n    \n    lst = lst[minimum:maximum]\n    \n    return lst\nend\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list([1,3,5,7,9])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector and returns the sum of\
    \ the elements in the vector. \nWrite a function that takes a vector and returns\
    \ the product of the elements in the vector. \nWrite a function that takes a vector\
    \ and returns the mean of the elements in the vector. \nWrite a function that\
    \ takes a vector and returns the median of the elements in the vector. \nWrite\
    \ a function that takes a vector and returns the mode of the elements in the vector.\
    \ \nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa4ahz5p8.jl:19\nin expression starting at\
    \ /tmp/tmpa4ahz5p8.jl:19\n"
  stdout: ''
  timestamp: 1660014843
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqntca9qv.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpqntca9qv.jl:18\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [4, 3, 2, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:19\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 8, 7, 6, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:20\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 4, 3, 2, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:21\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [9, 8, 7, 6, 5, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:24\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) == [1,"
  timestamp: 1660014838
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=sorting,julia |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjp2s12ab.jl:13\nin expression starting at\
    \ /tmp/tmpjp2s12ab.jl:13\n"
  stdout: ''
  timestamp: 1660014843
- exit_code: 1
  program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n      \
    \          \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqntca9qv.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpqntca9qv.jl:18\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [4, 3, 2, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:19\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 8, 7, 6, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:20\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 4, 3, 2, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:21\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [9, 8, 7, 6, 5, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqntca9qv.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqntca9qv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpqntca9qv.jl:24\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8]) == [1,"
  timestamp: 1660014838
