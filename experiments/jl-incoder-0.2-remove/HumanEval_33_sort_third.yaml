name: HumanEval_33_sort_third
language: jl
prompt: "\"\"\"This function takes a list l and returns a list l' such that\n    l'\
  \ is identical to l in the indicies that are not divisible by three, while its values\
  \ at the indicies that are divisible by three are equal\n    to the values of the\
  \ corresponding indicies of l, but sorted.\n            \"\"\"\nfunction sort_third(l::Vector{Int64})::Vector{Int64}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = sort_third;\n\t@test(candidate([5,\
  \ 6, 3, 4, 8, 9, 2]) == [2, 6, 3, 4, 8, 9, 5])\n\t@test(candidate([5, 8, 3, 4, 6,\
  \ 9, 2]) == [2, 8, 3, 4, 6, 9, 5])\n\t@test(candidate([5, 6, 9, 4, 8, 3, 2]) ==\
  \ [2, 6, 9, 4, 8, 3, 5])\n\t@test(candidate([5, 6, 3, 4, 8, 9, 2, 1]) == [2, 6,\
  \ 3, 4, 8, 9, 5, 1])\nend\n"
completions: ["    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    l = sort(l)\n    \n    third = l[div(length(l),3)+1]\n    \n    third = div(third,3)\n\
    \    \n    l = l[div(length(l),3)+1:end]\n    \n    l = l[third:end]\n    \n \
    \   return l\nend", "    \n    third = l[div(length(l)-1,3)+1]\n    \n    third\
    \ = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n    \n\
    \    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n", "    l = sort(l)\n    l =\
    \ l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\nend",
  "    \n    third = l[div(length(l),3)+1]\n    \n    third = third[1:end-1]\n   \
    \ \n    third = third[div(length(l),3)+2:end]\n    \n    third = third[1:end-1]\n\
    \    \n    third = third[div(length(l),3)+2:end]\n    \n    third = third[1:end-1]\n\
    \    \n    third = third[div(length(l),3)+2:end]\n    \n    third = third[1:end-1]\n\
    \    \n    third = third[div(length(l),3)+2:end]\n    \n    third = third[1:end-1]\n\
    \    \n    third = third[div(length(l),3)+2:end]\n    \n    third = third[1:end-1]\n\
    \    \n    third = third[div(length(l),3)+2:end]\n    \n    third = third[1:end-1]\n\
    \    \n    third = third[div(length(l),3)+2:end]\n    \n    third = third[1:end-1]\n\
    \    \n    third = third[div(length(l),3)+2:end]\n    \n    third = third[1:end-1]\n\
    \    \n    third = third[div(length(l),3)+2:end]\n    \n    third = third[1:end-1]\n\
    \    \n    third = third[div(length(l),3)+2:end]\n    \n    third = third[1:end-1]\n\
    \    \n    third = third[div(length(l),3)+2:end]\n    \n    third = third[1:end-1]\n\
    \    \n    third = third[div(length(l),3)+2:end]\n    \n    third = third[1:end-1]\n\
    \    \n    third = third[div(length(l),3)+2:end]\n    \n    third = third[1:end-1]\n\
    \    \n    third = third[div(length(l),3)+2:end]\n    \n    third = third[1:end-1]\n\
    \    \n    third = third[div(length(l),3)+2:end]\n    \n    third = third[1:end-1]\n\
    \    \n    third = third[div(length(l),3)+2:end]\n    \n    third = third[1:end-1]\n\
    \    \n    third = third[div(length(l),3)+2:end]\n    \n    third = third[1:end-1]\n\
    \    \n    third = third[div(length", "    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    third = l[div(length(l),3)+1]\n    \n    third\
    \ = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n    \n   \
    \ third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n   \
    \ \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n", "    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    third = l[div(length(l),3)]\n   \
    \ \n    third = third.+1 \n    \n    third = third.-1\n    \n    third = third.+1\
    \ \n    \n    third = third.-1\n    \n    third = third.+1 \n    \n    third =\
    \ third.-1\n    \n    third = third.+1 \n    \n    third = third.-1\n    \n  \
    \  third = third.+1 \n    \n    third = third.-1\n    \n    third = third.+1 \n\
    \    \n    third = third.-1\n    \n    third = third.+1 \n    \n    third = third.-1\n\
    \    \n    third = third.+1 \n    \n    third = third.-1\n    \n    third = third.+1\
    \ \n    \n    third = third.-1\n    \n    third = third.+1 \n    \n    third =\
    \ third.-1\n    \n    third = third.+1 \n    \n    third = third.-1\n    \n  \
    \  third = third.+1 \n    \n    third = third.-1\n    \n    third = third.+1 \n\
    \    \n    third = third.-1\n    \n    third = third.+1 \n    \n    third = third.-1\n\
    \    \n    third = third.+1 \n    \n    third = third.-1\n    \n    third = third.+1\
    \ \n    \n    third = third.-1\n    \n    third = third.+1 \n    \n    third =\
    \ third.-1\n    \n    third = third.+1 \n    \n    third = third.-1\n    \n  \
    \  third = third.+1 \n    \n    third = third.-1\n    \n    third = third.+1 \n\
    \    \n    third = third.-1\n    \n    third = third.+1 \n    \n    third = third.-1\n\
    \    \n    third = third.+1 \n    \n    third = third.-1\n    \n    third = third.+1\
    \ \n    \n    third = third.-1\n    \n    third = third.+1 \n    \n    third =\
    \ third.-1\n    \n    third = third.+1 \n    \n    third = third.-1\n    \n  \
    \  third = third.+1 \n    \n    third = third.-1\n    \n    thir", "    l = sort(l)\n\
    \    l = l[findall(l .% 3 == 0)]\n    l = sort(l)\n    return l\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    l = sort(l)\n    \n    third = l[div(length(l),3)-1]\n  \
    \  \n    l = l[div(length(l),3)-1:end]\n    \n    l = l[1:div(length(l),3)-1]\n\
    \    \n    l = sort(l)\n    \n    l = l[div(length(l),3)-1:end]\n    \n    l =\
    \ l[1:div(length(l),3)-1]\n    \n    l = sort(l)\n    \n    l = l[div(length(l),3)-1:end]\n\
    \    \n    l = l[1:div(length(l),3)-1]\n    \n    l = sort(l)\n    \n    l = l[div(length(l),3)-1:end]\n\
    \    \n    l = l[1:div(length(l),3)-1]\n    \n    l = sort(l)\n    \n    l = l[div(length(l),3)-1:end]\n\
    \    \n    l = l[1:div(length(l),3)-1]\n    \n    l = sort(l)\n    \n    l = l[div(length(l),3)-1:end]\n\
    \    \n    l = l[1:div(length(l),3)-1]\n    \n    l = sort(l)\n    \n    l = l[div(length(l),3)-1:end]\n\
    \    \n    l = l[1:div(length(l),3)-1]\n    \n    l = sort(l)\n    \n    l = l[div(length(l),3)-1:end]\n\
    \    \n    l = l[1:div(length(l),3)-1]\n    \n    l = sort(l)\n    \n    l = l[div(length(l),3)-1:end]\n\
    \    \n    l = l[1:div(length(l),3)-1]\n    \n    l = sort(l)\n    \n    l = l[div(length(l),3)-1:end]\n\
    \    \n    l = l[1:div(length(l),3)-1]\n    \n    l = sort(l)\n    \n    l = l[div(length(l),3)-1:end]\n\
    \    \n    l = l[1:div(length(l),3)-1]\n    \n    l = sort(l)\n    \n    l = l[div(length(l),3)-1:end]\n\
    \    \n    l = l[1:div(length(l),3)-1]\n    \n    l = sort(l)\n    \n    l = l[div(length(l),3)-1:end]\n\
    \    \n    l = l[1:div(length(l),3)-1]\n    \n    l = sort(l)\n    \n    l = l[div(length(l),3)-1:end]\n\
    \    \n    l = l[1:div", "    \n    third = l[div(length(l)-1,3)+1]\n    \n  \
    \  third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n", "    \n    third = Vector{Int64}(undef,\
    \ length(l))\n    \n    for i in 1:length(l) \n        if l[i] % 3 == 0 \n   \
    \         third[i] = l[i] \n        else \n            third[i] = l[i] + 1 \n\
    \        end \n    end \n    \n    return third \nend \n</cell>\n<code language=julia-1.5>",
  "    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    l = sort(l)\n    l =\
    \ l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\nend",
  "    \n    l = sort(l)\n    \n    l = l[findall(l .% 3 == 0)]\n    \n    l = sort(l)\n\
    \    \n    return l\nend", "    \n    third = l[div(length(l), 3)]\n    \n   \
    \ third = l[div(length(l), 3)]\n    \n    third = l[div(length(l), 3)]\n    \n\
    \    third = l[div(length(l), 3)]\n    \n    third = l[div(length(l), 3)]\n  \
    \  \n    third = l[div(length(l), 3)]\n    \n    third = l[div(length(l), 3)]\n\
    \    \n    third = l[div(length(l), 3)]\n    \n    third = l[div(length(l), 3)]\n\
    \    \n    third = l[div(length(l), 3)]\n    \n    third = l[div(length(l), 3)]\n\
    \    \n    third = l[div(length(l), 3)]\n    \n    third = l[div(length(l), 3)]\n\
    \    \n    third = l[div(length(l), 3)]\n    \n    third = l[div(length(l), 3)]\n\
    \    \n    third = l[div(length(l), 3)]\n    \n    third = l[div(length(l), 3)]\n\
    \    \n    third = l[div(length(l), 3)]\n    \n    third = l[div(length(l), 3)]\n\
    \    \n    third = l[div(length(l), 3)]\n    \n    third = l[div(length(l), 3)]\n\
    \    \n    third = l[div(length(l), 3)]\n    \n    third = l[div(length(l), 3)]\n\
    \    \n    third = l[div(length(l), 3)]\n    \n    third = l[div(length(l), 3)]\n\
    \    \n    third = l[div(length(l), 3)]\n    \n    third = l[div(length(l), 3)]\n\
    \    \n    third = l[div(length(l), 3)]\n    \n    third = l[div(length(l), 3)]\n\
    \    \n    third = l[div(length(l), 3)]\n    \n    third = l[div(length(l), 3)]\n\
    \    \n    third = l[div(length(l), 3)]\n    \n    third = l[div(length(l), 3)]\n\
    \    \n    third = l[div(length(l), 3)]\n    \n    third = l[div(length(l), 3)]\n\
    \    \n    third = l[div(length(l), 3)]\n    \n    third = l[div", "    \n   \
    \ third = Vector{Int64}(undef, length(l))\n    \n    for i in 1:length(l)\n  \
    \      if l[i] % 3 == 0\n            third[i] = l[i]\n        else\n         \
    \   third[i] = l[i]\n        end\n    end\n    \n    return third\nend", "   \
    \ l = sort(l)\n    third = l[3:end]\n    third = sort(third)\n    third = third[2:end]\n\
    \    third = sort(third)\n    third = third[1:end]\n    third = sort(third)\n\
    \    third = third[1:end]\n    third = sort(third)\n    third = third[1:end]\n\
    \    third = sort(third)\n    third = third[1:end]\n    third = sort(third)\n\
    \    third = third[1:end]\n    third = sort(third)\n    third = third[1:end]\n\
    \    third = sort(third)\n    third = third[1:end]\n    third = sort(third)\n\
    \    third = third[1:end]\n    third = sort(third)\n    third = third[1:end]\n\
    \    third = sort(third)\n    third = third[1:end]\n    third = sort(third)\n\
    \    third = third[1:end]\n    third = sort(third)\n    third = third[1:end]\n\
    \    third = sort(third)\n    third = third[1:end]\n    third = sort(third)\n\
    \    third = third[1:end]\n    third = sort(third)\n    third = third[1:end]\n\
    \    third = sort(third)\n    third = third[1:end]\n    third = sort(third)\n\
    \    third = third[1:end]\n    third = sort(third)\n    third = third[1:end]\n\
    \    third = sort(third)\n    third = third[1:end]\n    third = sort(third)\n\
    \    third = third[1:end]\n    third = sort(third)\n    third = third[1:end]\n\
    \    third = sort(third)\n    third = third[1:end]\n    third = sort(third)\n\
    \    third = third[1:end]\n    third = sort(third)\n    third = third[1:end]\n\
    \    third = sort(third)\n    third = third[1:end]\n    third = sort(third)\n\
    \    third = third[1:end]\n    third = sort(third)\n    third = third[1:end]\n\
    \    third = sort(third)\n    third = third[1:end]\n    third = sort(third)\n\
    \    third = third[1:end]\n    third = sort(third)\n    third = third[1:end]\n\
    \    third = sort(third)\n    third = third[1:end]\n    third = sort(third)\n\
    \    third = third[1:end]\n    third = sort(", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    l = sort(l)\n    \n    third = Vector{Int64}(undef, 3)\n\
    \    \n    for i in 1:3\n        third[i] = l[i]\n    end\n    \n    return third\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    third = Vector{Int64}(length(l))\n\
    \    \n    for i in 1:length(l)\n        if l[i] % 3 == 0\n            third[i]\
    \ = l[i]\n        else\n            third[i] = l[i]\n        end\n    end\n  \
    \  \n    return third\nend", "    \n    third = l[div(length(l),3)]\n    \n  \
    \  third = third.+div(length(l),2)\n    \n    third = third.+div(length(l),1)\n\
    \    \n    third = third.+div(length(l),0)\n    \n    third = third.+div(length(l),-1)\n\
    \    \n    third = third.+div(length(l),-2)\n    \n    third = third.+div(length(l),-3)\n\
    \    \n    third = third.+div(length(l),-4)\n    \n    third = third.+div(length(l),-5)\n\
    \    \n    third = third.+div(length(l),-6)\n    \n    third = third.+div(length(l),-7)\n\
    \    \n    third = third.+div(length(l),-8)\n    \n    third = third.+div(length(l),-9)\n\
    \    \n    third = third.+div(length(l),-10)\n    \n    third = third.+div(length(l),-11)\n\
    \    \n    third = third.+div(length(l),-12)\n    \n    third = third.+div(length(l),-13)\n\
    \    \n    third = third.+div(length(l),-14)\n    \n    third = third.+div(length(l),-15)\n\
    \    \n    third = third.+div(length(l),-16)\n    \n    third = third.+div(length(l),-17)\n\
    \    \n    third = third.+div(length(l),-18)\n    \n    third = third.+div(length(l),-19)\n\
    \    \n    third = third.+div(length(l),-20)\n    \n    third = third.+div(length(l),-21)\n\
    \    \n    third = third.+div(length(l),-22)\n    \n    third = third.+div(length(l),-23)\n\
    \    \n    third = third.+div(length(l),-24)\n    \n    third = third.+div(length(l),-25)\n\
    \    \n    third = third.+div(length(l),-26)\n    \n    third = third.+div(length(l),-27)\n\
    \    \n    third = third.+div(length(l),-28)\n    \n", "    \n    third = Int64[]\n\
    \    \n    for i in 1:length(l)\n        if mod(l[i],3) == 0\n            push!(third,l[i])\n\
    \        end\n    end\n    \n    third = unique(third)\n    \n    third = sort(third)\n\
    \    \n    third = Int64[]\n    \n    for i in 1:length(l)\n        if mod(l[i],3)\
    \ == 0\n            push!(third,l[i])\n        end\n    end\n    \n    third =\
    \ unique(third)\n    \n    third = sort(third)\n    \n    third = Int64[]\n  \
    \  \n    for i in 1:length(l)\n        if mod(l[i],3) == 0\n            push!(third,l[i])\n\
    \        end\n    end\n    \n    third = unique(third)\n    \n    third = sort(third)\n\
    \    \n    third = Int64[]\n    \n    for i in 1:length(l)\n        if mod(l[i],3)\
    \ == 0\n            push!(third,l[i])\n        end\n    end\n    \n    third =\
    \ unique(third)\n    \n    third = sort(third)\n    \n    third = Int64[]\n  \
    \  \n    for i in 1:length(l)\n        if mod(l[i],3) == 0\n            push!(third,l[i])\n\
    \        end\n    end\n    \n    third = unique(third)\n    \n    third = sort(third)\n\
    \    \n    third = Int64[]\n    \n    for i in 1:length(l)\n        if mod(l[i],3)\
    \ == 0\n            push!(third,l[i])\n        end\n    end\n    \n    third =\
    \ unique(third)\n    \n    third = sort(third)\n    \n    third = Int64[]\n  \
    \  \n    for i in 1:length(l)\n        if mod(l[i],3) == 0\n            push!(third,l[i])\n\
    \        end\n    end\n    \n    third = unique(third)\n    \n    third = sort(third)\n\
    \    \n    third = Int64[]\n    \n    for i in 1:length(l)\n        if mod(l[i],3)\
    \ == 0\n            push!(third,l[i])\n        end\n    end\n    \n    third =\
    \ unique(third)\n    \n    third = sort(third)\n    \n    third = Int64[]\n  \
    \  \n    for i in 1:length(l)\n        if mod(l[i],3) == 0\n            push!(third,l[i])\n\
    \        end\n    end\n    \n    third = unique(third)\n    \n    third = sort(third)\n\
    \    \n    third = Int64[]\n    \n    for i in 1:length(l)\n        if mod(l[i],3)\
    \ == 0\n            push!(third,l[i])\n        end\n    end\n", "    \n    third\
    \ = Vector{Int64}(length(l))\n    \n    for i in 1:length(l)\n        if i%3 ==\
    \ 0\n            third[i] = l[i]\n        else\n            third[i] = l[i]\n\
    \        end\n    end\n    \n    return third\nend", "    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)]\n    \n    third = l[div(length(l),3)]\n\
    \    \n    third = l[div(length(l),3)]\n    \n    third = l[div(length(l),3)]\n\
    \    \n    third = l[div(length(l),3)]\n    \n    third = l[div(length(l),3)]\n\
    \    \n    third = l[div(length(l),3)]\n    \n    third = l[div(length(l),3)]\n\
    \    \n    third = l[div(length(l),3)]\n    \n    third = l[div(length(l),3)]\n\
    \    \n    third = l[div(length(l),3)]\n    \n    third = l[div(length(l),3)]\n\
    \    \n    third = l[div(length(l),3)]\n    \n    third = l[div(length(l),3)]\n\
    \    \n    third = l[div(length(l),3)]\n    \n    third = l[div(length(l),3)]\n\
    \    \n    third = l[div(length(l),3)]\n    \n    third = l[div(length(l),3)]\n\
    \    \n    third = l[div(length(l),3)]\n    \n    third = l[div(length(l),3)]\n\
    \    \n    third = l[div(length(l),3)]\n    \n    third = l[div(length(l),3)]\n\
    \    \n    third = l[div(length(l),3)]\n    \n    third = l[div(length(l),3)]\n\
    \    \n    third = l[div(length(l),3)]\n    \n    third = l[div(length(l),3)]\n\
    \    \n    third = l[div(length(l),3)]\n    \n    third = l[div(length(l),3)]\n\
    \    \n    third = l[div(length(l),3)]\n    \n    third = l[div(length(l),3)]\n\
    \    \n    third = l[div(length(l),3)]\n    \n    third = l[div(length(l),3)]\n\
    \    \n    third = l[div(length(l),3)]\n    \n    third = l[div(length(l),3)]\n\
    \    \n    third = l[div(length(l),3)]\n    \n    third = l[", "    \n    l =\
    \ sort(l)\n    \n    third = Vector{Int64}(undef, 0)\n    \n    for i in 1:length(l)\n\
    \        if l[i] % 3 == 0\n            push!(third, l[i])\n        end\n    end\n\
    \    \n    return third\nend", "    \n    third = Int64[]\n    \n    for i in\
    \ l\n        if i%3 == 0\n            push!(third, i)\n        end\n    end\n\
    \    \n    third = sort(third)\n    \n    for i in l\n        if i not in third\n\
    \            push!(l, i)\n        end\n    end\n    \n    return l\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    third = Vector{Int64}(undef, 3)\n    third[1]\
    \ = l[1]\n    third[2] = l[2]\n    third[3] = l[3]\n    \n    third\nend", " \
    \   \n    l = sort(l)\n    \n    third = l[div(length(l),3)+1]\n    \n    l =\
    \ l[div(length(l),3):end]\n    \n    l = l[div(length(l),3):end]\n    \n    l\
    \ = l[div(length(l),3):end]\n    \n    l = l[div(length(l),3):end]\n    \n   \
    \ l = l[div(length(l),3):end]\n    \n    l = l[div(length(l),3):end]\n    \n \
    \   l = l[div(length(l),3):end]\n    \n    l = l[div(length(l),3):end]\n    \n\
    \    l = l[div(length(l),3):end]\n    \n    l = l[div(length(l),3):end]\n    \n\
    \    l = l[div(length(l),3):end]\n    \n    l = l[div(length(l),3):end]\n    \n\
    \    l = l[div(length(l),3):end]\n    \n    l = l[div(length(l),3):end]\n    \n\
    \    l = l[div(length(l),3):end]\n    \n    l = l[div(length(l),3):end]\n    \n\
    \    l = l[div(length(l),3):end]\n    \n    l = l[div(length(l),3):end]\n    \n\
    \    l = l[div(length(l),3):end]\n    \n    l = l[div(length(l),3):end]\n    \n\
    \    l = l[div(length(l),3):end]\n    \n    l = l[div(length(l),3):end]\n    \n\
    \    l = l[div(length(l),3):end]\n    \n    l = l[div(length(l),3):end]\n    \n\
    \    l = l[div(length(l),3):end]\n    \n    l = l[div(length(l),3):end]\n    \n\
    \    l = l[div(length(l),3):end]\n    \n    l = l[div(length(l),3):end]\n    \n\
    \    l = l[div(length(l),3):end]\n    \n    l = l[div(length(l),3):end]\n    \n\
    \    l = l[div(length(l),3):end]\n    \n    l = l[div(length(l),3):end]\n    \n\
    \    l = l[div(length(l),3):end]\n    \n    l = l[div(length(l),3):end]\n    \n\
    \    l = l[div(length(l),3):end]\n", "    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    third = Vector{Int64}(undef,\
    \ length(l))\n    \n    for i in 1:length(l) \n        if l[i] % 3 == 0 \n   \
    \         third[i] = l[i] \n        else \n            third[i] = l[i] + 1 \n\
    \        end \n    end \n    \n    return third \nend \n</cell>\n<code language=julia-1.5>",
  "    \n    l = sort(l)\n    \n    third = l[div(length(l)-1,3)+1]\n    \n    l =\
    \ l[div(length(l)-1,3):end]\n    \n    l = l[1:div(length(l)-1,3)]\n    \n   \
    \ l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[1:div(length(l)-1,3)]\n\
    \    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n    \n    l =\
    \ l[1:div(length(l)-1,3)]\n    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[1:div(length(l)-1,3)]\n    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[1:div(length(l)-1,3)]\n    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[1:div(length(l)-1,3)]\n    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[1:div(length(l)-1,3)]\n    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[1:div(length(l)-1,3)]\n    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[1:div(length(l)-1,3)]\n    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[1:div(length(l)-1,3)]\n    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[1:div(length(l)-1,3)]\n    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[1:div(length(l)-1,3)]\n    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[1:div(length(l)-1,3)]\n    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[1:div(length(l)-1,3)]\n    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n",
  "    \n    l = sort(l)\n    \n    third = l[div(length(l),3)]\n    \n    third =\
    \ third.+div(length(l),3)\n    \n    third = third.+div(length(l),3)\n    \n \
    \   third = third.+div(length(l),3)\n    \n    third = third.+div(length(l),3)\n\
    \    \n    third = third.+div(length(l),3)\n    \n    third = third.+div(length(l),3)\n\
    \    \n    third = third.+div(length(l),3)\n    \n    third = third.+div(length(l),3)\n\
    \    \n    third = third.+div(length(l),3)\n    \n    third = third.+div(length(l),3)\n\
    \    \n    third = third.+div(length(l),3)\n    \n    third = third.+div(length(l),3)\n\
    \    \n    third = third.+div(length(l),3)\n    \n    third = third.+div(length(l),3)\n\
    \    \n    third = third.+div(length(l),3)\n    \n    third = third.+div(length(l),3)\n\
    \    \n    third = third.+div(length(l),3)\n    \n    third = third.+div(length(l),3)\n\
    \    \n    third = third.+div(length(l),3)\n    \n    third = third.+div(length(l),3)\n\
    \    \n    third = third.+div(length(l),3)\n    \n    third = third.+div(length(l),3)\n\
    \    \n    third = third.+div(length(l),3)\n    \n    third = third.+div(length(l),3)\n\
    \    \n    third = third.+div(length(l),3)\n    \n    third = third.+div(length(l),3)\n\
    \    \n    third = third.+div(length(l),3)\n    \n    third = third.+div(length(l),3)\n\
    \    \n    third = third.+div(length(l),3)\n    \n    third = third.+div(length(l),3)\n\
    \    \n    third = third.+div(length(l),3)\n    \n    third = third.+div(length(l),3)\n\
    \    \n    third = third.+div(length", "    \n    third = l[div(length(l),3)]\n\
    \    \n    third = third[div(length(third),2)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    ", "    \n    third\
    \ = l[div(length(l),3)+1]\n    \n    third = third.==0 ? l[div(length(l),3)+1]\
    \ : third\n    \n    third = third.==0 ? l[div(length(l),3)+1] : third\n    \n\
    \    third = third.==0 ? l[div(length(l),3)+1] : third\n    \n    third = third.==0\
    \ ? l[div(length(l),3)+1] : third\n    \n    third = third.==0 ? l[div(length(l),3)+1]\
    \ : third\n    \n    third = third.==0 ? l[div(length(l),3)+1] : third\n    \n\
    \    third = third.==0 ? l[div(length(l),3)+1] : third\n    \n    third = third.==0\
    \ ? l[div(length(l),3)+1] : third\n    \n    third = third.==0 ? l[div(length(l),3)+1]\
    \ : third\n    \n    third = third.==0 ? l[div(length(l),3)+1] : third\n    \n\
    \    third = third.==0 ? l[div(length(l),3)+1] : third\n    \n    third = third.==0\
    \ ? l[div(length(l),3)+1] : third\n    \n    third = third.==0 ? l[div(length(l),3)+1]\
    \ : third\n    \n    third = third.==0 ? l[div(length(l),3)+1] : third\n    \n\
    \    third = third.==0 ? l[div(length(l),3)+1] : third\n    \n    third = third.==0\
    \ ? l[div(length(l),3)+1] : third\n    \n    third = third.==0 ? l[div(length(l),3)+1]\
    \ : third\n    \n    third = third.==0 ? l[div(length(l),3)+1] : third\n    \n\
    \    third = third.==0 ? l[div(length(l),3)+1] : third\n    \n    third = third.==0\
    \ ? l[div(length(l),3)+1] : third\n    \n    third = third.==0 ? l[div(length(l),3)+1]\
    \ : third\n    \n    third = third.==0 ? l[div(length(l),3)+1] : third\n    \n\
    \    third = third.==0 ? l[div(", "    \n    l = sort(l)\n    \n    third = l[div(length(l),\
    \ 3)+1]\n    \n    third = l[div(length(l), 3)+1]\n    \n    third = l[div(length(l),\
    \ 3)+1]\n    \n    third = l[div(length(l), 3)+1]\n    \n    third = l[div(length(l),\
    \ 3)+1]\n    \n    third = l[div(length(l), 3)+1]\n    \n    third = l[div(length(l),\
    \ 3)+1]\n    \n    third = l[div(length(l), 3)+1]\n    \n    third = l[div(length(l),\
    \ 3)+1]\n    \n    third = l[div(length(l), 3)+1]\n    \n    third = l[div(length(l),\
    \ 3)+1]\n    \n    third = l[div(length(l), 3)+1]\n    \n    third = l[div(length(l),\
    \ 3)+1]\n    \n    third = l[div(length(l), 3)+1]\n    \n    third = l[div(length(l),\
    \ 3)+1]\n    \n    third = l[div(length(l), 3)+1]\n    \n    third = l[div(length(l),\
    \ 3)+1]\n    \n    third = l[div(length(l), 3)+1]\n    \n    third = l[div(length(l),\
    \ 3)+1]\n    \n    third = l[div(length(l), 3)+1]\n    \n    third = l[div(length(l),\
    \ 3)+1]\n    \n    third = l[div(length(l), 3)+1]\n    \n    third = l[div(length(l),\
    \ 3)+1]\n    \n    third = l[div(length(l), 3)+1]\n    \n    third = l[div(length(l),\
    \ 3)+1]\n    \n    third = l[div(length(l), 3)+1]\n    \n    third = l[div(length(l),\
    \ 3)+1]\n    \n    third = l[div(length(l), 3)+1]\n    \n    third = l[div(length(l),\
    \ 3)+1]\n    \n    third = l[div(length(l), 3)+1]\n    \n    third = l[div(length(l),\
    \ 3)+1]\n    \n    third = l[div(length(l), 3)+1]\n    \n    third = l[div(length(l),\
    \ 3)+1]\n    \n    third = l[div(length", "    \n    third = Int64[]\n    \n \
    \   for x in l\n        if x % 3 == 0\n            push!(third, x)\n        end\n\
    \    end\n    \n    third = sort(third)\n    \n    third = third[2:end]\n    \n\
    \    return third\nend", "    \n    third = l[div(length(l),3)+1]\n    \n    third\
    \ = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n    \n   \
    \ third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n   \
    \ \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n", "    \n    l = sort(l)\n  \
    \  \n    third = l[div(length(l), 3)+1]\n    \n    l = l[div(length(l), 3)+1:end]\n\
    \    \n    l = l[div(length(l), 3):end]\n    \n    l = l[div(length(l), 3):div(length(l),\
    \ 3)+2]\n    \n    l = l[div(length(l), 3):div(length(l), 3)+2]\n    \n    l =\
    \ l[div(length(l), 3):div(length(l), 3)+2]\n    \n    l = l[div(length(l), 3):div(length(l),\
    \ 3)+2]\n    \n    l = l[div(length(l), 3):div(length(l), 3)+2]\n    \n    l =\
    \ l[div(length(l), 3):div(length(l), 3)+2]\n    \n    l = l[div(length(l), 3):div(length(l),\
    \ 3)+2]\n    \n    l = l[div(length(l), 3):div(length(l), 3)+2]\n    \n    l =\
    \ l[div(length(l), 3):div(length(l), 3)+2]\n    \n    l = l[div(length(l), 3):div(length(l),\
    \ 3)+2]\n    \n    l = l[div(length(l), 3):div(length(l), 3)+2]\n    \n    l =\
    \ l[div(length(l), 3):div(length(l), 3)+2]\n    \n    l = l[div(length(l), 3):div(length(l),\
    \ 3)+2]\n    \n    l = l[div(length(l), 3):div(length(l), 3)+2]\n    \n    l =\
    \ l[div(length(l), 3):div(length(l), 3)+2]\n    \n    l = l[div(length(l), 3):div(length(l),\
    \ 3)+2]\n    \n    l = l[div(length(l), 3):div(length(l), 3)+2]\n    \n    l =\
    \ l[div(length(l), 3):div(length(l), 3)+2]\n    \n    l = l[div(length(l), 3):div(length(l),\
    \ 3)+2]\n    \n    l = l[div(length(l), 3):div(length(l), 3)+2]\n    \n    l =\
    \ l[div(length(l), 3):div(length(l), 3)+2]\n    \n    l = l[div(length(l), 3):div(length(l),\
    \ 3)+", "    \n    l = sort(l)\n    \n    third = l[div(length(l),3)]\n    \n\
    \    l = l[div(length(l),3) != third]\n    \n    l = sort(l)\n    \n    return\
    \ l\nend", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l\
    \ .% 3 != 0)]\n    return l\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ work. `sort` sorts the list in-place, so `l` will be sorted again after `sort!`\
    \ returns.\n<|/ c |>\n<| c |>\nI see what you mean. Thanks for pointing that out.\
    \ I've updated my answer accordingly.\n<|/ c |>\n<| c |>\nThis still doesn't work.\
    \ `sort!` sorts the list in-place, so `l` will be sorted again after `sort!` returns.\n\
    <|/ c |>\n<| c |>\nI see what you mean. Thanks for pointing that out. I've updated\
    \ my answer accordingly.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "    \n    third\
    \ = Vector{Int64}(undef, 3)\n    third[1] = l[1]\n    third[2] = l[2]\n    third[3]\
    \ = l[3]\n    \n    third\nend", "    l = sort(l)\n    l = l[findall(l .% 3 ==\
    \ 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\nend", "    \n    third =\
    \ Vector{Int64}(length(l)-1)\n    third[1] = l[1]\n    third[2] = l[2]\n    third[3]\
    \ = l[3]\n    third[4] = l[4]\n    third[5] = l[5]\n    third[6] = l[6]\n    third[7]\
    \ = l[7]\n    third[8] = l[8]\n    third[9] = l[9]\n    third[10] = l[10]\n  \
    \  third[11] = l[11]\n    third[12] = l[12]\n    third[13] = l[13]\n    third[14]\
    \ = l[14]\n    third[15] = l[15]\n    third[16] = l[16]\n    third[17] = l[17]\n\
    \    third[18] = l[18]\n    third[19] = l[19]\n    third[20] = l[20]\n    third[21]\
    \ = l[21]\n    third[22] = l[22]\n    third[23] = l[23]\n    third[24] = l[24]\n\
    \    third[25] = l[25]\n    third[26] = l[26]\n    third[27] = l[27]\n    third[28]\
    \ = l[28]\n    third[29] = l[29]\n    third[30] = l[30]\n    third[31] = l[31]\n\
    \    third[32] = l[32]\n    third[33] = l[33]\n    third[34] = l[34]\n    third[35]\
    \ = l[35]\n    third[36] = l[36]\n    third[37] = l[37]\n    third[38] = l[38]\n\
    \    third[39] = l[39]\n    third[40] = l[40]\n    third[41] = l[41]\n    third[42]\
    \ = l[42]\n    third[43] = l[43]\n    third[44] = l[44]\n    third[45] = l[45]\n\
    \    third[46] = l[46]\n    third[47] = l[47]\n    third[48] = l[48]\n    third[49]\
    \ = l[49]\n    third[50] = l[50]\n    third[51] = l[51]\n    third[52] = l[52]\n\
    \    third[53] = l", "    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    l = sort(l)\n\
    \    \n    third = Int64[]\n    \n    for i in 1:length(l)\n        if mod(l[i],3)\
    \ == 0\n            push!(third,l[i])\n        end\n    end\n    \n    return\
    \ third\nend", "    \n    third = l[div(length(l),3)]\n    \n    third = third[div(length(third),2)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    ", "    \n    third = Vector{Int64}(undef, 3)\n    third[1] = l[1]\n\
    \    third[2] = l[2]\n    third[3] = l[3]\n    \n    third\nend", "    \n    third\
    \ = l[div(length(l), 3)]\n    \n    third = third[div(length(third), 2)]\n   \
    \ \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    ", "    \n    l = sort(l)\n    \n    third = l[div(length(l),3)-1]\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    l = sort(l)\n    \n    third = l[div(length(l),3)+1]\n    \n    l = l[div(length(l),3):end]\n\
    \    \n    l = append(l, third)\n    \n    return l\nend", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    l = sort(l)\n    \n    third\
    \ = l[div(length(l),3)+1]\n    \n    l = l[div(length(l),3)+2:end]\n    \n   \
    \ l = l[div(length(l),3)+1:end]\n    \n    l = sort(l)\n    \n    l = l[div(length(l),3)+1:end]\n\
    \    \n    l = l[div(length(l),3)+2:end]\n    \n    l = sort(l)\n    \n    l =\
    \ l[div(length(l),3)+1:end]\n    \n    l = l[div(length(l),3)+2:end]\n    \n \
    \   l = sort(l)\n    \n    l = l[div(length(l),3)+1:end]\n    \n    l = l[div(length(l),3)+2:end]\n\
    \    \n    l = sort(l)\n    \n    l = l[div(length(l),3)+1:end]\n    \n    l =\
    \ l[div(length(l),3)+2:end]\n    \n    l = sort(l)\n    \n    l = l[div(length(l),3)+1:end]\n\
    \    \n    l = l[div(length(l),3)+2:end]\n    \n    l = sort(l)\n    \n    l =\
    \ l[div(length(l),3)+1:end]\n    \n    l = l[div(length(l),3)+2:end]\n    \n \
    \   l = sort(l)\n    \n    l = l[div(length(l),3)+1:end]\n    \n    l = l[div(length(l),3)+2:end]\n\
    \    \n    l = sort(l)\n    \n    l = l[div(length(l),3)+1:end]\n    \n    l =\
    \ l[div(length(l),3)+2:end]\n    \n    l = sort(l)\n    \n    l = l[div(length(l),3)+1:end]\n\
    \    \n    l = l[div(length(l),3)+2:end]\n    \n    l = sort(l)\n    \n    l =\
    \ l[div(length(l),3)+1:end]\n    \n    l = l[div(length(l),3)+2:end]\n    \n \
    \   l = sort(l)\n    \n    l = l[div(length(l),3)+1:end]\n    \n    l = l[div(length(l),3)+2:end]\n\
    \    \n    l = sort(l)\n    \n    l = l[div(length(l),3)+1:end]\n    \n    l =\
    \ l[", "    \n    l = sort(l)\n    \n    third = l[div(length(l),3)+1]\n    \n\
    \    l = l[div(length(l),3)+2:end]\n    \n    l = sort(l)\n    \n    l = l[div(length(l),3)+1:end]\n\
    \    \n    l = sort(l)\n    \n    l = l[div(length(l),3):end]\n    \n    l = sort(l)\n\
    \    \n    l = l[div(length(l),3):end]\n    \n    l = sort(l)\n    \n    l = l[div(length(l),3):end]\n\
    \    \n    l = sort(l)\n    \n    l = l[div(length(l),3):end]\n    \n    l = sort(l)\n\
    \    \n    l = l[div(length(l),3):end]\n    \n    l = sort(l)\n    \n    l = l[div(length(l),3):end]\n\
    \    \n    l = sort(l)\n    \n    l = l[div(length(l),3):end]\n    \n    l = sort(l)\n\
    \    \n    l = l[div(length(l),3):end]\n    \n    l = sort(l)\n    \n    l = l[div(length(l),3):end]\n\
    \    \n    l = sort(l)\n    \n    l = l[div(length(l),3):end]\n    \n    l = sort(l)\n\
    \    \n    l = l[div(length(l),3):end]\n    \n    l = sort(l)\n    \n    l = l[div(length(l),3):end]\n\
    \    \n    l = sort(l)\n    \n    l = l[div(length(l),3):end]\n    \n    l = sort(l)\n\
    \    \n    l = l[div(length(l),3):end]\n    \n    l = sort(l)\n    \n    l = l[div(length(l),3):end]\n\
    \    \n    l = sort(l)\n    \n    l = l[div(length(l),3):end]\n    \n    l = sort(l)\n\
    \    \n    l = l[div(length(l),3):end]\n    \n    l = sort(l)\n    \n    l = l[div(length(l),3):end]\n\
    \    \n    l = sort(l)\n    \n    l = l[div(length(l),3):end]\n    \n    l = sort(l)\n\
    \    \n    l = l[div(length(l),3):end]\n    \n    l = sort(l)\n    \n    l = l[div(length(l),3):end]\n\
    \    \n    l = sort(l)\n    \n    ", "    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    l = sort(l)\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n", "    \n    third = Vector{Int64}(undef,\
    \ 3)\n    third[1] = l[1]\n    third[2] = l[2]\n    third[3] = l[3]\n    \n  \
    \  third\n    \nend", "    \n    third = Int64[]\n    \n    for i in l\n     \
    \   if i%3 == 0\n            push!(third, i)\n        end\n    end\n    \n   \
    \ third = sort(third)\n    \n    third = Int64[]\n    \n    for i in l\n     \
    \   if i%3 == 0\n            push!(third, i)\n        end\n    end\n    \n   \
    \ third = sort(third)\n    \n    third = Int64[]\n    \n    for i in l\n     \
    \   if i%3 == 0\n            push!(third, i)\n        end\n    end\n    \n   \
    \ third = sort(third)\n    \n    third = Int64[]\n    \n    for i in l\n     \
    \   if i%3 == 0\n            push!(third, i)\n        end\n    end\n    \n   \
    \ third = sort(third)\n    \n    third = Int64[]\n    \n    for i in l\n     \
    \   if i%3 == 0\n            push!(third, i)\n        end\n    end\n    \n   \
    \ third = sort(third)\n    \n    third = Int64[]\n    \n    for i in l\n     \
    \   if i%3 == 0\n            push!(third, i)\n        end\n    end\n    \n   \
    \ third = sort(third)\n    \n    third = Int64[]\n    \n    for i in l\n     \
    \   if i%3 == 0\n            push!(third, i)\n        end\n    end\n    \n   \
    \ third = sort(third)\n    \n    third = Int64[]\n    \n    for i in l\n     \
    \   if i%3 == 0\n            push!(third, i)\n        end\n    end\n    \n   \
    \ third = sort(third)\n    \n    third = Int64[]\n    \n    for i in l\n     \
    \   if i%3 == 0\n            push!(third, i)\n        end\n    end\n    \n   \
    \ third = sort(third)\n    \n    third = Int64[]\n    \n    for i in l\n     \
    \   if i%3 == 0\n            push!(third, i)\n        end\n    end\n    \n   \
    \ third = sort(third)\n    \n    third = Int64[]\n    \n    for i in l\n     \
    \   if i%3 == 0\n            push!(third, i)\n        end\n    end\n    \n   \
    \ third = sort(third)\n    \n    third = Int64[]\n    \n    for i in l\n     \
    \   if i%3 == 0\n            push!(third, i)\n        end\n    end\n    \n   \
    \ third = sort(third)\n    \n    third = Int64[]\n    \n    for i in l\n     \
    \   if i%3 == 0\n            push!(third, i)\n        end\n    end\n    \n   \
    \ third = sort(third)\n    \n    third = ", "    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n", "    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    third = l[div(length(l), 3)]\n  \
    \  \n    third = sort(third)\n    \n    third = third[div(length(third), 3)]\n\
    \    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(",
  "    \n    l = sort(l)\n    \n    third = l[div(length(l),3)+1]\n    \n    l = l[div(length(l),3)+1:end]\n\
    \    \n    l = l[div(length(l),3):end]\n    \n    l = l[1:div(length(l),3)+1]\n\
    \    \n    l = l[1:div(length(l),3)+third]\n    \n    l = l[third:div(length(l),3)]\n\
    \    \n    l = l[1:div(length(l),3)]\n    \n    return l\nend", "    \n    third\
    \ = l[div(length(l),3)]\n    \n    third = third[1:end-1]\n    \n    third = third[1:end-1]\n\
    \    \n    third = third[1:end-1]\n    \n    third = third[1:end-1]\n    \n  \
    \  third = third[1:end-1]\n    \n    third = third[1:end-1]\n    \n    third =\
    \ third[1:end-1]\n    \n    third = third[1:end-1]\n    \n    third = third[1:end-1]\n\
    \    \n    third = third[1:end-1]\n    \n    third = third[1:end-1]\n    \n  \
    \  third = third[1:end-1]\n    \n    third = third[1:end-1]\n    \n    third =\
    \ third[1:end-1]\n    \n    third = third[1:end-1]\n    \n    third = third[1:end-1]\n\
    \    \n    third = third[1:end-1]\n    \n    third = third[1:end-1]\n    \n  \
    \  third = third[1:end-1]\n    \n    third = third[1:end-1]\n    \n    third =\
    \ third[1:end-1]\n    \n    third = third[1:end-1]\n    \n    third = third[1:end-1]\n\
    \    \n    third = third[1:end-1]\n    \n    third = third[1:end-1]\n    \n  \
    \  third = third[1:end-1]\n    \n    third = third[1:end-1]\n    \n    third =\
    \ third[1:end-1]\n    \n    third = third[1:end-1]\n    \n    third = third[1:end-1]\n\
    \    \n    third = third[1:end-1]\n    \n    third = third[1:end-1]\n    \n  \
    \  third = third[1:end-1]\n    \n    third = third[1:end-1]\n    \n    third =\
    \ third[1:end-1]\n    \n    third = third[1:end-1]\n    \n    third = third[1:end-1]\n\
    \    \n    third = third[1:end-1]\n    \n    third = third[1:end-1]\n    \n  \
    \  third = third[1:end-1]\n    \n    third = third[1:end-1]\n    \n    third =\
    \ third[1:end-1]\n    \n    third = third[1:end-1]\n    \n    third = third[1:end-1]\n\
    \    \n    third = third[1:end-1]\n    \n    ", "    \n    l = sort(l)\n    \n\
    \    third = l[div(length(l), 3) == 0]\n    \n    third = sort(third)\n    \n\
    \    third = third[div(length(third), 3) == 0]\n    \n    third = third[div(length(third),\
    \ 3) == 0]\n    \n    third = third[div(length(third), 3) == 0]\n    \n    third\
    \ = third[div(length(third), 3) == 0]\n    \n    third = third[div(length(third),\
    \ 3) == 0]\n    \n    third = third[div(length(third), 3) == 0]\n    \n    third\
    \ = third[div(length(third), 3) == 0]\n    \n    third = third[div(length(third),\
    \ 3) == 0]\n    \n    third = third[div(length(third), 3) == 0]\n    \n    third\
    \ = third[div(length(third), 3) == 0]\n    \n    third = third[div(length(third),\
    \ 3) == 0]\n    \n    third = third[div(length(third), 3) == 0]\n    \n    third\
    \ = third[div(length(third), 3) == 0]\n    \n    third = third[div(length(third),\
    \ 3) == 0]\n    \n    third = third[div(length(third), 3) == 0]\n    \n    third\
    \ = third[div(length(third), 3) == 0]\n    \n    third = third[div(length(third),\
    \ 3) == 0]\n    \n    third = third[div(length(third), 3) == 0]\n    \n    third\
    \ = third[div(length(third), 3) == 0]\n    \n    third = third[div(length(third),\
    \ 3) == 0]\n    \n    third = third[div(length(third), 3) == 0]\n    \n    third\
    \ = third[div(length(third), 3) == 0]\n    \n    third = third[div(length(third),\
    \ 3) == 0]\n    \n    third = third[div(length(third), 3) == 0]\n    \n    third\
    \ = third[div(length(third), 3) == 0]\n    \n    third = third[div(length(third),\
    \ 3) == 0]\n    \n    third = third[div(length(third), 3) == 0]\n    \n    third\
    \ = third[div(length(third), 3) == 0]\n    \n    thir", "    \n    third = Int64[]\n\
    \    \n    for i in 1:length(l)\n        if mod(l[i],3) == 0\n            push!(third,l[i])\n\
    \        end\n    end\n    \n    third = sort(third)\n    \n    third = Int64[]\n\
    \    \n    for i in 1:length(l)\n        if mod(l[i],3) == 0\n            push!(third,l[i])\n\
    \        end\n    end\n    \n    third = sort(third)\n    \n    third = Int64[]\n\
    \    \n    for i in 1:length(l)\n        if mod(l[i],3) == 0\n            push!(third,l[i])\n\
    \        end\n    end\n    \n    third = sort(third)\n    \n    third = Int64[]\n\
    \    \n    for i in 1:length(l)\n        if mod(l[i],3) == 0\n            push!(third,l[i])\n\
    \        end\n    end\n    \n    third = sort(third)\n    \n    third = Int64[]\n\
    \    \n    for i in 1:length(l)\n        if mod(l[i],3) == 0\n            push!(third,l[i])\n\
    \        end\n    end\n    \n    third = sort(third)\n    \n    third = Int64[]\n\
    \    \n    for i in 1:length(l)\n        if mod(l[i],3) == 0\n            push!(third,l[i])\n\
    \        end\n    end\n    \n    third = sort(third)\n    \n    third = Int64[]\n\
    \    \n    for i in 1:length(l)\n        if mod(l[i],3) == 0\n            push!(third,l[i])\n\
    \        end\n    end\n    \n    third = sort(third)\n    \n    third = Int64[]\n\
    \    \n    for i in 1:length(l)\n        if mod(l[i],3) == 0\n            push!(third,l[i])\n\
    \        end\n    end\n    \n    third = sort(third)\n    \n    third = Int64[]\n\
    \    \n    for i in 1:length(l)\n        if mod(l[i],3) == 0\n            push!(third,l[i])\n\
    \        end\n    end\n    \n    third = sort(third)\n    \n    third = Int64[]\n\
    \    \n    for i in 1:length(l)\n        if mod(l[i],3) == 0\n            push!(third,l[i])\n\
    \        end\n    end\n    \n    third = sort(third)\n    \n    third = Int64[]\n\
    \    \n    for i in 1:length(l)\n        if mod(l[i],3) == 0\n            push!(third,l[i])\n\
    \        end\n    end\n    \n    third = sort(third)\n    \n    third = Int64[]\n\
    \    \n    for i in 1:length(l)\n        if mod(l[i],3) == 0\n            push!(third,",
  "    \n    third = l[div(length(l),3)]\n    \n    third = third[div(length(third),3)]\n\
    \    \n    third = third[div(length(third),3)]\n    \n    third = third[div(length(third),3)]\n\
    \    \n    third = third[div(length(third),3)]\n    \n    third = third[div(length(third),3)]\n\
    \    \n    third = third[div(length(third),3)]\n    \n    third = third[div(length(third),3)]\n\
    \    \n    third = third[div(length(third),3)]\n    \n    third = third[div(length(third),3)]\n\
    \    \n    third = third[div(length(third),3)]\n    \n    third = third[div(length(third),3)]\n\
    \    \n    third = third[div(length(third),3)]\n    \n    third = third[div(length(third),3)]\n\
    \    \n    third = third[div(length(third),3)]\n    \n    third = third[div(length(third),3)]\n\
    \    \n    third = third[div(length(third),3)]\n    \n    third = third[div(length(third),3)]\n\
    \    \n    third = third[div(length(third),3)]\n    \n    third = third[div(length(third),3)]\n\
    \    \n    third = third[div(length(third),3)]\n    \n    third = third[div(length(third),3)]\n\
    \    \n    third = third[div(length(third),3)]\n    \n    third = third[div(length(third),3)]\n\
    \    \n    third = third[div(length(third),3)]\n    \n    third = third[div(length(third),3)]\n\
    \    \n    third = third[div(length(third),3)]\n    \n    third = third[div(length(third),3)]\n\
    \    \n    third = third[div(length(third),3)]\n    \n    third = third[div(length(third),3)]\n\
    \    \n    third = third[div(length(third),3)]\n    \n    third = third[div(length(third),3)]\n\
    \    \n    third = third[div(length(third),3)]\n    \n    third = third[div(length(third),3)]\n\
    \    \n    ", "    \n    third = Int64[]\n    \n    for i in l\n        if i%3\
    \ == 0\n            push!(third, i)\n        end\n    end\n    \n    third = sort(third)\n\
    \    \n    for i in l\n        if i not in third\n            push!(l, i)\n  \
    \      end\n    end\n    \n    return l\nend", "    \n    third = Vector{Int64}(undef,\
    \ length(l))\n    third[:] = l\n    \n    for i in 1:length(l)\n        if i%3\
    \ == 0\n            third[i] = l[i]\n        else\n            third[i] = l[i]\n\
    \        end\n    end\n    \n    return third\nend", "    \n    third = Vector{Int64}(undef,\
    \ length(l))\n    for i in 1:length(l)\n        if i%3 == 0\n            third[i]\
    \ = l[i]\n        else\n            third[i] = l[i]\n        end\n    end\n  \
    \  return third\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"This function\
    \ takes a list l and returns a list l' such that\n    l' is identical to l in\
    \ the indicies that are not divisible by three, while its values at the indicies\
    \ that are divisible by three are equal\n    to the values of the corresponding\
    \ indicies of l, but sorted.\n            \"\"\"", "    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    l = sort(l)\n    \n    third = l[div(length(l),3)]\n\
    \    \n    l = l[div(length(l),3) != div(length(l),3)]\n    \n    l = l[div(length(l),3)\
    \ != div(length(l),3)]\n    \n    l = l[div(length(l),3) != div(length(l),3)]\n\
    \    \n    l = l[div(length(l),3) != div(length(l),3)]\n    \n    l = l[div(length(l),3)\
    \ != div(length(l),3)]\n    \n    l = l[div(length(l),3) != div(length(l),3)]\n\
    \    \n    l = l[div(length(l),3) != div(length(l),3)]\n    \n    l = l[div(length(l),3)\
    \ != div(length(l),3)]\n    \n    l = l[div(length(l),3) != div(length(l),3)]\n\
    \    \n    l = l[div(length(l),3) != div(length(l),3)]\n    \n    l = l[div(length(l),3)\
    \ != div(length(l),3)]\n    \n    l = l[div(length(l),3) != div(length(l),3)]\n\
    \    \n    l = l[div(length(l),3) != div(length(l),3)]\n    \n    l = l[div(length(l),3)\
    \ != div(length(l),3)]\n    \n    l = l[div(length(l),3) != div(length(l),3)]\n\
    \    \n    l = l[div(length(l),3) != div(length(l),3)]\n    \n    l = l[div(length(l),3)\
    \ != div(length(l),3)]\n    \n    l = l[div(length(l),3) != div(length(l),3)]\n\
    \    \n    l = l[div(length(l),3) != div(length(l),3)]\n    \n    l = l[div(length(l),3)\
    \ != div(length(l),3)]\n    \n    l = l[div(length(l),3) != div(length(l),3)]\n\
    \    \n    l = l[div(length(l),3) != div(length(l),3)]\n    \n    l = l[div(length(l),3)\
    \ != div(length(l),3)]\n    \n    l = l[div(length(l),3) != div(length(l),3)]\n\
    \    \n    l = l[div(length(l),", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 !=\
    \ 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>", "    \n    third\
    \ = Vector{Int64}(undef,0)\n    third = Vector{Int64}(undef,0)\n    \n    for\
    \ i in 1:length(l)\n        if l[i] % 3 == 0\n            push!(third,l[i])\n\
    \        else\n            push!(third,l[i])\n            push!(third,l[i])\n\
    \        end\n    end\n    \n    third\nend", "    \n    third = l[div(length(l),\
    \ 3)]\n    \n    third = third.(sortperm(l))\n    \n    third = third.(sortperm(l))\n\
    \    \n    third = third.(sortperm(l))\n    \n    third = third.(sortperm(l))\n\
    \    \n    third = third.(sortperm(l))\n    \n    third = third.(sortperm(l))\n\
    \    \n    third = third.(sortperm(l))\n    \n    third = third.(sortperm(l))\n\
    \    \n    third = third.(sortperm(l))\n    \n    third = third.(sortperm(l))\n\
    \    \n    third = third.(sortperm(l))\n    \n    third = third.(sortperm(l))\n\
    \    \n    third = third.(sortperm(l))\n    \n    third = third.(sortperm(l))\n\
    \    \n    third = third.(sortperm(l))\n    \n    third = third.(sortperm(l))\n\
    \    \n    third = third.(sortperm(l))\n    \n    third = third.(sortperm(l))\n\
    \    \n    third = third.(sortperm(l))\n    \n    third = third.(sortperm(l))\n\
    \    \n    third = third.(sortperm(l))\n    \n    third = third.(sortperm(l))\n\
    \    \n    third = third.(sortperm(l))\n    \n    third = third.(sortperm(l))\n\
    \    \n    third = third.(sortperm(l))\n    \n    third = third.(sortperm(l))\n\
    \    \n    third = third.(sortperm(l))\n    \n    third = third.(sortperm(l))\n\
    \    \n    third = third.(sortperm(l))\n    \n    third = third.(sortperm(l))\n\
    \    \n    third = third.(sortperm(l))\n    \n    third = third.(sortperm(l))\n\
    \    \n    third = third.(sortperm(l))\n    \n    third = third.(sortperm(l))\n\
    \    \n    third = third.(sortperm(l))\n    \n    third = third.(sortperm(l))\n\
    \    \n    third = third.(sortperm(l))\n    \n    third = third.(sortperm(l))\n\
    \    \n    thir", "    \n    third = Int64[]\n    \n    for i in 1:length(l)\n\
    \        if mod(l[i], 3) == 0\n            push!(third, l[i])\n        end\n \
    \   end\n    \n    return third\nend", "    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = third.+1 \n    \n    third = third.-1\n    \n    third = third.+1\
    \ \n    \n    third = third.-1\n    \n    third = third.+1 \n    \n    third =\
    \ third.-1\n    \n    third = third.+1 \n    \n    third = third.-1\n    \n  \
    \  third = third.+1 \n    \n    third = third.-1\n    \n    third = third.+1 \n\
    \    \n    third = third.-1\n    \n    third = third.+1 \n    \n    third = third.-1\n\
    \    \n    third = third.+1 \n    \n    third = third.-1\n    \n    third = third.+1\
    \ \n    \n    third = third.-1\n    \n    third = third.+1 \n    \n    third =\
    \ third.-1\n    \n    third = third.+1 \n    \n    third = third.-1\n    \n  \
    \  third = third.+1 \n    \n    third = third.-1\n    \n    third = third.+1 \n\
    \    \n    third = third.-1\n    \n    third = third.+1 \n    \n    third = third.-1\n\
    \    \n    third = third.+1 \n    \n    third = third.-1\n    \n    third = third.+1\
    \ \n    \n    third = third.-1\n    \n    third = third.+1 \n    \n    third =\
    \ third.-1\n    \n    third = third.+1 \n    \n    third = third.-1\n    \n  \
    \  third = third.+1 \n    \n    third = third.-1\n    \n    third = third.+1 \n\
    \    \n    third = third.-1\n    \n    third = third.+1 \n    \n    third = third.-1\n\
    \    \n    third = third.+1 \n    \n    third = third.-1\n    \n    third = third.+1\
    \ \n    \n    third = third.-1\n    \n    third = third.+1 \n    \n    third =\
    \ third.-1\n    \n    third = third.+1 \n    \n    third = third.-1\n    \n  \
    \  third = third.+1 \n    \n    third = third.-1\n    \n    ", "    \n    l =\
    \ sort(l)\n    \n    third = l[div(length(l),3)+1]\n    \n    l = l[div(length(l),3)+1:end]\n\
    \    \n    l = l[div(length(l),3):end]\n    \n    l = sort(l)\n    \n    l = l[div(length(l),3)+1:end]\n\
    \    \n    l = l[div(length(l),3):end]\n    \n    l = sort(l)\n    \n    l = l[div(length(l),3)+1:end]\n\
    \    \n    l = l[div(length(l),3):end]\n    \n    l = sort(l)\n    \n    l = l[div(length(l),3)+1:end]\n\
    \    \n    l = l[div(length(l),3):end]\n    \n    l = sort(l)\n    \n    l = l[div(length(l),3)+1:end]\n\
    \    \n    l = l[div(length(l),3):end]\n    \n    l = sort(l)\n    \n    l = l[div(length(l),3)+1:end]\n\
    \    \n    l = l[div(length(l),3):end]\n    \n    l = sort(l)\n    \n    l = l[div(length(l),3)+1:end]\n\
    \    \n    l = l[div(length(l),3):end]\n    \n    l = sort(l)\n    \n    l = l[div(length(l),3)+1:end]\n\
    \    \n    l = l[div(length(l),3):end]\n    \n    l = sort(l)\n    \n    l = l[div(length(l),3)+1:end]\n\
    \    \n    l = l[div(length(l),3):end]\n    \n    l = sort(l)\n    \n    l = l[div(length(l),3)+1:end]\n\
    \    \n    l = l[div(length(l),3):end]\n    \n    l = sort(l)\n    \n    l = l[div(length(l),3)+1:end]\n\
    \    \n    l = l[div(length(l),3):end]\n    \n    l = sort(l)\n    \n    l = l[div(length(l),3)+1:end]\n\
    \    \n    l = l[div(length(l),3):end]\n    \n    l = sort(l)\n    \n    l = l[div(length(l),3)+1:end]\n\
    \    \n    l = l[div(length(l),3):end]\n    \n    l = sort(l)\n    \n    l = l[div(length",
  "    \n    l = sort(l)\n    \n    l = l[findall(l .% 3 == 0)]\n    \n    l = sort(l)\n\
    \    \n    return l\nend", "    \n    l = sort(l)\n    \n    third = l[div(length(l),3)]\n\
    \    \n    third = third[1:end-1]\n    \n    third = third[1:end-1]\n    \n  \
    \  third = third[1:end-1]\n    \n    third = third[1:end-1]\n    \n    third =\
    \ third[1:end-1]\n    \n    third = third[1:end-1]\n    \n    third = third[1:end-1]\n\
    \    \n    third = third[1:end-1]\n    \n    third = third[1:end-1]\n    \n  \
    \  third = third[1:end-1]\n    \n    third = third[1:end-1]\n    \n    third =\
    \ third[1:end-1]\n    \n    third = third[1:end-1]\n    \n    third = third[1:end-1]\n\
    \    \n    third = third[1:end-1]\n    \n    third = third[1:end-1]\n    \n  \
    \  third = third[1:end-1]\n    \n    third = third[1:end-1]\n    \n    third =\
    \ third[1:end-1]\n    \n    third = third[1:end-1]\n    \n    third = third[1:end-1]\n\
    \    \n    third = third[1:end-1]\n    \n    third = third[1:end-1]\n    \n  \
    \  third = third[1:end-1]\n    \n    third = third[1:end-1]\n    \n    third =\
    \ third[1:end-1]\n    \n    third = third[1:end-1]\n    \n    third = third[1:end-1]\n\
    \    \n    third = third[1:end-1]\n    \n    third = third[1:end-1]\n    \n  \
    \  third = third[1:end-1]\n    \n    third = third[1:end-1]\n    \n    third =\
    \ third[1:end-1]\n    \n    third = third[1:end-1]\n    \n    third = third[1:end-1]\n\
    \    \n    third = third[1:end-1]\n    \n    third = third[1:end-1]\n    \n  \
    \  third = third[1:end-1]\n    \n    third = third[1:end-1]\n    \n    third =\
    \ third[1:end-1]\n    \n    third = third[1:end-1]\n    \n    third = third[1:end-1]\n\
    \    \n    third = third[1:end-1]\n    \n    third = third[1:end-1]\n    \n  \
    \  third = third", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l =\
    \ l[findall(l .% 3 == 1)]\n    return l\nend\n</code>\n<|/ a |>\n<| c |>\nI like\
    \ your solution, but I wonder if there is a way to avoid the explicit looping\
    \ over the indicies and just use broadcasting?\n<|/ c |>\n<| c |>\nI added a solution\
    \ that uses broadcasting, but I wonder if there is a way to avoid the explicit\
    \ looping over the indicies and just use broadcasting?\n<|/ c |>\n<| c |>\nI added\
    \ a solution that uses broadcasting, but I wonder if there is a way to avoid the\
    \ explicit looping over the indicies and just use broadcasting?\n<|/ c |>\n<|\
    \ c |>\nI added a solution that uses broadcasting, but I wonder if there is a\
    \ way to avoid the explicit looping over the indicies and just use broadcasting?\n\
    <|/ c |>\n<| c |>\nI added a solution that uses broadcasting, but I wonder if\
    \ there is a way to avoid the explicit looping over the indicies and just use\
    \ broadcasting?\n<|/ c |>\n<| a tags=julia,arrays,sorting |>\nHere's a solution\
    \ using broadcasting:\n<code>\njulia> function sort_third(l::Vector{Int64})::Vector{Int64}\n\
    \           l = sort(l)\n           l = l[findall(l .% 3 == 0)]\n           l\
    \ = l[findall(l .% 3 == 1)]\n           return l\n       end\nsort_third (generic\
    \ function with 1 method)", "    \n    l = sort(l)\n    \n    third = Vector{Int64}(undef,\
    \ 3)\n    \n    for i = 1:3\n        third[i] = l[(i-1)*3+1]\n    end\n    \n\
    \    return third\nend", "    \n    third = Vector{Int64}(undef, length(l))\n\
    \    third = Vector{Int64}(undef, length(l))\n    \n    for i = 1:length(l)\n\
    \        if l[i] % 3 == 0\n            third[i] = l[i]\n        else\n       \
    \     third[i] = l[i]\n        end\n    end\n    \n    third = sort(third)\n \
    \   \n    return third\nend", "    \n    third = Vector{Int64}(undef, length(l))\n\
    \    third[:] = l[:]\n    \n    for i in 1:length(l)\n        if l[i] % 3 == 0\n\
    \            third[i] = l[i]\n        else\n            third[i] = l[i]\n    \
    \    end\n    end\n    \n    return third\nend", "    \n    third = Vector{Int64}(undef,\
    \ length(l))\n    \n    for i in 1:length(l)\n        if l[i] % 3 == 0\n     \
    \       third[i] = l[i]\n        else\n            third[i] = l[i]\n        end\n\
    \    end\n    \n    third = sort(third)\n    \n    for i in 1:length(l)\n    \
    \    if l[i] % 3 == 0\n            l[i] = third[i]\n        else\n           \
    \ l[i] = l[i]\n        end\n    end\n    \n    return l\nend", "    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    l = sort(l)\n    l = l[findall(l\
    \ .% 3 == 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>", "    l\
    \ = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = div(third,3)\n    \n    third = third[1:end-1]\n    \n    third\
    \ = sort(third)\n    \n    third = third[1:end-1]\n    \n    third = third\n \
    \   \n    third = third\n    \n    third = third\n    \n    third = third\n  \
    \  \n    third = third\n    \n    third = third\n    \n    third = third\n   \
    \ \n    third = third\n    \n    third = third\n    \n    third = third\n    \n\
    \    third = third\n    \n    third = third\n    \n    third = third\n    \n \
    \   third = third\n    \n    third = third\n    \n    third = third\n    \n  \
    \  third = third\n    \n    third = third\n    \n    third = third\n    \n   \
    \ third = third\n    \n    third = third\n    \n    third = third\n    \n    third\
    \ = third\n    \n    third = third\n    \n    third = third\n    \n    third =\
    \ third\n    \n    third = third\n    \n    third = third\n    \n    third = third\n\
    \    \n    third = third\n    \n    third = third\n    \n    third = third\n \
    \   \n    third = third\n    \n    third = third\n    \n    third = third\n  \
    \  \n    third = third\n    \n    third = third\n    \n    third = third\n   \
    \ \n    third = third\n    \n    third = third\n    \n    third = third\n    \n\
    \    third = third\n    \n    third = third\n    \n    third = third\n    \n \
    \   third = third\n    \n    third = third\n    \n    third = third\n    \n  \
    \  third = third\n    \n    third = third\n    \n    third = third\n    \n   \
    \ third = third\n    \n    third = third\n    \n    third = third\n    \n    third\
    \ = third\n    \n    third = third\n    \n    third = third\n    \n    third =\
    \ third", "    \n    third = l[div(length(l),3)]\n    \n    third = l[div(length(l),3)]\n\
    \    \n    third = l[div(length(l),3)]\n    \n    third = l[div(length(l),3)]\n\
    \    \n    third = l[div(length(l),3)]\n    \n    third = l[div(length(l),3)]\n\
    \    \n    third = l[div(length(l),3)]\n    \n    third = l[div(length(l),3)]\n\
    \    \n    third = l[div(length(l),3)]\n    \n    third = l[div(length(l),3)]\n\
    \    \n    third = l[div(length(l),3)]\n    \n    third = l[div(length(l),3)]\n\
    \    \n    third = l[div(length(l),3)]\n    \n    third = l[div(length(l),3)]\n\
    \    \n    third = l[div(length(l),3)]\n    \n    third = l[div(length(l),3)]\n\
    \    \n    third = l[div(length(l),3)]\n    \n    third = l[div(length(l),3)]\n\
    \    \n    third = l[div(length(l),3)]\n    \n    third = l[div(length(l),3)]\n\
    \    \n    third = l[div(length(l),3)]\n    \n    third = l[div(length(l),3)]\n\
    \    \n    third = l[div(length(l),3)]\n    \n    third = l[div(length(l),3)]\n\
    \    \n    third = l[div(length(l),3)]\n    \n    third = l[div(length(l),3)]\n\
    \    \n    third = l[div(length(l),3)]\n    \n    third = l[div(length(l),3)]\n\
    \    \n    third = l[div(length(l),3)]\n    \n    third = l[div(length(l),3)]\n\
    \    \n    third = l[div(length(l),3)]\n    \n    third = l[div(length(l),3)]\n\
    \    \n    third = l[div(length(l),3)]\n    \n    third = l[div(length(l),3)]\n\
    \    \n    third = l[div(length(l),3)]\n    \n    third = l[div(length(l),3)]\n\
    \    \n    third = l[div", "    \n    third = Vector{Int64}(length(l))\n    \n\
    \    for i in 1:length(l)\n        if mod(l[i],3) == 0\n            third[i] =\
    \ l[i]\n        else\n            third[i] = l[i]\n        end\n    end\n    \n\
    \    return third\nend", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n \
    \   l = l[findall(l .% 3 != 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    third = Int64[]\n    \n    for x in l\n        if x % 3 == 0\n      \
    \      push!(third, x)\n        else\n            push!(third, x)\n        end\n\
    \    end\n    \n    third = sort(third)\n    \n    third = third[2:end]\n    \n\
    \    return third\nend", "    \n    l = sort(l)\n    \n    third = Vector{Int64}(undef,\
    \ 0)\n    \n    for i in 1:length(l)\n        if i%3 == 0\n            push!(third,\
    \ l[i])\n        end\n    end\n    \n    return third\nend", "    \n    third\
    \ = Int64[]\n    \n    for x in l\n        if x % 3 == 0\n            push!(third,\
    \ x)\n        end\n    end\n    \n    third = third[sortperm(third)]\n    \n \
    \   return third\nend\n</cell>\n<code language=julia-1.5>", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    third = l[div(length(l),3)]\n\
    \    \n    third = third[1:end-1]\n    \n    third = third[div(length(l),3):end]\n\
    \    \n    third = third[1:end-1]\n    \n    third = third[div(length(l),3):end]\n\
    \    \n    third = third[1:end-1]\n    \n    third = third[div(length(l),3):end]\n\
    \    \n    third = third[1:end-1]\n    \n    third = third[div(length(l),3):end]\n\
    \    \n    third = third[1:end-1]\n    \n    third = third[div(length(l),3):end]\n\
    \    \n    third = third[1:end-1]\n    \n    third = third[div(length(l),3):end]\n\
    \    \n    third = third[1:end-1]\n    \n    third = third[div(length(l),3):end]\n\
    \    \n    third = third[1:end-1]\n    \n    third = third[div(length(l),3):end]\n\
    \    \n    third = third[1:end-1]\n    \n    third = third[div(length(l),3):end]\n\
    \    \n    third = third[1:end-1]\n    \n    third = third[div(length(l),3):end]\n\
    \    \n    third = third[1:end-1]\n    \n    third = third[div(length(l),3):end]\n\
    \    \n    third = third[1:end-1]\n    \n    third = third[div(length(l),3):end]\n\
    \    \n    third = third[1:end-1]\n    \n    third = third[div(length(l),3):end]\n\
    \    \n    third = third[1:end-1]\n    \n    third = third[div(length(l),3):end]\n\
    \    \n    third = third[1:end-1]\n    \n    third = third[div(length(l),3):end]\n\
    \    \n    third = third[1:end-1]\n    \n    third = third[div(length(l),3):end]\n\
    \    \n    third = third[1:end-1]\n    \n    third = third[div(length(l),3):end]\n\
    \    \n    third = third[1:end-1]\n    \n    third = third[div(length(l),3):end]\n\
    \    \n    third = third[1:end-1]\n    \n    third = third[div(length(l),3):end]\n\
    \    \n    thir", "    \n    l = sort(l)\n    \n    third = l[div(length(l),3)]\n\
    \    \n    l = l[div(length(l),3) != third]\n    \n    l = sort(l)\n    \n   \
    \ return l\nend\n</cell>\n<code language=julia-1.5>", "    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n", "    \n    third = l[div(length(l),3)]\n\
    \    \n    third = third.(sortperm(third))\n    \n    third = third.(sortperm(third))\n\
    \    \n    third = third.(sortperm(third))\n    \n    third = third.(sortperm(third))\n\
    \    \n    third = third.(sortperm(third))\n    \n    third = third.(sortperm(third))\n\
    \    \n    third = third.(sortperm(third))\n    \n    third = third.(sortperm(third))\n\
    \    \n    third = third.(sortperm(third))\n    \n    third = third.(sortperm(third))\n\
    \    \n    third = third.(sortperm(third))\n    \n    third = third.(sortperm(third))\n\
    \    \n    third = third.(sortperm(third))\n    \n    third = third.(sortperm(third))\n\
    \    \n    third = third.(sortperm(third))\n    \n    third = third.(sortperm(third))\n\
    \    \n    third = third.(sortperm(third))\n    \n    third = third.(sortperm(third))\n\
    \    \n    third = third.(sortperm(third))\n    \n    third = third.(sortperm(third))\n\
    \    \n    third = third.(sortperm(third))\n    \n    third = third.(sortperm(third))\n\
    \    \n    third = third.(sortperm(third))\n    \n    third = third.(sortperm(third))\n\
    \    \n    third = third.(sortperm(third))\n    \n    third = third.(sortperm(third))\n\
    \    \n    third = third.(sortperm(third))\n    \n    third = third.(sortperm(third))\n\
    \    \n    third = third.(sortperm(third))\n    \n    third = third.(sortperm(third))\n\
    \    \n    third = third.(sortperm(third))\n    \n    third = third.(sortperm(third))\n\
    \    \n    third = third.(sortperm(third))\n    \n    third = third.(sortperm(third))\n\
    \    \n    third = third.(sortperm(third))\n    \n    third = third.(", "    \n\
    \    l = sort(l)\n    \n    l = l[findall(l .% 3 == 0)]\n    \n    l = sort(l)\n\
    \    \n    l = l[findall(l .% 3 != 0)]\n    \n    return l\nend", "    \n    l\
    \ = sort(l)\n    \n    third = l[div(length(l)-1,3)+1]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[1:div(length(l)-1,3)]\n    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[1:div(length(l)-1,3)]\n    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[1:div(length(l)-1,3)]\n    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[1:div(length(l)-1,3)]\n    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[1:div(length(l)-1,3)]\n    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[1:div(length(l)-1,3)]\n    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[1:div(length(l)-1,3)]\n    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[1:div(length(l)-1,3)]\n    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[1:div(length(l)-1,3)]\n    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[1:div(length(l)-1,3)]\n    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[1:div(length(l)-1,3)]\n    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[1:div(length(l)-1,3)]\n    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[1:div(length(l)-1,3)]\n    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[1:div(length(l)-1,3)]\n    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n",
  "    \n    third = Int64[]\n    \n    for i in 1:length(l)\n        if mod(l[i],\
    \ 3) == 0\n            push!(third, l[i])\n        end\n    end\n    \n    third\
    \ = sort(third)\n    \n    for i in 1:length(l)\n        if mod(l[i], 3) == 0\n\
    \            l[i] = third[i]\n        end\n    end\n    \n    return l\nend\n\
    </cell>\n<code language=julia-1.5>\n@time sort_third(vec)\n</cell>\n<code language=julia-1.5>\n\
    @time sort_third(vec)\n</cell>\n<code language=julia-1.5>\n@time sort_third(vec)\n\
    </cell>\n<code language=julia-1.5>\n@time sort_third(vec)\n</cell>\n<code language=julia-1.5>\n\
    @time sort_third(vec)\n</cell>\n<code language=julia-1.5>\n@time sort_third(vec)\n\
    </cell>\n<code language=julia-1.5>\n@time sort_third(vec)\n</cell>\n<code language=julia-1.5>\n\
    @time sort_third(vec)\n</cell>\n<code language=julia-1.5>\n@time sort_third(vec)\n\
    </cell>\n<code language=julia-1.5>\n@time sort_third(vec)\n</cell>\n<code language=julia-1.5>\n\
    @time sort_third(vec)\n</cell>\n<code language=julia-1.5>\n@time sort_third(vec)\n\
    </cell>\n<code language=julia-1.5>\n@time sort_third(vec)\n</cell>\n<code language=julia-1.5>\n\
    @time sort_third(vec)\n</cell>\n<code language=julia-1.5>\n@time sort_third(vec)\n\
    </cell>\n<code language=julia-1.5>\n@time sort_third(vec)\n</cell>\n<code language=julia-1.5>\n\
    @time sort_third(vec)\n</cell>\n<code language=julia-1.5>\n@time sort_third(vec)\n\
    </cell>\n<code language=julia-1.5>\n@time sort_third(vec)\n</cell>\n<code language=julia-1.5>\n\
    @time sort_third(vec)\n</cell>\n<code language=julia-1.5>\n@time sort_third(vec)\n\
    </cell>\n<code language=julia-1.5>\n@time sort_third(vec)\n</cell>\n<code language=julia-1.5>\n\
    @time sort_third(vec)\n</cell>\n<code language=julia-1.5>\n@time sort_third(vec)\n\
    </cell>\n<code language=", "    \n    third = Vector{Int64}(length(l))\n    third[:]\
    \ = l\n    \n    third[(third%3 .== 0)] .= third[(third%3 .== 0)]\n    third[(third%3\
    \ .== 0)] .= third[(third%3 .== 0)]\n    third[(third%3 .== 0)] .= third[(third%3\
    \ .== 0)]\n    third[(third%3 .== 0)] .= third[(third%3 .== 0)]\n    third[(third%3\
    \ .== 0)] .= third[(third%3 .== 0)]\n    third[(third%3 .== 0)] .= third[(third%3\
    \ .== 0)]\n    third[(third%3 .== 0)] .= third[(third%3 .== 0)]\n    third[(third%3\
    \ .== 0)] .= third[(third%3 .== 0)]\n    third[(third%3 .== 0)] .= third[(third%3\
    \ .== 0)]\n    third[(third%3 .== 0)] .= third[(third%3 .== 0)]\n    third[(third%3\
    \ .== 0)] .= third[(third%3 .== 0)]\n    third[(third%3 .== 0)] .= third[(third%3\
    \ .== 0)]\n    third[(third%3 .== 0)] .= third[(third%3 .== 0)]\n    third[(third%3\
    \ .== 0)] .= third[(third%3 .== 0)]\n    third[(third%3 .== 0)] .= third[(third%3\
    \ .== 0)]\n    third[(third%3 .== 0)] .= third[(third%3 .== 0)]\n    third[(third%3\
    \ .== 0)] .= third[(third%3 .== 0)]\n    third[(third%3 .== 0)] .= third[(third%3\
    \ .== 0)]\n    third[(third%3 .== 0)] .= third[(third%3 .", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n", "    \n    l = sort(l)\n  \
    \  \n    third = l[div(length(l),3)+1]\n    \n    third = div(third,3)\n    \n\
    \    third = third[1:end]\n    \n    third = third.+l[div(length(l),3)]\n    \n\
    \    third = third[1:end]\n    \n    third = third.+l[div(length(l),3)]\n    \n\
    \    third = third[1:end]\n    \n    third = third.+l[div(length(l),3)]\n    \n\
    \    third = third[1:end]\n    \n    third = third.+l[div(length(l),3)]\n    \n\
    \    third = third[1:end]\n    \n    third = third.+l[div(length(l),3)]\n    \n\
    \    third = third[1:end]\n    \n    third = third.+l[div(length(l),3)]\n    \n\
    \    third = third[1:end]\n    \n    third = third.+l[div(length(l),3)]\n    \n\
    \    third = third[1:end]\n    \n    third = third.+l[div(length(l),3)]\n    \n\
    \    third = third[1:end]\n    \n    third = third.+l[div(length(l),3)]\n    \n\
    \    third = third[1:end]\n    \n    third = third.+l[div(length(l),3)]\n    \n\
    \    third = third[1:end]\n    \n    third = third.+l[div(length(l),3)]\n    \n\
    \    third = third[1:end]\n    \n    third = third.+l[div(length(l),3)]\n    \n\
    \    third = third[1:end]\n    \n    third = third.+l[div(length(l),3)]\n    \n\
    \    third = third[1:end]\n    \n    third = third.+l[div(length(l),3)]\n    \n\
    \    third = third[1:end]\n    \n    third = third.+l[div(length(l),3)]\n    \n\
    \    third = third[1:end]\n    \n    third = third.+l[div(length(l),3)]\n    \n\
    \    third = third[1:end]\n    \n    third = third.+l[div(length(l),3)]\n    \n\
    \    third = third[1:end]\n    \n    third = third.+l[", "    \n    l = sort(l)\n\
    \    \n    l = l[findall(l .% 3 == 0)]\n    \n    l = sort(l)\n    \n    l = l[findall(l\
    \ .% 3 != 0)]\n    \n    return l\nend", "    l = sort(l)\n    l = l[findall(l\
    \ .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\nend", "    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    l = sort(l)\n \
    \   \n    third = l[div(length(l), 3)]\n    \n    third = third.*ones(length(third))\n\
    \    \n    third = sort(third)\n    \n    l = l[div(length(l), 3) : end]\n   \
    \ \n    l = append(l, third)\n    \n    return l\nend", "    l = sort(l)\n   \
    \ l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\n\
    end", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    l =\
    \ sort(l)\n    \n    third = l[div(length(l)-1,3)+1]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[1:div(length(l)-1,3)]\n    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[1:div(length(l)-1,3)]\n    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[1:div(length(l)-1,3)]\n    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[1:div(length(l)-1,3)]\n    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[1:div(length(l)-1,3)]\n    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[1:div(length(l)-1,3)]\n    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[1:div(length(l)-1,3)]\n    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[1:div(length(l)-1,3)]\n    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[1:div(length(l)-1,3)]\n    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[1:div(length(l)-1,3)]\n    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[1:div(length(l)-1,3)]\n    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[1:div(length(l)-1,3)]\n    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[1:div(length(l)-1,3)]\n    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[1:div(length(l)-1,3)]\n    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n", "    \n    l = sort(l)\n  \
    \  \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length", " \
    \   \n    l = sort(l)\n    \n    third = Vector{Int64}(undef, 0)\n    \n    for\
    \ i in 1:length(l)\n        if i%3 == 0\n            third[i] = l[i]\n       \
    \ else\n            third[i] = l[i+1]\n        end\n    end\n    \n    return\
    \ third\nend\n</cell>\n<code language=julia-1.4>", "    \n    l = sort(l)\n  \
    \  \n    third = l[div(length(l),3)-1]\n    \n    l = l[div(length(l),3)-1:end]\n\
    \    \n    l = sort(l)\n    \n    l = l[div(length(l),3)-1:end]\n    \n    l =\
    \ sort(l)\n    \n    l = l[div(length(l),3)-1:end]\n    \n    l = sort(l)\n  \
    \  \n    l = l[div(length(l),3)-1:end]\n    \n    l = sort(l)\n    \n    l = l[div(length(l),3)-1:end]\n\
    \    \n    l = sort(l)\n    \n    l = l[div(length(l),3)-1:end]\n    \n    l =\
    \ sort(l)\n    \n    l = l[div(length(l),3)-1:end]\n    \n    l = sort(l)\n  \
    \  \n    l = l[div(length(l),3)-1:end]\n    \n    l = sort(l)\n    \n    l = l[div(length(l),3)-1:end]\n\
    \    \n    l = sort(l)\n    \n    l = l[div(length(l),3)-1:end]\n    \n    l =\
    \ sort(l)\n    \n    l = l[div(length(l),3)-1:end]\n    \n    l = sort(l)\n  \
    \  \n    l = l[div(length(l),3)-1:end]\n    \n    l = sort(l)\n    \n    l = l[div(length(l),3)-1:end]\n\
    \    \n    l = sort(l)\n    \n    l = l[div(length(l),3)-1:end]\n    \n    l =\
    \ sort(l)\n    \n    l = l[div(length(l),3)-1:end]\n    \n    l = sort(l)\n  \
    \  \n    l = l[div(length(l),3)-1:end]\n    \n    l = sort(l)\n    \n    l = l[div(length(l),3)-1:end]\n\
    \    \n    l = sort(l)\n    \n    l = l[div(length(l),3)-1:end]\n    \n    l =\
    \ sort(l)\n    \n    l = l[div(length(l),3)-1:end]\n    \n    l = sort(l)\n  \
    \  \n    l = l[div(length(l),3)-1:end]\n    \n    l = sort(l)\n    \n    l = l[div(length(l),3)-1:end]\n\
    \    \n    l = sort(l)\n    \n    l = l[div(length(l),3)-1:end]\n    \n    l =\
    \ sort(l)\n    \n    l = l[", "    \n    third = l[div(length(l),3)]\n    \n \
    \   third = third.(sortperm(third))\n    \n    third = third.(sortperm(third))\n\
    \    \n    third = third.(sortperm(third))\n    \n    third = third.(sortperm(third))\n\
    \    \n    third = third.(sortperm(third))\n    \n    third = third.(sortperm(third))\n\
    \    \n    third = third.(sortperm(third))\n    \n    third = third.(sortperm(third))\n\
    \    \n    third = third.(sortperm(third))\n    \n    third = third.(sortperm(third))\n\
    \    \n    third = third.(sortperm(third))\n    \n    third = third.(sortperm(third))\n\
    \    \n    third = third.(sortperm(third))\n    \n    third = third.(sortperm(third))\n\
    \    \n    third = third.(sortperm(third))\n    \n    third = third.(sortperm(third))\n\
    \    \n    third = third.(sortperm(third))\n    \n    third = third.(sortperm(third))\n\
    \    \n    third = third.(sortperm(third))\n    \n    third = third.(sortperm(third))\n\
    \    \n    third = third.(sortperm(third))\n    \n    third = third.(sortperm(third))\n\
    \    \n    third = third.(sortperm(third))\n    \n    third = third.(sortperm(third))\n\
    \    \n    third = third.(sortperm(third))\n    \n    third = third.(sortperm(third))\n\
    \    \n    third = third.(sortperm(third))\n    \n    third = third.(sortperm(third))\n\
    \    \n    third = third.(sortperm(third))\n    \n    third = third.(sortperm(third))\n\
    \    \n    third = third.(sortperm(third))\n    \n    third = third.(sortperm(third))\n\
    \    \n    third = third.(sortperm(third))\n    \n    third = third.(sortperm(third))\n\
    \    \n    third = third.(sortperm(third))\n    \n    third = third.(", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    l = sort(l)\n \
    \   \n    third = l[div(length(l)-1,3)+1]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n", "    \n    l = sort(l)\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    l = l[div(length(l),3):end]\n\
    \    \n    l = sort(l)\n    \n    l = l[div(length(l),3):end]\n    \n    l = sort(l)\n\
    \    \n    l = l[div(length(l),3):end]\n    \n    l = sort(l)\n    \n    l = l[div(length(l),3):end]\n\
    \    \n    l = sort(l)\n    \n    l = l[div(length(l),3):end]\n    \n    l = sort(l)\n\
    \    \n    l = l[div(length(l),3):end]\n    \n    l = sort(l)\n    \n    l = l[div(length(l),3):end]\n\
    \    \n    l = sort(l)\n    \n    l = l[div(length(l),3):end]\n    \n    l = sort(l)\n\
    \    \n    l = l[div(length(l),3):end]\n    \n    l = sort(l)\n    \n    l = l[div(length(l),3):end]\n\
    \    \n    l = sort(l)\n    \n    l = l[div(length(l),3):end]\n    \n    l = sort(l)\n\
    \    \n    l = l[div(length(l),3):end]\n    \n    l = sort(l)\n    \n    l = l[div(length(l),3):end]\n\
    \    \n    l = sort(l)\n    \n    l = l[div(length(l),3):end]\n    \n    l = sort(l)\n\
    \    \n    l = l[div(length(l),3):end]\n    \n    l = sort(l)\n    \n    l = l[div(length(l),3):end]\n\
    \    \n    l = sort(l)\n    \n    l = l[div(length(l),3):end]\n    \n    l = sort(l)\n\
    \    \n    l = l[div(length(l),3):end]\n    \n    l = sort(l)\n    \n    l = l[div(length(l),3):end]\n\
    \    \n    l = sort(l)\n    \n    l = l[div(length(l),3):end]\n    \n    l = sort(l)\n\
    \    \n    l = l[div(length(l),3):end]\n    \n    l = sort(l)\n    \n    l = l[div(length(l),3):end]\n\
    \    \n    l = sort(l)\n    \n    l = l[div(length(l),3):end]\n    \n    l = sort(l)\n\
    \    \n    l = l[div", "    \n    l = sort(l)\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[1:div(length(l)-1,3)]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[1:div(length(l)-1,3)]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[1:div(length(l)-1,3)]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[1:div(length(l)-1,3)]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[1:div(length(l)-1,3)]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[1:div(length(l)-1,3)]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[1:div(length(l)-1,3)]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[1:div(length(l)-1,3)]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[1:div(length(l)-1,3)]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[1:div(length(l)-1,3)]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[1:div(length(l)-1,3)]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[1:div(length(l)-1,3)]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[1:div(length(l)-1,3)]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[1:div(length(l)-1,3)]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[1:div(length(l)-1,3)]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[1:div(length(l)-1,3)]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[1:div(length(l)-1,3)]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[1:div(length(l)-1,3)]\n\
    \    \n    l = ", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l\
    \ .% 3 != 0)]\n    l = sort(l)\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    l = sort(l)\n    \n    third = l[div(length(l),3)]\n    \n    third =\
    \ third.+length(l)\n    \n    third = third.-div(length(third),3)\n    \n    third\
    \ = third.+length(l)\n    \n    third = third.-div(length(third),3)\n    \n  \
    \  third = third.+length(l)\n    \n    third = third.-div(length(third),3)\n \
    \   \n    third = third.+length(l)\n    \n    third = third.-div(length(third),3)\n\
    \    \n    third = third.+length(l)\n    \n    third = third.-div(length(third),3)\n\
    \    \n    third = third.+length(l)\n    \n    third = third.-div(length(third),3)\n\
    \    \n    third = third.+length(l)\n    \n    third = third.-div(length(third),3)\n\
    \    \n    third = third.+length(l)\n    \n    third = third.-div(length(third),3)\n\
    \    \n    third = third.+length(l)\n    \n    third = third.-div(length(third),3)\n\
    \    \n    third = third.+length(l)\n    \n    third = third.-div(length(third),3)\n\
    \    \n    third = third.+length(l)\n    \n    third = third.-div(length(third),3)\n\
    \    \n    third = third.+length(l)\n    \n    third = third.-div(length(third),3)\n\
    \    \n    third = third.+length(l)\n    \n    third = third.-div(length(third),3)\n\
    \    \n    third = third.+length(l)\n    \n    third = third.-div(length(third),3)\n\
    \    \n    third = third.+length(l)\n    \n    third = third.-div(length(third),3)\n\
    \    \n    third = third.+length(l)\n    \n    third = third.-div(length(third),3)\n\
    \    \n    third = third.+length(l)\n    \n    third = third.-div(length(third),3)\n\
    \    \n    third = third.+length(l)\n    \n    third = third.-div(length(third),3)\n\
    \    \n    third = ", "    \n    l = sort(l)\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    third = Int64[]\n    \n    for x in l\n        if x\
    \ % 3 == 0\n            push!(third, x)\n        end\n    end\n    \n    third\
    \ = sort(third)\n    \n    third = Int64[]\n    \n    for x in l\n        if x\
    \ % 3 != 0\n            push!(third, x)\n        end\n    end\n    \n    third\
    \ = sort(third)\n    \n    return third\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    l = sort(l)\n    \n    third = l[div(length(l),3)]\n    \n    third =\
    \ l[div(length(l),3)]\n    \n    third = l[div(length(l),3)]\n    \n    third\
    \ = l[div(length(l),3)]\n    \n    third = l[div(length(l),3)]\n    \n    third\
    \ = l[div(length(l),3)]\n    \n    third = l[div(length(l),3)]\n    \n    third\
    \ = l[div(length(l),3)]\n    \n    third = l[div(length(l),3)]\n    \n    third\
    \ = l[div(length(l),3)]\n    \n    third = l[div(length(l),3)]\n    \n    third\
    \ = l[div(length(l),3)]\n    \n    third = l[div(length(l),3)]\n    \n    third\
    \ = l[div(length(l),3)]\n    \n    third = l[div(length(l),3)]\n    \n    third\
    \ = l[div(length(l),3)]\n    \n    third = l[div(length(l),3)]\n    \n    third\
    \ = l[div(length(l),3)]\n    \n    third = l[div(length(l),3)]\n    \n    third\
    \ = l[div(length(l),3)]\n    \n    third = l[div(length(l),3)]\n    \n    third\
    \ = l[div(length(l),3)]\n    \n    third = l[div(length(l),3)]\n    \n    third\
    \ = l[div(length(l),3)]\n    \n    third = l[div(length(l),3)]\n    \n    third\
    \ = l[div(length(l),3)]\n    \n    third = l[div(length(l),3)]\n    \n    third\
    \ = l[div(length(l),3)]\n    \n    third = l[div(length(l),3)]\n    \n    third\
    \ = l[div(length(l),3)]\n    \n    third = l[div(length(l),3)]\n    \n    third\
    \ = l[div(length(l),3)]\n    \n    third = l[div(length(l),3)]\n    \n    third\
    \ = l[div(length(l),3)]\n    \n    third = l[div(length(l),3)]\n    \n    third\
    \ = l[div(length(l),3)]\n    ", "    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    third = Int64[]\n    \n    for i in 1:length(l)\n \
    \       if l[i] % 3 == 0\n            push!(third, l[i])\n        end\n    end\n\
    \    \n    third = sort(third)\n    \n    third = Int64[]\n    \n    for i in\
    \ 1:length(l)\n        if l[i] % 3 != 0\n            push!(third, l[i])\n    \
    \    end\n    end\n    \n    third = sort(third)\n    \n    return third\nend",
  "    \n    l = sort(l)\n    \n    third = l[3:end]\n    \n    third = third[findall(third\
    \ .% 3 == 0)]\n    \n    third = third[findall(third .% 3 != 0)]\n    \n    third\
    \ = sort(third)\n    \n    third = third[findall(third .% 3 == 0)]\n    \n   \
    \ third = third[findall(third .% 3 != 0)]\n    \n    third = sort(third)\n   \
    \ \n    third = third[findall(third .% 3 == 0)]\n    \n    third = third[findall(third\
    \ .% 3 != 0)]\n    \n    third = sort(third)\n    \n    third = third[findall(third\
    \ .% 3 == 0)]\n    \n    third = third[findall(third .% 3 != 0)]\n    \n    third\
    \ = sort(third)\n    \n    third = third[findall(third .% 3 == 0)]\n    \n   \
    \ third = third[findall(third .% 3 != 0)]\n    \n    third = sort(third)\n   \
    \ \n    third = third[findall(third .% 3 == 0)]\n    \n    third = third[findall(third\
    \ .% 3 != 0)]\n    \n    third = sort(third)\n    \n    third = third[findall(third\
    \ .% 3 == 0)]\n    \n    third = third[findall(third .% 3 != 0)]\n    \n    third\
    \ = sort(third)\n    \n    third = third[findall(third .% 3 == 0)]\n    \n   \
    \ third = third[findall(third .% 3 != 0)]\n    \n    third = sort(third)\n   \
    \ \n    third = third[findall(third .% 3 == 0)]\n    \n    third = third[findall(third\
    \ .% 3 != 0)]\n    \n    third = sort(third)\n    \n    third = third[findall(third\
    \ .% 3 == 0)]\n    \n    third = third[findall(third .% 3 != 0)]\n    \n    third\
    \ = sort(third)\n    \n    third = third[findall(third .% 3 == 0)]\n    \n   \
    \ third = third[findall(third .% 3 != 0)]\n    \n    third = sort(third)\n   \
    \ \n    third = third[findall(third .% 3 == 0)]\n    \n    third = third[findall(third\
    \ .% 3 != 0)]\n    \n    third = sort(third)\n    \n    third = third[findall(third\
    \ .% 3 == 0)]\n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    third = Vector{Int64}(length(l)-1)\n\
    \    for i = 1:length(l)-1\n        if l[i] % 3 == 0 && l[i+1] % 3 == 0\n    \
    \        third[i] = l[i]\n            third[i+1] = l[i+1]\n        else\n    \
    \        third[i] = l[i+1]\n            third[i+1] = l[i]\n        end\n    end\n\
    \    return third\nend", "    \n    third = Vector{Int64}(length(l)-1)\n    third[1:end-1]\
    \ = l[1:end-1]\n    third[2:end] = l[2:end]\n    third\n    \nend", "    \n  \
    \  l = sort(l)\n    \n    third = l[div(length(l), 3)]\n    \n    third = third.+1\
    \ \n    \n    l[div(length(l), 3)] = third\n    \n    return l\nend", "    \n\
    \    third = Vector{Int64}(undef,0)\n    \n    for i in 1:length(l)\n        if\
    \ mod(l[i],3) == 0\n            push!(third,l[i])\n        end\n    end\n    \n\
    \    third = sort(third)\n    \n    for i in 1:length(l)\n        if mod(l[i],3)\
    \ == 0\n            l[i] = third[i]\n        end\n    end\n    \n    return l\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    l = sort(l)\n    \n    third\
    \ = l[div(length(l),3)+1]\n    \n    third = div(third,3)\n    \n    third = third.*ones(length(third))\n\
    \    \n    l = l[div(length(l),3)+1:end]\n    \n    l = l + third\n    \n    return\
    \ l\nend", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    third = Vector{Int64}(undef, length(l))\n\
    \    third[:] = l[:]\n    third[(l .% 3) == 0::Int64] = l[(l .% 3) == 0::Int64]\n\
    \    third[(l .% 3) == 1::Int64] = l[(l .% 3) == 1::Int64]\n    third[(l .% 3)\
    \ == 2::Int64] = l[(l .% 3) == 2::Int64]\n    third\nend", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    l = sort(l)\n    \n    third\
    \ = l[div(length(l)-1,3)+1]\n    \n    l = l[div(length(l)-1,3):end]\n    \n \
    \   l = l[1:div(length(l)-1,3)]\n    \n    l = l[div(length(l)-1,3):end]\n   \
    \ \n    l = l[1:div(length(l)-1,3)]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[1:div(length(l)-1,3)]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[1:div(length(l)-1,3)]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[1:div(length(l)-1,3)]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[1:div(length(l)-1,3)]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[1:div(length(l)-1,3)]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[1:div(length(l)-1,3)]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[1:div(length(l)-1,3)]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[1:div(length(l)-1,3)]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[1:div(length(l)-1,3)]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[1:div(length(l)-1,3)]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[1:div(length(l)-1,3)]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[1:div(length(l)-1,3)]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[1:div(length(l)-1,3)]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[1:div(length(l)-1,3)]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[1:div(length(l)-1,3)]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[1:div(length(l)-1,3)]\n    \n    l = ", "    l = sort(l)\n  \
    \  l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    third = Int64[]\n    \n \
    \   for i = 1:length(l)\n        if mod(l[i],3) == 0\n            push!(third,l[i])\n\
    \        end\n    end\n    \n    return third\nend", "    \n    l = sort(l)\n\
    \    \n    third = l[div(length(l),3)]\n    \n    third = third[1:end-1]\n   \
    \ \n    third = third[1:end-1]\n    \n    third = third[1:end-1]\n    \n    third\
    \ = third[1:end-1]\n    \n    third = third[1:end-1]\n    \n    third = third[1:end-1]\n\
    \    \n    third = third[1:end-1]\n    \n    third = third[1:end-1]\n    \n  \
    \  third = third[1:end-1]\n    \n    third = third[1:end-1]\n    \n    third =\
    \ third[1:end-1]\n    \n    third = third[1:end-1]\n    \n    third = third[1:end-1]\n\
    \    \n    third = third[1:end-1]\n    \n    third = third[1:end-1]\n    \n  \
    \  third = third[1:end-1]\n    \n    third = third[1:end-1]\n    \n    third =\
    \ third[1:end-1]\n    \n    third = third[1:end-1]\n    \n    third = third[1:end-1]\n\
    \    \n    third = third[1:end-1]\n    \n    third = third[1:end-1]\n    \n  \
    \  third = third[1:end-1]\n    \n    third = third[1:end-1]\n    \n    third =\
    \ third[1:end-1]\n    \n    third = third[1:end-1]\n    \n    third = third[1:end-1]\n\
    \    \n    third = third[1:end-1]\n    \n    third = third[1:end-1]\n    \n  \
    \  third = third[1:end-1]\n    \n    third = third[1:end-1]\n    \n    third =\
    \ third[1:end-1]\n    \n    third = third[1:end-1]\n    \n    third = third[1:end-1]\n\
    \    \n    third = third[1:end-1]\n    \n    third = third[1:end-1]\n    \n  \
    \  third = third[1:end-1]\n    \n    third = third[1:end-1]\n    \n    third =\
    \ third[1:end-1]\n    \n    third = third[1:end-1]\n    \n    third = third[1:end-1]\n\
    \    \n    third = third[1:end-1]\n    \n    third = third[1:end-1]\n    \n  \
    \  third = third[1:end-1]\n    \n    third = third", "    l = sort(l)\n    l =\
    \ l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\nend",
  "    \n    third = l[div(length(l),3)]\n    \n    third = third[div(length(third),2)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    ", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n", "    \n    l = sort(l)\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = div(third,3)\n    \n    third = third+length(l)\n    \n   \
    \ l = l[div(length(l)-1,3):third]\n    \n    l = sort(l)\n    \n    return l\n\
    end", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    third\
    \ = Vector{Int64}(length(l))\n    third[:] = l\n    \n    for i = 1:length(l)\n\
    \        if mod(l[i],3) == 0\n            third[i] = l[i]\n        end\n    end\n\
    \    \n    return third\nend", "    \n    l = sort(l)\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    l = l[div(length(l),3)+1:end]\n    \n    l = append(l,third)\n    \n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    third = Int64[]\n    \n   \
    \ for i in 1:length(l)\n        if mod(l[i],3) == 0\n            push!(third,l[i])\n\
    \        end\n    end\n    \n    third = unique(third)\n    \n    third = sort(third)\n\
    \    \n    third = third[third!=0]\n    \n    third = third[third!=length(third)]\n\
    \    \n    third = third[third!=length(third)-1]\n    \n    third = third[third!=length(third)-2]\n\
    \    \n    third = third[third!=length(third)-3]\n    \n    third = third[third!=length(third)-4]\n\
    \    \n    third = third[third!=length(third)-5]\n    \n    third = third[third!=length(third)-6]\n\
    \    \n    third = third[third!=length(third)-7]\n    \n    third = third[third!=length(third)-8]\n\
    \    \n    third = third[third!=length(third)-9]\n    \n    third = third[third!=length(third)-10]\n\
    \    \n    third = third[third!=length(third)-11]\n    \n    third = third[third!=length(third)-12]\n\
    \    \n    third = third[third!=length(third)-13]\n    \n    third = third[third!=length(third)-14]\n\
    \    \n    third = third[third!=length(third)-15]\n    \n    third = third[third!=length(third)-16]\n\
    \    \n    third = third[third!=length(third)-17]\n    \n    third = third[third!=length(third)-18]\n\
    \    \n    third = third[third!=length(third)-19]\n    \n    third = third[third!=length(third)-20]\n\
    \    \n    third = third[third!=length(third)-21]\n    \n    third = third[third!=length(third)-22]\n\
    \    \n    third = third[third!=length(third)-23]\n    \n    third = third[third!=length(third)-24]\n\
    \    \n    third = third[third!=length(third)-25]\n    \n    third = third[third!=length(third)-26]\n\
    \    \n    third = third[third!=length(third)", "    \n    third = Int64[]\n \
    \   \n    for x in l\n        if x % 3 == 0\n            push!(third, x)\n   \
    \     end\n    end\n    \n    third = third[sort(third)]\n    \n    return third\n\
    end", "    \n    third = Vector{Int64}(undef, length(l))\n    for i in 1:length(l)\
    \ \n        if i%3==0 \n            third[i] = l[i] \n        else \n        \
    \    third[i] = l[i]\n        end\n    end\n    third = sort(third)\n    return\
    \ third\nend\n</cell>\n<code language=julia-1.5>", "    \n    third = l[div(length(l),\
    \ 3)]\n    \n    third = third.(sortperm(l))\n    \n    third = third.(sortperm(l))\n\
    \    \n    third = third.(sortperm(l))\n    \n    third = third.(sortperm(l))\n\
    \    \n    third = third.(sortperm(l))\n    \n    third = third.(sortperm(l))\n\
    \    \n    third = third.(sortperm(l))\n    \n    third = third.(sortperm(l))\n\
    \    \n    third = third.(sortperm(l))\n    \n    third = third.(sortperm(l))\n\
    \    \n    third = third.(sortperm(l))\n    \n    third = third.(sortperm(l))\n\
    \    \n    third = third.(sortperm(l))\n    \n    third = third.(sortperm(l))\n\
    \    \n    third = third.(sortperm(l))\n    \n    third = third.(sortperm(l))\n\
    \    \n    third = third.(sortperm(l))\n    \n    third = third.(sortperm(l))\n\
    \    \n    third = third.(sortperm(l))\n    \n    third = third.(sortperm(l))\n\
    \    \n    third = third.(sortperm(l))\n    \n    third = third.(sortperm(l))\n\
    \    \n    third = third.(sortperm(l))\n    \n    third = third.(sortperm(l))\n\
    \    \n    third = third.(sortperm(l))\n    \n    third = third.(sortperm(l))\n\
    \    \n    third = third.(sortperm(l))\n    \n    third = third.(sortperm(l))\n\
    \    \n    third = third.(sortperm(l))\n    \n    third = third.(sortperm(l))\n\
    \    \n    third = third.(sortperm(l))\n    \n    third = third.(sortperm(l))\n\
    \    \n    third = third.(sortperm(l))\n    \n    third = third.(sortperm(l))\n\
    \    \n    third = third.(sortperm(l))\n    \n    third = third.(sortperm(l))\n\
    \    \n    third = third.(sortperm(l))\n    \n    third = third.(sortperm(l))\n\
    \    \n    thir", "    \n    third = l[div(length(l),3)]\n    \n    third = third[1:end-1]\n\
    \    \n    third = third[div(length(third),2)]\n    \n    third = third[1:end-1]\n\
    \    \n    third = third[div(length(third),2)]\n    \n    third = third[1:end-1]\n\
    \    \n    third = third[div(length(third),2)]\n    \n    third = third[1:end-1]\n\
    \    \n    third = third[div(length(third),2)]\n    \n    third = third[1:end-1]\n\
    \    \n    third = third[div(length(third),2)]\n    \n    third = third[1:end-1]\n\
    \    \n    third = third[div(length(third),2)]\n    \n    third = third[1:end-1]\n\
    \    \n    third = third[div(length(third),2)]\n    \n    third = third[1:end-1]\n\
    \    \n    third = third[div(length(third),2)]\n    \n    third = third[1:end-1]\n\
    \    \n    third = third[div(length(third),2)]\n    \n    third = third[1:end-1]\n\
    \    \n    third = third[div(length(third),2)]\n    \n    third = third[1:end-1]\n\
    \    \n    third = third[div(length(third),2)]\n    \n    third = third[1:end-1]\n\
    \    \n    third = third[div(length(third),2)]\n    \n    third = third[1:end-1]\n\
    \    \n    third = third[div(length(third),2)]\n    \n    third = third[1:end-1]\n\
    \    \n    third = third[div(length(third),2)]\n    \n    third = third[1:end-1]\n\
    \    \n    third = third[div(length(third),2)]\n    \n    third = third[1:end-1]\n\
    \    \n    third = third[div(length(third),2)]\n    \n    third = third[1:end-1]\n\
    \    \n    third = third[div(length(third),2)]\n    \n    third = third[1:end-1]\n\
    \    \n    third = third[div(length(third),2)]\n    \n    third = third[1:end-1]\n\
    \    \n    third = third[div(length(third),2)]\n    \n    thir", "    \n    third\
    \ = Vector{Int64}(undef, length(l))\n    third[1] = l[1]\n    third[2] = l[2]\n\
    \    third[3] = l[3]\n    third[4] = l[4]\n    third[5] = l[5]\n    third[6] =\
    \ l[6]\n    third[7] = l[7]\n    third[8] = l[8]\n    third[9] = l[9]\n    third[10]\
    \ = l[10]\n    third[11] = l[11]\n    third[12] = l[12]\n    third[13] = l[13]\n\
    \    third[14] = l[14]\n    third[15] = l[15]\n    third[16] = l[16]\n    third[17]\
    \ = l[17]\n    third[18] = l[18]\n    third[19] = l[19]\n    third[20] = l[20]\n\
    \    third[21] = l[21]\n    third[22] = l[22]\n    third[23] = l[23]\n    third[24]\
    \ = l[24]\n    third[25] = l[25]\n    third[26] = l[26]\n    third[27] = l[27]\n\
    \    third[28] = l[28]\n    third[29] = l[29]\n    third[30] = l[30]\n    third[31]\
    \ = l[31]\n    third[32] = l[32]\n    third[33] = l[33]\n    third[34] = l[34]\n\
    \    third[35] = l[35]\n    third[36] = l[36]\n    third[37] = l[37]\n    third[38]\
    \ = l[38]\n    third[39] = l[39]\n    third[40] = l[40]\n    third[41] = l[41]\n\
    \    third[42] = l[42]\n    third[43] = l[43]\n    third[44] = l[44]\n    third[45]\
    \ = l[45]\n    third[46] = l[46]\n    third[47] = l[47]\n    third[48] = l[48]\n\
    \    third[49] = l[49]\n    third[50] = l[50]\n    third[51] = l[51]\n    third[52]\
    \ = l[52]\n    third[", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    l = sort(l)\n    \n    third = l[div(length(l)-1,3)+1]\n    \n    l =\
    \ l[div(length(l)-1,3):end]\n    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n    \n    l =\
    \ sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n    \n    l = sort(l)\n  \
    \  \n    l = l[div(length(l)-1,3):end]\n    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n    \n    l =\
    \ sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n    \n    l = sort(l)\n  \
    \  \n    l = l[div(length(l)-1,3):end]\n    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n    \n    l =\
    \ sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n    \n    l = sort(l)\n  \
    \  \n    l = l[div(length(l)-1,3):end]\n    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n    \n    l =\
    \ sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n    \n    l = sort(l)\n  \
    \  \n    l = l[div(length(l)-1,3):end]\n    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n    \n    l =\
    \ sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n    \n    l = sort(l)\n  \
    \  \n    l = l[div(length(l)-1,3):end]\n    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n    \n    l =\
    \ sort(l)\n    \n    l = l[div", "    \n    third = l[div(length(l),3)]\n    \n\
    \    third = third[div(length(third),2)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    ", "    \n    third\
    \ = Int64[]\n    for i in l\n        if i%3 == 0\n            push!(third, i)\n\
    \        end\n    end\n    \n    third = sort(third)\n    \n    third = Int64[]\n\
    \    for i in l\n        if i%3 == 0\n            push!(third, i)\n        end\n\
    \    end\n    \n    third = sort(third)\n    \n    third = Int64[]\n    for i\
    \ in l\n        if i%3 == 0\n            push!(third, i)\n        end\n    end\n\
    \    \n    third = sort(third)\n    \n    third = Int64[]\n    for i in l\n  \
    \      if i%3 == 0\n            push!(third, i)\n        end\n    end\n    \n\
    \    third = sort(third)\n    \n    third = Int64[]\n    for i in l\n        if\
    \ i%3 == 0\n            push!(third, i)\n        end\n    end\n    \n    third\
    \ = sort(third)\n    \n    third = Int64[]\n    for i in l\n        if i%3 ==\
    \ 0\n            push!(third, i)\n        end\n    end\n    \n    third = sort(third)\n\
    \    \n    third = Int64[]\n    for i in l\n        if i%3 == 0\n            push!(third,\
    \ i)\n        end\n    end\n    \n    third = sort(third)\n    \n    third = Int64[]\n\
    \    for i in l\n        if i%3 == 0\n            push!(third, i)\n        end\n\
    \    end\n    \n    third = sort(third)\n    \n    third = Int64[]\n    for i\
    \ in l\n        if i%3 == 0\n            push!(third, i)\n        end\n    end\n\
    \    \n    third = sort(third)\n    \n    third = Int64[]\n    for i in l\n  \
    \      if i%3 == 0\n            push!(third, i)\n        end\n    end\n    \n\
    \    third = sort(third)\n    \n    third = Int64[]\n    for i in l\n        if\
    \ i%3 == 0\n            push!(third, i)\n        end\n    end\n    \n    third\
    \ = sort(third)\n    \n    third = Int64[]\n    for i in l\n        if i%3 ==\
    \ 0\n            push!(third, i)\n        end\n    end\n    \n    third = sort(third)\n\
    \    \n    third = Int64[]\n    for i in l\n        if i%3 == 0\n            push!(third,\
    \ i)\n        end\n    end\n    \n    third = sort(third)\n    \n    third = Int64[]\n\
    \    for i in l\n        if i%3 == 0\n            push!(third, i)\n        end\n\
    \    end\n    \n    ", "    \n    third = l[div(length(l),3)+1]\n    \n    l =\
    \ l[div(length(l),3)+1:end]\n    \n    l = l[div(length(l),3)+1:end]\n    \n \
    \   l = l[div(length(l),3)+1:end]\n    \n    l = l[div(length(l),3)+1:end]\n \
    \   \n    l = l[div(length(l),3)+1:end]\n    \n    l = l[div(length(l),3)+1:end]\n\
    \    \n    l = l[div(length(l),3)+1:end]\n    \n    l = l[div(length(l),3)+1:end]\n\
    \    \n    l = l[div(length(l),3)+1:end]\n    \n    l = l[div(length(l),3)+1:end]\n\
    \    \n    l = l[div(length(l),3)+1:end]\n    \n    l = l[div(length(l),3)+1:end]\n\
    \    \n    l = l[div(length(l),3)+1:end]\n    \n    l = l[div(length(l),3)+1:end]\n\
    \    \n    l = l[div(length(l),3)+1:end]\n    \n    l = l[div(length(l),3)+1:end]\n\
    \    \n    l = l[div(length(l),3)+1:end]\n    \n    l = l[div(length(l),3)+1:end]\n\
    \    \n    l = l[div(length(l),3)+1:end]\n    \n    l = l[div(length(l),3)+1:end]\n\
    \    \n    l = l[div(length(l),3)+1:end]\n    \n    l = l[div(length(l),3)+1:end]\n\
    \    \n    l = l[div(length(l),3)+1:end]\n    \n    l = l[div(length(l),3)+1:end]\n\
    \    \n    l = l[div(length(l),3)+1:end]\n    \n    l = l[div(length(l),3)+1:end]\n\
    \    \n    l = l[div(length(l),3)+1:end]\n    \n    l = l[div(length(l),3)+1:end]\n\
    \    \n    l = l[div(length(l),3)+1:end]\n    \n    l = l[div(length(l),3)+1:end]\n\
    \    \n    l = l[div(length(l),3)+1:end]\n    ", "    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    third = l[div(length(l),3)+1]\n \
    \   \n    l = l[div(length(l),3)+1:end]\n    \n    l = sort(l)\n    \n    l =\
    \ l[div(length(l),3):end]\n    \n    l = sort(l)\n    \n    l = l[div(length(l),3):end]\n\
    \    \n    l = sort(l)\n    \n    l = l[div(length(l),3):end]\n    \n    l = sort(l)\n\
    \    \n    l = l[div(length(l),3):end]\n    \n    l = sort(l)\n    \n    l = l[div(length(l),3):end]\n\
    \    \n    l = sort(l)\n    \n    l = l[div(length(l),3):end]\n    \n    l = sort(l)\n\
    \    \n    l = l[div(length(l),3):end]\n    \n    l = sort(l)\n    \n    l = l[div(length(l),3):end]\n\
    \    \n    l = sort(l)\n    \n    l = l[div(length(l),3):end]\n    \n    l = sort(l)\n\
    \    \n    l = l[div(length(l),3):end]\n    \n    l = sort(l)\n    \n    l = l[div(length(l),3):end]\n\
    \    \n    l = sort(l)\n    \n    l = l[div(length(l),3):end]\n    \n    l = sort(l)\n\
    \    \n    l = l[div(length(l),3):end]\n    \n    l = sort(l)\n    \n    l = l[div(length(l),3):end]\n\
    \    \n    l = sort(l)\n    \n    l = l[div(length(l),3):end]\n    \n    l = sort(l)\n\
    \    \n    l = l[div(length(l),3):end]\n    \n    l = sort(l)\n    \n    l = l[div(length(l),3):end]\n\
    \    \n    l = sort(l)\n    \n    l = l[div(length(l),3):end]\n    \n    l = sort(l)\n\
    \    \n    l = l[div(length(l),3):end]\n    \n    l = sort(l)\n    \n    l = l[div(length(l),3):end]\n\
    \    \n    l = sort(l)\n    \n    l = l[div(length(l),3):end]\n    \n    l = sort(l)\n\
    \    \n    l = l[div(length(l),3):end]\n    \n    l = sort(l)\n    \n    l = l[div(length(l),3):",
  "    \n    l = sort(l)\n    \n    third = l[div(length(l),3)+1]\n    \n    l = l[div(length(l),3)+1:end]\n\
    \    \n    l = l[div(length(l),3):end]\n    \n    l = l[1:div(length(l),3)+1]\n\
    \    \n    l = l[1:div(length(l),3)]\n    \n    l = l[div(length(l),3):end]\n\
    \    \n    l = l[1:div(length(l),3)+1]\n    \n    l = l[1:div(length(l),3)]\n\
    \    \n    l = l[div(length(l),3):end]\n    \n    l = l[1:div(length(l),3)+1]\n\
    \    \n    l = l[1:div(length(l),3)]\n    \n    l = l[div(length(l),3):end]\n\
    \    \n    l = l[1:div(length(l),3)+1]\n    \n    l = l[1:div(length(l),3)]\n\
    \    \n    l = l[div(length(l),3):end]\n    \n    l = l[1:div(length(l),3)+1]\n\
    \    \n    l = l[1:div(length(l),3)]\n    \n    l = l[div(length(l),3):end]\n\
    \    \n    l = l[1:div(length(l),3)+1]\n    \n    l = l[1:div(length(l),3)]\n\
    \    \n    l = l[div(length(l),3):end]\n    \n    l = l[1:div(length(l),3)+1]\n\
    \    \n    l = l[1:div(length(l),3)]\n    \n    l = l[div(length(l),3):end]\n\
    \    \n    l = l[1:div(length(l),3)+1]\n    \n    l = l[1:div(length(l),3)]\n\
    \    \n    l = l[div(length(l),3):end]\n    \n    l = l[1:div(length(l),3)+1]\n\
    \    \n    l = l[1:div(length(l),3)]\n    \n    l = l[div(length(l),3):end]\n\
    \    \n    l = l[1:div(length(l),3)+1]\n    \n    l = l[1:div(length(l),3)]\n\
    \    \n    l = l[div(length(l),3):end]\n    \n    l = l[1:div(length(l),3)+1]\n\
    \    \n    l = l[1:div(length(l),3)]\n    \n    l = l[div(length(l),3):end]\n\
    \    \n    l = l[1:div(length", "    \n    l = sort(l)\n    \n    third = l[div(length(l),3)-1]\n\
    \    \n    l = l[div(length(l),3):end]\n    \n    l = l[div(length(l),3):end]\n\
    \    \n    l = l[div(length(l),3):end]\n    \n    l = l[div(length(l),3):end]\n\
    \    \n    l = l[div(length(l),3):end]\n    \n    l = l[div(length(l),3):end]\n\
    \    \n    l = l[div(length(l),3):end]\n    \n    l = l[div(length(l),3):end]\n\
    \    \n    l = l[div(length(l),3):end]\n    \n    l = l[div(length(l),3):end]\n\
    \    \n    l = l[div(length(l),3):end]\n    \n    l = l[div(length(l),3):end]\n\
    \    \n    l = l[div(length(l),3):end]\n    \n    l = l[div(length(l),3):end]\n\
    \    \n    l = l[div(length(l),3):end]\n    \n    l = l[div(length(l),3):end]\n\
    \    \n    l = l[div(length(l),3):end]\n    \n    l = l[div(length(l),3):end]\n\
    \    \n    l = l[div(length(l),3):end]\n    \n    l = l[div(length(l),3):end]\n\
    \    \n    l = l[div(length(l),3):end]\n    \n    l = l[div(length(l),3):end]\n\
    \    \n    l = l[div(length(l),3):end]\n    \n    l = l[div(length(l),3):end]\n\
    \    \n    l = l[div(length(l),3):end]\n    \n    l = l[div(length(l),3):end]\n\
    \    \n    l = l[div(length(l),3):end]\n    \n    l = l[div(length(l),3):end]\n\
    \    \n    l = l[div(length(l),3):end]\n    \n    l = l[div(length(l),3):end]\n\
    \    \n    l = l[div(length(l),3):end]\n    \n    l = l[div(length(l),3):end]\n\
    \    \n    l = l[div(length(l),3):end]\n    \n    l = l[div(length(l),3):end]\n\
    \    \n    l = l[div(length(l),3):end]\n", "    \n    third = l[div(length(l),3)]\n\
    \    \n    third = third.(sortperm(third))\n    \n    third = third.(sortperm(third))\n\
    \    \n    third = third.(sortperm(third))\n    \n    third = third.(sortperm(third))\n\
    \    \n    third = third.(sortperm(third))\n    \n    third = third.(sortperm(third))\n\
    \    \n    third = third.(sortperm(third))\n    \n    third = third.(sortperm(third))\n\
    \    \n    third = third.(sortperm(third))\n    \n    third = third.(sortperm(third))\n\
    \    \n    third = third.(sortperm(third))\n    \n    third = third.(sortperm(third))\n\
    \    \n    third = third.(sortperm(third))\n    \n    third = third.(sortperm(third))\n\
    \    \n    third = third.(sortperm(third))\n    \n    third = third.(sortperm(third))\n\
    \    \n    third = third.(sortperm(third))\n    \n    third = third.(sortperm(third))\n\
    \    \n    third = third.(sortperm(third))\n    \n    third = third.(sortperm(third))\n\
    \    \n    third = third.(sortperm(third))\n    \n    third = third.(sortperm(third))\n\
    \    \n    third = third.(sortperm(third))\n    \n    third = third.(sortperm(third))\n\
    \    \n    third = third.(sortperm(third))\n    \n    third = third.(sortperm(third))\n\
    \    \n    third = third.(sortperm(third))\n    \n    third = third.(sortperm(third))\n\
    \    \n    third = third.(sortperm(third))\n    \n    third = third.(sortperm(third))\n\
    \    \n    third = third.(sortperm(third))\n    \n    third = third.(sortperm(third))\n\
    \    \n    third = third.(sortperm(third))\n    \n    third = third.(sortperm(third))\n\
    \    \n    third = third.(sortperm(third))\n    \n    third = third.(", "    \n\
    \    third = Vector{Int64}(length(l))\n    \n    for i in 1:length(l)\n      \
    \  if l[i] % 3 == 0\n            third[i] = l[i]\n        else\n            third[i]\
    \ = l[i]\n        end\n    end\n    \n    return third\nend", "    \n    third\
    \ = l[div(length(l),3)]\n    \n    third = third.(sortperm(l))\n    \n    third\
    \ = third.(sortperm(l))\n    \n    third = third.(sortperm(l))\n    \n    third\
    \ = third.(sortperm(l))\n    \n    third = third.(sortperm(l))\n    \n    third\
    \ = third.(sortperm(l))\n    \n    third = third.(sortperm(l))\n    \n    third\
    \ = third.(sortperm(l))\n    \n    third = third.(sortperm(l))\n    \n    third\
    \ = third.(sortperm(l))\n    \n    third = third.(sortperm(l))\n    \n    third\
    \ = third.(sortperm(l))\n    \n    third = third.(sortperm(l))\n    \n    third\
    \ = third.(sortperm(l))\n    \n    third = third.(sortperm(l))\n    \n    third\
    \ = third.(sortperm(l))\n    \n    third = third.(sortperm(l))\n    \n    third\
    \ = third.(sortperm(l))\n    \n    third = third.(sortperm(l))\n    \n    third\
    \ = third.(sortperm(l))\n    \n    third = third.(sortperm(l))\n    \n    third\
    \ = third.(sortperm(l))\n    \n    third = third.(sortperm(l))\n    \n    third\
    \ = third.(sortperm(l))\n    \n    third = third.(sortperm(l))\n    \n    third\
    \ = third.(sortperm(l))\n    \n    third = third.(sortperm(l))\n    \n    third\
    \ = third.(sortperm(l))\n    \n    third = third.(sortperm(l))\n    \n    third\
    \ = third.(sortperm(l))\n    \n    third = third.(sortperm(l))\n    \n    third\
    \ = third.(sortperm(l))\n    \n    third = third.(sortperm(l))\n    \n    third\
    \ = third.(sortperm(l))\n    \n    third = third.(sortperm(l))\n    \n    third\
    \ = third.(sortperm(l))\n    \n    third = third.(sortperm(l))\n    \n    third\
    \ = third.(sortperm(l))\n    \n    thir", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    third = Vector{Int64}(undef,0)\n    \n    for\
    \ i in 1:length(l)\n        if l[i] % 3 == 0\n            push!(third,l[i])\n\
    \        end\n    end\n    \n    third = third[sortperm(third)]\n    \n    return\
    \ third\nend", "    \n    l = sort(l)\n    \n    third = Vector{Int64}(undef,\
    \ 0)\n    \n    for i in 1:length(l)\n        if i%3 == 0\n            push!(third,\
    \ l[i])\n        end\n    end\n    \n    return third\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    l = sort(l)\n    \n    third = l[div(length(l),3)]\n    \n    third =\
    \ sort(third)\n    \n    third = third[div(length(third),3)]\n    \n    third\
    \ = third[div(length(third),3)]\n    \n    third = sort(third)\n    \n    third\
    \ = third[div(length(third),3)]\n    \n    third = third[div(length(third),3)]\n\
    \    \n    third = sort(third)\n    \n    third = third[div(length(third),3)]\n\
    \    \n    third = third[div(length(third),3)]\n    \n    third = sort(third)\n\
    \    \n    third = third[div(length(third),3)]\n    \n    third = third[div(length(third),3)]\n\
    \    \n    third = sort(third)\n    \n    third = third[div(length(third),3)]\n\
    \    \n    third = third[div(length(third),3)]\n    \n    third = sort(third)\n\
    \    \n    third = third[div(length(third),3)]\n    \n    third = third[div(length(third),3)]\n\
    \    \n    third = sort(third)\n    \n    third = third[div(length(third),3)]\n\
    \    \n    third = third[div(length(third),3)]\n    \n    third = sort(third)\n\
    \    \n    third = third[div(length(third),3)]\n    \n    third = third[div(length(third),3)]\n\
    \    \n    third = sort(third)\n    \n    third = third[div(length(third),3)]\n\
    \    \n    third = third[div(length(third),3)]\n    \n    third = sort(third)\n\
    \    \n    third = third[div(length(third),3)]\n    \n    third = third[div(length(third),3)]\n\
    \    \n    third = sort(third)\n    \n    third = third[div(length(third),3)]\n\
    \    \n    third = third[div(length(third),3)]\n    \n    third = sort(third)\n\
    \    \n    third = third[div(length(third),3)]\n    \n    third = third[div(length(third),3)]\n\
    \    \n    third = sort(third)\n    \n    third = third[div(length(third),3)]",
  "    \n    third = Int64[]\n    \n    for i in 1:length(l)\n        if i%3 == 0\n\
    \            push!(third, i)\n        end\n    end\n    \n    third = third[sort(third)]\n\
    \    \n    third = Int64[]\n    \n    for i in 1:length(l)\n        if i%3 ==\
    \ 0\n            push!(third, i)\n        end\n    end\n    \n    third = third[sort(third)]\n\
    \    \n    third = Int64[]\n    \n    for i in 1:length(l)\n        if i%3 ==\
    \ 0\n            push!(third, i)\n        end\n    end\n    \n    third = third[sort(third)]\n\
    \    \n    third = Int64[]\n    \n    for i in 1:length(l)\n        if i%3 ==\
    \ 0\n            push!(third, i)\n        end\n    end\n    \n    third = third[sort(third)]\n\
    \    \n    third = Int64[]\n    \n    for i in 1:length(l)\n        if i%3 ==\
    \ 0\n            push!(third, i)\n        end\n    end\n    \n    third = third[sort(third)]\n\
    \    \n    third = Int64[]\n    \n    for i in 1:length(l)\n        if i%3 ==\
    \ 0\n            push!(third, i)\n        end\n    end\n    \n    third = third[sort(third)]\n\
    \    \n    third = Int64[]\n    \n    for i in 1:length(l)\n        if i%3 ==\
    \ 0\n            push!(third, i)\n        end\n    end\n    \n    third = third[sort(third)]\n\
    \    \n    third = Int64[]\n    \n    for i in 1:length(l)\n        if i%3 ==\
    \ 0\n            push!(third, i)\n        end\n    end\n    \n    third = third[sort(third)]\n\
    \    \n    third = Int64[]\n    \n    for i in 1:length(l)\n        if i%3 ==\
    \ 0\n            push!(third, i)\n        end\n    end\n    \n    third = third[sort(third)]\n\
    \    \n    third = Int64[]\n    \n    for i in 1:length(l)\n        if i%3 ==\
    \ 0\n            push!(third, i)\n        end\n    end\n    \n    third = third[sort(third)]\n\
    \    \n    third = Int64[]\n    \n    for i in 1:length(l)\n        if i%3 ==\
    \ 0\n            push!(third, i)\n        end\n    end\n    \n    third = third[sort(third)]\n\
    \    \n    third = Int64[]\n    \n    for i in 1:length(l)\n        if i%3 ==\
    \ 0\n            push!(third, i)\n", "    \n    third = Int64[]\n    \n    for\
    \ i in l\n        if i%3 == 0\n            push!(third, i)\n        end\n    end\n\
    \    \n    third = unique(third)\n    \n    for i in l\n        if i not in third\n\
    \            push!(l, i)\n        end\n    end\n    \n    return l\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    third = Vector{Int64}(undef,0)\n    \n    for i in 1:length(l)\n\
    \        if i%3 == 0\n            push!(third,i)\n        end\n    end\n    \n\
    \    third = third[sortperm(third)]\n    \n    third = third[sortperm(third)]\n\
    \    \n    return third\nend\n</cell>\n<code language=julia-1.5>", "    \n   \
    \ third = l[div(length(l),3)]\n    \n    third = third[div(length(third),2)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    third = third[div(length(third),1)]\n    \n    third = third[div(length(third),1)]\n\
    \    \n    ", "    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n    third = l[div(length(l),3)+1]\n    \n    third = l[div(length(l),3)+1]\n\
    \    \n", "    \n    third = l[div(length(l), 3)]\n    \n    third = third[div(length(third),\
    \ 2)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    ", "    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
