name: HumanEval_9_rolling_max
language: jl
prompt: "\"\"\" From a given list of integers, generate a list of rolling maximum\
  \ element found until given moment\n    in the sequence.\n        \"\"\"\nfunction\
  \ rolling_max(numbers::Vector{Int64})::Vector{Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
  \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4,\
  \ 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3,\
  \ 100, 100])\nend\n"
completions: ["    \n    rolling_max_result = Vector{Int64}(undef, 0)\n    \n    for\
    \ number in numbers\n        rolling_max_result = append(rolling_max_result, maximum(rolling_max_result,\
    \ number))\n    end\n    \n    return rolling_max_result\nend\n</cell>\n<code\
    \ language=julia-1.5>\nrolling_max(numbers)\n</cell>\n<text>\nExercise 3: Rolling\
    \ minimum", "    \n    rolling_max_vector = Vector{Int64}(undef, 0)\n    \n  \
    \  for n in numbers\n        rolling_max_vector = push!(rolling_max_vector, maximum(n))\n\
    \    end\n    \n    return rolling_max_vector\nend", "    \n    maximum = numbers[1]\n\
    \    \n    for n in numbers[2:end]\n        if n > maximum\n            maximum\
    \ = n\n        end\n    end\n    \n    return maximum\nend", "    rolling_max_list\
    \ = Vector{Int64}()\n    rolling_max_list = rolling_max_list + rolling_max(numbers[1:end-1])\
    \ \n    rolling_max_list = rolling_max_list + rolling_max(numbers[2:end])\n  \
    \  rolling_max_list = rolling_max_list + rolling_max(numbers[3:end])\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[4:end])\n    rolling_max_list = rolling_max_list\
    \ + rolling_max(numbers[5:end])\n    rolling_max_list = rolling_max_list + rolling_max(numbers[6:end])\n\
    \    rolling_max_list = rolling_max_list + rolling_max(numbers[7:end])\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[8:end])\n    rolling_max_list = rolling_max_list\
    \ + rolling_max(numbers[9:end])\n    rolling_max_list = rolling_max_list + rolling_max(numbers[10:end])\n\
    \    rolling_max_list = rolling_max_list + rolling_max(numbers[11:end])\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[12:end])\n    rolling_max_list = rolling_max_list\
    \ + rolling_max(numbers[13:end])\n    rolling_max_list = rolling_max_list + rolling_max(numbers[14:end])\n\
    \    rolling_max_list = rolling_max_list + rolling_max(numbers[15:end])\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[16:end])\n    rolling_max_list = rolling_max_list\
    \ + rolling_max(numbers[17:end])\n    rolling_max_list = rolling_max_list + rolling_max(numbers[18:end])\n\
    \    rolling_max_list = rolling_max_list + rolling_max(numbers[19:end])\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[20:end])\n    rolling_max_list = rolling_max_list\
    \ + rolling_max(numbers[21:end])\n    rolling_max_list = rolling_max_list + rolling_max(numbers[22:end])\n\
    \    rolling_max_list = rolling_max_list + rolling_max(numbers[23:end])\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[24:end])\n    rolling_max_list = rolling_max_list\
    \ + rolling_max(numbers[25:end])\n    rolling_max_list = rolling_max_list + rolling_max(numbers[26:end])\n\
    \    rolling_", "    \n    maximums = Vector{Int64}(undef, 0)\n    \n    for n\
    \ in numbers\n        maximums = maximum(maximums, n)\n    end\n    \n    return\
    \ maximums\nend\n</cell>\n<code language=julia-1.4>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.4>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.4>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.4>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.4>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.4>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.4>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.4>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.4>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.4>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.4>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.4>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.4>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.4>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.4>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.4>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.4>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.4>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.4>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.4>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.4>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.4>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.4>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.4>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.4>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.4>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.4>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.4>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.4>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.4>\n",
  "    \n    maximums = Vector{Int64}()\n    \n    for n in numbers\n        maximums.append(maximum(n))\n\
    \    end\n    \n    return maximums\nend", "    \n    rolling_max_result = Vector{Int64}(undef,\
    \ 0)\n    \n    for number in numbers\n        rolling_max_result = rolling_max_result\
    \ .+ number\n    end\n    \n    return rolling_max_result\nend", "    \n    rolling_max\
    \ = zeros(length(numbers))\n    \n    for i = 1:length(numbers)\n        rolling_max[i]\
    \ = maximum(numbers[i:i+length(numbers)])\n    end\n    \n    return rolling_max\n\
    end", "    \n    maximum = numbers[1]\n    \n    for n in numbers[2:end]\n   \
    \     if n > maximum\n            maximum = n\n        end\n    end\n    \n  \
    \  return maximum\nend\n</cell>\n<code language=julia-1.5>\nrolling_max([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nrolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nrolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    </cell>\n<code language=julia-1.5>\nrolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    </cell>\n<code language=julia-1.5>\nrolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58",
  "    \n    maximums = Vector{Int64}()\n    \n    for number in numbers\n       \
    \ maximums.push(maximum(numbers))\n    end\n    \n    return maximums\nend\n</cell>\n\
    <code language=julia-1.5>\n@time rolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>", "    rolling_max_list = Vector{Int64}(undef, 0)\n\
    \    for number in numbers\n        rolling_max_list = push!(rolling_max_list,\
    \ maximum(rolling_max_list, number))\n    end\n    return rolling_max_list\nend\n\
    </cell>\n<code language=julia-1.5>\nrolling_max(numbers)\n</cell>\n<text>\nExercise\
    \ 3.3\nWrite a function that generates the cumulative sum of a given vector of\
    \ integers. \nThe cumulative sum should start from 0.\nThe function should return\
    \ a new vector of integers containing the cumulative sum of the given vector.\n\
    The function should work for vectors of any length.\nThe function should work\
    \ for vectors of any type of elements.\nThe function should work for vectors of\
    \ any type of elements and vectors of different length.\nThe function should work\
    \ for vectors of any type of elements and vectors of different length.\nThe function\
    \ should work for vectors of any type of elements and vectors of different length.\n\
    The function should work for vectors of any type of elements and vectors of different\
    \ length.\nThe function should work for vectors of any type of elements and vectors\
    \ of different length.\nThe function should work for vectors of any type of elements\
    \ and vectors of different length.\nThe function should work for vectors of any\
    \ type of elements and vectors of different length.\nThe function should work\
    \ for vectors of any type of elements and vectors of different length.\nThe function\
    \ should work for vectors of any type of elements and vectors of different length.\n\
    The function should work for vectors of any type of elements and vectors of different\
    \ length.\nThe function should work for vectors of any type of elements and vectors\
    \ of different length.\nThe function should work for vectors of any type of elements\
    \ and vectors of different length.\nThe function should work for vectors of any\
    \ type of elements and vectors of different length.\nThe function should work\
    \ for vectors of any type of elements and vectors of different length.\nThe function\
    \ should work for vectors of any type of elements and vectors of different length.\n\
    The function should work for vectors of any type of elements and vectors of different\
    \ length.\nThe function should work for vectors of any type of elements and vectors\
    \ of different length.\nThe function should work for vectors of any type of elements\
    \ and vectors of different length.\nThe function should work for vectors of any\
    \ type of elements and vectors of different length.\nThe function should work\
    \ for vectors of any type of elements and vectors of different length.\nThe function\
    \ should work for vectors of any type of elements and vectors of different length.\n\
    The function should work for vectors of any type of elements and vectors of different\
    \ length.\nThe function should work for vectors of any type of elements and vectors\
    \ of different length.\nThe function should work for vectors of any type of elements\
    \ and vectors of different length.\nThe function should work for vectors of any\
    \ type of elements and vectors of different length.\nThe function should work\
    \ for ", "    rolling_max_list = Vector{Int64}(undef, 0)\n    rolling_max_list[1]\
    \ = numbers[1]\n    for i = 2:length(numbers)\n        rolling_max_list[i] = max(numbers[i-1],\
    \ numbers[i])\n    end\n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max(numbers)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ generates a vector with all the prime numbers up to a given number. \nThe function\
    \ should take as input a number $n$ and return $n$ if $n$ is a prime number, otherwise\
    \ it should return an empty vector.", "    \n    rolling_max_array = zeros(length(numbers))\n\
    \    \n    for i = 1:length(numbers)\n        rolling_max_array[i] = maximum(numbers[i:i+1])\n\
    \    end\n    \n    return rolling_max_array\nend", "    rolling_max_list = Vector{Int64}(undef,\
    \ 0)\n    rolling_max_list = rolling_max_list + numbers\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[1:end-1]) \n    rolling_max_list =\
    \ rolling_max_list + rolling_max(numbers[2:end])\n    rolling_max_list = rolling_max_list\
    \ + rolling_max(numbers[3:end])\n    rolling_max_list = rolling_max_list + rolling_max(numbers[4:end])\n\
    \    rolling_max_list = rolling_max_list + rolling_max(numbers[5:end])\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[6:end])\n    rolling_max_list = rolling_max_list\
    \ + rolling_max(numbers[7:end])\n    rolling_max_list = rolling_max_list + rolling_max(numbers[8:end])\n\
    \    rolling_max_list = rolling_max_list + rolling_max(numbers[9:end])\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[10:end])\n    rolling_max_list = rolling_max_list\
    \ + rolling_max(numbers[11:end])\n    rolling_max_list = rolling_max_list + rolling_max(numbers[12:end])\n\
    \    rolling_max_list = rolling_max_list + rolling_max(numbers[13:end])\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[14:end])\n    rolling_max_list = rolling_max_list\
    \ + rolling_max(numbers[15:end])\n    rolling_max_list = rolling_max_list + rolling_max(numbers[16:end])\n\
    \    rolling_max_list = rolling_max_list + rolling_max(numbers[17:end])\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[18:end])\n    rolling_max_list = rolling_max_list\
    \ + rolling_max(numbers[19:end])\n    rolling_max_list = rolling_max_list + rolling_max(numbers[20:end])\n\
    \    rolling_max_list = rolling_max_list + rolling_max(numbers[21:end])\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[22:end])\n    rolling_max_list = rolling_max_list\
    \ + rolling_max(numbers[23:end])\n    rolling_max_list = rolling_max_list + rolling_max(numbers[24:end])\n\
    \    rolling_max_list = rolling_max_list + rolling_max(numbers[25:end])\n    rolling_max_list\
    \ = rolling_max_list ", "    \n    rolling_max = zeros(length(numbers))\n    \n\
    \    for i = 1:length(numbers)\n        rolling_max[i] = maximum(numbers[i:i+1])\n\
    \    end\n    \n    return rolling_max\nend", "    \n    maximum = numbers[1]\n\
    \    \n    for n in numbers[2:end]\n        if n > maximum\n            maximum\
    \ = n\n        end\n    end\n    \n    return maximum\nend", "    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    rolling_max_list = Vector{Int64}(undef,\
    \ 0)\n    rolling_max_list[1] = numbers[1]\n    for i = 2:length(numbers)\n  \
    \      rolling_max_list[i] = max(rolling_max_list[i-1], numbers[i])\n    end\n\
    \    return rolling_max_list\nend", "    \n    rolling_max_array = zeros(length(numbers))\n\
    \    \n    for i = 1:length(numbers)\n        rolling_max_array[i] = maximum(numbers[i:i+length(numbers)-1])\n\
    \    end\n    \n    return rolling_max_array\nend", "    \n    rolling_max_list\
    \ = Vector{Int64}()\n    \n    for i = 1:length(numbers)\n        rolling_max_list\
    \ = push!(rolling_max_list, maximum(numbers[i:i+1]))\n    end\n    \n    return\
    \ rolling_max_list\nend", "    \n    maximum = numbers[1]\n    for number in numbers[2:end]\n\
    \        if number > maximum\n            maximum = number\n        end\n    end\n\
    \    \n    return maximum\nend", "    \n    rolling_max_array = []\n    \n   \
    \ for n in numbers\n        rolling_max_array.append(rolling_max(n))\n    end\n\
    \    \n    return rolling_max_array\nend", "    \n    maximum = numbers[1]\n \
    \   \n    for n in numbers[2:end]\n        if n > maximum\n            maximum\
    \ = n\n        end\n    end\n    \n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    rolling_max_array = zeros(length(numbers)+1)\n    rolling_max_array[1]\
    \ = numbers[1]\n    \n    for i = 2:length(numbers)\n        rolling_max_array[i]\
    \ = maximum(rolling_max_array[i-1:i+1])\n    end\n    \n    return rolling_max_array\n\
    end\n</cell>\n<code language=julia-1.5>\nrolling_max(numbers)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that generates a vector with rolling mean of given\
    \ vector until given moment in the sequence.", "    \n    rolling_max = Vector{Int64}(undef,\
    \ 0)\n    \n    for n in numbers\n        rolling_max = rolling_max .+ [rolling_max[n]]\n\
    \    end\n    \n    return rolling_max\nend", "    \n    rolling_max_list = Vector{Int64}(undef,\
    \ 0)\n    \n    for number in numbers\n        rolling_max_list = push!(rolling_max_list,\
    \ maximum(rolling_max_list, number))\n    end\n    \n    return rolling_max_list\n\
    end", "    \n    rolling_max_array = zeros(length(numbers)) \n    \n    for i\
    \ = 1:length(numbers)\n        rolling_max_array[i] = maximum(rolling_max_array[i-1],\
    \ numbers[i])\n    end\n    \n    return rolling_max_array\nend", "    \n    rolling_max\
    \ = zeros(length(numbers))\n    \n    for i = 1:length(numbers)\n        rolling_max[i]\
    \ = maximum(numbers[i:i+length(numbers)])\n    end\n    \n    return rolling_max\n\
    end", "    \n    rolling_max_elements = []\n    \n    for n in numbers\n     \
    \   rolling_max_elements.append(rolling_max(n))\n    end\n    \n    return rolling_max_elements\n\
    end", "    \n    rolling_max_list = Vector{Int64}(undef, 0)\n    \n    for n in\
    \ numbers\n        rolling_max_list = push!(rolling_max_list, maximum(rolling_max_list,\
    \ n))\n    end\n    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.3>\n\
    rolling_max(numbers)\n</cell>\n<text>\nExercise 3\nWrite a function that generates\
    \ the rolling minimum element found until a given moment in the sequence.", " \
    \   \n    maximums = Vector{Int64}()\n    maximums.push(numbers[1])\n    for n\
    \ in numbers[2:end]\n        if maximums[end-1] < n\n            maximums.push(n)\n\
    \        end\n    end\n    return maximums\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test the function\n@time maximums = rolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    @time maximums = rolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    @time maximums = rolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    @time maximums = rolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    @time maximums = rolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    @time maximums = rolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    @time maximums = rolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    @time maximums = rolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    @time maximums = rolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    @time maximums = rolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    @time maximums = rolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    @time maximums = rolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    @time maximums = rolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    @time maximums = rolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    @time maximums = rolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    @time maximums = rolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    @time maximums = rolling_max([1,2,3,4,5,6,7,8,9,10,11,12,", "    \n    rolling_max_elements\
    \ = []\n    \n    for i = 1:length(numbers)\n        rolling_max_elements.push(numbers[i])\n\
    \    end\n    \n    for i = 1:length(numbers)\n        rolling_max_elements.push(max(rolling_max_elements[i-1],\
    \ numbers[i]))\n    end\n    \n    return rolling_max_elements\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    maximums = Vector{Int64}()\n    \n    for\
    \ n in numbers\n        maximums[n] = maximums[n] ? maximums[n] : n\n    end\n\
    \    \n    return maximums\nend", "    \n    maximum = numbers[1]\n    for number\
    \ in numbers[2:end]\n        if number > maximum\n            maximum = number\n\
    \        end\n    end\n    \n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nroll", "    \n    rolling_max = zeros(length(numbers))\n\
    \    \n    for i = 1:length(numbers)\n        rolling_max[i] = maximum(numbers[i:i+1])\n\
    \    end\n    \n    return rolling_max\nend", "    \n    rolling_max = zeros(length(numbers))\n\
    \    \n    for i = 1:length(numbers)\n        rolling_max[i] = maximum(numbers[i:i+length(numbers)])\n\
    \    end\n    \n    return rolling_max\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    rolling_max = zeros(length(numbers))\n    \n    for i = 1:length(numbers)\n\
    \        rolling_max[i] = maximum(numbers[i:i+length(numbers)-1])\n    end\n \
    \   \n    return rolling_max\nend\n</cell>\n<code language=julia-1.5>\nrolling_max(numbers)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that generates a vector of rolling\
    \ mean element found until given moment in the sequence.", "    \n    maximum\
    \ = numbers[1]\n    for n in numbers[2:end]\n        if n > maximum\n        \
    \    maximum = n\n        end\n    end\n    \n    return maximum\nend\n</cell>\n\
    <code language=julia-1.5>\n@time maximum = rolling_max(numbers)\n</cell>\n<code\
    \ language=julia-1.5>\nmaximum\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that generates a vector of rolling minimum element found until given moment\
    \ in the sequence.", "    \n    maximum = numbers[1]\n    for n in numbers[2:end]\n\
    \        if n > maximum\n            maximum = n\n        end\n    end\n    maximum\n\
    end\n</cell>\n<code language=julia-1.5>\n@time rolling_max([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>", "    \n    maximum = numbers[1]\n    for\
    \ i in numbers[2:end]\n        if i > maximum\n            maximum = i\n     \
    \   end\n    end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\nrolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>", "    \n    maximums = Vector{Int64}()\n \
    \   \n    for n in numbers\n        maximums = maximum(maximums, rolling_max(numbers[2:end-1]))\n\
    \    end\n    \n    maximums\nend\n</cell>\n<code language=julia-1.5>\n@time rolling_max(numbers)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that generates all the possible\
    \ combinations of two given vectors $x$ and $y$ of size $n$. For example, for\
    \ $x = [1, 2, 3]$ and $y = [4, 5, 6]$, the function should return $[(1, 4), (2,\
    \ 5), (3, 6)]$.", "    \n    rolling_max_list = Vector{Int64}(undef, 0)\n    \n\
    \    for number in numbers\n        rolling_max_list = push!(rolling_max_list,\
    \ maximum(rolling_max_list, number))\n    end\n    \n    return rolling_max_list\n\
    end", "    \n    rolling_max_list = Vector{Int64}()\n    \n    for n in numbers\n\
    \        rolling_max_list = rolling_max_list + [rolling_max(n)]\n    end\n   \
    \ \n    return rolling_max_list\nend", "    \n    rolling_max_list = Vector{Int64}(undef,\
    \ 0)\n    \n    for number in numbers\n        rolling_max_list = push!(rolling_max_list,\
    \ maximum(rolling_max_list, number))\n    end\n    \n    return rolling_max_list\n\
    end", "    \n    rolling_max = zeros(length(numbers))\n    \n    for i = 1:length(numbers)\n\
    \        rolling_max[i] = maximum(numbers[i:i+length(numbers)])\n    end\n   \
    \ \n    return rolling_max\nend", "    rolling_max_list = Vector{Int64}(undef,\
    \ 0)\n    rolling_max_list = rolling_max_list + numbers\n    rolling_max_list\
    \ = rolling_max_list[length(rolling_max_list):end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    return rolling_max_list\nend", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    rolling_max_list = Vector{Int64}()\n    \n    for n\
    \ in numbers\n        rolling_max_list = rolling_max_list + [rolling_max(rolling_max_list)]\n\
    \    end\n    \n    return rolling_max_list\nend", "    \n    rolling_max_elements\
    \ = []\n    \n    for i = 1:length(numbers)\n        \n        rolling_max_elements.append(numbers[i])\n\
    \        \n        if i == length(numbers)\n            \n            rolling_max_elements.append(numbers[i])\n\
    \            \n        end\n        \n    end\n    \n    return rolling_max_elements\n\
    end", "    \n    rolling_max_list =  Vector{Int64}(undef, 0)\n    \n    for number\
    \ in numbers\n        rolling_max_list = push!(rolling_max_list, maximum(rolling_max_list,\
    \ number))\n    end\n    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    rolling_max = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n \
    \       rolling_max = rolling_max .+ [rolling_max[n]]\n    end\n    \n    return\
    \ rolling_max\nend\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n", "    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    rolling_max_elements = []\n    \n    for number in\
    \ numbers\n        rolling_max_elements.append(maximum(rolling_max_elements[end],\
    \ number))\n    end\n    \n    return rolling_max_elements\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time rolling_max(numbers)\n</cell>\n<text>\nExercise 3\n\
    Write a function that generates a vector of rolling minimum element found until\
    \ given moment in the sequence.\nHint: use rolling_min function from above.",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    rolling_max_list\
    \ = Vector{Int64}()\n    \n    for i = 1:length(numbers)\n        rolling_max_list\
    \ = rolling_max_list + [maximum(numbers[i:i+length(numbers)-1])]\n    end\n  \
    \  \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\nrolling_max(numbers)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that generates all the possible\
    \ combinations of two given vectors.", "    \n    maximum = numbers[1]\n    for\
    \ i in 2:length(numbers)\n        if numbers[i] > maximum\n            maximum\
    \ = numbers[i]\n        end\n    end\n    return maximum\nend\n</cell>\n<code\
    \ language=julia-1.3>\nrolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.3>\nrolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],\
    \ 10)\n</cell>\n<code language=julia-1.3>\nrolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],\
    \ 100)\n</cell>\n<code language=julia-1.3>", "    \n    rolling_max_array = []\n\
    \    \n    for i = 1:length(numbers)\n        rolling_max_array[i] = maximum(numbers[i:i+1])\n\
    \    end\n    \n    return rolling_max_array\nend", "    \n    rolling_max = zeros(length(numbers))\n\
    \    \n    for i = 1:length(numbers)\n        rolling_max[i] = maximum(numbers[i:i+length(numbers)])\n\
    \    end\n    \n    return rolling_max\nend", "    \n    rolling_max_list =  Vector{Int64}(undef,\
    \ 0)\n    \n    for number in numbers\n        rolling_max_list = append(rolling_max_list,\
    \ maximum(rolling_max_list, number))\n    end\n    \n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    rolling_max_list = Vector{Int64}(undef,\
    \ 0)\n    \n    for number in numbers\n        rolling_max_list = append!(rolling_max_list,\
    \ maximum(rolling_max_list, number))\n    end\n    \n    return rolling_max_list\n\
    end", "    \n    rolling_max_array = zeros(length(numbers))\n    \n    for i =\
    \ 1:length(numbers)\n        rolling_max_array[i] = maximum(numbers[i:i+length(numbers)-1])\n\
    \    end\n    \n    return rolling_max_array\nend", "    \n    maximums = Vector{Int64}(undef,\
    \ 0)\n    \n    for n in numbers\n        maximums = maximum(maximums, n)\n  \
    \  end\n    \n    return maximums\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    rolling_max_array\
    \ = zeros(length(numbers))\n    \n    for i = 1:length(numbers)\n        rolling_max_array[i]\
    \ = maximum(numbers[i:i+1])\n    end\n    \n    return rolling_max_array\nend",
  "    rolling_max = zeros(length(numbers))\n    rolling_max[1] = numbers[1]\n   \
    \ for i = 2:length(numbers)\n        rolling_max[i] = maximum(rolling_max[i-1:end],\
    \ numbers[i:end])\n    end\n    return rolling_max\nend\n</code>\n<|/ a tags=julia,arrays\
    \ |>\n<| c |>\nThanks for your answer. I am not familiar with Julia so I cannot\
    \ really understand your code. Could you please explain it a little bit more?\n\
    <|/ c |>\n<| c |>\nI added some comments to my answer. Hope it helps.\n<|/ c |>\n\
    <| c |>\nThanks for your answer. I am not familiar with Julia so I cannot really\
    \ understand your code. Could you please explain it a little bit more? I understand\
    \ that you are using an anonymous function, but I do not understand how you get\
    \ the rolling_max function to be able to use it in your code. Could you please\
    \ explain it a little bit more? Thanks again!\n<|/ c |>\n<| c |>\nI added some\
    \ comments to my answer. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer.\
    \ I am not familiar with Julia so I cannot really understand your code. Could\
    \ you please explain it a little bit more? I understand that you are using an\
    \ anonymous function, but I do not understand how you get the rolling_max function\
    \ to be able to use it in your code. Could you please explain it a little bit\
    \ more? Thanks again!\n<|/ c |>\n<| a tags=julia,arrays |>\nI believe that this\
    \ is what you are looking for:\n<code>", "    \n    maximum = numbers[1]\n   \
    \ \n    for n in numbers[2:end]\n        if n > maximum\n            maximum =\
    \ n\n        end\n    end\n    \n    maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    rolling_max = zeros(length(numbers))\n    \n    for i = 1:length(numbers)\n\
    \        rolling_max[i] = maximum(numbers[i:i+length(numbers)])\n    end\n   \
    \ \n    return rolling_max\nend", "    rolling_max_list = Vector{Int64}(undef,\
    \ 0)\n    rolling_max_list[1] = numbers[1]\n    for i = 2:length(numbers)\n  \
    \      rolling_max_list[i] = max(rolling_max_list[i-1], numbers[i])\n    end\n\
    \    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>", "    \n\
    \    rolling_max_result = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n\
    \        rolling_max_result = rolling_max_result .+ rolling_max(rolling_max_result\
    \ .+ [n - 1])\n    end\n    \n    return rolling_max_result\nend", "    \n   \
    \ rolling_max_elements = []\n    \n    for i = 1:length(numbers)\n        \n \
    \       if numbers[i] > numbers[i-1]\n            rolling_max_elements.push(numbers[i])\n\
    \        end\n    end\n    \n    return rolling_max_elements\nend\n</cell>\n<code\
    \ language=julia-1.3>\nrolling_max(numbers)\n</cell>\n<code language=julia-1.3>",
  "    \n    maximums = Vector{Int64}(undef, 0)\n    \n    for number in numbers\n\
    \        maximums = maximum(maximums, number)\n    end\n    \n    return maximums\n\
    end", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    maximum\
    \ = numbers[1]\n    \n    for n in numbers[2:end]\n        if n > maximum\n  \
    \          maximum = n\n        end\n    end\n    \n    return maximum\nend\n\
    </cell>\n<code language=julia-1.5>\nrolling_max([1,2,3,4,5,6,7,8,9])\n</cell>\n\
    <text>\nExercise 9\nWrite a function that generates all the possible combinations\
    \ of two vectors given as input. \nThe function should return a list of tuples\
    \ (v1,v2) where v1 and v2 are vectors of length 2 that contain all the possible\
    \ combinations of elements from v1 and v2 with repetition.", "    \n    maximums\
    \ = Vector{Int64}()\n    \n    for number in numbers\n        maximums.push(maximum(numbers))\n\
    \    end\n    \n    return maximums\nend", "    rolling_max_list = Vector{Int64}()\n\
    \    rolling_max_list = rolling_max_list + rolling_max(numbers[1:end-1]) \n  \
    \  rolling_max_list = rolling_max_list + rolling_max(numbers[2:end])\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[3:end])\n    rolling_max_list = rolling_max_list\
    \ + rolling_max(numbers[4:end])\n    rolling_max_list = rolling_max_list + rolling_max(numbers[5:end])\n\
    \    rolling_max_list = rolling_max_list + rolling_max(numbers[6:end])\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[7:end])\n    rolling_max_list = rolling_max_list\
    \ + rolling_max(numbers[8:end])\n    rolling_max_list = rolling_max_list + rolling_max(numbers[9:end])\n\
    \    rolling_max_list = rolling_max_list + rolling_max(numbers[10:end])\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[11:end])\n    rolling_max_list = rolling_max_list\
    \ + rolling_max(numbers[12:end])\n    rolling_max_list = rolling_max_list + rolling_max(numbers[13:end])\n\
    \    rolling_max_list = rolling_max_list + rolling_max(numbers[14:end])\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[15:end])\n    rolling_max_list = rolling_max_list\
    \ + rolling_max(numbers[16:end])\n    rolling_max_list = rolling_max_list + rolling_max(numbers[17:end])\n\
    \    rolling_max_list = rolling_max_list + rolling_max(numbers[18:end])\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[19:end])\n    rolling_max_list = rolling_max_list\
    \ + rolling_max(numbers[20:end])\n    rolling_max_list = rolling_max_list + rolling_max(numbers[21:end])\n\
    \    rolling_max_list = rolling_max_list + rolling_max(numbers[22:end])\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[23:end])\n    rolling_max_list = rolling_max_list\
    \ + rolling_max(numbers[24:end])\n    rolling_max_list = rolling_max_list + rolling_max(numbers[25:end])\n\
    \    rolling_max_list = rolling_max_list + rolling_max(numbers[26:end])\n    rolling_",
  "    \n    maximum = numbers[1]\n    for i in 2:length(numbers)\n        if numbers[i]\
    \ > maximum\n            maximum = numbers[i]\n        end\n    end\n    return\
    \ maximum\nend", "    rolling_max = numbers[end]\n    for n in numbers[2:end]\n\
    \        rolling_max = max(rolling_max, n)\n    end\n    rolling_max\nend", " \
    \   rolling_max_array = zeros(length(numbers))\n    for i = 1:length(numbers)\n\
    \        rolling_max_array[i] = maximum(numbers[i:i+1])\n    end\n    return rolling_max_array\n\
    end\n</cell>\n<code language=julia-1.5>\nrolling_max(numbers)\n</cell>\n<code\
    \ language=julia-1.5>", "    rolling_max = Vector{Int64}(undef, 0)\n    for n\
    \ in numbers\n        rolling_max = max(n, rolling_max)\n    end\n    return rolling_max\n\
    end", "    \n    maximum = numbers[1]\n    \n    for n in numbers[2:end]\n   \
    \     if n > maximum\n            maximum = n\n        end\n    end\n    \n  \
    \  return maximum\nend\n</cell>\n<code language=julia-1.5>\nrolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255])\n\
    </cell>", "    \n    rolling_max_array = zeros(length(numbers))\n    \n    for\
    \ i = 1:length(numbers)\n        rolling_max_array[i] = maximum(numbers[i:i+length(numbers)])\n\
    \    end\n    \n    return rolling_max_array\nend", "    \n    maximum = numbers[1]\n\
    \    for n in numbers[2:end]\n        if n > maximum\n            maximum = n\n\
    \        end\n    end\n    maximum\nend", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    maximums = Vector{Int64}(undef, length(numbers))\n\
    \    \n    for i = 1:length(numbers)\n        maximums[i] = maximum(numbers[i:i+1])\n\
    \    end\n    \n    return maximums\nend\n</cell>\n<code language=julia-1.5>\n\
    rolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>", "  \
    \  \n    rolling_max = Vector{Int64}(undef, 0)\n    \n    for i = 1:length(numbers)\n\
    \        rolling_max[i] = maximum(numbers[i:i+1])\n    end\n    \n    return rolling_max\n\
    end", "    \n    maximum = numbers[1]\n    for number in numbers[2:end]\n    \
    \    if number > maximum\n            maximum = number\n        end\n    end\n\
    \    \n    return maximum\nend", "    \n    rolling_max = zeros(length(numbers))\n\
    \    \n    for i = 1:length(numbers)\n        rolling_max[i] = maximum(numbers[i:i+length(numbers)-1])\n\
    \    end\n    \n    return rolling_max\nend", "    \n    rolling_max_list = Vector{Int64}(undef,\
    \ 0)\n    \n    for n in numbers\n        rolling_max_list = push!(rolling_max_list,\
    \ maximum(rolling_max_list, n))\n    end\n    \n    return rolling_max_list\n\
    end", "    \n    rolling_max = zeros(length(numbers))\n    \n    for i = 1:length(numbers)\n\
    \        rolling_max[i] = maximum(numbers[i:i+length(numbers)])\n    end\n   \
    \ \n    return rolling_max\nend\n</cell>\n<code language=julia-1.5>\n@time rolling_max(numbers)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that generates the cumulative sum\
    \ of a given vector.", "    rolling_max_list = Vector{Int64}(undef, 0)\n    rolling_max_list\
    \ = rolling_max_list + numbers\n    rolling_max_list = rolling_max_list + rolling_max(numbers[2:end])\n\
    \    rolling_max_list = rolling_max_list + rolling_max(numbers[3:end])\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[4:end])\n    rolling_max_list = rolling_max_list\
    \ + rolling_max(numbers[5:end])\n    rolling_max_list = rolling_max_list + rolling_max(numbers[6:end])\n\
    \    rolling_max_list = rolling_max_list + rolling_max(numbers[7:end])\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[8:end])\n    rolling_max_list = rolling_max_list\
    \ + rolling_max(numbers[9:end])\n    rolling_max_list = rolling_max_list + rolling_max(numbers[10:end])\n\
    \    rolling_max_list = rolling_max_list + rolling_max(numbers[11:end])\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[12:end])\n    rolling_max_list = rolling_max_list\
    \ + rolling_max(numbers[13:end])\n    rolling_max_list = rolling_max_list + rolling_max(numbers[14:end])\n\
    \    rolling_max_list = rolling_max_list + rolling_max(numbers[15:end])\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[16:end])\n    rolling_max_list = rolling_max_list\
    \ + rolling_max(numbers[17:end])\n    rolling_max_list = rolling_max_list + rolling_max(numbers[18:end])\n\
    \    rolling_max_list = rolling_max_list + rolling_max(numbers[19:end])\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[20:end])\n    rolling_max_list = rolling_max_list\
    \ + rolling_max(numbers[21:end])\n    rolling_max_list = rolling_max_list + rolling_max(numbers[22:end])\n\
    \    rolling_max_list = rolling_max_list + rolling_max(numbers[23:end])\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[24:end])\n    rolling_max_list = rolling_max_list\
    \ + rolling_max(numbers[25:end])\n    rolling_max_list = rolling_max_list + rolling_max(numbers[26:end])\n\
    \    rolling_max_list = rolling_max_", "    \n    rolling_max_vector = Vector{Int64}(undef,\
    \ 0)\n    \n    for number in numbers\n        rolling_max_vector = push!(rolling_max_vector,\
    \ maximum(rolling_max_vector))\n    end\n    \n    return rolling_max_vector\n\
    end\n</cell>\n<code language=julia-1.5>\nrolling_max(numbers)\n</cell>\n<text>\n\
    Exercise 9\nWrite a function that generates a vector with all the numbers from\
    \ 1 to n and returns the vector with the square of each number.", "    \n    maximums\
    \ = Vector{Int64}()\n    \n    for n in numbers\n        maximums.push(maximum(n))\n\
    \    end\n    \n    return maximums\nend", "    \n    rolling_max = zeros(length(numbers))\n\
    \    \n    for i = 1:length(numbers)\n        rolling_max[i] = maximum(numbers[i:i+length(numbers)-1])\n\
    \    end\n    \n    return rolling_max\nend", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    rolling_max_elements = []\n    \n    for\
    \ number in numbers\n        rolling_max_elements.append(maximum(number))\n  \
    \  end\n    \n    return rolling_max_elements\nend", "    rolling_max = zeros(length(numbers))\n\
    \    for i = 1:length(numbers)\n        rolling_max[i] = maximum(numbers[i:i+length(numbers)-1])\n\
    \    end\n    return rolling_max\nend", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    rolling_max = zeros(length(numbers))\n    rolling_max[1]\
    \ = numbers[1]\n    for i = 2:length(numbers)\n        rolling_max[i] = max(numbers[i-1],\
    \ numbers[i])\n    end\n    return rolling_max\nend", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    rolling_max_list = Vector{Int64}(undef,\
    \ 0)\n    \n    for number in numbers\n        rolling_max_list = push!(rolling_max_list,\
    \ maximum(rolling_max_list, number))\n    end\n    \n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>\nrolling_max(numbers)\n</cell>\n<text>\n\
    Exercise 3.2: Generate a list of rolling minimum element found until given moment\
    \ in the sequence.", "    \n    rolling_max_array = zeros(length(numbers))\n \
    \   \n    for i = 1:length(numbers)\n        rolling_max_array[i] = maximum(numbers[i:i+length(numbers)])\n\
    \    end\n    \n    return rolling_max_array\nend", "    \n    rolling_max_vector\
    \ = zeros(length(numbers))\n    \n    for i = 1:length(numbers)\n        rolling_max_vector[i]\
    \ = maximum(numbers[i:i+length(numbers)-1])\n    end\n    \n    return rolling_max_vector\n\
    end", "    \n    rolling_max = Vector{Int64}(undef, 0)\n    \n    for number in\
    \ numbers\n        \n        if number == 0\n            rolling_max = number\n\
    \        else\n            rolling_max = max(rolling_max, number)\n        end\n\
    \    end\n    \n    return rolling_max\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    rolling_max = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n \
    \       rolling_max = rolling_max == nothing ? n : max(rolling_max, n)\n    end\n\
    \    \n    return rolling_max\nend\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that generates a vector of rolling\
    \ minimum element found until given moment in the sequence.", "    \n    maximum\
    \ = numbers[1]\n    for n in numbers[2:end]\n        if n > maximum\n        \
    \    maximum = n\n        end\n    end\n    return maximum\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    rolling_max_result = Vector{Int64}(undef, 0)\n\
    \    \n    for n in numbers\n        rolling_max_result = rolling_max_result .+\
    \ rolling_max(n - rolling_max_result)\n    end\n    \n    return rolling_max_result\n\
    end", "    \n    maximum = numbers[1]\n    for i in 2:length(numbers)\n      \
    \  if numbers[i] > maximum\n            maximum = numbers[i]\n        end\n  \
    \  end\n    \n    return maximum\nend\n</cell>\n<code language=julia-1.5>\nrolling_max([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that generates a random integer\
    \ between $0$ and $10$, inclusive.", "    \n    maximums = Vector{Int64}(undef,\
    \ 0)\n    \n    for n in numbers\n        maximums = maximum(maximums, n)\n  \
    \  end\n    \n    return maximums\nend", "    \n    rolling_max_array = zeros(length(numbers)+1)\n\
    \    \n    rolling_max_array[1] = numbers[1]\n    \n    for i = 2:length(numbers)\n\
    \        rolling_max_array[i] = maximum(rolling_max_array[i-1:i+1])\n    end\n\
    \    \n    return rolling_max_array\nend", "    \n    rolling_max_array = []\n\
    \    \n    for n in numbers\n        rolling_max_array.append(rolling_max(n))\n\
    \    end\n    \n    return rolling_max_array\nend", "    \n    maximums = Vector{Int64}()\n\
    \    \n    for number in numbers\n        maximums.push(maximum(numbers))\n  \
    \  end\n    \n    return maximums\nend", "    rolling_max_list = Vector{Int64}()\n\
    \    rolling_max_list = rolling_max_list + numbers\n    rolling_max_list = rolling_max_list\
    \ + rolling_max(numbers[2:end])\n    return rolling_max_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    rolling_max_list\
    \ = []\n    \n    for number in numbers\n        rolling_max_list.append(maximum(rolling_max_list,\
    \ number))\n    end\n    \n    return rolling_max_list\nend", "    \n    maximum\
    \ = numbers[1]\n    for n in numbers[2:end]\n        if n > maximum\n        \
    \    maximum = n\n        end\n    end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=", "    \n\
    \    maximums = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n        maximums\
    \ = maximum(maximums, n)\n    end\n    \n    return maximums\nend", "    \n  \
    \  rolling_max_list = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n  \
    \      rolling_max_list = push!(rolling_max_list, maximum(rolling_max_list, n))\n\
    \    end\n    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    rolling_max_list\
    \ = Vector{Int64}(undef, 0)\n    \n    for number in numbers\n        rolling_max_list\
    \ = append!(rolling_max_list, maximum(rolling_max_list, number))\n    end\n  \
    \  \n    return rolling_max_list\nend", "    rolling_max_list = Vector{Int64}(undef,\
    \ 0)\n    rolling_max_list[1] = numbers[1]\n    for i = 2:length(numbers)\n  \
    \      rolling_max_list[i] = max(rolling_max_list[i-1], numbers[i])\n    end\n\
    \    return rolling_max_list\nend", "    \n    rolling_max_list = Vector{Int64}(undef,\
    \ 0)\n    \n    for number in numbers\n        rolling_max_list = push!(rolling_max_list,\
    \ maximum(rolling_max_list, number))\n    end\n    \n    return rolling_max_list\n\
    end", "    \n    rolling_max_list = Vector{Int64}()\n    \n    for number in numbers\n\
    \        rolling_max_list = push!(rolling_max_list, maximum(rolling_max_list,\
    \ number))\n    end\n    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_", "    rolling_max_array\
    \ = zeros(length(numbers)) \n    rolling_max_array[1] = numbers[1] \n    for i\
    \ = 2:length(numbers)\n        rolling_max_array[i] = max(numbers[i-1], rolling_max_array[i-1])\
    \ \n    end\n    return rolling_max_array\nend", "    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    maximum = numbers[1]\n    \n    for\
    \ n in numbers[2:end]\n        if n > maximum\n            maximum = n\n     \
    \   end\n    end\n    \n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    rolling_max_vector = Vector{Int64}(undef, 0)\n    \n    for number in\
    \ numbers\n        rolling_max_vector = push!(rolling_max_vector, maximum(rolling_max_vector))\n\
    \    end\n    \n    return rolling_max_vector\nend\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(numbers)\n</cell>\n<text>\nExercise 3\nWrite a function that generates\
    \ a vector with all the elements of the given vector except the element at the\
    \ given index.\nFor example, if the given vector is [1,2,3,4,5] and the given\
    \ index is 2, the function should return [1,2,3]", "    \n    maximum = numbers[1]\n\
    \    for n in numbers[2:end]\n        if n > maximum\n            maximum = n\n\
    \        end\n    end\n    maximum\nend\n</cell>\n<code language=julia-1.4>",
  "    rolling_max_list = Vector{Int64}()\n    rolling_max_list = rolling_max_list\
    \ + [rolling_max(numbers[i:i+length(numbers)]) for i in 1:length(numbers)]\n \
    \   rolling_max_list = rolling_max_list + [rolling_max(numbers[i+length(numbers):end])\
    \ for i in 1:length(numbers)]\n    rolling_max_list = rolling_max_list + [rolling_max(numbers[i:i+length(numbers)-1])\
    \ for i in 1:length(numbers)]\n    rolling_max_list = rolling_max_list + [rolling_max(numbers[i+length(numbers)-1:end])\
    \ for i in 1:length(numbers)]\n    rolling_max_list = rolling_max_list + [rolling_max(numbers[i:i+length(numbers)-2])\
    \ for i in 1:length(numbers)]\n    rolling_max_list = rolling_max_list + [rolling_max(numbers[i+length(numbers)-2:end])\
    \ for i in 1:length(numbers)]\n    rolling_max_list = rolling_max_list + [rolling_max(numbers[i:i+length(numbers)-3])\
    \ for i in 1:length(numbers)]\n    rolling_max_list = rolling_max_list + [rolling_max(numbers[i+length(numbers)-3:end])\
    \ for i in 1:length(numbers)]\n    rolling_max_list = rolling_max_list + [rolling_max(numbers[i:i+length(numbers)-4])\
    \ for i in 1:length(numbers)]\n    rolling_max_list = rolling_max_list + [rolling_max(numbers[i+length(numbers)-4:end])\
    \ for i in 1:length(numbers)]\n    rolling_max_list = rolling_max_list + [rolling_max(numbers[i:i+length(numbers)-5])\
    \ for i in 1:length(numbers)]\n    rolling_max_list = rolling_max_list + [rolling_max(numbers[i+length(numbers)-5:end])\
    \ for i in 1:length(numbers)]\n    rolling_max_list = rolling_max_list + [rolling_max(numbers[i:i+length(numbers)-6])\
    \ for i in 1:length(numbers)]\n    rolling_max_list = rolling_max_list + [rolling_max(numbers[i+length(numbers)-6:end])\
    \ for i in 1:length(numbers)]\n    rolling_max_list = rolling_max_list + [rolling_max(numbers[i:i+length(numbers)-7])\
    \ for i in 1:length(numbers)]\n    rolling_max_list = rolling_max_list + [rolling_max(numbers[i+length(numbers)-7:end])\
    \ for i in 1:length(numbers)]\n    rolling_max_list = rolling_max_list + [rolling_max(numbers[i:i+length(numbers)-8])\
    \ for i in 1:length(numbers)]\n    rolling_max_list = rolling_max_list + [rolling_max(",
  "    \n    rolling_max_vector = Vector{Int64}(undef, 0)\n    \n    for number in\
    \ numbers\n        rolling_max_vector = rolling_max_vector + [rolling_max(numbers,\
    \ number + 1, rolling_max_vector)]\n    end\n    \n    return rolling_max_vector\n\
    end", "    rolling_max_elements = []\n    rolling_max_elements_index = 0\n   \
    \ rolling_max_elements_index = 0\n    rolling_max_elements_index = 0\n    rolling_max_elements_index\
    \ = 0\n    rolling_max_elements_index = 0\n    rolling_max_elements_index = 0\n\
    \    rolling_max_elements_index = 0\n    rolling_max_elements_index = 0\n    rolling_max_elements_index\
    \ = 0\n    rolling_max_elements_index = 0\n    rolling_max_elements_index = 0\n\
    \    rolling_max_elements_index = 0\n    rolling_max_elements_index = 0\n    rolling_max_elements_index\
    \ = 0\n    rolling_max_elements_index = 0\n    rolling_max_elements_index = 0\n\
    \    rolling_max_elements_index = 0\n    rolling_max_elements_index = 0\n    rolling_max_elements_index\
    \ = 0\n    rolling_max_elements_index = 0\n    rolling_max_elements_index = 0\n\
    \    rolling_max_elements_index = 0\n    rolling_max_elements_index = 0\n    rolling_max_elements_index\
    \ = 0\n    rolling_max_elements_index = 0\n    rolling_max_elements_index = 0\n\
    \    rolling_max_elements_index = 0\n    rolling_max_elements_index = 0\n    rolling_max_elements_index\
    \ = 0\n    rolling_max_elements_index = 0\n    rolling_max_elements_index = 0\n\
    \    rolling_max_elements_index = 0\n    rolling_max_elements_index = 0\n    rolling_max_elements_index\
    \ = 0\n    rolling_max_elements_index = 0\n    rolling_max_elements_index = 0\n\
    \    rolling_max_elements_index = 0\n    rolling_max_elements_index = 0\n    rolling_max_elements_index\
    \ = 0\n    rolling_max_elements_index = 0\n    rolling_max_elements_index = 0\n\
    \    rolling_max_elements_index = 0\n    rolling_max_elements_index = 0\n    rolling_max_elements_index\
    \ = 0\n    rolling_max_elements_index = 0\n    rolling_max_elements_index = 0\n\
    \    rolling_max_elements_index = 0\n    rolling_max_elements_index = 0\n    rolling_max_elements_index\
    \ = 0\n    rolling_max_elements_index = 0\n    rolling_max_elements_index = 0\n\
    \    rolling_max_elements_index = 0\n    rolling_max_elements_index = 0\n    rolling_max_elements_index\
    \ = 0\n    rolling_max_elements_index = 0\n    rolling_max_elements_index = 0\n\
    \    ", "    \n    maximum = numbers[1]\n    for n in numbers[2:end]\n       \
    \ if n > maximum\n            maximum = n\n        end\n    end\n    \n    return\
    \ maximum\nend\n</cell>\n<code language=julia-1.5>", "    \n    rolling_max_list\
    \ = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n        rolling_max_list\
    \ = push!(rolling_max_list, maximum(rolling_max_list, n))\n    end\n    \n   \
    \ return rolling_max_list\nend", "    \n    maximums = Vector{Int64}(undef, 0)\n\
    \    \n    for n in numbers\n        maximums = maximum(maximums, n)\n    end\n\
    \    \n    return maximums\nend", "    \n    rolling_max_list = Vector{Int64}(undef,\
    \ 0)\n    \n    for n in numbers\n        rolling_max_list = rolling_max_list\
    \ + [rolling_max(n)]\n    end\n    \n    return rolling_max_list\nend", "    rolling_max_array\
    \ = zeros(length(numbers))\n    rolling_max_array[1] = numbers[1]\n    for i =\
    \ 2:length(numbers)\n        rolling_max_array[i] = max(numbers[i-1], rolling_max_array[i-1])\n\
    \    end\n    return rolling_max_array\nend\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ dscore=0 |>\nThe solution using Julia is very simple:\n<code>", "    rolling_max_list\
    \ = Vector{Int64}()\n    rolling_max_list = rolling_max_list .+ numbers\n    rolling_max_list\
    \ = rolling_max_list .+ rolling_max(rolling_max_list)\n    return rolling_max_list\n\
    end", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    rolling_max_list\
    \ = Vector{Int64}(undef, 0)\n    rolling_max_list = rolling_max_list + numbers\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .> maximum(rolling_max_list)]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .> maximum(rolling_max_list)]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .> maximum(rolling_max_list)]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .> maximum(rolling_max_list)]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .> maximum(rolling_max_list)]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .> maximum(rolling_max_list)]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .> maximum(rolling_max_list)]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .> maximum(rolling_max_list)]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .> maximum(rolling_max_list)]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .> maximum(rolling_max_list)]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .> maximum(rolling_max_list)]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .> maximum(rolling_max_list)]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .> maximum(rolling_max_list)]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .> maximum(rolling_max_list)]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .> maximum(rolling_max_list)]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .> maximum(rolling_max_list)]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .> maximum(rolling_max_list)]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .> maximum(rolling_max_list)]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .> maximum(rolling_max_list)]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .> maximum(rolling_max_list)]\n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .> maximum(rolling_max_list)]\n    rolling_max_list = rolling_max_list[rolling_max_",
  "    \n    rolling_max = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n \
    \       rolling_max = [max(rolling_max[n], n), rolling_max[n]]\n    end\n    \n\
    \    return rolling_max\nend", "    \n    rolling_max_list = Vector{Int64}(undef,\
    \ 0)\n    \n    for number in numbers\n        rolling_max_list = push!(rolling_max_list,\
    \ maximum(rolling_max_list, number))\n    end\n    \n    return rolling_max_list\n\
    end", "    rolling_max_list = Vector{Int64}()\n    rolling_max_list = rolling_max_list\
    \ + numbers\n    rolling_max_list = rolling_max_list + rolling_max(numbers[1:end-1])\
    \ \n    return rolling_max_list\nend", "    rolling_max_array = zeros(length(numbers))\n\
    \    rolling_max_array[1] = numbers[1]\n    for i = 2:length(numbers)\n      \
    \  rolling_max_array[i] = max(numbers[i-1], numbers[i])\n    end\n    return rolling_max_array\n\
    end", "    \n    maximums = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n\
    \        maximums = maximum(maximums, n)\n    end\n    \n    return maximums\n\
    end", "    \n    rolling_max_array = zeros(length(numbers))\n    \n    for i =\
    \ 1:length(numbers)\n        rolling_max_array[i] = maximum(numbers[i:i+length(numbers)])\n\
    \    end\n    \n    return rolling_max_array\nend", "    \n    maximum = numbers[1]\n\
    \    for n in numbers[2:end]\n        if n > maximum\n            maximum = n\n\
    \        end\n    end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max(numbers)\n</cell>\n<code language=julia-1.5>\n@time rolling_max(numbers)\n\
    </cell>\n<text>\nExercise\nWrite a function that generates a random integer between\
    \ 1 and 100 (inclusive).\nWrite a function that generates a random integer between\
    \ 1 and 100 (inclusive).\nWrite a function that generates a random integer between\
    \ 1 and 100 (inclusive).\nWrite a function that generates a random integer between\
    \ 1 and 100 (inclusive).\nWrite a function that generates a random integer between\
    \ 1 and 100 (inclusive).\nWrite a function that generates a random integer between\
    \ 1 and 100 (inclusive).\nWrite a function that generates a random integer between\
    \ 1 and 100 (inclusive).\nWrite a function that generates a random integer between\
    \ 1 and 100 (inclusive).\nWrite a function that generates a random integer between\
    \ 1 and 100 (inclusive).\nWrite a function that generates a random integer between\
    \ 1 and 100 (inclusive).\nWrite a function that generates a random integer between\
    \ 1 and 100 (inclusive).\nWrite a function that generates a random integer between\
    \ 1 and 100 (inclusive).\nWrite a function that generates a random integer between\
    \ 1 and 100 (inclusive).\nWrite a function that generates a random integer between\
    \ 1 and 100 (inclusive).\nWrite a function that generates a random integer between\
    \ 1 and 100 (inclusive).\nWrite a function that generates a random integer between\
    \ 1 and 100 (inclusive).\nWrite a function that generates a random integer between\
    \ 1 and 100 (inclusive).\nWrite a function that generates a random integer between\
    \ 1 and 100 (inclusive).\nWrite a function that generates a random integer between\
    \ 1 and 100 (inclusive).\nWrite a function that generates a random integer between\
    \ 1 and 100 (inclusive).\nWrite a function that generates a random integer between\
    \ 1 and 100 (inclusive).\nWrite a function that generates a random integer between\
    \ 1 and 100 (inclusive).\nWrite a function that generates a random integer between\
    \ 1 and 100 (inclusive).\nWrite a function that generates a random integer between\
    \ 1 and 100 (inclusive).\nWrite a function that generates a random integer between\
    \ 1 and 100 (inclusive).\nWrite a function that generates a random integer between\
    \ 1 and 100 (inclusive).\nWrite a function that generates a random integer between\
    \ 1 and 100 (inclusive).\nWrite a function that generates a random integer between\
    \ 1 and 100 (inclusive).\nWrite a function that generates a random integer between\
    \ 1 and 100 (inclusive).\nWrite a function that generates a random integer between\
    \ 1 and 100 (inclusive).\nWrite a function that generates a random integer between\
    \ 1 and 100 (inclusive).\nWrite ", "    \n    rolling_max_list = Vector{Int64}(undef,\
    \ 0)\n    \n    for number in numbers\n        rolling_max_list = push!(rolling_max_list,\
    \ maximum(rolling_max_list, number))\n    end\n    \n    return rolling_max_list\n\
    end", "    \n    rolling_max_list = Vector{Int64}(undef, length(numbers))\n  \
    \  \n    for i = 1:length(numbers)\n        rolling_max_list[i] = maximum(numbers[i:i+length(numbers)])\n\
    \    end\n    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.3>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.3>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.3>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.3>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.3>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.3>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.3>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.3>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.3>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.3>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.3>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.3>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.3>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.3>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.3>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.3>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.3>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.3>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.3>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.3>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.3>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.3>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.3>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.3>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.3>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.3>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.3>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.3>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.3>", "    \n    rolling_max_list\
    \ =  Vector{Int64}(undef, 0)\n    \n    for n in numbers\n        rolling_max_list[1]\
    \ = max(rolling_max_list[1], n)\n    end\n    \n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>\nrolling_max(numbers)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that generates a vector of rolling minimum element\
    \ found until given moment in the sequence.", "    \n    rolling_max_vector =\
    \ Vector{Int64}(undef, 0)\n    \n    for n in numbers\n        rolling_max_vector\
    \ = push!(rolling_max_vector, maximum(n))\n    end\n    \n    return rolling_max_vector\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    rolling_max_vector = Vector{Int64}(undef,\
    \ 0)\n    \n    for number in numbers\n        rolling_max_vector = push!(rolling_max_vector,\
    \ maximum(rolling_max_vector))\n    end\n    \n    return rolling_max_vector\n\
    end", "    rolling_max_result = Vector{Int64}(undef, 0)\n    rolling_max_result[1]\
    \ = numbers[1]\n    for i = 2:length(numbers)\n        if numbers[i] > rolling_max_result[1]\n\
    \            rolling_max_result[1] = numbers[i]\n        end\n    end\n    rolling_max_result\n\
    end", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    maximums\
    \ = Vector{Int64}()\n    \n    for n in numbers\n        maximums.push(n) \n \
    \   end\n    \n    maximums\nend", "    \n    rolling_max_array = zeros(length(numbers))\n\
    \    \n    for i = 1:length(numbers)\n        rolling_max_array[i] = maximum(numbers[i:i+length(numbers)])\n\
    \    end\n    \n    return rolling_max_array\nend", "    \n    rolling_max_list\
    \ = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n        rolling_max_list\
    \ = push!(rolling_max_list, maximum(n))\n    end\n    \n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>\nrolling_max(numbers)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that generates a list of rolling minimum element\
    \ found until given moment in the sequence.", "    \n    rolling_max_elements\
    \ = []\n    \n    for n in numbers\n        rolling_max_elements.append(rolling_max(n))\n\
    \    end\n    \n    return rolling_max_elements\nend", "    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    rolling_max_list = Vector{Int64}(undef, 0)\n    rolling_max_list[1]\
    \ = numbers[1]\n    for i = 2:length(numbers)\n        rolling_max_list[i] = maximum(rolling_max_list[i-1],\
    \ numbers[i])\n    end\n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max_list = Vector{Int64}()\n    rolling_max_list = rolling_max_list\
    \ + numbers\n    rolling_max_list = rolling_max_list + rolling_max(numbers[1:end-1])\
    \ \n    return rolling_max_list\nend", "    \n    rolling_max = Vector{Int64}(undef,\
    \ 0)\n    \n    for n in numbers\n        rolling_max = rolling_max .+ [rolling_max[n-1]]\n\
    \    end\n    \n    return rolling_max\nend\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)", " \
    \   \n    rolling_max_list = Vector{Int64}(undef, 0)\n    \n    for number in\
    \ numbers\n        rolling_max_list = push!(rolling_max_list, maximum(rolling_max_list,\
    \ number))\n    end\n    \n    return rolling_max_list\nend", "    \n    rolling_max_array\
    \ = zeros(length(numbers))\n    \n    for i = 1:length(numbers)\n        rolling_max_array[i]\
    \ = maximum(numbers[i:i+length(numbers)-1])\n    end\n    \n    return rolling_max_array\n\
    end\n</cell>\n<code language=julia-1.5>\n@time rolling_max(numbers)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that generates a vector with random numbers\
    \ between 0 and 1\nUse this function to generate an array of random numbers between\
    \ 0 and 1\nUse this array to generate a rolling mean of 100 numbers and store\
    \ it in another array\nUse this array to generate a rolling standard deviation\
    \ of 100 numbers and store it in another array\nUse this array to generate a rolling\
    \ median of 100 numbers and store it in another array\nUse this array to generate\
    \ a rolling minimum of 100 numbers and store it in another array\nUse this array\
    \ to generate a rolling maximum of 100 numbers and store it in another array\n\
    Use this array to generate a rolling sum and store it in another array\nUse this\
    \ array to generate a rolling count of 100 numbers and store it in another array\n\
    Use this array to generate a rolling standard deviation of 100 numbers and store\
    \ it in another array\nUse this array to generate a rolling median of 100 numbers\
    \ and store it in another array\nUse this array to generate a rolling minimum\
    \ of 100 numbers and store it in another array\nUse this array to generate a rolling\
    \ maximum of 100 numbers and store it in another array\nUse this array to generate\
    \ a rolling sum and store it in another array\nUse this array to generate a rolling\
    \ count of 100 numbers and store it in another array\nUse this array to generate\
    \ a rolling standard deviation of 100 numbers and store it in another array\n\
    Use this array to generate a rolling median of 100 numbers and store it in another\
    \ array\nUse this array to generate a rolling minimum of 100 numbers and store\
    \ it in another array\nUse this array to generate a rolling maximum of 100 numbers\
    \ and store it in another array\nUse this array to generate a rolling sum and\
    \ store it in another array\nUse this array to generate a rolling count of 100\
    \ numbers and store it in another array\nUse this array to generate a rolling\
    \ standard deviation of 100 numbers and store it in another array\nUse this array\
    \ to generate a rolling median of 100 numbers and store it in another array\n\
    Use this array to generate a rolling minimum of 100 numbers and store it in another\
    \ array\nUse this array to generate a rolling maximum of 100 numbers and store\
    \ it in another array\nUse this array to generate a rolling sum and store it in\
    \ another array\nUse this array to generate a rolling count of 100 numbers and\
    \ store it in another array\nUse this array to generate a rolling standard deviation\
    \ of 100 numbers and store it in another array\nUse this array to generate a rolling\
    \ median ", "    \n    maximum = numbers[1]\n    \n    for n in numbers[2:end]\n\
    \        if n > maximum\n            maximum = n\n        end\n    end\n    \n\
    \    return maximum\nend", "    \n    rolling_max = zeros(length(numbers))\n \
    \   \n    for i = 1:length(numbers)\n        rolling_max[i] = maximum(numbers[i:i+length(numbers)-1])\n\
    \    end\n    \n    return rolling_max\nend", "    \n    rolling_max_list = Vector{Int64}(undef,\
    \ 0)\n    \n    for number in numbers\n        rolling_max_list = push!(rolling_max_list,\
    \ maximum(rolling_max_list, number))\n    end\n    \n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>\nrolling_max(numbers)\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    rolling_max_list = Vector{Int64}(undef, 0)\n\
    \    \n    for number in numbers\n        rolling_max_list = push!(rolling_max_list,\
    \ maximum(rolling_max_list, number))\n    end\n    \n    return rolling_max_list\n\
    end", "    \n    rolling_max_list = Vector{Int64}(undef, 0)\n    \n    for number\
    \ in numbers\n        rolling_max_list = push!(rolling_max_list, maximum(rolling_max_list,\
    \ number))\n    end\n    \n    return rolling_max_list\nend", "    \n    maximum\
    \ = numbers[1]\n    \n    for n in numbers[2:end]\n        if n > maximum\n  \
    \          maximum = n\n        end\n    end\n    \n    return maximum\nend\n\
    </cell>\n<code language=julia-1.5>\nrolling_max([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that generates a random integer between $0$\
    \ and $1$, inclusive.", "    rolling_max_list = Vector{Int64}()\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[1:end-1]) \n    rolling_max_list =\
    \ rolling_max_list + rolling_max(numbers[2:end])\n    rolling_max_list = rolling_max_list\
    \ + rolling_max(numbers[3:end])\n    rolling_max_list = rolling_max_list + rolling_max(numbers[4:end])\n\
    \    rolling_max_list = rolling_max_list + rolling_max(numbers[5:end])\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[6:end])\n    rolling_max_list = rolling_max_list\
    \ + rolling_max(numbers[7:end])\n    rolling_max_list = rolling_max_list + rolling_max(numbers[8:end])\n\
    \    rolling_max_list = rolling_max_list + rolling_max(numbers[9:end])\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[10:end])\n    rolling_max_list = rolling_max_list\
    \ + rolling_max(numbers[11:end])\n    rolling_max_list = rolling_max_list + rolling_max(numbers[12:end])\n\
    \    rolling_max_list = rolling_max_list + rolling_max(numbers[13:end])\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[14:end])\n    rolling_max_list = rolling_max_list\
    \ + rolling_max(numbers[15:end])\n    rolling_max_list = rolling_max_list + rolling_max(numbers[16:end])\n\
    \    rolling_max_list = rolling_max_list + rolling_max(numbers[17:end])\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[18:end])\n    rolling_max_list = rolling_max_list\
    \ + rolling_max(numbers[19:end])\n    rolling_max_list = rolling_max_list + rolling_max(numbers[20:end])\n\
    \    rolling_max_list = rolling_max_list + rolling_max(numbers[21:end])\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[22:end])\n    rolling_max_list = rolling_max_list\
    \ + rolling_max(numbers[23:end])\n    rolling_max_list = rolling_max_list + rolling_max(numbers[24:end])\n\
    \    rolling_max_list = rolling_max_list + rolling_max(numbers[25:end])\n    rolling_max_list\
    \ = rolling_max_list + rolling_max(numbers[26:end])\n    rolling_", "    \n  \
    \  rolling_max_list = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n  \
    \      rolling_max_list = push!(rolling_max_list, maximum(rolling_max_list, n))\n\
    \    end\n    \n    return rolling_max_list\nend", "    \n    rolling_max_list\
    \ = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n        rolling_max_list\
    \ = push!(rolling_max_list, maximum(rolling_max_list, n))\n    end\n    \n   \
    \ return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n\
    </cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(1:10)\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n\
    <code language=julia-1.5>\nrolling_", "    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    rolling_max_list = []\n    \n    for number in\
    \ numbers\n        rolling_max_list.append(rolling_max(numbers))\n    end\n  \
    \  \n    return rolling_max_list\nend", "    \n    rolling_max_list = Vector{Int64}(undef,\
    \ 0)\n    \n    for n in numbers\n        rolling_max_list = push!(rolling_max_list,\
    \ maximum(rolling_max_list, n))\n    end\n    \n    return rolling_max_list\n\
    end", "    \n    rolling_max = Vector{Int64}(undef, length(numbers))\n    \n \
    \   for i = 1:length(numbers)\n        rolling_max[i] = maximum(numbers[i:i+length(numbers)])\n\
    \    end\n    \n    return rolling_max\nend\n</cell>\n<code language=julia-1.5>\n\
    numbers = 1:10\nrolling_max(numbers)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that generates a list of rolling minimum element found until given moment in\
    \ the sequence.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    maximum = numbers[1]\n    for n in numbers[2:end]\n        if n > maximum\n\
    \            maximum = n\n        end\n    end\n    maximum\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time maximum = rolling_max(numbers)\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that generates a vector of rolling minimum element\
    \ found until given moment in the sequence.\nHint: use rolling_min.", "    \n\
    \    maximum = numbers[1]\n    \n    for n in numbers[2:end]\n        if n > maximum\n\
    \            maximum = n\n        end\n    end\n    \n    return maximum\nend",
  "    \n    maximums = Vector{Int64}()\n    \n    for number in numbers\n       \
    \ maximums.push(maximum(numbers))\n    end\n    \n    return maximums\nend\n</cell>\n\
    <code language=julia-1.5>\n@time rolling_max(1:10000);\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max(1:100000);\n</cell>\n<code language=julia-1.5>\n@time rolling_max(1:1000000);\n\
    </cell>\n<code language=julia-1.5>\n@time rolling_max(1:10000000);\n</cell>\n\
    <code language=julia-1.5>\n@time rolling_max(1:100000000);\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max(1:1000000000);\n</cell>\n<code language=julia-1.5>\n@time rolling_max(1:10000000000);\n\
    </cell>\n<code language=julia-1.5>\n@time rolling_max(1:100000000000);\n</cell>\n\
    <code language=julia-1.5>\n@time rolling_max(1:1000000000000);\n</cell>\n<code\
    \ language=julia-1.5>\n@time rolling_max(1:10000000000000);\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max(1:100000000000000);\n</cell>\n<code language=julia-1.5>\n@time\
    \ rolling_max(1:1000000000000000);\n</cell>\n<code language=julia-1.5>\n@time\
    \ rolling_max(1:10000000000000000);\n</cell>\n<code language=julia-1.5>\n@time\
    \ rolling_max(1:100000000000000000);\n</cell>\n<code language=julia-1.5>\n@time\
    \ rolling_max(1:1000000000000000000);\n</cell>\n<code language=julia-1.5>\n@time\
    \ rolling_max(1:10000000000000000000);\n</cell>\n<code language=julia-1.5>\n@time\
    \ rolling_max(1:100000000000000000000);\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max(1:1000000000000000000000);\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max(1:10000000000000000000000);\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max(1:100000000000000000000000);\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max(1:1000000000000000000000000);\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max(1:10000000000000000000000000);\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max(1:100000000000000000000000000);\n</cell>\n<code language=julia-",
  "    rolling_max = Vector{Int64}(undef, 0)\n    for n in numbers\n        rolling_max[end]\
    \ = max(n,rolling_max[end])\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time rolling_max(numbers)\n</cell>\n<text>\nExercise 2\n\
    Write a function that generates the cumulative sum of a given vector.", "    \n\
    \    rolling_max_list = Vector{Int64}(undef, 0)\n    \n    for number in numbers\n\
    \        rolling_max_list = push!(rolling_max_list, maximum(rolling_max_list,\
    \ number))\n    end\n    \n    return rolling_max_list\nend", "    rolling_max_array\
    \ = zeros(length(numbers))\n    for i = 1:length(numbers)\n        rolling_max_array[i]\
    \ = maximum(numbers[i:i+1])\n    end\n    return rolling_max_array\nend", "  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    rolling_max_vector\
    \ = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n        rolling_max_vector\
    \ = push!(rolling_max_vector, maximum(rolling_max_vector, n))\n    end\n    \n\
    \    return rolling_max_vector\nend", "    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    maximums = Vector{Int64}(undef, 0)\n    \n  \
    \  for n in numbers\n        maximums = maximum(maximums, n)\n    end\n    \n\
    \    return maximums\nend", "    \n    rolling_max = Vector{Int64}(undef, 0)\n\
    \    \n    for n in numbers\n        rolling_max = rolling_max .+ [rolling_max[n]]\n\
    \    end\n    \n    return rolling_max\nend", "    \n    rolling_max_vector =\
    \ Vector{Int64}(undef, 0)\n    \n    for number in numbers\n        rolling_max_vector\
    \ = append(rolling_max_vector, maximum(rolling_max_vector))\n    end\n    \n \
    \   return rolling_max_vector\nend\n</cell>\n<code language=julia-1.5>\nrolling_max([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that generates a vector of rolling\
    \ minimum element found until given moment in the sequence.\n        \"\"\"",
  "    \n    rolling_max = zeros(length(numbers))\n    \n    for i = 1:length(numbers)\n\
    \        rolling_max[i] = maximum(numbers[i:i+length(numbers)-1])\n    end\n \
    \   \n    return rolling_max\nend\n</cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n\
    </cell>\n<code language=julia-1.5>\nrolling_max(1:10)\n</cell>\n<code language=julia-1.5>",
  "    \n    rolling_max_list = Vector{Int64}(undef, 0)\n    \n    for number in numbers\n\
    \        rolling_max_list = push!(rolling_max_list, maximum(rolling_max_list,\
    \ number))\n    end\n    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\n\
    rolling_max(numbers)\n</cell>\n<text>\nExercise 3.6\nWrite a function that takes\
    \ as input a vector of integers and a window size and returns a vector of rolling\
    \ sums over the given window.\nFor example, if the input vector is [1,2,3,4,5,6,7]\
    \ and window size is 3, the output vector should be [1,2,3,4,5,6,7,8,9,10,11,12,13,14]",
  "    \n    rolling_max_list = Vector{Int64}()\n    \n    for number in numbers\n\
    \        rolling_max_list = push!(rolling_max_list, maximum(rolling_max_list,\
    \ number))\n    end\n    \n    return rolling_max_list\nend", "    \n    rolling_max_list\
    \ = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n        rolling_max_list\
    \ = push!(rolling_max_list, maximum(rolling_max_list, n))\n    end\n    \n   \
    \ return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\nrolling_max(numbers)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that generates the rolling minimum\
    \ element found until a given moment in the sequence.", "    \n    rolling_max_list\
    \ = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n        rolling_max_list\
    \ = push!(rolling_max_list, maximum(rolling_max_list, n))\n    end\n    \n   \
    \ return rolling_max_list\nend", "    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    rolling_max_rolling_window(numbers, 1)\nend", "    \n   \
    \ rolling_max = Vector{Int64}(undef, length(numbers))\n    \n    for i = 1:length(numbers)\n\
    \        rolling_max[i] = maximum(numbers[i:i+length(numbers)])\n    end\n   \
    \ \n    return rolling_max\nend", "    \n    rolling_max_list = Vector{Int64}()\n\
    \    \n    for i = 1:length(numbers)\n        rolling_max_list = append(rolling_max_list,\
    \ maximum(numbers[i:i+length(numbers)]))\n    end\n    \n    return rolling_max_list\n\
    end", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
