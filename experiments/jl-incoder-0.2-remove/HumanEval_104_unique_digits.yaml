name: HumanEval_104_unique_digits
language: jl
prompt: "\"\"\"Given a list of positive integers x. return a sorted list of all \n\
  \    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted\
  \ in increasing order.\n    \n    For example:\n            \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
  \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
  \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
  \ 103, 31]) == [31, 135])\nend\n"
completions: ["    unique_digits = Set()\n    for x in x\n        if x mod 2 != 0\n\
    \            push!(unique_digits, x)\n        end\n    end\n    unique_digits\n\
    end\n\"\"\"", "    \n    unique_digits = sort(unique(x))\n    \n    unique_digits\
    \ = unique_digits[unique_digits .!= 0]\n    \n    return unique_digits\nend\n\"\
    \"\"", "    \n    unique_digits = Set()\n    for x in x\n        push!(unique_digits,\
    \ x)\n    end\n    unique_digits\nend", "    unique_digits = Vector{Int64}()\n\
    \    for i in x\n        if i mod 2 == 0\n            push!(unique_digits, i)\n\
    \        end\n    end\n    unique_digits\nend", "    \n    unique_digits = Vector{Int64}()\n\
    \    \n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    unique_digits\nend\n\"\"\"", "    \n   \
    \ unique_digits = sort(unique(x)) \n    \n    unique_digits = unique_digits[unique_digits\
    \ .> 0] \n    \n    return unique_digits\nend", "    unique_digits = Vector{Int64}()\n\
    \    for i in x\n        if i mod 2 != 0\n            push!(unique_digits, i)\n\
    \        end\n    end\n    unique_digits\nend", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    unique_digits = Set()\n    for x in x\n     \
    \   if x mod 2 != 0\n            push!(unique_digits, x)\n        end\n    end\n\
    \    unique_digits\nend\nunique_digits([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = unique_digits[unique_digits .!=\
    \ 0]\n    \n    return unique_digits\nend", "    \n    unique_digits = sort(unique(x))\
    \ \n    \n    unique_digits = unique_digits[unique_digits .!= 0]\n    \n    return\
    \ unique_digits\nend\n</cell>\n<code language=julia-1.5>\nunique_digits(x)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype unique_digits(x)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype unique_digits(x)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ unique_digits(x)\n</cell>\n<code language=julia-1.5>\n@code_warntype unique_digits(x)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype unique_digits(x)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype unique_digits(x)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype unique_digits(x)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ unique_digits(x)\n</cell>\n<code language=julia-1.5>\n@code_warntype unique_digits(x)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype unique_digits(x)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype unique_digits(x)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype unique_digits(x)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ unique_digits(x)\n</cell>\n<code language=julia-1.5>\n@code_warntype unique_digits(x)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype unique_digits(x)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype unique_digits(x)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype unique_digits(x)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ unique_digits(x)\n</cell>\n<code language=julia-1.5>\n@code_warntype unique_digits(x)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype unique_digits(x)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype unique_digits(x)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype unique_digits(x)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ unique_digits(x)\n</cell>\n<code language=julia-1.5>\n@code_warntype unique_digits(x)\n\
    </cell>\n<code language=julia-", "    unique_digits = Set()\n    for i in x\n\
    \        if i mod 2 != 0\n            push!(unique_digits, i)\n        end\n \
    \   end\n    unique_digits\nend", "    \n    unique_digits = sort(unique(x)) \n\
    \    \n    unique_digits = unique_digits[unique_digits .!= 0] \n    \n    return\
    \ unique_digits\nend\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([1,2,3])\
    \ == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3])\
    \ == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3])\
    \ == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3])\
    \ == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3])\
    \ == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3])\
    \ == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3])\
    \ == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3])\
    \ == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3])\
    \ == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3])\
    \ == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3])\
    \ == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3])\
    \ == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3])\
    \ == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3])\
    \ == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3])\
    \ == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3])\
    \ == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3])\
    \ == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3])\
    \ == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3])\
    \ == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3])\
    \ == [1,2,3]", "    unique_digits = Set()\n    for i in x\n        if i mod 2\
    \ == 0\n            push!(unique_digits, i)\n        end\n    end\n    return\
    \ unique_digits\nend", "    \n    unique_digits = Vector{Int64}()\n    \n    for\
    \ i in x\n        if i mod 2 != 0\n            push!(unique_digits, i)\n     \
    \   end\n    end\n    \n    unique_digits\nend\n\"\"\"", "    unique_digits =\
    \ Set()\n    for i in x\n        if i mod 2 == 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    unique_digits\nend", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    unique_digits = sort(unique(x)) \n    unique_digits\
    \ = unique_digits[unique_digits .> 0]\n    return unique_digits\nend\n\"\"\"\n\
    \"\"\"\n    unique_digits(x::Vector{Int64})", "    unique_digits = Set()\n   \
    \ for x in x\n        if x mod 2 != 0\n            push!(unique_digits, x)\n \
    \       end\n    end\n    unique_digits\nend\n\"\"\"", "    \n    unique_digits\
    \ = Set()\n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    unique_digits\nend", "    \n    unique_digits\
    \ = sort(unique(sort(x)))\n    \n    return unique_digits\nend\n\"\"\"", "   \
    \ \n    unique_digits = sort(unique(x)) \n    \n    unique_digits = unique_digits[unique_digits\
    \ .!= 0] \n    \n    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert unique_digits([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n@assert unique_digits([1,\
    \ 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n@assert unique_digits([1, 2, 3, 4, 5]) == [1,\
    \ 2, 3, 4, 5]\n@assert unique_digits([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n@assert\
    \ unique_digits([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n@assert unique_digits([1,\
    \ 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n@assert unique_digits([1, 2, 3, 4, 5]) == [1,\
    \ 2, 3, 4, 5]\n@assert unique_digits([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n@assert\
    \ unique_digits([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n@assert unique_digits([1,\
    \ 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n@assert unique_digits([1, 2, 3, 4, 5]) == [1,\
    \ 2, 3, 4, 5]\n@assert unique_digits([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n@assert\
    \ unique_digits([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n@assert unique_digits([1,\
    \ 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n@assert unique_digits([1, 2, 3, 4, 5]) == [1,\
    \ 2, 3, 4, 5]\n@assert unique_digits([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n@assert\
    \ unique_digits([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n@assert unique_digits([1,\
    \ 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n@assert unique_digits([1, 2, 3, 4, 5]) == [1,\
    \ 2, 3, 4, 5]\n@assert unique_digits([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n@assert\
    \ unique_digits([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n@assert unique_digits([1,\
    \ 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n@assert unique_digits([1, 2, 3, 4, 5]) == [1,\
    \ 2, 3, 4, 5]\n@assert unique_digits([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n@assert\
    \ unique_digits([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n@assert unique_digits([1,\
    \ 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n@assert unique_digits([1, 2, 3, 4, 5]) == [1,\
    \ 2, 3, 4, 5]\n@assert unique_digits([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n@assert\
    \ unique_digits([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n@assert unique_digits([1,\
    \ 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n@assert unique_digits([1, 2, 3, 4, 5]) == [1,\
    \ 2, 3, 4, 5]\n@assert unique_digits([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n@assert\
    \ unique_digits([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n@assert unique_digits([1,\
    \ 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n@assert unique_digits([1, 2, 3, 4, 5]) == [1,\
    \ 2, 3, 4, 5]\n@assert unique_digits([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    unique_digits =\
    \ Vector{Int64}()\n    for x in x\n        if x % 2 == 0\n            push!(unique_digits,\
    \ x)\n        end\n    end\n    unique_digits\nend", "    unique_digits = Set()\n\
    \    for i in x\n        unique_digits += findall(x->x%10==0, i)\n    end\n  \
    \  unique_digits\nend\nunique_digits([1,2,3,4,5,6,7,8,9])\n\"\"\"", "    unique_digits\
    \ = sort(unique(x)) \n    unique_digits = unique_digits[unique_digits .!= 0]\n\
    \    return unique_digits\nend", "    \n    unique_digits = Vector{Int64}()\n\
    \    \n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    return unique_digits\nend\n\"\"\"", "  \
    \  unique_digits = Vector{Int64}()\n    for i in x\n        if i mod 2 != 0\n\
    \            push!(unique_digits, i)\n        end\n    end\n    unique_digits\n\
    end\nunique_digits([1,2,3,4,5,6,7,8,9])\n\"\"\"", "    unique_digits = Set()\n\
    \    for x in x\n        if x % 2 == 0\n            push!(unique_digits, x)\n\
    \        end\n    end\n    unique_digits\nend", "    \n    unique_digits = Vector{Int64}()\n\
    \    \n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    unique_digits\nend\n\"\"\"", "    \n   \
    \ unique_digits = Set()\n    for x in x\n        if x mod 2 == 0\n           \
    \ push!(unique_digits, x)\n        end\n    end\n    unique_digits\nend", "  \
    \  \n    unique_digits = Set()\n    for x in x\n        if x mod 2 == 0\n    \
    \        push!(unique_digits, x)\n        end\n    end\n    unique_digits\nend\n\
    unique_digits(Vector{Int64}([1,2,3,4,5,6,7,8,9]))\n\"\"\"", "    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    return unique_digits\nend\n\"\"\"", "    \n  \
    \  unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 !=\
    \ 0\n            push!(unique_digits, i)\n        end\n    end\n    \n    unique_digits\n\
    end\n\"\"\"", "    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique_digits) \n    \n    unique_digits = sort(unique_digits) \n   \
    \ \n    unique_digits\nend", "    unique_digits = Set()\n    for i in x\n    \
    \    if i mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n\
    \    return unique_digits\nend\n\"\"\"\n    ", "    \n    unique_digits = Vector{Int64}()\n\
    \    \n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    return unique_digits\nend\n\"\"\"\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype unique_digits(1:10)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype unique_digits(1:10)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype unique_digits(1:10)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ unique_digits(1:10)\n</cell>\n<code language=julia-1.5>\n@code_warntype unique_digits(1:10)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype unique_digits(1:10)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype unique_digits(1:10)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype unique_digits(1:10)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype unique_digits(1:10)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ unique_digits(1:10)\n</cell>\n<code language=julia-1.5>\n@code_warntype unique_digits(1:10)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype unique_digits(1:10)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype unique_digits(1:10)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype unique_digits(1:10)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype unique_digits(1:10)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ unique_digits(1:10)\n</cell>\n<code language=julia-1.5>\n@code_warntype unique_digits(1:10)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype unique_digits(1:10)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype unique_digits(1:10)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype unique_digits(1:10)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype unique_digits(1:10)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ unique_digits(1:10)\n</cell>\n<code language=julia-1.5>\n@code_warntype unique_digits(1:10)\n\
    </cell>\n<code language=", "    \n    unique_digits = Set()\n    \n    for x in\
    \ x\n        if x mod 2 != 0\n            push!(unique_digits, x)\n        end\n\
    \    end\n    \n    unique_digits\nend\n\"\"\"", "    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    unique_digits = sort(unique(x)) \n\
    \    \n    unique_digits = sort(unique_digits) \n    \n    unique_digits = sort(unique_digits)\
    \ \n    \n    unique_digits = sort(unique_digits) \n    \n    unique_digits =\
    \ sort(unique_digits) \n    \n    unique_digits = sort(unique_digits) \n    \n\
    \    unique_digits = sort(unique_digits) \n    \n    unique_digits = sort(unique_digits)\
    \ \n    \n    unique_digits = sort(unique_digits) \n    \n    unique_digits =\
    \ sort(unique_digits) \n    \n    unique_digits = sort(unique_digits) \n    \n\
    \    unique_digits = sort(unique_digits) \n    \n    unique_digits = sort(unique_digits)\
    \ \n    \n    unique_digits = sort(unique_digits) \n    \n    unique_digits =\
    \ sort(unique_digits) \n    \n    unique_digits = sort(unique_digits) \n    \n\
    \    unique_digits = sort(unique_digits) \n    \n    unique_digits = sort(unique_digits)\
    \ \n    \n    unique_digits = sort(unique_digits) \n    \n    unique_digits =\
    \ sort(unique_digits) \n    \n    unique_digits = sort(unique_digits) \n    \n\
    \    unique_digits = sort(unique_digits) \n    \n    unique_digits = sort(unique_digits)\
    \ \n    \n    unique_digits = sort(unique_digits) \n    \n    unique_digits =\
    \ sort(unique_digits) \n    \n    unique_digits = sort(unique_digits) \n    \n\
    \    unique_digits = sort(unique_digits) \n    \n    unique_digits = sort(unique_digits)\
    \ \n    \n    unique_digits = sort(unique_digits) \n    \n    unique_digits =\
    \ sort(unique_digits) \n    \n    unique_digits = sort(unique_digits) \n    \n\
    \    unique_digits = sort(unique_digits) \n    \n    unique_digits = sort(unique_digits)\
    \ \n    \n    unique_digits = sort(unique_digits) \n    \n    unique_digits =\
    \ sort(unique_digits) \n    \n    unique_digits = sort(unique_digits) \n    \n\
    \    unique_digits = sort(unique_digits) \n    \n    unique_digits = sort(unique_digits)\
    \ \n    \n    unique_digits = sort(unique_digits) \n    \n    unique_digits =\
    \ sort(unique_digits) \n    \n    unique_digits = sort(unique_digits) \n    \n\
    \    unique_digits = sort(unique_digits) \n    \n    unique_digits = sort(unique_digits)\
    \ \n    \n    unique_digits = sort(unique_digits) \n    \n    unique_digits =\
    \ sort(unique_digits) \n    \n    unique_digits = sort(unique_digits) \n    \n\
    \    unique_digits = ", "    \n    unique_digits = sort(unique(sort(x)))\n   \
    \ \n    return unique_digits\nend\n\"\"\"", "    \n    unique_digits = Vector{Int64}()\n\
    \    \n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    unique_digits\nend", "    unique_digits\
    \ = Set()\n    for x in x\n        if x % 2 == 0\n            push!(unique_digits,\
    \ x)\n        end\n    end\n    unique_digits\nend", "    unique_digits = Set()\n\
    \    for x in x\n        if x mod 2 != 0\n            push!(unique_digits, x)\n\
    \        end\n    end\n    unique_digits\nend\nunique_digits([1,2,3,4,5,6,7,8,9,0])\n\
    \"\"\"", "    unique_digits = Vector{Int64}()\n    for i in x\n        if i mod\
    \ 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    unique_digits\n\
    end", "    unique_digits = Set()\n    for x in x\n        if x mod 2 != 0\n  \
    \          push!(unique_digits, x)\n        end\n    end\n    unique_digits\n\
    end\nunique_digits([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255])\n\
    </cell>\n<text>\nExercise 4\nWrite a function that ", "    \n    unique_digits\
    \ = Set()\n    for x in x\n        unique_digits += findall(x->x%10==0, x)\n \
    \   end\n    unique_digits\nend\n\"\"\"", "    unique_digits = Vector{Int64}()\n\
    \    for i in x\n        if i mod 2 == 0\n            push!(unique_digits, i)\n\
    \        end\n    end\n    unique_digits\nend\n\"\"\"", "    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 == 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    return unique_digits\n\
    end\n\"\"\"", "    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = unique_digits[unique_digits .!= 0] \n    \n    return unique_digits\nend",
  "    unique_digits = sort(unique(x)) \n    unique_digits = unique_digits[unique_digits\
    \ .!= 0]\n    return unique_digits\nend", "    unique_digits = Set()\n    for\
    \ i in x\n        if i mod 2 != 0\n            push!(unique_digits, i)\n     \
    \   end\n    end\n    unique_digits\nend", "    unique_digits = Set()\n    for\
    \ x in x\n        if x mod 2 != 0\n            push!(unique_digits, x)\n     \
    \   end\n    end\n    return unique_digits\nend\nunique_digits([1,2,3,4,5,6,7,8,9])\n\
    \"\"\"", "    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n  \
    \      if i mod 2 != 0\n            push!(unique_digits, i)\n        end\n   \
    \ end\n    \n    return unique_digits\nend", "    \n    unique_digits = Vector{Int64}()\n\
    \    \n    for i in x\n        if i mod 2 == 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    return unique_digits\nend", "    unique_digits\
    \ = sort(unique(x)) \n    unique_digits = unique_digits[unique_digits .!= 0] \n\
    \    return unique_digits\nend\n\"\"\"", "    \n    unique_digits = sort(unique(x))\
    \ \n    \n    unique_digits = unique_digits[unique_digits .!= 0]\n    \n    return\
    \ unique_digits\nend", "    \n    unique_digits = sort(unique(x))\n    \n    unique_digits\
    \ = sort(unique(x[x .> 0]))\n    \n    unique_digits = sort(unique(x[x .<= 0]))\n\
    \    \n    unique_digits\nend\n\"\"\"", "    \n    unique_digits = Vector{Int64}()\n\
    \    \n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    return unique_digits\nend", "    \n    unique_digits\
    \ = Set()\n    \n    for x in x\n        if x % 2 == 0\n            push!(unique_digits,\
    \ x)\n        end\n    end\n    \n    unique_digits\nend\n\"\"\"", "    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    unique_digits =\
    \ sort(unique(x)) \n    \n    unique_digits = unique_digits[unique_digits .!=\
    \ 0] \n    \n    return unique_digits\nend", "    unique_digits = Vector{Int64}()\n\
    \    for i in x\n        if i mod 2 != 0\n            push!(unique_digits, i)\n\
    \        end\n    end\n    unique_digits\nend\n    \"\"\"\n    unique_digits =\
    \ Vector{Int64}()\n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    unique_digits\nend", "    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = unique_digits[unique_digits .!=\
    \ 0] \n    \n    return unique_digits\nend\n\"\"\"\n    ", "    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 != 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    unique_digits\nend\n\
    \"\"\"", "    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n  \
    \      if i mod 2 == 0\n            push!(unique_digits, i)\n        end\n   \
    \ end\n    \n    unique_digits\nend\n\"\"\"", "    \n    unique_digits = sort(unique(x))\
    \ \n    \n    return unique_digits\nend\n\"\"\"", "    unique_digits = Vector{Int64}()\n\
    \    for i in x\n        if i mod 2 == 0\n            push!(unique_digits, i)\n\
    \        end\n    end\n    unique_digits\nend\n\"\"\"", "    \n    unique_digits\
    \ = Set()\n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    unique_digits\nend\n\"\"\"", "    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = unique_digits[unique_digits .>\
    \ 0]\n    \n    return unique_digits\nend", "    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    unique_digits = Vector{Int64}()\n    \n\
    \    for i in x \n        if i mod 2 == 0 \n            push!(unique_digits, i)\
    \ \n        end\n    end\n    \n    unique_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    unique_digits([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\nExercise 2", "    \n \
    \   unique_digits = sort(unique(x)) \n    \n    unique_digits = unique_digits[unique_digits\
    \ .!= 0]\n    \n    return unique_digits\nend", "    unique_digits = Set()\n \
    \   for i in x\n        if i mod 2 != 0\n            push!(unique_digits, i)\n\
    \        end\n    end\n    return unique_digits\nend", "    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = unique_digits[unique_digits .>\
    \ 0]\n    \n    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    @time unique_digits(rand(1:100))\n</cell>\n<text>\nExercise 2\nGiven a list of\
    \ positive integers x. return a sorted list of all \n    elements that hasn't\
    \ any odd digit.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i mod\
    \ 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n  \
    \  return unique_digits\nend", "    unique_digits = sort(unique(x)) \n    unique_digits\
    \ = unique_digits[unique_digits .!= 0]\n    return unique_digits\nend\n\"\"\"",
  "    \n    unique_digits = Set()\n    for x in x\n        if x mod 2 != 0\n    \
    \        push!(unique_digits, x)\n        end\n    end\n    unique_digits\nend",
  "    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i mod\
    \ 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n  \
    \  return unique_digits\nend\n\"\"\"", "    \n    unique_digits = Vector{Int64}()\n\
    \    \n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    return unique_digits\nend\n\"\"\"\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype unique_digits(Vector{Int64}([1,2,3,4,5,6,7,8,9]))\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype unique_digits(Vector{Int64}([1,2,3,4,5,6,7,8,9,0]))\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype unique_digits(Vector{Int64}([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214",
  "    unique_digits = Set()\n    for i in x\n        if i mod 2 != 0\n          \
    \  push!(unique_digits, i)\n        end\n    end\n    unique_digits\nend\n\"\"\
    \"", "    unique_digits = Vector{Int64}()\n    for i in x\n        if i mod 2\
    \ != 0\n            push!(unique_digits, i)\n        end\n    end\n    unique_digits\n\
    end", "    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits = unique_digits[unique_digits\
    \ .!= 0]\n    \n    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3,4,5])\
    \ == [1,2,3,4,5]\n@assert unique_digits([1,2,3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9,10]\n\
    @assert unique_digits([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\n\
    @assert unique_digits([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]==[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,7",
  "    unique_digits = Set()\n    for i in x\n        if i mod 2 != 0\n          \
    \  push!(unique_digits, i)\n        end\n    end\n    unique_digits\nend", " \
    \   unique_digits = Vector{Int64}()\n    for i in x\n        if i mod 2 != 0\n\
    \            push!(unique_digits, i)\n        end\n    end\n    unique_digits\n\
    end", "    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits = unique_digits[unique_digits\
    \ .> 0] \n    \n    unique_digits\nend", "    unique_digits = Set()\n    for i\
    \ in x\n        if i mod 2 != 0\n            push!(unique_digits, i)\n       \
    \ end\n    end\n    return unique_digits\nend\n\"\"\"\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
  "    unique_digits = Set()\n    for i in x\n        if i mod 2 != 0\n          \
    \  push!(unique_digits, i)\n        end\n    end\n    unique_digits\nend", " \
    \   unique_digits = Set()\n    for i in x\n        unique_digits.add(i)\n    end\n\
    \    unique_digits\nend\n    \"\"\"\n    unique_digits = Set()\n    for i in x\n\
    \        unique_digits.add(i)\n    end\n    unique_digits\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    unique_digits = Vector{Int64}()\n    \n   \
    \ for i in x\n        if i mod 2 == 0\n            push!(unique_digits, i)\n \
    \       end\n    end\n    \n    return unique_digits\nend", "    \n    unique_digits\
    \ = sort(unique(x))\n    \n    return unique_digits\nend\n\"\"\"", "    \n   \
    \ unique_digits = sort(unique(x)) \n    \n    unique_digits = unique_digits[unique_digits\
    \ .!= 0]\n    \n    return unique_digits\nend\n\"\"\"", "    \n    unique_digits\
    \ = sort(unique(x))\n    \n    unique_digits = unique_digits[unique_digits .!=\
    \ 0]\n    \n    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert unique_digits([1,2,3,4,5,6,7,8,9,0]) == [1,2,3,4,5,6,7,8,9]\n@assert unique_digits([1,2,3,4,5,6,7,8,9,0])\
    \ == [1,2,3,4,5,6,7,8,9]\n@assert unique_digits([1,2,3,4,5,6,7,8,9,0]) == [1,2,3,4,5,6,7,8,9]\n\
    @assert unique_digits([1,2,3,4,5,6,7,8,9,0]) == [1,2,3,4,5,6,7,8,9]\n@assert unique_digits([1,2,3,4,5,6,7,8,9,0])\
    \ == [1,2,3,4,5,6,7,8,9]\n@assert unique_digits([1,2,3,4,5,6,7,8,9,0]) == [1,2,3,4,5,6,7,8,9]\n\
    @assert unique_digits([1,2,3,4,5,6,7,8,9,0]) == [1,2,3,4,5,6,7,8,9]\n@assert unique_digits([1,2,3,4,5,6,7,8,9,0])\
    \ == [1,2,3,4,5,6,7,8,9]\n@assert unique_digits([1,2,3,4,5,6,7,8,9,0]) == [1,2,3,4,5,6,7,8,9]\n\
    @assert unique_digits([1,2,3,4,5,6,7,8,9,0]) == [1,2,3,4,5,6,7,8,9]\n@assert unique_digits([1,2,3,4,5,6,7,8,9,0])\
    \ == [1,2,3,4,5,6,7,8,9]\n@assert unique_digits([1,2,3,4,5,6,7,8,9,0]) == [1,2,3,4,5,6,7,8,9]\n\
    @assert unique_digits([1,2,3,4,5,6,7,8,9,0]) == [1,2,3,4,5,6,7,8,9]\n@assert unique_digits([1,2,3,4,5,6,7,8,9,0])\
    \ == [1,2,3,4,5,6,7,8,9]\n@assert unique_digits([1,2,3,4,5,6,7,8,9,0]) == [1,2,3,4,5,6,7,8,9]\n\
    @assert unique_digits([1,2,3,4,5,6,7,8,9,0]) == [1,2,3,4,5,6,7,8,9]\n@assert unique_digits([1,2,3,4,5,6,7,8,9,0])\
    \ == [1,2,3,4,5,6,7,8,9]\n@assert unique_digits([1,2,3,4,5,6,7,8,9,0]) == [1,2,3,4,5,6,7,8,9]\n\
    @assert unique_digits([1,2,3,4,5,6,7,8,9,0]) == [1,2,3,4,5,6,7,8,9]\n@assert unique_digits([1,2,3,4,5,6,7,8,9,0])\
    \ == [1,2,3,4,5,6,7,8,9]\n@assert unique_digits([1,2,3,4,5,6,", "    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = unique_digits[unique_digits .!=\
    \ 0]\n    \n    return unique_digits\nend", "    unique_digits = Vector{Int64}()\n\
    \    for x in x\n        if x % 2 == 0\n            push!(unique_digits, x)\n\
    \        end\n    end\n    unique_digits\nend\n    \"\"\"\n    unique_digits =\
    \ Vector{Int64}()\n    for x in x\n        if x % 2 == 0\n            push!(unique_digits,\
    \ x)\n        end\n    end\n    unique_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype unique_digits(Vector{Int64}([1,2,3,4,5,6,7,8,9]))\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of digits in an integer.",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    unique_digits =\
    \ Set()\n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    unique_digits\nend", "    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 != 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    return unique_digits\n\
    end\n\"\"\"\n\"\"\"\n    unique_digits(x::Vector{Int64})::Vector{Int64} \n   \
    \ \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i mod\
    \ 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n  \
    \  return unique_digits\nend\n\"\"\"\n\"\"\"\n    unique_digits(x::Vector{Int64})::Vector{Int64}\
    \ \n    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if\
    \ i mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n  \
    \  \n    return unique_digits\nend\n\"\"\"\n\"\"\"\n    unique_digits(x::Vector{Int64})::Vector{Int64}\
    \ \n    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if\
    \ i mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n  \
    \  \n    return unique_digits\nend\n\"\"\"\n\"\"\"\n    unique_digits(x::Vector{Int64})::Vector{Int64}\
    \ \n    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if\
    \ i mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n  \
    \  \n    return unique_digits\nend\n\"\"\"\n\"\"\"\n    unique_digits(x::Vector{Int64})::Vector{Int64}\
    \ \n    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if\
    \ i mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n  \
    \  \n    return unique_digits\nend\n\"\"\"\n\"\"\"\n    unique_digits(x::Vector{Int64})::Vector{Int64}\
    \ \n    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if\
    \ i mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n  \
    \  \n    return unique_digits\nend\n\"\"\"\n\"\"\"\n    unique_digits(x::Vector{Int64})::Vector{Int64}\
    \ \n    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if\
    \ i mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end", " \
    \   unique_digits = Set()\n    for x in x\n        if x mod 2 == 0\n         \
    \   push!(unique_digits, x)\n        end\n    end\n    unique_digits\nend", " \
    \   \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend", "    unique_digits = Set()\n    for i in x\n\
    \        unique_digits += findall(x->x%10==0, i)\n    end\n    unique_digits\n\
    end", "    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits = unique_digits[unique_digits\
    \ .!= 0]\n    \n    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    @time unique_digits(x)\n</cell>\n<text>\nExercise 2\nWrite a function that given\
    \ a list of positive integers x. return a sorted list of all \n    elements that\
    \ hasn't any odd digit.", "    \n    unique_digits = Vector{Int64}()\n    \n \
    \   for i in x\n        if i mod 2 == 0\n            push!(unique_digits, i)\n\
    \        end\n    end\n    \n    return unique_digits\nend", "    unique_digits\
    \ = Set()\n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    unique_digits\nend", "    unique_digits = Set()\n\
    \    for i in x\n        if i mod 2 != 0\n            push!(unique_digits, i)\n\
    \        end\n    end\n    return unique_digits\nend", "    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = unique_digits[unique_digits .!=\
    \ 0]\n    \n    return unique_digits\nend\n\"\"\"", "    \n    unique_digits =\
    \ sort(unique(x)) \n    \n    unique_digits = unique_digits[unique_digits .!=\
    \ 0] \n    \n    return unique_digits\nend", "    unique_digits = Set()\n    for\
    \ i in x\n        if i mod 2 != 0\n            push!(unique_digits, i)\n     \
    \   end\n    end\n    unique_digits\nend", "    \n    unique_digits = Set()\n\
    \    \n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    return unique_digits\nend", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    unique_digits = Vector{Int64}()\n\
    \    for i in x\n        if i mod 2 == 0\n            push!(unique_digits, i)\n\
    \        end\n    end\n    unique_digits\nend\n\"\"\"", "    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 != 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    return unique_digits\n\
    end\n\"\"\"", "    unique_digits = Set()\n    for x in x\n        if x mod 2 !=\
    \ 0\n            push!(unique_digits, x)\n        end\n    end\n    return unique_digits\n\
    end\nunique_digits([1,2,3,4,5,6,7,8,9,10])\n\"\"\"", "    unique_digits = Vector{Int64}()\n\
    \    for i in x\n        if i mod 2 == 0\n            push!(unique_digits, i)\n\
    \        end\n    end\n    unique_digits\nend", "    unique_digits = Set()\n \
    \   for x in x\n        if x mod 2 == 0\n            push!(unique_digits, x)\n\
    \        end\n    end\n    return unique_digits\nend\nunique_digits([1,2,3,4,5,6,7,8,9,10])\n\
    \"\"\"", "    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n  \
    \      if i mod 2 == 0\n            push!(unique_digits, i)\n        end\n   \
    \ end\n    \n    unique_digits\nend", "    \n    unique_digits = sort(unique(x))\
    \ \n    \n    unique_digits = unique_digits[unique_digits .!= 0]\n    \n    return\
    \ unique_digits\nend\n\"\"\"", "    \n    unique_digits = sort(unique(sort(x)))\n\
    \    \n    return unique_digits\nend", "    unique_digits = Set()\n    for x in\
    \ x\n        if x mod 2 != 0\n            push!(unique_digits, x)\n        end\n\
    \    end\n    return unique_digits\nend\n\"\"\"", "    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    unique_digits = Vector{Int64}()\n\
    \    \n    for i in x\n        if i mod 2 == 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    unique_digits\nend\n\"\"\"", "    unique_digits\
    \ = Set()\n    for x in x\n        unique_digits = union(unique_digits,digits(x))\n\
    \    end\n    unique_digits\nend\n\"\"\"\n\"\"\"\n    unique_digits(x::Vector{Int64})\
    \ = sort(unique(digits(x)))\n\"\"\"\n\"\"\"\n    unique_digits(x::Vector{Int64})\
    \ = sort(unique(digits(x)))\n\"\"\"\n\"\"\"\n    unique_digits(x::Vector{Int64})\
    \ = sort(unique(digits(x)))\n\"\"\"\n\"\"\"\n    unique_digits(x::Vector{Int64})\
    \ = sort(unique(digits(x)))\n\"\"\"\n\"\"\"\n    unique_digits(x::Vector{Int64})\
    \ = sort(unique(digits(x)))\n\"\"\"\n\"\"\"\n    unique_digits(x::Vector{Int64})\
    \ = sort(unique(digits(x)))\n\"\"\"\n\"\"\"\n    unique_digits(x::Vector{Int64})\
    \ = sort(unique(digits(x)))\n\"\"\"\n\"\"\"\n    unique_digits(x::Vector{Int64})\
    \ = sort(unique(digits(x)))\n\"\"\"\n\"\"\"\n    unique_digits(x::Vector{Int64})\
    \ = sort(unique(digits(x)))\n\"\"\"\n\"\"\"\n    unique_digits(x::Vector{Int64})\
    \ = sort(unique(digits(x)))\n\"\"\"\n\"\"\"\n    unique_digits(x::Vector{Int64})\
    \ = sort(unique(digits(x)))\n\"\"\"\n\"\"\"\n    unique_digits(x::Vector{Int64})\
    \ = sort(unique(digits(x)))\n\"\"\"\n\"\"\"\n    unique_digits(x::Vector{Int64})\
    \ = sort(unique(digits(x)))\n\"\"\"\n\"\"\"\n    unique_digits(x::Vector{Int64})\
    \ = sort(unique(digits(x)))\n\"\"\"\n\"\"\"\n    unique_digits(x::Vector{Int64})\
    \ = sort(unique(digits(x)))\n\"\"\"\n\"\"\"\n    unique_digits(x::Vector{Int64})\
    \ = sort(unique(digits(x)))\n\"\"\"\n\"\"\"\n    unique_digits(x::Vector{Int64})\
    \ = sort(unique(digits(x)))\n\"\"\"\n\"\"\"\n    unique_digits(x::Vector{Int64})\
    \ = sort(unique(digits(x)))\n\"\"\"\n\"\"\"\n    unique_digits(x::Vector{Int64})\
    \ = sort(unique(digits(x)))\n\"\"\"\n\"\"\"\n    unique_digits(x::Vector{Int64})\
    \ = sort(unique(digits(x)))\n\"\"\"\n\"\"\"\n    unique_digits(x::Vector{Int64})\
    \ = sort(unique(digits(x", "    unique_digits = Set()\n    for i in x\n      \
    \  if i mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n\
    \    unique_digits\nend\nunique_digits([1,2,3,4,5,6,7,8,9,10])\n\"\"\"", "   \
    \ unique_digits = Set()\n    for i in x\n        if i mod 2 == 0\n           \
    \ push!(unique_digits, i)\n        end\n    end\n    unique_digits\nend", "  \
    \  unique_digits = Set()\n    for x in x\n        if x mod 2 != 0\n          \
    \  push!(unique_digits, x)\n        end\n    end\n    unique_digits\nend\n\"\"\
    \"", "    \n    unique_digits = Set()\n    \n    for i in x\n        if i mod\
    \ 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n  \
    \  unique_digits\nend\n\"\"\"", "    \n    unique_digits = Vector{Int64}()\n \
    \   \n    for i in x\n        if i mod 2 == 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    unique_digits\nend", "    unique_digits\
    \ = Set()\n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    unique_digits\nend", "    unique_digits = sort(unique(x))\
    \ \n    unique_digits = unique_digits[unique_digits .!= 0]\n    return unique_digits\n\
    end", "    unique_digits = Set()\n    for i in x\n        if i mod 2 != 0\n  \
    \          push!(unique_digits, i)\n        end\n    end\n    return unique_digits\n\
    end\nunique_digits(1:10)\n\"\"\"", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    unique_digits = Vector{Int64}()\n    \n    for i in\
    \ x\n        if i mod 2 != 0\n            push!(unique_digits, i)\n        end\n\
    \    end\n    \n    unique_digits\nend", "    unique_digits = Set()\n    for i\
    \ in x\n        if i mod 2 != 0\n            push!(unique_digits, i)\n       \
    \ end\n    end\n    unique_digits\nend", "    unique_digits = Vector{Int64}()\n\
    \    for i in x\n        if i mod 2 != 0\n            push!(unique_digits, i)\n\
    \        end\n    end\n    unique_digits\nend\n    \"\"\"\n    unique_digits =\
    \ Vector{Int64}()\n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    unique_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype unique_digits([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype unique_digits([1,2,3,4,5,6,7,8,9,10,11])\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype unique_digits([1,2,3,4,5,6,7,8,9,10,11,12])\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype unique_digits([1,2,3,4,5,6,7,8,9,10,11,12,13])\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype unique_digits([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype unique_digits([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype unique_digits([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype unique_digits([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype unique_digits([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype unique_digits([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype unique_digits([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype unique_digits([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype unique_digits([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    </cell>\n", "    unique_digits = Set()\n    for i in x\n        if i mod 2 !=\
    \ 0\n            push!(unique_digits, i)\n        end\n    end\n    unique_digits\n\
    end\nunique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\
    \ 18, 19, 20])\n    \n    \"\"\"\n    unique_digits = Set()\n    for i in x\n\
    \        if i mod 2 != 0\n            push!(unique_digits, i)\n        end\n \
    \   end\n    unique_digits\nend\nunique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n    \n    \"\"\"\n    unique_digits\
    \ = Set()\n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    unique_digits\nend\nunique_digits([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n    \n    \"\"\"\
    \n    unique_digits = Set()\n    for i in x\n        if i mod 2 != 0\n       \
    \     push!(unique_digits, i)\n        end\n    end\n    unique_digits\nend\n\
    unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,\
    \ 19, 20])\n    \n    \"\"\"\n    unique_digits = Set()\n    for i in x\n    \
    \    if i mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n\
    \    unique_digits\nend\nunique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15, 16, 17, 18, 19, 20])\n    \n    \"\"\"\n    unique_digits = Set()\n\
    \    for i in x\n        if i mod 2 != 0\n            push!(unique_digits, i)\n\
    \        end\n    end\n    unique_digits\nend\nunique_digits([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n    \n    \"\"\"\n  \
    \  unique_digits = Set()\n    for i in x\n        if i mod 2 != 0\n          \
    \  push!(unique_digits, i)\n        end\n    end\n    unique_digits\nend\nunique_digits([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n    \n\
    \    \"\"\"\n    unique_digits = Set()\n    for i in x\n        if i mod 2 !=\
    \ 0\n            push!(unique_digits, i)\n        end\n    end\n    unique_digits\n\
    end\nunique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\
    \ 18, 19, 20])\n    \n    \"\"\"\n    unique_digits = Set()\n    for i in x\n\
    \        if i mod 2 != 0\n            push!(unique_digits, i)\n        end\n \
    \   end\n    unique_digits\nend\nunique_digits([1, 2, 3, 4, 5, ", "    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = unique_digits[unique_digits .!=\
    \ 0]\n    \n    return unique_digits\nend\n</cell>\n<code language=julia-1.0>\n\
    @assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n\
    @assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n\
    @assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n\
    @assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n\
    @assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n\
    @assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n\
    @assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n\
    @assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n\
    @assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n\
    @assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n\
    @assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n\
    @assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n\
    @assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n\
    @assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n\
    @assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n\
    @assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n\
    @assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n\
    @assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n\
    @assert unique_digits([1,2,3]) == [1,2,3]\n@assert unique_digits([1,2,3]) == [1,2,3]\n\
    @assert unique_digits([1,2,3]) == [1,2,3]\n", "    \n    unique_digits = sort(unique(x))\
    \ \n    \n    unique_digits = unique_digits[unique_digits .!= 0]\n    \n    return\
    \ unique_digits\nend\n</cell>\n<code language=julia-1.5>\n@time unique_digits(x)\n\
    </cell>\n<text>\nProblem 3\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any odd digit.", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    unique_digits = Vector{Int64}()\n\
    \    \n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    unique_digits\nend", "    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    return\
    \ unique_digits\nend", "    unique_digits = Set()\n    for i in x\n        if\
    \ i mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n  \
    \  return unique_digits\nend", "    \n    unique_digits = sort(unique(x)) \n \
    \   \n    unique_digits = unique_digits[unique_digits .!= 0]\n    \n    return\
    \ unique_digits\nend\n\"\"\"\n    ", "    unique_digits = sort(unique(x)) \n \
    \   unique_digits = unique_digits[unique_digits .!= 0]\n    return unique_digits\n\
    end\n\"\"\"", "    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n\
    \        if i mod 2 != 0\n            push!(unique_digits, i)\n        end\n \
    \   end\n    \n    unique_digits\nend\n\"\"\"", "    unique_digits = Vector{Int64}()\n\
    \    for i in x\n        if i mod 2 != 0\n            push!(unique_digits, i)\n\
    \        end\n    end\n    unique_digits\nend", "    unique_digits = sort(unique(x))\
    \ \n    unique_digits = unique_digits[unique_digits .!= 0]\n    return unique_digits\n\
    end\n\"\"\"", "    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n\
    \        if i mod 2 == 0\n            push!(unique_digits, i)\n        end\n \
    \   end\n    \n    unique_digits\nend", "    unique_digits = Set()\n    for x\
    \ in x\n        if x mod 2 != 0\n            push!(unique_digits, x)\n       \
    \ end\n    end\n    unique_digits\nend\nunique_digits([1, 2, 3, 6, 9, 10, 11,\
    \ 14, 15, 16, 17, 18, 19, 20])\n\"\"\"", "    unique_digits = sort(unique(x))\
    \ \n    unique_digits = unique_digits[unique_digits .!= 0] \n    return unique_digits\n\
    end\n\"\"\"", "    unique_digits = Vector{Int64}()\n    for i in x\n        if\
    \ i mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n  \
    \  unique_digits\nend\n\"\"\"", "    unique_digits = Set()\n    for i in x\n \
    \       if i mod 2 != 0\n            push!(unique_digits, i)\n        end\n  \
    \  end\n    unique_digits\nend", "    unique_digits = Set{Int64}()\n    for x\
    \ in x\n        if x mod 2 == 0\n            push!(unique_digits, x)\n       \
    \ end\n    end\n    unique_digits\nend\nunique_digits([1,2,3,4,5,6,7,8,9,10])\n\
    \"\"\"", "    unique_digits = Set()\n    for x in x\n        if x mod 2 == 0\n\
    \            push!(unique_digits, x)\n        end\n    end\n    unique_digits\n\
    end\n\"\"\"", "    \n    unique_digits = Set()\n    \n    for i in x\n       \
    \ push!(unique_digits, i)\n    end\n    \n    unique_digits\nend", "    unique_digits\
    \ = Set()\n    for x in x\n        if x mod 2 == 0\n            push!(unique_digits,\
    \ x)\n        end\n    end\n    unique_digits\nend\n\"\"\"", "    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    unique_digits = Set{Int64}()\n\
    \    for i in x\n        if !iszero(i)\n            unique_digits.add(i)\n   \
    \     end\n    end\n    unique_digits\nend", "    unique_digits = Set()\n    for\
    \ n in x\n        if n mod 2 != 0\n            push!(unique_digits, n)\n     \
    \   end\n    end\n    unique_digits\nend\n\"\"\"", "    \n    unique_digits =\
    \ Set()\n    for x in x\n        if x % 2 == 0\n            push!(unique_digits,\
    \ x)\n        end\n    end\n    unique_digits\nend", "    unique_digits = Set()\n\
    \    for i in x\n        if i mod 2 != 0\n            push!(unique_digits, i)\n\
    \        end\n    end\n    unique_digits\nend\n    \"\"\"\n    unique_digits =\
    \ Set()\n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    unique_digits\nend\n</cell>\n<code language=julia-1.0>\n\
    unique_digits([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.0>\nunique_digits([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,22",
  "    unique_digits = Set()\n    for i in x\n        if i mod 2 != 0\n          \
    \  push!(unique_digits, i)\n        end\n    end\n    unique_digits\nend\n\"\"\
    \"", "    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n      \
    \  if i mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n\
    \    \n    unique_digits\nend\n\"\"\"", "    \n    unique_digits = Vector{Int64}()\n\
    \    \n    for i in x\n        if i mod 2 == 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    unique_digits\nend\n\"\"\"", "    \n   \
    \ unique_digits = Set()\n    for x in x\n        if x mod 2 != 0\n           \
    \ push!(unique_digits, x)\n        end\n    end\n    unique_digits\nend\n    \"\
    \"\"\n    unique_digits = Set()\n    for x in x\n        if x mod 2 != 0\n   \
    \         push!(unique_digits, x)\n        end\n    end\n    unique_digits\nend\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype unique_digits(1:10)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype unique_digits(1:10)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype unique_digits(1:10)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype unique_digits(1:10)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ unique_digits(1:10)\n</cell>\n<code language=julia-1.5>\n@code_warntype unique_digits(1:10)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype unique_digits(1:10)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype unique_digits(1:10)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype unique_digits(1:10)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype unique_digits(1:10)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ unique_digits(1:10)\n</cell>\n<code language=julia-1.5>\n@code_warntype unique_digits(1:10)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype unique_digits(1:10)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype unique_digits(1:10)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype unique_digits(1:10)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype unique_digits(1:10)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ unique_digits(1:10)\n</cell>\n<code language=julia-1.5>\n@code_warntype unique_digits(1:10)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype unique_digits(1:10)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype unique_digits(1:10)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype unique_digits(1:10)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype unique_digit", "    unique_digits = Set()\n    for x in x\n   \
    \     if x mod 2 != 0\n            push!(unique_digits, x)\n        end\n    end\n\
    \    unique_digits\nend\n\"\"\"", "    \n    unique_digits = Set()\n    for i\
    \ in x\n        if i mod 2 != 0\n            push!(unique_digits, i)\n       \
    \ end\n    end\n    unique_digits\nend\n\"\"\"", "    unique_digits = Set()\n\
    \    for n in x\n        if n % 2 == 0\n            push!(unique_digits, n)\n\
    \        end\n    end\n    unique_digits\nend\nunique_digits([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9])\n\"\"\"", "    \n    unique_digits = Vector{Int64}()\n    \n    for\
    \ i in x\n        if i mod 2 == 0\n            push!(unique_digits, i)\n     \
    \   end\n    end\n    \n    unique_digits\nend\n\"\"\"", "    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = unique_digits[unique_digits .!=\
    \ 0]\n    \n    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert unique_digits([1,2,3,4,5,6,7,8,9,0]) == [1,2,3,4,5,6,7,8,9]\n</cell>\n\
    <code language=julia-1.5>\n@assert unique_digits([1,2,3,4,5,6,7,8,9,0]) == [1,2,3,4,5,6,7,8,9]\n\
    </cell>\n<code language=julia-1.5>\n@assert unique_digits([1,2,3,4,5,6,7,8,9,0])\
    \ == [1,2,3,4,5,6,7,8,9]\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([1,2,3,4,5,6,7,8,9,0])\
    \ == [1,2,3,4,5,6,7,8,9]\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([1,2,3,4,5,6,7,8,9,0])\
    \ == [1,2,3,4,5,6,7,8,9]\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([1,2,3,4,5,6,7,8,9,0])\
    \ == [1,2,3,4,5,6,7,8,9]\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([1,2,3,4,5,6,7,8,9,0])\
    \ == [1,2,3,4,5,6,7,8,9]\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([1,2,3,4,5,6,7,8,9,0])\
    \ == [1,2,3,4,5,6,7,8,9]\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([1,2,3,4,5,6,7,8,9,0])\
    \ == [1,2,3,4,5,6,7,8,9]\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([1,2,3,4,5,6,7,8,9,0])\
    \ == [1,2,3,4,5,6,7,8,9]\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([1,2,3,4,5,6,7,8,9,0])\
    \ == [1,2,3,4,5,6,7,8,9]\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([1,2,3,4,5,6,7,8,9,0])\
    \ == [1,2,3,4,5,6,7,8,9]\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([1,2,3,4,5,6,7,8,9,0])\
    \ == [1,2,3,4,5,6,7,8,9]\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([1,2,3,4,5,6,7,8,9,0])\
    \ == [1,2,3,4,5,6,7,8,9]\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([1,2,",
  "    unique_digits = sort(unique(x)) \n    unique_digits = unique_digits[unique_digits\
    \ .!= 0]\n    return unique_digits\nend\n    \"\"\"\n    unique_digits = sort(unique(x))\
    \ \n    unique_digits = unique_digits[unique_digits .!= 0]\n    return unique_digits\n\
    end\n</cell>\n<code language=julia-1.3>\n@time unique_digits(x)\n</cell>\n<text>\n\
    The last function can be written more efficiently using filter:", "    unique_digits\
    \ = Vector{Int64}()\n    for i in x\n        if i mod 2 == 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    return unique_digits\nend", "    unique_digits\
    \ = sort(unique(x)) \n    unique_digits = unique_digits[unique_digits .> 0]\n\
    \    return unique_digits\nend", "    \n    unique_digits = sort(unique(x)) \n\
    \    \n    unique_digits = unique_digits[unique_digits .!= 0]\n    \n    return\
    \ unique_digits\nend\n</cell>\n<code language=julia-1.0>\n@time unique_digits(x)\n\
    </cell>\n<text>\nProblem 7", "    \n    unique_digits = sort(unique(x)) \n   \
    \ \n    unique_digits = unique_digits[unique_digits .!= 0]\n    \n    return unique_digits\n\
    end", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    unique_digits\
    \ = sort(unique(x)) \n    unique_digits = unique_digits[unique_digits .!= 0] \n\
    \    \n    return unique_digits\nend", "    \n    unique_digits = sort(unique(x))\
    \ \n    \n    unique_digits = unique_digits[unique_digits .!= 0]\n    \n    return\
    \ unique_digits\nend\n</cell>\n<code language=julia-1.5>\nunique_digits([1,2,3,4,5,6,7,8,9,0])\n\
    </cell>\n<code language=julia-1.5>", "    \n    unique_digits = Set()\n    \n\
    \    for i in x\n        if i mod 2 != 0\n            push!(unique_digits, i)\n\
    \        end\n    end\n    \n    return unique_digits\nend\n\"\"\"", "    \n \
    \   unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i mod 2\
    \ != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n    return\
    \ unique_digits\nend", "    unique_digits = Set()\n    for x in x\n        if\
    \ x mod 2 != 0\n            push!(unique_digits, x)\n        end\n    end\n  \
    \  return unique_digits\nend", "    \n    unique_digits = sort(unique(x))\n  \
    \  \n    unique_digits = unique_digits[unique_digits .!= 0]\n    \n    return\
    \ unique_digits\nend\n</cell>\n<code language=julia-1.5>\nunique_digits(1:10)\n\
    </cell>\n<code language=julia-1.5>\nunique_digits(1:10)\n</cell>\n<code language=julia-1.5>\n\
    unique_digits(1:10)\n</cell>\n<code language=julia-1.5>\nunique_digits(1:10)\n\
    </cell>\n<code language=julia-1.5>\nunique_digits(1:10)\n</cell>\n<code language=julia-1.5>\n\
    unique_digits(1:10)\n</cell>\n<code language=julia-1.5>\nunique_digits(1:10)\n\
    </cell>\n<code language=julia-1.5>\nunique_digits(1:10)\n</cell>\n<code language=julia-1.5>\n\
    unique_digits(1:10)\n</cell>\n<code language=julia-1.5>\nunique_digits(1:10)\n\
    </cell>\n<code language=julia-1.5>\nunique_digits(1:10)\n</cell>\n<code language=julia-1.5>\n\
    unique_digits(1:10)\n</cell>\n<code language=julia-1.5>\nunique_digits(1:10)\n\
    </cell>\n<code language=julia-1.5>\nunique_digits(1:10)\n</cell>\n<code language=julia-1.5>\n\
    unique_digits(1:10)\n</cell>\n<code language=julia-1.5>\nunique_digits(1:10)\n\
    </cell>\n<code language=julia-1.5>\nunique_digits(1:10)\n</cell>\n<code language=julia-1.5>\n\
    unique_digits(1:10)\n</cell>\n<code language=julia-1.5>\nunique_digits(1:10)\n\
    </cell>\n<code language=julia-1.5>\nunique_digits(1:10)\n</cell>\n<code language=julia-1.5>\n\
    unique_digits(1:10)\n</cell>\n<code language=julia-1.5>\nunique_digits(1:10)\n\
    </cell>\n<code language=julia-1.5>\nunique_digits(1:10)\n</cell>\n<code language=julia-1.5>\n\
    unique_digits(1:10)\n</cell>\n<code language=julia-1.5>\nunique_digits(1:10)\n\
    </cell>\n<code language=julia-1.5>\nunique_digits(1:10)\n</cell>\n<code language=julia-1.5>\n\
    unique_digits(1:10)\n</cell>\n<code language=julia-1.5>\nunique_digits(1:10)\n\
    </cell>\n<code language=julia-1.5>\nunique_digits(1:10)\n</cell>\n<code language=julia-1.5>\n\
    unique_digits(1:10)", "    \n    unique_digits = Vector{Int64}()\n    \n    for\
    \ i in x\n        if i mod 2 != 0\n            push!(unique_digits, i)\n     \
    \   end\n    end\n    \n    return unique_digits\nend\n\"\"\"\n\"\"\"\n    unique_digits(x::Vector{Int64})",
  "    \n    unique_digits = sort(unique(sort(x)))\n    \n    return unique_digits\n\
    end\n\"\"\"", "    \n    unique_digits = Set()\n    for x in x\n        if x mod\
    \ 2 != 0\n            push!(unique_digits, x)\n        end\n    end\n    unique_digits\n\
    end", "    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits = unique_digits[unique_digits\
    \ .!= 0] \n    \n    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    @time unique_digits(rand(1:10000,1000));\n</cell>\n<code language=julia-1.5>\n\
    @time unique_digits(rand(1:10000,1000));\n</cell>\n<code language=julia-1.5>\n\
    @time unique_digits(rand(1:10000,1000));\n</cell>\n<code language=julia-1.5>\n\
    @time unique_digits(rand(1:10000,1000));\n</cell>\n<code language=julia-1.5>\n\
    @time unique_digits(rand(1:10000,1000));\n</cell>\n<code language=julia-1.5>\n\
    @time unique_digits(rand(1:10000,1000));\n</cell>\n<code language=julia-1.5>\n\
    @time unique_digits(rand(1:10000,1000));\n</cell>\n<code language=julia-1.5>\n\
    @time unique_digits(rand(1:10000,1000));\n</cell>\n<code language=julia-1.5>\n\
    @time unique_digits(rand(1:10000,1000));\n</cell>\n<code language=julia-1.5>\n\
    @time unique_digits(rand(1:10000,1000));\n</cell>\n<code language=julia-1.5>\n\
    @time unique_digits(rand(1:10000,1000));\n</cell>\n<code language=julia-1.5>\n\
    @time unique_digits(rand(1:10000,1000));\n</cell>\n<code language=julia-1.5>\n\
    @time unique_digits(rand(1:10000,1000));\n</cell>\n<code language=julia-1.5>\n\
    @time unique_digits(rand(1:10000,1000));\n</cell>\n<code language=julia-1.5>\n\
    @time unique_digits(rand(1:10000,1000));\n</cell>\n<code language=julia-1.5>\n\
    @time unique_digits(rand(1:10000,1000));\n</cell>\n<code language=julia-1.5>\n\
    @time unique_digits(rand(1:10000,1000));\n</cell>\n<code language=julia-1.5>\n\
    @time unique_digits(rand(1:10000,1000));\n</cell>\n<code language=julia-1.5>\n\
    @time unique_digits(rand(1:10000,1000));\n</cell>\n<code language=julia-1.5>\n\
    @time unique_digits(rand(1:10000,1000));\n</cell>\n<code language=julia-1.5>\n\
    @time unique_digits(rand(", "    \n    unique_digits = Vector{Int64}()\n    \n\
    \    for i in x\n        if i mod 2 == 0\n            push!(unique_digits, i)\n\
    \        end\n    end\n    \n    return unique_digits\nend", "    unique_digits\
    \ = Set()\n    for i in x\n        unique_digits += findall(x->x%10==0, i)\n \
    \   end\n    unique_digits\nend\n\"\"\"", "    \n    unique_digits = Vector{Int64}()\n\
    \    \n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    return unique_digits\nend\n\"\"\"\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    \n  \
    \  unique_digits = sort(unique(x)) \n    \n    unique_digits = sort(unique(x))\
    \ \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits = sort(unique(x))\
    \ \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits = sort(unique(x))\
    \ \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits = sort(unique(x))\
    \ \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits = sort(unique(x))\
    \ \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits = sort(unique(x))\
    \ \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits = sort(unique(x))\
    \ \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits = sort(unique(x))\
    \ \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits = sort(unique(x))\
    \ \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits = sort(unique(x))\
    \ \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits = sort(unique(x))\
    \ \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits = sort(unique(x))\
    \ \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits = sort(unique(x))\
    \ \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits = sort(unique(x))\
    \ \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits = sort(unique(x))\
    \ \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits = sort(unique(x))\
    \ \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits = sort(unique(x))\
    \ \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits = sort(unique(x))\
    \ \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits = sort(unique(x))\
    \ \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits = sort(unique(x))\
    \ \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits = sort(unique(x))\
    \ \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits = sort(unique(x))\
    \ \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits = sort(unique(x))\
    \ \n    \n    unique_digits = ", "    unique_digits = Set()\n    for n in x\n\
    \        if n % 2 == 0\n            push!(unique_digits, n)\n        end\n   \
    \ end\n    unique_digits\nend", "    \n    unique_digits = Vector{Int64}()\n \
    \   \n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    return unique_digits\nend", "    unique_digits\
    \ = sort(unique(sort(x)))\n    unique_digits = unique_digits[unique_digits .!=\
    \ 0]\n    return unique_digits\nend\n\"\"\"", "    \n    unique_digits = sort(unique(x))\
    \ \n    \n    unique_digits = unique_digits[unique_digits .!= 0]\n    \n    return\
    \ unique_digits\nend", "    unique_digits = Set()\n    for x in x\n        if\
    \ x mod 2 != 0\n            push!(unique_digits, x)\n        end\n    end\n  \
    \  return unique_digits\nend\n\"\"\"\n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = sort(unique(x)) \n    \n    unique_digits = sort(unique(x)) \n    \n    unique_digits\
    \ = ", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i mod 2\
    \ == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n    return\
    \ unique_digits\nend\n\"\"\"", "    \n    unique_digits = Set()\n    for i in\
    \ x\n        if i mod 2 == 0\n            push!(unique_digits, i)\n        end\n\
    \    end\n    unique_digits\nend\n\"\"\""]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
